{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "bytes(source, encoding)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "question_id": 9258}
{"snippet": "os.fwalk(top='.', follow_symlinks=False)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . Note however that , unlike other functions , the fwalk ( ) default value for `follow_symlinks` is False . With arguments `top`.", "question_id": 6991}
{"snippet": "tkinter.Tcl(className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "question_id": 10530}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "ctypes.WinDLL(name, use_errno=False)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `use_errno`.", "question_id": 1763}
{"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "ctypes.WinError(code=None, descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `code` is not specified , GetLastError is called to determine the error code . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1839}
{"snippet": "ZeroDivisionError", "intent": "Raised when the second argument of a division or modulo operation is zero.", "question_id": 3683}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}
{"snippet": "shelve.open(filename, flag='c', protocol=None)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8238}
{"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}
{"snippet": "sys_log_handler.encodePriority(facility, priority)", "intent": "Encodes the `facility` and `priority` into an integer .", "question_id": 5504}
{"snippet": "logging.handlers.WatchedFileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the WatchedFileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "question_id": 5445}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "base_http_request_handler.log_request(size='-')", "intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "question_id": 4650}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, fflags=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `fflags`.", "question_id": 8163}
{"snippet": "zlib.compressobj(strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `strategy` is used to tune the compression algorithm .", "question_id": 12912}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "struct.pack_into(buffer, offset, v1, v2)", "intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "question_id": 9560}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "XMLReader.setContentHandler(handler)", "intent": "Set the current ContentHandler . With arguments `handler`.", "question_id": 12615}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "writer.new_alignment(align)", "intent": "Set the alignment style . The `align` value can be any object , but by convention is a string or None , where None indicates that the writer \u2019 s \u201c preferred \u201d alignment should be used .", "question_id": 3842}
{"snippet": "definition.__name__", "intent": "The name of the class, function, method, descriptor, or generator instance.", "question_id": 9502}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12665}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}
{"snippet": "collections.namedtuple(typename, field_names, rename=False)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names .", "question_id": 1377}
{"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}
{"snippet": "traceback.FrameSummary(filename, lineno, name)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . With arguments `filename`, `lineno`, `name`.", "question_id": 10833}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "pdb.Pdb(completekey='tab', skip=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7350}
{"snippet": "gettext.bind_textdomain_codeset(domain, codeset=None)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4213}
{"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}
{"snippet": "json.dumps(obj, **kw, default=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `default`.", "question_id": 5288}
{"snippet": "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd)", "intent": "`realm` , `uri` , `user` , `passwd` are as for HTTPPasswordMgr.add_password ( ) .", "question_id": 11859}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}
{"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}
{"snippet": "os.link(src, dst, src_dir_fd=None)", "intent": "Create a hard link pointing to `src` named `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors , and not following symlinks .", "question_id": 6851}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "doctest.testfile(filename, globs=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `globs` gives a dict to be used as the globals when executing examples .", "question_id": 2770}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "bdb.run(cmd, locals=None)", "intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "question_id": 809}
{"snippet": "AU_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 9725}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "os.kill(pid, sig)", "intent": "Send signal `sig` to the process `pid` .", "question_id": 7037}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, fflags=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `fflags`.", "question_id": 8163}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787}
{"snippet": "os.pwrite(fd, str, offset)", "intent": "Write the bytestring in `str` to file descriptor `fd` at position of `offset` , leaving the file offset unchanged .", "question_id": 6788}
{"snippet": "dataclasses.astuple(instance)", "intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "question_id": 2181}
{"snippet": "tzinfo.fromutc(dt)", "intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "question_id": 2356}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1709}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `requestHandler` parameter should be a factory for request handler instances ; it defaults to SimpleXMLRPCRequestHandler .", "question_id": 12713}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "oss_audio_device.setparameters(format, nchannels, samplerate, strict=False)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods . If `strict` is true , setparameters ( ) checks to see if each parameter was actually set to the requested value , and raises OSSAudioError if not .", "question_id": 7192}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "webbrowser.register(name, constructor, instance=None, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12113}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "re.subn(pattern, repl, string, count=0, flags=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`, `flags`.", "question_id": 7958}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "ctypes.OleDLL(name, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `handle`.", "question_id": 1752}
{"snippet": "Node.toprettyxml(indent=\"\\t\")", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "question_id": 12414}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "audioop.findfit(fragment, reference)", "intent": "Try to match `reference` as well as possible to a portion of `fragment` ( which should be the longer fragment ) .", "question_id": 689}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}
{"snippet": "types.MappingProxyType(mapping)", "intent": "Read-only proxy of a `mapping` .", "question_id": 11206}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "pickletools.dis(pickle, out=None, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7422}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "Path.replace(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7309}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "os.execl(path, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . With arguments `arg0`, `arg1`.", "question_id": 7009}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "dis.disco(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2723}
{"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}
{"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595}
{"snippet": "str.format_map(mapping)", "intent": "Similar to str.format ( **mapping ) , except that `mapping` is used directly and not copied to a dict .", "question_id": 9198}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "buffered_io_base.read(size=-1)", "intent": "Read and return up to `size` bytes .", "question_id": 5093}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11677}
{"snippet": "element_tree.find(match)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12512}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "heapq.merge(*iterables, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `reverse` is a boolean value .", "question_id": 4323}
{"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}
{"snippet": "ssl.RAND_add(bytes, entropy)", "intent": "Mix the given `bytes` into the SSL pseudo-random number generator . The parameter `entropy` ( a float ) is a lower bound on the entropy contained in string ( so you can always use 0.0 ) .", "question_id": 8889}
{"snippet": "chunk.Chunk(file, align=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries .", "question_id": 1076}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8417}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdInput`.", "question_id": 9632}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "turtle.shapesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10989}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "subprocess.run(args, timeout=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9575}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stderr=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 540}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "xml.etree.ElementTree.XML(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12470}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`.", "question_id": 5585}
{"snippet": "turtle.screensize(canvheight=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvheight`, `bg`.", "question_id": 11053}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2185}
{"snippet": "urllib.parse.parse_qsl(qs, keep_blank_values=False, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11687}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . The type of socket opened depends on the `socktype` argument , which defaults to socket.SOCK_DGRAM and thus opens a UDP socket . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5499}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5865}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None, is_package=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`, `is_package`.", "question_id": 4937}
{"snippet": "logging.handlers.HTTPHandler(host, url, secure=False, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5549}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`.", "question_id": 323}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . With arguments `is_package`.", "question_id": 4915}
{"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}
{"snippet": "timeit.repeat(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10489}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "turtle.distance(x, y=None)", "intent": "Return the distance from the turtle to ( `x` , `y` ) , the given vector , or the given other turtle , in turtle step units .", "question_id": 10944}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "profile.Profile(timeunit=0.0)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time .", "question_id": 7671}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "warnings.formatwarning(message, category, filename, lineno, line=None)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12022}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "pprint.pprint(object, width=80)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7646}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820}
{"snippet": "prototype(address)", "intent": "Returns a foreign function at the specified `address` which must be an integer .", "question_id": 1801}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971}
{"snippet": "message.set_param(param, value, requote=True)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional header specifies an alternative header to Content-Type , and all parameters will be quoted as necessary unless optional `requote` is False ( the default is True ) . With arguments `param`.", "question_id": 3001}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, eq=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2188}
{"snippet": "bytecode.from_traceback(tb)", "intent": "Construct a Bytecode instance from the given traceback , setting current_offset to the instruction responsible for the exception . With arguments `tb`.", "question_id": 2699}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777}
{"snippet": "Path.resolve(strict=False)", "intent": "Make the path absolute , resolving any symlinks . If the path doesn \u2019 t exist and `strict` is True , FileNotFoundError is raised .", "question_id": 7311}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "os.utime(path, times=None, follow_symlinks=True)", "intent": "Set the access and modified `times` of the file specified by `path` . With arguments `follow_symlinks`.", "question_id": 6972}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "question_id": 10044}
{"snippet": "ast.dump(node, include_attributes=False)", "intent": "Return a formatted dump of the tree in `node` . If this is wanted , `include_attributes` can be set to true .", "question_id": 165}
{"snippet": "quopri.encodestring(s, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . With arguments `s`, `header`.", "question_id": 7881}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12460}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . The type of socket opened depends on the `socktype` argument , which defaults to socket.SOCK_DGRAM and thus opens a UDP socket . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5499}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "SimpleXMLRPCServer.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "question_id": 12735}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "ur_lopener.open_unknown(fullurl, data=None)", "intent": "Overridable interface to open unknown URL types . With arguments `fullurl`, `data`.", "question_id": 11895}
{"snippet": "set >= other", "intent": "Test whether every element in other is in the set.", "question_id": 9443}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8350}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}
{"snippet": "nntplib.NNTP_SSL(host, timeout, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `password`.", "question_id": 6422}
{"snippet": "time.isoformat(timespec='auto')", "intent": "Return a string representing the time in ISO 8601 format , HH : MM : SS.ffffff or , if microsecond is 0 , HH : MM : SS If utcoffset ( ) does not return None , a string is appended , giving the UTC offset : HH : MM : SS.ffffff+HH : MM [ : SS [ .ffffff ] ] or , if self.microsecond is 0 , HH : MM : SS+HH : MM [ : SS [ .ffffff ] ] . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2345}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "email.generator.BytesGenerator(outfp)", "intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3078}
{"snippet": "py_compile.main(args=None)", "intent": "Compile several source files . The files named in `args` ( or on the command line , if args is None ) are compiled and the resulting byte-code is cached in the normal manner .", "question_id": 7836}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "shutil.copytree(src, dst, ignore=None, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8331}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "logging.handlers.WatchedFileHandler(filename, mode='a')", "intent": "Returns a new instance of the WatchedFileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5441}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, loop=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `loop`.", "question_id": 527}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "nntplib.NNTP(host, port=119, usenetrc=False)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6418}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "mailbox.mbox(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5770}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "email.iterators.typed_subpart_iterator(msg, subtype=None)", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3212}
{"snippet": "nntplib.NNTP_SSL(host, port=563, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "question_id": 6437}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "pickle.loads(bytes_object, fix_imports=True, errors=\"strict\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7384}
{"snippet": "pickle.load(file, fix_imports=True, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7375}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "textwrap.TextWrapper(**kwargs)", "intent": "The TextWrapper constructor accepts a number of optional keyword arguments . With arguments `**kwargs`.", "question_id": 10326}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}
{"snippet": "xmlparser.EndNamespaceDeclHandler(prefix)", "intent": "Called when the closing tag is reached for an element that contained a namespace declaration . With arguments `prefix`.", "question_id": 7768}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}
{"snippet": "warnings.showwarning(message, category, filename, lineno, file=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12018}
{"snippet": "email.encoders.encode_7or8bit(msg)", "intent": "This doesn \u2019 t actually modify the message \u2019 s payload , but it does set the Content-Transfer-Encoding header to either 7bit or 8bit as appropriate , based on the payload data . With arguments `msg`.", "question_id": 3071}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "Pattern.finditer(string, pos)", "intent": "Similar to the finditer ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7985}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "credits", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1613}
{"snippet": "config_parser.items(section, raw=False)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1557}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "config_parser.options(section)", "intent": "Return a list of options available in the specified `section` .", "question_id": 1510}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367}
{"snippet": "multiprocessing.sharedctypes.synchronized(obj, lock)", "intent": "Return a process-safe wrapper object for a ctypes object which uses `lock` to synchronize access . With arguments `obj`.", "question_id": 6276}
{"snippet": "unittest.mock.Mock(**kwargs, name=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `name`.", "question_id": 11565}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "compileall.compile_path(quiet=0)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `quiet`.", "question_id": 1433}
{"snippet": "xml.parsers.expat.ErrorString(errno)", "intent": "Returns an explanatory string for a given error number `errno` .", "question_id": 7727}
{"snippet": "widget.insert(parent, index, **kw, iid=None)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "question_id": 10641}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}
{"snippet": "platform.mac_ver('', ''), release='', versioninfo=('', machine='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7516}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "threading.Timer(interval, function, args=None, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10415}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}
{"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED, allowZip64=True)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`, `allowZip64`.", "question_id": 12854}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089}
{"snippet": "doctest.DocTestRunner(verbose=None)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity .", "question_id": 2863}
{"snippet": "CookiePolicy.set_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be accepted from server . `request` is an object implementing the interface defined by the documentation for CookieJar.extract_cookies ( ) .", "question_id": 4532}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdOutput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdOutput`.", "question_id": 9633}
{"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "question_id": 10044}
{"snippet": "random.choices(population, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7901}
{"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "question_id": 2020}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}
{"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}
{"snippet": "mmap.move(dest, src, count)", "intent": "Copy the `count` bytes starting at offset `src` to the destination index `dest` .", "question_id": 6008}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "unittest.mock.Mock(**kwargs, name=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `name`.", "question_id": 11565}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "os.lchflags(path, flags)", "intent": "Set the `flags` of `path` to the numeric flags , like chflags ( ) , but do not follow symbolic links .", "question_id": 6847}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "random.randrange(start, stop)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7892}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "xmlrpc.client.ServerProxy(uri, verbose=False)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`, `verbose`.", "question_id": 12672}
{"snippet": "logging.StreamHandler(stream=None)", "intent": "Returns a new instance of the StreamHandler class . If `stream` is specified , the instance will use it for logging output ; otherwise , sys.stderr will be used .", "question_id": 5422}
{"snippet": "struct.pack_into(format, buffer, offset, v1, v2)", "intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "question_id": 9552}
{"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "doctest.Example(source, want, lineno=0, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `options`.", "question_id": 2833}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "ArgumentParser.print_usage(file=None)", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line . If `file` is None , sys.stdout is assumed .", "question_id": 104}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "urllib.parse.urlparse(urlstring, scheme='')", "intent": "Parse a URL into six components , returning a 6-item named tuple . It should be the same type ( text or bytes ) as `urlstring` , except that the default value `` is always allowed , and is automatically converted to b '' if appropriate . This corresponds to the general structure of a URL : `scheme` : //netloc/path ; parameters ? query # fragment .", "question_id": 11666}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "socket.ioctl(control, option)", "intent": "The ioctl ( ) method is a limited interface to the WSAIoctl system interface . Currently only the following `control` codes are supported : SIO_RCVALL , SIO_KEEPALIVE_VALS , and SIO_LOOPBACK_FAST_PATH . With arguments `option`.", "question_id": 8688}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344}
{"snippet": "bytes.rpartition(sep)", "intent": "Split the sequence at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9323}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}
{"snippet": "test.support.open_urlresource(url, *args, **kw)", "intent": "Open `url` . With arguments `*args`, `**kw`.", "question_id": 10239}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8417}
{"snippet": "doctest.debug(module, name, pm=False)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above . Optional argument `pm` controls whether post-mortem debugging is used .", "question_id": 2889}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "os.minor(device)", "intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6883}
{"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}
{"snippet": "textwrap.TextWrapper(**kwargs)", "intent": "The TextWrapper constructor accepts a number of optional keyword arguments . With arguments `**kwargs`.", "question_id": 10326}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "json.dumps(obj, **kw, cls=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5285}
{"snippet": "@dataclasses.dataclass(frozen=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `frozen`.", "question_id": 2163}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "sys._getframe(depth)", "intent": "Return a frame object from the call stack . If optional integer `depth` is given , return the frame object that many calls below the top of the stack .", "question_id": 9805}
{"snippet": "timeit.repeat(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10489}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11626}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5331}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "lzma.LZMAFile(filters=None)", "intent": "Open an LZMA-compressed file in binary `mode` . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5672}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "turtle.setposition(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10917}
{"snippet": "turtle.pen(**pendict, pen=None)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10959}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `comment_prefixes`.", "question_id": 1574}
{"snippet": "os.utime(path, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6968}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "joinable_queue.poll(timeout)", "intent": "Return whether there is any data available to be read . If `timeout` is not specified then it will return immediately .", "question_id": 6234}
{"snippet": "http.client.HTTPSConnection(host, timeout)", "intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `timeout`.", "question_id": 4382}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "mmap.mmap(fileno, length, offset, tagname=None)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset . `tagname` , if specified and not None , is a string giving a tag name for the mapping .", "question_id": 5977}
{"snippet": "codecs.decode(obj, encoding='utf-8')", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1197}
{"snippet": "ArgumentParser.exit(status=0, message=None)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 113}
{"snippet": "loop.getaddrinfo(host, port, family=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`.", "question_id": 290}
{"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5419}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}
{"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "re.error(msg, pattern=None, pos=None)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . It is never an error if a string contains no match for a `pattern` . With arguments `msg`, `pos`.", "question_id": 7964}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`.", "question_id": 10854}
{"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "directory.start_component(component=None, feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6099}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "gettext.find(domain, localedir=None, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4228}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "socket.setsockopt(level, optname, None, optlen: int)", "intent": "Set the value of the given socket option ( see the Unix manual page setsockopt ( 2 ) ) . The value can be an integer , `None` or a bytes-like object representing a buffer . With arguments `level`, `optname`, `optlen: int`.", "question_id": 8739}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "email_message.set_boundary(boundary)", "intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "question_id": 3278}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`, `subtype`.", "question_id": 3047}
{"snippet": "str.split(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9244}
{"snippet": "asyncio.shield(aw, loop=None)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task . With arguments `loop`.", "question_id": 604}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "email.message_from_string(s, _class=None)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) . `_class` and `policy` are interpreted as with the Parser class constructor .", "question_id": 3405}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "compile(source, filename, mode, flags=0, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3997}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5873}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen, flags)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . Set mode , IV , AEAD associated data length and `flags` for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8727}
{"snippet": "os.lchown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6849}
{"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}
{"snippet": "condition.wait_for(predicate)", "intent": "Wait until a `predicate` becomes true .", "question_id": 580}
{"snippet": "window.chgat(y, x, attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2032}
{"snippet": "gzip.GzipFile(filename=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value .", "question_id": 4283}
{"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520}
{"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "WriteTransport.set_write_buffer_limits(low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 411}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12458}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "FTP.login(user='anonymous', passwd='', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3922}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "xml.etree.ElementTree.XML(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12470}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "ArgumentParser.add_argument_group(description=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 97}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984}
{"snippet": "warnings.filterwarnings(action, message='')", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`.", "question_id": 12024}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "doc_test_runner.run(test, out=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2875}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "platform.mac_ver('', ''), release='', versioninfo=('', machine='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7516}
{"snippet": "re.error(msg, pos=None)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . With arguments `msg`, `pos`.", "question_id": 7963}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 759}
{"snippet": "decimal.Context(prec=None, rounding=None)", "intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "question_id": 2508}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "xml.sax.saxutils.unescape(data, entities={})", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12655}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "Pattern.findall(string, pos, endpos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7981}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 835}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629}
{"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}
{"snippet": "bytes(source)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`.", "question_id": 3987}
{"snippet": "output_checker.check_output(want, got, optionflags)", "intent": "Return True iff the actual output from an example ( `got` ) matches the expected output ( `want` ) . With arguments `optionflags`.", "question_id": 2884}
{"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}
{"snippet": "chunk.Chunk(file, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1078}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "ipaddress.collapse_addresses(addresses)", "intent": "Return an iterator of the collapsed IPv4Network or IPv6Network objects . `addresses` is an iterator of IPv4Network or IPv6Network objects .", "question_id": 5235}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "profile.Profile(timeunit=0.0, builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time . With arguments `builtins`.", "question_id": 7678}
{"snippet": "config_parser.items(raw=False)", "intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1553}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}
{"snippet": "doctest.testmod(globs=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2779}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "mh.__delitem__(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5787}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "str.rstrip(chars)", "intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9239}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "nntplib.NNTP_SSL(host, port=563, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `user`.", "question_id": 6436}
{"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "nntplib.NNTP(host, timeout, user=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6401}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "textwrap.fill(text, **kwargs)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`.", "question_id": 10320}
{"snippet": "bytes(source)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`.", "question_id": 3987}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "Queue.put(item, block=True)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7850}
{"snippet": "buffered_io_base.read(size=-1)", "intent": "Read and return up to `size` bytes .", "question_id": 5093}
{"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "socket.getaddrinfo(host, port)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None .", "question_id": 8635}
{"snippet": "base_http_request_handler.send_header(keyword, value)", "intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "question_id": 4643}
{"snippet": "ContentHandler.startPrefixMapping(prefix, uri)", "intent": "Begin the scope of a prefix-URI Namespace mapping . With arguments `prefix`, `uri`.", "question_id": 12573}
{"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}
{"snippet": "http.client.HTTPConnection(host, timeout, port=None)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .", "question_id": 4367}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "cmd.Cmd(completekey='tab', stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1132}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "itertools.islice(iterable, start, stop, step)", "intent": "Make an iterator that returns selected elements from the `iterable` . If `start` is non-zero , then elements from the iterable are skipped until start is reached . If `stop` is None , then iteration continues until the iterator is exhausted , if at all ; otherwise , it stops at the specified position . Afterward , elements are returned consecutively unless `step` is set higher than one which results in items being skipped .", "question_id": 5256}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589}
{"snippet": "itertools.permutations(iterable, r=None)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5259}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}
{"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}
{"snippet": "socket.CMSG_SPACE(length)", "intent": "Return the buffer size needed for recvmsg ( ) to receive an ancillary data item with associated data of the given `length` , along with any trailing padding .", "question_id": 8666}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237}
{"snippet": "tempfile.mkdtemp(suffix=None, dir=None)", "intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "question_id": 10086}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "Telnet.open(host, port=0)", "intent": "Connect to a `host` . The optional second argument is the `port` number , which defaults to the standard Telnet port ( 23 ) .", "question_id": 10021}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "Queue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7855}
{"snippet": "gzip.GzipFile(filename=None, mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4291}
{"snippet": "message.as_string(unixfrom=False, maxheaderlen=0)", "intent": "Return the entire message flattened as a string . When optional `unixfrom` is true , the envelope header is included in the returned string . For backward compatibility reasons , `maxheaderlen` defaults to 0 , so if you want a different value you must override it explicitly ( the value specified for max_line_length in the `policy` will be ignored by this method ) .", "question_id": 2942}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "extension_file_loader.create_module(spec)", "intent": "Creates the module object from the given specification in accordance with PEP 489 . With arguments `spec`.", "question_id": 4906}
{"snippet": "WriteTransport.set_write_buffer_limits(low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 411}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "base64.urlsafe_b64encode(s)", "intent": "Encode bytes-like object `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the encoded bytes .", "question_id": 716}
{"snippet": "unittest.mock.Mock(**kwargs, side_effect=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `side_effect`.", "question_id": 11562}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425}
{"snippet": "window.addch(y, x, ch)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2003}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "Path.open(mode='r', encoding=None)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `encoding`.", "question_id": 7299}
{"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}
{"snippet": "email.generator.BytesGenerator(outfp)", "intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3078}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "null_translations.lngettext(singular, plural, n)", "intent": "Equivalent to gettext ( ) and ngettext ( ) , but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with set_output_charset ( ) . With arguments `singular`, `plural`, `n`.", "question_id": 4253}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255}
{"snippet": "mimetypes.MimeTypes(strict=True)", "intent": "This class represents a MIME-types database . With arguments `strict`.", "question_id": 5958}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938}
{"snippet": "POP3.list()", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) .", "question_id": 7610}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "codecs.ignore_errors(exception)", "intent": "Implements the 'ignore ' error handling : malformed data is ignored and encoding or decoding is continued without further notice . With arguments `exception`.", "question_id": 1257}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}
{"snippet": "message.get_param(param, header='content-type', unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2997}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`.", "question_id": 4935}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "email.utils.encode_rfc2231(s, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3481}
{"snippet": "functools.update_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4158}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}
{"snippet": "test_case.skipTest(reason)", "intent": "Calling this during a test method or setUp ( ) skips the current test . With arguments `reason`.", "question_id": 11371}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "tempfile.mkstemp(prefix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10080}
{"snippet": "bytes.rpartition(sep)", "intent": "Split the sequence at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9323}
{"snippet": "test_case.assertIsInstance(obj, cls, msg=None)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) . With arguments `msg`.", "question_id": 11396}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "email.encoders.encode_noop(msg)", "intent": "This does nothing ; it doesn \u2019 t even set the Content-Transfer-Encoding header . With arguments `msg`.", "question_id": 3072}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "loop.start_tls(transport, protocol, sslcontext, server_hostname=None)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`, `server_hostname`.", "question_id": 266}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072}
{"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}
{"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787}
{"snippet": "_c_data.from_buffer(source)", "intent": "This method returns a ctypes instance that shares the buffer of the `source` object .", "question_id": 1844}
{"snippet": "gzip.open(filename, mode='rb', newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4281}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "ZipFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object .", "question_id": 12814}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "types.prepare_class(name, bases=())", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11179}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "os.posix_fallocate(fd, offset, len)", "intent": "Ensures that enough disk space is allocated for the file specified by `fd` starting from `offset` and continuing for `len` bytes .", "question_id": 6775}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)", "intent": "Handle an unparsed entity declaration event . With arguments `name`, `publicId`, `systemId`, `ndata`.", "question_id": 12584}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11704}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "question_id": 10044}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='', osinfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7494}
{"snippet": "io.open(file, opener=None)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `opener`.", "question_id": 5058}
{"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}
{"snippet": "compileall.compile_file(fullname, rx=None)", "intent": "Compile the file with path `fullname` . If `rx` is given , its search method is passed the full path name to the file being compiled , and if it returns a true value , the file is not compiled and True is returned .", "question_id": 1422}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "subprocess.check_call(args, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9671}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "logging.Formatter(datefmt=None, style='%')", "intent": "Returns a new instance of the Formatter class . If no `datefmt` is specified , a format is used which is described in the formatTime ( ) documentation . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5616}
{"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)", "intent": "The same as RawValue ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes object . With arguments `typecode_or_type`, `*args`.", "question_id": 6274}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "typing.Dict(dict, MutableMappingKT, VT)", "intent": "A generic version of `dict` . With arguments `MutableMappingKT`, `VT`.", "question_id": 11298}
{"snippet": "urllib.request.HTTPSHandler(debuglevel=0)", "intent": "A class to handle opening of HTTPS URLs . With arguments `debuglevel`.", "question_id": 11803}
{"snippet": "socket.recv_into(buffer)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8716}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6799}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}
{"snippet": "datetime.time(microsecond=0)", "intent": "All arguments are optional . With arguments `microsecond`.", "question_id": 2318}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "timeit.Timer(stmt='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals .", "question_id": 10498}
{"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "null_importer.find_module(fullname)", "intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`.", "question_id": 4782}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "asyncio.open_connection(limit=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . `limit` determines the buffer size limit used by the returned StreamReader instance .", "question_id": 467}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}
{"snippet": "nntplib.NNTP_SSL(host, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "question_id": 6432}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "os.rename(src, dst, dst_dir_fd=None)", "intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "question_id": 6894}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "ctypes.OleDLL(name, use_last_error=False)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `use_last_error`.", "question_id": 1754}
{"snippet": "doctest.DebugRunner(verbose=None)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `verbose`.", "question_id": 2896}
{"snippet": "fileinput.FileInput(files=None, inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "question_id": 3807}
{"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "frozenset(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9433}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "random.choices(population, weights=None, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7899}
{"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "pickle.load(file, fix_imports=True, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7375}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71}
{"snippet": "base_selector.get_key(fileobj)", "intent": "Return the key associated with a registered file object . With arguments `fileobj`.", "question_id": 8223}
{"snippet": "int.to_bytes(length, byteorder, signed=False)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument determines whether two \u2019 s complement is used to represent the integer .", "question_id": 9144}
{"snippet": "gettext.bindtextdomain(domain)", "intent": "Bind the `domain` to the locale directory `localedir` .", "question_id": 4210}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "os.getpriority(which, who)", "intent": "Get program scheduling priority . The value `which` is one of PRIO_PROCESS , PRIO_PGRP , or PRIO_USER , and `who` is interpreted relative to which ( a process identifier for PRIO_PROCESS , process group identifier for PRIO_PGRP , and a user ID for PRIO_USER ) .", "question_id": 6684}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "xml.etree.ElementTree.XML(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12470}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "ZipFile.extractall(path=None, members=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to .", "question_id": 12822}
{"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939}
{"snippet": "lzma.LZMAFile(mode=\"r\")", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5668}
{"snippet": "bdb.set_break(filename, lineno, cond, funcname, temporary=0)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`, `temporary`.", "question_id": 794}
{"snippet": "pprint.pprint(object, width=80)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7646}
{"snippet": "dispatcher.create_socket(family=socket.AF_INET)", "intent": "This is identical to the creation of a normal socket , and will use the same options for creation . With arguments `family`.", "question_id": 664}
{"snippet": "int.from_bytes(bytes, byteorder, signed=False)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument indicates whether two \u2019 s complement is used to represent the integer .", "question_id": 9146}
{"snippet": "tkinter.Tcl(screenName=None, className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `screenName`, `className`.", "question_id": 10533}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "loop.getaddrinfo(host, port, family=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `proto`.", "question_id": 295}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}
{"snippet": "loop.create_unix_connection(protocol_factory, ssl=None)", "intent": "Create a Unix connection . With arguments `protocol_factory`, `ssl`.", "question_id": 224}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12457}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "code.InteractiveInterpreter(locals=None)", "intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) . The optional `locals` argument specifies the dictionary in which code will be executed ; it defaults to a newly created dictionary with key '__name__ ' set to '__console__ ' and key '__doc__ ' set to None .", "question_id": 1156}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151}
{"snippet": "argparse.FileType(mode='r', encoding=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `encoding`.", "question_id": 91}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "trace.Trace(infile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "question_id": 10713}
{"snippet": "DatagramProtocol.error_received(exc)", "intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "question_id": 441}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "question_id": 11477}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "traceback.print_exc(limit=None, chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10750}
{"snippet": "tarfile.open(**kwargs)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9890}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "argparse.FileType(bufsize=-1, errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `errors`.", "question_id": 94}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12454}
{"snippet": "gzip.GzipFile(fileobj=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value .", "question_id": 4286}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "os.chown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6839}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}
{"snippet": "json.dumps(obj, **kw, cls=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5285}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "traceback.print_exception(etype, value, tb, chain=True)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . If `chain` is true ( the default ) , then chained exceptions ( the __cause__ or __context__ attributes of the exception ) will be printed as well , like the interpreter itself does when printing an unhandled exception . With arguments `etype`, `value`.", "question_id": 10740}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a')", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used .", "question_id": 5459}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "turtle.fd(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10904}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "question_id": 3003}
{"snippet": "logging.handlers.NTEventLogHandler(appname, dllname=None)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `dllname` should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log ( if not specified , 'win32service.pyd ' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions .", "question_id": 5507}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9174}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}
{"snippet": "code.compile_command(source)", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1171}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "window.chgat(attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "question_id": 2030}
{"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "xmlparser.StartNamespaceDeclHandler(prefix, uri)", "intent": "Called when an element contains a namespace declaration . With arguments `prefix`, `uri`.", "question_id": 7767}
{"snippet": "deque.extendleft(iterable)", "intent": "Extend the left side of the deque by appending elements from `iterable` .", "question_id": 1359}
{"snippet": "tokenize.tokenize(readline)", "intent": "The tokenize ( ) generator requires one argument , `readline` , which must be a callable object which provides the same interface as the io.IOBase.readline ( ) method of file objects .", "question_id": 10701}
{"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}
{"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277}
{"snippet": "sqlite3.PARSE_DECLTYPES", "intent": "This constant is meant to be used with the detect_types parameter of the connect() function.", "question_id": 8795}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "shlex.error_leader(infile=None)", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `infile`.", "question_id": 8291}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6040}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "question_id": 11728}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "heapq.heappush(heap, item)", "intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "question_id": 4316}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "IMAP4.login_cram_md5(user, password)", "intent": "Force use of CRAM-MD5 authentication when identifying the client to protect the `password` . With arguments `user`.", "question_id": 4710}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "patch.dict(in_dict, **kwargs, clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11630}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12794}
{"snippet": "smtp_server.process_message(peer, mailfrom, rcpttos, data, **kwargs)", "intent": "Raise a NotImplementedError exception . `peer` is the remote host \u2019 s address , `mailfrom` is the envelope originator , `rcpttos` are the envelope recipients and `data` is a string containing the contents of the e-mail ( which should be in RFC 5321 format ) . Implementations of process_message should use the `**kwargs` signature to accept arbitrary keyword arguments , since future feature enhancements may add keys to the kwargs dictionary .", "question_id": 8422}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871}
{"snippet": "codecs.decode(obj)", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1196}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "element.findtext(match, namespaces=None)", "intent": "Finds text for the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12497}
{"snippet": "mimetypes.guess_extension(type, strict=True)", "intent": "Guess the extension for a file based on its MIME `type` , given by type . The optional `strict` argument has the same meaning as with the guess_type ( ) function .", "question_id": 5944}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "textbox.edit(validator)", "intent": "This is the entry point you will normally use . If `validator` is supplied , it must be a function .", "question_id": 2136}
{"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10249}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "HTTPConnection.putrequest(method, url, skip_accept_encoding=False)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) . To disable automatic sending of Host : or Accept-Encoding : headers ( for example to accept additional content encodings ) , specify `skip_host` or `skip_accept_encoding` with non-False values .", "question_id": 4446}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}
{"snippet": "math.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 5895}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "test.support.import_module(name, required_on(), deprecated=False)", "intent": "This function imports and returns the named module . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`, `required_on()`.", "question_id": 10241}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "sys_log_handler.mapPriority(levelname)", "intent": "Maps a logging level name to a syslog priority name . With arguments `levelname`.", "question_id": 5505}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}
{"snippet": "threading.Timer(interval, function)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10412}
{"snippet": "os.spawnve(mode, path, args, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7058}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "IMAP4.setannotation(mailbox, entry, attribute)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "question_id": 4735}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "ContentHandler.startPrefixMapping(prefix, uri)", "intent": "Begin the scope of a prefix-URI Namespace mapping . With arguments `prefix`, `uri`.", "question_id": 12573}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}
{"snippet": "email_message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 3244}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "operator.__invert__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6543}
{"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "Wave_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 12069}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "operator.methodcaller(name, args...)", "intent": "Return a callable object that calls the method `name` on its operand . With arguments `args...`.", "question_id": 6586}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "datetime.timedelta(milliseconds=0)", "intent": "All arguments are optional and default to 0 . With arguments `milliseconds`.", "question_id": 2208}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "logging.handlers.SocketHandler(host, port)", "intent": "Returns a new instance of the SocketHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5482}
{"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "snapshot.compare_to(old_snapshot: Snapshot, key_type: str, cumulative: bool=False)", "intent": "Compute the differences with an old snapshot . With arguments `old_snapshot: Snapshot`, `key_type: str`, `cumulative: bool`.", "question_id": 10872}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}
{"snippet": "str.maketrans(x, y, z)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` . With arguments `z`.", "question_id": 9220}
{"snippet": "unittest.main(defaultTest=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11547}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "Queue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7855}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "doctest.DocTestRunner(verbose=None)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity .", "question_id": 2863}
{"snippet": "http.client.HTTPSConnection(host, timeout)", "intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `timeout`.", "question_id": 4382}
{"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "DatagramProtocol.datagram_received(data, addr)", "intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "question_id": 440}
{"snippet": "ctypes.CDLL(name, use_errno=False)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `use_errno`.", "question_id": 1743}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "tuple(iterable)", "intent": "Tuples may be constructed in a number of ways : The constructor builds a tuple whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9160}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "traceback.FrameSummary(filename, lineno, name, locals=None)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . It may optionally have a stringified version of the frames `locals` included in it . With arguments `filename`, `lineno`, `name`.", "question_id": 10835}
{"snippet": "config_parser.write(fileobject)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . With arguments `fileobject`.", "question_id": 1561}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "OptionParser.add_option(*opt_str, attr=value)", "intent": "To define an option with only a short option string : With arguments `*opt_str`, `attr`.", "question_id": 6625}
{"snippet": "socket.getaddrinfo(host, port, family=0, type=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8640}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "email_message.get_content(*args, **kw)", "intent": "Call the get_content ( ) method of the `content_manager` , passing self as the message object , and passing along any other arguments or keywords as additional arguments . With arguments `*args`, `**kw`.", "question_id": 3290}
{"snippet": "pickle.loads(bytes_object, fix_imports=True, encoding=\"ASCII\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7383}
{"snippet": "pdb.set_trace(header=None)", "intent": "Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .", "question_id": 7337}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "formatter.push_style(*styles)", "intent": "Push any number of arbitrary style specifications . With arguments `*styles`.", "question_id": 3832}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}
{"snippet": "ctypes.OleDLL(name, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `handle`.", "question_id": 1752}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11149}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "loop.getaddrinfo(host, port, family=0, flags=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `flags`.", "question_id": 296}
{"snippet": "logging.handlers.DatagramHandler(host, port)", "intent": "Returns a new instance of the DatagramHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5490}
{"snippet": "dataclasses.field(default=MISSING, repr=True)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . With arguments `repr`.", "question_id": 2176}
{"snippet": "DatagramProtocol.error_received(exc)", "intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "question_id": 441}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}
{"snippet": "connection.backup(target, pages=0, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8834}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "operator.__abs__(obj)", "intent": "Return the absolute value of `obj` .", "question_id": 6531}
{"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327}
{"snippet": "Queue.put(item, block=True, timeout=None)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7852}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "file_handler.emit(record)", "intent": "Outputs the `record` to the file .", "question_id": 5435}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "getpass.getpass(stream=None)", "intent": "Prompt the user for a password without echoing . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4206}
{"snippet": "textwrap.TextWrapper(**kwargs)", "intent": "The TextWrapper constructor accepts a number of optional keyword arguments . With arguments `**kwargs`.", "question_id": 10326}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "os.fwalk(top='.', follow_symlinks=False)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . Note however that , unlike other functions , the fwalk ( ) default value for `follow_symlinks` is False . With arguments `top`.", "question_id": 6991}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "test.support.import_fresh_module(name, fresh=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10247}
{"snippet": "turtle.onscreenclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`.", "question_id": 11076}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "config_parser.items(section)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1556}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}
{"snippet": "json.load(fp, **kw, cls=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . With arguments `**kw`.", "question_id": 5291}
{"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "`authreq` should be the name of the header where the information about the realm is included in the request , `host` should be the host to authenticate to , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11868}
{"snippet": "dis.stack_effect(opcode)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2732}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "sys.set_asyncgen_hooks(firstiter, finalizer)", "intent": "Accepts two optional keyword arguments which are callables that accept an asynchronous generator iterator as an argument . The `firstiter` callable will be called when an asynchronous generator is iterated for the first time . The `finalizer` will be called when an asynchronous generator is about to be garbage collected .", "question_id": 9840}
{"snippet": "ur_lopener.retrieve(url, filename=None, reporthook=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) .", "question_id": 11900}
{"snippet": "set < other", "intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "question_id": 9441}
{"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}
{"snippet": "unittest.main(testLoader=unittest.defaultTestLoader)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "question_id": 11550}
{"snippet": "doctest.Example(source, want, lineno=0, indent=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `indent`.", "question_id": 2832}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "locale.resetlocale(category=LC_ALL)", "intent": "Sets the locale for `category` to the default setting .", "question_id": 5381}
{"snippet": "message.set_charset(charset)", "intent": "Set the character set of the payload to `charset` , which can either be a Charset instance ( see email.charset ) , a string naming a character set , or None .", "question_id": 2962}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "chunk.Chunk(file, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1077}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "stream_reader.read(size, chars, firstline)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return . The `firstline` flag indicates that it would be sufficient to only return the first line , if there are decoding errors on later lines .", "question_id": 1286}
{"snippet": "dis.dis(depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2710}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "tempfile.TemporaryDirectory(suffix=None, dir=None)", "intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `suffix`, `dir`.", "question_id": 10068}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "itertools.permutations(iterable, r=None)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5259}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "pdb.Pdb(completekey='tab', stdin=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7348}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "calendar.itermonthdays4(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 916}
{"snippet": "locale.format(format, val, monetary=False)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`, `monetary`.", "question_id": 5390}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}
{"snippet": "test.support.bind_port(sock)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`.", "question_id": 10258}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "os.walk(top, topdown=True, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6980}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "tarfile.TarFile(dereference=False)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . If `dereference` is False , add symbolic and hard links to the archive .", "question_id": 9919}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "doctest.DocTestFinder(verbose=False, exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2847}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "datetime.datetime(year, month, day, tzinfo=None)", "intent": "The `year` , `month` and `day` arguments are required . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2252}
{"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "uuid.uuid1(node=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address .", "question_id": 11958}
{"snippet": "turtle.ondrag(fun, btn=1)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`.", "question_id": 11028}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "sys.setswitchinterval(interval)", "intent": "Set the interpreter \u2019 s thread switch `interval` ( in seconds ) .", "question_id": 9838}
{"snippet": "os.link(src, dst, src_dir_fd=None)", "intent": "Create a hard link pointing to `src` named `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors , and not following symlinks .", "question_id": 6851}
{"snippet": "shlex.split(s, comments=False, posix=True)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8271}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "os.fpathconf(fd, name)", "intent": "Return system configuration information relevant to an open file . As of Python 3.3 , this is equivalent to os.pathconf ( `fd` , name ) . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX.1 , Unix 95 , Unix 98 , and others ) .", "question_id": 6722}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657}
{"snippet": "quopri.decodestring(s, header=False)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`, `header`.", "question_id": 7878}
{"snippet": "scheduler.run(blocking=True)", "intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "question_id": 8129}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "dispatcher.create_socket(family=socket.AF_INET)", "intent": "This is identical to the creation of a normal socket , and will use the same options for creation . With arguments `family`.", "question_id": 664}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820}
{"snippet": "test.support.run_doctest(module, verbosity=None)", "intent": "Run doctest.testmod ( ) on the given `module` . If `verbosity` is None , doctest.testmod ( ) is run with verbosity set to verbose .", "question_id": 10159}
{"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "multiprocessing.Process(kwargs={})", "intent": "Process objects represent activity that is run in a separate process . `kwargs` is a dictionary of keyword arguments for the target invocation .", "question_id": 6170}
{"snippet": "window.insch(y, x, ch, attr)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , moving the line from position x right by one character .", "question_id": 2073}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "__import__(name, globals=None, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4141}
{"snippet": "tempfile.NamedTemporaryFile(newline=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `newline`.", "question_id": 10047}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}
{"snippet": "os.fchmod(fd, mode)", "intent": "Change the `mode` of the file given by `fd` to the numeric mode .", "question_id": 6719}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "datetime.replace(tzinfo=self.tzinfo)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2292}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "urllib.request.URLopener(**x509, proxies=None)", "intent": "Base class for opening and reading URLs . The optional `proxies` parameter should be a dictionary mapping scheme names to proxy URLs , where an empty dictionary turns proxies off completely . With arguments `**x509`.", "question_id": 11891}
{"snippet": "DatagramProtocol.datagram_received(data, addr)", "intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "question_id": 440}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "See the documentation for the functions explained above . With arguments `function`, `*args`, `**kwds`.", "question_id": 7359}
{"snippet": "email.generator.DecodedGenerator(outfp, fmt=None)", "intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "question_id": 3109}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "test.support.check__all__(test_case, module, extra=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "question_id": 10279}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}
{"snippet": "random.choices(population, weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7900}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset . With arguments `access`.", "question_id": 5978}
{"snippet": "property(fset=None, fdel=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . `fdel` is a function for deleting an attribute value .", "question_id": 4093}
{"snippet": "unpickler.find_class(module, name)", "intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "question_id": 7408}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "OpenerDirector.open(url, timeout)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11835}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "shelve.DbfilenameShelf(filename, flag='c', protocol=None)", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function . The optional `protocol` and `writeback` parameters have the same interpretation as for the Shelf class .", "question_id": 8264}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "mmap.flush(offset, size)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6005}
{"snippet": "concurrent.futures.as_completed(fs, timeout=None)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) . The returned iterator raises a concurrent.futures.TimeoutError if __next__ ( ) is called and the result isn \u2019 t available after `timeout` seconds from the original call to as_completed ( ) .", "question_id": 1485}
{"snippet": "argparse.ArgumentParser(usage=None)", "intent": "Create a new ArgumentParser object . With arguments `usage`.", "question_id": 40}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "doctest.testfile(filename, report=True)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `report` prints a summary at the end when true , else prints nothing at the end .", "question_id": 2772}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "datetime.datetime(year, month, day, hour=0, microsecond=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `microsecond`.", "question_id": 2256}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "tty.setraw(fd, when=termios.TCSAFLUSH)", "intent": "Change the mode of the file descriptor `fd` to raw . If `when` is omitted , it defaults to termios.TCSAFLUSH , and is passed to termios.tcsetattr ( ) .", "question_id": 10900}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "urllib.request.urlopen(url, cadefault=False)", "intent": "Open the URL `url` , which can be either a string or a Request object . The `cadefault` parameter is ignored .", "question_id": 11756}
{"snippet": "SimpleXMLRPCServer.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "question_id": 12735}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "zlib.crc32(data, value)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 0 is used .", "question_id": 12917}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "json.dump(obj, fp, **kw, separators=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If specified , `separators` should be an ( item_separator , key_separator ) tuple . With arguments `**kw`.", "question_id": 5277}
{"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "itertools.count(start=0)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5247}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "asyncio.open_connection(sock=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `sock`.", "question_id": 472}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646}
{"snippet": "AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "`authreq` should be the name of the header where the information about the realm is included in the request , `host` should be the host to authenticate to , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11868}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327}
{"snippet": "code.compile_command(source)", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1171}
{"snippet": "loop.create_server(protocol_factory, ssl=None)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `ssl`.", "question_id": 239}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139}
{"snippet": "ctypes._SimpleCData", "intent": "This non-public class is the base class of all fundamental ctypes data types.", "question_id": 1853}
{"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, defaults=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . `defaults` can be None or an iterable of default values .", "question_id": 1380}
{"snippet": "os.execlpe(file, arg0, arg1, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "question_id": 7012}
{"snippet": "message.get_param(param, failobj=None)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) .", "question_id": 2992}
{"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "mailbox.Maildir(dirname, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5757}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377}
{"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}
{"snippet": "shutil.copy(src, dst, follow_symlinks=True)", "intent": "Copies the file `src` to the file or directory `dst` . If `follow_symlinks` is false , and src is a symbolic link , dst will be created as a symbolic link .", "question_id": 8319}
{"snippet": "mailcap.findmatch(caps, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5872}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}
{"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "OpenerDirector.open(url, timeout, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11836}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "nntplib.NNTP(host, port=119, usenetrc=False)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6418}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "platform.mac_ver('', ''), release='', machine='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7514}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', policy=compat32)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "question_id": 3323}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "window.chgat(y, x, attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2032}
{"snippet": "itertools.count(start=0)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5247}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "Path.replace(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7309}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434}
{"snippet": "calendar.prcal(year)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) .", "question_id": 1001}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247}
{"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}
{"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "traceback.format_exc(chain=True)", "intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file . With arguments `chain`.", "question_id": 10783}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "logging.basicConfig(**kwargs)", "intent": "Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger . With arguments `**kwargs`.", "question_id": 5649}
{"snippet": "mailbox.Babyl(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in Babyl format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5796}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', backupCount=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5465}
{"snippet": "plistlib.dumps(value, sort_keys=True, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`, `skipkeys`.", "question_id": 7577}
{"snippet": "string.Template(template)", "intent": "The constructor takes a single argument which is the `template` string .", "question_id": 9525}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352}
{"snippet": "queue_listener.removeHandler(hdlr)", "intent": "Removes the specified handler `hdlr` from this logger .", "question_id": 5581}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "codecs.decode(obj, encoding='utf-8', errors='strict')", "intent": "Decodes `obj` using the codec registered for `encoding` . The default error handler is 'strict ' meaning that decoding `errors` raise ValueError ( or a more codec specific subclass , such as UnicodeDecodeError ) .", "question_id": 1199}
{"snippet": "mmdf_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5853}
{"snippet": "lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "question_id": 6253}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "meta_path_finder.find_module(fullname, path)", "intent": "A legacy method for finding a loader for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "question_id": 4805}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "pkgutil.walk_packages(path=None, prefix='', onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7456}
{"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "TarFile.add(name, arcname=None, filter=None)", "intent": "Add the file `name` to the archive . If given , `arcname` specifies an alternative name for the file in the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9954}
{"snippet": "loop.getaddrinfo(host, port, type=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `proto`.", "question_id": 297}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12467}
{"snippet": "sqlite3.register_converter(typename, callable)", "intent": "Registers a `callable` to convert a bytestring from the database into a custom Python type . The callable will be invoked for all database values that are of the type `typename` .", "question_id": 8799}
{"snippet": "typing.OrderedDict(collections.OrderedDict, MutableMappingKT, VT)", "intent": "A generic version of `collections.OrderedDict` . With arguments `MutableMappingKT`, `VT`.", "question_id": 11302}
{"snippet": "window.vline(y, x, ch, n)", "intent": "Display a vertical line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2130}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "str(object='')", "intent": "Return a string version of `object` .", "question_id": 9169}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "email.mime.text.MIMEText(_text, _subtype='plain')", "intent": "Module : email.mime.text `_text` is the string for the payload . `_subtype` is the minor type and defaults to plain .", "question_id": 3355}
{"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}
{"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}
{"snippet": "email.encoders.encode_quopri(msg)", "intent": "Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1 . With arguments `msg`.", "question_id": 3069}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61}
{"snippet": "warnings.showwarning(message, category, filename, lineno, file=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12018}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "base_rotating_handler.rotate(source, dest)", "intent": "When rotating , rotate the current log . The default implementation calls the \u2018 rotator \u2019 attribute of the handler , if it \u2019 s callable , passing the `source` and `dest` arguments to it .", "question_id": 5457}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "subprocess.Popen(args, stderr=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9604}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "Cmd.postcmd(stop, line)", "intent": "Hook method executed just after a command dispatch is finished . `line` is the command line which was executed , and `stop` is a flag which indicates whether execution will be terminated after the call to postcmd ( ) ; this will be the return value of the onecmd ( ) method .", "question_id": 1142}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 539}
{"snippet": "test_case.assertNotAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11428}
{"snippet": "os.lchmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6848}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11626}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "pprint.PrettyPrinter(indent=1, width=80)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7629}
{"snippet": "connection.backup(target, pages=0, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8834}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "mmap.flush(offset)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6006}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "io.open(file, mode='r')", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`.", "question_id": 5052}
{"snippet": "pprint.pprint(object, stream=None)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline .", "question_id": 7644}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}
{"snippet": "os.execlp(file, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . With arguments `arg0`, `arg1`.", "question_id": 7011}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12240}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "Request.add_unredirected_header(key, header)", "intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "question_id": 11826}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}
{"snippet": "nntplib.NNTP(host, timeout, user=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6401}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9175}
{"snippet": "file_handler.emit(record)", "intent": "Outputs the `record` to the file .", "question_id": 5435}
{"snippet": "urllib.request.urlopen(url, timeout)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11742}
{"snippet": "writer.new_spacing(spacing)", "intent": "Set the `spacing` style to spacing .", "question_id": 3845}
{"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4588}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "datetime.replace(tzinfo=self.tzinfo)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2292}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "BufferedProtocol.buffer_updated(nbytes)", "intent": "Called when the buffer was updated with the received data . `nbytes` is the total number of bytes that were written to the buffer .", "question_id": 438}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "os.fwalk(top='.', onerror=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `onerror`.", "question_id": 6990}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326}
{"snippet": "pool.map_async(func, iterable, chunksize)", "intent": "A variant of the map ( ) method which returns a result object . With arguments `func`, `iterable`, `chunksize`.", "question_id": 6344}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "loop.sendfile(transport, file)", "intent": "Send a `file` over a `transport` .", "question_id": 256}
{"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "__import__(name, locals=None, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4143}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "shlex.shlex(infile=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "question_id": 8275}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2848}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "traceback.print_exception(etype, value, tb, limit=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10738}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "unittest.TextTestRunner(stream=None, descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11542}
{"snippet": "platform.libc_ver(lib='', chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7546}
{"snippet": "frozenset()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9434}
{"snippet": "mmap.mmap(fileno, length, tagname=None, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `tagname` , if specified and not None , is a string giving a tag name for the mapping . With arguments `access`.", "question_id": 5983}
{"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}
{"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "question_id": 10044}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}
{"snippet": "doc_test_runner.report_success(out, test, example, got)", "intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2870}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "gzip.open(filename, mode='rb', newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4281}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "snapshot.compare_to(old_snapshot: Snapshot, key_type: str)", "intent": "Compute the differences with an old snapshot . With arguments `old_snapshot: Snapshot`, `key_type: str`.", "question_id": 10871}
{"snippet": "os.fchown(fd, uid, gid)", "intent": "Change the owner and group id of the file given by `fd` to the numeric `uid` and `gid` .", "question_id": 6720}
{"snippet": "message.del_param(param, requote=True)", "intent": "Remove the given parameter completely from the Content-Type `header` . All values will be quoted as necessary unless `requote` is False ( the default is True ) . With arguments `param`.", "question_id": 3011}
{"snippet": "wsgiref.util.FileWrapper(filelike, blksize=8192)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12218}
{"snippet": "math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 5897}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "lzma.LZMAFile(filename=None, format=None)", "intent": "Open an LZMA-compressed file in binary `mode` . The `filename` argument specifies either the file object to wrap , or the name of the file to open ( as a str , bytes or path-like object ) . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5674}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "str.rstrip(chars)", "intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9239}
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892}
{"snippet": "tarfile.open(**kwargs, mode='r', fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9898}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "See the documentation for the functions explained above . With arguments `function`, `*args`, `**kwds`.", "question_id": 7359}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "codecs.decode(obj)", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1196}
{"snippet": "datetime.replace(tzinfo=self.tzinfo)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2292}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12665}
{"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}
{"snippet": "test.support.temp_dir(quiet=False)", "intent": "A context manager that creates a temporary directory at `path` and yields the directory . If `quiet` is False , the context manager raises an exception on error .", "question_id": 10178}
{"snippet": "dis.disco(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2723}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "itertools.repeat(object, times)", "intent": "Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .", "question_id": 5262}
{"snippet": "argparse.ArgumentParser(epilog=None)", "intent": "Create a new ArgumentParser object . With arguments `epilog`.", "question_id": 52}
{"snippet": "mock.assert_has_calls(calls, any_order=False)", "intent": "assert the mock has been called with the specified `calls` . If `any_order` is false ( the default ) then the calls must be sequential .", "question_id": 11576}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "pool.map(func, iterable, chunksize)", "intent": "A parallel equivalent of the map ( ) built-in function ( it supports only one `iterable` argument though ) . The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer . With arguments `func`.", "question_id": 6340}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "http.client.HTTPConnection(host)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4374}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "question_id": 11423}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12240}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}
{"snippet": "typing.ChainMap(collections.ChainMap, MutableMappingKT, VT)", "intent": "A generic version of `collections.ChainMap` . With arguments `MutableMappingKT`, `VT`.", "question_id": 11306}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2185}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`.", "question_id": 4935}
{"snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5331}
{"snippet": "tkinter.Tcl(baseName=None)", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`.", "question_id": 10529}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646}
{"snippet": "window.addnstr(y, x, str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2006}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "mimetypes.guess_extension(type, strict=True)", "intent": "Guess the extension for a file based on its MIME `type` , given by type . The optional `strict` argument has the same meaning as with the guess_type ( ) function .", "question_id": 5944}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481}
{"snippet": "TarFile.add(name, recursive=True, filter=None)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9955}
{"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "datetime.time(hour=0, microsecond=0)", "intent": "All arguments are optional . With arguments `hour`, `microsecond`.", "question_id": 2323}
{"snippet": "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`, `encoding`.", "question_id": 5451}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680}
{"snippet": "_c_data.from_buffer(source)", "intent": "This method returns a ctypes instance that shares the buffer of the `source` object .", "question_id": 1844}
{"snippet": "Telnet.set_debuglevel(debuglevel)", "intent": "Set the debug level . The higher the value of `debuglevel` , the more debug output you get ( on sys.stdout ) .", "question_id": 10023}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12457}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891}
{"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11619}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)", "intent": "Create an HTTP handler for the given `request` ( i.e . a socket ) , `client_address` ( a ( host , port ) tuple ) , and `server` ( WSGIServer instance ) .", "question_id": 12231}
{"snippet": "cgi.parse_multipart(fp, pdict, encoding=\"utf-8\")", "intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding .", "question_id": 1048}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)", "intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "question_id": 12151}
{"snippet": "email.message_from_bytes(s, policy=policy.compat32)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3398}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "traceback.format_tb(tb)", "intent": "A shorthand for format_list ( extract_tb ( `tb` , `limit` ) ) .", "question_id": 10785}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "ZipFile.extract(member, pwd=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `pwd` is the password used for encrypted files .", "question_id": 12816}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986}
{"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}
{"snippet": "null_importer.find_module(fullname, path)", "intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`, `path`.", "question_id": 4781}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897}
{"snippet": "bytes.replace(old, new, count)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9307}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 933}
{"snippet": "tkinter.Tk(baseName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `className`.", "question_id": 10525}
{"snippet": "abstract_event_loop_policy.set_child_watcher(watcher)", "intent": "Set the current child process `watcher` to watcher .", "question_id": 379}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}
{"snippet": "tkinter.Tk(baseName=None)", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`.", "question_id": 10519}
{"snippet": "difflib.diff_bytes(dfunc, a, b, tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2659}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "os.seteuid(euid)", "intent": "Set the current process \u2019 s effective user id . With arguments `euid`.", "question_id": 6694}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}
{"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}
{"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996}
{"snippet": "zlib.compressobj(method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `method` is the compression algorithm .", "question_id": 12909}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "http.client.HTTPConnection(host, blocksize=8192)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "question_id": 4377}
{"snippet": "Telnet.read_until(expected, timeout=None)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10010}
{"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "fileinput.FileInput(files=None)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "question_id": 3801}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "warnings.filterwarnings(action, message='', lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `lineno`.", "question_id": 12031}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "bytearray.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9334}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "operator.__inv__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6542}
{"snippet": "stats.add(*filenames)", "intent": "This method of the Stats class accumulates additional profiling information into the current profiling object . With arguments `*filenames`.", "question_id": 7691}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "xmlrpc.client.ServerProxy(uri, encoding=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional third argument is an `encoding` , by default UTF-8 . With arguments `uri`.", "question_id": 12671}
{"snippet": "TarFile.list(members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9929}
{"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "marshal.dump(value, file, version)", "intent": "Write the `value` on the open `file` . The `version` argument indicates the data format that dump should use ( see below ) .", "question_id": 5878}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "nntplib.NNTP(host, timeout, port=119, usenetrc=False)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6408}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}
{"snippet": "doctest.DocTestSuite(tearDown=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2812}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12460}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2665}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "incremental_decoder.decode(object)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object .", "question_id": 1275}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "loop.create_server(protocol_factory, ssl=None)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `ssl`.", "question_id": 239}
{"snippet": "traceback.print_stack(f=None, limit=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10765}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "cgitb.enable(logdir=None, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1067}
{"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "msilib.Feature(db, id, title, desc, display, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6118}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "time.localtime(secs)", "intent": "Like gmtime ( ) but converts to local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10443}
{"snippet": "dis.disco(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2723}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "ur_lopener.open_unknown(fullurl)", "intent": "Overridable interface to open unknown URL types . With arguments `fullurl`.", "question_id": 11894}
{"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "mailcap.findmatch(caps, MIMEtype, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5864}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5331}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "os.fwalk(top='.', follow_symlinks=False)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . Note however that , unlike other functions , the fwalk ( ) default value for `follow_symlinks` is False . With arguments `top`.", "question_id": 6991}
{"snippet": "watched_file_handler.emit(record)", "intent": "Outputs the `record` to the file , but first calls reopenIfNeeded ( ) to reopen the file if it has changed .", "question_id": 5449}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12528}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}
{"snippet": "BaseTransport.set_protocol(protocol)", "intent": "Set a new `protocol` .", "question_id": 400}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12239}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "memoryview(obj)", "intent": "Create a memoryview that references `obj` .", "question_id": 9411}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "warnings.filterwarnings(action, category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `category`.", "question_id": 12025}
{"snippet": "ZeroDivisionError", "intent": "Raised when the second argument of a division or modulo operation is zero.", "question_id": 3683}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "importlib.__import__(name, globals=None, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `level`.", "question_id": 4790}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "test_case.assertIsNot(first, second, msg=None)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object . With arguments `msg`.", "question_id": 11386}
{"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}
{"snippet": "code.interact(readfunc=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1169}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "webbrowser.register(name, constructor, instance=None, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12113}
{"snippet": "doctest.Example(source, want, lineno=0, indent=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `indent`.", "question_id": 2832}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2660}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 966}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "xml.etree.ElementTree.parse(source, parser=None)", "intent": "Parses an XML section into an element tree . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12447}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 49}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "extension_file_loader.create_module(spec)", "intent": "Creates the module object from the given specification in accordance with PEP 489 . With arguments `spec`.", "question_id": 4906}
{"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}
{"snippet": "termios.tcsetattr(fd, when, attributes)", "intent": "Set the tty `attributes` for file descriptor `fd` from the attributes , which is a list like the one returned by tcgetattr ( ) . The `when` argument determines when the attributes are changed : TCSANOW to change immediately , TCSADRAIN to change after transmitting all queued output , or TCSAFLUSH to change after transmitting all queued output and discarding all queued input .", "question_id": 10103}
{"snippet": "base_proxy._callmethod(methodname, args)", "intent": "Call and return the result of a method of the proxy \u2019 s referent . Note in particular that an exception will be raised if `methodname` has not been exposed . With arguments `args`.", "question_id": 6321}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 39}
{"snippet": "chunk.Chunk(file, align=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries .", "question_id": 1076}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "snapshot.compare_to(old_snapshot: Snapshot, key_type: str)", "intent": "Compute the differences with an old snapshot . With arguments `old_snapshot: Snapshot`, `key_type: str`.", "question_id": 10871}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "message.set_param(param, value, requote=True)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional header specifies an alternative header to Content-Type , and all parameters will be quoted as necessary unless optional `requote` is False ( the default is True ) . With arguments `param`.", "question_id": 3001}
{"snippet": "threading.Timer(interval, function)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10412}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "frozenset(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9433}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "fraction.__ceil__()", "intent": "Returns the least int > = self .", "question_id": 3874}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8351}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "fileinput.FileInput(backup='')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `backup`.", "question_id": 3803}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "timeit.Timer(setup='pass', timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10505}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "nntplib.NNTP(host, timeout, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6406}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12794}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\", method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12468}
{"snippet": "wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)", "intent": "Create an HTTP handler for the given `request` ( i.e . a socket ) , `client_address` ( a ( host , port ) tuple ) , and `server` ( WSGIServer instance ) .", "question_id": 12231}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "argparse.FileType(bufsize=-1, errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `errors`.", "question_id": 94}
{"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "pprint.PrettyPrinter(depth=None)", "intent": "Construct a PrettyPrinter instance . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7626}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "message.get_params(header='content-type', unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2989}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`.", "question_id": 4939}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11139}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}
{"snippet": "io_base.truncate(size=None)", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5079}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "plistlib.dumps(value, sort_keys=True, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`, `skipkeys`.", "question_id": 7577}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "os.startfile(path, operation)", "intent": "Start a file with its associated application . The `path` parameter is relative to the current directory . When `operation` is not specified or 'open ' , this acts like double-clicking the file in Windows Explorer , or giving the file name as an argument to the start command from the interactive command shell : the file is opened with whatever application ( if any ) its extension is associated .", "question_id": 7066}
{"snippet": "ArgumentParser.print_usage(file=None)", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line . If `file` is None , sys.stdout is assumed .", "question_id": 104}
{"snippet": "os.walk(top, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6978}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}
{"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}
{"snippet": "email.generator.DecodedGenerator(outfp)", "intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "question_id": 3106}
{"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "loop.remove_signal_handler(sig)", "intent": "Remove the handler for the `sig` signal .", "question_id": 304}
{"snippet": "NNTP.newgroups(date, file=None)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object . If `file` is supplied , though , then groups will be empty .", "question_id": 6462}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "itertools.zip_longest(*iterables, fillvalue=None)", "intent": "Make an iterator that aggregates elements from each of the iterables . If the iterables are of uneven length , missing values are filled-in with `fillvalue` . With arguments `*iterables`.", "question_id": 5269}
{"snippet": "sqlite3.complete_statement(sql)", "intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "question_id": 8801}
{"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8351}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "codecs.open(filename, mode='r', buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1232}
{"snippet": "ctypes.wstring_at(address)", "intent": "This function returns the wide character string starting at memory `address` address as a string .", "question_id": 1840}
{"snippet": "@unittest.skipUnless(condition, reason)", "intent": "Skip the decorated test unless `condition` is true . With arguments `reason`.", "question_id": 11360}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318}
{"snippet": "os.execlp(file, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . With arguments `arg0`, `arg1`.", "question_id": 7011}
{"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}
{"snippet": "NameError", "intent": "Raised when a local or global name is not found.", "question_id": 3646}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "ZeroDivisionError", "intent": "Raised when the second argument of a division or modulo operation is zero.", "question_id": 3683}
{"snippet": "zlib.crc32(data, value)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 0 is used .", "question_id": 12917}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "See the documentation for the functions explained above . With arguments `function`, `*args`, `**kwds`.", "question_id": 7359}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "unittest.mock.patch(target, **kwargs, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11611}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "audioop.bias(fragment, width, bias)", "intent": "Return a `fragment` that is the original fragment with a `bias` added to each sample . With arguments `width`.", "question_id": 685}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "concurrent.futures.ThreadPoolExecutor(initializer=None)", "intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously . `initializer` is an optional callable that is called at the start of each worker thread ; `initargs` is a tuple of arguments passed to the initializer .", "question_id": 1450}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "operator.__le__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6520}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "multiprocessing.Process(group=None, args=())", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `args` is the argument tuple for the target invocation .", "question_id": 6174}
{"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}
{"snippet": "os.utime(path, times=None, follow_symlinks=True)", "intent": "Set the access and modified `times` of the file specified by `path` . With arguments `follow_symlinks`.", "question_id": 6972}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11138}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123}
{"snippet": "warnings.showwarning(message, category, filename, lineno, line=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12019}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "marshal.dump(value, file)", "intent": "Write the `value` on the open `file` .", "question_id": 5879}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "compileall.compile_file(fullname, force=False)", "intent": "Compile the file with path `fullname` . With arguments `force`.", "question_id": 1421}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934}
{"snippet": "json.dump(obj, fp, **kw, indent=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level . With arguments `**kw`.", "question_id": 5276}
{"snippet": "xml.dom.getDOMImplementation(name=None, features=())", "intent": "Return a suitable DOM implementation . The `name` is either well-known , the module name of a DOM implementation , or None . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12306}
{"snippet": "zlib.compressobj(method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `method` is the compression algorithm .", "question_id": 12909}
{"snippet": "zlib.compressobj(zdict, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `method` is the compression algorithm .", "question_id": 12899}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "DatagramProtocol.datagram_received(data, addr)", "intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "question_id": 440}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "mailbox.__setitem__(key, message)", "intent": "Replace the `message` corresponding to `key` with message .", "question_id": 5728}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443}
{"snippet": "traceback.format_exc(limit=None, chain=True)", "intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file . With arguments `chain`.", "question_id": 10784}
{"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693}
{"snippet": "test.support.import_module(name, required_on(), deprecated=False)", "intent": "This function imports and returns the named module . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`, `required_on()`.", "question_id": 10241}
{"snippet": "loop.sendfile(transport, file, offset=0)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file .", "question_id": 257}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "operator.__ne__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6522}
{"snippet": "patch.multiple(target, **kwargs, spec=None, create=False)", "intent": "Perform multiple patches in a single call . The arguments `spec` , `spec_set` , create , `autospec` and `new_callable` have the same meaning as for patch ( ) . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11638}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "ast.dump(node, annotate_fields=True)", "intent": "Return a formatted dump of the tree in `node` . If `annotate_fields` is true ( by default ) , the returned string will show the names and the values for fields .", "question_id": 164}
{"snippet": "turtle.screensize(canvwidth=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `bg`.", "question_id": 11052}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "itertools.dropwhile(predicate, iterable)", "intent": "Make an iterator that drops elements from the `iterable` as long as the `predicate` is true ; afterwards , returns every element .", "question_id": 5251}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9176}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}
{"snippet": "argparse.ArgumentParser(usage=None)", "intent": "Create a new ArgumentParser object . With arguments `usage`.", "question_id": 50}
{"snippet": "test_case.assertIsNone(expr)", "intent": "Test that `expr` is ( or is not ) None .", "question_id": 11387}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "decimal.compare_signal(other)", "intent": "This operation is identical to the compare ( ) method , except that all NaNs signal . With arguments `other`.", "question_id": 2401}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "random.normalvariate(mu, sigma)", "intent": "Normal distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7914}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "dis.Bytecode(x, first_line=None)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . If `first_line` is not None , it indicates the line number that should be reported for the first source line in the disassembled code . With arguments `x`.", "question_id": 2696}
{"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}
{"snippet": "termios.tcflush(fd, queue)", "intent": "Discard queued data on file descriptor `fd` . The `queue` selector specifies which queue : TCIFLUSH for the input queue , TCOFLUSH for the output queue , or TCIOFLUSH for both queues .", "question_id": 10106}
{"snippet": "tkinter.tix.Tk(className='Tix')", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `className`.", "question_id": 10547}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}
{"snippet": "faulthandler.register(signum, chain=False)", "intent": "Register a user signal : install a handler for the `signum` signal to dump the traceback of all threads , or of the current thread if `all_threads` is False , into `file` . Call the previous handler if `chain` is True .", "question_id": 3734}
{"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}
{"snippet": "heapq.merge(*iterables, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `reverse` is a boolean value .", "question_id": 4323}
{"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10233}
{"snippet": "zlib.compressobj(zdict, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `strategy` is used to tune the compression algorithm .", "question_id": 12902}
{"snippet": "traceback_exception.format(chain=True)", "intent": "Format the exception . If `chain` is not True , __cause__ and __context__ will not be formatted .", "question_id": 10821}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "bdb.run(cmd, locals=None)", "intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "question_id": 809}
{"snippet": "turtle.numinput(title, prompt, default=None, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11089}
{"snippet": "timeit.Timer(stmt='pass', globals=None)", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "question_id": 10504}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "Queue.put(item, block=True)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7850}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}
{"snippet": "Path.open(mode='r', encoding=None)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `encoding`.", "question_id": 7299}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4120}
{"snippet": "random.normalvariate(mu, sigma)", "intent": "Normal distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7914}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "ctypes._SimpleCData", "intent": "This non-public class is the base class of all fundamental ctypes data types.", "question_id": 1853}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}
{"snippet": "TarFile.extract(member, path=\"\", numeric_owner=False)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9945}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "shlex.shlex(infile=None, posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8281}
{"snippet": "os.fwalk(top='.', follow_symlinks=False)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . Note however that , unlike other functions , the fwalk ( ) default value for `follow_symlinks` is False . With arguments `top`.", "question_id": 6991}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "question_id": 8797}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}
{"snippet": "datetime.datetime(year, month, day, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `second`.", "question_id": 2250}
{"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}
{"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630}
{"snippet": "http.client.HTTPConnection(host, blocksize=8192)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "question_id": 4377}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "timeit.Timer(stmt='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals .", "question_id": 10498}
{"snippet": "time.replace(minute=self.minute)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `minute`.", "question_id": 2336}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "pkgutil.walk_packages(path=None, onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7454}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "turtle.tracer(n=None, delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11061}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "zipapp.create_archive(source, target=None, interpreter=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12773}
{"snippet": "venv.create(env_dir, clear=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `clear`.", "question_id": 11991}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}
{"snippet": "fcntl.ioctl(fd, request, arg=0)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . With arguments `fd`.", "question_id": 3743}
{"snippet": "test.support.import_module(name, required_on(), deprecated=False)", "intent": "This function imports and returns the named module . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`, `required_on()`.", "question_id": 10241}
{"snippet": "typing.OrderedDict(collections.OrderedDict, MutableMappingKT, VT)", "intent": "A generic version of `collections.OrderedDict` . With arguments `MutableMappingKT`, `VT`.", "question_id": 11302}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "r_lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10384}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "decimal.Context(prec=None, rounding=None)", "intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "question_id": 2508}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12664}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "os.chmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6835}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6047}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "xml.etree.ElementTree.QName(text_or_uri, tag=None)", "intent": "QName wrapper . `text_or_uri` is a string containing the QName value , in the form { uri } local , or , if the `tag` argument is given , the URI part of a QName .", "question_id": 12538}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "OSError(errno, strerror, filename)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.", "question_id": 3652}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9038}
{"snippet": "resource.setrlimit(resource, limits)", "intent": "Sets new `limits` of consumption of `resource` .", "question_id": 8072}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5875}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938}
{"snippet": "importlib.abc.FileLoader(fullname, path)", "intent": "An abstract base class which inherits from ResourceLoader and ExecutionLoader , providing concrete implementations of ResourceLoader.get_data ( ) and ExecutionLoader.get_filename ( ) . The `fullname` argument is a fully resolved name of the module the loader is to handle . The `path` argument is the path to the file for the module .", "question_id": 4835}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "traceback.print_stack(f=None, limit=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10765}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}
{"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}
{"snippet": "window.chgat(num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "question_id": 2031}
{"snippet": "mock.__class__", "intent": "Normally the __class__ attribute of an object will return its type.", "question_id": 11596}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3723}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "signature.from_callable(obj, follow_wrapped=True)", "intent": "Return a Signature ( or its subclass ) object for a given callable `obj` . With arguments `follow_wrapped`.", "question_id": 4992}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "concurrent.futures.ProcessPoolExecutor(initializer=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `initializer` is an optional callable that is called at the start of each worker process ; `initargs` is a tuple of arguments passed to the initializer .", "question_id": 1460}
{"snippet": "OptionParser.set_defaults(dest=value)", "intent": "Set default values for several option destinations at once . With arguments `dest`.", "question_id": 6648}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this screen .", "question_id": 11071}
{"snippet": "POP3.pass_(password)", "intent": "Send `password` , response includes message count and mailbox size .", "question_id": 7605}
{"snippet": "Pattern.search(string, pos, endpos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 . The optional parameter `endpos` limits how far the string will be searched ; it will be as if the string is endpos characters long , so only the characters from pos to endpos - 1 will be searched for a match .", "question_id": 7970}
{"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset . With arguments `access`.", "question_id": 5978}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "io.StringIO(initial_value='', newline='\\n')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5167}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}
{"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "http.client.HTTPResponse(sock, debuglevel=0, method=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `debuglevel`, `method`.", "question_id": 4406}
{"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}
{"snippet": "threading.Timer(interval, function, args=None, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10415}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354}
{"snippet": "text_io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given `offset` . Behaviour depends on the `whence` parameter .", "question_id": 5143}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416}
{"snippet": "importlib.__import__(name, fromlist=())", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `fromlist`.", "question_id": 4786}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "pickle.load(file, encoding=\"ASCII\", errors=\"strict\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7377}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "unittest.FunctionTestCase(testFunc)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`.", "question_id": 11473}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "extension_file_loader.create_module(spec)", "intent": "Creates the module object from the given specification in accordance with PEP 489 . With arguments `spec`.", "question_id": 4906}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4159}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "parser.isexpr(st)", "intent": "When `st` represents an 'eval ' form , this function returns true , otherwise it returns false .", "question_id": 7224}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "question_id": 10044}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "gzip.GzipFile(fileobj=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value .", "question_id": 4286}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "itertools.count(start=0)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5247}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11139}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6040}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "TarFile.extractall(path=\".\", members=None, numeric_owner=False)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9939}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "queue.get(block)", "intent": "Remove and return an item from the queue . If optional args `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 6205}
{"snippet": "profile.Profile(timer=None, timeunit=0.0)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time .", "question_id": 7674}
{"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}
{"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "tempfile.TemporaryFile(mode='w+b', encoding=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10042}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "time.replace(second=self.second)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2337}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec_set=None)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "question_id": 11617}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "gzip.open(filename, newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4277}
{"snippet": "element.iterfind(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12503}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11139}
{"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2848}
{"snippet": "sqlite3.PARSE_DECLTYPES", "intent": "This constant is meant to be used with the detect_types parameter of the connect() function.", "question_id": 8795}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}
{"snippet": "unittest.mock.create_autospec(spec, **kwargs, instance=False)", "intent": "Create a mock object using another object as a `spec` . If a class is used as a spec then the return value of the mock ( the `instance` of the class ) will have the same spec . With arguments `**kwargs`.", "question_id": 11651}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, loader_state=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `loader_state`.", "question_id": 4916}
{"snippet": "turtle.turtlesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10997}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "decimal.Decimal(value=\"0\", context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2394}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}
{"snippet": "XMLReader.setContentHandler(handler)", "intent": "Set the current ContentHandler . With arguments `handler`.", "question_id": 12615}
{"snippet": "ctypes.CFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1792}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "base64.a85decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 742}
{"snippet": "Element.setAttributeNodeNS(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the namespaceURI and localName attributes match . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12368}
{"snippet": "loop.sendfile(transport, file, offset=0, count=None)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 260}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}
{"snippet": "email.message_from_bytes(s, policy=policy.compat32)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3398}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "glob.iglob(pathname, recursive=False)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`, `recursive`.", "question_id": 4267}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 759}
{"snippet": "os.execle(path, arg0, arg1, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "question_id": 7010}
{"snippet": "incremental_decoder.decode(object)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object .", "question_id": 1275}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}
{"snippet": "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "question_id": 9010}
{"snippet": "lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10378}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5331}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "sys_log_handler.encodePriority(facility, priority)", "intent": "Encodes the `facility` and `priority` into an integer .", "question_id": 5504}
{"snippet": "ZipFile.setpassword(pwd)", "intent": "Set `pwd` as default password to extract encrypted files .", "question_id": 12827}
{"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}
{"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "zipfile.PyZipFile(file, mode='r')", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `mode`.", "question_id": 12847}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "IMAP4.getannotation(mailbox, entry, attribute)", "intent": "Retrieve the specified ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "question_id": 4703}
{"snippet": "doc_test_parser.get_doctest(string, globs, name, filename, lineno)", "intent": "Extract all doctest examples from the given `string` , and collect them into a DocTest object . `globs` , `name` , `filename` , and `lineno` are attributes for the new DocTest object .", "question_id": 2856}
{"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890}
{"snippet": "PurePath.with_suffix(suffix)", "intent": "Return a new path with the `suffix` changed .", "question_id": 7261}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "sysconfig.get_path(name, scheme, vars, expand)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) . get_path ( ) will use the variables returned by get_config_vars ( ) to `expand` the path .", "question_id": 9862}
{"snippet": "importlib.util.spec_from_loader(name, loader)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`.", "question_id": 4934}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "codecs.IncrementalDecoder(errors='strict')", "intent": "Constructor for an IncrementalDecoder instance . The IncrementalDecoder may implement different error handling schemes by providing the `errors` keyword argument .", "question_id": 1273}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}
{"snippet": "bytearray(source)", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor : With arguments `source`.", "question_id": 9265}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "collections.deque(iterable)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "question_id": 1351}
{"snippet": "collections.namedtuple(typename, field_names, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1379}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}
{"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "signature.replace(parameters, return_annotation)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4988}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g .", "question_id": 4913}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "xml.etree.ElementTree.parse(source, parser=None)", "intent": "Parses an XML section into an element tree . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12447}
{"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}
{"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "email.utils.encode_rfc2231(s, charset=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3480}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "nntplib.NNTP(host, user=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6411}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "asyncio.wrap_future(future, loop=None)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`, `loop`.", "question_id": 358}
{"snippet": "doc_test_runner.report_success(out, test, example, got)", "intent": "Report that the given `example` ran successfully . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `got` is the actual output from the example .", "question_id": 2870}
{"snippet": "element.remove(subelement)", "intent": "Removes `subelement` from the element .", "question_id": 12506}
{"snippet": "gnu_translations.lngettext(singular, plural, n)", "intent": "Equivalent to gettext ( ) and ngettext ( ) , but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with set_output_charset ( ) . With arguments `singular`, `plural`, `n`.", "question_id": 4263}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "io.open(file, mode='r', buffering=-1)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`, `buffering`.", "question_id": 5059}
{"snippet": "socket.sendfile(file, offset=0, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8735}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367}
{"snippet": "re.subn(pattern, repl, string)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`.", "question_id": 7955}
{"snippet": "chunk.Chunk(file, align=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries .", "question_id": 1076}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "doctest.set_unittest_reportflags(flags)", "intent": "Set the doctest reporting `flags` to use .", "question_id": 2816}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "io.FileIO(name, mode='r')", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending .", "question_id": 5100}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "window.addstr(y, x, str, attr)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2010}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 39}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "FTP.retrbinary(cmd, callback, blocksize=8192)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . The optional `blocksize` argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer ( which will also be the largest size of the data blocks passed to callback ) .", "question_id": 3927}
{"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}
{"snippet": "message.set_param(param, value, header='Content-Type', replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3008}
{"snippet": "marshal.loads(bytes)", "intent": "Convert the bytes-like object to a value . Extra `bytes` in the input are ignored .", "question_id": 5883}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2190}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "base64.b85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using base85 ( as used in e.g . If `pad` is true , the input is padded with b'\\0 ' so its length is a multiple of 4 bytes before encoding .", "question_id": 745}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "config_parser.read(filenames, encoding=None)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed . With arguments `encoding`.", "question_id": 1513}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "http.client.HTTPConnection(host)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4374}
{"snippet": "patch.object(target, attribute, **kwargs, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11621}
{"snippet": "ctypes.PYFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the Python calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1800}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "copyreg.constructor(object)", "intent": "Declares `object` to be a valid constructor .", "question_id": 1665}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "pickle.loads(bytes_object, fix_imports=True, encoding=\"ASCII\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7383}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "os.setresuid(ruid, euid, suid)", "intent": "Set the current process \u2019 s real , effective , and saved user ids . With arguments `ruid`, `euid`, `suid`.", "question_id": 6702}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "NNTP.newgroups(date, file=None)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object . If `file` is supplied , though , then groups will be empty .", "question_id": 6462}
{"snippet": "test.support.is_resource_enabled(resource)", "intent": "Return True if `resource` is enabled and available .", "question_id": 10144}
{"snippet": "email_message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3270}
{"snippet": "socket.makefile(mode='r', encoding=None)", "intent": "Return a file object associated with the socket . These arguments are interpreted the same way as by the built-in open ( ) function , except the only supported `mode` values are ' r ' ( default ) , ' w ' and ' b ' . With arguments `encoding`.", "question_id": 8698}
{"snippet": "ast.dump(node, annotate_fields=True)", "intent": "Return a formatted dump of the tree in `node` . If `annotate_fields` is true ( by default ) , the returned string will show the names and the values for fields .", "question_id": 164}
{"snippet": "filecmp.dircmp(a, b, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3762}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "dis.Bytecode(x, first_line=None)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . If `first_line` is not None , it indicates the line number that should be reported for the first source line in the disassembled code . With arguments `x`.", "question_id": 2696}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344}
{"snippet": "compileall.compile_file(fullname)", "intent": "Compile the file with path `fullname` .", "question_id": 1419}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202}
{"snippet": "io.StringIO(initial_value='', newline='\\n')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5167}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "pprint.pprint(object, indent=1)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7645}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287}
{"snippet": "lzma.LZMADecompressor(format=FORMAT_AUTO, filters=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `format` argument specifies the container format that should be used . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "question_id": 5695}
{"snippet": "operator.__ge__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6523}
{"snippet": "mapping_proxy_type.get(key, default)", "intent": "Return the value for `key` if key is in the underlying mapping , else `default` .", "question_id": 11212}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "IMAP4.append(mailbox, flags, date_time, message)", "intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "question_id": 4691}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}
{"snippet": "incremental_decoder.decode(object)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object .", "question_id": 1275}
{"snippet": "xml.dom.minidom.parse(filename_or_file, parser=None)", "intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . `parser` , if given , must be a SAX2 parser object .", "question_id": 12397}
{"snippet": "pdb.Pdb(completekey='tab')", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7342}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "multiprocessing.JoinableQueue(maxsize)", "intent": "JoinableQueue , a Queue subclass , is a queue which additionally has task_done ( ) and join ( ) methods . With arguments `maxsize`.", "question_id": 6215}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "plistlib.loads(data, fmt=None, use_builtin_types=True)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `use_builtin_types`.", "question_id": 7559}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "FTP.ntransfercmd(cmd, rest=None)", "intent": "Like transfercmd ( ) , but returns a tuple of the data connection and the expected size of the data . `cmd` and `rest` means the same thing as in transfercmd ( ) .", "question_id": 3946}
{"snippet": "configparser.RawConfigParser(':'), ';'), defaults=None)", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `defaults`.", "question_id": 1580}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10973}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "queue_listener.setLevel(level)", "intent": "Sets the threshold for this handler to `level` .", "question_id": 5599}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11430}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9175}
{"snippet": "tixCommand.tix_cget(option)", "intent": "Returns the current value of the configuration `option` given by option .", "question_id": 10582}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "calendar.LocaleHTMLCalendar(firstweekday=0, locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 984}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "doctest.DebugRunner(verbose=None)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `verbose`.", "question_id": 2896}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "collections.namedtuple(typename, field_names, defaults=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . `defaults` can be None or an iterable of default values .", "question_id": 1378}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "doctest.testfile(filename, optionflags=0)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `optionflags` ( default value 0 ) takes the bitwise OR of option flags .", "question_id": 2773}
{"snippet": "socket.getaddrinfo(host, port, family=0, type=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8640}
{"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "Telnet.set_option_negotiation_callback(callback)", "intent": "Each time a telnet option is read on the input flow , this `callback` ( if set ) is called with the following parameters : callback ( telnet socket , command ( DO/DONT/WILL/WONT ) , option ) .", "question_id": 10032}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "bytes(source, encoding, errors)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) . With arguments `errors`.", "question_id": 9257}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "socket.gethostbyname_ex(hostname)", "intent": "Translate a host name to IPv4 address format , extended interface . Return a triple ( `hostname` , aliaslist , ipaddrlist ) where hostname is the primary host name responding to the given ip_address , aliaslist is a ( possibly empty ) list of alternative host names for the same address , and ipaddrlist is a list of IPv4 addresses for the same interface on the same host ( often but not always a single address ) .", "question_id": 8648}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "base_rotating_handler.rotate(source, dest)", "intent": "When rotating , rotate the current log . The default implementation calls the \u2018 rotator \u2019 attribute of the handler , if it \u2019 s callable , passing the `source` and `dest` arguments to it .", "question_id": 5457}
{"snippet": "Record.SetInteger(field, value)", "intent": "Set `field` to `value` through MsiRecordSetInteger ( ) .", "question_id": 6086}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "unittest.mock.Mock(**kwargs, name=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `name`.", "question_id": 11565}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "functools.update_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4158}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "os.utime(path, times=None, dir_fd=None)", "intent": "Set the access and modified `times` of the file specified by `path` . With arguments `dir_fd`.", "question_id": 6971}
{"snippet": "ArgumentParser.add_argument_group(description=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 97}
{"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486}
{"snippet": "loop.sock_recv(sock, nbytes)", "intent": "Receive up to `nbytes` from `sock` .", "question_id": 276}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, extra=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `extra`.", "question_id": 5587}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "resource.setrlimit(resource, limits)", "intent": "Sets new `limits` of consumption of `resource` .", "question_id": 8072}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "base64.encodestring(s)", "intent": "Deprecated alias of encodebytes ( ) . With arguments `s`.", "question_id": 752}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "unittest.mock.seal(mock)", "intent": "Seal will disable the automatic creation of mocks when accessing an attribute of the `mock` being sealed or any of its attributes that are already mocks recursively .", "question_id": 11657}
{"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171}
{"snippet": "wsgiref.util.request_uri(environ, include_query=True)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . If `include_query` is false , the query string is not included in the resulting URI . With arguments `environ`.", "question_id": 12212}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "SimpleQueue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7869}
{"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}
{"snippet": "pkgutil.extend_path(path, name)", "intent": "Extend the search `path` for the modules which comprise a package . It also looks for *.pkg files beginning where * matches the `name` argument .", "question_id": 7436}
{"snippet": "math.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 5895}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "importlib.__import__(name, globals=None, locals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `locals`.", "question_id": 4788}
{"snippet": "bytearray.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9345}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}
{"snippet": "email_message.set_default_type(ctype)", "intent": "Set the default content type . `ctype` should either be text/plain or message/rfc822 , although this is not enforced .", "question_id": 3259}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628}
{"snippet": "pyclbr.readmodule_ex(module, path=None)", "intent": "Return a dictionary-based tree containing a function or class descriptors for each function and class defined in the `module` with a def or class statement . As with readmodule , module names the module to be read and `path` is prepended to sys.path .", "question_id": 7709}
{"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "nntplib.NNTP(host, timeout, user=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6401}
{"snippet": "Pattern.match(string, pos)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7974}
{"snippet": "base64.a85decode(b, foldspaces=False, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 740}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}
{"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "shutil.copytree(src, dst, symlinks=False, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8328}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', _subparts=None)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . `_subparts` is a sequence of initial subparts for the payload . With arguments `**_params`.", "question_id": 3322}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}
{"snippet": "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)", "intent": "Report that the given `example` raised an unexpected exception . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `exc_info` is a tuple containing information about the unexpected exception ( as returned by sys.exc_info ( ) ) .", "question_id": 2872}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "test_case.assertNotIsInstance(obj, cls, msg=None)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) . With arguments `msg`.", "question_id": 11398}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "doctest.DocTestFinder(verbose=False, exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2847}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "codecs.StreamReader(stream)", "intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "question_id": 1284}
{"snippet": "loop.getaddrinfo(host, port, family=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `proto`.", "question_id": 295}
{"snippet": "Path.replace(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7309}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "pty.spawn(argv, master_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7701}
{"snippet": "operator.__ne__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6522}
{"snippet": "WriteTransport.set_write_buffer_limits(low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 411}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}
{"snippet": "test.support.swap_item(obj, attr, new_val)", "intent": "Context manager to swap out an item with a new object . This will set `obj` [ `` item '' ] to 5 for the duration of the with block , restoring the old value at the end of the block . With arguments `attr`, `new_val`.", "question_id": 10195}
{"snippet": "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`, `disable_existing_loggers`.", "question_id": 5415}
{"snippet": "time.replace(hour=self.hour, minute=self.minute)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`, `minute`.", "question_id": 2341}
{"snippet": "turtle.screensize(canvwidth=None, canvheight=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `canvheight`, `bg`.", "question_id": 11054}
{"snippet": "memory_bio.write(buf)", "intent": "Write the bytes from `buf` to the memory BIO .", "question_id": 9058}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g .", "question_id": 4913}
{"snippet": "xml.dom.minidom.parse(filename_or_file, parser=None)", "intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . `parser` , if given , must be a SAX2 parser object .", "question_id": 12397}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `is_package`.", "question_id": 4917}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "platform.dist('debian', 'redhat', 'mandrake', ...), version='', id='')", "intent": "This is another name for linux_distribution ( ) . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`, `version`, `id`.", "question_id": 7525}
{"snippet": "urllib.parse.urlsplit(urlstring, scheme='')", "intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`, `scheme`.", "question_id": 11691}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "typing.FrozenSet(frozenset)", "intent": "A generic version of builtins.frozenset . With arguments `frozenset`.", "question_id": 11275}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "task.get_stack(limit=None)", "intent": "Return the list of stack frames for this Task . The optional `limit` argument sets the maximum number of frames to return ; by default all available frames are returned .", "question_id": 635}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "multiprocessing.get_context(method=None)", "intent": "Return a context object which has the same attributes as the multiprocessing module . If `method` is None then the default context is returned .", "question_id": 6225}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "xml.sax.xmlreader.AttributesImpl(attrs)", "intent": "This is an implementation of the Attributes interface ( see section The Attributes Interface ) . Objects of this class should be instantiated by readers ; `attrs` must be a dictionary-like object containing a mapping from attribute names to attribute values .", "question_id": 12611}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}
{"snippet": "ContentHandler.startPrefixMapping(prefix, uri)", "intent": "Begin the scope of a prefix-URI Namespace mapping . With arguments `prefix`, `uri`.", "question_id": 12573}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "msilib.Feature(db, id, title, desc, display, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6118}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12801}
{"snippet": "os.set_handle_inheritable(handle, inheritable)", "intent": "Set the \u201c `inheritable` \u201d flag of the specified `handle` .", "question_id": 6819}
{"snippet": "threading.Semaphore(value=1)", "intent": "This class implements semaphore objects . A semaphore manages an atomic counter representing the number of release ( ) calls minus the number of acquire ( ) calls , plus an initial `value` .", "question_id": 10398}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "Request.has_header(header)", "intent": "Return whether the instance has the named `header` ( checks both regular and unredirected ) .", "question_id": 11827}
{"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "dis.disassemble(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2719}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "platform.libc_ver(lib='', chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7546}
{"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391}
{"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "tarfile.open(**kwargs, name=None, mode='r')", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . With arguments `**kwargs`.", "question_id": 9895}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}
{"snippet": "file_handler.emit(record)", "intent": "Outputs the `record` to the file .", "question_id": 5435}
{"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "loop.call_later(delay, callback, *args)", "intent": "Schedule `callback` to be called after the given `delay` number of seconds ( can be either an int or a float ) . With arguments `*args`.", "question_id": 193}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "FTP.login(user='anonymous', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3920}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "FTP.login(passwd='', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3921}
{"snippet": "logging.StreamHandler(stream=None)", "intent": "Returns a new instance of the StreamHandler class . If `stream` is specified , the instance will use it for logging output ; otherwise , sys.stderr will be used .", "question_id": 5422}
{"snippet": "ur_lopener.retrieve(url, filename=None)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11897}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "_c_data.from_buffer(source)", "intent": "This method returns a ctypes instance that shares the buffer of the `source` object .", "question_id": 1844}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "traceback.format_exception(etype, value, tb, chain=True)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `chain`.", "question_id": 10779}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}
{"snippet": "codecs.ignore_errors(exception)", "intent": "Implements the 'ignore ' error handling : malformed data is ignored and encoding or decoding is continued without further notice . With arguments `exception`.", "question_id": 1257}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor .", "question_id": 12712}
{"snippet": "xmlrpc.server.DocXMLRPCServer(addr)", "intent": "Create a new server instance . With arguments `addr`.", "question_id": 12749}
{"snippet": "stream_writer.get_extra_info(name, default=None)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`, `default`.", "question_id": 516}
{"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794}
{"snippet": "SubprocessTransport.get_pipe_transport(fd)", "intent": "Return the transport for the communication pipe corresponding to the integer file descriptor `fd` :", "question_id": 420}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "Request.has_header(header)", "intent": "Return whether the instance has the named `header` ( checks both regular and unredirected ) .", "question_id": 11827}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "os.sched_getparam(pid)", "intent": "Return the scheduling parameters as a sched_param instance for the process with PID `pid` .", "question_id": 7110}
{"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdOutput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdOutput`.", "question_id": 9633}
{"snippet": "loop.sock_sendfile(sock, file, count=None)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 283}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "IMAP4.getannotation(mailbox, entry, attribute)", "intent": "Retrieve the specified ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "question_id": 4703}
{"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "dis.disassemble(code, lasti=-1, file=None)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2722}
{"snippet": "HTTPConnection.request(method, url, body=None, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4432}
{"snippet": "xml.etree.ElementTree.register_namespace(prefix, uri)", "intent": "Registers a namespace `prefix` . `uri` is a namespace uri .", "question_id": 12450}
{"snippet": "functools.update_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4158}
{"snippet": "bytearray.rsplit(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9358}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "warnings.simplefilter(action, category=Warning)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`.", "question_id": 12034}
{"snippet": "locale.currency(val, symbol=True)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "question_id": 5393}
{"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "binascii.b2a_qp(data, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 831}
{"snippet": "audioop.avgpp(fragment, width)", "intent": "Return the average peak-peak value over all samples in the `fragment` . With arguments `width`.", "question_id": 684}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "json.JSONEncoder(default=None)", "intent": "Extensible JSON encoder for Python data structures . Supports the following objects and types by `default` :", "question_id": 5330}
{"snippet": "policy.fold(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message for a given header .", "question_id": 3426}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "element.remove(subelement)", "intent": "Removes `subelement` from the element .", "question_id": 12506}
{"snippet": "traceback.print_tb(tb)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive .", "question_id": 10733}
{"snippet": "http.client.HTTPConnection(host)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4374}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "loop.remove_writer(fd)", "intent": "Stop monitoring the `fd` file descriptor for write availability .", "question_id": 275}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "select.epoll(sizehint=-1, flags=0)", "intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .", "question_id": 8153}
{"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED, allowZip64=True)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`, `allowZip64`.", "question_id": 12854}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12420}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "config_parser.write(fileobject, space_around_delimiters=True)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . If `space_around_delimiters` is true , delimiters between keys and values are surrounded by spaces . With arguments `fileobject`.", "question_id": 1562}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "connection.backup(target, progress=None, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8838}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "test.support.is_resource_enabled(resource)", "intent": "Return True if `resource` is enabled and available .", "question_id": 10144}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}
{"snippet": "threading.Timer(interval, function, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10414}
{"snippet": "calendar.yeardays2calendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 922}
{"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391}
{"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "json.dumps(obj, **kw, default=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `default`.", "question_id": 5288}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9040}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534}
{"snippet": "turtle.ondrag(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "question_id": 11030}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}
{"snippet": "element.findall(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12494}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "asyncio.Queue(maxsize=0, loop=None)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "question_id": 448}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "locale.format(format, val, grouping=False, monetary=False)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`, `grouping`, `monetary`.", "question_id": 5391}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "asyncio.open_connection(loop=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . The `loop` argument is optional and can always be determined automatically when this function is awaited from a coroutine .", "question_id": 466}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866}
{"snippet": "mime_types.guess_type(url, strict=True)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`, `strict`.", "question_id": 5967}
{"snippet": "doctest.DebugRunner(verbose=None)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `verbose`.", "question_id": 2896}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "`authreq` should be the name of the header where the information about the realm is included in the request , `host` should be the host to authenticate to , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11868}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "logging.handlers.RotatingFileHandler(filename, backupCount=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5461}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "base_http_request_handler.date_time_string(timestamp=None)", "intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "question_id": 4656}
{"snippet": "dis.dis(x=None, depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2712}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}
{"snippet": "http.client.HTTPSConnection(host, timeout)", "intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `timeout`.", "question_id": 4382}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "shutil.copy(src, dst, follow_symlinks=True)", "intent": "Copies the file `src` to the file or directory `dst` . If `follow_symlinks` is false , and src is a symbolic link , dst will be created as a symbolic link .", "question_id": 8319}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "tkinter.tix.Tk(className='Tix')", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `className`.", "question_id": 10547}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "test_case.assertFalse(expr)", "intent": "Test that `expr` is true ( or false ) .", "question_id": 11381}
{"snippet": "mmap.mmap(fileno, length, offset)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset .", "question_id": 5976}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "logging.FileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "question_id": 5431}
{"snippet": "os.fwalk(top='.', topdown=True)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `topdown`.", "question_id": 6989}
{"snippet": "code.compile_command(source, filename=\"<input>\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1172}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "bz2.BZ2Compressor()", "intent": "Create a new compressor object .", "question_id": 896}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "timeit.Timer(stmt='pass', timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10503}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "hmac.new(key, msg=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . If `msg` is present , the method call update ( msg ) is made .", "question_id": 4330}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "bytes.replace(old, new, count)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9307}
{"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10246}
{"snippet": "writer.new_spacing(spacing)", "intent": "Set the `spacing` style to spacing .", "question_id": 3845}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "str(object=b'', encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4122}
{"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "traceback.format_exc(chain=True)", "intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file . With arguments `chain`.", "question_id": 10783}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}
{"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "types.prepare_class(name, bases=())", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11179}
{"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11149}
{"snippet": "str.split(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9244}
{"snippet": "watched_file_handler.emit(record)", "intent": "Outputs the `record` to the file , but first calls reopenIfNeeded ( ) to reopen the file if it has changed .", "question_id": 5449}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "xml.etree.ElementTree.register_namespace(prefix, uri)", "intent": "Registers a namespace `prefix` . `uri` is a namespace uri .", "question_id": 12450}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}
{"snippet": "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'bytes'>`, `maintype`, `subtype`.", "question_id": 3053}
{"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}
{"snippet": "xmlrpc.client.loads(data, use_datetime=False)", "intent": "Convert an XML-RPC request or response into Python objects , a ( params , methodname ) . The `use_builtin_types` flag can be used to cause date/time values to be presented as datetime.datetime objects and binary `data` to be presented as bytes objects ; this flag is false by default . The obsolete `use_datetime` flag is similar to use_builtin_types but it applies only to date/time values .", "question_id": 12709}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream')", "intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . With arguments `**_params`.", "question_id": 3327}
{"snippet": "Telnet.set_option_negotiation_callback(callback)", "intent": "Each time a telnet option is read on the input flow , this `callback` ( if set ) is called with the following parameters : callback ( telnet socket , command ( DO/DONT/WILL/WONT ) , option ) .", "question_id": 10032}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, repr=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2187}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "os.access(path, mode)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions .", "question_id": 6820}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "pickle.loads(bytes_object, encoding=\"ASCII\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7381}
{"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12528}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "unittest.TestCase(methodName='runTest')", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe . Each instance of TestCase will run a single base method : the method named `methodName` .", "question_id": 11364}
{"snippet": "os.spawnl(mode, path)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process .", "question_id": 7053}
{"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}
{"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}
{"snippet": "re.subn(pattern, repl, string)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`.", "question_id": 7955}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "sqlite3.complete_statement(sql)", "intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "question_id": 8801}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "question_id": 1570}
{"snippet": "warnings.filterwarnings(action, message='', module='')", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`.", "question_id": 12030}
{"snippet": "datetime.replace(tzinfo=self.tzinfo)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2292}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "os.link(src, dst, dst_dir_fd=None)", "intent": "Create a hard link pointing to `src` named `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors , and not following symlinks .", "question_id": 6852}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "async_result.get(timeout)", "intent": "Return the result when it arrives . If `timeout` is not None and the result does not arrive within timeout seconds then multiprocessing.TimeoutError is raised .", "question_id": 6360}
{"snippet": "parser.isexpr(st)", "intent": "When `st` represents an 'eval ' form , this function returns true , otherwise it returns false .", "question_id": 7224}
{"snippet": "test.support.start_threads(threads, unlock=None)", "intent": "Context manager to start `threads` . With arguments `unlock`.", "question_id": 10199}
{"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`.", "question_id": 4161}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "tempfile.mkdtemp(prefix=None, dir=None)", "intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "question_id": 10087}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}
{"snippet": "dialog.text(name, x, y, width, height, attributes, text)", "intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "question_id": 6137}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945}
{"snippet": "cgitb.enable(logdir=None, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1067}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "turtle.lt(angle)", "intent": "Turn turtle left by `angle` units .", "question_id": 10911}
{"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "question_id": 2020}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "bytes_generator.clone(fp)", "intent": "Return an independent clone of this BytesGenerator instance with the exact same option settings , and `fp` as the new outfp .", "question_id": 3090}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "os.fwalk(top='.', onerror=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `onerror`.", "question_id": 6990}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "re.subn(pattern, repl, string, count=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`.", "question_id": 7956}
{"snippet": "argparse.FileType(mode='r', encoding=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `encoding`.", "question_id": 91}
{"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391}
{"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}
{"snippet": "typing.get_type_hints(obj, globals, locals)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . In addition , forward references encoded as string literals are handled by evaluating them in `globals` and `locals` namespaces . With arguments `obj`.", "question_id": 11324}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}
{"snippet": "base64.b16decode(s)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 724}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.", "question_id": 4162}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "timeit.repeat(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10487}
{"snippet": "xml.dom.getDOMImplementation(name=None, features=())", "intent": "Return a suitable DOM implementation . The `name` is either well-known , the module name of a DOM implementation , or None . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12306}
{"snippet": "task.print_stack(file=None)", "intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 638}
{"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\", method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12465}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "platform.libc_ver(executable=sys.executable)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7538}
{"snippet": "json.JSONDecodeError(msg, doc, pos)", "intent": "Subclass of ValueError with the following additional attributes : With arguments `msg`, `doc`, `pos`.", "question_id": 5335}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "lzma.decompress(data, format=FORMAT_AUTO, filters=None)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5719}
{"snippet": "shutil.copytree(src, dst, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8325}
{"snippet": "shutil.register_archive_format(name, function, extra_args, description)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used . `description` is used by get_archive_formats ( ) which returns the list of archivers .", "question_id": 8359}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "lock.acquire(timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12954}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "POP3.capa()", "intent": "Query the server \u2019 s capabilities as specified in RFC 2449 .", "question_id": 7603}
{"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5710}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "Template.open(file, mode)", "intent": "Return a file-like object , open to `file` , but read from or written to by the pipeline . With arguments `mode`.", "question_id": 7433}
{"snippet": "imaplib.IMAP4(port=IMAP4_PORT)", "intent": "This class implements the actual IMAP4 protocol . If `port` is omitted , the standard IMAP4 port ( 143 ) is used .", "question_id": 4671}
{"snippet": "BaseCookie.output(attrs=None)", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4585}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', backupCount=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5465}
{"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "timeit.repeat(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10487}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6047}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "Document.createProcessingInstruction(target, data)", "intent": "Create and return a processing instruction node containing the `target` and `data` passed as parameters .", "question_id": 12349}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "xml.dom.getDOMImplementation(name=None, features=())", "intent": "Return a suitable DOM implementation . The `name` is either well-known , the module name of a DOM implementation , or None . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12306}
{"snippet": "gzip.GzipFile(filename=None, mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4291}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "quopri.encode(input, output, quotetabs, header=False)", "intent": "Encode the contents of the `input` file and write the resulting quoted-printable data to the `output` file . `quotetabs` , a non-optional flag which controls whether to encode embedded spaces and tabs ; when true it encodes such embedded whitespace , and when false it leaves them unencoded . Note that spaces and tabs appearing at the end of lines are always encoded , as per RFC 1521. `header` is a flag which controls if spaces are encoded as underscores as per RFC 1522 .", "question_id": 7876}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "config_parser.write(fileobject, space_around_delimiters=True)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . If `space_around_delimiters` is true , delimiters between keys and values are surrounded by spaces . With arguments `fileobject`.", "question_id": 1562}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "pdb.Pdb(completekey='tab', skip=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7350}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "fileinput.FileInput(files=None, inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "question_id": 3807}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "loop.create_connection(protocol_factory, ssl=None)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . With arguments `ssl`.", "question_id": 205}
{"snippet": "heapq.heapreplace(heap, item)", "intent": "Pop and return the smallest `item` from the `heap` , and also push the new item .", "question_id": 4320}
{"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "nntplib.NNTP_SSL(host, port=563)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port .", "question_id": 6430}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "timeit.repeat(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10488}
{"snippet": "calendar.prcal(year, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `c`.", "question_id": 1004}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "audioop.findfit(fragment, reference)", "intent": "Try to match `reference` as well as possible to a portion of `fragment` ( which should be the longer fragment ) .", "question_id": 689}
{"snippet": "message.get_param(param, header='content-type')", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2993}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "warnings.warn(message, category=None, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12003}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890}
{"snippet": "writer.new_alignment(align)", "intent": "Set the alignment style . The `align` value can be any object , but by convention is a string or None , where None indicates that the writer \u2019 s \u201c preferred \u201d alignment should be used .", "question_id": 3842}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "tarfile.open(**kwargs, fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9893}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "uuid.UUID(hex=None, bytes_le=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11946}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "POP3.list()", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) .", "question_id": 7610}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "marshal.loads(bytes)", "intent": "Convert the bytes-like object to a value . Extra `bytes` in the input are ignored .", "question_id": 5883}
{"snippet": "base64.a85decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 742}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "os.utime(path, ns, follow_symlinks=True)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `follow_symlinks`.", "question_id": 6962}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "email.utils.encode_rfc2231(s, charset=None, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3482}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "pickle.load(file, fix_imports=True)", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7372}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}
{"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}
{"snippet": "base_selector.register(fileobj, events, data=None)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor . `data` is an opaque object .", "question_id": 8216}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "os.chown(path, uid, gid, dir_fd=None)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` . With arguments `dir_fd`.", "question_id": 6840}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "bdb.Breakpoint(self, file, line, cond=None, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`, `cond`.", "question_id": 760}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "turtle.tracer(delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11060}
{"snippet": "turtle.rt(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10909}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}
{"snippet": "nntplib.NNTP(host, timeout, port=119)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection .", "question_id": 6400}
{"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "robot_file_parser.can_fetch(useragent, url)", "intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "question_id": 11912}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .", "question_id": 9033}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`.", "question_id": 11474}
{"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "question_id": 11477}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "test.support.import_fresh_module(name, fresh=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10247}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "textwrap.indent(text, prefix, predicate=None)", "intent": "Add `prefix` to the beginning of selected lines in `text` . The optional `predicate` argument can be used to control which lines are indented .", "question_id": 10325}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "property(fset=None, fdel=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . `fdel` is a function for deleting an attribute value .", "question_id": 4093}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 3000}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "xmlparser.StartNamespaceDeclHandler(prefix, uri)", "intent": "Called when an element contains a namespace declaration . With arguments `prefix`, `uri`.", "question_id": 7767}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8350}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "nntplib.NNTP(host, timeout, port=119)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection .", "question_id": 6400}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 969}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'EmailMessage'>`.", "question_id": 3061}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "plistlib.dumps(value, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `skipkeys`.", "question_id": 7574}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "logging.StreamHandler(stream=None)", "intent": "Returns a new instance of the StreamHandler class . If `stream` is specified , the instance will use it for logging output ; otherwise , sys.stderr will be used .", "question_id": 5422}
{"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391}
{"snippet": "getpass.getpass(stream=None)", "intent": "Prompt the user for a password without echoing . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4206}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}
{"snippet": "socket_handler.send(packet)", "intent": "Send a pickled byte-string `packet` to the socket .", "question_id": 5488}
{"snippet": "ctypes.string_at(address, size=-1)", "intent": "This function returns the C string starting at memory `address` address as a bytes object . If `size` is specified , it is used as size , otherwise the string is assumed to be zero-terminated .", "question_id": 1835}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "HTTPPasswordMgr.add_password(realm, uri, user, passwd)", "intent": "`uri` can be either a single URI , or a sequence of URIs . `realm` , `user` and `passwd` must be strings .", "question_id": 11857}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "null_translations.ngettext(singular, plural, n)", "intent": "If a fallback has been set , forward ngettext ( ) to the fallback . Otherwise , return `singular` if `n` is 1 ; return `plural` otherwise .", "question_id": 4252}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "email.contentmanager.set_content(msg, <'str'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3039}
{"snippet": "XMLReader.setContentHandler(handler)", "intent": "Set the current ContentHandler . With arguments `handler`.", "question_id": 12615}
{"snippet": "email.encoders.encode_7or8bit(msg)", "intent": "This doesn \u2019 t actually modify the message \u2019 s payload , but it does set the Content-Transfer-Encoding header to either 7bit or 8bit as appropriate , based on the payload data . With arguments `msg`.", "question_id": 3071}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "Codec.decode(input, errors)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1263}
{"snippet": "OpenerDirector.open(url, timeout, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11836}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "TarFile.add(name, recursive=True, filter=None)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9955}
{"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `requestHandler` parameter should be a factory for request handler instances ; it defaults to SimpleXMLRPCRequestHandler .", "question_id": 12713}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "bisect.bisect_right(a, x, lo=0)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 857}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)", "intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power . `dklen` is the length of the derived key .", "question_id": 4311}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "telnetlib.Telnet(port=0)", "intent": "Telnet represents a connection to a Telnet server . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "question_id": 10007}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "zipfile.ZipFile(file, mode='r', compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12797}
{"snippet": "ssl.wrap_socket(sock, ciphers=None)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context . If parameters `keyfile` , `certfile` , `ca_certs` or `ciphers` are set , then the values are passed to SSLContext.load_cert_chain ( ) , SSLContext.load_verify_locations ( ) , and SSLContext.set_ciphers ( ) .", "question_id": 8910}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "Path.mkdir(parents=False)", "intent": "Create a new directory at this given path . If `parents` is true , any missing parents of this path are created as needed ; they are created with the default permissions without taking mode into account ( mimicking the POSIX mkdir -p command ) .", "question_id": 7286}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}
{"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}
{"snippet": "curses.ungetch(ch)", "intent": "Push `ch` so the next getch ( ) will return it .", "question_id": 1993}
{"snippet": "Cmd.postcmd(stop, line)", "intent": "Hook method executed just after a command dispatch is finished . `line` is the command line which was executed , and `stop` is a flag which indicates whether execution will be terminated after the call to postcmd ( ) ; this will be the return value of the onecmd ( ) method .", "question_id": 1142}
{"snippet": "DatagramProtocol.datagram_received(data, addr)", "intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "question_id": 440}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`, `handle`.", "question_id": 1765}
{"snippet": "collections.deque(iterable, maxlen)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .", "question_id": 1350}
{"snippet": "bytes.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9305}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11128}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "struct.pack_into(buffer, offset, v1, v2)", "intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "question_id": 9560}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 539}
{"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}
{"snippet": "os.utime(path, ns, dir_fd=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `dir_fd`.", "question_id": 6961}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "test_case.assertIn(first, second, msg=None)", "intent": "Test that `first` is ( or is not ) in `second` . With arguments `msg`.", "question_id": 11392}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "email.utils.formatdate(timeval=None, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3473}
{"snippet": "subprocess.call(args, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead :", "question_id": 9661}
{"snippet": "window.inch(y)", "intent": "Return the character at the given position in the window . With arguments `y`.", "question_id": 2070}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "signal.setitimer(which, seconds)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8391}
{"snippet": "base_http_request_handler.date_time_string(timestamp=None)", "intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "question_id": 4656}
{"snippet": "os.utime(path, ns, follow_symlinks=True)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `follow_symlinks`.", "question_id": 6962}
{"snippet": "code.compile_command(source)", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1171}
{"snippet": "bytearray.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9345}
{"snippet": "email_message.set_default_type(ctype)", "intent": "Set the default content type . `ctype` should either be text/plain or message/rfc822 , although this is not enforced .", "question_id": 3259}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "threading.Semaphore(value=1)", "intent": "This class implements semaphore objects . A semaphore manages an atomic counter representing the number of release ( ) calls minus the number of acquire ( ) calls , plus an initial `value` .", "question_id": 10398}
{"snippet": "socket.recv(bufsize)", "intent": "Receive data from the socket . The maximum amount of data to be received at once is specified by `bufsize` .", "question_id": 8702}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "asyncio.Semaphore(value=1, loop=None)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) . With arguments `loop`.", "question_id": 584}
{"snippet": "unittest.main(testLoader=unittest.defaultTestLoader)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "question_id": 11550}
{"snippet": "calendar.prmonth(theyear, themonth, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 995}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "memoryview(obj)", "intent": "Create a memoryview that references `obj` .", "question_id": 9411}
{"snippet": "bytearray.rsplit(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9358}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`.", "question_id": 10854}
{"snippet": "base_http_request_handler.date_time_string(timestamp=None)", "intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "question_id": 4656}
{"snippet": "null_translations.lngettext(singular, plural, n)", "intent": "Equivalent to gettext ( ) and ngettext ( ) , but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with set_output_charset ( ) . With arguments `singular`, `plural`, `n`.", "question_id": 4253}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "controller.open(url, autoraise=True)", "intent": "Display `url` using the browser handled by this controller . With arguments `autoraise`.", "question_id": 12116}
{"snippet": "secrets.token_bytes(nbytes=None)", "intent": "Return a random byte string containing `nbytes` number of bytes .", "question_id": 8136}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "mailbox.MMDF(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MMDF format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5804}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`.", "question_id": 524}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "extension_file_loader.create_module(spec)", "intent": "Creates the module object from the given specification in accordance with PEP 489 . With arguments `spec`.", "question_id": 4906}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "fcntl.ioctl(fd, request, arg=0, mutate_flag=True)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "question_id": 3745}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6047}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "OSError(errno, strerror, filename, winerror)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`, `winerror`.", "question_id": 3651}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "shlex.split(s, comments=False, posix=True)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8271}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}
{"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "tkinter.tix.Tk(baseName=None)", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `baseName`.", "question_id": 10546}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}
{"snippet": "OSError(errno, strerror, filename)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.", "question_id": 3652}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "logging.handlers.NTEventLogHandler(appname, dllname=None)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `dllname` should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log ( if not specified , 'win32service.pyd ' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions .", "question_id": 5507}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1708}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}
{"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}
{"snippet": "len(proxy)", "intent": "Return the number of items in the underlying mapping . With arguments `proxy`.", "question_id": 11210}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4157}
{"snippet": "struct.pack_into(buffer, offset, v1, v2)", "intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "question_id": 9560}
{"snippet": "nntplib.NNTP_SSL(host, timeout)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`.", "question_id": 6419}
{"snippet": "ur_lopener.open(fullurl, data=None)", "intent": "Open `fullurl` using the appropriate protocol . The `data` argument has the same meaning as the data argument of urlopen ( ) .", "question_id": 11893}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "timeit.repeat(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10487}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "venv.create(env_dir, clear=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `clear`.", "question_id": 11991}
{"snippet": "shelve.BsdDbShelf(dict, protocol=None)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8253}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "subprocess.call(args, timeout=None)", "intent": "Run the command described by `args` . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface .", "question_id": 9665}
{"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}
{"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "bdb.runeval(expr, locals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 813}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "test_result.addExpectedFailure(test, err)", "intent": "Called when the `test` case test fails , but was marked with the expectedFailure ( ) decorator . The default implementation appends a tuple ( test , formatted_err ) to the instance \u2019 s expectedFailures attribute , where formatted_err is a formatted traceback derived from `err` .", "question_id": 11528}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "traceback.print_exception(etype, value, tb, limit=None, file=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10741}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}
{"snippet": "timeit.repeat(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10489}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`.", "question_id": 524}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`, `disable_existing_loggers`.", "question_id": 5415}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "TarInfo.frombuf(buf, encoding, errors)", "intent": "Create and return a TarInfo object from string buffer `buf` . With arguments `encoding`, `errors`.", "question_id": 9971}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls, args=())", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`, `args`.", "question_id": 10272}
{"snippet": "message.set_default_type(ctype)", "intent": "Set the default content type . `ctype` should either be text/plain or message/rfc822 , although this is not enforced .", "question_id": 2982}
{"snippet": "loop.getaddrinfo(host, port, type=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `proto`.", "question_id": 297}
{"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "dispatcher.listen(backlog)", "intent": "Listen for connections made to the socket . The `backlog` argument specifies the maximum number of queued connections and should be at least 1 ; the maximum value is system-dependent ( usually 5 ) .", "question_id": 670}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}
{"snippet": "test_case.assertRaises(exception, callable, *args, **kwds)", "intent": "Test that an `exception` is raised when `callable` is called with any positional or keyword arguments that are also passed to assertRaises ( ) . With arguments `*args`, `**kwds`.", "question_id": 11399}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "multiprocessing.sharedctypes.synchronized(obj, lock)", "intent": "Return a process-safe wrapper object for a ctypes object which uses `lock` to synchronize access . With arguments `obj`.", "question_id": 6276}
{"snippet": "traceback_exception.from_exception(exc)", "intent": "Capture an exception for later rendering . With arguments `exc`.", "question_id": 10812}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "base64.b16decode(s, casefold=False)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input .", "question_id": 725}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "OSError(errno, strerror, filename, winerror)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`, `winerror`.", "question_id": 3651}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "queue_listener.setLevel(level)", "intent": "Sets the threshold for this logger to `level` .", "question_id": 5566}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "csv.DictReader(f, *args, **kwds, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1696}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "urllib.request.urlopen(url, cadefault=False)", "intent": "Open the URL `url` , which can be either a string or a Request object . The `cadefault` parameter is ignored .", "question_id": 11756}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "base64.a85encode(b, wrapcol=0, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 734}
{"snippet": "abstract_event_loop_policy.set_child_watcher(watcher)", "intent": "Set the current child process `watcher` to watcher .", "question_id": 379}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}
{"snippet": "types.MappingProxyType(mapping)", "intent": "Read-only proxy of a `mapping` .", "question_id": 11206}
{"snippet": "base_http_request_handler.send_header(keyword, value)", "intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "question_id": 4643}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "asyncio.open_unix_connection(ssl=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `ssl`.", "question_id": 487}
{"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}
{"snippet": "subprocess.run(args, check=False)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9576}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "http.client.HTTPSConnection(host, blocksize=8192)", "intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `blocksize`.", "question_id": 4399}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "NNTP.login(user=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6452}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "shutil.which(cmd, path=None)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called .", "question_id": 8347}
{"snippet": "doc_test_finder.find(obj, name, module, globs, extraglobs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2850}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "InteractiveConsole.interact(banner=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close !", "question_id": 1185}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "mime_types.readfp(fp, strict=True)", "intent": "Load MIME type information from an open file `fp` . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "question_id": 5973}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "os.spawnve(mode, path, args, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7058}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "config_parser.items(raw=False)", "intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1553}
{"snippet": "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd, is_authenticated=False)", "intent": "`realm` , `uri` , `user` , `passwd` are as for HTTPPasswordMgr.add_password ( ) . `is_authenticated` sets the initial value of the is_authenticated flag for the given URI or list of URIs .", "question_id": 11860}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`.", "question_id": 4935}
{"snippet": "msvcrt.setmode(fd, flags)", "intent": "Set the line-end translation mode for the file descriptor `fd` . To set it to text mode , `flags` should be os.O_TEXT ; for binary , it should be os.O_BINARY .", "question_id": 6152}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "random.choices(population, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7897}
{"snippet": "doc_test_finder.find(obj, name, module, globs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2851}
{"snippet": "window.vline(y, x, ch, n)", "intent": "Display a vertical line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2130}
{"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "importlib.util.find_spec(name, package=None)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4929}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4157}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild, context)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . `context` can be used to specify the context used for starting the worker processes . With arguments `initargs`.", "question_id": 6326}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "shutil.copyfile(src, dst)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst .", "question_id": 8311}
{"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "question_id": 65}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "asyncio.open_connection(loop=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . The `loop` argument is optional and can always be determined automatically when this function is awaited from a coroutine .", "question_id": 466}
{"snippet": "Widget.tk.createfilehandler(file, mask, func)", "intent": "Registers the `file` handler callback function `func` . The `mask` argument is an ORed combination of any of the three constants below .", "question_id": 10537}
{"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308}
{"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}
{"snippet": "ctypes.OleDLL(name, use_last_error=False)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `use_last_error`.", "question_id": 1754}
{"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10249}
{"snippet": "importlib.machinery.SourceFileLoader(fullname, path)", "intent": "A concrete implementation of importlib.abc.SourceLoader by subclassing importlib.abc.FileLoader and providing some concrete implementations of other methods . With arguments `fullname`, `path`.", "question_id": 4889}
{"snippet": "operator.__abs__(obj)", "intent": "Return the absolute value of `obj` .", "question_id": 6531}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "readline.remove_history_item(pos)", "intent": "Remove history item specified by its position from the history . With arguments `pos`.", "question_id": 8032}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255}
{"snippet": "argparse.ArgumentParser(epilog=None)", "intent": "Create a new ArgumentParser object . With arguments `epilog`.", "question_id": 42}
{"snippet": "test_case.assertEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are equal . With arguments `msg`.", "question_id": 11376}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen, flags)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . Set mode , IV , AEAD associated data length and `flags` for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8727}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "urllib.request.urlopen(url, data=None, context=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .", "question_id": 11761}
{"snippet": "shutil.copytree(src, dst, symlinks=False, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8328}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}
{"snippet": "Element.getAttributeNode(attrname)", "intent": "Return the Attr node for the attribute named by `attrname` .", "question_id": 12360}
{"snippet": "cgitb.enable(logdir=None, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1067}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61}
{"snippet": "platform.mac_ver('', ''), machine='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7512}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2849}
{"snippet": "robot_file_parser.can_fetch(useragent, url)", "intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "question_id": 11912}
{"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "os.removexattr(path, attribute)", "intent": "Removes the extended filesystem `attribute` attribute from `path` .", "question_id": 6999}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11139}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "question_id": 2020}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "generator.flatten(msg, linesep=None)", "intent": "Print the textual representation of the message object structure rooted at `msg` to the output file specified when the Generator instance was created . If `linesep` is not None , use it as the separator character between all the lines of the flattened message .", "question_id": 3102}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "loop.set_debug(enabled: bool)", "intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "question_id": 312}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "question_id": 1575}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11119}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "unicodedata.name(chr)", "intent": "Returns the name assigned to the character `chr` as a string .", "question_id": 11342}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "unittest.main(verbosity=1)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . You can run tests with more detailed information by passing in the `verbosity` argument :", "question_id": 11552}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "oss_mixer_device.set_recsrc(bitmask)", "intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "question_id": 7209}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "os.access(path, mode, follow_symlinks=True)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . With arguments `follow_symlinks`.", "question_id": 6823}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "difflib.unified_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2649}
{"snippet": "open(file, newline=None)", "intent": "Open `file` and return a corresponding file object . Refer to the documentation of the `newline` parameter for further details .", "question_id": 4067}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "lzma.LZMAFile(mode=\"r\")", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5668}
{"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "element.iterfind(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12503}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "gzip.open(filename, mode='rb', newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4281}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "os.fwalk(top='.', dir_fd=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6992}
{"snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), version='')", "intent": "Tries to determine the name of the Linux OS distribution name . Returns a tuple ( `distname` , `version` , `id` ) which defaults to the args given as parameters . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "question_id": 7529}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "FTP.login(passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3917}
{"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "question_id": 3003}
{"snippet": "dataclasses.astuple(instance)", "intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "question_id": 2181}
{"snippet": "threading.Timer(interval, function)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10412}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 5897}
{"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189}
{"snippet": "difflib.context_diff(a, b, fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2631}
{"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`.", "question_id": 4161}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}
{"snippet": "nntplib.NNTP(host, timeout)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection .", "question_id": 6399}
{"snippet": "secrets.token_bytes(nbytes=None)", "intent": "Return a random byte string containing `nbytes` number of bytes .", "question_id": 8138}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "sync_manager.Condition(lock)", "intent": "Create a shared threading.Condition object and return a proxy for it . If `lock` is supplied then it should be a proxy for a threading.Lock or threading.RLock object .", "question_id": 6301}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}
{"snippet": "pprint.PrettyPrinter(indent=1, stream=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol \u2019 s write ( ) method .", "question_id": 7631}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "trace.Trace(timing=False)", "intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "question_id": 10715}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "struct.pack_into(format, buffer, offset, v1, v2)", "intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "question_id": 9552}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}
{"snippet": "shlex.shlex(instream=None, infile=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "question_id": 8278}
{"snippet": "ctypes.CDLL(name, handle=None)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `handle`.", "question_id": 1742}
{"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}
{"snippet": "base64.a85decode(b, foldspaces=False, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 740}
{"snippet": "mailbox.Maildir(dirname, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5757}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "Path.resolve(strict=False)", "intent": "Make the path absolute , resolving any symlinks . If the path doesn \u2019 t exist and `strict` is True , FileNotFoundError is raised .", "question_id": 7311}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "threading.Timer(interval, function, args=None, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10415}
{"snippet": "py_zip_file.writepy(pathname, basename='')", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `basename` is intended for internal use only .", "question_id": 12857}
{"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "decimal.copy_sign(other)", "intent": "Return a copy of the first operand with the sign set to be the same as the sign of the second operand . With arguments `other`.", "question_id": 2410}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'EmailMessage'>`.", "question_id": 3063}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "concurrent.futures.ProcessPoolExecutor(initializer=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `initializer` is an optional callable that is called at the start of each worker process ; `initargs` is a tuple of arguments passed to the initializer .", "question_id": 1460}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}
{"snippet": "os.symlink(src, dst)", "intent": "Create a symbolic link pointing to `src` named `dst` .", "question_id": 6951}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11142}
{"snippet": "ur_lopener.retrieve(url, filename=None, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11901}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "sqlite3.sqlite_version", "intent": "The version number of the run-time SQLite library, as a string.", "question_id": 8793}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', backupCount=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5465}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "question_id": 1575}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "set.difference(*others)", "intent": "Return a new set with elements in the set that are not in the others . With arguments `*others`.", "question_id": 9449}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691}
{"snippet": "BaseCookie.output(attrs=None)", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4585}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11118}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "bdb.get_bpbynumber(arg)", "intent": "Return a breakpoint specified by the given number . If `arg` is a string , it will be converted to a number .", "question_id": 799}
{"snippet": "csv.writer(csvfile, **fmtparams)", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . With arguments `**fmtparams`.", "question_id": 1682}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`, `stdout`.", "question_id": 325}
{"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "zlib.compressobj(method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `method` is the compression algorithm .", "question_id": 12909}
{"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416}
{"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}
{"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}
{"snippet": "mh.__delitem__(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5787}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "Record.SetInteger(field, value)", "intent": "Set `field` to `value` through MsiRecordSetInteger ( ) .", "question_id": 6086}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "tempfile.TemporaryFile(mode='w+b', encoding=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10042}
{"snippet": "shutil.copytree(src, dst, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8326}
{"snippet": "multiprocessing.pool.Pool(processes, initializer)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts .", "question_id": 6329}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "question_id": 1575}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\")", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "question_id": 12417}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}
{"snippet": "turtle.onscreenclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11078}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "importlib.__import__(name, globals=None, fromlist=())", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `fromlist`.", "question_id": 4789}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "os.setreuid(ruid, euid)", "intent": "Set the current process \u2019 s real and effective user ids . With arguments `ruid`, `euid`.", "question_id": 6703}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "test_case.assertWarns(warning, msg=None)", "intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) . If only the warning and possibly the `msg` arguments are given , return a context manager so that the code under test can be written inline rather than as a function :", "question_id": 11407}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7493}
{"snippet": "turtle.numinput(title, prompt, default=None, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11089}
{"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "ZipFile.extract(member, path=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `path` specifies a different directory to extract to .", "question_id": 12815}
{"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text')", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3211}
{"snippet": "email.iterators._structure(msg, level=0)", "intent": "Prints an indented representation of the content types of the message object structure . `level` is used internally . With arguments `msg`.", "question_id": 3216}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "lzma.LZMADecompressor(filters=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "question_id": 5693}
{"snippet": "traceback.print_stack(f=None, limit=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10765}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "datetime.fromordinal(ordinal)", "intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2264}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "msilib.Feature(db, id, title, desc, display, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6118}
{"snippet": "text_io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given `offset` . Behaviour depends on the `whence` parameter .", "question_id": 5143}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "tkinter.Tcl(className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "question_id": 10530}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment)", "intent": "Concrete class for urlparse ( ) results containing str data . With arguments `scheme`, `netloc`, `path`, `params`, `query`, `fragment`.", "question_id": 11700}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "random.choices(population, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7901}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "turtle.shapesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10989}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "mailbox.MMDF(path, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in MMDF format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5805}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "plistlib.load(fp, fmt=None)", "intent": "Read a plist file . `fp` should be a readable and binary file object . The `fmt` is the format of the file and the following values are valid :", "question_id": 7548}
{"snippet": "traceback.FrameSummary(filename, lineno, name)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . With arguments `filename`, `lineno`, `name`.", "question_id": 10833}
{"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "traceback.print_exc(limit=None, chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10750}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "codecs.encode(obj)", "intent": "Encodes `obj` using the codec registered for `encoding` .", "question_id": 1192}
{"snippet": "shlex.shlex(infile=None, posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8281}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "bytearray.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9380}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "TarFile.list(members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9929}
{"snippet": "frozenset(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9433}
{"snippet": "xmlrpc.server.DocXMLRPCServer(addr)", "intent": "Create a new server instance . With arguments `addr`.", "question_id": 12749}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "control.mapping(event, attribute)", "intent": "Make an entry into the EventMapping table for this control . With arguments `event`, `attribute`.", "question_id": 6130}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, reserved=0)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `reserved` is a reserved integer , and must be zero .", "question_id": 12130}
{"snippet": "difflib.context_diff(a, b, fromfile='', tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2635}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "operator.__inv__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6542}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)", "intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power . `dklen` is the length of the derived key .", "question_id": 4311}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631}
{"snippet": "turtle.screensize(canvwidth=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `bg`.", "question_id": 11052}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "bytearray.rsplit(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9357}
{"snippet": "header.append(s, errors='strict')", "intent": "Append the string `s` to the MIME header . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "question_id": 3128}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "logging.Formatter(fmt=None)", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used .", "question_id": 5611}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "Pattern.fullmatch(string, pos, endpos)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7976}
{"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "webbrowser.register(name, constructor, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12112}
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258}
{"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "stream_writer.get_extra_info(name, default=None)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`, `default`.", "question_id": 516}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "base64.a85decode(b, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 738}
{"snippet": "poplib.POP3(host, timeout, port=POP3_PORT)", "intent": "This class implements the actual POP3 protocol . The optional `timeout` parameter specifies a timeout in seconds for the connection attempt ( if not specified , the global default timeout setting will be used ) . If `port` is omitted , the standard POP3 port ( 110 ) is used . With arguments `host`.", "question_id": 7587}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "os.path.samefile(path1, path2)", "intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "question_id": 7166}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "question_id": 6327}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}
{"snippet": "FTP.connect(host='')", "intent": "Connect to the given `host` and `port` .", "question_id": 3905}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1708}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "set < other", "intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "question_id": 9441}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this screen .", "question_id": 11071}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8728}
{"snippet": "traceback.format_exception(etype, value, tb, limit=None)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `limit`.", "question_id": 10778}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363}
{"snippet": "lzma.decompress(data, format=FORMAT_AUTO)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5715}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "difflib.context_diff(a, b, fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2631}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "_c_data.in_dll(library, name)", "intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "question_id": 1849}
{"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "pickletools.dis(pickle, out=None, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7420}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "base64.b16decode(s, casefold=False)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input .", "question_id": 725}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "question_id": 6327}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "turtle.screensize(canvheight=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvheight`, `bg`.", "question_id": 11053}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}
{"snippet": "email_message.make_alternative(boundary=None)", "intent": "Convert a non-multipart or a multipart/related into a multipart/alternative , moving any existing Content- headers and payload into a ( new ) first part of the multipart . If `boundary` is specified , use it as the boundary string in the multipart , otherwise leave the boundary to be automatically created when it is needed ( for example , when the message is serialized ) .", "question_id": 3297}
{"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "xmlrpc.client.ServerProxy(uri, encoding=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional third argument is an `encoding` , by default UTF-8 . With arguments `uri`.", "question_id": 12671}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "dis.disco(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2723}
{"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this screen .", "question_id": 11071}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd, is_authenticated=False)", "intent": "`realm` , `uri` , `user` , `passwd` are as for HTTPPasswordMgr.add_password ( ) . `is_authenticated` sets the initial value of the is_authenticated flag for the given URI or list of URIs .", "question_id": 11860}
{"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "traceback.print_exc(chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10748}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "dis.disco(code, lasti=-1, file=None)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2726}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}
{"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "timeit.repeat(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10487}
{"snippet": "heapq.nsmallest(n, iterable, key=None)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4328}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}
{"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346}
{"snippet": "Path.chmod(mode)", "intent": "Change the file `mode` and permissions , like os.chmod ( ) :", "question_id": 7268}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "traceback_exception.format(chain=True)", "intent": "Format the exception . If `chain` is not True , __cause__ and __context__ will not be formatted .", "question_id": 10821}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "audioop.findfit(fragment, reference)", "intent": "Try to match `reference` as well as possible to a portion of `fragment` ( which should be the longer fragment ) .", "question_id": 689}
{"snippet": "sysconfig.parse_config_h(fp, vars)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file . With arguments `vars`.", "question_id": 9873}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "HTTPConnection.set_debuglevel(level)", "intent": "Set the debugging `level` .", "question_id": 4436}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "ArgumentParser.exit(status=0, message=None)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 113}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "loop.set_debug(enabled: bool)", "intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "question_id": 312}
{"snippet": "mh.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "question_id": 5781}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717}
{"snippet": "io.FileIO(name, mode='r', opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending . A custom `opener` can be used by passing a callable as opener .", "question_id": 5104}
{"snippet": "mime_types.readfp(fp, strict=True)", "intent": "Load MIME type information from an open file `fp` . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "question_id": 5973}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "policy.fold_binary(name, value)", "intent": "The same as fold ( ) , except that the returned `value` should be a bytes object rather than a string . With arguments `name`.", "question_id": 3427}
{"snippet": "traceback.print_stack(f=None, limit=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10765}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "pickle.load(file, fix_imports=True)", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7372}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "gettext.translation(domain, localedir=None, codeset=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . If provided , `codeset` will change the charset used to encode translated strings in the lgettext ( ) and lngettext ( ) methods .", "question_id": 4238}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "tarfile.open(**kwargs, fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9893}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "argparse.FileType(bufsize=-1, encoding=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `encoding`.", "question_id": 93}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "control.event(event, argument, condition=1, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`, `ordering`.", "question_id": 6129}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "window.chgat(attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "question_id": 2030}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "urllib.request.HTTPSHandler(debuglevel=0, context=None)", "intent": "A class to handle opening of HTTPS URLs . `context` and `check_hostname` have the same meaning as in http.client.HTTPSConnection . With arguments `debuglevel`.", "question_id": 11806}
{"snippet": "loop.getaddrinfo(host, port, family=0, flags=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `flags`.", "question_id": 296}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12553}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "element.iterfind(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12503}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}
{"snippet": "doctest.run_docstring_examples(f, globs, verbose=False, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2791}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "argparse.ArgumentParser(parents=)", "intent": "Create a new ArgumentParser object . With arguments `parents`.", "question_id": 43}
{"snippet": "memory_bio.write(buf)", "intent": "Write the bytes from `buf` to the memory BIO .", "question_id": 9058}
{"snippet": "venv.create(env_dir, symlinks=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `symlinks`.", "question_id": 11992}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "dataclasses.astuple(instance)", "intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "question_id": 2181}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "curses.typeahead(fd)", "intent": "Specify that the file descriptor `fd` be used for typeahead checking .", "question_id": 1991}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "nntplib.NNTP_SSL(host, port=563, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "question_id": 6437}
{"snippet": "xml.sax.saxutils.prepare_input_source(source, base='')", "intent": "This function takes an input `source` and an optional `base` URL and returns a fully resolved InputSource object ready for reading .", "question_id": 12668}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "bytearray.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9356}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589}
{"snippet": "random.choices(population, weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7900}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "formatter.push_margin(margin)", "intent": "Increase the number of left `margin` indentations by one , associating the logical tag margin with the new indentation .", "question_id": 3830}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "element.remove(subelement)", "intent": "Removes `subelement` from the element .", "question_id": 12506}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "writer.new_alignment(align)", "intent": "Set the alignment style . The `align` value can be any object , but by convention is a string or None , where None indicates that the writer \u2019 s \u201c preferred \u201d alignment should be used .", "question_id": 3842}
{"snippet": "os.spawnlpe(mode, file, env)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7056}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "FTP.login(user='anonymous', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3920}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "os.chmod(path, mode, follow_symlinks=True)", "intent": "Change the `mode` of `path` to the numeric mode . With arguments `follow_symlinks`.", "question_id": 6837}
{"snippet": "Path.chmod(mode)", "intent": "Change the file `mode` and permissions , like os.chmod ( ) :", "question_id": 7268}
{"snippet": "email.message_from_bytes(s, _class=None)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3397}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6123}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11429}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "email.iterators.typed_subpart_iterator(msg, subtype=None)", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3212}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "sys_log_handler.encodePriority(facility, priority)", "intent": "Encodes the `facility` and `priority` into an integer .", "question_id": 5504}
{"snippet": "nntplib.NNTP(host, timeout, port=119)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection .", "question_id": 6400}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "itertools.count(start=0)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5247}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}
{"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}
{"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}
{"snippet": "compileall.compile_path(legacy=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `legacy`.", "question_id": 1434}
{"snippet": "importlib.__import__(name, globals=None, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `level`.", "question_id": 4790}
{"snippet": "FTP.ntransfercmd(cmd, rest=None)", "intent": "Like transfercmd ( ) , but returns a tuple of the data connection and the expected size of the data . `cmd` and `rest` means the same thing as in transfercmd ( ) .", "question_id": 3946}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "codecs.getdecoder(encoding)", "intent": "Look up the codec for the given `encoding` and return its decoder function .", "question_id": 1219}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}
{"snippet": "io.open(file, opener=None)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `opener`.", "question_id": 5058}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6040}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11430}
{"snippet": "os.spawnv(mode, path, args)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7057}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "logging.handlers.MemoryHandler(capacity)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) .", "question_id": 5529}
{"snippet": "lzma.open(filename, format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5658}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "email_message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3270}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "bytearray.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9282}
{"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}
{"snippet": "email.policy.Policy(**kw)", "intent": "This is the abstract base class for all policy classes . With arguments `**kw`.", "question_id": 3412}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}
{"snippet": "calendar.prcal(year, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `m`.", "question_id": 1005}
{"snippet": "turtle.numinput(title, prompt, default=None, minval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11088}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "webbrowser.register(name, constructor)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12110}
{"snippet": "py_compile.compile(file, optimize=-1)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `optimize` controls the optimization level and is passed to the built-in compile ( ) function .", "question_id": 7825}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}
{"snippet": "config_parser.items(section)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1556}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2849}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "heapq.heappushpop(heap, item)", "intent": "Push `item` on the `heap` , then pop and return the smallest item from the heap .", "question_id": 4318}
{"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}
{"snippet": "profile.Profile(builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "question_id": 7673}
{"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}
{"snippet": "itertools.repeat(object, times)", "intent": "Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .", "question_id": 5262}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6120}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12129}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "Codec.decode(input, errors)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1263}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "Pattern.match(string, pos, endpos)", "intent": "If zero or more characters at the beginning of `string` match this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7973}
{"snippet": "zlib.compressobj(level=-1, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `strategy` is used to tune the compression algorithm .", "question_id": 12916}
{"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}
{"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}
{"snippet": "ctypes._SimpleCData", "intent": "This non-public class is the base class of all fundamental ctypes data types.", "question_id": 1853}
{"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}
{"snippet": "lzma.decompress(data, format=FORMAT_AUTO, filters=None)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5719}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}
{"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}
{"snippet": "asyncio.open_unix_connection(sock=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `sock`.", "question_id": 488}
{"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}
{"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}
{"snippet": "prototype(vtbl_index, name, paramflags, iid)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method . `iid` is an optional pointer to the interface identifier which is used in extended error reporting . With arguments `paramflags`.", "question_id": 1805}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "POP3.list()", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) .", "question_id": 7610}
{"snippet": "logging.Formatter(fmt=None, datefmt=None)", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . If no `datefmt` is specified , a format is used which is described in the formatTime ( ) documentation .", "question_id": 5614}
{"snippet": "print(*objects, sep=' ', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4082}
{"snippet": "unittest.mock.Mock(**kwargs, spec=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `spec`.", "question_id": 11561}
{"snippet": "config_parser.items(section)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1556}
{"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}
{"snippet": "turtle.ondrag(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "question_id": 11030}
{"snippet": "warnings.filterwarnings(action, message='', category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `category`.", "question_id": 12029}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, dict_type=collections.OrderedDict)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `dict_type`.", "question_id": 1571}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "FileHandler.file_open(req)", "intent": "Open the file locally , if there is no host name , or the host name is 'localhost ' . With arguments `req`.", "question_id": 11873}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "zlib.compressobj(zdict, level=-1, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `strategy` is used to tune the compression algorithm .", "question_id": 12906}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "timeit.Timer(setup='pass', timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10505}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "array.array(typecode, initializer)", "intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "question_id": 115}
{"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "turtle.tracer(n=None, delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11061}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11616}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`.", "question_id": 63}
{"snippet": "null_translations.ngettext(singular, plural, n)", "intent": "If a fallback has been set , forward ngettext ( ) to the fallback . Otherwise , return `singular` if `n` is 1 ; return `plural` otherwise .", "question_id": 4252}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "test.support.swap_item(obj, attr, new_val)", "intent": "Context manager to swap out an item with a new object . This will set `obj` [ `` item '' ] to 5 for the duration of the with block , restoring the old value at the end of the block . With arguments `attr`, `new_val`.", "question_id": 10195}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "types.DynamicClassAttribute(doc=None)", "intent": "Route attribute access on a class to __getattr__ . With arguments `doc`.", "question_id": 11222}
{"snippet": "base_selector.get_key(fileobj)", "intent": "Return the key associated with a registered file object . With arguments `fileobj`.", "question_id": 8223}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5875}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "webbrowser.register(name, constructor, instance=None, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12113}
{"snippet": "connection.backup(target, pages=0, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8834}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "gzip.GzipFile(fileobj=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value .", "question_id": 4286}
{"snippet": "HTTPPasswordMgr.find_user_password(realm, authuri)", "intent": "Get user/password for given `realm` and URI , if any . With arguments `authuri`.", "question_id": 11858}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "array.array(typecode, initializer)", "intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "question_id": 115}
{"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}
{"snippet": "Queue.put(item, block=True, timeout=None)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7852}
{"snippet": "turtle.pen(**pendict, pen=None)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10959}
{"snippet": "doctest.testmod(name=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional argument `name` gives the name of the module ; by default , or if None , m.__name__ is used .", "question_id": 2778}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "io.open(file, opener=None)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `opener`.", "question_id": 5058}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "io.FileIO(name, mode='r')", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending .", "question_id": 5100}
{"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "json.JSONDecoder(strict=True)", "intent": "Simple JSON decoder . If `strict` is false ( True is the default ) , then control characters will be allowed inside strings .", "question_id": 5315}
{"snippet": "ContentHandler.startPrefixMapping(prefix, uri)", "intent": "Begin the scope of a prefix-URI Namespace mapping . With arguments `prefix`, `uri`.", "question_id": 12573}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . With arguments `fromaddr`.", "question_id": 5516}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "compileall.compile_file(fullname)", "intent": "Compile the file with path `fullname` .", "question_id": 1419}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .", "question_id": 9033}
{"snippet": "property(fset=None, doc=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4094}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "email.generator.BytesGenerator(outfp)", "intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3078}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "bz2.BZ2File(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 889}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "test.support.start_threads(threads, unlock=None)", "intent": "Context manager to start `threads` . With arguments `unlock`.", "question_id": 10199}
{"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'str'>`.", "question_id": 3044}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, timeout=1.0)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . A `timeout` can be specified for communication with the SMTP server using the timeout argument . With arguments `fromaddr`.", "question_id": 5518}
{"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}
{"snippet": "doctest.Example(source, want, lineno=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`.", "question_id": 2826}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "ast.parse(source, filename='<unknown>', mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 148}
{"snippet": "importlib.util.module_from_spec(spec)", "intent": "Create a new module based on `spec` and spec.loader.create_module .", "question_id": 4930}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "traceback.print_exception(etype, value, tb, file=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10739}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "difflib.unified_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2648}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}
{"snippet": "timeit.repeat(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10488}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12553}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1709}
{"snippet": "bytearray.endswith(suffix)", "intent": "Return True if the binary data ends with the specified `suffix` , otherwise return False .", "question_id": 9288}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "urllib.request.urlretrieve(url, filename=None, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied . With arguments `reporthook`.", "question_id": 11885}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "socket.setsockopt(level, optname, None, optlen: int)", "intent": "Set the value of the given socket option ( see the Unix manual page setsockopt ( 2 ) ) . The value can be an integer , `None` or a bytes-like object representing a buffer . With arguments `level`, `optname`, `optlen: int`.", "question_id": 8739}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "text_io_base.seek(offset)", "intent": "Change the stream position to the given `offset` .", "question_id": 5142}
{"snippet": "CookieJar.clear(domain, path, name)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed . If given three arguments , then the cookie with the specified domain , path and `name` is removed .", "question_id": 4493}
{"snippet": "gettext.find(domain, localedir=None, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4228}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "faulthandler.unregister(signum)", "intent": "Unregister a user signal : uninstall the handler of the `signum` signal installed by register ( ) .", "question_id": 3739}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694}
{"snippet": "xml.etree.ElementTree.parse(source, parser=None)", "intent": "Parses an XML section into an element tree . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12447}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12914}
{"snippet": "bz2.BZ2Decompressor", "intent": "Create a new decompressor object.", "question_id": 900}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "window.addch(y, x, ch, attr)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2002}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "email_message.make_alternative(boundary=None)", "intent": "Convert a non-multipart or a multipart/related into a multipart/alternative , moving any existing Content- headers and payload into a ( new ) first part of the multipart . If `boundary` is specified , use it as the boundary string in the multipart , otherwise leave the boundary to be automatically created when it is needed ( for example , when the message is serialized ) .", "question_id": 3297}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "chunk.Chunk(file, align=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries .", "question_id": 1076}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}
{"snippet": "json.loads(s, **kw, cls=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5302}
{"snippet": "signature.replace(parameters, return_annotation)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4988}
{"snippet": "ctypes.WinError(code=None, descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `code` is not specified , GetLastError is called to determine the error code . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1839}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "os.execlp(file, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . With arguments `arg0`, `arg1`.", "question_id": 7011}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "base64.a85encode(b, foldspaces=False, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 732}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "sys._getframe(depth)", "intent": "Return a frame object from the call stack . If optional integer `depth` is given , return the frame object that many calls below the top of the stack .", "question_id": 9805}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}
{"snippet": "mh.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "question_id": 5781}
{"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None, is_package=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`, `is_package`.", "question_id": 4937}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text')", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3211}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "charset.__eq__(other)", "intent": "This method allows you to compare two Charset instances for equality . With arguments `other`.", "question_id": 2924}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "types.DynamicClassAttribute(doc=None)", "intent": "Route attribute access on a class to __getattr__ . With arguments `doc`.", "question_id": 11222}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "lzma.LZMAFile(filters=None)", "intent": "Open an LZMA-compressed file in binary `mode` . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5672}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}
{"snippet": "struct.pack_into(buffer, offset, v1, v2)", "intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "question_id": 9560}
{"snippet": "Codec.encode(input, errors)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1261}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "xmlparser.ExternalEntityParserCreate(context)", "intent": "Create a \u201c child \u201d parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser . The `context` parameter should be the string passed to the ExternalEntityRefHandler ( ) handler function , described below .", "question_id": 7739}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "random.vonmisesvariate(mu, kappa)", "intent": "`mu` is the mean angle , expressed in radians between 0 and 2*pi , and `kappa` is the concentration parameter , which must be greater than or equal to zero .", "question_id": 7915}
{"snippet": "bdb.set_break(filename, lineno, cond, funcname)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "question_id": 793}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "syslog.openlog(ident)", "intent": "Logging options of subsequent syslog ( ) calls can be set by calling openlog ( ) . The optional `ident` keyword argument is a string which is prepended to every message , and defaults to sys.argv [ 0 ] with leading path components stripped .", "question_id": 9881}
{"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}
{"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}
{"snippet": "bytearray.replace(old, new, count)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9309}
{"snippet": "os.utime(path, ns, times=None, dir_fd=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `dir_fd`.", "question_id": 6963}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}
{"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12462}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "zlib.adler32(data, value)", "intent": "Computes an Adler-32 checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 1 is used .", "question_id": 12893}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "HTMLParser.handle_decl(decl)", "intent": "This method is called to handle an HTML doctype declaration ( e.g . The `decl` parameter will be the entire contents of the declaration inside the < ! ... > markup ( e.g .", "question_id": 4363}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "lzma.compress(data, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5707}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "collections.deque(iterable, maxlen)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .", "question_id": 1350}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}
{"snippet": "text_io_base.seek(offset)", "intent": "Change the stream position to the given `offset` .", "question_id": 5142}
{"snippet": "traceback.FrameSummary(filename, lineno, name)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . With arguments `filename`, `lineno`, `name`.", "question_id": 10833}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key . `reserved` is a reserved integer , and must be zero .", "question_id": 12131}
{"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}
{"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}
{"snippet": "gettext.bind_textdomain_codeset(domain)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4212}
{"snippet": "mailbox.mbox(path, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5771}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12420}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`, `encoding`.", "question_id": 5451}
{"snippet": "ZipFile.open(name, mode='r')", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' .", "question_id": 12807}
{"snippet": "ctypes.LittleEndianStructure(*args, **kw)", "intent": "Abstract base class for structures in little endian byte order . With arguments `*args`, `**kw`.", "question_id": 1888}
{"snippet": "urllib.parse.unquote_plus(string, errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `errors`.", "question_id": 11729}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`.", "question_id": 524}
{"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595}
{"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}
{"snippet": "traceback.print_exc(limit=None, chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10750}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "textwrap.fill(text, **kwargs)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`.", "question_id": 10320}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "bdb.runeval(expr, locals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 813}
{"snippet": "loop.getaddrinfo(host, port, type=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `proto`.", "question_id": 297}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "queue_listener.getChild(suffix)", "intent": "Returns a logger which is a descendant to this logger , as determined by the `suffix` .", "question_id": 5569}
{"snippet": "pprint.pformat(object, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7636}
{"snippet": "smtplib.SMTP(timeout, port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8450}
{"snippet": "directory.start_component(component=None, uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6102}
{"snippet": "os.sendfile(out, in, offset, count, headers, trailers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6795}
{"snippet": "window.addnstr(y, x, str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2006}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "tarfile.open(**kwargs, name=None, mode='r')", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . With arguments `**kwargs`.", "question_id": 9895}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11128}
{"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "doctest.debug(module, name, pm=False)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above . Optional argument `pm` controls whether post-mortem debugging is used .", "question_id": 2889}
{"snippet": "pool.apply_async(func, args, kwds)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`, `kwds`.", "question_id": 6337}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "smtplib.SMTP_SSL(port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8480}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365}
{"snippet": "IMAP4.deleteacl(mailbox, who)", "intent": "Delete the ACLs ( remove any rights ) set for `who` on `mailbox` .", "question_id": 4698}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "urllib.request.URLopener(**x509, proxies=None)", "intent": "Base class for opening and reading URLs . The optional `proxies` parameter should be a dictionary mapping scheme names to proxy URLs , where an empty dictionary turns proxies off completely . With arguments `**x509`.", "question_id": 11891}
{"snippet": "POP3.rpop(user)", "intent": "Use RPOP authentication ( similar to UNIX r-commands ) to log into POP3 server . With arguments `user`.", "question_id": 7607}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "doctest.debug(module, name)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above .", "question_id": 2888}
{"snippet": "codecs.decode(obj)", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1196}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "iterator.__next__()", "intent": "Return the next item from the container .", "question_id": 9153}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "os.chown(path, uid, gid, dir_fd=None)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` . With arguments `dir_fd`.", "question_id": 6840}
{"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}
{"snippet": "io.BufferedRandom(raw)", "intent": "A buffered interface to random access streams . The constructor creates a reader and writer for a seekable `raw` stream , given in the first argument .", "question_id": 5128}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "glob.iglob(pathname)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`.", "question_id": 4266}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "logging.Formatter(fmt=None, style='%')", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5615}
{"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}
{"snippet": "curses.ungetch(ch)", "intent": "Push `ch` so the next getch ( ) will return it .", "question_id": 1993}
{"snippet": "code.InteractiveConsole(locals=None, filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`, `filename`.", "question_id": 1160}
{"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "operator.__abs__(obj)", "intent": "Return the absolute value of `obj` .", "question_id": 6531}
{"snippet": "mmap.seek(pos)", "intent": "Set the file \u2019 s current position . With arguments `pos`.", "question_id": 6018}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "shutil.register_archive_format(name, function, extra_args, description)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used . `description` is used by get_archive_formats ( ) which returns the list of archivers .", "question_id": 8359}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "logging.FileHandler(filename, mode='a', encoding=None)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `encoding` is not None , it is used to open the file with that encoding . With arguments `filename`.", "question_id": 5430}
{"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "bytes.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9343}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "collections.namedtuple(typename, field_names, defaults=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . `defaults` can be None or an iterable of default values .", "question_id": 1378}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "os.walk(top, topdown=True, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6980}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "PurePath.with_suffix(suffix)", "intent": "Return a new path with the `suffix` changed .", "question_id": 7261}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "HTTPConnection.putrequest(method, url, skip_accept_encoding=False)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) . To disable automatic sending of Host : or Accept-Encoding : headers ( for example to accept additional content encodings ) , specify `skip_host` or `skip_accept_encoding` with non-False values .", "question_id": 4446}
{"snippet": "calendar.itermonthdays4(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 916}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}
{"snippet": "warnings.simplefilter(action, category=Warning, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `lineno`, `append`.", "question_id": 12040}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, all_frames: bool=False)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `all_frames: bool`.", "question_id": 10856}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "os.spawnv(mode, path, args)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7057}
{"snippet": "AU_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 9725}
{"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}
{"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "turtle.tracer(delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11060}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "tkinter.Tcl(screenName=None, className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `screenName`, `className`.", "question_id": 10533}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256}
{"snippet": "asyncio.open_unix_connection(limit=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `limit`.", "question_id": 486}
{"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}
{"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4588}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}
{"snippet": "nntplib.NNTP_SSL(host, timeout, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `user`.", "question_id": 6421}
{"snippet": "callable(object)", "intent": "Return True if the `object` argument appears callable , False if not .", "question_id": 3989}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7493}
{"snippet": "warnings.simplefilter(action, category=Warning, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `lineno`, `append`.", "question_id": 12040}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}
{"snippet": "mailbox.mbox(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5770}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "str.rsplit(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9237}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, filters=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5711}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "re.subn(pattern, repl, string, count=0, flags=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`, `flags`.", "question_id": 7958}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "platform.libc_ver(version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7540}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "doctest.DocTestRunner(verbose=None, optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2867}
{"snippet": "wave.openfp(file, mode)", "intent": "A synonym for open ( ) , maintained for backwards compatibility . With arguments `file`, `mode`.", "question_id": 12048}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "datetime.replace(microsecond=self.microsecond)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "question_id": 2291}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "turtle.turtlesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10997}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . With arguments `prog`, `parser_class`.", "question_id": 79}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11142}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "configparser.RawConfigParser(':'), ';'), defaults=None)", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `defaults`.", "question_id": 1580}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}
{"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}
{"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424}
{"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354}
{"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}
{"snippet": "urllib.request.urlretrieve(url, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11884}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "doctest.run_docstring_examples(f, globs, verbose=False)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures .", "question_id": 2787}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "socket.sendfile(file, offset=0, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8735}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "pdb.Pdb(stdin=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7343}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "test.support.check__all__(test_case, module, extra=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "question_id": 10279}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "subprocess.check_call(args, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9671}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}
{"snippet": "importlib.util.spec_from_loader(name, loader)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`.", "question_id": 4934}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "socket.ioctl(control, option)", "intent": "The ioctl ( ) method is a limited interface to the WSAIoctl system interface . Currently only the following `control` codes are supported : SIO_RCVALL , SIO_KEEPALIVE_VALS , and SIO_LOOPBACK_FAST_PATH . With arguments `option`.", "question_id": 8688}
{"snippet": "xml.parsers.expat.ErrorString(errno)", "intent": "Returns an explanatory string for a given error number `errno` .", "question_id": 7727}
{"snippet": "header.append(s, charset=None)", "intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance .", "question_id": 3127}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "gettext.install(domain, codeset=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "question_id": 4241}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717}
{"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "coverage_results.write_results(summary=False, coverdir=None)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module . `coverdir` specifies the directory into which the coverage result files will be output .", "question_id": 10731}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "asyncio.as_completed(aws, loop=None, timeout=None)", "intent": "Run awaitable objects in the `aws` set concurrently . Raises asyncio.TimeoutError if the `timeout` occurs before all Futures are done . With arguments `loop`.", "question_id": 618}
{"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . With arguments `is_package`.", "question_id": 4915}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "message.del_param(param, requote=True)", "intent": "Remove the given parameter completely from the Content-Type `header` . All values will be quoted as necessary unless `requote` is False ( the default is True ) . With arguments `param`.", "question_id": 3011}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}
{"snippet": "random.choices(population, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7901}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "iterator.__iter__()", "intent": "Return the iterator object itself .", "question_id": 9152}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}
{"snippet": "os.access(path, mode, follow_symlinks=True)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . With arguments `follow_symlinks`.", "question_id": 6823}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "time.isoformat(timespec='auto')", "intent": "Return a string representing the time in ISO 8601 format , HH : MM : SS.ffffff or , if microsecond is 0 , HH : MM : SS If utcoffset ( ) does not return None , a string is appended , giving the UTC offset : HH : MM : SS.ffffff+HH : MM [ : SS [ .ffffff ] ] or , if self.microsecond is 0 , HH : MM : SS+HH : MM [ : SS [ .ffffff ] ] . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2345}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "bytes(source)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`.", "question_id": 3987}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1381}
{"snippet": "getpass.getpass(prompt='Password: ', stream=None)", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4207}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "platform.libc_ver(lib='', chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7546}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "pickle.dump(obj, file, protocol=None)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) .", "question_id": 7364}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "shelve.BsdDbShelf(dict, writeback=False)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8254}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}
{"snippet": "tarfile.open(**kwargs, fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9893}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1706}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980}
{"snippet": "audioop.cross(fragment, width)", "intent": "Return the number of zero crossings in the `fragment` passed as an argument . With arguments `width`.", "question_id": 687}
{"snippet": "sysconfig.get_path(name, scheme)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme .", "question_id": 9864}
{"snippet": "shutil.move(src, dst, copy_function=copy2)", "intent": "Recursively move a file or directory ( `src` ) to another location ( `dst` ) and return the destination . Otherwise , src is copied to dst using `copy_function` and then removed .", "question_id": 8339}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object .", "question_id": 5992}
{"snippet": "doctest.DocFileSuite(*paths, setUp=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `setUp` specifies a set-up function for the test suite . With arguments `*paths`.", "question_id": 2799}
{"snippet": "subprocess.run(args, check=False)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9576}
{"snippet": "asyncio.open_connection(family=0)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `family`.", "question_id": 469}
{"snippet": "gzip.open(filename, newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4277}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "test_case.assertIn(first, second, msg=None)", "intent": "Test that `first` is ( or is not ) in `second` . With arguments `msg`.", "question_id": 11392}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "TarFile.gettarinfo(name=None, fileobj=None)", "intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor .", "question_id": 9964}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "date.replace(month=self.month, day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `month`, `day`.", "question_id": 2235}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202}
{"snippet": "TarInfo.frombuf(buf, encoding, errors)", "intent": "Create and return a TarInfo object from string buffer `buf` . With arguments `encoding`, `errors`.", "question_id": 9971}
{"snippet": "ur_lopener.open_unknown(fullurl)", "intent": "Overridable interface to open unknown URL types . With arguments `fullurl`.", "question_id": 11894}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "random.randrange(start, stop)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7892}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954}
{"snippet": "tkinter.Tcl(baseName=None)", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`.", "question_id": 10529}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "operator.__ge__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6523}
{"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "BaseCookie.output(attrs=None, sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4589}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "lzma.compress(data, check=-1, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5712}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}
{"snippet": "formatter.push_style(*styles)", "intent": "Push any number of arbitrary style specifications . With arguments `*styles`.", "question_id": 3832}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "logging.FileHandler(filename, mode='a')", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5427}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "loop.create_server(protocol_factory, ssl=None)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `ssl`.", "question_id": 239}
{"snippet": "plistlib.dumps(value, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `skipkeys`.", "question_id": 7574}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12663}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2112}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}
{"snippet": "inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "intent": "Format a pretty argument spec from the four values returned by getargvalues ( ) . With arguments `args`, `varargs`, `varkw`, `locals`, `formatarg`, `formatvarargs`, `formatvarkw`.", "question_id": 5017}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2788}
{"snippet": "asyncio.open_connection(family=0)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `family`.", "question_id": 469}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "platform.mac_ver('', ''), release='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7510}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "doc_test_runner.run(test, out=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2875}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11118}
{"snippet": "test_case.assertWarns(warning)", "intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) .", "question_id": 11406}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}
{"snippet": "socket.recvfrom(bufsize)", "intent": "Receive data from the socket . With arguments `bufsize`.", "question_id": 8704}
{"snippet": "FTP.voidcmd(cmd)", "intent": "Send a simple command string to the server and handle the response . With arguments `cmd`.", "question_id": 3925}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "quopri.decode(input, output, header=False)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .", "question_id": 7874}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 835}
{"snippet": "POP3.list()", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) .", "question_id": 7610}
{"snippet": "operator.__ge__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6523}
{"snippet": "definition.__qualname__", "intent": "The qualified name of the class, function, method, descriptor, or generator instance.", "question_id": 9503}
{"snippet": "BaseException", "intent": "The base class for all built-in exceptions.", "question_id": 3628}
{"snippet": "calendar.prmonth(theyear, themonth, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 995}
{"snippet": "header.append(s, charset=None, errors='strict')", "intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "question_id": 3129}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "heapq.heappush(heap, item)", "intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "question_id": 4316}
{"snippet": "turtle.onscreenclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11078}
{"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}
{"snippet": "pprint.pformat(object, indent=1, compact=False)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7640}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "codecs.decode(obj)", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1196}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "loop.getaddrinfo(host, port, type=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `proto`.", "question_id": 297}
{"snippet": "socket.recv_into(buffer)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8716}
{"snippet": "header.append(s, charset=None, errors='strict')", "intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "question_id": 3129}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "traceback.FrameSummary(filename, lineno, name)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . With arguments `filename`, `lineno`, `name`.", "question_id": 10833}
{"snippet": "bytearray.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9306}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "compile(source, filename, mode, flags=0, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3997}
{"snippet": "traceback.print_exception(etype, value, tb, chain=True)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . If `chain` is true ( the default ) , then chained exceptions ( the __cause__ or __context__ attributes of the exception ) will be printed as well , like the interpreter itself does when printing an unhandled exception . With arguments `etype`, `value`.", "question_id": 10740}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `is_package`.", "question_id": 4917}
{"snippet": "ur_lopener.retrieve(url, filename=None, reporthook=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) .", "question_id": 11900}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "difflib.unified_diff(a, b, fromfile='', tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2654}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "subprocess.call(args, stdin=None, shell=False)", "intent": "Run the command described by `args` . With arguments `stdin`, `shell`.", "question_id": 9668}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='', osinfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7494}
{"snippet": "config_parser.items(section, raw=False)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1557}
{"snippet": "test.support.set_memlimit(limit)", "intent": "Set the values for max_memuse and real_max_memuse for big memory tests . With arguments `limit`.", "question_id": 10167}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "pprint.pprint(object, indent=1)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7645}
{"snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), version='')", "intent": "Tries to determine the name of the Linux OS distribution name . Returns a tuple ( `distname` , `version` , `id` ) which defaults to the args given as parameters . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "question_id": 7529}
{"snippet": "nntplib.NNTP_SSL(host, timeout, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `user`.", "question_id": 6421}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'EmailMessage'>`.", "question_id": 3063}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "sunau.open(file, mode)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a seekable file-like object . `mode` can be any of", "question_id": 9691}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "urllib.request.HTTPSHandler(debuglevel=0)", "intent": "A class to handle opening of HTTPS URLs . With arguments `debuglevel`.", "question_id": 11803}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict')", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` . With arguments `errors`.", "question_id": 1300}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`.", "question_id": 5585}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "bdb.dispatch_exception(frame, arg)", "intent": "If the debugger should stop at this exception , invokes the user_exception ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "question_id": 776}
{"snippet": "lzma.compress(data, filters=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5708}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "traceback.print_exception(etype, value, tb, limit=None, file=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10741}
{"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "xmlparser.ExternalEntityParserCreate(context)", "intent": "Create a \u201c child \u201d parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser . The `context` parameter should be the string passed to the ExternalEntityRefHandler ( ) handler function , described below .", "question_id": 7739}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "argparse.FileType(bufsize=-1, encoding=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `encoding`.", "question_id": 93}
{"snippet": "io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given byte `offset` . offset is interpreted relative to the position indicated by `whence` .", "question_id": 5075}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777}
{"snippet": "os.execle(path, arg0, arg1, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "question_id": 7010}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151}
{"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "urllib.error.ContentTooShortError(msg, content)", "intent": "This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.", "question_id": 11664}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628}
{"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "loader.exec_module(module)", "intent": "An abstract method that executes the `module` in its own namespace when a module is imported or reloaded .", "question_id": 4815}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "OSError(errno, strerror, filename)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.", "question_id": 3652}
{"snippet": "socket.gethostbyname_ex(hostname)", "intent": "Translate a host name to IPv4 address format , extended interface . Return a triple ( `hostname` , aliaslist , ipaddrlist ) where hostname is the primary host name responding to the given ip_address , aliaslist is a ( possibly empty ) list of alternative host names for the same address , and ipaddrlist is a list of IPv4 addresses for the same interface on the same host ( often but not always a single address ) .", "question_id": 8648}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "resource.getrlimit(resource)", "intent": "Returns a tuple ( soft , hard ) with the current soft and hard limits of `resource` .", "question_id": 8071}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5867}
{"snippet": "r_lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10384}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 49}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "shutil.copyfileobj(fsrc, fdst, length)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` . The integer `length` , if given , is the buffer size .", "question_id": 8309}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11142}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12467}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5868}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "bytes.rsplit(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9354}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "question_id": 4995}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "TarFile.add(name, recursive=True, filter=None)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9955}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "pprint.PrettyPrinter(indent=1, stream=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol \u2019 s write ( ) method .", "question_id": 7631}
{"snippet": "binascii.b2a_qp(data, istext=True, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 834}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}
{"snippet": "ref.__callback__", "intent": "This read-only attribute returns the callback currently associated to the weakref.", "question_id": 12076}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "compileall.compile_dir(dir, rx=None)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `rx` is given , its search method is called on the complete path to each file considered for compilation , and if it returns a true value , the file is skipped .", "question_id": 1413}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "gettext.find(domain, localedir=None, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4228}
{"snippet": "os.spawnl(mode, path)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process .", "question_id": 7053}
{"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9176}
{"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4591}
{"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}
{"snippet": "os.path.commonpath(paths)", "intent": "Return the longest common sub-path of each pathname in the sequence `paths` .", "question_id": 7144}
{"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`, `stdout`.", "question_id": 325}
{"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}
{"snippet": "tokenize.tokenize(readline)", "intent": "The tokenize ( ) generator requires one argument , `readline` , which must be a callable object which provides the same interface as the io.IOBase.readline ( ) method of file objects .", "question_id": 10701}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "wsgiref.util.request_uri(environ, include_query=True)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . If `include_query` is false , the query string is not included in the resulting URI . With arguments `environ`.", "question_id": 12212}
{"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}
{"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}
{"snippet": "typing.MutableMapping(MappingKT, VT)", "intent": "A generic version of collections.abc.MutableMapping . With arguments `MappingKT`, `VT`.", "question_id": 11259}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "dispatcher.create_socket(family=socket.AF_INET)", "intent": "This is identical to the creation of a normal socket , and will use the same options for creation . With arguments `family`.", "question_id": 664}
{"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}
{"snippet": "os.mknod(path, mode=0o600, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` . `mode` specifies both the permissions to use and the type of node to be created , being combined ( bitwise OR ) with one of stat.S_IFREG , stat.S_IFCHR , stat.S_IFBLK , and stat.S_IFIFO ( those constants are available in stat ) .", "question_id": 6878}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}
{"snippet": "codecs.decode(obj, encoding='utf-8')", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1197}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577}
{"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "collections.Counter(iterable-or-mapping)", "intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "question_id": 1340}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12454}
{"snippet": "Queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7849}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "Document.getElementsByTagName(tagName)", "intent": "Search for all descendants ( direct children , children \u2019 s children , etc . ) With arguments `tagName`.", "question_id": 12352}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "email.headerregistry.Group(display_name=None, addresses=None)", "intent": "The class used to represent an address group . As a convenience for processing lists of `addresses` that consist of a mixture of groups and single addresses , a Group may also be used to represent single addresses that are not part of a group by setting `display_name` to None and providing a list of the single address as addresses .", "question_id": 3204}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "cgi.parse_qsl(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1043}
{"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "threading.Semaphore(value=1)", "intent": "This class implements semaphore objects . A semaphore manages an atomic counter representing the number of release ( ) calls minus the number of acquire ( ) calls , plus an initial `value` .", "question_id": 10398}
{"snippet": "DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)", "intent": "Handle an unparsed entity declaration event . With arguments `name`, `publicId`, `systemId`, `ndata`.", "question_id": 12584}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "string.Template(template)", "intent": "The constructor takes a single argument which is the `template` string .", "question_id": 9525}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "asyncio.Condition(lock=None)", "intent": "A Condition object . The optional `lock` argument must be a Lock object or None .", "question_id": 570}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`.", "question_id": 5585}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "calendar.yeardays2calendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 922}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "tzinfo.fromutc(dt)", "intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "question_id": 2356}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "pdb.runeval(expression)", "intent": "See the documentation for the functions explained above . With arguments `expression`.", "question_id": 7355}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "process.join(timeout)", "intent": "If the optional argument `timeout` is None ( the default ) , the method blocks until the process whose join ( ) method is called terminates .", "question_id": 6177}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}
{"snippet": "shutil.copyfile(src, dst)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst .", "question_id": 8311}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "curses.setupterm(fd=-1)", "intent": "Initialize the terminal . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1981}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "curses.newwin(nlines, ncols)", "intent": "Return a new window , whose left-upper corner is at ( begin_y , begin_x ) , and whose height/width is nlines/ncols . With arguments `nlines`, `ncols`.", "question_id": 1958}
{"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}
{"snippet": "robot_file_parser.can_fetch(useragent, url)", "intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "question_id": 11912}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "decimal.Context(prec=None)", "intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context .", "question_id": 2500}
{"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "shlex.error_leader(lineno=None)", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `lineno`.", "question_id": 8292}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "configparser.RawConfigParser(':'), ';'), defaults=None)", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `defaults`.", "question_id": 1580}
{"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}
{"snippet": "datetime.astimezone(tz=None)", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2295}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "tkinter.Tk(screenName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `screenName`, `className`.", "question_id": 10523}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "Path.lchmod(mode)", "intent": "Like Path.chmod ( ) but , if the path points to a symbolic link , the symbolic link \u2019 s `mode` is changed rather than its target \u2019 s .", "question_id": 7282}
{"snippet": "operator.__le__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6520}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "traceback.print_exception(etype, value, tb, limit=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10738}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "DOMImplementation.hasFeature(feature, version)", "intent": "Return true if the `feature` identified by the pair of strings feature and `version` is implemented .", "question_id": 12311}
{"snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "question_id": 4995}
{"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 39}
{"snippet": "dis.disco(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2724}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}
{"snippet": "doc_test_runner.run(test, compileflags=None, out=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples .", "question_id": 2877}
{"snippet": "os.startfile(path, operation)", "intent": "Start a file with its associated application . The `path` parameter is relative to the current directory . When `operation` is not specified or 'open ' , this acts like double-clicking the file in Windows Explorer , or giving the file name as an argument to the start command from the interactive command shell : the file is opened with whatever application ( if any ) its extension is associated .", "question_id": 7066}
{"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}
{"snippet": "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.", "question_id": 4162}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "configparser.RawConfigParser(':'), ';'), strict=True)", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `strict`.", "question_id": 1586}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "bytearray.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9282}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "CookieJar.clear(domain, path, name)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed . If given three arguments , then the cookie with the specified domain , path and `name` is removed .", "question_id": 4493}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "time.replace(hour=self.hour, minute=self.minute)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`, `minute`.", "question_id": 2341}
{"snippet": "curses.resize_term(nlines, ncols)", "intent": "Backend function used by resizeterm ( ) , performing most of the work ; when resizing the windows , resize_term ( ) blank-fills the areas that are extended . With arguments `nlines`, `ncols`.", "question_id": 1975}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "array.array(typecode, initializer)", "intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "question_id": 115}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "mmap.mmap(fileno, length, offset)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset .", "question_id": 5984}
{"snippet": "ensurepip.bootstrap(upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3491}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71}
{"snippet": "xml.sax.saxutils.unescape(data, entities={})", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12655}
{"snippet": "InteractiveInterpreter.runsource(source, symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1177}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "email.iterators.typed_subpart_iterator(msg, subtype=None)", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3212}
{"snippet": "mailbox.__iter__()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5732}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "TarInfo.tobuf(encoding=ENCODING)", "intent": "Create a string buffer from a TarInfo object . With arguments `encoding`.", "question_id": 9975}
{"snippet": "trace.Trace(infile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "question_id": 10713}
{"snippet": "pickle.Unpickler(file, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7400}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "shutil.copytree(src, dst, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8325}
{"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "FTP.storbinary(cmd, fp, blocksize=8192)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored .", "question_id": 3934}
{"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}
{"snippet": "resource.getrlimit(resource)", "intent": "Returns a tuple ( soft , hard ) with the current soft and hard limits of `resource` .", "question_id": 8071}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "mailbox.MH(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MH format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5777}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "IMAP4.login_cram_md5(user, password)", "intent": "Force use of CRAM-MD5 authentication when identifying the client to protect the `password` . With arguments `user`.", "question_id": 4710}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `comment_prefixes`.", "question_id": 1574}
{"snippet": "Path.symlink_to(target)", "intent": "Make this path a symbolic link to `target` .", "question_id": 7315}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12129}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "importlib.util.resolve_name(name, package)", "intent": "Resolve a relative module `name` to an absolute one . This allows for usage such as importlib.util.resolve_name ( 'sys ' , __package__ ) without doing a check to see if the `package` argument is needed .", "question_id": 4927}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "question_id": 2020}
{"snippet": "os.fwalk(onerror=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `onerror`.", "question_id": 6986}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "doc_test_runner.run(test, compileflags=None, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2878}
{"snippet": "os.utime(path, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6968}
{"snippet": "traceback.format_stack(f=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10788}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "types.prepare_class(name, bases=())", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11179}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`.", "question_id": 5015}
{"snippet": "subprocess.run(args, capture_output=False)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9572}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "urllib.request.urlopen(url, data=None, cadefault=False)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . The `cadefault` parameter is ignored .", "question_id": 11760}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "dialog.text(name, x, y, width, height, attributes, text)", "intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "question_id": 6137}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11132}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "config_parser.items(vars=None)", "intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `vars`.", "question_id": 1554}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "tkinter.Tk(screenName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `screenName`, `className`.", "question_id": 10523}
{"snippet": "subprocess.Popen(args, cwd=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "question_id": 9608}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722}
{"snippet": "pool.map_async(func, iterable, chunksize)", "intent": "A variant of the map ( ) method which returns a result object . With arguments `func`, `iterable`, `chunksize`.", "question_id": 6344}
{"snippet": "InteractiveConsole.interact(banner=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close !", "question_id": 1185}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "email_message.make_alternative(boundary=None)", "intent": "Convert a non-multipart or a multipart/related into a multipart/alternative , moving any existing Content- headers and payload into a ( new ) first part of the multipart . If `boundary` is specified , use it as the boundary string in the multipart , otherwise leave the boundary to be automatically created when it is needed ( for example , when the message is serialized ) .", "question_id": 3297}
{"snippet": "base64.standard_b64encode(s)", "intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "question_id": 714}
{"snippet": "csv.writer(csvfile, **fmtparams)", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . With arguments `**fmtparams`.", "question_id": 1682}
{"snippet": "SystemError", "intent": "Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope.", "question_id": 3668}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}
{"snippet": "lzma.compress(data, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5707}
{"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}
{"snippet": "directory.start_component(component=None, uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6102}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}
{"snippet": "unicodedata.numeric(chr)", "intent": "Returns the numeric value assigned to the character `chr` as float .", "question_id": 11348}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}
{"snippet": "Match.groups(default=None)", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern . The `default` argument is used for groups that did not participate in the match ; it defaults to None .", "question_id": 8000}
{"snippet": "subprocess.run(args, stdin=None)", "intent": "Run the command described by `args` . The input argument is passed to Popen.communicate ( ) and thus to the subprocess \u2019 s `stdin` .", "question_id": 9568}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "window.inch(y)", "intent": "Return the character at the given position in the window . With arguments `y`.", "question_id": 2070}
{"snippet": "IMAP4.append(mailbox, flags, date_time, message)", "intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "question_id": 4691}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "ctypes._SimpleCData", "intent": "This non-public class is the base class of all fundamental ctypes data types.", "question_id": 1853}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048}
{"snippet": "xml.sax.saxutils.quoteattr(data, entities={})", "intent": "Similar to escape ( ) , but also prepares `data` to be used as an attribute value . With arguments `entities`.", "question_id": 12657}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12460}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10233}
{"snippet": "bdb.run(cmd, locals=None)", "intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "question_id": 809}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4159}
{"snippet": "TarFile.extract(member, path=\"\", set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9944}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}
{"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}
{"snippet": "message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3009}
{"snippet": "itertools.repeat(object, times)", "intent": "Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .", "question_id": 5262}
{"snippet": "os.path.relpath(path, start=os.curdir)", "intent": "Return a relative filepath to `path` either from the current directory or from an optional `start` directory .", "question_id": 7165}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "base_http_request_handler.log_request(size='-')", "intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "question_id": 4650}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189}
{"snippet": "tempfile.TemporaryFile(newline=None)", "intent": "Return a file-like object that can be used as a temporary storage area . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10037}
{"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}
{"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "decimal.quantize(exp, rounding=None, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2464}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "compileall.compile_dir(dir, optimize=-1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "question_id": 1416}
{"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391}
{"snippet": "warnings.filterwarnings(action, message='', lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `lineno`.", "question_id": 12031}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851}
{"snippet": "json.dump(obj, fp, **kw, separators=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If specified , `separators` should be an ( item_separator , key_separator ) tuple . With arguments `**kw`.", "question_id": 5277}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "subprocess.Popen(args, bufsize=-1)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `bufsize` will be supplied as the corresponding argument to the open ( ) function when creating the stdin/stdout/stderr pipe file objects :", "question_id": 9600}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "logging.handlers.HTTPHandler(host, url, secure=False, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5549}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "quopri.encodestring(s, quotetabs=False, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`, `header`.", "question_id": 7882}
{"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}
{"snippet": "radio_button_group.add(name, x, y, width, height, text, value=None)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` . If `value` is None , it defaults to name .", "question_id": 6134}
{"snippet": "decimal.compare_total(other)", "intent": "Compare two operands using their abstract representation rather than their numerical value . With arguments `other`.", "question_id": 2403}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "decimal.quantize(exp, rounding=None, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2464}
{"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}
{"snippet": "doc_test_finder.find(obj, name, module, globs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2851}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}
{"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}
{"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11152}
{"snippet": "subprocess.check_call(args, stdin=None, shell=False)", "intent": "Run command with arguments . With arguments `args`, `stdin`, `shell`.", "question_id": 9678}
{"snippet": "zlib.compressobj(wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12910}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2112}
{"snippet": "xmlrpc.server.DocXMLRPCServer(addr)", "intent": "Create a new server instance . With arguments `addr`.", "question_id": 12749}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "object.__reduce_ex__(protocol)", "intent": "Alternatively , a __reduce_ex__ ( ) method may be defined . The only difference is this method should take a single integer argument , the `protocol` version .", "question_id": 7414}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "textwrap.fill(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "question_id": 10321}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}
{"snippet": "bdb.dispatch_exception(frame, arg)", "intent": "If the debugger should stop at this exception , invokes the user_exception ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "question_id": 776}
{"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "logging.FileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "question_id": 5431}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`, `updated`.", "question_id": 4163}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .", "question_id": 9033}
{"snippet": "xml.etree.ElementTree.XML(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12470}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "traceback.format_exc(chain=True)", "intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file . With arguments `chain`.", "question_id": 10783}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "print(*objects, end='\\n', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4084}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "question_id": 1570}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289}
{"snippet": "mailbox.MH(path, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in MH format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5778}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}
{"snippet": "mailbox.mbox(path, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5771}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "test_case.run(result=None)", "intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "question_id": 11370}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "unittest.FunctionTestCase(testFunc)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`.", "question_id": 11473}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "object.__reduce_ex__(protocol)", "intent": "Alternatively , a __reduce_ex__ ( ) method may be defined . The only difference is this method should take a single integer argument , the `protocol` version .", "question_id": 7414}
{"snippet": "process.join(timeout)", "intent": "If the optional argument `timeout` is None ( the default ) , the method blocks until the process whose join ( ) method is called terminates .", "question_id": 6177}
{"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}
{"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "audioop.byteswap(fragment, width)", "intent": "\u201c Byteswap \u201d all samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 686}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}
{"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "cgi.parse_qs(qs, keep_blank_values=False)", "intent": "This function is deprecated in this module . With arguments `qs`, `keep_blank_values`.", "question_id": 1040}
{"snippet": "datetime.time(microsecond=0)", "intent": "All arguments are optional . With arguments `microsecond`.", "question_id": 2318}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "turtle.ondrag(fun)", "intent": "Bind `fun` to mouse-move events on this turtle .", "question_id": 11027}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}
{"snippet": "message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3009}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694}
{"snippet": "typing.get_type_hints(obj, globals, locals)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . In addition , forward references encoded as string literals are handled by evaluating them in `globals` and `locals` namespaces . With arguments `obj`.", "question_id": 11324}
{"snippet": "Request.add_unredirected_header(key, header)", "intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "question_id": 11826}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "shutil.copytree(src, dst, ignore=None, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8331}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "control.mapping(event, attribute)", "intent": "Make an entry into the EventMapping table for this control . With arguments `event`, `attribute`.", "question_id": 6130}
{"snippet": "fcntl.ioctl(fd, request, arg=0, mutate_flag=True)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "question_id": 3745}
{"snippet": "lzma.decompress(data, filters=None)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5717}
{"snippet": "object.__reduce_ex__(protocol)", "intent": "Alternatively , a __reduce_ex__ ( ) method may be defined . The only difference is this method should take a single integer argument , the `protocol` version .", "question_id": 7414}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "test_result.addFailure(test, err)", "intent": "Called when the `test` case test signals a failure . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11525}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "os.fwalk(top='.', follow_symlinks=False)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . Note however that , unlike other functions , the fwalk ( ) default value for `follow_symlinks` is False . With arguments `top`.", "question_id": 6991}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11138}
{"snippet": "OSError(errno, strerror, filename)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.", "question_id": 3652}
{"snippet": "test.support.bind_port(sock)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`.", "question_id": 10258}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "header.append(s, errors='strict')", "intent": "Append the string `s` to the MIME header . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "question_id": 3128}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}
{"snippet": "__import__(name, locals=None, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4143}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "bz2.BZ2File(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 891}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "pickletools.dis(pickle, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7419}
{"snippet": "codecs.CodecInfo(encode, decode, incrementalencoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementalencoder`.", "question_id": 1204}
{"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "tarfile.open(**kwargs, name=None)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9891}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "os.wait4(pid, options)", "intent": "Similar to waitpid ( ) , except a 3-element tuple , containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `pid`, `options`.", "question_id": 7084}
{"snippet": "bytes_parser.parsebytes(bytes)", "intent": "Similar to the parse ( ) method , except it takes a bytes-like object instead of a file-like object . Calling this method on a bytes-like object is equivalent to wrapping `bytes` in a BytesIO instance first and calling parse ( ) .", "question_id": 3378}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}
{"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "See the documentation for the functions explained above . With arguments `function`, `*args`, `**kwds`.", "question_id": 7359}
{"snippet": "os.posix_fadvise(fd, offset, len, advice)", "intent": "Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations . The `advice` applies to the region of the file specified by `fd` starting at `offset` and continuing for `len` bytes .", "question_id": 6776}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 3000}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "NNTP.newgroups(date, file=None)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object . If `file` is supplied , though , then groups will be empty .", "question_id": 6462}
{"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "json.dumps(obj, **kw, separators=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `separators`.", "question_id": 5287}
{"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "urllib.request.urlopen(url, timeout)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11742}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "logging.setLogRecordFactory(factory)", "intent": "Set a callable which is used to create a LogRecord . The `factory` has the following signature :", "question_id": 5652}
{"snippet": "http.client.HTTPSConnection(host, timeout)", "intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `timeout`.", "question_id": 4382}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "base64.a85decode(b, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 738}
{"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "chunk.seek(pos, whence=0)", "intent": "Set the chunk \u2019 s current position . The `whence` argument is optional and defaults to 0 ( absolute file positioning ) ; other values are 1 ( seek relative to the current position ) and 2 ( seek relative to the file \u2019 s end ) . With arguments `pos`.", "question_id": 1088}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "io.FileIO(name, mode='r')", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending .", "question_id": 5100}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "int.to_bytes(length, byteorder, signed=False)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument determines whether two \u2019 s complement is used to represent the integer .", "question_id": 9144}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "question_id": 1570}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "r_lock.acquire(timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10383}
{"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}
{"snippet": "os.tcsetpgrp(fd, pg)", "intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "question_id": 6807}
{"snippet": "str.rstrip(chars)", "intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9239}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "xmlparser.EndNamespaceDeclHandler(prefix)", "intent": "Called when the closing tag is reached for an element that contained a namespace declaration . With arguments `prefix`.", "question_id": 7768}
{"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "multiprocessing.JoinableQueue(maxsize)", "intent": "JoinableQueue , a Queue subclass , is a queue which additionally has task_done ( ) and join ( ) methods . With arguments `maxsize`.", "question_id": 6215}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "traceback.print_exception(etype, value, tb, limit=None, file=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10741}
{"snippet": "shelve.Shelf(dict, protocol=None, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8249}
{"snippet": "ur_lopener.open(fullurl)", "intent": "Open `fullurl` using the appropriate protocol .", "question_id": 11892}
{"snippet": "urllib.request.urlopen(url, cadefault=False)", "intent": "Open the URL `url` , which can be either a string or a Request object . The `cadefault` parameter is ignored .", "question_id": 11756}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}
{"snippet": "Record.SetStream(field, value)", "intent": "Set `field` to the contents of the file named `value` , through MsiRecordSetStream ( ) .", "question_id": 6085}
{"snippet": "lzma.decompress(data, memlimit=None)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5716}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "code.compile_command(source, filename=\"<input>\", symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1174}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "writer.new_spacing(spacing)", "intent": "Set the `spacing` style to spacing .", "question_id": 3845}
{"snippet": "NameError", "intent": "Raised when a local or global name is not found.", "question_id": 3646}
{"snippet": "ctypes.byref(obj, offset)", "intent": "Returns a light-weight pointer to `obj` , which must be an instance of a ctypes type . `offset` defaults to zero , and must be an integer that will be added to the internal pointer value .", "question_id": 1810}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "concurrent.futures.ThreadPoolExecutor(initializer=None)", "intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously . `initializer` is an optional callable that is called at the start of each worker thread ; `initargs` is a tuple of arguments passed to the initializer .", "question_id": 1450}
{"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}
{"snippet": "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`, `encoding`.", "question_id": 5451}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "loop.remove_signal_handler(sig)", "intent": "Remove the handler for the `sig` signal .", "question_id": 304}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12664}
{"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}
{"snippet": "gnu_translations.ngettext(singular, plural, n)", "intent": "Do a plural-forms lookup of a message id . `singular` is used as the message id for purposes of lookup in the catalog , while `n` is used to determine which `plural` form to use .", "question_id": 4262}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "Pattern.fullmatch(string, pos, endpos)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7976}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "test.support.check_no_resource_warning(testcase)", "intent": "Context manager to check that no ResourceWarning was raised . With arguments `testcase`.", "question_id": 10166}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, filters=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5711}
{"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "question_id": 11477}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "loop.sendfile(transport, file)", "intent": "Send a `file` over a `transport` .", "question_id": 256}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8417}
{"snippet": "py_compile.compile(file, cfile=None, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . The byte-code is written to `cfile` , which defaults to the PEP 3147/PEP 488 path , ending in .pyc . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7827}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8350}
{"snippet": "source_file_loader.set_data(path, data)", "intent": "Concrete implementation of importlib.abc.SourceLoader.set_data ( ) . With arguments `path`, `data`.", "question_id": 4894}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "config_parser.options(section)", "intent": "Return a list of options available in the specified `section` .", "question_id": 1510}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5419}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "ssl.wrap_socket(sock)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context .", "question_id": 8901}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "Match.groups(default=None)", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern . The `default` argument is used for groups that did not participate in the match ; it defaults to None .", "question_id": 8000}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665}
{"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "policy.fold_binary(name, value)", "intent": "The same as fold ( ) , except that the returned `value` should be a bytes object rather than a string . With arguments `name`.", "question_id": 3427}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "ur_lopener.retrieve(url, filename=None, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11901}
{"snippet": "os.walk(top, onerror=None)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "question_id": 6977}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `func`.", "question_id": 5586}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "timeit.repeat(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10492}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}
{"snippet": "traceback.print_stack(f=None, limit=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10765}
{"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `requestHandler` parameter should be a factory for request handler instances ; it defaults to SimpleXMLRPCRequestHandler .", "question_id": 12713}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "fileinput.FileInput(files=None)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "question_id": 3801}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3999}
{"snippet": "ZipFile.extract(member, pwd=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `pwd` is the password used for encrypted files .", "question_id": 12816}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "tarfile.open(**kwargs)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9890}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "threading.Condition(lock=None)", "intent": "This class implements condition variable objects . If the `lock` argument is given and not None , it must be a Lock or RLock object , and it is used as the underlying lock .", "question_id": 10387}
{"snippet": "str(object='')", "intent": "Return a string version of `object` .", "question_id": 9169}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "test_case.assertIsNotNone(expr)", "intent": "Test that `expr` is ( or is not ) None .", "question_id": 11389}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "logging.basicConfig(**kwargs)", "intent": "Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger . With arguments `**kwargs`.", "question_id": 5649}
{"snippet": "typing.Dict(dict, MutableMappingKT, VT)", "intent": "A generic version of `dict` . With arguments `MutableMappingKT`, `VT`.", "question_id": 11298}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "fileinput.FileInput(files=None, backup='')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`, `backup`.", "question_id": 3808}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984}
{"snippet": "gzip.open(filename, mode='rb', errors=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4280}
{"snippet": "doctest.DebugRunner(optionflags=0)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `optionflags`.", "question_id": 2897}
{"snippet": "ZipFile.read(name, pwd=None)", "intent": "Return the bytes of the file `name` in the archive . `pwd` is the password used for encrypted files and , if specified , it will override the default password set with setpassword ( ) .", "question_id": 12829}
{"snippet": "bytes_io.read1(size)", "intent": "In BytesIO , this is the same as read ( ) . With arguments `size`.", "question_id": 5113}
{"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}
{"snippet": "turtle.numinput(title, prompt, default=None, minval=None, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11091}
{"snippet": "typing.cast(typ, val)", "intent": "Cast a value to a type . With arguments `typ`, `val`.", "question_id": 11323}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "unicodedata.name(chr)", "intent": "Returns the name assigned to the character `chr` as a string .", "question_id": 11342}
{"snippet": "doc_test_finder.find(obj, name, module, globs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2851}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "ctypes.CFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1792}
{"snippet": "hasattr(object, name)", "intent": "The arguments are an `object` and a string . The result is True if the string is the `name` of one of the object \u2019 s attributes , False if not .", "question_id": 4028}
{"snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`, `handle`.", "question_id": 1765}
{"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "tuple(iterable)", "intent": "Tuples may be constructed in a number of ways : The constructor builds a tuple whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9160}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "copy.deepcopy(x, memo)", "intent": "Return a deep copy of `x` . With arguments `memo`.", "question_id": 1662}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "multiprocessing.Barrier(parties, action)", "intent": "A barrier object : a clone of threading.Barrier . With arguments `parties`, `action`.", "question_id": 6244}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}
{"snippet": "os.spawnv(mode, path, args)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7057}
{"snippet": "mailbox.Babyl(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in Babyl format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5796}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}
{"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344}
{"snippet": "webbrowser.open(url, autoraise=True)", "intent": "Display `url` using the default browser . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12104}
{"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}
{"snippet": "test.support.open_urlresource(url, *args, **kw)", "intent": "Open `url` . With arguments `*args`, `**kw`.", "question_id": 10239}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "fileinput.FileInput(files=None)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "question_id": 3801}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, extra=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `extra`.", "question_id": 5587}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "timeit.Timer(timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10500}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2848}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "plistlib.loads(data, use_builtin_types=True)", "intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`.", "question_id": 7557}
{"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)", "intent": "Create an HTTP handler for the given `request` ( i.e . a socket ) , `client_address` ( a ( host , port ) tuple ) , and `server` ( WSGIServer instance ) .", "question_id": 12231}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stderr=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 526}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "Node.toprettyxml(newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12419}
{"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}
{"snippet": "super(type, object-or-type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.", "question_id": 4125}
{"snippet": "difflib.SequenceMatcher(isjunk=None, b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2675}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, fflags=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `fflags`.", "question_id": 8163}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "asyncio.Queue(loop=None)", "intent": "A first in , first out ( FIFO ) queue . With arguments `loop`.", "question_id": 447}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "logging.Formatter(datefmt=None, style='%')", "intent": "Returns a new instance of the Formatter class . If no `datefmt` is specified , a format is used which is described in the formatTime ( ) documentation . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5616}
{"snippet": "smtplib.SMTP_SSL(port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8480}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "socket.sendfile(file, offset=0, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8735}
{"snippet": "Path.symlink_to(target)", "intent": "Make this path a symbolic link to `target` .", "question_id": 7315}
{"snippet": "getpass.getpass(prompt='Password: ', stream=None)", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4207}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}
{"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "base_selector.modify(fileobj, events, data=None)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8219}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}
{"snippet": "queue_listener.isEnabledFor(level)", "intent": "Indicates if a message of severity `level` would be processed by this logger .", "question_id": 5567}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "Pattern.finditer(string, pos)", "intent": "Similar to the finditer ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7985}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "trace.Trace(timing=False)", "intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "question_id": 10715}
{"snippet": "SubprocessTransport.get_pipe_transport(fd)", "intent": "Return the transport for the communication pipe corresponding to the integer file descriptor `fd` :", "question_id": 420}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "shlex.split(s, comments=False, posix=True)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8271}
{"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None, file=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML . The tree is initialized with the contents of the XML `file` if given .", "question_id": 12510}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "policy.fold_binary(name, value)", "intent": "The same as fold ( ) , except that the returned `value` should be a bytes object rather than a string . With arguments `name`.", "question_id": 3427}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "subprocess.check_output(args, cwd=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `cwd`.", "question_id": 9683}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "style.lookup(style, option, state=None, default=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10680}
{"snippet": "queue.Queue(maxsize=0)", "intent": "Constructor for a FIFO queue . `maxsize` is an integer that sets the upperbound limit on the number of items that can be placed in the queue .", "question_id": 7838}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "date.replace(month=self.month, day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `month`, `day`.", "question_id": 2235}
{"snippet": "mailbox.MMDF(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MMDF format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5804}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, strict=True)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `strict`.", "question_id": 1576}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971}
{"snippet": "header.encode(\\t', maxlinelen=None)", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . With arguments `\\t'`.", "question_id": 3132}
{"snippet": "logging.handlers.HTTPHandler(host, url, secure=False, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5549}
{"snippet": "base64.a85encode(b, foldspaces=False, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 732}
{"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509}
{"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}
{"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}
{"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "Document.createProcessingInstruction(target, data)", "intent": "Create and return a processing instruction node containing the `target` and `data` passed as parameters .", "question_id": 12349}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1082}
{"snippet": "codecs.open(filename, buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1229}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "turtle.numinput(title, prompt, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11087}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050}
{"snippet": "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)", "intent": "The same as RawValue ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes object . With arguments `typecode_or_type`, `*args`.", "question_id": 6274}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "object.__setstate__(state)", "intent": "Upon unpickling , if the class defines __setstate__ ( ) , it is called with the unpickled `state` .", "question_id": 7412}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 969}
{"snippet": "fcntl.lockf(fd, cmd)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values :", "question_id": 3747}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "base64.b16decode(s, casefold=False)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input .", "question_id": 725}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}
{"snippet": "lzma.compress(data, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5707}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 1119}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "robot_file_parser.can_fetch(useragent, url)", "intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "question_id": 11912}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}
{"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "question_id": 5995}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "zlib.compressobj(zdict, level=-1, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `strategy` is used to tune the compression algorithm .", "question_id": 12906}
{"snippet": "shlex.shlex(infile=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "question_id": 8275}
{"snippet": "turtle.onscreenclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11078}
{"snippet": "Path.lchmod(mode)", "intent": "Like Path.chmod ( ) but , if the path points to a symbolic link , the symbolic link \u2019 s `mode` is changed rather than its target \u2019 s .", "question_id": 7282}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "queue.Queue(maxsize=0)", "intent": "Constructor for a FIFO queue . `maxsize` is an integer that sets the upperbound limit on the number of items that can be placed in the queue .", "question_id": 7838}
{"snippet": "test.support.setswitchinterval(interval)", "intent": "Set the sys.setswitchinterval ( ) to the given `interval` .", "question_id": 10162}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12794}
{"snippet": "urllib.request.urlopen(url, context=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .", "question_id": 11757}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}
{"snippet": "shelve.open(filename, flag='c', protocol=None)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8238}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "bz2.BZ2File(filename, mode='r', buffering=None, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 893}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "ctypes.CFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1792}
{"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, extra=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `extra`.", "question_id": 5587}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "dis.dis(depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2710}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "logging.Formatter(datefmt=None, style='%')", "intent": "Returns a new instance of the Formatter class . If no `datefmt` is specified , a format is used which is described in the formatTime ( ) documentation . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5616}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "importlib.resources.read_binary(package, resource)", "intent": "Read and return the contents of the `resource` within `package` as bytes .", "question_id": 4857}
{"snippet": "incremental_decoder.setstate(state)", "intent": "Set the `state` of the decoder to state .", "question_id": 1278}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "base_rotating_handler.rotate(source, dest)", "intent": "When rotating , rotate the current log . The default implementation calls the \u2018 rotator \u2019 attribute of the handler , if it \u2019 s callable , passing the `source` and `dest` arguments to it .", "question_id": 5457}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2660}
{"snippet": "mailbox.__setitem__(key, message)", "intent": "Replace the `message` corresponding to `key` with message .", "question_id": 5728}
{"snippet": "subprocess.check_call(args, timeout=None)", "intent": "Run command with arguments . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface . With arguments `args`.", "question_id": 9675}
{"snippet": "gzip.open(filename, newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4277}
{"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418}
{"snippet": "tuple(iterable)", "intent": "Tuples may be constructed in a number of ways : The constructor builds a tuple whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9160}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "@functools.wraps(wrapped)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`.", "question_id": 4160}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "connection.backup(target)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance .", "question_id": 8829}
{"snippet": "xml.etree.ElementTree.iterparse(source, events=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `events` is a sequence of events to report back .", "question_id": 12443}
{"snippet": "ensurepip.bootstrap(root=None, altinstall=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . If `altinstall` is set , then pipX will not be installed .", "question_id": 3498}
{"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5868}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}
{"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "subprocess.run(args, check=False)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9576}
{"snippet": "base64.b64encode(s, altchars=None)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes . Optional `altchars` must be a bytes-like object of at least length 2 ( additional characters are ignored ) which specifies an alternative alphabet for the + and / characters .", "question_id": 709}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "base64.a85decode(b, foldspaces=False, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 740}
{"snippet": "turtle.backward(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10907}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g .", "question_id": 4913}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12420}
{"snippet": "unittest.mock.Mock(**kwargs, return_value=DEFAULT)", "intent": "Create a new Mock object . With arguments `**kwargs`, `return_value`.", "question_id": 11563}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "turtle.onscreenclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11078}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}
{"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}
{"snippet": "shelve.BsdDbShelf(dict, protocol=None, keyencoding='utf-8')", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8257}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)", "intent": "Report that the given `example` raised an unexpected exception . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `exc_info` is a tuple containing information about the unexpected exception ( as returned by sys.exc_info ( ) ) .", "question_id": 2872}
{"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}
{"snippet": "mailbox.__iter__()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5732}
{"snippet": "collections.Counter(iterable-or-mapping)", "intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "question_id": 1340}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key . `reserved` is a reserved integer , and must be zero .", "question_id": 12131}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}
{"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}
{"snippet": "config_parser.options(section)", "intent": "Return a list of options available in the specified `section` .", "question_id": 1510}
{"snippet": "uuid.uuid1(node=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address .", "question_id": 11958}
{"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11119}
{"snippet": "bytes_parser.parsebytes(bytes)", "intent": "Similar to the parse ( ) method , except it takes a bytes-like object instead of a file-like object . Calling this method on a bytes-like object is equivalent to wrapping `bytes` in a BytesIO instance first and calling parse ( ) .", "question_id": 3378}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 75}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}
{"snippet": "shutil.move(src, dst, copy_function=copy2)", "intent": "Recursively move a file or directory ( `src` ) to another location ( `dst` ) and return the destination . Otherwise , src is copied to dst using `copy_function` and then removed .", "question_id": 8339}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "subprocess.run(args, stderr=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9571}
{"snippet": "SubprocessProtocol.pipe_connection_lost(fd, exc)", "intent": "Called when one of the pipes communicating with the child process is closed . `fd` is the integer file descriptor that was closed . With arguments `exc`.", "question_id": 443}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11430}
{"snippet": "heapq.heappush(heap, item)", "intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "question_id": 4316}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "mimetypes.MimeTypes(filenames=())", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database .", "question_id": 5957}
{"snippet": "os.register_at_fork(before=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "question_id": 7046}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787}
{"snippet": "difflib.unified_diff(a, b, fromfile='', fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2655}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "prototype(vtbl_index, name, paramflags, iid)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method . `iid` is an optional pointer to the interface identifier which is used in extended error reporting . With arguments `paramflags`.", "question_id": 1805}
{"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "joinable_queue.poll(timeout)", "intent": "Return whether there is any data available to be read . If `timeout` is not specified then it will return immediately .", "question_id": 6234}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "SystemExit", "intent": "This exception is raised by the sys.exit() function.", "question_id": 3669}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "datetime.datetime(year, month, day, microsecond=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `microsecond`.", "question_id": 2251}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}
{"snippet": "email.iterators._structure(msg, fp=None)", "intent": "Prints an indented representation of the content types of the message object structure . Optional `fp` is a file-like object to print the output to . With arguments `msg`.", "question_id": 3215}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5519}
{"snippet": "itertools.islice(iterable, start, stop, step)", "intent": "Make an iterator that returns selected elements from the `iterable` . If `start` is non-zero , then elements from the iterable are skipped until start is reached . If `stop` is None , then iteration continues until the iterator is exhausted , if at all ; otherwise , it stops at the specified position . Afterward , elements are returned consecutively unless `step` is set higher than one which results in items being skipped .", "question_id": 5256}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "json.dumps(obj, **kw, indent=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `indent`.", "question_id": 5286}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "bdb.Breakpoint(self, file, line, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 756}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'str'>`.", "question_id": 3044}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "email.iterators.body_line_iterator(msg, decode=False)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line . Optional `decode` is passed through to Message.get_payload .", "question_id": 3209}
{"snippet": "set < other", "intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "question_id": 9441}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "loop.sendfile(transport, file, offset=0)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file .", "question_id": 257}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}
{"snippet": "binascii.b2a_qp(data, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 830}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}
{"snippet": "curses.unget_wch(ch)", "intent": "Push `ch` so the next get_wch ( ) will return it .", "question_id": 1995}
{"snippet": "quopri.encode(input, output, quotetabs, header=False)", "intent": "Encode the contents of the `input` file and write the resulting quoted-printable data to the `output` file . `quotetabs` , a non-optional flag which controls whether to encode embedded spaces and tabs ; when true it encodes such embedded whitespace , and when false it leaves them unencoded . Note that spaces and tabs appearing at the end of lines are always encoded , as per RFC 1521. `header` is a flag which controls if spaces are encoded as underscores as per RFC 1522 .", "question_id": 7876}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}
{"snippet": "bytes_parser.parsebytes(bytes)", "intent": "Similar to the parse ( ) method , except it takes a bytes-like object instead of a file-like object . Calling this method on a bytes-like object is equivalent to wrapping `bytes` in a BytesIO instance first and calling parse ( ) .", "question_id": 3378}
{"snippet": "shutil.copyfile(src, dst)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst .", "question_id": 8311}
{"snippet": "ctypes.Structure(*args, **kw)", "intent": "Abstract base class for structures in native byte order . With arguments `*args`, `**kw`.", "question_id": 1889}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "codecs.open(filename, mode='r', buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1232}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "argparse.ArgumentParser(epilog=None)", "intent": "Create a new ArgumentParser object . With arguments `epilog`.", "question_id": 52}
{"snippet": "urllib.request.urlopen(url, timeout, data=None, context=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .", "question_id": 11751}
{"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', policy=compat32)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "question_id": 3323}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "datetime.datetime(year, month, day, hour=0, microsecond=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `microsecond`.", "question_id": 2256}
{"snippet": "Telnet.set_option_negotiation_callback(callback)", "intent": "Each time a telnet option is read on the input flow , this `callback` ( if set ) is called with the following parameters : callback ( telnet socket , command ( DO/DONT/WILL/WONT ) , option ) .", "question_id": 10032}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668}
{"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}
{"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "loop.start_tls(transport, protocol, sslcontext, ssl_handshake_timeout=None)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`, `ssl_handshake_timeout`.", "question_id": 267}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}
{"snippet": "lzma.compress(data, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5707}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "platform.architecture(bits='', linkage='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7464}
{"snippet": "gc.get_referents(*objs)", "intent": "Return a list of objects directly referred to by any of the arguments . With arguments `*objs`.", "question_id": 4182}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes . With arguments `multithread`.", "question_id": 12243}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}
{"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206}
{"snippet": "pprint.pprint(object, stream=None, indent=1)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7649}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}
{"snippet": "os.chown(path, uid, gid, dir_fd=None)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` . With arguments `dir_fd`.", "question_id": 6840}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}
{"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stderr=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 540}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "logging.handlers.WatchedFileHandler(filename, mode='a')", "intent": "Returns a new instance of the WatchedFileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5441}
{"snippet": "nntplib.NNTP_SSL(host, timeout, port=563)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`.", "question_id": 6420}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "platform.libc_ver(version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7540}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`.", "question_id": 11474}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "shelve.open(filename, flag='c', writeback=False)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "question_id": 8239}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "tarfile.open(**kwargs, fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9893}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "tarfile.open(**kwargs, bufsize=10240)", "intent": "Return a TarFile object for the pathname `name` . `bufsize` specifies the blocksize and defaults to 20 * 512 bytes . With arguments `**kwargs`.", "question_id": 9894}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810}
{"snippet": "HTTPConnection.request(method, url, body=None, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4432}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "turtle.screensize(canvwidth=None, canvheight=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `canvheight`, `bg`.", "question_id": 11054}
{"snippet": "unittest.mock.Mock(**kwargs, spec=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `spec`.", "question_id": 11561}
{"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}
{"snippet": "shutil.which(cmd, path=None)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called .", "question_id": 8347}
{"snippet": "tuple(iterable)", "intent": "Tuples may be constructed in a number of ways : The constructor builds a tuple whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9160}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "array.array(typecode, initializer)", "intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "question_id": 115}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, empty_lines_in_values=True)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `empty_lines_in_values`.", "question_id": 1577}
{"snippet": "datetime.time(hour=0, microsecond=0)", "intent": "All arguments are optional . With arguments `hour`, `microsecond`.", "question_id": 2323}
{"snippet": "turtle.ondrag(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`, `add`.", "question_id": 11030}
{"snippet": "os.sched_getparam(pid)", "intent": "Return the scheduling parameters as a sched_param instance for the process with PID `pid` .", "question_id": 7110}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "asyncio.open_connection(family=0)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `family`.", "question_id": 469}
{"snippet": "itertools.islice(iterable, start, stop, step)", "intent": "Make an iterator that returns selected elements from the `iterable` . If `start` is non-zero , then elements from the iterable are skipped until start is reached . If `stop` is None , then iteration continues until the iterator is exhausted , if at all ; otherwise , it stops at the specified position . Afterward , elements are returned consecutively unless `step` is set higher than one which results in items being skipped .", "question_id": 5256}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "multiprocessing.Value(typecode_or_type, *args, lock=True)", "intent": "Return a ctypes object allocated from shared memory . `typecode_or_type` determines the type of the returned object : it is either a ctypes type or a one character typecode of the kind used by the array module . `*args` is passed on to the constructor for the type . If `lock` is True ( the default ) then a new recursive lock object is created to synchronize access to the value .", "question_id": 6266}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "FileHandler.file_open(req)", "intent": "Open the file locally , if there is no host name , or the host name is 'localhost ' . With arguments `req`.", "question_id": 11873}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "email_message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . If the value contains non-ASCII characters , the `charset` and `language` may be explicitly specified using the optional charset and language parameters . With arguments `param`.", "question_id": 3264}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "mailcap.findmatch(caps, MIMEtype)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`, `MIMEtype`.", "question_id": 5861}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "element.findtext(match, namespaces=None)", "intent": "Finds text for the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12497}
{"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`, `updated`.", "question_id": 4163}
{"snippet": "os.utime(path, ns, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6960}
{"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509}
{"snippet": "base64.a85encode(b, wrapcol=0, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 734}
{"snippet": "pickle.Unpickler(file, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7400}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "os.fchown(fd, uid, gid)", "intent": "Change the owner and group id of the file given by `fd` to the numeric `uid` and `gid` .", "question_id": 6720}
{"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "difflib.diff_bytes(dfunc, a, b, tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2659}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "types.MappingProxyType(mapping)", "intent": "Read-only proxy of a `mapping` .", "question_id": 11206}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "sqlite3.complete_statement(sql)", "intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "question_id": 8801}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}
{"snippet": "os.replace(src, dst, src_dir_fd=None)", "intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "question_id": 6898}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}
{"snippet": "turtle.onscreenclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11078}
{"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}
{"snippet": "test.support.is_resource_enabled(resource)", "intent": "Return True if `resource` is enabled and available .", "question_id": 10144}
{"snippet": "logging.handlers.HTTPHandler(host, url, secure=False, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5549}
{"snippet": "email.generator.DecodedGenerator(outfp)", "intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "question_id": 3106}
{"snippet": "configparser.ConfigParser(':'), ';'), strict=True)", "intent": "The main configuration parser . When `strict` is True ( the default ) , the parser won \u2019 t allow for any section or option duplicates while reading from a single source ( file , string or dictionary ) , raising DuplicateSectionError or DuplicateOptionError . With arguments `':')`, `';')`.", "question_id": 1503}
{"snippet": "KeyboardInterrupt", "intent": "Raised when the user hits the interrupt key (normally Control-C or Delete).", "question_id": 3644}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12454}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "subprocess.check_call(args, shell=False)", "intent": "Run command with arguments . With arguments `args`, `shell`.", "question_id": 9673}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "pkgutil.walk_packages(prefix='')", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "question_id": 7451}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874}
{"snippet": "msvcrt.locking(fd, mode, nbytes)", "intent": "Lock part of a file based on file descriptor `fd` from the C runtime . `mode` must be one of the LK_* constants listed below . The locked region of the file extends from the current file position for `nbytes` bytes , and may continue beyond the end of the file .", "question_id": 6146}
{"snippet": "random.choices(population, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7897}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "shutil.copytree(src, dst, ignore=None, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8331}
{"snippet": "NNTP.xhdr(hdr, str, file=None)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search . If the `file` parameter is supplied , then the output of the XHDR command is stored in a file .", "question_id": 6498}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}
{"snippet": "os.posix_fallocate(fd, offset, len)", "intent": "Ensures that enough disk space is allocated for the file specified by `fd` starting from `offset` and continuing for `len` bytes .", "question_id": 6775}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`, `streamreader`.", "question_id": 1210}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "wsgiref.util.FileWrapper(filelike)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12217}
{"snippet": "xmlrpc.client.ServerProxy(uri, encoding=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional third argument is an `encoding` , by default UTF-8 . With arguments `uri`.", "question_id": 12671}
{"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "ArgumentParser.add_argument(name or flags..., action)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.", "question_id": 67}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "webbrowser.register(name, constructor, instance=None)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12111}
{"snippet": "config_parser.items(section, raw=False)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1557}
{"snippet": "mailcap.findmatch(caps, MIMEtype, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5864}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "bdb.runeval(expr, locals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 813}
{"snippet": "lzma.LZMACompressor(filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5682}
{"snippet": "platform.architecture(executable=sys.executable, linkage='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7463}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "tempfile.mkstemp(suffix=None, dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10077}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "copyreg.pickle(type, function, constructor=None)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type . The optional `constructor` parameter , if provided , is a callable object which can be used to reconstruct the object when called with the tuple of arguments returned by function at pickling time .", "question_id": 1667}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "email.utils.formatdate(timeval=None, localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3475}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "collections.Counter(iterable-or-mapping)", "intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "question_id": 1340}
{"snippet": "faulthandler.register(signum, chain=False)", "intent": "Register a user signal : install a handler for the `signum` signal to dump the traceback of all threads , or of the current thread if `all_threads` is False , into `file` . Call the previous handler if `chain` is True .", "question_id": 3734}
{"snippet": "math.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 5895}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "xml.etree.ElementTree.iterparse(source, events=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `events` is a sequence of events to report back .", "question_id": 12443}
{"snippet": "random.choices(population, weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7896}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "struct.pack_into(format, buffer, offset, v1, v2)", "intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "question_id": 9552}
{"snippet": "traceback.print_exc(chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10748}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\")", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "question_id": 12417}
{"snippet": "subprocess.call(args, stdin=None, shell=False)", "intent": "Run the command described by `args` . With arguments `stdin`, `shell`.", "question_id": 9668}
{"snippet": "Wave_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 12069}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11422}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "policy.fold(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message for a given header .", "question_id": 3426}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "loop.set_default_executor(executor)", "intent": "Set `executor` as the default executor used by run_in_executor ( ) .", "question_id": 306}
{"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "operator.__inv__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6542}
{"snippet": "shutil.copystat(src, dst, follow_symlinks=True)", "intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` . If `follow_symlinks` is false , and src and dst both refer to symbolic links , copystat ( ) will operate on the symbolic links themselves rather than the files the symbolic links refer to\u2014reading the information from the src symbolic link , and writing the information to the dst symbolic link .", "question_id": 8317}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`.", "question_id": 524}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "SimpleQueue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7869}
{"snippet": "locale.format(format, val, grouping=False)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`, `grouping`.", "question_id": 5389}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "directory.start_component(component=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory .", "question_id": 6094}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment)", "intent": "Concrete class for urlparse ( ) results containing str data . With arguments `scheme`, `netloc`, `path`, `params`, `query`, `fragment`.", "question_id": 11700}
{"snippet": "null_handler.handle(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5438}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "signal.setitimer(which, seconds, interval=0.0)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8392}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583}
{"snippet": "email_message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 3244}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "os.access(path, mode, follow_symlinks=True)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . With arguments `follow_symlinks`.", "question_id": 6823}
{"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "warnings.filterwarnings(action, lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "question_id": 12027}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6050}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, loop=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `loop`.", "question_id": 527}
{"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12462}
{"snippet": "json.dump(obj, fp, **kw, separators=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If specified , `separators` should be an ( item_separator , key_separator ) tuple . With arguments `**kw`.", "question_id": 5277}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None, low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 412}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5464}
{"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "meta_path_finder.find_module(fullname, path)", "intent": "A legacy method for finding a loader for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "question_id": 4805}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "xml.sax.saxutils.quoteattr(data, entities={})", "intent": "Similar to escape ( ) , but also prepares `data` to be used as an attribute value . With arguments `entities`.", "question_id": 12657}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "lzma.LZMACompressor(check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5680}
{"snippet": "threading.Timer(interval, function)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10412}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}
{"snippet": "FTP.storbinary(cmd, fp, rest=None)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored . `rest` means the same thing as in the transfercmd ( ) method .", "question_id": 3936}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "mailbox.mbox(path, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5771}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "dis.Bytecode(x, first_line=None)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . If `first_line` is not None , it indicates the line number that should be reported for the first source line in the disassembled code . With arguments `x`.", "question_id": 2696}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "bytes_io.read1(size)", "intent": "In BytesIO , this is the same as read ( ) . With arguments `size`.", "question_id": 5113}
{"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}
{"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}
{"snippet": "types.prepare_class(name, bases=())", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11179}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "quopri.encodestring(s, quotetabs=False, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`, `header`.", "question_id": 7882}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "warnings.simplefilter(action, category=Warning, lineno=0)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `lineno`.", "question_id": 12037}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`.", "question_id": 11474}
{"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "sqlite3.register_converter(typename, callable)", "intent": "Registers a `callable` to convert a bytestring from the database into a custom Python type . The callable will be invoked for all database values that are of the type `typename` .", "question_id": 8799}
{"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}
{"snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "question_id": 4995}
{"snippet": "logging.FileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "question_id": 5431}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "test_case.assertWarns(warning)", "intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) .", "question_id": 11406}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "test.support.temp_cwd(quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10184}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'str'>`.", "question_id": 3044}
{"snippet": "tempfile.mkstemp(suffix=None, dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10077}
{"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6050}
{"snippet": "readline.remove_history_item(pos)", "intent": "Remove history item specified by its position from the history . With arguments `pos`.", "question_id": 8032}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}
{"snippet": "joinable_queue.poll(timeout)", "intent": "Return whether there is any data available to be read . If `timeout` is not specified then it will return immediately .", "question_id": 6234}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "doctest.debug(module, name)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above .", "question_id": 2888}
{"snippet": "BufferedProtocol.buffer_updated(nbytes)", "intent": "Called when the buffer was updated with the received data . `nbytes` is the total number of bytes that were written to the buffer .", "question_id": 438}
{"snippet": "callable(object)", "intent": "Return True if the `object` argument appears callable , False if not .", "question_id": 3989}
{"snippet": "re.subn(pattern, repl, string, count=0, flags=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`, `flags`.", "question_id": 7958}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "Path.replace(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7309}
{"snippet": "threading.Timer(interval, function, args=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10413}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "zipapp.create_archive(source, target=None, interpreter=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12773}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, sinfo=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `sinfo`.", "question_id": 5588}
{"snippet": "shutil.register_archive_format(name, function, extra_args, description)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used . `description` is used by get_archive_formats ( ) which returns the list of archivers .", "question_id": 8359}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "oss_mixer_device.set_recsrc(bitmask)", "intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "question_id": 7209}
{"snippet": "time.replace(microsecond=self.microsecond)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "question_id": 2338}
{"snippet": "traceback.extract_tb(tb)", "intent": "Return a StackSummary object representing a list of \u201c pre-processed \u201d stack trace entries extracted from the traceback object `tb` .", "question_id": 10769}
{"snippet": "fcntl.lockf(fd, cmd, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3750}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stderr=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 526}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "Pattern.finditer(string, pos)", "intent": "Similar to the finditer ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7985}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "bytes.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9343}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "xmlparser.ProcessingInstructionHandler(target, data)", "intent": "Called for every processing instruction . With arguments `target`, `data`.", "question_id": 7762}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}
{"snippet": "argparse.FileType(errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `errors`.", "question_id": 89}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "Telnet.read_until(expected, timeout=None)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10010}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "test.support.start_threads(threads)", "intent": "Context manager to start `threads` .", "question_id": 10198}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "question_id": 5987}
{"snippet": "platform.mac_ver('', ''), release='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7510}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "json.JSONDecoder(strict=True)", "intent": "Simple JSON decoder . If `strict` is false ( True is the default ) , then control characters will be allowed inside strings .", "question_id": 5315}
{"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}
{"snippet": "ZipFile.extractall(path=None, members=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12825}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, strict=True)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `strict`.", "question_id": 1576}
{"snippet": "winreg.OpenKey(key, sub_key, reserved=0)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "question_id": 12139}
{"snippet": "time.replace(tzinfo=self.tzinfo)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2339}
{"snippet": "FTP.login(passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3917}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "pty.spawn(argv, master_read, stdin_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7700}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "queue_listener.isEnabledFor(level)", "intent": "Indicates if a message of severity `level` would be processed by this logger .", "question_id": 5567}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "pool.apply_async(func, args, kwds)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`, `kwds`.", "question_id": 6337}
{"snippet": "null_handler.handle(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5438}
{"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "Morsel.js_output(attrs=None)", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP header was sent . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4606}
{"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "difflib.SequenceMatcher(isjunk=None, b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2675}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2190}
{"snippet": "Pattern.fullmatch(string, pos)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7977}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}
{"snippet": "warnings.showwarning(message, category, filename, lineno, file=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12018}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, params=None)", "intent": "Add `headers` and payload to `msg` : If `params` is specified , iterate its items method and use the resulting ( key , value ) pairs to set additional parameters on the Content-Type header . With arguments `<'str'>`.", "question_id": 3045}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "task.print_stack(file=None)", "intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 638}
{"snippet": "tempfile.TemporaryFile(mode='w+b', encoding=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10042}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed')", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . With arguments `**_params`.", "question_id": 3317}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "os.sched_getparam(pid)", "intent": "Return the scheduling parameters as a sched_param instance for the process with PID `pid` .", "question_id": 7110}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "io.FileIO(name, mode='r')", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending .", "question_id": 5100}
{"snippet": "marshal.dumps(value, version)", "intent": "Return the bytes object that would be written to a file by dump ( `value` , file ) . The `version` argument indicates the data format that dumps should use ( see below ) .", "question_id": 5881}
{"snippet": "fcntl.fcntl(fd, cmd, arg=0)", "intent": "Perform the operation `cmd` on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) . The argument `arg` can either be an integer value , or a bytes object .", "question_id": 3741}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "gnu_translations.ngettext(singular, plural, n)", "intent": "Do a plural-forms lookup of a message id . `singular` is used as the message id for purposes of lookup in the catalog , while `n` is used to determine which `plural` form to use .", "question_id": 4262}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}
{"snippet": "email.utils.encode_rfc2231(s, charset=None, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3482}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "pdb.Pdb(completekey='tab', stdin=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7348}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec=None)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "question_id": 11615}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`, `errors`.", "question_id": 11730}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}
{"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}
{"snippet": "raw_io_base.read(size=-1)", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5085}
{"snippet": "fraction.__ceil__()", "intent": "Returns the least int > = self .", "question_id": 3874}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "importlib.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4798}
{"snippet": "pkgutil.walk_packages(path=None, prefix='')", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "question_id": 7453}
{"snippet": "test.support.check__all__(test_case, module, extra=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "question_id": 10279}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, repr=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2187}
{"snippet": "email_message.set_param(param, value, header='Content-Type', charset=None)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . If the value contains non-ASCII characters , the `charset` and `language` may be explicitly specified using the optional charset and language parameters . With arguments `param`.", "question_id": 3267}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "property(fset=None, doc=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4094}
{"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "stream_reader.read(size, chars)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return .", "question_id": 1287}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "incremental_decoder.decode(object, final)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object . If this is the last call to decode ( ) `final` must be true ( the default is false ) .", "question_id": 1274}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}
{"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "kqueue.control(changelist, max_events, timeout)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`, `timeout`.", "question_id": 8201}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "question_id": 1575}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "calendar.yeardays2calendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 922}
{"snippet": "ssl.RAND_add(bytes, entropy)", "intent": "Mix the given `bytes` into the SSL pseudo-random number generator . The parameter `entropy` ( a float ) is a lower bound on the entropy contained in string ( so you can always use 0.0 ) .", "question_id": 8889}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}
{"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71}
{"snippet": "doc_test_runner.run(test, compileflags=None, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2878}
{"snippet": "array.remove(x)", "intent": "Remove the first occurrence of `x` from the array .", "question_id": 134}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}
{"snippet": "os.wait4(pid, options)", "intent": "Similar to waitpid ( ) , except a 3-element tuple , containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `pid`, `options`.", "question_id": 7084}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}
{"snippet": "nntplib.NNTP_SSL(host, port=563, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `user`.", "question_id": 6436}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "quopri.encodestring(s, quotetabs=False, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`, `header`.", "question_id": 7882}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}
{"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}
{"snippet": "shlex.shlex(infile=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "question_id": 8275}
{"snippet": "threading.Thread(group=None, name=None)", "intent": "This constructor should always be called with keyword arguments . `group` should be None ; reserved for future extension when a ThreadGroup class is implemented . `name` is the thread name .", "question_id": 10360}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "question_id": 8797}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "termios.tcflush(fd, queue)", "intent": "Discard queued data on file descriptor `fd` . The `queue` selector specifies which queue : TCIFLUSH for the input queue , TCOFLUSH for the output queue , or TCIOFLUSH for both queues .", "question_id": 10106}
{"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`.", "question_id": 12848}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "email.message_from_string(s, policy=policy.compat32)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) . `_class` and `policy` are interpreted as with the Parser class constructor .", "question_id": 3406}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5517}
{"snippet": "argparse.ArgumentParser(usage=None)", "intent": "Create a new ArgumentParser object . With arguments `usage`.", "question_id": 50}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "directory.add_file(file, language=None)", "intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component . Optionally , a `version` and a `language` can be specified for the entry in the File table .", "question_id": 6106}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, timeout=1.0)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . A `timeout` can be specified for communication with the SMTP server using the timeout argument . With arguments `fromaddr`.", "question_id": 5518}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "ctypes.CDLL(name, use_last_error=False)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `use_last_error`.", "question_id": 1744}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}
{"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "unittest.mock.Mock(**kwargs, name=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `name`.", "question_id": 11565}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "turtle.circle(radius, extent=None, steps=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10926}
{"snippet": "os.setreuid(ruid, euid)", "intent": "Set the current process \u2019 s real and effective user ids . With arguments `ruid`, `euid`.", "question_id": 6703}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}
{"snippet": "heapq.nsmallest(n, iterable, key=None)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4328}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "platform.popen(cmd, bufsize=-1)", "intent": "Portable popen ( ) interface . With arguments `cmd`, `bufsize`.", "question_id": 7507}
{"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`, `updated`.", "question_id": 4163}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}
{"snippet": "platform.java_ver('', ''), '', ''), release='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7491}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "tkinter.Tcl(className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "question_id": 10530}
{"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `requestHandler` parameter should be a factory for request handler instances ; it defaults to SimpleXMLRPCRequestHandler .", "question_id": 12713}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2185}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4121}
{"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}
{"snippet": "operator.__eq__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6521}
{"snippet": "shutil.move(src, dst, copy_function=copy2)", "intent": "Recursively move a file or directory ( `src` ) to another location ( `dst` ) and return the destination . Otherwise , src is copied to dst using `copy_function` and then removed .", "question_id": 8339}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "xml.dom.minidom.parse(filename_or_file, parser=None)", "intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . `parser` , if given , must be a SAX2 parser object .", "question_id": 12397}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1082}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "loop.create_datagram_endpoint(protocol_factory, family=0)", "intent": "Create a datagram connection . `protocol_factory` must be a callable returning a protocol implementation . The socket `family` can be either AF_INET , AF_INET6 , or AF_UNIX , depending on host ( or the family argument , if provided ) .", "question_id": 215}
{"snippet": "warnings.simplefilter(action, category=Warning)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`.", "question_id": 12034}
{"snippet": "subprocess.call(args, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead :", "question_id": 9661}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}
{"snippet": "test.support.calcvobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nPn { `fmt` } 0n or , if gettotalrefcount exists , 2PnPn { fmt } 0P .", "question_id": 10201}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "uuid.uuid5(namespace, name)", "intent": "Generate a UUID based on the SHA-1 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11963}
{"snippet": "window.insch(y, x, ch, attr)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , moving the line from position x right by one character .", "question_id": 2073}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "__import__(name, globals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4142}
{"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}
{"snippet": "subprocess.Popen(args, stderr=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9604}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "base_selector.get_key(fileobj)", "intent": "Return the key associated with a registered file object . With arguments `fileobj`.", "question_id": 8223}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "plistlib.load(fp, use_builtin_types=True)", "intent": "Read a plist file . `fp` should be a readable and binary file object . If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data .", "question_id": 7549}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "xml.etree.ElementTree.tostringlist(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12464}
{"snippet": "bytearray(source)", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor : With arguments `source`.", "question_id": 9265}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12914}
{"snippet": "urllib.parse.parse_qsl(qs, keep_blank_values=False, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11687}
{"snippet": "resource.prlimit(pid, resource, limits)", "intent": "Combines setrlimit ( ) and getrlimit ( ) in one function and supports to get and set the resources `limits` of an arbitrary process . If `pid` is 0 , then the call applies to the current process . `resource` and limits have the same meaning as in setrlimit ( ) , except that limits is optional .", "question_id": 8073}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}
{"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}
{"snippet": "callable(object)", "intent": "Return True if the `object` argument appears callable , False if not .", "question_id": 3989}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "plistlib.loads(data, fmt=None, use_builtin_types=True)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `use_builtin_types`.", "question_id": 7559}
{"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2849}
{"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}
{"snippet": "sunau.open(file, mode)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a seekable file-like object . `mode` can be any of", "question_id": 9691}
{"snippet": "mmdf_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5853}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "doc_test_finder.find(obj, name, module, globs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2851}
{"snippet": "pprint.pformat(object, compact=False)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7637}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "xml.dom.minidom.parse(filename_or_file, parser=None)", "intent": "Return a Document from the given input . `filename_or_file` may be either a file name , or a file-like object . `parser` , if given , must be a SAX2 parser object .", "question_id": 12397}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}
{"snippet": "base64.a85decode(b, foldspaces=False, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 740}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986}
{"snippet": "turtle.tracer(delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11060}
{"snippet": "turtle.pen(**pendict, pen=None)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10959}
{"snippet": "types.prepare_class(name, bases=())", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11179}
{"snippet": "plistlib.loads(data, use_builtin_types=True)", "intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`.", "question_id": 7557}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "trace.runfunc(func, *args, **kwds)", "intent": "Call `func` with the given arguments under control of the Trace object with the current tracing parameters . With arguments `*args`, `**kwds`.", "question_id": 10721}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "ZipFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object .", "question_id": 12814}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}
{"snippet": "operator.__invert__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6543}
{"snippet": "ur_lopener.retrieve(url, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11899}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}
{"snippet": "watched_file_handler.emit(record)", "intent": "Outputs the `record` to the file , but first calls reopenIfNeeded ( ) to reopen the file if it has changed .", "question_id": 5449}
{"snippet": "lzma.open(filename, format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5658}
{"snippet": "subprocess.run(args, check=False)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9576}
{"snippet": "loop.create_server(protocol_factory, ssl=None)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `ssl`.", "question_id": 239}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}
{"snippet": "@dataclasses.dataclass(frozen=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `frozen`.", "question_id": 2163}
{"snippet": "credits", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1613}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}
{"snippet": "loop.remove_writer(fd)", "intent": "Stop monitoring the `fd` file descriptor for write availability .", "question_id": 275}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}
{"snippet": "doctest.DocFileSuite(*paths, optionflags=0)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "question_id": 2802}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . With arguments `prog`, `parser_class`.", "question_id": 79}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}
{"snippet": "sqlite3.register_converter(typename, callable)", "intent": "Registers a `callable` to convert a bytestring from the database into a custom Python type . The callable will be invoked for all database values that are of the type `typename` .", "question_id": 8799}
{"snippet": "code.InteractiveInterpreter(locals=None)", "intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) . The optional `locals` argument specifies the dictionary in which code will be executed ; it defaults to a newly created dictionary with key '__name__ ' set to '__console__ ' and key '__doc__ ' set to None .", "question_id": 1156}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432}
{"snippet": "os.minor(device)", "intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6883}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "os.spawnve(mode, path, args, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7058}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10233}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}
{"snippet": "lzma.LZMAFile(filters=None)", "intent": "Open an LZMA-compressed file in binary `mode` . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5672}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "codecs.decode(obj, encoding='utf-8')", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1197}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}
{"snippet": "traceback.extract_tb(tb)", "intent": "Return a StackSummary object representing a list of \u201c pre-processed \u201d stack trace entries extracted from the traceback object `tb` .", "question_id": 10769}
{"snippet": "FTP.connect(port=0, timeout=None)", "intent": "Connect to the given `host` and `port` . The optional `timeout` parameter specifies a timeout in seconds for the connection attempt .", "question_id": 3912}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}
{"snippet": "mh.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "question_id": 5781}
{"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "getpass.getpass(stream=None)", "intent": "Prompt the user for a password without echoing . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4206}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "FTP.retrbinary(cmd, callback, rest=None)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . `rest` means the same thing as in the transfercmd ( ) method .", "question_id": 3928}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "set.intersection_update(*others)", "intent": "Update the set , keeping only elements found in it and all others . With arguments `*others`.", "question_id": 9456}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "importlib.__import__(name, globals=None, fromlist=())", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `fromlist`.", "question_id": 4789}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "collections.deque(iterable, maxlen)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .", "question_id": 1350}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "tkinter.Tcl(className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "question_id": 10530}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "tempfile.mkstemp(prefix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10080}
{"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, defaults=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . `defaults` can be None or an iterable of default values .", "question_id": 1380}
{"snippet": "time.replace(hour=self.hour)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2335}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "curses.newwin(nlines, ncols)", "intent": "Return a new window , whose left-upper corner is at ( begin_y , begin_x ) , and whose height/width is nlines/ncols . With arguments `nlines`, `ncols`.", "question_id": 1958}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12528}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "turtle.circle(radius, extent=None, steps=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10926}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "Path.chmod(mode)", "intent": "Change the file `mode` and permissions , like os.chmod ( ) :", "question_id": 7268}
{"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585}
{"snippet": "tkinter.Tcl(baseName=None)", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`.", "question_id": 10529}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "os.pwrite(fd, str, offset)", "intent": "Write the bytestring in `str` to file descriptor `fd` at position of `offset` , leaving the file offset unchanged .", "question_id": 6788}
{"snippet": "patch.object(target, attribute, **kwargs, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11621}
{"snippet": "tempfile.NamedTemporaryFile(newline=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `newline`.", "question_id": 10047}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}
{"snippet": "multiprocessing.JoinableQueue(maxsize)", "intent": "JoinableQueue , a Queue subclass , is a queue which additionally has task_done ( ) and join ( ) methods . With arguments `maxsize`.", "question_id": 6215}
{"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}
{"snippet": "bdb.runeval(expr, locals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 813}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11152}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`, `subtype`.", "question_id": 3047}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4121}
{"snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\", symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1178}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "os.execle(path, arg0, arg1, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "question_id": 7010}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10971}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "set.intersection_update(*others)", "intent": "Update the set , keeping only elements found in it and all others . With arguments `*others`.", "question_id": 9456}
{"snippet": "fcntl.lockf(fd, cmd, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3753}
{"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "test_case.assertWarns(warning)", "intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) .", "question_id": 11406}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "threading.Timer(interval, function, args=None, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10415}
{"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "tkinter.Tcl(className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "question_id": 10530}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2190}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "mime_types.read_windows_registry(strict=True)", "intent": "Load MIME type information from the Windows registry . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "question_id": 5975}
{"snippet": "loop.create_unix_connection(protocol_factory, ssl=None)", "intent": "Create a Unix connection . With arguments `protocol_factory`, `ssl`.", "question_id": 224}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11149}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "bytes(source, encoding, errors)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`, `errors`.", "question_id": 3985}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "http.client.HTTPSConnection(host, timeout)", "intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `timeout`.", "question_id": 4382}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "shelve.BsdDbShelf(dict, protocol=None)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8253}
{"snippet": "warnings.filterwarnings(action, lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "question_id": 12027}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "ZipFile.open(name, pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12808}
{"snippet": "str.startswith(prefix)", "intent": "Return True if string starts with the `prefix` , otherwise return False .", "question_id": 9249}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12462}
{"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}
{"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "Template.open(file, mode)", "intent": "Return a file-like object , open to `file` , but read from or written to by the pipeline . With arguments `mode`.", "question_id": 7433}
{"snippet": "stream_reader.read(size, chars)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return .", "question_id": 1287}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "r_lock.acquire(timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10383}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "sysconfig.parse_config_h(fp, vars)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file . With arguments `vars`.", "question_id": 9873}
{"snippet": "argparse.FileType(errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `errors`.", "question_id": 89}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}
{"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}
{"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}
{"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "zlib.compressobj(strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `strategy` is used to tune the compression algorithm .", "question_id": 12912}
{"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}
{"snippet": "window.addch(y, x, ch, attr)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2002}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 758}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "doctest.DocTestFinder(verbose=False, exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2847}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'EmailMessage'>`.", "question_id": 3059}
{"snippet": "bz2.BZ2Decompressor", "intent": "Create a new decompressor object.", "question_id": 900}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "window.clearok(flag)", "intent": "If `flag` is True , the next call to refresh ( ) will clear the window completely .", "question_id": 2035}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493}
{"snippet": "email.iterators.body_line_iterator(msg, decode=False)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line . Optional `decode` is passed through to Message.get_payload .", "question_id": 3209}
{"snippet": "sync_manager.dict(sequence)", "intent": "Create a shared dict object and return a proxy for it . With arguments `sequence`.", "question_id": 6315}
{"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}
{"snippet": "winreg.OpenKeyEx(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12144}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "fileinput.input(bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `bufsize`.", "question_id": 3786}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "str.format_map(mapping)", "intent": "Similar to str.format ( **mapping ) , except that `mapping` is used directly and not copied to a dict .", "question_id": 9198}
{"snippet": "pickle.load(file, fix_imports=True, errors=\"strict\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7376}
{"snippet": "heapq.heappushpop(heap, item)", "intent": "Push `item` on the `heap` , then pop and return the smallest item from the heap .", "question_id": 4318}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "zipfile.PyZipFile(file, mode='r', optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `mode`, `optimize`.", "question_id": 12853}
{"snippet": "types.MappingProxyType(mapping)", "intent": "Read-only proxy of a `mapping` .", "question_id": 11206}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}
{"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "importlib.util.module_from_spec(spec)", "intent": "Create a new module based on `spec` and spec.loader.create_module .", "question_id": 4930}
{"snippet": "subprocess.Popen(args, close_fds=True)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `close_fds` is true , all file descriptors except 0 , 1 and 2 will be closed before the child process is executed .", "question_id": 9606}
{"snippet": "str(object='')", "intent": "Return a string version of `object` .", "question_id": 9169}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "signature.from_callable(obj, follow_wrapped=True)", "intent": "Return a Signature ( or its subclass ) object for a given callable `obj` . With arguments `follow_wrapped`.", "question_id": 4992}
{"snippet": "Document.createProcessingInstruction(target, data)", "intent": "Create and return a processing instruction node containing the `target` and `data` passed as parameters .", "question_id": 12349}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "os.removexattr(path, attribute)", "intent": "Removes the extended filesystem `attribute` attribute from `path` .", "question_id": 6999}
{"snippet": "plistlib.dumps(value, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `skipkeys`.", "question_id": 7574}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}
{"snippet": "turtle.onscreenclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`.", "question_id": 11076}
{"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5419}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "lzma.compress(data, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5707}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "getpass.getpass(stream=None)", "intent": "Prompt the user for a password without echoing . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4206}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}
{"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}
{"snippet": "cgi.parse_qsl(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1043}
{"snippet": "operator.__le__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6520}
{"snippet": "logging.setLogRecordFactory(factory)", "intent": "Set a callable which is used to create a LogRecord . The `factory` has the following signature :", "question_id": 5652}
{"snippet": "shutil.copytree(src, dst, ignore=None, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8331}
{"snippet": "ipaddress.IPv6Network(address, strict=True)", "intent": "Construct an IPv6 network definition . `address` can be one of the following : If `strict` is True and host bits are set in the supplied address , then ValueError is raised .", "question_id": 5220}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "traceback_exception.from_exception(exc, capture_locals=False)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10815}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, strict=True)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `strict`.", "question_id": 1576}
{"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}
{"snippet": "socket.recv_into(buffer)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8716}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11138}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', _subparts=None)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . `_subparts` is a sequence of initial subparts for the payload . With arguments `**_params`.", "question_id": 3322}
{"snippet": "pkgutil.walk_packages(path=None, onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7454}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "Pattern.finditer(string, pos)", "intent": "Similar to the finditer ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7985}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "r_lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10384}
{"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040}
{"snippet": "subprocess.call(args, stdin=None, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `stdin`.", "question_id": 9666}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139}
{"snippet": "tempfile.TemporaryDirectory(prefix=None, dir=None)", "intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `prefix`, `dir`.", "question_id": 10069}
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "locale.resetlocale(category=LC_ALL)", "intent": "Sets the locale for `category` to the default setting .", "question_id": 5381}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "question_id": 1205}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "writer.new_alignment(align)", "intent": "Set the alignment style . The `align` value can be any object , but by convention is a string or None , where None indicates that the writer \u2019 s \u201c preferred \u201d alignment should be used .", "question_id": 3842}
{"snippet": "subprocess.check_call(args, stdin=None, shell=False)", "intent": "Run command with arguments . With arguments `args`, `stdin`, `shell`.", "question_id": 9678}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`.", "question_id": 4939}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "xmlparser.StartNamespaceDeclHandler(prefix, uri)", "intent": "Called when an element contains a namespace declaration . With arguments `prefix`, `uri`.", "question_id": 7767}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`, `errors`.", "question_id": 11730}
{"snippet": "IMAP4.setannotation(mailbox, entry, attribute)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "question_id": 4735}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8350}
{"snippet": "json.dumps(obj, **kw, indent=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `indent`.", "question_id": 5286}
{"snippet": "threading.Thread(group=None, name=None)", "intent": "This constructor should always be called with keyword arguments . `group` should be None ; reserved for future extension when a ThreadGroup class is implemented . `name` is the thread name .", "question_id": 10360}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common, shallow=True)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` . The `shallow` parameter has the same meaning and default value as for filecmp.cmp ( ) .", "question_id": 3758}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "subprocess.check_call(args, stdin=None, shell=False)", "intent": "Run command with arguments . With arguments `args`, `stdin`, `shell`.", "question_id": 9678}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "timeit.Timer(globals=None)", "intent": "Class for timing execution speed of small code snippets . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "question_id": 10501}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "fcntl.lockf(fd, cmd, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3750}
{"snippet": "HTTPConnection.request(method, url, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4430}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\")", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`, `subtype`.", "question_id": 3040}
{"snippet": "urllib.request.urlretrieve(url, filename=None, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied . With arguments `reporthook`.", "question_id": 11885}
{"snippet": "http.client.HTTPResponse(sock, debuglevel=0, method=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `debuglevel`, `method`.", "question_id": 4406}
{"snippet": "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`, `encoding`.", "question_id": 5451}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980}
{"snippet": "types.MappingProxyType(mapping)", "intent": "Read-only proxy of a `mapping` .", "question_id": 11206}
{"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "loop.sendfile(transport, file)", "intent": "Send a `file` over a `transport` .", "question_id": 256}
{"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}
{"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "set > other", "intent": "Test whether the set is a proper superset of other, that is, set >= other and set != other.", "question_id": 9444}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866}
{"snippet": "nntplib.NNTP_SSL(host, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "question_id": 6432}
{"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}
{"snippet": "subprocess.check_output(args, text=None)", "intent": "Run command with arguments and return its output . The actual `encoding` of the output data may depend on the command being invoked , so the decoding to `text` will often need to be handled at the application level . With arguments `args`.", "question_id": 9688}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`.", "question_id": 4935}
{"snippet": "frozenset()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9434}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "os.fwalk(top='.', dir_fd=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6992}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "shutil.copyfileobj(fsrc, fdst, length)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` . The integer `length` , if given , is the buffer size .", "question_id": 8309}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4159}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "message.set_charset(charset)", "intent": "Set the character set of the payload to `charset` , which can either be a Charset instance ( see email.charset ) , a string naming a character set , or None .", "question_id": 2962}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6799}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630}
{"snippet": "curses.qiflush(flag)", "intent": "If `flag` is False , the effect is the same as calling noqiflush ( ) .", "question_id": 1969}
{"snippet": "Path.lchmod(mode)", "intent": "Like Path.chmod ( ) but , if the path points to a symbolic link , the symbolic link \u2019 s `mode` is changed rather than its target \u2019 s .", "question_id": 7282}
{"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}
{"snippet": "dis.dis(x=None, file=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2711}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}
{"snippet": "ref.__callback__", "intent": "This read-only attribute returns the callback currently associated to the weakref.", "question_id": 12076}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "tempfile.SpooledTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10055}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "ast.parse(source, filename='<unknown>', mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 148}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151}
{"snippet": "tkinter.Tcl(baseName=None, useTk=0)", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`, `useTk`.", "question_id": 10536}
{"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665}
{"snippet": "str.encode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9188}
{"snippet": "socket.listen(backlog)", "intent": "Enable a server to accept connections . If `backlog` is specified , it must be at least 0 ( if it is lower , it is set to 0 ) ; it specifies the number of unaccepted connections that the system will allow before refusing new connections .", "question_id": 8689}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "asyncio.open_unix_connection(sock=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `sock`.", "question_id": 488}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "os.sched_getparam(pid)", "intent": "Return the scheduling parameters as a sched_param instance for the process with PID `pid` .", "question_id": 7110}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "io.TextIOWrapper(buffer)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "question_id": 5146}
{"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}
{"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}
{"snippet": "shutil.chown(path, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8343}
{"snippet": "fcntl.ioctl(fd, request, arg=0)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . With arguments `fd`.", "question_id": 3743}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614}
{"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "PurePath.with_suffix(suffix)", "intent": "Return a new path with the `suffix` changed .", "question_id": 7261}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2190}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "KeyboardInterrupt", "intent": "Raised when the user hits the interrupt key (normally Control-C or Delete).", "question_id": 3644}
{"snippet": "tarfile.TarFile(tarinfo=TarInfo)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `tarinfo` argument can be used to replace the default TarInfo class with a different one .", "question_id": 9918}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897}
{"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}
{"snippet": "warnings.filterwarnings(action, lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "question_id": 12027}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 3000}
{"snippet": "socket.recvfrom(bufsize)", "intent": "Receive data from the socket . With arguments `bufsize`.", "question_id": 8704}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "random.choices(population, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7897}
{"snippet": "calendar.month(theyear, themonth, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `l`.", "question_id": 999}
{"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048}
{"snippet": "tarfile.open(**kwargs, fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9893}
{"snippet": "locale.getlocale(category=LC_CTYPE)", "intent": "Returns the current setting for the given locale `category` as sequence containing language code , encoding .", "question_id": 5376}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "calendar.yeardayscalendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 924}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}
{"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}
{"snippet": "condition.wait_for(predicate)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value .", "question_id": 10392}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "inspect.signature(callable)", "intent": "Return a Signature object for the given `callable` :", "question_id": 4977}
{"snippet": "unicodedata.name(chr)", "intent": "Returns the name assigned to the character `chr` as a string .", "question_id": 11342}
{"snippet": "string.Template(template)", "intent": "The constructor takes a single argument which is the `template` string .", "question_id": 9525}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}
{"snippet": "mailcap.findmatch(caps)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.", "question_id": 5869}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}
{"snippet": "readline.remove_history_item(pos)", "intent": "Remove history item specified by its position from the history . With arguments `pos`.", "question_id": 8032}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023}
{"snippet": "oss_mixer_device.set_recsrc(bitmask)", "intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "question_id": 7209}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `comment_prefixes`.", "question_id": 1574}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "TarFile.extractall(path=\".\", members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9936}
{"snippet": "os.pathconf(path, name)", "intent": "Return system configuration information relevant to a named file . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX.1 , Unix 95 , Unix 98 , and others ) . With arguments `path`.", "question_id": 6885}
{"snippet": "datetime.replace(microsecond=self.microsecond)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "question_id": 2291}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "mimetypes.MimeTypes(filenames=(), strict=True)", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database . With arguments `strict`.", "question_id": 5959}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "fraction.__ceil__()", "intent": "Returns the least int > = self .", "question_id": 3874}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`.", "question_id": 323}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`, `errors`.", "question_id": 11730}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "importlib.resources.is_resource(package, name)", "intent": "Return True if there is a resource named `name` in the `package` , otherwise False .", "question_id": 4863}
{"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}
{"snippet": "WriteTransport.set_write_buffer_limits(low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 411}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 759}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "null_handler.handle(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5438}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "tarfile.open(**kwargs, fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9893}
{"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "codecs.getencoder(encoding)", "intent": "Look up the codec for the given `encoding` and return its encoder function .", "question_id": 1218}
{"snippet": "datetime.datetime(year, month, day, microsecond=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `microsecond`.", "question_id": 2251}
{"snippet": "xml.etree.ElementTree.QName(text_or_uri, tag=None)", "intent": "QName wrapper . `text_or_uri` is a string containing the QName value , in the form { uri } local , or , if the `tag` argument is given , the URI part of a QName .", "question_id": 12538}
{"snippet": "http.client.HTTPConnection(host, blocksize=8192)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "question_id": 4377}
{"snippet": "decimal.fma(other, third, context=None)", "intent": "Fused multiply-add . With arguments `other`, `third`, `context`.", "question_id": 2416}
{"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}
{"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}
{"snippet": "compileall.compile_file(fullname, force=False)", "intent": "Compile the file with path `fullname` . With arguments `force`.", "question_id": 1421}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}
{"snippet": "heapq.merge(*iterables, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `reverse` is a boolean value .", "question_id": 4323}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12467}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}
{"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}
{"snippet": "traceback.print_stack(f=None, limit=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10765}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704}
{"snippet": "doctest.testfile(filename, report=True)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `report` prints a summary at the end when true , else prints nothing at the end .", "question_id": 2772}
{"snippet": "bytes.split(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9365}
{"snippet": "unittest.FunctionTestCase(testFunc)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`.", "question_id": 11473}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "pickle.loads(bytes_object, fix_imports=True, errors=\"strict\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7384}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\")", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`, `subtype`.", "question_id": 3040}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "marshal.dump(value, file, version)", "intent": "Write the `value` on the open `file` . The `version` argument indicates the data format that dump should use ( see below ) .", "question_id": 5878}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "test_case.assertEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are equal . With arguments `msg`.", "question_id": 11376}
{"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "os.spawnl(mode, path)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process .", "question_id": 7053}
{"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980}
{"snippet": "test.support.is_resource_enabled(resource)", "intent": "Return True if `resource` is enabled and available .", "question_id": 10144}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "TarFile.extractall(path=\".\", members=None, numeric_owner=False)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9939}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}
{"snippet": "mime_types.guess_all_extensions(type, strict=True)", "intent": "Similar to the guess_all_extensions ( ) function , using the tables stored as part of the object . With arguments `type`, `strict`.", "question_id": 5969}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "timeit.repeat(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10494}
{"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, sinfo=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `sinfo`.", "question_id": 5588}
{"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "NNTP.login(user=None, password=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6458}
{"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "pty.spawn(argv, master_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7701}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "warnings.warn_explicit(message, category, filename, lineno)", "intent": "This is a low-level interface to the functionality of warn ( ) , passing in explicitly the `message` , `category` , `filename` and line number , and optionally the `module` name and the `registry` ( which should be the __warningregistry__ dictionary of the module ) . With arguments `lineno`.", "question_id": 12007}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "task.print_stack(file=None)", "intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 638}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "email.charset.add_charset(charset)", "intent": "Add character properties to the global registry . `charset` is the input character set , and must be the canonical name of a character set .", "question_id": 2926}
{"snippet": "Path.resolve(strict=False)", "intent": "Make the path absolute , resolving any symlinks . If the path doesn \u2019 t exist and `strict` is True , FileNotFoundError is raised .", "question_id": 7311}
{"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182}
{"snippet": "socket.recv_into(buffer)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8716}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "question_id": 11477}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "policy.fold(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message for a given header .", "question_id": 3426}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "bdb.run(cmd, locals=None)", "intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "question_id": 809}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "binascii.b2a_qp(data, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 831}
{"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "subprocess.call(args, stdin=None)", "intent": "Run the command described by `args` . With arguments `stdin`.", "question_id": 9660}
{"snippet": "ZipFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object .", "question_id": 12814}
{"snippet": "turtle.ondrag(fun)", "intent": "Bind `fun` to mouse-move events on this turtle .", "question_id": 11027}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "FTP.retrbinary(cmd, callback, blocksize=8192)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . The optional `blocksize` argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer ( which will also be the largest size of the data blocks passed to callback ) .", "question_id": 3927}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "gzip.GzipFile(filename=None, mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4291}
{"snippet": "iterator.__next__()", "intent": "Return the next item from the container .", "question_id": 9153}
{"snippet": "calendar.yeardayscalendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 924}
{"snippet": "xml.dom.registerDOMImplementation(name, factory)", "intent": "Register the `factory` function with the `name` name .", "question_id": 12302}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}
{"snippet": "timeit.repeat(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10492}
{"snippet": "lzma.LZMACompressor(filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5682}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}
{"snippet": "parser.issuite(st)", "intent": "This function mirrors isexpr ( ) in that it reports whether an ST object represents an 'exec ' form , commonly known as a \u201c suite. \u201d It is not safe to assume that this function is equivalent to not isexpr ( `st` ) , as additional syntactic fragments may be supported in the future .", "question_id": 7225}
{"snippet": "Record.SetInteger(field, value)", "intent": "Set `field` to `value` through MsiRecordSetInteger ( ) .", "question_id": 6086}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "Node.toprettyxml(newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12419}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "Path.rglob(pattern)", "intent": "This is like calling Path.glob ( ) with \u201c **/ \u201d added in front of the given relative `pattern` :", "question_id": 7312}
{"snippet": "test_loader.loadTestsFromName(name, module=None)", "intent": "Return a suite of all test cases given a string specifier . The specifier `name` is a \u201c dotted name \u201d that may resolve either to a `module` , a test case class , a test method within a test case class , a TestSuite instance , or a callable object which returns a TestCase or TestSuite instance .", "question_id": 11495}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}
{"snippet": "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . If `respect_handler_level` is True , a handler \u2019 s level is respected ( compared with the level for the message ) when deciding whether to pass messages to that handler ; otherwise , the behaviour is as in previous Python versions - to always pass each message to each handler . With arguments `*handlers`.", "question_id": 5558}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "os.execlpe(file, arg0, arg1, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "question_id": 7012}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "subprocess.call(args, timeout=None)", "intent": "Run the command described by `args` . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface .", "question_id": 9665}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "datetime.datetime(year, month, day, hour=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`.", "question_id": 2248}
{"snippet": "Element.getAttributeNode(attrname)", "intent": "Return the Attr node for the attribute named by `attrname` .", "question_id": 12360}
{"snippet": "textwrap.fill(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "question_id": 10321}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "traceback.print_last(limit=None, chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10758}
{"snippet": "codeop.compile_command(source, filename=\"<input>\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' .", "question_id": 1305}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}
{"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}
{"snippet": "super(type, object-or-type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.", "question_id": 4125}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "bdb.checkfuncname(b, frame)", "intent": "Check whether we should break here , depending on the way the breakpoint `b` was set . If it was set via line number , it checks if b.line is the same as the one in the `frame` also passed as argument .", "question_id": 817}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "stats.add(*filenames)", "intent": "This method of the Stats class accumulates additional profiling information into the current profiling object . With arguments `*filenames`.", "question_id": 7691}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}
{"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}
{"snippet": "doctest.run_docstring_examples(f, globs)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context .", "question_id": 2786}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "turtle.delay(delay=None)", "intent": "Set or return the drawing `delay` in milliseconds .", "question_id": 11057}
{"snippet": "os.path.samefile(path1, path2)", "intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "question_id": 7166}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "TarFile.gettarinfo(name=None, fileobj=None)", "intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor .", "question_id": 9964}
{"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `func`.", "question_id": 5586}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdout=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 525}
{"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . The type of socket opened depends on the `socktype` argument , which defaults to socket.SOCK_DGRAM and thus opens a UDP socket . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5499}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "ipaddress.collapse_addresses(addresses)", "intent": "Return an iterator of the collapsed IPv4Network or IPv6Network objects . `addresses` is an iterator of IPv4Network or IPv6Network objects .", "question_id": 5235}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "base_http_request_handler.date_time_string(timestamp=None)", "intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "question_id": 4656}
{"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963}
{"snippet": "pkgutil.walk_packages(prefix='')", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "question_id": 7451}
{"snippet": "traceback.format_stack(f=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10788}
{"snippet": "bytes.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9343}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "traceback_exception.format(chain=True)", "intent": "Format the exception . If `chain` is not True , __cause__ and __context__ will not be formatted .", "question_id": 10821}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "compile(source, filename, mode, flags=0, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3997}
{"snippet": "plistlib.dumps(value, sort_keys=True, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`, `skipkeys`.", "question_id": 7577}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "element_tree.parse(source, parser=None)", "intent": "Loads an external XML section into this element tree . `source` is a file name or file object . `parser` is an optional parser instance .", "question_id": 12526}
{"snippet": "element.iterfind(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12503}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 933}
{"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "urllib.request.urlopen(url, timeout)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11742}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "random.choices(population, weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7900}
{"snippet": "connection.executemany(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8813}
{"snippet": "base64.b85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using base85 ( as used in e.g . If `pad` is true , the input is padded with b'\\0 ' so its length is a multiple of 4 bytes before encoding .", "question_id": 745}
{"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}
{"snippet": "lock.acquire(timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12954}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "warnings.filterwarnings(action, category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `category`.", "question_id": 12025}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "statistics.pvariance(data, mu=None)", "intent": "Return the population variance of `data` , a non-empty iterable of real-valued numbers . If the optional second argument `mu` is given , it should be the mean of data .", "question_id": 9136}
{"snippet": "ftplib.FTP(host='', passwd='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3886}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159}
{"snippet": "SimpleXMLRPCServer.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "question_id": 12735}
{"snippet": "ctypes.OleDLL(name, use_errno=False)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `use_errno`.", "question_id": 1753}
{"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}
{"snippet": "code.compile_command(source)", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1171}
{"snippet": "ctypes.Structure(*args, **kw)", "intent": "Abstract base class for structures in native byte order . With arguments `*args`, `**kw`.", "question_id": 1889}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182}
{"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\", method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12535}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "loop.create_connection(protocol_factory, ssl=None)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . With arguments `ssl`.", "question_id": 205}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}
{"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`.", "question_id": 4161}
{"snippet": "queue_listener.setLevel(level)", "intent": "Sets the threshold for this logger to `level` .", "question_id": 5566}
{"snippet": "dis.dis(x=None, file=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2711}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}
{"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932}
{"snippet": "ArgumentParser.add_argument_group(description=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 97}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "sync_manager.dict(sequence)", "intent": "Create a shared dict object and return a proxy for it . With arguments `sequence`.", "question_id": 6315}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "question_id": 10044}
{"snippet": "gzip.open(filename, mode='rb', errors=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4280}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "subprocess.call(args, stdin=None, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `stdin`.", "question_id": 9666}
{"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}
{"snippet": "uuid.uuid1(node=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address .", "question_id": 11958}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "loop.remove_writer(fd)", "intent": "Stop monitoring the `fd` file descriptor for write availability .", "question_id": 275}
{"snippet": "ContentHandler.startPrefixMapping(prefix, uri)", "intent": "Begin the scope of a prefix-URI Namespace mapping . With arguments `prefix`, `uri`.", "question_id": 12573}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "subprocess.run(args, check=False)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9576}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "msilib.Feature(db, id, title, desc, display, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6118}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}
{"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "definition.__name__", "intent": "The name of the class, function, method, descriptor, or generator instance.", "question_id": 9502}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "codecs.encode(obj, encoding='utf-8', errors='strict')", "intent": "Encodes `obj` using the codec registered for `encoding` . The default error handler is 'strict ' meaning that encoding `errors` raise ValueError ( or a more codec specific subclass , such as UnicodeEncodeError ) .", "question_id": 1195}
{"snippet": "warnings.filterwarnings(action, message='', category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `category`.", "question_id": 12029}
{"snippet": "fileinput.FileInput(backup='')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `backup`.", "question_id": 3803}
{"snippet": "PurePath.with_suffix(suffix)", "intent": "Return a new path with the `suffix` changed .", "question_id": 7261}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}
{"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None)", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3213}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}
{"snippet": "Pattern.fullmatch(string, pos, endpos)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7976}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "turtle.circle(radius, extent=None, steps=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10926}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, all_frames: bool=False)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `all_frames: bool`.", "question_id": 10856}
{"snippet": "TarFile.addfile(tarinfo)", "intent": "Add the TarInfo object `tarinfo` to the archive .", "question_id": 9957}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "meta_path_finder.find_module(fullname, path)", "intent": "A legacy method for finding a loader for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "question_id": 4805}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6120}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "codecs.iterencode(iterator, encoding, **kwargs)", "intent": "Uses an incremental encoder to iteratively encode the input provided by `iterator` . With arguments `encoding`, `**kwargs`.", "question_id": 1239}
{"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}
{"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}
{"snippet": "scheduler.enterabs(time, priority, action, kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8120}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "test_case.assertNotIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11397}
{"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}
{"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261}
{"snippet": "email.utils.formatdate(timeval=None, localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3472}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "loop.create_connection(protocol_factory, family=0)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . The socket `family` can be either AF_INET or AF_INET6 depending on host ( or the family argument , if provided ) .", "question_id": 206}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "pwd.getpwuid(uid)", "intent": "Return the password database entry for the given numeric user ID . With arguments `uid`.", "question_id": 7703}
{"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "mh.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "question_id": 5781}
{"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}
{"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 539}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`, `updated`.", "question_id": 4163}
{"snippet": "configparser.RawConfigParser(':'), ';'), strict=True)", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `strict`.", "question_id": 1586}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "doc_test_runner.summarize(verbose=None)", "intent": "Print a summary of all the test cases that have been run by this DocTestRunner , and return a named tuple TestResults ( failed , attempted ) . The optional `verbose` argument controls how detailed the summary is .", "question_id": 2882}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "logging.handlers.RotatingFileHandler(filename, backupCount=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5461}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891}
{"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}
{"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . With arguments `prog`, `parser_class`.", "question_id": 79}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}
{"snippet": "traceback.format_exception(etype, value, tb, chain=True)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `chain`.", "question_id": 10779}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `func`.", "question_id": 5586}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}
{"snippet": "collections.Counter(iterable-or-mapping)", "intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "question_id": 1340}
{"snippet": "shelve.open(filename, flag='c')", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) .", "question_id": 8235}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='', osinfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7494}
{"snippet": "mmap.flush(offset, size)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6005}
{"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391}
{"snippet": "scheduler.enter(delay, priority, action)", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`.", "question_id": 8122}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "InteractiveInterpreter.runsource(source, symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1177}
{"snippet": "config_parser.write(fileobject)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . With arguments `fileobject`.", "question_id": 1561}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, headers=None)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3046}
{"snippet": "config_parser.write(fileobject, space_around_delimiters=True)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . If `space_around_delimiters` is true , delimiters between keys and values are surrounded by spaces . With arguments `fileobject`.", "question_id": 1562}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "SimpleQueue.put(item, block=True)", "intent": "Put `item` into the queue . The optional args `block` and `timeout` are ignored and only provided for compatibility with Queue.put ( ) .", "question_id": 7864}
{"snippet": "ZipFile.open(name, pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12808}
{"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}
{"snippet": "importlib.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4798}
{"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}
{"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "TarFile.extract(member, path=\"\", set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9944}
{"snippet": "FTP.storbinary(cmd, fp, rest=None)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored . `rest` means the same thing as in the transfercmd ( ) method .", "question_id": 3936}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "test.support.swap_item(obj, attr, new_val)", "intent": "Context manager to swap out an item with a new object . This will set `obj` [ `` item '' ] to 5 for the duration of the with block , restoring the old value at the end of the block . With arguments `attr`, `new_val`.", "question_id": 10195}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "loop.getnameinfo(sockaddr, flags=0)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`, `flags`.", "question_id": 300}
{"snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12914}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}
{"snippet": "difflib.diff_bytes(dfunc, a, b, lineterm=b'\\n')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2663}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "timeit.Timer(timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10500}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}
{"snippet": "tempfile.mkstemp(prefix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10080}
{"snippet": "TarFile.addfile(tarinfo)", "intent": "Add the TarInfo object `tarinfo` to the archive .", "question_id": 9957}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "doctest.Example(source, want, lineno=0, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `options`.", "question_id": 2833}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "locale.currency(val, symbol=True)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "question_id": 5393}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`, `stdout`, `stderr`.", "question_id": 328}
{"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 3000}
{"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "smtplib.SMTP(timeout, port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8450}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "loop.sock_recv(sock, nbytes)", "intent": "Receive up to `nbytes` from `sock` .", "question_id": 276}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "FTP.login(user='anonymous', passwd='', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3922}
{"snippet": "calendar.prcal(year, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `c`.", "question_id": 1004}
{"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "shutil.copytree(src, dst, ignore=None, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8331}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)", "intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "question_id": 12151}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "getpass.getpass(prompt='Password: ', stream=None)", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4207}
{"snippet": "bytes.replace(old, new, count)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9307}
{"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "question_id": 12124}
{"snippet": "asyncio.open_connection(family=0)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `family`.", "question_id": 469}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}
{"snippet": "test.support.set_memlimit(limit)", "intent": "Set the values for max_memuse and real_max_memuse for big memory tests . With arguments `limit`.", "question_id": 10167}
{"snippet": "tarfile.open(**kwargs, fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9893}
{"snippet": "decimal.compare_signal(other)", "intent": "This operation is identical to the compare ( ) method , except that all NaNs signal . With arguments `other`.", "question_id": 2401}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823}
{"snippet": "datetime.datetime(year, month, day, tzinfo=None)", "intent": "The `year` , `month` and `day` arguments are required . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2252}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}
{"snippet": "bz2.BZ2File(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 887}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081}
{"snippet": "mailbox.Babyl(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in Babyl format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5796}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\")", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "question_id": 12417}
{"snippet": "lzma.LZMADecompressor(filters=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "question_id": 5693}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "iterator.__next__()", "intent": "Return the next item from the container .", "question_id": 9153}
{"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}
{"snippet": "json.dumps(obj, **kw, cls=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5285}
{"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "turtle.delay(delay=None)", "intent": "Set or return the drawing `delay` in milliseconds .", "question_id": 11057}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}
{"snippet": "logging.addLevelName(level, levelName)", "intent": "Associates `level` level with text `levelName` in an internal dictionary , which is used to map numeric levels to a textual representation , for example when a Formatter formats a message .", "question_id": 5646}
{"snippet": "turtle.lt(angle)", "intent": "Turn turtle left by `angle` units .", "question_id": 10911}
{"snippet": "zlib.compressobj(strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `strategy` is used to tune the compression algorithm .", "question_id": 12912}
{"snippet": "importlib.abc.FileLoader(fullname, path)", "intent": "An abstract base class which inherits from ResourceLoader and ExecutionLoader , providing concrete implementations of ResourceLoader.get_data ( ) and ExecutionLoader.get_filename ( ) . The `fullname` argument is a fully resolved name of the module the loader is to handle . The `path` argument is the path to the file for the module .", "question_id": 4835}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "os.lchmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6848}
{"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "xml.etree.ElementInclude.include(elem, loader=None)", "intent": "This function expands XInclude directives . `elem` is the root element . `loader` is an optional resource loader .", "question_id": 12476}
{"snippet": "textwrap.fill(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "question_id": 10321}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "incremental_decoder.decode(object, final)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object . If this is the last call to decode ( ) `final` must be true ( the default is false ) .", "question_id": 1274}
{"snippet": "scheduler.run(blocking=True)", "intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "question_id": 8129}
{"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2185}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "test.support.check__all__(test_case, module, extra=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "question_id": 10279}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "fcntl.ioctl(fd, request, arg=0)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . With arguments `fd`.", "question_id": 3743}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11152}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "pprint.pformat(object, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7635}
{"snippet": "HTTPConnection.set_debuglevel(level)", "intent": "Set the debugging `level` .", "question_id": 4436}
{"snippet": "lzma.LZMADecompressor(filters=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "question_id": 5693}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "types.resolve_bases(bases)", "intent": "Resolve MRO entries dynamically as specified by PEP 560 . This function looks for items in `bases` that are not instances of type , and returns a tuple where each such object that has an __mro_entries__ method is replaced with an unpacked result of calling this method .", "question_id": 11182}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "compileall.compile_path(legacy=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `legacy`.", "question_id": 1434}
{"snippet": "sqlite3.register_converter(typename, callable)", "intent": "Registers a `callable` to convert a bytestring from the database into a custom Python type . The callable will be invoked for all database values that are of the type `typename` .", "question_id": 8799}
{"snippet": "nntplib.NNTP(host, timeout, port=119, usenetrc=False)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6408}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`, `add`.", "question_id": 11074}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "bytearray.endswith(suffix)", "intent": "Return True if the binary data ends with the specified `suffix` , otherwise return False .", "question_id": 9288}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}
{"snippet": "subprocess.check_output(args, timeout=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `timeout`.", "question_id": 9687}
{"snippet": "winreg.EnumValue(key, index)", "intent": "Enumerates values of an open registry `key` , returning a tuple . `index` is an integer that identifies the index of the value to retrieve .", "question_id": 12134}
{"snippet": "importlib.abc.FileLoader(fullname, path)", "intent": "An abstract base class which inherits from ResourceLoader and ExecutionLoader , providing concrete implementations of ResourceLoader.get_data ( ) and ExecutionLoader.get_filename ( ) . The `fullname` argument is a fully resolved name of the module the loader is to handle . The `path` argument is the path to the file for the module .", "question_id": 4835}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "socket.ioctl(control, option)", "intent": "The ioctl ( ) method is a limited interface to the WSAIoctl system interface . Currently only the following `control` codes are supported : SIO_RCVALL , SIO_KEEPALIVE_VALS , and SIO_LOOPBACK_FAST_PATH . With arguments `option`.", "question_id": 8688}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "compileall.compile_dir(dir, optimize=-1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "question_id": 1416}
{"snippet": "base64.a85decode(b, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 738}
{"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}
{"snippet": "parser.isexpr(st)", "intent": "When `st` represents an 'eval ' form , this function returns true , otherwise it returns false .", "question_id": 7224}
{"snippet": "dis.disco(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2723}
{"snippet": "connection.backup(target, progress=None, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8838}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "mock.__class__", "intent": "Normally the __class__ attribute of an object will return its type.", "question_id": 11596}
{"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10249}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . If `respect_handler_level` is True , a handler \u2019 s level is respected ( compared with the level for the message ) when deciding whether to pass messages to that handler ; otherwise , the behaviour is as in previous Python versions - to always pass each message to each handler . With arguments `*handlers`.", "question_id": 5558}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', facility=LOG_USER)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . If `facility` is not specified , LOG_USER is used . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5498}
{"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "CookieJar.clear(domain, path, name)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed . If given three arguments , then the cookie with the specified domain , path and `name` is removed .", "question_id": 4493}
{"snippet": "POP3.quit()", "intent": "Signoff : commit changes , unlock mailbox , drop connection .", "question_id": 7615}
{"snippet": "code.compile_command(source, filename=\"<input>\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1172}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12239}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "offset", "intent": "start index of operation within bytecode sequence", "question_id": 2739}
{"snippet": "unittest.main(verbosity=1)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . You can run tests with more detailed information by passing in the `verbosity` argument :", "question_id": 11552}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8728}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "Panel.replace(win)", "intent": "Change the window associated with the panel to the window `win` .", "question_id": 2151}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdInput`.", "question_id": 9632}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "tixCommand.tix_cget(option)", "intent": "Returns the current value of the configuration `option` given by option .", "question_id": 10582}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`, `subtype`.", "question_id": 3048}
{"snippet": "FTP.retrbinary(cmd, callback, blocksize=8192)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . The optional `blocksize` argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer ( which will also be the largest size of the data blocks passed to callback ) .", "question_id": 3927}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11616}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11430}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', facility=LOG_USER)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . If `facility` is not specified , LOG_USER is used . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5498}
{"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "pdb.run(statement)", "intent": "See the documentation for the functions explained above . With arguments `statement`.", "question_id": 7351}
{"snippet": "os.utime(path, ns, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6960}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "importlib.find_loader(name, path=None)", "intent": "Find the loader for a module , optionally within the specified `path` . If the module is in sys.modules , then sys.modules [ `name` ] .__loader__ is returned ( unless the loader would be None or is not set , in which case ValueError is raised ) .", "question_id": 4796}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "os.spawnl(mode, path)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process .", "question_id": 7053}
{"snippet": "ZipFile.open(name, pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12808}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "time.replace(tzinfo=self.tzinfo)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2339}
{"snippet": "venv.create(env_dir, clear=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `clear`.", "question_id": 11991}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .", "question_id": 9033}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2788}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "bz2.BZ2File(filename, buffering=None, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 892}
{"snippet": "os.utime(path, ns, times=None, dir_fd=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `dir_fd`.", "question_id": 6963}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}
{"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}
{"snippet": "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'bytes'>`, `maintype`, `subtype`.", "question_id": 3053}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "condition.wait_for(predicate)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value .", "question_id": 10392}
{"snippet": "Request.remove_header(header)", "intent": "Remove named `header` from the request instance ( both from regular and unredirected headers ) .", "question_id": 11828}
{"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}
{"snippet": "pdb.runeval(expression)", "intent": "See the documentation for the functions explained above . With arguments `expression`.", "question_id": 7355}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}
{"snippet": "dis.disco(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2724}
{"snippet": "HTTPConnection.request(method, url, body=None, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4432}
{"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}
{"snippet": "Pattern.fullmatch(string, pos)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7977}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "stream_writer.write(object)", "intent": "Writes the `object` \u2019 s contents encoded to the stream .", "question_id": 1281}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "OSError(errno, strerror)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`.", "question_id": 3653}
{"snippet": "Codec.encode(input, errors)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1261}
{"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "multiprocessing.get_context(method=None)", "intent": "Return a context object which has the same attributes as the multiprocessing module . If `method` is None then the default context is returned .", "question_id": 6225}
{"snippet": "element.findall(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12494}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "pool.apply(func, args, kwds)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6332}
{"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "mailcap.findmatch(caps, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5872}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "task.print_stack(file=None)", "intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 638}
{"snippet": "doc_test_finder.find(obj, name, module, globs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2851}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "calendar.prcal(year, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `m`.", "question_id": 1005}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "FTP.login(user='anonymous', passwd='', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3922}
{"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}
{"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}
{"snippet": "shutil.register_archive_format(name, function, extra_args, description)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used . `description` is used by get_archive_formats ( ) which returns the list of archivers .", "question_id": 8359}
{"snippet": "content_manager.set_content(msg, obj, *args, **kw)", "intent": "If the maintype is multipart , raise a TypeError ; otherwise look up a handler function based on the type of `obj` ( see next paragraph ) , call clear_content ( ) on the `msg` , and call the handler function , passing through all arguments . With arguments `*args`, `**kw`.", "question_id": 3033}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "TarFile.addfile(tarinfo)", "intent": "Add the TarInfo object `tarinfo` to the archive .", "question_id": 9957}
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6123}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "shelve.open(filename, flag='c')", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) .", "question_id": 8235}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "IMAP4.deleteacl(mailbox, who)", "intent": "Delete the ACLs ( remove any rights ) set for `who` on `mailbox` .", "question_id": 4698}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "turtle.shapesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10989}
{"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}
{"snippet": "__import__(name, globals=None, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4140}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1708}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}
{"snippet": "IMAP4.lsub(directory='\"\"')", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4713}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "xmlparser.ExternalEntityParserCreate(context)", "intent": "Create a \u201c child \u201d parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser . The `context` parameter should be the string passed to the ExternalEntityRefHandler ( ) handler function , described below .", "question_id": 7739}
{"snippet": "IMAP4.login_cram_md5(user, password)", "intent": "Force use of CRAM-MD5 authentication when identifying the client to protect the `password` . With arguments `user`.", "question_id": 4710}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "curses.qiflush(flag)", "intent": "If `flag` is False , the effect is the same as calling noqiflush ( ) .", "question_id": 1969}
{"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}
{"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}
{"snippet": "difflib.context_diff(a, b, fromfile='', fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2636}
{"snippet": "test_case.assertIsNotNone(expr)", "intent": "Test that `expr` is ( or is not ) None .", "question_id": 11389}
{"snippet": "config_parser.options(section)", "intent": "Return a list of options available in the specified `section` .", "question_id": 1510}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}
{"snippet": "warnings.showwarning(message, category, filename, lineno, file=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12018}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "logging.FileHandler(filename, mode='a', encoding=None)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `encoding` is not None , it is used to open the file with that encoding . With arguments `filename`.", "question_id": 5430}
{"snippet": "ctypes.Structure(*args, **kw)", "intent": "Abstract base class for structures in native byte order . With arguments `*args`, `**kw`.", "question_id": 1889}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "copyreg.constructor(object)", "intent": "Declares `object` to be a valid constructor .", "question_id": 1665}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}
{"snippet": "base64.a85encode(b, foldspaces=False, adobe=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `adobe` controls whether the encoded byte sequence is framed with < ~ and ~ > , which is used by the Adobe implementation .", "question_id": 733}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3999}
{"snippet": "itertools.islice(iterable, start, stop, step)", "intent": "Make an iterator that returns selected elements from the `iterable` . If `start` is non-zero , then elements from the iterable are skipped until start is reached . If `stop` is None , then iteration continues until the iterator is exhausted , if at all ; otherwise , it stops at the specified position . Afterward , elements are returned consecutively unless `step` is set higher than one which results in items being skipped .", "question_id": 5256}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714}
{"snippet": "nntplib.NNTP(host, port=119, usenetrc=False)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6418}
{"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "email.message.EmailMessage(policy=default)", "intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "question_id": 3223}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "dis.show_code(x, file=None)", "intent": "Print detailed code object information for the supplied function , method , source code string or code object to `file` ( or sys.stdout if file is not specified ) . This is a convenient shorthand for print ( code_info ( `x` ) , file=file ) , intended for interactive exploration at the interpreter prompt .", "question_id": 2706}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout .", "question_id": 12659}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "cgi.parse_multipart(fp, pdict, encoding=\"utf-8\", errors=\"replace\")", "intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding . With arguments `errors`.", "question_id": 1050}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "os.sendfile(out, in, offset, count, headers, trailers, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6796}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "io.FileIO(name, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener .", "question_id": 5102}
{"snippet": "os.spawnlpe(mode, file, env)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7056}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346}
{"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}
{"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}
{"snippet": "http.client.HTTPResponse(sock, method=None, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `method`, `url`.", "question_id": 4408}
{"snippet": "socket.CMSG_SPACE(length)", "intent": "Return the buffer size needed for recvmsg ( ) to receive an ancillary data item with associated data of the given `length` , along with any trailing padding .", "question_id": 8666}
{"snippet": "logging.handlers.MemoryHandler(capacity)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) .", "question_id": 5529}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "mmap.flush(offset)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6006}
{"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "os.walk(top, topdown=True, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6980}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}
{"snippet": "loop.create_connection(protocol_factory, ssl=None)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . With arguments `ssl`.", "question_id": 205}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}
{"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249}
{"snippet": "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)", "intent": "The same as RawValue ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes object . With arguments `typecode_or_type`, `*args`.", "question_id": 6274}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}
{"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "msvcrt.open_osfhandle(handle, flags)", "intent": "Create a C runtime file descriptor from the file `handle` handle . The `flags` parameter should be a bitwise OR of os.O_APPEND , os.O_RDONLY , and os.O_TEXT .", "question_id": 6153}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}
{"snippet": "traceback.print_tb(tb)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive .", "question_id": 10733}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}
{"snippet": "formatter.assert_line_data(flag=1)", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .", "question_id": 3837}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}
{"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851}
{"snippet": "gzip.GzipFile(filename=None, mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4291}
{"snippet": "os.kill(pid, sig)", "intent": "Send signal `sig` to the process `pid` .", "question_id": 7037}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "question_id": 65}
{"snippet": "base64.a85encode(b, foldspaces=False, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 732}
{"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}
{"snippet": "loop.sendfile(transport, file, offset=0, count=None)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 260}
{"snippet": "bytearray.endswith(suffix)", "intent": "Return True if the binary data ends with the specified `suffix` , otherwise return False .", "question_id": 9288}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}
{"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`.", "question_id": 4161}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'str'>`.", "question_id": 3044}
{"snippet": "email.message.EmailMessage(policy=default)", "intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "question_id": 3223}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244}
{"snippet": "unittest.main(verbosity=1)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . You can run tests with more detailed information by passing in the `verbosity` argument :", "question_id": 11552}
{"snippet": "uuid.uuid5(namespace, name)", "intent": "Generate a UUID based on the SHA-1 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11963}
{"snippet": "asyncio.set_child_watcher(watcher)", "intent": "Set the current child `watcher` to watcher for the current policy .", "question_id": 383}
{"snippet": "multiprocessing.JoinableQueue(maxsize)", "intent": "JoinableQueue , a Queue subclass , is a queue which additionally has task_done ( ) and join ( ) methods . With arguments `maxsize`.", "question_id": 6215}
{"snippet": "tkinter.Tcl(baseName=None, useTk=0)", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`, `useTk`.", "question_id": 10536}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "audioop.cross(fragment, width)", "intent": "Return the number of zero crossings in the `fragment` passed as an argument . With arguments `width`.", "question_id": 687}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "urllib.parse.urlunsplit(parts)", "intent": "Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . The `parts` argument can be any five-item iterable .", "question_id": 11694}
{"snippet": "os.register_at_fork(before=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "question_id": 7046}
{"snippet": "FTP.retrbinary(cmd, callback, rest=None)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . `rest` means the same thing as in the transfercmd ( ) method .", "question_id": 3928}
{"snippet": "base_http_request_handler.date_time_string(timestamp=None)", "intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "question_id": 4656}
{"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "os.chmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6835}
{"snippet": "prototype(address)", "intent": "Returns a foreign function at the specified `address` which must be an integer .", "question_id": 1801}
{"snippet": "date.replace(year=self.year, day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`, `day`.", "question_id": 2234}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "os.sendfile(out, in, offset, count, headers, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6798}
{"snippet": "xml.etree.ElementInclude.include(elem, loader=None)", "intent": "This function expands XInclude directives . `elem` is the root element . `loader` is an optional resource loader .", "question_id": 12476}
{"snippet": "calendar.yeardayscalendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 924}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "plistlib.dumps(value, sort_keys=True, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`, `skipkeys`.", "question_id": 7577}
{"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "doc_test_finder.find(obj, name, module, globs, extraglobs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2850}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset . With arguments `access`.", "question_id": 5978}
{"snippet": "tkinter.Tk(baseName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `className`.", "question_id": 10525}
{"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}
{"snippet": "ctypes.string_at(address)", "intent": "This function returns the C string starting at memory `address` address as a bytes object .", "question_id": 1834}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365}
{"snippet": "threading.Timer(interval, function, args=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10413}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}
{"snippet": "pickletools.dis(pickle, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7419}
{"snippet": "loop.create_unix_connection(protocol_factory, ssl=None)", "intent": "Create a Unix connection . With arguments `protocol_factory`, `ssl`.", "question_id": 224}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "os.fwalk(top='.', topdown=True)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `topdown`.", "question_id": 6989}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "dis.disassemble(code, lasti=-1, file=None)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2722}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}
{"snippet": "zlib.decompress(data, wbits=MAX_WBITS, bufsize=DEF_BUF_SIZE)", "intent": "Decompresses the bytes in `data` , returning a bytes object containing the uncompressed data . The `wbits` parameter depends on the format of data , and is discussed further below . If `bufsize` is given , it is used as the initial size of the output buffer .", "question_id": 12922}
{"snippet": "decimal.quantize(exp, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2463}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}
{"snippet": "dis.disco(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2724}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "typing.OrderedDict(collections.OrderedDict, MutableMappingKT, VT)", "intent": "A generic version of `collections.OrderedDict` . With arguments `MutableMappingKT`, `VT`.", "question_id": 11302}
{"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}
{"snippet": "socket.CMSG_LEN(length)", "intent": "Return the total `length` , without trailing padding , of an ancillary data item with associated data of the given length .", "question_id": 8665}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "SMTP.connect(port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8513}
{"snippet": "source_file_loader.load_module(name=None)", "intent": "Concrete implementation of importlib.abc.Loader.load_module ( ) where specifying the `name` of the module to load is optional .", "question_id": 4896}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "compileall.compile_dir(dir, rx=None)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `rx` is given , its search method is called on the complete path to each file considered for compilation , and if it returns a true value , the file is skipped .", "question_id": 1413}
{"snippet": "base64.standard_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the standard Base64 alphabet and return the decoded bytes .", "question_id": 715}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `defaults`.", "question_id": 1570}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream')", "intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . With arguments `**_params`.", "question_id": 3327}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "unittest.mock.Mock(**kwargs, spec=None, return_value=DEFAULT)", "intent": "Create a new Mock object . With arguments `**kwargs`, `spec`, `return_value`.", "question_id": 11569}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1705}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "csv.DictReader(f, *args, **kwds, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1696}
{"snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7366}
{"snippet": "bz2.BZ2File(filename)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 886}
{"snippet": "tarfile.open(**kwargs)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9890}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor .", "question_id": 12712}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "time.gmtime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10441}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "tkinter.tix.Tk(baseName=None)", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `baseName`.", "question_id": 10546}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "queue_listener.removeHandler(hdlr)", "intent": "Removes the specified handler `hdlr` from this logger .", "question_id": 5581}
{"snippet": "style.layout(style)", "intent": "Define the widget layout for given `style` .", "question_id": 10681}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "shlex.shlex(infile=None, posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8281}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6799}
{"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key . `reserved` is a reserved integer , and must be zero .", "question_id": 12131}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "TarFile.list(verbose=True, members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9930}
{"snippet": "mailbox.MH(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MH format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5777}
{"snippet": "unittest.TextTestRunner(failfast=False)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `failfast`.", "question_id": 11537}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "doctest.testfile(filename, optionflags=0)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `optionflags` ( default value 0 ) takes the bitwise OR of option flags .", "question_id": 2773}
{"snippet": "ZeroDivisionError", "intent": "Raised when the second argument of a division or modulo operation is zero.", "question_id": 3683}
{"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "Node.toprettyxml(indent=\"\\t\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12418}
{"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425}
{"snippet": "mime_types.guess_all_extensions(type, strict=True)", "intent": "Similar to the guess_all_extensions ( ) function , using the tables stored as part of the object . With arguments `type`, `strict`.", "question_id": 5969}
{"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "heapq.heappushpop(heap, item)", "intent": "Push `item` on the `heap` , then pop and return the smallest item from the heap .", "question_id": 4318}
{"snippet": "Record.SetStream(field, value)", "intent": "Set `field` to the contents of the file named `value` , through MsiRecordSetStream ( ) .", "question_id": 6085}
{"snippet": "dataclasses.field(default=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function .", "question_id": 2168}
{"snippet": "bytes(source)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`.", "question_id": 3987}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "textwrap.TextWrapper(**kwargs)", "intent": "The TextWrapper constructor accepts a number of optional keyword arguments . With arguments `**kwargs`.", "question_id": 10326}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}
{"snippet": "gzip.open(filename, mode='rb', errors=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4280}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "null_translations.set_output_charset(charset)", "intent": "Change the encoding used to return translated messages . With arguments `charset`.", "question_id": 4257}
{"snippet": "functools.partialmethod(func, *args, **keywords)", "intent": "Return a new partialmethod descriptor which behaves like partial except that it is designed to be used as a method definition rather than being directly callable . `func` must be a descriptor or a callable ( objects which are both , like normal functions , are handled as descriptors ) . With arguments `*args`, `**keywords`.", "question_id": 4152}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "difflib.context_diff(a, b, fromfile='', tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2635}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "text_calendar.pryear(theyear, l=1, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `m`.", "question_id": 955}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "ZipFile.setpassword(pwd)", "intent": "Set `pwd` as default password to extract encrypted files .", "question_id": 12827}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}
{"snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream')", "intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . With arguments `**_params`.", "question_id": 3327}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4941}
{"snippet": "platform.win32_ver(release='', version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7500}
{"snippet": "xml.sax.saxutils.unescape(data, entities={})", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12655}
{"snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5331}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "multiprocessing.Process(group=None, name=None)", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `name` is the process name ( see name for more details ) .", "question_id": 6173}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}
{"snippet": "threading.Condition(lock=None)", "intent": "This class implements condition variable objects . If the `lock` argument is given and not None , it must be a Lock or RLock object , and it is used as the underlying lock .", "question_id": 10387}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "lzma.LZMAFile(mode=\"r\")", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5668}
{"snippet": "BaseCookie.output(attrs=None)", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4585}
{"snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1176}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "code.InteractiveConsole(locals=None, filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`, `filename`.", "question_id": 1160}
{"snippet": "json.JSONDecodeError(msg, doc, pos)", "intent": "Subclass of ValueError with the following additional attributes : With arguments `msg`, `doc`, `pos`.", "question_id": 5335}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec_set=None)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "question_id": 11617}
{"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout .", "question_id": 12659}
{"snippet": "Pattern.subn(repl, string)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7989}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948}
{"snippet": "difflib.context_diff(a, b, fromfile='', fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2636}
{"snippet": "element_tree.find(match, namespaces=None)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`, `namespaces`.", "question_id": 12513}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "Document.getElementsByTagName(tagName)", "intent": "Search for all descendants ( direct children , children \u2019 s children , etc . ) With arguments `tagName`.", "question_id": 12352}
{"snippet": "shelve.BsdDbShelf(dict, protocol=None)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8253}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255}
{"snippet": "winreg.OpenKey(key, sub_key, reserved=0)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "question_id": 12139}
{"snippet": "types.resolve_bases(bases)", "intent": "Resolve MRO entries dynamically as specified by PEP 560 . This function looks for items in `bases` that are not instances of type , and returns a tuple where each such object that has an __mro_entries__ method is replaced with an unpacked result of calling this method .", "question_id": 11182}
{"snippet": "message.get_params(unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2986}
{"snippet": "glob.glob(pathname)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification .", "question_id": 4264}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "turtle.backward(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10907}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}
{"snippet": "email.generator.DecodedGenerator(outfp)", "intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "question_id": 3106}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "test.support.bind_unix_socket(sock, addr)", "intent": "Bind a unix socket , raising unittest.SkipTest if PermissionError is raised . With arguments `sock`, `addr`.", "question_id": 10260}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', policy=compat32)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "question_id": 3323}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907}
{"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386}
{"snippet": "queue_listener.removeHandler(hdlr)", "intent": "Removes the specified handler `hdlr` from this logger .", "question_id": 5581}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "BaseTransport.get_extra_info(name, default=None)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get . `default` is the value to return if the information is not available , or if the transport does not support querying it with the given third-party event loop implementation or on the current platform .", "question_id": 399}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "logging.handlers.BaseRotatingHandler(filename, mode)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`.", "question_id": 5450}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386}
{"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "generator.flatten(msg, linesep=None)", "intent": "Print the textual representation of the message object structure rooted at `msg` to the output file specified when the Generator instance was created . If `linesep` is not None , use it as the separator character between all the lines of the flattened message .", "question_id": 3102}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}
{"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}
{"snippet": "turtle.numinput(title, prompt, default=None, minval=None, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11091}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "IMAP4.append(mailbox, flags, date_time, message)", "intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "question_id": 4691}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "msvcrt.open_osfhandle(handle, flags)", "intent": "Create a C runtime file descriptor from the file `handle` handle . The `flags` parameter should be a bitwise OR of os.O_APPEND , os.O_RDONLY , and os.O_TEXT .", "question_id": 6153}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "urllib.parse.parse_qsl(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11679}
{"snippet": "codecs.getencoder(encoding)", "intent": "Look up the codec for the given `encoding` and return its encoder function .", "question_id": 1218}
{"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}
{"snippet": "nntplib.NNTP_SSL(host, timeout)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`.", "question_id": 6419}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "_c_data.from_buffer(source)", "intent": "This method returns a ctypes instance that shares the buffer of the `source` object .", "question_id": 1844}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "platform.win32_ver(release='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7496}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}
{"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}
{"snippet": "winreg.OpenKey(key, sub_key, reserved=0)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "question_id": 12139}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}
{"snippet": "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . If `respect_handler_level` is True , a handler \u2019 s level is respected ( compared with the level for the message ) when deciding whether to pass messages to that handler ; otherwise , the behaviour is as in previous Python versions - to always pass each message to each handler . With arguments `*handlers`.", "question_id": 5558}
{"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560}
{"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}
{"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944}
{"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "lzma.compress(data, check=-1, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5712}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, loader_state=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `loader_state`.", "question_id": 4916}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "window.insstr(str, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`, `attr`.", "question_id": 2081}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "pool.apply_async(func, args, kwds, callback)", "intent": "A variant of the apply ( ) method which returns a result object . If `callback` is specified then it should be a callable which accepts a single argument . With arguments `func`, `args`, `kwds`.", "question_id": 6336}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "ctypes.WinError(code=None, descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `code` is not specified , GetLastError is called to determine the error code . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1839}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "pty.spawn(argv, master_read, stdin_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7700}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}
{"snippet": "test_case.skipTest(reason)", "intent": "Calling this during a test method or setUp ( ) skips the current test . With arguments `reason`.", "question_id": 11371}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "pprint.PrettyPrinter(depth=None)", "intent": "Construct a PrettyPrinter instance . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7626}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865}
{"snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\", symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1178}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "shlex.shlex(instream=None, posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8279}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}
{"snippet": "scheduler.run(blocking=True)", "intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "question_id": 8129}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "asyncio.open_connection(port=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `port`.", "question_id": 465}
{"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942}
{"snippet": "mime_types.guess_extension(type, strict=True)", "intent": "Similar to the guess_extension ( ) function , using the tables stored as part of the object . With arguments `type`, `strict`.", "question_id": 5965}
{"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}
{"snippet": "os.mknod(path, mode=0o600, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` . `mode` specifies both the permissions to use and the type of node to be created , being combined ( bitwise OR ) with one of stat.S_IFREG , stat.S_IFCHR , stat.S_IFBLK , and stat.S_IFIFO ( those constants are available in stat ) .", "question_id": 6878}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "nntplib.NNTP(host, timeout, port=119, usenetrc=False)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6408}
{"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "compileall.compile_dir(dir, optimize=-1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "question_id": 1416}
{"snippet": "profile.Profile(timer=None, builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `builtins`.", "question_id": 7676}
{"snippet": "nntplib.NNTP_SSL(host, timeout, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `password`.", "question_id": 6422}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "Template.append(cmd, kind)", "intent": "Append a new action at the end . The `cmd` variable must be a valid bourne shell command . The `kind` variable consists of two letters .", "question_id": 7431}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}
{"snippet": "socket.ioctl(control, option)", "intent": "The ioctl ( ) method is a limited interface to the WSAIoctl system interface . Currently only the following `control` codes are supported : SIO_RCVALL , SIO_KEEPALIVE_VALS , and SIO_LOOPBACK_FAST_PATH . With arguments `option`.", "question_id": 8688}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "TarFile.add(name, arcname=None, recursive=True)", "intent": "Add the file `name` to the archive . If given , `arcname` specifies an alternative name for the file in the archive . This can be avoided by setting `recursive` to False .", "question_id": 9953}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823}
{"snippet": "datetime.datetime(year, month, day, tzinfo=None)", "intent": "The `year` , `month` and `day` arguments are required . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2252}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . ( Note _exit ( ) exits the process immediately , which means it doesn \u2019 t do any cleanup like flushing `file` buffers . ) If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3729}
{"snippet": "bytearray.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9306}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) .", "question_id": 5467}
{"snippet": "calendar.prcal(year, w=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `c`.", "question_id": 1007}
{"snippet": "test.support.set_memlimit(limit)", "intent": "Set the values for max_memuse and real_max_memuse for big memory tests . With arguments `limit`.", "question_id": 10167}
{"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}
{"snippet": "CookiePolicy.domain_return_ok(domain, request)", "intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "question_id": 4534}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}
{"snippet": "shutil.copystat(src, dst, follow_symlinks=True)", "intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` . If `follow_symlinks` is false , and src and dst both refer to symbolic links , copystat ( ) will operate on the symbolic links themselves rather than the files the symbolic links refer to\u2014reading the information from the src symbolic link , and writing the information to the dst symbolic link .", "question_id": 8317}
{"snippet": "marshal.dumps(value, version)", "intent": "Return the bytes object that would be written to a file by dump ( `value` , file ) . The `version` argument indicates the data format that dumps should use ( see below ) .", "question_id": 5881}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4940}
{"snippet": "fileinput.input(backup='')", "intent": "Create an instance of the FileInput class . With arguments `backup`.", "question_id": 3785}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 832}
{"snippet": "fileinput.FileInput(mode='r')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With `mode` you can specify which file mode will be passed to open ( ) .", "question_id": 3805}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "logging.handlers.WatchedFileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the WatchedFileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "question_id": 5445}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "codecs.open(filename, mode='r')", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1226}
{"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}
{"snippet": "IMAP4.lsub(directory='\"\"')", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4713}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}
{"snippet": "base64.a85encode(b, foldspaces=False, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 732}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}
{"snippet": "test_case.assertNotEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are not equal . With arguments `msg`.", "question_id": 11378}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}
{"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "doctest.set_unittest_reportflags(flags)", "intent": "Set the doctest reporting `flags` to use .", "question_id": 2816}
{"snippet": "heapq.nsmallest(n, iterable, key=None)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4328}
{"snippet": "loop.sendfile(transport, file)", "intent": "Send a `file` over a `transport` .", "question_id": 256}
{"snippet": "dbm.whichdb(filename)", "intent": "This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu , dbm.ndbm or dbm.dumb \u2014 should be used to open a given file . With arguments `filename`.", "question_id": 2365}
{"snippet": "doctest.Example(source, want, exc_msg=None, lineno=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`, `lineno`.", "question_id": 2829}
{"snippet": "os.open(path, flags)", "intent": "Open the file `path` and set various `flags` according to flags and possibly its `mode` according to mode .", "question_id": 6738}
{"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "calendar.month(theyear, themonth, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `l`.", "question_id": 999}
{"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "object.__setstate__(state)", "intent": "Upon unpickling , if the class defines __setstate__ ( ) , it is called with the unpickled `state` .", "question_id": 7412}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "msilib.Feature(db, id, title, desc, display, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6118}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "stats.add(*filenames)", "intent": "This method of the Stats class accumulates additional profiling information into the current profiling object . With arguments `*filenames`.", "question_id": 7691}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "joinable_queue.poll(timeout)", "intent": "Return whether there is any data available to be read . If `timeout` is not specified then it will return immediately .", "question_id": 6234}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "smtplib.SMTP_SSL(port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8480}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12467}
{"snippet": "connection.create_collation(name, callable)", "intent": "Creates a collation with the specified `name` and `callable` .", "question_id": 8818}
{"snippet": "unpickler.find_class(module, name)", "intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "question_id": 7408}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "urllib.parse.parse_qsl(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11679}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11619}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "webbrowser.open(url, autoraise=True)", "intent": "Display `url` using the default browser . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12104}
{"snippet": "turtle.screensize(canvwidth=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `bg`.", "question_id": 11052}
{"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}
{"snippet": "bdb.Breakpoint(self, file, line, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 756}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "window.insstr(str, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . With arguments `str`, `attr`.", "question_id": 2081}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}
{"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3}
{"snippet": "socket.setsockopt(level, optname, None, optlen: int)", "intent": "Set the value of the given socket option ( see the Unix manual page setsockopt ( 2 ) ) . The value can be an integer , `None` or a bytes-like object representing a buffer . With arguments `level`, `optname`, `optlen: int`.", "question_id": 8739}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "json.dump(obj, fp, **kw, separators=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If specified , `separators` should be an ( item_separator , key_separator ) tuple . With arguments `**kw`.", "question_id": 5277}
{"snippet": "io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given byte `offset` . offset is interpreted relative to the position indicated by `whence` .", "question_id": 5075}
{"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "plistlib.loads(data, use_builtin_types=True, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`, `dict_type`.", "question_id": 7561}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "timeit.Timer(globals=None)", "intent": "Class for timing execution speed of small code snippets . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "question_id": 10501}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 5897}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}
{"snippet": "str.index(sub, start, end)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`, `start`, `end`.", "question_id": 9199}
{"snippet": "bdb.run(cmd, locals=None)", "intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "question_id": 809}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653}
{"snippet": "tzinfo.dst(dt)", "intent": "Return the daylight saving time ( DST ) adjustment , as a timedelta object or None if DST information isn \u2019 t known . tz.utcoffset ( `dt` ) - tz.dst ( dt )", "question_id": 2354}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "ctypes.CFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1792}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "test_case.assertIn(first, second, msg=None)", "intent": "Test that `first` is ( or is not ) in `second` . With arguments `msg`.", "question_id": 11392}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}
{"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}
{"snippet": "IMAP4.lsub(directory='\"\"')", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4713}
{"snippet": "config_parser.write(fileobject)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . With arguments `fileobject`.", "question_id": 1561}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`, `stdout`, `stderr`.", "question_id": 328}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "connection.backup(target)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance .", "question_id": 8829}
{"snippet": "loop.getnameinfo(sockaddr)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.", "question_id": 299}
{"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}
{"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "importlib.util.find_spec(name, package=None)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4929}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976}
{"snippet": "InteractiveInterpreter.runsource(source, symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1177}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "loop.sendfile(transport, file)", "intent": "Send a `file` over a `transport` .", "question_id": 256}
{"snippet": "turtle.tracer(n=None, delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11061}
{"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}
{"snippet": "xml.etree.ElementTree.register_namespace(prefix, uri)", "intent": "Registers a namespace `prefix` . `uri` is a namespace uri .", "question_id": 12450}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "profile.Profile(timer=None, builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `builtins`.", "question_id": 7676}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `func`.", "question_id": 5586}
{"snippet": "xml.etree.ElementTree.XML(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12470}
{"snippet": "urllib.parse.urlsplit(urlstring, scheme='')", "intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`, `scheme`.", "question_id": 11691}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "frozenset()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9434}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1699}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}
{"snippet": "struct.pack_into(format, buffer, offset, v1, v2)", "intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "question_id": 9552}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11128}
{"snippet": "lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10378}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "IMAP4.lsub(directory='\"\"')", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4713}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "joinable_queue.poll(timeout)", "intent": "Return whether there is any data available to be read . If `timeout` is not specified then it will return immediately .", "question_id": 6234}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 966}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "quopri.encodestring(s, quotetabs=False, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`, `header`.", "question_id": 7882}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270}
{"snippet": "ctypes.OleDLL(name, mode=DEFAULT_MODE)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `mode`.", "question_id": 1751}
{"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715}
{"snippet": "os.walk(top, onerror=None)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "question_id": 6977}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}
{"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11677}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11429}
{"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191}
{"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}
{"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}
{"snippet": "quopri.decodestring(s, header=False)", "intent": "Like decode ( ) , except that it accepts a source bytes and returns the corresponding decoded bytes . With arguments `s`, `header`.", "question_id": 7878}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "loop.set_default_executor(executor)", "intent": "Set `executor` as the default executor used by run_in_executor ( ) .", "question_id": 306}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "lzma.open(filename, format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5658}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "traceback_exception.format(chain=True)", "intent": "Format the exception . If `chain` is not True , __cause__ and __context__ will not be formatted .", "question_id": 10821}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "time.replace(tzinfo=self.tzinfo)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2339}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5331}
{"snippet": "logging.setLogRecordFactory(factory)", "intent": "Set a callable which is used to create a LogRecord . The `factory` has the following signature :", "question_id": 5652}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}
{"snippet": "subprocess.check_output(args, errors=None)", "intent": "Run command with arguments and return its output . This behaviour may be overridden by setting text , encoding , `errors` , or `universal_newlines` to True as described in Frequently Used Arguments and run ( ) . With arguments `args`.", "question_id": 9685}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}
{"snippet": "FTP.retrbinary(cmd, callback, blocksize=8192)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . The optional `blocksize` argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer ( which will also be the largest size of the data blocks passed to callback ) .", "question_id": 3927}
{"snippet": "SSLContext.set_ciphers(ciphers)", "intent": "Set the available `ciphers` for sockets created with this context .", "question_id": 9015}
{"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}
{"snippet": "doctest.run_docstring_examples(f, globs, verbose=False, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2791}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "subprocess.call(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9664}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040}
{"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "auto.with_traceback(tb)", "intent": "This method sets `tb` as the new traceback for the exception and returns the exception object .", "question_id": 3630}
{"snippet": "ctypes.LittleEndianStructure(*args, **kw)", "intent": "Abstract base class for structures in little endian byte order . With arguments `*args`, `**kw`.", "question_id": 1888}
{"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "tkinter.Tk(baseName=None)", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`.", "question_id": 10519}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "py_compile.compile(file, optimize=-1)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `optimize` controls the optimization level and is passed to the built-in compile ( ) function .", "question_id": 7825}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}
{"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "argparse.FileType(errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `errors`.", "question_id": 89}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "os.sendfile(out, in, offset, count, headers, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6798}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, fflags=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `fflags`.", "question_id": 8163}
{"snippet": "fraction.__floor__()", "intent": "Returns the greatest int < = self .", "question_id": 3873}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "window.insnstr(str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`, `attr`.", "question_id": 2077}
{"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}
{"snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12914}
{"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560}
{"snippet": "os.walk(top, onerror=None)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "question_id": 6977}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4941}
{"snippet": "HTTPConnection.request(method, url, body=None, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4432}
{"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "asyncio.wait_for(aw, timeout)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` .", "question_id": 605}
{"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "timeit.repeat(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10492}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "doctest.debug(module, name, pm=False)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above . Optional argument `pm` controls whether post-mortem debugging is used .", "question_id": 2889}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}
{"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "quopri.encodestring(s, quotetabs=False, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`, `header`.", "question_id": 7882}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}
{"snippet": "sunau.openfp(file, mode)", "intent": "A synonym for open ( ) , maintained for backwards compatibility . With arguments `file`, `mode`.", "question_id": 9692}
{"snippet": "pkgutil.walk_packages(path=None, prefix='', onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7456}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "mmap.flush(offset, size)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6005}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "bytearray.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9334}
{"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "lock.acquire(timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10377}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}
{"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "KeyboardInterrupt", "intent": "Raised when the user hits the interrupt key (normally Control-C or Delete).", "question_id": 3644}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', policy=compat32)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "question_id": 3323}
{"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "POP3.pass_(password)", "intent": "Send `password` , response includes message count and mailbox size .", "question_id": 7605}
{"snippet": "email_message.del_param(param, requote=True)", "intent": "Remove the given parameter completely from the Content-Type `header` . Use of the `requote` parameter with EmailMessage objects is deprecated . With arguments `param`.", "question_id": 3272}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "curses.ungetch(ch)", "intent": "Push `ch` so the next getch ( ) will return it .", "question_id": 1993}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}
{"snippet": "fileinput.FileInput(files=None, bufsize=0)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`, `bufsize`.", "question_id": 3809}
{"snippet": "mmap.mmap(fileno, length, offset)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset .", "question_id": 5984}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "json.dump(obj, fp, **kw, separators=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If specified , `separators` should be an ( item_separator , key_separator ) tuple . With arguments `**kw`.", "question_id": 5277}
{"snippet": "str(object='')", "intent": "Return a str version of `object` .", "question_id": 4114}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "lzma.compress(data, check=-1, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5712}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "sysconfig.get_path(name, scheme)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme .", "question_id": 9864}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\")", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "question_id": 12417}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "os.minor(device)", "intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6883}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327}
{"snippet": "bz2.BZ2File(filename, buffering=None)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored .", "question_id": 888}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}
{"snippet": "datetime.datetime(year, month, day, tzinfo=None)", "intent": "The `year` , `month` and `day` arguments are required . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2252}
{"snippet": "random.randrange(stop)", "intent": "Return a randomly selected element from range ( start , `stop` , step ) .", "question_id": 7890}
{"snippet": "ContentHandler.processingInstruction(target, data)", "intent": "Receive notification of a processing instruction . With arguments `target`, `data`.", "question_id": 12581}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11152}
{"snippet": "doctest.testmod(verbose=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2780}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "winreg.OpenKey(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12140}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "Telnet.expect(list, timeout=None)", "intent": "Read until one from a `list` of a regular expressions matches . The optional second argument is a `timeout` , in seconds ; the default is to block indefinitely .", "question_id": 10031}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "timeit.repeat(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10487}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}
{"snippet": "datetime.replace(tzinfo=self.tzinfo)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2292}
{"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520}
{"snippet": "smtplib.SMTP(timeout, host='', port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8453}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}
{"snippet": "mailbox.MMDF(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MMDF format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5804}
{"snippet": "patch.object(target, attribute, **kwargs)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . With arguments `**kwargs`.", "question_id": 11618}
{"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "binascii.a2b_qp(data, header=False)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data . If the optional argument `header` is present and true , underscores will be decoded as spaces .", "question_id": 827}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "question_id": 11728}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}
{"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}
{"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "turtle.addshape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11101}
{"snippet": "OSError(errno, strerror, filename, winerror)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`, `winerror`.", "question_id": 3651}
{"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}
{"snippet": "signal.setitimer(which, seconds)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8391}
{"snippet": "socket.gethostbyname_ex(hostname)", "intent": "Translate a host name to IPv4 address format , extended interface . Return a triple ( `hostname` , aliaslist , ipaddrlist ) where hostname is the primary host name responding to the given ip_address , aliaslist is a ( possibly empty ) list of alternative host names for the same address , and ipaddrlist is a list of IPv4 addresses for the same interface on the same host ( often but not always a single address ) .", "question_id": 8648}
{"snippet": "doctest.DocFileSuite(*paths, parser=DocTestParser())", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `parser` specifies a DocTestParser ( or subclass ) that should be used to extract tests from the files . With arguments `*paths`.", "question_id": 2803}
{"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}
{"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "os.access(path, mode)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions .", "question_id": 6820}
{"snippet": "base64.a85decode(b, foldspaces=False, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 740}
{"snippet": "TarFile.add(name, arcname=None, filter=None)", "intent": "Add the file `name` to the archive . If given , `arcname` specifies an alternative name for the file in the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9954}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "message.__len__()", "intent": "Return the total number of headers , including duplicates .", "question_id": 2964}
{"snippet": "ipaddress.IPv4Network(address, strict=True)", "intent": "Construct an IPv4 network definition . `address` can be one of the following : If `strict` is True and host bits are set in the supplied address , then ValueError is raised .", "question_id": 5193}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6030}
{"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}
{"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}
{"snippet": "bz2.open(filename, newline=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 881}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "shelve.open(filename, flag='c', writeback=False)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "question_id": 8239}
{"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `requestHandler` parameter should be a factory for request handler instances ; it defaults to SimpleXMLRPCRequestHandler .", "question_id": 12713}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)", "intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power . `dklen` is the length of the derived key .", "question_id": 4311}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "XMLReader.setContentHandler(handler)", "intent": "Set the current ContentHandler . With arguments `handler`.", "question_id": 12615}
{"snippet": "shutil.rmtree(path, onerror=None)", "intent": "Delete an entire directory tree ; `path` must point to a directory ( but not a symbolic link to a directory ) . If `ignore_errors` is true , errors resulting from failed removals will be ignored ; if false or omitted , such errors are handled by calling a handler specified by `onerror` or , if that is omitted , they raise an exception .", "question_id": 8335}
{"snippet": "stream_writer.write(object)", "intent": "Writes the `object` \u2019 s contents encoded to the stream .", "question_id": 1281}
{"snippet": "code.interact(banner=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided .", "question_id": 1162}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820}
{"snippet": "config_parser.items(raw=False)", "intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1553}
{"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "datetime.time(second=0)", "intent": "All arguments are optional . With arguments `second`.", "question_id": 2317}
{"snippet": "task.get_stack(limit=None)", "intent": "Return the list of stack frames for this Task . The optional `limit` argument sets the maximum number of frames to return ; by default all available frames are returned .", "question_id": 635}
{"snippet": "FTP.set_debuglevel(level)", "intent": "Set the instance \u2019 s debugging `level` .", "question_id": 3903}
{"snippet": "platform.mac_ver('', ''), versioninfo=('', machine='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7515}
{"snippet": "importlib.abc.FileLoader(fullname, path)", "intent": "An abstract base class which inherits from ResourceLoader and ExecutionLoader , providing concrete implementations of ResourceLoader.get_data ( ) and ExecutionLoader.get_filename ( ) . The `fullname` argument is a fully resolved name of the module the loader is to handle . The `path` argument is the path to the file for the module .", "question_id": 4835}
{"snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`, `handle`.", "question_id": 1765}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "message.set_param(param, value, header='Content-Type', charset=None)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If optional `charset` is specified , the parameter will be encoded according to RFC 2231 . With arguments `param`.", "question_id": 3006}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "source_file_loader.set_data(path, data)", "intent": "Concrete implementation of importlib.abc.SourceLoader.set_data ( ) . With arguments `path`, `data`.", "question_id": 4894}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "robot_file_parser.request_rate(useragent)", "intent": "Returns the contents of the Request-rate parameter from robots.txt as a named tuple RequestRate ( requests , seconds ) . If there is no such parameter or it doesn \u2019 t apply to the `useragent` specified or the robots.txt entry for this parameter has invalid syntax , return None .", "question_id": 11916}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "print(*objects, sep=' ', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4081}
{"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "pprint.pformat(object, indent=1, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7639}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "plistlib.load(fp, fmt=None)", "intent": "Read a plist file . `fp` should be a readable and binary file object . The `fmt` is the format of the file and the following values are valid :", "question_id": 7548}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502}
{"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}
{"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913}
{"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "webbrowser.register(name, constructor, instance=None, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12113}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5875}
{"snippet": "connection.backup(target)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance .", "question_id": 8829}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474}
{"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}
{"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}
{"snippet": "email.message_from_bytes(s, _class=None)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3397}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}
{"snippet": "stat.S_ISCHR(mode)", "intent": "Return non-zero if the `mode` is from a character special device file .", "question_id": 9062}
{"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}
{"snippet": "unittest.TextTestRunner(stream=None, descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11542}
{"snippet": "tixCommand.tix_addbitmapdir(directory)", "intent": "Tix maintains a list of directories under which the tix_getimage ( ) and tix_getbitmap ( ) methods will search for image files . The standard bitmap `directory` is $ TIX_LIBRARY/bitmaps .", "question_id": 10584}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "question_id": 9010}
{"snippet": "difflib.unified_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2649}
{"snippet": "shutil.register_archive_format(name, function, extra_args)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives . If given , `extra_args` is a sequence of ( name , value ) pairs that will be used as extra keywords arguments when the archiver callable is used .", "question_id": 8360}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "multiprocessing.connection.Client(address, family)", "intent": "Attempt to set up a connection to the listener which is using `address` address , returning a Connection . The type of the connection is determined by `family` argument , but this can generally be omitted since it can usually be inferred from the format of address .", "question_id": 6369}
{"snippet": "nntplib.NNTP(host, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6416}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "pickle.loads(bytes_object, fix_imports=True, encoding=\"ASCII\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7383}
{"snippet": "email.headerregistry.Address(display_name='', username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec . With arguments `display_name`.", "question_id": 3191}
{"snippet": "Element.setAttributeNode(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12367}
{"snippet": "tkinter.tix.Tk(className='Tix')", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `className`.", "question_id": 10547}
{"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12553}
{"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}
{"snippet": "prototype(address)", "intent": "Returns a foreign function at the specified `address` which must be an integer .", "question_id": 1801}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12240}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "mime_types.read_windows_registry(strict=True)", "intent": "Load MIME type information from the Windows registry . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "question_id": 5975}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "turtle.numinput(title, prompt, default=None, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11089}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "platform.java_ver('', ''), '', ''), release='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7491}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402}
{"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}
{"snippet": "logging.handlers.HTTPHandler(host, url)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . With arguments `url`.", "question_id": 5541}
{"snippet": "email_policy.header_source_parse(sourcelines)", "intent": "The name is parsed as everything up to the \u2018 : \u2019 and returned unmodified . With arguments `sourcelines`.", "question_id": 3434}
{"snippet": "logging.addLevelName(level, levelName)", "intent": "Associates `level` level with text `levelName` in an internal dictionary , which is used to map numeric levels to a textual representation , for example when a Formatter formats a message .", "question_id": 5646}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}
{"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}
{"snippet": "time.sleep(secs)", "intent": "Suspend execution of the calling thread for the given number of seconds . With arguments `secs`.", "question_id": 10452}
{"snippet": "header.append(s, charset=None)", "intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance .", "question_id": 3127}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 968}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "traceback.print_exc(chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10748}
{"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "BaseTransport.set_protocol(protocol)", "intent": "Set a new `protocol` .", "question_id": 400}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "concurrent.futures.ProcessPoolExecutor(initializer=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `initializer` is an optional callable that is called at the start of each worker process ; `initargs` is a tuple of arguments passed to the initializer .", "question_id": 1460}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866}
{"snippet": "locale.getlocale(category=LC_CTYPE)", "intent": "Returns the current setting for the given locale `category` as sequence containing language code , encoding .", "question_id": 5376}
{"snippet": "chunk.Chunk(file, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1077}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "turtle.backward(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10907}
{"snippet": "subprocess.run(args, check=False)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9576}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}
{"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}
{"snippet": "bytes.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9305}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "Request.add_unredirected_header(key, header)", "intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "question_id": 11826}
{"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}
{"snippet": "test_case.assertNotIsInstance(obj, cls, msg=None)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) . With arguments `msg`.", "question_id": 11398}
{"snippet": "os.pathconf(path, name)", "intent": "Return system configuration information relevant to a named file . `name` specifies the configuration value to retrieve ; it may be a string which is the name of a defined system value ; these names are specified in a number of standards ( POSIX.1 , Unix 95 , Unix 98 , and others ) . With arguments `path`.", "question_id": 6885}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "fileinput.FileInput(inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together .", "question_id": 3802}
{"snippet": "curses.newwin(nlines, ncols)", "intent": "Return a new window , whose left-upper corner is at ( begin_y , begin_x ) , and whose height/width is nlines/ncols . With arguments `nlines`, `ncols`.", "question_id": 1958}
{"snippet": "logging.Formatter(fmt=None)", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used .", "question_id": 5611}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}
{"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}
{"snippet": "TarInfo.frombuf(buf, encoding, errors)", "intent": "Create and return a TarInfo object from string buffer `buf` . With arguments `encoding`, `errors`.", "question_id": 9971}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "POP3.getwelcome()", "intent": "Returns the greeting string sent by the POP3 server .", "question_id": 7602}
{"snippet": "doctest.set_unittest_reportflags(flags)", "intent": "Set the doctest reporting `flags` to use .", "question_id": 2816}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}
{"snippet": "ArgumentParser.add_argument(name or flags..., action)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.", "question_id": 67}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}
{"snippet": "config_parser.optionxform(option)", "intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "question_id": 1565}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "bytes(source, encoding, errors)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) . With arguments `errors`.", "question_id": 9257}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "unittest.TextTestRunner(stream=None, descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11542}
{"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 966}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "quopri.encodestring(s, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . With arguments `s`, `header`.", "question_id": 7881}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "doctest.DocTestSuite(tearDown=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2812}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590}
{"snippet": "importlib.util.find_spec(name, package=None)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4929}
{"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "turtle.numinput(title, prompt, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11087}
{"snippet": "unittest.main(defaultTest=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11547}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "loop.call_later(delay, callback, *args)", "intent": "Schedule `callback` to be called after the given `delay` number of seconds ( can be either an int or a float ) . With arguments `*args`.", "question_id": 193}
{"snippet": "glob.escape(pathname)", "intent": "Escape all special characters ( ' ? With arguments `pathname`.", "question_id": 4268}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "os.fchown(fd, uid, gid)", "intent": "Change the owner and group id of the file given by `fd` to the numeric `uid` and `gid` .", "question_id": 6720}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "input(prompt)", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4034}
{"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}
{"snippet": "HTTPConnection.request(method, url, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4433}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "threading.Thread(group=None, name=None)", "intent": "This constructor should always be called with keyword arguments . `group` should be None ; reserved for future extension when a ThreadGroup class is implemented . `name` is the thread name .", "question_id": 10360}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "os.setreuid(ruid, euid)", "intent": "Set the current process \u2019 s real and effective user ids . With arguments `ruid`, `euid`.", "question_id": 6703}
{"snippet": "urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11704}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "cgitb.enable(logdir=None, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1067}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}
{"snippet": "base64.decodestring(s)", "intent": "Deprecated alias of decodebytes ( ) . With arguments `s`.", "question_id": 749}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "os.fwalk(top='.')", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`.", "question_id": 6984}
{"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}
{"snippet": "_c_data.in_dll(library, name)", "intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "question_id": 1849}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\", method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12535}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "base64.standard_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the standard Base64 alphabet and return the decoded bytes .", "question_id": 715}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9174}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10233}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}
{"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}
{"snippet": "time.replace(hour=self.hour)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2335}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "gzip.open(filename, mode='rb', errors=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4280}
{"snippet": "pprint.pprint(object, width=80)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7646}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "loop.start_tls(transport, protocol, sslcontext, server_side=False)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`, `server_side`.", "question_id": 265}
{"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}
{"snippet": "quit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1609}
{"snippet": "dis.dis(x=None, depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2712}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "config_parser.options(section)", "intent": "Return a list of options available in the specified `section` .", "question_id": 1510}
{"snippet": "xmlrpc.client.ServerProxy(uri, transport=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional second argument is a `transport` factory instance ; by default it is an internal SafeTransport instance for https : URLs and an internal HTTP Transport instance otherwise . With arguments `uri`.", "question_id": 12670}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "concurrent.futures.as_completed(fs, timeout=None)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) . The returned iterator raises a concurrent.futures.TimeoutError if __next__ ( ) is called and the result isn \u2019 t available after `timeout` seconds from the original call to as_completed ( ) .", "question_id": 1485}
{"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}
{"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111}
{"snippet": "calendar.prmonth(theyear, themonth, w=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 994}
{"snippet": "dataclasses.astuple(instance)", "intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "question_id": 2181}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}
{"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11118}
{"snippet": "urllib.parse.parse_qsl(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11683}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "bz2.BZ2Compressor()", "intent": "Create a new compressor object .", "question_id": 896}
{"snippet": "wsgiref.util.FileWrapper(filelike)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12217}
{"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}
{"snippet": "doctest.testmod(verbose=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2780}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "weakref.WeakMethod(method)", "intent": "A custom ref subclass which simulates a weak reference to a bound `method` ( i.e. , a method defined on a class and looked up on an instance ) .", "question_id": 12089}
{"snippet": "zlib.compressobj(strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `strategy` is used to tune the compression algorithm .", "question_id": 12912}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}
{"snippet": "bisect.insort_right(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 868}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}
{"snippet": "asyncio.open_unix_connection(sock=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `sock`.", "question_id": 488}
{"snippet": "fileinput.input(bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `bufsize`.", "question_id": 3786}
{"snippet": "base64.b32decode(s, casefold=False, map01=None)", "intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input . The optional argument `map01` when not None , specifies which letter the digit 1 should be mapped to ( when map01 is not None , the digit 0 is always mapped to the letter O ) .", "question_id": 722}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}
{"snippet": "asyncio.wait(aws, loop=None, timeout=None)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 . `timeout` ( a float or int ) , if specified , can be used to control the maximum number of seconds to wait before returning .", "question_id": 611}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "base64.b85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using base85 ( as used in e.g . If `pad` is true , the input is padded with b'\\0 ' so its length is a multiple of 4 bytes before encoding .", "question_id": 745}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "OSError(errno, strerror, filename, winerror)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`, `winerror`.", "question_id": 3651}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 832}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`, `subtype`.", "question_id": 3047}
{"snippet": "TarFile.extractall(path=\".\", members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9936}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "locale.getlocale(category=LC_CTYPE)", "intent": "Returns the current setting for the given locale `category` as sequence containing language code , encoding .", "question_id": 5376}
{"snippet": "doctest.DebugRunner(optionflags=0)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `optionflags`.", "question_id": 2897}
{"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}
{"snippet": "re.error(msg, pattern=None, pos=None)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . It is never an error if a string contains no match for a `pattern` . With arguments `msg`, `pos`.", "question_id": 7964}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "codecs.encode(obj)", "intent": "Encodes `obj` using the codec registered for `encoding` .", "question_id": 1192}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "loop.call_at(when, callback, *args)", "intent": "Schedule `callback` to be called at the given absolute timestamp `when` ( an int or a float ) , using the same time reference as loop.time ( ) . With arguments `*args`.", "question_id": 195}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `comment_prefixes`.", "question_id": 1574}
{"snippet": "message.__getitem__(name)", "intent": "Return the value of the named header field . `name` should not include the colon field separator .", "question_id": 2966}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "Queue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7855}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277}
{"snippet": "HTTPConnection.set_debuglevel(level)", "intent": "Set the debugging `level` .", "question_id": 4436}
{"snippet": "warnings.warn_explicit(message, category, filename, lineno)", "intent": "This is a low-level interface to the functionality of warn ( ) , passing in explicitly the `message` , `category` , `filename` and line number , and optionally the `module` name and the `registry` ( which should be the __warningregistry__ dictionary of the module ) . With arguments `lineno`.", "question_id": 12007}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "glob.iglob(pathname, recursive=False)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`, `recursive`.", "question_id": 4267}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "tkinter.Tcl(className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `className`.", "question_id": 10530}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 966}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "difflib.context_diff(a, b, fromfile='', tofiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2637}
{"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}
{"snippet": "warnings.simplefilter(action, category=Warning, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `append`.", "question_id": 12038}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "dataclasses.field(init=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `init`.", "question_id": 2172}
{"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "Request.remove_header(header)", "intent": "Remove named `header` from the request instance ( both from regular and unredirected headers ) .", "question_id": 11828}
{"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "random.choices(population, weights=None, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7902}
{"snippet": "math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 5897}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "See the documentation for the functions explained above . With arguments `function`, `*args`, `**kwds`.", "question_id": 7359}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "datetime.datetime(year, month, day, tzinfo=None)", "intent": "The `year` , `month` and `day` arguments are required . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2252}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "mmap.flush(offset)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6006}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9039}
{"snippet": "fileinput.input(backup='')", "intent": "Create an instance of the FileInput class . With arguments `backup`.", "question_id": 3785}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}
{"snippet": "random.choices(population, weights=None, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7902}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11139}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8352}
{"snippet": "ur_lopener.retrieve(url, filename=None)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11897}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `comment_prefixes`.", "question_id": 1574}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5419}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "widget.heading(column, **kw)", "intent": "Query or modify the heading options for the specified `column` . With arguments `**kw`.", "question_id": 10632}
{"snippet": "datetime.time(microsecond=0)", "intent": "All arguments are optional . With arguments `microsecond`.", "question_id": 2318}
{"snippet": "plistlib.dumps(value, sort_keys=True, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`, `skipkeys`.", "question_id": 7577}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}
{"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}
{"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}
{"snippet": "str.split(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9244}
{"snippet": "bytearray.rsplit(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9358}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "multiprocessing.Process(group=None, name=None)", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `name` is the process name ( see name for more details ) .", "question_id": 6173}
{"snippet": "tarfile.TarFile(encoding=ENCODING)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `encoding` and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled .", "question_id": 9921}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12240}
{"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "pickle.dump(obj, file, protocol=None)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) .", "question_id": 7364}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "mailbox.Maildir(dirname, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5757}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`.", "question_id": 323}
{"snippet": "shutil.copyfileobj(fsrc, fdst)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` .", "question_id": 8310}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}
{"snippet": "platform.libc_ver(version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7540}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "r_lock.acquire(blocking=True)", "intent": "Acquire a lock , `blocking` or non-blocking .", "question_id": 10382}
{"snippet": "locale.format(format, val, grouping=False, monetary=False)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`, `grouping`, `monetary`.", "question_id": 5391}
{"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}
{"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "doc_test_finder.find(obj, name, module, globs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2851}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "test.support.bind_unix_socket(sock, addr)", "intent": "Bind a unix socket , raising unittest.SkipTest if PermissionError is raised . With arguments `sock`, `addr`.", "question_id": 10260}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "copyreg.pickle(type, function, constructor=None)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type . The optional `constructor` parameter , if provided , is a callable object which can be used to reconstruct the object when called with the tuple of arguments returned by function at pickling time .", "question_id": 1667}
{"snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "question_id": 1205}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363}
{"snippet": "subprocess.check_call(args, stderr=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9672}
{"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "doctest.DocFileSuite(*paths, setUp=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `setUp` specifies a set-up function for the test suite . With arguments `*paths`.", "question_id": 2799}
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139}
{"snippet": "unittest.mock.Mock(**kwargs, name=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `name`.", "question_id": 11565}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "urllib.parse.parse_qs(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11669}
{"snippet": "str.rstrip(chars)", "intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9239}
{"snippet": "curses.qiflush(flag)", "intent": "If `flag` is False , the effect is the same as calling noqiflush ( ) .", "question_id": 1969}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "tkinter.Tk(baseName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `className`.", "question_id": 10525}
{"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}
{"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "DatagramProtocol.datagram_received(data, addr)", "intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "question_id": 440}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "xmlrpc.client.ServerProxy(uri, transport=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional second argument is a `transport` factory instance ; by default it is an internal SafeTransport instance for https : URLs and an internal HTTP Transport instance otherwise . With arguments `uri`.", "question_id": 12670}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "object.__setstate__(state)", "intent": "Upon unpickling , if the class defines __setstate__ ( ) , it is called with the unpickled `state` .", "question_id": 7412}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\", method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12465}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}
{"snippet": "ast.dump(node, annotate_fields=True)", "intent": "Return a formatted dump of the tree in `node` . If `annotate_fields` is true ( by default ) , the returned string will show the names and the values for fields .", "question_id": 164}
{"snippet": "pprint.pformat(object, indent=1, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7639}
{"snippet": "config_parser.write(fileobject)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . With arguments `fileobject`.", "question_id": 1561}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "ssl.RAND_bytes(num)", "intent": "Return `num` cryptographically strong pseudo-random bytes .", "question_id": 8885}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "sunau.openfp(file, mode)", "intent": "A synonym for open ( ) , maintained for backwards compatibility . With arguments `file`, `mode`.", "question_id": 9692}
{"snippet": "gzip.GzipFile(filename=None, mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4291}
{"snippet": "window.chgat(attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "question_id": 2030}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}
{"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "shutil.which(cmd, path=None)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called .", "question_id": 8347}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467}
{"snippet": "zlib.compressobj(zdict, level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12898}
{"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "compileall.compile_dir(dir, optimize=-1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `optimize` specifies the optimization level for the compiler .", "question_id": 1416}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 75}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11616}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 1119}
{"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}
{"snippet": "email_message.make_related(boundary=None)", "intent": "Convert a non-multipart message into a multipart/related message , moving any existing Content- headers and payload into a ( new ) first part of the multipart . If `boundary` is specified , use it as the boundary string in the multipart , otherwise leave the boundary to be automatically created when it is needed ( for example , when the message is serialized ) .", "question_id": 3295}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "time.replace(hour=self.hour)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2335}
{"snippet": "Queue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7855}
{"snippet": "str.startswith(prefix)", "intent": "Return True if string starts with the `prefix` , otherwise return False .", "question_id": 9249}
{"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 935}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9039}
{"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}
{"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "logging.handlers.SocketHandler(host, port)", "intent": "Returns a new instance of the SocketHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5482}
{"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}
{"snippet": "logging.handlers.RotatingFileHandler(filename, backupCount=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5461}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402}
{"snippet": "random.choices(population, weights=None, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7902}
{"snippet": "turtle.screensize(canvheight=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvheight`, `bg`.", "question_id": 11053}
{"snippet": "copy.deepcopy(x, memo)", "intent": "Return a deep copy of `x` . With arguments `memo`.", "question_id": 1662}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "lzma.compress(data, check=-1, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5712}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "header.encode(\\t', maxlinelen=None, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3136}
{"snippet": "loop.create_connection(protocol_factory, ssl=None)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . With arguments `ssl`.", "question_id": 205}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5866}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}
{"snippet": "email.utils.encode_rfc2231(s, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3481}
{"snippet": "asyncio.open_unix_connection(limit=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `limit`.", "question_id": 486}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "socket.listen(backlog)", "intent": "Enable a server to accept connections . If `backlog` is specified , it must be at least 0 ( if it is lower , it is set to 0 ) ; it specifies the number of unaccepted connections that the system will allow before refusing new connections .", "question_id": 8689}
{"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}
{"snippet": "unittest.TextTestRunner(verbosity=1)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `verbosity`.", "question_id": 11536}
{"snippet": "bytearray(source)", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor : With arguments `source`.", "question_id": 9265}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "decimal.quantize(exp, rounding=None, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2464}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}
{"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6799}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "winreg.OpenKey(key, sub_key, reserved=0)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "question_id": 12139}
{"snippet": "json.loads(s, **kw, encoding=None, cls=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`, `cls`.", "question_id": 5308}
{"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}
{"snippet": "sync_manager.dict(sequence)", "intent": "Create a shared dict object and return a proxy for it . With arguments `sequence`.", "question_id": 6315}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12665}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "process.communicate(input=None)", "intent": "Interact with process : The optional `input` argument is the data ( bytes object ) that will be sent to the child process .", "question_id": 549}
{"snippet": "random.choices(population)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7895}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "bz2.compress(data, compresslevel=9)", "intent": "Compress `data` , a bytes-like object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 907}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}
{"snippet": "http.client.HTTPConnection(host)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4374}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}
{"snippet": "time.replace(hour=self.hour)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2335}
{"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4588}
{"snippet": "os.lchown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6849}
{"snippet": "test.support.set_match_tests(patterns)", "intent": "Define match test with regular expression `patterns` .", "question_id": 10156}
{"snippet": "curses.newwin(nlines, ncols)", "intent": "Return a new window , whose left-upper corner is at ( begin_y , begin_x ) , and whose height/width is nlines/ncols . With arguments `nlines`, `ncols`.", "question_id": 1958}
{"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "xmlrpc.server.DocXMLRPCServer(addr)", "intent": "Create a new server instance . With arguments `addr`.", "question_id": 12749}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "question_id": 2020}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`, `streamreader`.", "question_id": 1210}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}
{"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "FTP.rmd(dirname)", "intent": "Remove the directory named `dirname` on the server .", "question_id": 3964}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`, `handle`.", "question_id": 1765}
{"snippet": "ur_lopener.open_unknown(fullurl, data=None)", "intent": "Overridable interface to open unknown URL types . With arguments `fullurl`, `data`.", "question_id": 11895}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5519}
{"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "decimal.fma(other, third, context=None)", "intent": "Fused multiply-add . With arguments `other`, `third`, `context`.", "question_id": 2416}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "xml.sax.saxutils.quoteattr(data, entities={})", "intent": "Similar to escape ( ) , but also prepares `data` to be used as an attribute value . With arguments `entities`.", "question_id": 12657}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "http.client.HTTPSConnection(host, timeout)", "intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `timeout`.", "question_id": 4382}
{"snippet": "ftplib.FTP(host='', user='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3885}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006}
{"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12240}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "heapq.nsmallest(n, iterable, key=None)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4328}
{"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}
{"snippet": "FileHandler.file_open(req)", "intent": "Open the file locally , if there is no host name , or the host name is 'localhost ' . With arguments `req`.", "question_id": 11873}
{"snippet": "importlib.abc.FileLoader(fullname, path)", "intent": "An abstract base class which inherits from ResourceLoader and ExecutionLoader , providing concrete implementations of ResourceLoader.get_data ( ) and ExecutionLoader.get_filename ( ) . The `fullname` argument is a fully resolved name of the module the loader is to handle . The `path` argument is the path to the file for the module .", "question_id": 4835}
{"snippet": "os.register_at_fork(before=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_child`.", "question_id": 7050}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "re.sub(pattern, repl, string, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . With arguments `flags`.", "question_id": 7953}
{"snippet": "loop.create_unix_connection(protocol_factory, ssl=None)", "intent": "Create a Unix connection . With arguments `protocol_factory`, `ssl`.", "question_id": 224}
{"snippet": "open(file, newline=None)", "intent": "Open `file` and return a corresponding file object . Refer to the documentation of the `newline` parameter for further details .", "question_id": 4067}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}
{"snippet": "glob.glob(pathname, recursive=False)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern \u201c ** \u201d will match any files and zero or more directories , subdirectories and symbolic links to directories .", "question_id": 4265}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "importlib.__import__(name, globals=None, locals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `locals`.", "question_id": 4788}
{"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "async_result.get(timeout)", "intent": "Return the result when it arrives . If `timeout` is not None and the result does not arrive within timeout seconds then multiprocessing.TimeoutError is raised .", "question_id": 6360}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}
{"snippet": "TarInfo.frombuf(buf, encoding, errors)", "intent": "Create and return a TarInfo object from string buffer `buf` . With arguments `encoding`, `errors`.", "question_id": 9971}
{"snippet": "platform.java_ver('', ''), '', ''), release='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7491}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "importlib.__import__(name, fromlist=())", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `fromlist`.", "question_id": 4786}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}
{"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}
{"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}
{"snippet": "platform.libc_ver(version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7540}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "lzma.decompress(data, memlimit=None)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5716}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None, low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 412}
{"snippet": "SMTP.login(user, password, initial_response_ok=True)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . `initial_response_ok` is passed through to auth ( ) . With arguments `user`.", "question_id": 8523}
{"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}
{"snippet": "calendar.month(theyear, themonth, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `l`.", "question_id": 999}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1082}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}
{"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939}
{"snippet": "zlib.compressobj(zdict, level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12903}
{"snippet": "robot_file_parser.request_rate(useragent)", "intent": "Returns the contents of the Request-rate parameter from robots.txt as a named tuple RequestRate ( requests , seconds ) . If there is no such parameter or it doesn \u2019 t apply to the `useragent` specified or the robots.txt entry for this parameter has invalid syntax , return None .", "question_id": 11916}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "ArgumentParser.print_usage(file=None)", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line . If `file` is None , sys.stdout is assumed .", "question_id": 104}
{"snippet": "test_case.assertWarns(warning)", "intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) .", "question_id": 11406}
{"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "zipapp.create_archive(source, target=None, interpreter=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12773}
{"snippet": "inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "intent": "Format a pretty argument spec from the four values returned by getargvalues ( ) . With arguments `args`, `varargs`, `varkw`, `locals`, `formatarg`, `formatvarargs`, `formatvarkw`.", "question_id": 5017}
{"snippet": "threading.Thread(group=None, name=None)", "intent": "This constructor should always be called with keyword arguments . `group` should be None ; reserved for future extension when a ThreadGroup class is implemented . `name` is the thread name .", "question_id": 10360}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1699}
{"snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`, `formatreturns`.", "question_id": 5014}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "asyncio.gather(*aws, loop=None)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`, `loop`.", "question_id": 600}
{"snippet": "unittest.mock.patch(target, **kwargs, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11611}
{"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}
{"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, empty_lines_in_values=True)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `empty_lines_in_values`.", "question_id": 1577}
{"snippet": "Element.setAttributeNodeNS(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the namespaceURI and localName attributes match . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12368}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657}
{"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}
{"snippet": "uuid.uuid1(node=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address .", "question_id": 11958}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}
{"snippet": "message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3010}
{"snippet": "shelve.open(filename, flag='c', writeback=False)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "question_id": 8239}
{"snippet": "os.set_handle_inheritable(handle, inheritable)", "intent": "Set the \u201c `inheritable` \u201d flag of the specified `handle` .", "question_id": 6819}
{"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12457}
{"snippet": "email.generator.DecodedGenerator(outfp)", "intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "question_id": 3106}
{"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}
{"snippet": "os.utime(path, ns, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6960}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "xml.etree.ElementTree.fromstring(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12438}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}
{"snippet": "codecs.StreamReader(stream)", "intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "question_id": 1284}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}
{"snippet": "zipapp.create_archive(source, target=None, interpreter=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12773}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "pprint.pformat(object, compact=False)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7637}
{"snippet": "subprocess.check_call(args, stderr=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9672}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "base64.b32decode(s, casefold=False, map01=None)", "intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input . The optional argument `map01` when not None , specifies which letter the digit 1 should be mapped to ( when map01 is not None , the digit 0 is always mapped to the letter O ) .", "question_id": 722}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "uuid.uuid1(node=None)", "intent": "Generate a UUID from a host ID , sequence number , and the current time . If `node` is not given , getnode ( ) is used to obtain the hardware address .", "question_id": 11958}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704}
{"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}
{"snippet": "loop.start_tls(transport, protocol, sslcontext, server_side=False)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`, `server_side`.", "question_id": 265}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}
{"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "fileinput.FileInput(files=None, inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "question_id": 3807}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}
{"snippet": "base64.b64encode(s, altchars=None)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes . Optional `altchars` must be a bytes-like object of at least length 2 ( additional characters are ignored ) which specifies an alternative alphabet for the + and / characters .", "question_id": 709}
{"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "test.support.bind_port(sock)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`.", "question_id": 10258}
{"snippet": "shutil.copytree(src, dst, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8325}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 49}
{"snippet": "warnings.formatwarning(message, category, filename, lineno, line=None)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12022}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}
{"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}
{"snippet": "str(object=b'', errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4120}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "shutil.which(cmd, path=None)", "intent": "Return the `path` to an executable which would be run if the given `cmd` was called .", "question_id": 8347}
{"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "multiprocessing.Process(kwargs={})", "intent": "Process objects represent activity that is run in a separate process . `kwargs` is a dictionary of keyword arguments for the target invocation .", "question_id": 6170}
{"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}
{"snippet": "hmac.new(key, msg=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . If `msg` is present , the method call update ( msg ) is made .", "question_id": 4330}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None, dialect='excel')", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `dialect`.", "question_id": 1699}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11430}
{"snippet": "webbrowser.register(name, constructor, instance=None, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12113}
{"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "email.encoders.encode_quopri(msg)", "intent": "Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1 . With arguments `msg`.", "question_id": 3069}
{"snippet": "stream_handler.setStream(stream)", "intent": "Sets the instance \u2019 s `stream` to the specified value , if it is different .", "question_id": 5425}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}
{"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534}
{"snippet": "difflib.SequenceMatcher(isjunk=None, a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2674}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}
{"snippet": "doctest.DebugRunner(verbose=None)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `verbose`.", "question_id": 2896}
{"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}
{"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "os.walk(top, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6978}
{"snippet": "mailbox.__iter__()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5732}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "platform.win32_ver(release='', version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7500}
{"snippet": "OpenerDirector.open(url, timeout)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11835}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "shelve.Shelf(dict, protocol=None)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8245}
{"snippet": "inspect.signature(callable)", "intent": "Return a Signature object for the given `callable` :", "question_id": 4977}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6050}
{"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "difflib.SequenceMatcher(isjunk=None, a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2674}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "heapq.merge(*iterables, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `reverse` is a boolean value .", "question_id": 4323}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "doctest.Example(source, want, lineno=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`.", "question_id": 2826}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}
{"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout .", "question_id": 12659}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "doctest.testfile(filename, optionflags=0)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `optionflags` ( default value 0 ) takes the bitwise OR of option flags .", "question_id": 2773}
{"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}
{"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136}
{"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "subprocess.run(args, stderr=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9571}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "codecs.CodecInfo(encode, decode, streamwriter=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamwriter`.", "question_id": 1203}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, bases=())", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2184}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "pdb.post_mortem(traceback=None)", "intent": "Enter post-mortem debugging of the given `traceback` object .", "question_id": 7339}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "plistlib.dumps(value, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `skipkeys`.", "question_id": 7574}
{"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "loop.call_later(delay, callback, *args)", "intent": "Schedule `callback` to be called after the given `delay` number of seconds ( can be either an int or a float ) . With arguments `*args`.", "question_id": 193}
{"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}
{"snippet": "base64.a85decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 743}
{"snippet": "base64.a85encode(b, wrapcol=0, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 734}
{"snippet": "loop.remove_signal_handler(sig)", "intent": "Remove the handler for the `sig` signal .", "question_id": 304}
{"snippet": "email_message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3270}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}
{"snippet": "CookiePolicy.set_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be accepted from server . `request` is an object implementing the interface defined by the documentation for CookieJar.extract_cookies ( ) .", "question_id": 4532}
{"snippet": "doctest.testsource(module, name)", "intent": "Convert the doctest for an object to a script . Argument `module` is a module object , or dotted `name` of a module , containing the object whose doctests are of interest .", "question_id": 2887}
{"snippet": "calendar.itermonthdays4(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 916}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, delimiters=('=')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `delimiters`.", "question_id": 1573}
{"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "os.chmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6835}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`, `formatreturns`.", "question_id": 5014}
{"snippet": "pickle.loads(bytes_object, fix_imports=True, encoding=\"ASCII\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7383}
{"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}
{"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}
{"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}
{"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}
{"snippet": "zlib.compressobj(zdict, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `strategy` is used to tune the compression algorithm .", "question_id": 12902}
{"snippet": "stat.S_ISDIR(mode)", "intent": "Return non-zero if the `mode` is from a directory .", "question_id": 9061}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "FTP.voidcmd(cmd)", "intent": "Send a simple command string to the server and handle the response . With arguments `cmd`.", "question_id": 3925}
{"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}
{"snippet": "config_parser.options(section)", "intent": "Return a list of options available in the specified `section` .", "question_id": 1510}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "select.epoll(sizehint=-1, flags=0)", "intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .", "question_id": 8153}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}
{"snippet": "datetime.time(minute=0)", "intent": "All arguments are optional . With arguments `minute`.", "question_id": 2316}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}
{"snippet": "unicodedata.numeric(chr)", "intent": "Returns the numeric value assigned to the character `chr` as float .", "question_id": 11348}
{"snippet": "formatter.DumbWriter(file=None, maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3858}
{"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "time.sleep(secs)", "intent": "Suspend execution of the calling thread for the given number of seconds . With arguments `secs`.", "question_id": 10452}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "doctest.testfile(filename, optionflags=0)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `optionflags` ( default value 0 ) takes the bitwise OR of option flags .", "question_id": 2773}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "dis.disco(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2724}
{"snippet": "pickletools.dis(pickle, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7419}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}
{"snippet": "Request.add_unredirected_header(key, header)", "intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "question_id": 11826}
{"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}
{"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "nntplib.NNTP_SSL(host, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `user`.", "question_id": 6431}
{"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}
{"snippet": "widget.tag_has(tagname)", "intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "question_id": 10668}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "codecs.decode(obj, encoding='utf-8', errors='strict')", "intent": "Decodes `obj` using the codec registered for `encoding` . The default error handler is 'strict ' meaning that decoding `errors` raise ValueError ( or a more codec specific subclass , such as UnicodeDecodeError ) .", "question_id": 1199}
{"snippet": "os.path.samefile(path1, path2)", "intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "question_id": 7166}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment)", "intent": "Concrete class for urlparse ( ) results containing str data . With arguments `scheme`, `netloc`, `path`, `params`, `query`, `fragment`.", "question_id": 11700}
{"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "unittest.main(failfast=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `failfast` , `catchbreak` and `buffer` parameters have the same effect as the same-name command-line options .", "question_id": 11553}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "doctest.DebugRunner(verbose=None)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `verbose`.", "question_id": 2896}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "turtle.fd(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10904}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "@functools.lru_cache(typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4148}
{"snippet": "ctypes.OleDLL(name, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `handle`.", "question_id": 1752}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "glob.glob(pathname, recursive=False)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern \u201c ** \u201d will match any files and zero or more directories , subdirectories and symbolic links to directories .", "question_id": 4265}
{"snippet": "msvcrt.locking(fd, mode, nbytes)", "intent": "Lock part of a file based on file descriptor `fd` from the C runtime . `mode` must be one of the LK_* constants listed below . The locked region of the file extends from the current file position for `nbytes` bytes , and may continue beyond the end of the file .", "question_id": 6146}
{"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308}
{"snippet": "operator.__invert__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6543}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "io.open(file, mode='r', buffering=-1)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`, `buffering`.", "question_id": 5059}
{"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}
{"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}
{"snippet": "venv.EnvBuilder(symlinks=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `symlinks`.", "question_id": 11975}
{"snippet": "bdb.set_break(filename, lineno, cond, funcname, temporary=0)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`, `temporary`.", "question_id": 794}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863}
{"snippet": "msvcrt.locking(fd, mode, nbytes)", "intent": "Lock part of a file based on file descriptor `fd` from the C runtime . `mode` must be one of the LK_* constants listed below . The locked region of the file extends from the current file position for `nbytes` bytes , and may continue beyond the end of the file .", "question_id": 6146}
{"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}
{"snippet": "winreg.OpenKeyEx(key, sub_key, reserved=0)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "question_id": 12143}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "calendar.yeardayscalendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 924}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565}
{"snippet": "counter.update(iterable-or-mapping)", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1348}
{"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5868}
{"snippet": "ur_lopener.retrieve(url, filename=None, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11901}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "doctest.DocFileSuite(*paths, setUp=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `setUp` specifies a set-up function for the test suite . With arguments `*paths`.", "question_id": 2799}
{"snippet": "property(fset=None, doc=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4094}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11118}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}
{"snippet": "window.insnstr(y, x, str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`, `attr`.", "question_id": 2079}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "ZipFile.open(name, pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12808}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "threading.Thread(group=None, name=None)", "intent": "This constructor should always be called with keyword arguments . `group` should be None ; reserved for future extension when a ThreadGroup class is implemented . `name` is the thread name .", "question_id": 10360}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}
{"snippet": "turtle.rt(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10909}
{"snippet": "tempfile.TemporaryDirectory(suffix=None, dir=None)", "intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `suffix`, `dir`.", "question_id": 10068}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'EmailMessage'>`.", "question_id": 3059}
{"snippet": "doctest.Example(source, want, exc_msg=None, lineno=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`, `lineno`.", "question_id": 2829}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "tracemalloc.DomainFilter(inclusive: bool, domain: int)", "intent": "Filter traces of memory blocks by their address space ( domain ) . With arguments `inclusive: bool`, `domain: int`.", "question_id": 10851}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948}
{"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}
{"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "test_case.assertWarns(warning, msg=None)", "intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) . If only the warning and possibly the `msg` arguments are given , return a context manager so that the code under test can be written inline rather than as a function :", "question_id": 11407}
{"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696}
{"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}
{"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "connection.create_collation(name, callable)", "intent": "Creates a collation with the specified `name` and `callable` .", "question_id": 8818}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111}
{"snippet": "socket.recvmsg(bufsize)", "intent": "Receive normal data ( up to `bufsize` bytes ) and ancillary data from the socket .", "question_id": 8707}
{"snippet": "heapq.heappushpop(heap, item)", "intent": "Push `item` on the `heap` , then pop and return the smallest item from the heap .", "question_id": 4318}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9176}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}
{"snippet": "IMAP4.lsub(directory='\"\"')", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4713}
{"snippet": "base_http_request_handler.send_header(keyword, value)", "intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "question_id": 4643}
{"snippet": "Template.open(file, mode)", "intent": "Return a file-like object , open to `file` , but read from or written to by the pipeline . With arguments `mode`.", "question_id": 7433}
{"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}
{"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}
{"snippet": "cgi.parse_multipart(fp, pdict, encoding=\"utf-8\", errors=\"replace\")", "intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding . With arguments `errors`.", "question_id": 1050}
{"snippet": "ipaddress.IPv6Network(address, strict=True)", "intent": "Construct an IPv6 network definition . `address` can be one of the following : If `strict` is True and host bits are set in the supplied address , then ValueError is raised .", "question_id": 5220}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "question_id": 3003}
{"snippet": "http.client.HTTPResponse(sock, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `url`.", "question_id": 4405}
{"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202}
{"snippet": "window.hline(ch, n)", "intent": "Display a horizontal line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2064}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}
{"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "threading.Barrier(parties, action=None)", "intent": "Create a barrier object for `parties` number of threads . An `action` , when provided , is a callable to be called by one of the threads when they are released .", "question_id": 10418}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "code.InteractiveInterpreter(locals=None)", "intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) . The optional `locals` argument specifies the dictionary in which code will be executed ; it defaults to a newly created dictionary with key '__name__ ' set to '__console__ ' and key '__doc__ ' set to None .", "question_id": 1156}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "turtle.left(angle)", "intent": "Turn turtle left by `angle` units .", "question_id": 10910}
{"snippet": "http.client.HTTPConnection(host, timeout, port=None)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .", "question_id": 4367}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}
{"snippet": "window.addstr(str, attr)", "intent": "Paint the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2008}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "operator.__ne__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6522}
{"snippet": "sunau.openfp(file, mode)", "intent": "A synonym for open ( ) , maintained for backwards compatibility . With arguments `file`, `mode`.", "question_id": 9692}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "IMAP4.open(host, port)", "intent": "Opens socket to `port` at `host` .", "question_id": 4719}
{"snippet": "mailbox.mbox(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5770}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}
{"snippet": "curses.resize_term(nlines, ncols)", "intent": "Backend function used by resizeterm ( ) , performing most of the work ; when resizing the windows , resize_term ( ) blank-fills the areas that are extended . With arguments `nlines`, `ncols`.", "question_id": 1975}
{"snippet": "HTTPConnection.putheader(header)", "intent": "Send an RFC 822-style `header` to the server .", "question_id": 4449}
{"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838}
{"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}
{"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "base_http_request_handler.log_request(size='-')", "intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "question_id": 4650}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}
{"snippet": "shutil.move(src, dst, copy_function=copy2)", "intent": "Recursively move a file or directory ( `src` ) to another location ( `dst` ) and return the destination . Otherwise , src is copied to dst using `copy_function` and then removed .", "question_id": 8339}
{"snippet": "asyncio.Queue(maxsize=0, loop=None)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "question_id": 448}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "xml.etree.ElementTree.register_namespace(prefix, uri)", "intent": "Registers a namespace `prefix` . `uri` is a namespace uri .", "question_id": 12450}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}
{"snippet": "window.clearok(flag)", "intent": "If `flag` is True , the next call to refresh ( ) will clear the window completely .", "question_id": 2035}
{"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}
{"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}
{"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default, componentflags)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . `componentflags` specifies the default flags that new components get . With arguments `database`, `basedir`.", "question_id": 6091}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}
{"snippet": "warnings.filterwarnings(action, lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "question_id": 12027}
{"snippet": "os.lchown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6849}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2190}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11128}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "multiprocessing.Process(group=None, name=None)", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `name` is the process name ( see name for more details ) .", "question_id": 6173}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6122}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}
{"snippet": "doc_test_runner.summarize(verbose=None)", "intent": "Print a summary of all the test cases that have been run by this DocTestRunner , and return a named tuple TestResults ( failed , attempted ) . The optional `verbose` argument controls how detailed the summary is .", "question_id": 2882}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}
{"snippet": "difflib.context_diff(a, b, fromfile='', fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2636}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}
{"snippet": "locale.currency(val, symbol=True, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5396}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "bz2.open(filename, errors=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 880}
{"snippet": "base64.b64decode(s, altchars=None, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 713}
{"snippet": "Pattern.subn(repl, string, count=0)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7990}
{"snippet": "multiprocessing.Process(name=None)", "intent": "Process objects represent activity that is run in a separate process . `name` is the process name ( see name for more details ) .", "question_id": 6168}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}
{"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}
{"snippet": "incremental_decoder.setstate(state)", "intent": "Set the `state` of the decoder to state .", "question_id": 1278}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "collections.deque(iterable)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "question_id": 1351}
{"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "unpickler.find_class(module, name)", "intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "question_id": 7408}
{"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "gettext.bind_textdomain_codeset(domain)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4212}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12420}
{"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}
{"snippet": "ArgumentParser.add_argument_group(description=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 97}
{"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}
{"snippet": "json.JSONDecoder(strict=True)", "intent": "Simple JSON decoder . If `strict` is false ( True is the default ) , then control characters will be allowed inside strings .", "question_id": 5315}
{"snippet": "http.client.HTTPResponse(sock)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`.", "question_id": 4402}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "pickletools.dis(pickle, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7419}
{"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}
{"snippet": "base64.urlsafe_b64encode(s)", "intent": "Encode bytes-like object `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the encoded bytes .", "question_id": 716}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "json.dumps(obj, **kw, default=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `default`.", "question_id": 5288}
{"snippet": "urllib.parse.parse_qsl(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11679}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "formatter.assert_line_data(flag=1)", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .", "question_id": 3837}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258}
{"snippet": "gettext.find(domain, localedir=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4226}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdInput`.", "question_id": 9632}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "parser.compilest(st)", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7222}
{"snippet": "socket.getaddrinfo(host, port, type=0, proto=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8643}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "mock.assert_has_calls(calls)", "intent": "assert the mock has been called with the specified `calls` .", "question_id": 11575}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}
{"snippet": "mmap.seek(pos)", "intent": "Set the file \u2019 s current position . With arguments `pos`.", "question_id": 6018}
{"snippet": "codecs.IncrementalDecoder(errors='strict')", "intent": "Constructor for an IncrementalDecoder instance . The IncrementalDecoder may implement different error handling schemes by providing the `errors` keyword argument .", "question_id": 1273}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "timeit.Timer(timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10500}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "msvcrt.get_osfhandle(fd)", "intent": "Return the file handle for the file descriptor `fd` .", "question_id": 6154}
{"snippet": "loop.create_server(protocol_factory, ssl=None)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `ssl`.", "question_id": 239}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "element.iterfind(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12503}
{"snippet": "gettext.find(domain, localedir=None, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4228}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "unittest.FunctionTestCase(testFunc, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `tearDown`.", "question_id": 11475}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}
{"snippet": "types.resolve_bases(bases)", "intent": "Resolve MRO entries dynamically as specified by PEP 560 . This function looks for items in `bases` that are not instances of type , and returns a tuple where each such object that has an __mro_entries__ method is replaced with an unpacked result of calling this method .", "question_id": 11182}
{"snippet": "TarFile.addfile(tarinfo)", "intent": "Add the TarInfo object `tarinfo` to the archive .", "question_id": 9957}
{"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}
{"snippet": "mailcap.findmatch(caps, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5872}
{"snippet": "doc_test_runner.run(test, compileflags=None, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2878}
{"snippet": "dis.Bytecode(x, first_line=None)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . If `first_line` is not None , it indicates the line number that should be reported for the first source line in the disassembled code . With arguments `x`.", "question_id": 2696}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}
{"snippet": "Morsel.output(header='Set-Cookie:')", "intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` .", "question_id": 4603}
{"snippet": "os.replace(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6897}
{"snippet": "sync_manager.Queue(maxsize)", "intent": "Create a shared queue.Queue object and return a proxy for it . With arguments `maxsize`.", "question_id": 6306}
{"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "socket.sendfile(file, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8734}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "os.posix_fadvise(fd, offset, len, advice)", "intent": "Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations . The `advice` applies to the region of the file specified by `fd` starting at `offset` and continuing for `len` bytes .", "question_id": 6776}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}
{"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}
{"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}
{"snippet": "platform.dist('debian', 'redhat', 'mandrake', ...), version='', id='')", "intent": "This is another name for linux_distribution ( ) . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`, `version`, `id`.", "question_id": 7525}
{"snippet": "nntplib.NNTP(host, timeout, port=119, usenetrc=False)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6408}
{"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6040}
{"snippet": "threading.Barrier(parties, action=None)", "intent": "Create a barrier object for `parties` number of threads . An `action` , when provided , is a callable to be called by one of the threads when they are released .", "question_id": 10418}
{"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}
{"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`.", "question_id": 11072}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "winreg.OpenKey(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12140}
{"snippet": "turtle.delay(delay=None)", "intent": "Set or return the drawing `delay` in milliseconds .", "question_id": 11057}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "shelve.BsdDbShelf(dict, keyencoding='utf-8')", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8255}
{"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}
{"snippet": "widget.detach(*items)", "intent": "Unlinks all of the specified items from the tree . With arguments `*items`.", "question_id": 10628}
{"snippet": "shutil.copytree(src, dst, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8325}
{"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "formatter.DumbWriter(file=None, maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3858}
{"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer)", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp .", "question_id": 1297}
{"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}
{"snippet": "@dataclasses.dataclass(repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `repr`.", "question_id": 2159}
{"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}
{"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream')", "intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . With arguments `**_params`.", "question_id": 3327}
{"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object .", "question_id": 5992}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425}
{"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}
{"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171}
{"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "itertools.islice(iterable, start, stop, step)", "intent": "Make an iterator that returns selected elements from the `iterable` . If `start` is non-zero , then elements from the iterable are skipped until start is reached . If `stop` is None , then iteration continues until the iterator is exhausted , if at all ; otherwise , it stops at the specified position . Afterward , elements are returned consecutively unless `step` is set higher than one which results in items being skipped .", "question_id": 5256}
{"snippet": "raw_config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1590}
{"snippet": "termios.tcsetattr(fd, when, attributes)", "intent": "Set the tty `attributes` for file descriptor `fd` from the attributes , which is a list like the one returned by tcgetattr ( ) . The `when` argument determines when the attributes are changed : TCSANOW to change immediately , TCSADRAIN to change after transmitting all queued output , or TCSAFLUSH to change after transmitting all queued output and discarding all queued input .", "question_id": 10103}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "window.chgat(attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "question_id": 2030}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "unittest.TextTestRunner(failfast=False)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `failfast`.", "question_id": 11537}
{"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "DOMImplementation.hasFeature(feature, version)", "intent": "Return true if the `feature` identified by the pair of strings feature and `version` is implemented .", "question_id": 12311}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}
{"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4159}
{"snippet": "Codec.decode(input, errors)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1263}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "window.addch(y, x, ch)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2003}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1705}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "@unittest.skipUnless(condition, reason)", "intent": "Skip the decorated test unless `condition` is true . With arguments `reason`.", "question_id": 11360}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "time.replace(microsecond=self.microsecond)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "question_id": 2338}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "unicodedata.name(chr)", "intent": "Returns the name assigned to the character `chr` as a string .", "question_id": 11342}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "tkinter.Tk(screenName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `screenName`, `className`.", "question_id": 10523}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "pwd.getpwuid(uid)", "intent": "Return the password database entry for the given numeric user ID . With arguments `uid`.", "question_id": 7703}
{"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}
{"snippet": "condition.wait_for(predicate)", "intent": "Wait until a `predicate` becomes true .", "question_id": 580}
{"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "unittest.FunctionTestCase(testFunc, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `tearDown`.", "question_id": 11475}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "email.header.Header(s=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .", "question_id": 3117}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "window.hline(ch, n)", "intent": "Display a horizontal line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2064}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "smtplib.SMTP(host='', port=0)", "intent": "An SMTP instance encapsulates an SMTP connection . If the optional `host` and `port` parameters are given , the SMTP connect ( ) method is called with those parameters during initialization .", "question_id": 8463}
{"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}
{"snippet": "BaseCookie.value_encode(val)", "intent": "Return a tuple ( real_value , coded_value ) . `val` can be any type , but coded_value will always be converted to a string .", "question_id": 4583}
{"snippet": "element_tree.find(match)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12512}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "ref.__callback__", "intent": "This read-only attribute returns the callback currently associated to the weakref.", "question_id": 12076}
{"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}
{"snippet": "traceback.format_stack(f=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10788}
{"snippet": "traceback.print_exc(chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10748}
{"snippet": "datetime.time(hour=0, microsecond=0)", "intent": "All arguments are optional . With arguments `hour`, `microsecond`.", "question_id": 2323}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "curses.unget_wch(ch)", "intent": "Push `ch` so the next get_wch ( ) will return it .", "question_id": 1995}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377}
{"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}
{"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "traceback.FrameSummary(filename, lineno, name, lookup_line=True)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . If `lookup_line` is False , the source code is not looked up until the FrameSummary has the `line` attribute accessed ( which also happens when casting it to a tuple ) . With arguments `filename`, `lineno`, `name`.", "question_id": 10834}
{"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "email_message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3271}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "window.addstr(y, x, str, attr)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2010}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "HTTPConnection.request(method, url, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4433}
{"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}
{"snippet": "zipfile.PyZipFile(file, mode='r')", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `mode`.", "question_id": 12847}
{"snippet": "logging.FileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "question_id": 5431}
{"snippet": "importlib.resources.open_binary(package, resource)", "intent": "Open for binary reading the `resource` within `package` .", "question_id": 4852}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "timer.repeat(number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) .", "question_id": 10513}
{"snippet": "bytes_generator.clone(fp)", "intent": "Return an independent clone of this BytesGenerator instance with the exact same option settings , and `fp` as the new outfp .", "question_id": 3090}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432}
{"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242}
{"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006}
{"snippet": "time.gmtime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10441}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "ctypes.OleDLL(name, mode=DEFAULT_MODE, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `mode`, `handle`.", "question_id": 1755}
{"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}
{"snippet": "message.del_param(param, requote=True)", "intent": "Remove the given parameter completely from the Content-Type `header` . All values will be quoted as necessary unless `requote` is False ( the default is True ) . With arguments `param`.", "question_id": 3011}
{"snippet": "os.register_at_fork(before=None, after_in_parent=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`.", "question_id": 7049}
{"snippet": "calendar.month(theyear, themonth, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `l`.", "question_id": 999}
{"snippet": "sys.call_tracing(func, args)", "intent": "Call `func` ( *args ) , while tracing is enabled . With arguments `args`.", "question_id": 9772}
{"snippet": "datetime.time(hour=0, microsecond=0)", "intent": "All arguments are optional . With arguments `hour`, `microsecond`.", "question_id": 2323}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "bytes_generator.clone(fp)", "intent": "Return an independent clone of this BytesGenerator instance with the exact same option settings , and `fp` as the new outfp .", "question_id": 3090}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "mock.assert_has_calls(calls, any_order=False)", "intent": "assert the mock has been called with the specified `calls` . If `any_order` is false ( the default ) then the calls must be sequential .", "question_id": 11576}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None, file=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML . The tree is initialized with the contents of the XML `file` if given .", "question_id": 12510}
{"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict')", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` . With arguments `errors`.", "question_id": 1300}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}
{"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}
{"snippet": "timeit.Timer(setup='pass')", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10499}
{"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}
{"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}
{"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866}
{"snippet": "CookieJar.clear(domain, path, name)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed . If given three arguments , then the cookie with the specified domain , path and `name` is removed .", "question_id": 4493}
{"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}
{"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}
{"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}
{"snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "question_id": 1205}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "audioop.byteswap(fragment, width)", "intent": "\u201c Byteswap \u201d all samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 686}
{"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "directory.start_component(component=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory .", "question_id": 6094}
{"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "json.dump(obj, fp, **kw, default=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `skipkeys` is true ( `default` : False ) , then dict keys that are not of a basic type ( str , int , float , bool , None ) will be skipped instead of raising a TypeError . With arguments `**kw`.", "question_id": 5278}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934}
{"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "codecs.open(filename, mode='r', buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1232}
{"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}
{"snippet": "http.client.HTTPConnection(host, blocksize=8192)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "question_id": 4377}
{"snippet": "TarInfo.tobuf(encoding=ENCODING)", "intent": "Create a string buffer from a TarInfo object . With arguments `encoding`.", "question_id": 9975}
{"snippet": "null_handler.handle(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5438}
{"snippet": "os.read(fd, n)", "intent": "Read at most `n` bytes from file descriptor `fd` .", "question_id": 6793}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}
{"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "message.get_param(param, failobj=None, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . If the message has no Content-Type header or if there is no such parameter , then `failobj` is returned ( defaults to None ) . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2996}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "bytearray.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9334}
{"snippet": "nntplib.NNTP(host, timeout, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6402}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}
{"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}
{"snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)", "intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power . `dklen` is the length of the derived key .", "question_id": 4311}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}
{"snippet": "config_parser.optionxform(option)", "intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "question_id": 1565}
{"snippet": "bdb.dispatch_return(frame, arg)", "intent": "If the debugger should stop on this function return , invoke the user_return ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "question_id": 775}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "email.utils.encode_rfc2231(s, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3481}
{"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "glob.iglob(pathname)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`.", "question_id": 4266}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "xmlrpc.server.DocXMLRPCServer(addr)", "intent": "Create a new server instance . With arguments `addr`.", "question_id": 12749}
{"snippet": "wsgiref.util.FileWrapper(filelike, blksize=8192)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12218}
{"snippet": "resource_reader.resource_path(resource)", "intent": "Returns the file system path to the `resource` .", "question_id": 4820}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "base64.a85encode(b, foldspaces=False, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 731}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}
{"snippet": "concurrent.futures.wait(fs, return_when=ALL_COMPLETED)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `return_when` indicates when this function should return .", "question_id": 1482}
{"snippet": "decimal.fma(other, third, context=None)", "intent": "Fused multiply-add . With arguments `other`, `third`, `context`.", "question_id": 2416}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "test_result.addFailure(test, err)", "intent": "Called when the `test` case test signals a failure . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11525}
{"snippet": "HTTPConnection.putrequest(method, url)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) .", "question_id": 4444}
{"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362}
{"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "codecs.decode(obj, encoding='utf-8', errors='strict')", "intent": "Decodes `obj` using the codec registered for `encoding` . The default error handler is 'strict ' meaning that decoding `errors` raise ValueError ( or a more codec specific subclass , such as UnicodeDecodeError ) .", "question_id": 1199}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084}
{"snippet": "binascii.a2b_qp(data, header=False)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data . If the optional argument `header` is present and true , underscores will be decoded as spaces .", "question_id": 827}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}
{"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "subprocess.check_call(args, timeout=None)", "intent": "Run command with arguments . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface . With arguments `args`.", "question_id": 9675}
{"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5419}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "pickletools.dis(pickle, out=None, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7422}
{"snippet": "time.replace(hour=self.hour, minute=self.minute)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`, `minute`.", "question_id": 2341}
{"snippet": "turtle.lt(angle)", "intent": "Turn turtle left by `angle` units .", "question_id": 10911}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "tkinter.Tk(screenName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `screenName`, `className`.", "question_id": 10523}
{"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136}
{"snippet": "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)", "intent": "Report that the given `example` raised an unexpected exception . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `exc_info` is a tuple containing information about the unexpected exception ( as returned by sys.exc_info ( ) ) .", "question_id": 2872}
{"snippet": "OpenerDirector.open(url, timeout)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11835}
{"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`, `formatreturns`.", "question_id": 5014}
{"snippet": "fileinput.FileInput(backup='')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `backup`.", "question_id": 3803}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2112}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111}
{"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}
{"snippet": "gzip.GzipFile(filename=None, mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4291}
{"snippet": "time.replace(tzinfo=self.tzinfo)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2339}
{"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}
{"snippet": "turtle.setposition(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10917}
{"snippet": "pty.spawn(argv, master_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7701}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}
{"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}
{"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004}
{"snippet": "socket.listen(backlog)", "intent": "Enable a server to accept connections . If `backlog` is specified , it must be at least 0 ( if it is lower , it is set to 0 ) ; it specifies the number of unaccepted connections that the system will allow before refusing new connections .", "question_id": 8689}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given byte `offset` . offset is interpreted relative to the position indicated by `whence` .", "question_id": 5075}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "XMLReader.setDTDHandler(handler)", "intent": "Set the current DTDHandler . With arguments `handler`.", "question_id": 12617}
{"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}
{"snippet": "faulthandler.register(signum, chain=False)", "intent": "Register a user signal : install a handler for the `signum` signal to dump the traceback of all threads , or of the current thread if `all_threads` is False , into `file` . Call the previous handler if `chain` is True .", "question_id": 3734}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "threading.Timer(interval, function)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10412}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "Element.setAttributeNode(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12367}
{"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}
{"snippet": "set >= other", "intent": "Test whether every element in other is in the set.", "question_id": 9443}
{"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}
{"snippet": "str.rstrip(chars)", "intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9239}
{"snippet": "sunau.open(file, mode)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a seekable file-like object . `mode` can be any of", "question_id": 9691}
{"snippet": "lzma.decompress(data, format=FORMAT_AUTO)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5715}
{"snippet": "dis.dis(x=None, file=None, depth=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2714}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "textwrap.fill(text, **kwargs)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`.", "question_id": 10320}
{"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}
{"snippet": "smtplib.SMTP_SSL(timeout, port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8470}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}
{"snippet": "readline.remove_history_item(pos)", "intent": "Remove history item specified by its position from the history . With arguments `pos`.", "question_id": 8032}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "code.compile_command(source)", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1171}
{"snippet": "dict(mapping, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . If a positional argument is given and it is a `mapping` object , a dictionary is created with the same key-value pairs as the mapping object . With arguments `**kwarg`.", "question_id": 9468}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "email.encoders.encode_quopri(msg)", "intent": "Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1 . With arguments `msg`.", "question_id": 3069}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "codecs.open(filename, mode='r', buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1232}
{"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}
{"snippet": "uuid.uuid5(namespace, name)", "intent": "Generate a UUID based on the SHA-1 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11963}
{"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}
{"snippet": "unittest.mock.Mock(**kwargs, side_effect=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `side_effect`.", "question_id": 11562}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}
{"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\", method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12535}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset . With arguments `access`.", "question_id": 5978}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "r_lock.acquire(timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10383}
{"snippet": "zlib.decompress(data, wbits=MAX_WBITS)", "intent": "Decompresses the bytes in `data` , returning a bytes object containing the uncompressed data . The `wbits` parameter depends on the format of data , and is discussed further below .", "question_id": 12920}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "policy.fold(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message for a given header .", "question_id": 3426}
{"snippet": "test_case.assertIsNotNone(expr)", "intent": "Test that `expr` is ( or is not ) None .", "question_id": 11389}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}
{"snippet": "zipapp.create_archive(source, target=None, compressed=False)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The optional `compressed` argument determines whether files are compressed .", "question_id": 12776}
{"snippet": "code.interact(banner=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1167}
{"snippet": "codecs.StreamReader(stream)", "intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "question_id": 1284}
{"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "email.header.Header(s=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value .", "question_id": 3117}
{"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206}
{"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}
{"snippet": "parser.issuite(st)", "intent": "This function mirrors isexpr ( ) in that it reports whether an ST object represents an 'exec ' form , commonly known as a \u201c suite. \u201d It is not safe to assume that this function is equivalent to not isexpr ( `st` ) , as additional syntactic fragments may be supported in the future .", "question_id": 7225}
{"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}
{"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}
{"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}
{"snippet": "mailbox.Babyl(path, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Babyl format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5797}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "timeit.Timer(globals=None)", "intent": "Class for timing execution speed of small code snippets . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "question_id": 10501}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "CookiePolicy.domain_return_ok(domain, request)", "intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "question_id": 4534}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "pwd.getpwuid(uid)", "intent": "Return the password database entry for the given numeric user ID . With arguments `uid`.", "question_id": 7703}
{"snippet": "json.dumps(obj, **kw, indent=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `indent`.", "question_id": 5286}
{"snippet": "ctypes.wstring_at(address, size=-1)", "intent": "This function returns the wide character string starting at memory `address` address as a string . If `size` is specified , it is used as the number of characters of the string , otherwise the string is assumed to be zero-terminated .", "question_id": 1841}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}
{"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "ctypes._SimpleCData", "intent": "This non-public class is the base class of all fundamental ctypes data types.", "question_id": 1853}
{"snippet": "tkinter.tix.Tk(baseName=None)", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `baseName`.", "question_id": 10546}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}
{"snippet": "multiprocessing.sharedctypes.synchronized(obj, lock)", "intent": "Return a process-safe wrapper object for a ctypes object which uses `lock` to synchronize access . With arguments `obj`.", "question_id": 6276}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "base_selector.modify(fileobj, events, data=None)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8219}
{"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}
{"snippet": "urllib.parse.SplitResult(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing str data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11701}
{"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}
{"snippet": "definition.__qualname__", "intent": "The qualified name of the class, function, method, descriptor, or generator instance.", "question_id": 9503}
{"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2660}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 933}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}
{"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . ( Note _exit ( ) exits the process immediately , which means it doesn \u2019 t do any cleanup like flushing `file` buffers . ) If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3729}
{"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "timeit.repeat(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10488}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "urllib.parse.parse_qs(qs, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11673}
{"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, sinfo=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `sinfo`.", "question_id": 5588}
{"snippet": "asyncio.Condition(lock=None)", "intent": "A Condition object . The optional `lock` argument must be a Lock object or None .", "question_id": 570}
{"snippet": "traceback.print_exception(etype, value, tb, chain=True)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . If `chain` is true ( the default ) , then chained exceptions ( the __cause__ or __context__ attributes of the exception ) will be printed as well , like the interpreter itself does when printing an unhandled exception . With arguments `etype`, `value`.", "question_id": 10740}
{"snippet": "code.interact(banner=None, readfunc=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided .", "question_id": 1166}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}
{"snippet": "textwrap.indent(text, prefix, predicate=None)", "intent": "Add `prefix` to the beginning of selected lines in `text` . The optional `predicate` argument can be used to control which lines are indented .", "question_id": 10325}
{"snippet": "subprocess.run(args, stdin=None)", "intent": "Run the command described by `args` . The input argument is passed to Popen.communicate ( ) and thus to the subprocess \u2019 s `stdin` .", "question_id": 9568}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "HTTPConnection.putheader(header)", "intent": "Send an RFC 822-style `header` to the server .", "question_id": 4449}
{"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}
{"snippet": "sync_manager.Barrier(parties, action)", "intent": "Create a shared threading.Barrier object and return a proxy for it . With arguments `parties`, `action`.", "question_id": 6297}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "smtplib.SMTP_SSL(timeout, port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8470}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "gettext.find(domain, localedir=None, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4228}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "memoryview(obj)", "intent": "Create a memoryview that references `obj` .", "question_id": 9411}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "xml.etree.ElementTree.XML(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12470}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6120}
{"snippet": "wsgiref.util.request_uri(environ, include_query=True)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . If `include_query` is false , the query string is not included in the resulting URI . With arguments `environ`.", "question_id": 12212}
{"snippet": "turtle.circle(radius, extent=None, steps=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10926}
{"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}
{"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278}
{"snippet": "tkinter.Tcl(screenName=None, className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `screenName`, `className`.", "question_id": 10533}
{"snippet": "traceback.format_exc(limit=None, chain=True)", "intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file . With arguments `chain`.", "question_id": 10784}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "ArgumentParser.exit(status=0, message=None)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 113}
{"snippet": "operator.__ge__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6523}
{"snippet": "base64.standard_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the standard Base64 alphabet and return the decoded bytes .", "question_id": 715}
{"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}
{"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}
{"snippet": "POP3.capa()", "intent": "Query the server \u2019 s capabilities as specified in RFC 2449 .", "question_id": 7603}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "HTTPConnection.set_debuglevel(level)", "intent": "Set the debugging `level` .", "question_id": 4436}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "Element.getAttributeNode(attrname)", "intent": "Return the Attr node for the attribute named by `attrname` .", "question_id": 12360}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "scheduler.run(blocking=True)", "intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "question_id": 8129}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}
{"snippet": "inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "intent": "Format a pretty argument spec from the four values returned by getargvalues ( ) . With arguments `args`, `varargs`, `varkw`, `locals`, `formatarg`, `formatvarargs`, `formatvarkw`.", "question_id": 5017}
{"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h')", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5471}
{"snippet": "text_calendar.pryear(theyear, w=2)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`.", "question_id": 947}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "xmlrpc.client.dumps(params)", "intent": "Convert `params` into an XML-RPC request .", "question_id": 12698}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "mailbox.Maildir(dirname, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5757}
{"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}
{"snippet": "os.preadv(fd, buffers, offset)", "intent": "Read from a file descriptor `fd` at a position of `offset` into mutable bytes-like objects `buffers` , leaving the file offset unchanged .", "question_id": 6784}
{"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`.", "question_id": 4935}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdInput`.", "question_id": 9632}
{"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11619}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 968}
{"snippet": "urllib.parse.unquote_plus(string, encoding='utf-8')", "intent": "Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . `string` must be a str . With arguments `encoding`.", "question_id": 11728}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "os.spawnl(mode, path)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process .", "question_id": 7053}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "mimetypes.MimeTypes(filenames=())", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database .", "question_id": 5957}
{"snippet": "BaseException", "intent": "The base class for all built-in exceptions.", "question_id": 3628}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "marshal.dump(value, file)", "intent": "Write the `value` on the open `file` .", "question_id": 5879}
{"snippet": "asyncio.open_unix_connection(ssl=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `ssl`.", "question_id": 487}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "pdb.Pdb(completekey='tab')", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7342}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "pickle.loads(bytes_object, encoding=\"ASCII\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7381}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "subprocess.Popen(args, stderr=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9604}
{"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "test.support.import_module(name, required_on(), deprecated=False)", "intent": "This function imports and returns the named module . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`, `required_on()`.", "question_id": 10241}
{"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}
{"snippet": "string.Template(template)", "intent": "The constructor takes a single argument which is the `template` string .", "question_id": 9525}
{"snippet": "sync_manager.dict(sequence)", "intent": "Create a shared dict object and return a proxy for it . With arguments `sequence`.", "question_id": 6315}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2665}
{"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}
{"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, filters=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5711}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12665}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "importlib.util.spec_from_loader(name, loader)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`.", "question_id": 4934}
{"snippet": "Path.open(newline=None)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `newline`.", "question_id": 7297}
{"snippet": "turtle.screensize(bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `bg`.", "question_id": 11050}
{"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}
{"snippet": "os.WIFCONTINUED(status)", "intent": "Return True if the process has been continued from a job control stop , otherwise return False . With arguments `status`.", "question_id": 7089}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', backupCount=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5465}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdout`.", "question_id": 323}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . With arguments `prog`, `parser_class`.", "question_id": 79}
{"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}
{"snippet": "plistlib.loads(data, fmt=None)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`.", "question_id": 7556}
{"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}
{"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685}
{"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}
{"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}
{"snippet": "xmlrpc.client.ServerProxy(uri, encoding=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional third argument is an `encoding` , by default UTF-8 . With arguments `uri`.", "question_id": 12671}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "gettext.install(domain, names=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "question_id": 4242}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "config_parser.optionxform(option)", "intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "question_id": 1565}
{"snippet": "@dataclasses.dataclass(frozen=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `frozen`.", "question_id": 2163}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}
{"snippet": "subprocess.check_call(args, stdin=None, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`, `stdin`.", "question_id": 9676}
{"snippet": "xml.etree.ElementTree.iterparse(source, events=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `events` is a sequence of events to report back .", "question_id": 12443}
{"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}
{"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "decimal.Context(capitals=None)", "intent": "Creates a new context . The `capitals` field is either 0 or 1 ( the default ) .", "question_id": 2504}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}
{"snippet": "test_case.assertRaises(exception, callable, *args, **kwds)", "intent": "Test that an `exception` is raised when `callable` is called with any positional or keyword arguments that are also passed to assertRaises ( ) . With arguments `*args`, `**kwds`.", "question_id": 11399}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "queue.get(block, timeout)", "intent": "Remove and return an item from the queue . If optional args `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 6204}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}
{"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}
{"snippet": "Pattern.subn(repl, string, count=0)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7990}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}
{"snippet": "InteractiveInterpreter.runsource(source, symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1177}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING)", "intent": "Create a string buffer from a TarInfo object . With arguments `format`, `encoding`.", "question_id": 9977}
{"snippet": "FTP.voidcmd(cmd)", "intent": "Send a simple command string to the server and handle the response . With arguments `cmd`.", "question_id": 3925}
{"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}
{"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}
{"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}
{"snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`.", "question_id": 1761}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938}
{"snippet": "sqlite3.sqlite_version", "intent": "The version number of the run-time SQLite library, as a string.", "question_id": 8793}
{"snippet": "test.support.setswitchinterval(interval)", "intent": "Set the sys.setswitchinterval ( ) to the given `interval` .", "question_id": 10162}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "pickle.dumps(obj, fix_imports=True)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7369}
{"snippet": "datetime.time(second=0)", "intent": "All arguments are optional . With arguments `second`.", "question_id": 2317}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "email.message.EmailMessage(policy=default)", "intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "question_id": 3223}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "dialog.text(name, x, y, width, height, attributes, text)", "intent": "Add and return a Text control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `text`.", "question_id": 6137}
{"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "BaseTransport.get_extra_info(name, default=None)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get . `default` is the value to return if the information is not available , or if the transport does not support querying it with the given third-party event loop implementation or on the current platform .", "question_id": 399}
{"snippet": "traceback.format_stack(f=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10788}
{"snippet": "os.startfile(path, operation)", "intent": "Start a file with its associated application . The `path` parameter is relative to the current directory . When `operation` is not specified or 'open ' , this acts like double-clicking the file in Windows Explorer , or giving the file name as an argument to the start command from the interactive command shell : the file is opened with whatever application ( if any ) its extension is associated .", "question_id": 7066}
{"snippet": "http.client.HTTPConnection(host, blocksize=8192)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "question_id": 4377}
{"snippet": "turtle.backward(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10907}
{"snippet": "dis.disassemble(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2719}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1176}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}
{"snippet": "widget.selection_set(*items)", "intent": "items becomes the new selection . With arguments `*items`.", "question_id": 10654}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2185}
{"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8350}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "traceback.print_exception(etype, value, tb, limit=None, file=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10741}
{"snippet": "FTP.storbinary(cmd, fp, blocksize=8192)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored .", "question_id": 3934}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "gnu_translations.ngettext(singular, plural, n)", "intent": "Do a plural-forms lookup of a message id . `singular` is used as the message id for purposes of lookup in the catalog , while `n` is used to determine which `plural` form to use .", "question_id": 4262}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9174}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "Path.chmod(mode)", "intent": "Change the file `mode` and permissions , like os.chmod ( ) :", "question_id": 7268}
{"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}
{"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "tkinter.Tk(screenName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `screenName`, `className`.", "question_id": 10523}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "turtle.numinput(title, prompt, default=None, minval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11088}
{"snippet": "turtle.numinput(title, prompt, minval=None, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11090}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11119}
{"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}
{"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "difflib.SequenceMatcher(isjunk=None, b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2675}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}
{"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "gettext.install(domain, names=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "question_id": 4242}
{"snippet": "argparse.ArgumentParser(epilog=None)", "intent": "Create a new ArgumentParser object . With arguments `epilog`.", "question_id": 52}
{"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}
{"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}
{"snippet": "sync_manager.Barrier(parties, action)", "intent": "Create a shared threading.Barrier object and return a proxy for it . With arguments `parties`, `action`.", "question_id": 6297}
{"snippet": "HTTPConnection.set_debuglevel(level)", "intent": "Set the debugging `level` .", "question_id": 4436}
{"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}
{"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}
{"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}
{"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}
{"snippet": "POP3.capa()", "intent": "Query the server \u2019 s capabilities as specified in RFC 2449 .", "question_id": 7603}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`, `encoding`.", "question_id": 5451}
{"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "tarfile.TarFile(dereference=False)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . If `dereference` is False , add symbolic and hard links to the archive .", "question_id": 9919}
{"snippet": "os.symlink(src, dst, target_is_directory=False)", "intent": "Create a symbolic link pointing to `src` named `dst` . Otherwise , the symlink will be created as a directory if `target_is_directory` is True or a file symlink ( the default ) otherwise .", "question_id": 6952}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdInput`.", "question_id": 9632}
{"snippet": "nntplib.NNTP_SSL(host, port=563, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `user`.", "question_id": 6436}
{"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "loop.set_debug(enabled: bool)", "intent": "Set the debug mode of the event loop . With arguments `enabled: bool`.", "question_id": 312}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "ZipFile.extract(member, path=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `path` specifies a different directory to extract to .", "question_id": 12815}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "bytes.replace(old, new, count)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9307}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388}
{"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}
{"snippet": "pyclbr.readmodule_ex(module, path=None)", "intent": "Return a dictionary-based tree containing a function or class descriptors for each function and class defined in the `module` with a def or class statement . As with readmodule , module names the module to be read and `path` is prepended to sys.path .", "question_id": 7709}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "See the documentation for the functions explained above . With arguments `function`, `*args`, `**kwds`.", "question_id": 7359}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914}
{"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "compile(source, filename, mode, flags=0, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3997}
{"snippet": "doctest.DocTestFinder(verbose=False, exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2847}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict')", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` . With arguments `errors`.", "question_id": 1300}
{"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9038}
{"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}
{"snippet": "nntplib.NNTP_SSL(host, port=563, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "question_id": 6437}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 967}
{"snippet": "test.support.temp_dir(quiet=False)", "intent": "A context manager that creates a temporary directory at `path` and yields the directory . If `quiet` is False , the context manager raises an exception on error .", "question_id": 10178}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2658}
{"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "Path.chmod(mode)", "intent": "Change the file `mode` and permissions , like os.chmod ( ) :", "question_id": 7268}
{"snippet": "AU_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 9725}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "io.FileIO(name, mode='r')", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending .", "question_id": 5100}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b', buffering=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`, `buffering`.", "question_id": 10052}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}
{"snippet": "pty.spawn(argv, master_read)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . The functions `master_read` and `stdin_read` are passed a file descriptor which they should read from , and they should always return a byte string . With arguments `argv`.", "question_id": 7701}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}
{"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "email_message.get_content(*args, **kw)", "intent": "Call the get_content ( ) method of the `content_manager` , passing self as the message object , and passing along any other arguments or keywords as additional arguments . With arguments `*args`, `**kw`.", "question_id": 3290}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None, low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 412}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "ctypes.wstring_at(address)", "intent": "This function returns the wide character string starting at memory `address` address as a string .", "question_id": 1840}
{"snippet": "zipfile.ZipFile(file, mode='r', compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12797}
{"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}
{"snippet": "shelve.Shelf(dict, protocol=None, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8249}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}
{"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}
{"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}
{"snippet": "http.client.HTTPConnection(host)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4374}
{"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 966}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}
{"snippet": "patch.object(target, attribute, **kwargs, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11621}
{"snippet": "py_compile.main(args=None)", "intent": "Compile several source files . The files named in `args` ( or on the command line , if args is None ) are compiled and the resulting byte-code is cached in the normal manner .", "question_id": 7836}
{"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}
{"snippet": "asyncio.Queue(maxsize=0, loop=None)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "question_id": 448}
{"snippet": "code.interact(banner=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1167}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255}
{"snippet": "logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `dllname` should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log ( if not specified , 'win32service.pyd ' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5509}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}
{"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}
{"snippet": "json.load(fp, **kw, cls=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . With arguments `**kw`.", "question_id": 5291}
{"snippet": "mailbox.Maildir(dirname, factory=None)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation .", "question_id": 5755}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}
{"snippet": "cmd.Cmd(completekey='tab', stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1132}
{"snippet": "raw_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , to the underlying raw stream , and return the number of bytes written .", "question_id": 5088}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "subprocess.call(args, stdin=None)", "intent": "Run the command described by `args` . With arguments `stdin`.", "question_id": 9660}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "sync_manager.Condition(lock)", "intent": "Create a shared threading.Condition object and return a proxy for it . If `lock` is supplied then it should be a proxy for a threading.Lock or threading.RLock object .", "question_id": 6301}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "__import__(name, globals=None, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4141}
{"snippet": "DatagramProtocol.datagram_received(data, addr)", "intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "question_id": 440}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "webbrowser.register(name, constructor, instance=None, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12113}
{"snippet": "connection.backup(target, pages=0, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8834}
{"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "mmap.mmap(fileno, length)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object .", "question_id": 5992}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}
{"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "pdb.run(statement)", "intent": "See the documentation for the functions explained above . With arguments `statement`.", "question_id": 7351}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}
{"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}
{"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "xml.etree.ElementInclude.include(elem)", "intent": "This function expands XInclude directives . `elem` is the root element .", "question_id": 12475}
{"snippet": "mimetypes.guess_all_extensions(type, strict=True)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type . The optional `strict` argument has the same meaning as with the guess_type ( ) function .", "question_id": 5942}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}
{"snippet": "ctypes.OleDLL(name, mode=DEFAULT_MODE)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `mode`.", "question_id": 1751}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}
{"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}
{"snippet": "window.vline(ch, n)", "intent": "Display a vertical line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2129}
{"snippet": "inspect.getmembers(object, predicate)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name . If the optional `predicate` argument is supplied , only members for which the predicate returns a true value are included .", "question_id": 4945}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "shelve.open(filename, flag='c', protocol=None)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8238}
{"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}
{"snippet": "io.FileIO(name, closefd=True, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener . With arguments `closefd`.", "question_id": 5105}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "bdb.get_breaks(filename, lineno)", "intent": "Return all breakpoints for `lineno` in `filename` , or an empty list if none are set .", "question_id": 801}
{"snippet": "curses.typeahead(fd)", "intent": "Specify that the file descriptor `fd` be used for typeahead checking .", "question_id": 1991}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "msvcrt.locking(fd, mode, nbytes)", "intent": "Lock part of a file based on file descriptor `fd` from the C runtime . `mode` must be one of the LK_* constants listed below . The locked region of the file extends from the current file position for `nbytes` bytes , and may continue beyond the end of the file .", "question_id": 6146}
{"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "doctest.Example(source, want, indent=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `indent`.", "question_id": 2827}
{"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}
{"snippet": "binascii.b2a_qp(data, istext=True, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 834}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}
{"snippet": "curses.unget_wch(ch)", "intent": "Push `ch` so the next get_wch ( ) will return it .", "question_id": 1995}
{"snippet": "traceback_exception.format(chain=True)", "intent": "Format the exception . If `chain` is not True , __cause__ and __context__ will not be formatted .", "question_id": 10821}
{"snippet": "codecs.StreamReader(stream)", "intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "question_id": 1284}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "types.MappingProxyType(mapping)", "intent": "Read-only proxy of a `mapping` .", "question_id": 11206}
{"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}
{"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "pprint.pprint(object, stream=None)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline .", "question_id": 7644}
{"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}
{"snippet": "AU_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 9725}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}
{"snippet": "directory.glob(pattern)", "intent": "Add a list of files to the current component as specified in the glob `pattern` .", "question_id": 6111}
{"snippet": "__import__(name, globals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4142}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "os.wait4(pid, options)", "intent": "Similar to waitpid ( ) , except a 3-element tuple , containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `pid`, `options`.", "question_id": 7084}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, bases=(), namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2192}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "poplib.POP3(host, timeout, port=POP3_PORT)", "intent": "This class implements the actual POP3 protocol . The optional `timeout` parameter specifies a timeout in seconds for the connection attempt ( if not specified , the global default timeout setting will be used ) . If `port` is omitted , the standard POP3 port ( 110 ) is used . With arguments `host`.", "question_id": 7587}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}
{"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "select.epoll(sizehint=-1, flags=0)", "intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .", "question_id": 8153}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3723}
{"snippet": "bz2.open(filename, errors=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 880}
{"snippet": "window.hline(ch, n)", "intent": "Display a horizontal line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2064}
{"snippet": "tarfile.TarFile(tarinfo=TarInfo)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `tarinfo` argument can be used to replace the default TarInfo class with a different one .", "question_id": 9918}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2190}
{"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}
{"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}
{"snippet": "doctest.Example(source, want, lineno=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`.", "question_id": 2826}
{"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5419}
{"snippet": "binascii.a2b_qp(data, header=False)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data . If the optional argument `header` is present and true , underscores will be decoded as spaces .", "question_id": 827}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007}
{"snippet": "socket.CMSG_SPACE(length)", "intent": "Return the buffer size needed for recvmsg ( ) to receive an ancillary data item with associated data of the given `length` , along with any trailing padding .", "question_id": 8666}
{"snippet": "turtle.ondrag(fun, btn=1)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`.", "question_id": 11028}
{"snippet": "urllib.request.Request(url, data=None, unverifiable=False)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . `unverifiable` should indicate whether the request is unverifiable , as defined by RFC 2965 .", "question_id": 11776}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec=None)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "question_id": 11615}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "question_id": 2020}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', _subparts=None)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . `_subparts` is a sequence of initial subparts for the payload . With arguments `**_params`.", "question_id": 3322}
{"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}
{"snippet": "urllib.request.urlretrieve(url, filename=None, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied . With arguments `reporthook`.", "question_id": 11885}
{"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "warnings.warn(message, source=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . This makes the warning refer to deprecation ( ) \u2019 s caller , rather than to the `source` of deprecation ( ) itself ( since the latter would defeat the purpose of the warning message ) .", "question_id": 12002}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `func`.", "question_id": 5586}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614}
{"snippet": "message.get_payload(i=None, decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2959}
{"snippet": "Wave_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 12069}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}
{"snippet": "formatter.get_value(key, args, kwargs)", "intent": "Retrieve a given field value . The `key` argument will be either an integer or a string . If it is an integer , it represents the index of the positional argument in `args` ; if it is a string , then it represents a named argument in `kwargs` .", "question_id": 9521}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6120}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171}
{"snippet": "ctypes.OleDLL(name, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `handle`.", "question_id": 1752}
{"snippet": "os.chown(path, uid, gid, dir_fd=None)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` . With arguments `dir_fd`.", "question_id": 6840}
{"snippet": "fileinput.FileInput(backup='')", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `backup`.", "question_id": 3803}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`, `metavar`.", "question_id": 74}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}
{"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}
{"snippet": "winreg.OpenKeyEx(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12144}
{"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}
{"snippet": "ctypes.wstring_at(address, size=-1)", "intent": "This function returns the wide character string starting at memory `address` address as a string . If `size` is specified , it is used as the number of characters of the string , otherwise the string is assumed to be zero-terminated .", "question_id": 1841}
{"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}
{"snippet": "asyncio.wait(aws, loop=None, timeout=None)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 . `timeout` ( a float or int ) , if specified , can be used to control the maximum number of seconds to wait before returning .", "question_id": 611}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}
{"snippet": "email.iterators.body_line_iterator(msg, decode=False)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line . Optional `decode` is passed through to Message.get_payload .", "question_id": 3209}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "urllib.request.Request(url, data=None, unverifiable=False)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . `unverifiable` should indicate whether the request is unverifiable , as defined by RFC 2965 .", "question_id": 11776}
{"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}
{"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "scheduler.run(blocking=True)", "intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "question_id": 8129}
{"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}
{"snippet": "process.communicate(input=None)", "intent": "Interact with process : The optional `input` argument is the data ( bytes object ) that will be sent to the child process .", "question_id": 549}
{"snippet": "config_parser.items(section)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1556}
{"snippet": "platform.mac_ver('', ''), release='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7510}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "len(proxy)", "intent": "Return the number of items in the underlying mapping . With arguments `proxy`.", "question_id": 11210}
{"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11118}
{"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}
{"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "Document.createProcessingInstruction(target, data)", "intent": "Create and return a processing instruction node containing the `target` and `data` passed as parameters .", "question_id": 12349}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "BaseCookie.js_output(attrs=None)", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4593}
{"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}
{"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}
{"snippet": "@unittest.skipUnless(condition, reason)", "intent": "Skip the decorated test unless `condition` is true . With arguments `reason`.", "question_id": 11360}
{"snippet": "ctypes.wstring_at(address, size=-1)", "intent": "This function returns the wide character string starting at memory `address` address as a string . If `size` is specified , it is used as the number of characters of the string , otherwise the string is assumed to be zero-terminated .", "question_id": 1841}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "doctest.testmod(verbose=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2780}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722}
{"snippet": "bytes.replace(old, new, count)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9307}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "window.chgat(y, x, attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2032}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "__import__(name, locals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4144}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "timeit.repeat(stmt='pass', repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10495}
{"snippet": "doctest.testfile(filename, module_relative=True)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `module_relative` specifies how the filename should be interpreted :", "question_id": 2767}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11626}
{"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}
{"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}
{"snippet": "asyncio.wrap_future(future, loop=None)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`, `loop`.", "question_id": 358}
{"snippet": "writer.new_alignment(align)", "intent": "Set the alignment style . The `align` value can be any object , but by convention is a string or None , where None indicates that the writer \u2019 s \u201c preferred \u201d alignment should be used .", "question_id": 3842}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "aifc.readframes(nframes)", "intent": "Read and return the next `nframes` frames from the audio file .", "question_id": 20}
{"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}
{"snippet": "venv.EnvBuilder(system_site_packages=False, upgrade=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `upgrade`.", "question_id": 11981}
{"snippet": "http.client.HTTPConnection(host)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4374}
{"snippet": "types.MappingProxyType(mapping)", "intent": "Read-only proxy of a `mapping` .", "question_id": 11206}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "unicodedata.numeric(chr)", "intent": "Returns the numeric value assigned to the character `chr` as float .", "question_id": 11348}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "logging.handlers.HTTPHandler(host, url)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . With arguments `url`.", "question_id": 5541}
{"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}
{"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . With arguments `database`, `basedir`.", "question_id": 6092}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "header.append(s, charset=None)", "intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance .", "question_id": 3127}
{"snippet": "NNTP.login(user=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6452}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "os.lockf(fd, cmd, len)", "intent": "Apply , test or remove a POSIX lock on an open file descriptor . `fd` is an open file descriptor . `cmd` specifies the command to use - one of F_LOCK , F_TLOCK , F_ULOCK or F_TEST . `len` specifies the section of the file to lock .", "question_id": 6729}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "base_http_request_handler.log_request(size='-')", "intent": "Logs an accepted ( successful ) request . If a `size` of the response is available , then it should be passed as the size parameter .", "question_id": 4650}
{"snippet": "email.utils.formatdate(timeval=None, localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3475}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "tuple(iterable)", "intent": "Tuples may be constructed in a number of ways : The constructor builds a tuple whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9160}
{"snippet": "widget.focus(item=None)", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10631}
{"snippet": "msvcrt.get_osfhandle(fd)", "intent": "Return the file handle for the file descriptor `fd` .", "question_id": 6154}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040}
{"snippet": "fractions.Fraction(denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3861}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "tempfile.SpooledTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10055}
{"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}
{"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}
{"snippet": "textbox.edit(validator)", "intent": "This is the entry point you will normally use . If `validator` is supplied , it must be a function .", "question_id": 2136}
{"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}
{"snippet": "os.replace(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6897}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}
{"snippet": "os.set_handle_inheritable(handle, inheritable)", "intent": "Set the \u201c `inheritable` \u201d flag of the specified `handle` .", "question_id": 6819}
{"snippet": "inspect.getinnerframes(traceback, context=1)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames . With arguments `context`.", "question_id": 5028}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "collections.deque(iterable)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "question_id": 1351}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, loader_state=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . With arguments `loader_state`.", "question_id": 4914}
{"snippet": "tarfile.open(**kwargs, fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9893}
{"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}
{"snippet": "test.support.start_threads(threads, unlock=None)", "intent": "Context manager to start `threads` . With arguments `unlock`.", "question_id": 10199}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "window.clearok(flag)", "intent": "If `flag` is True , the next call to refresh ( ) will clear the window completely .", "question_id": 2035}
{"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123}
{"snippet": "tabnanny.process_tokens(tokens)", "intent": "This function is used by check ( ) to process `tokens` generated by the tokenize module .", "question_id": 9889}
{"snippet": "wsgiref.util.FileWrapper(filelike)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12217}
{"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "NNTP.login(user=None, password=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6458}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`, `subtype`.", "question_id": 3048}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "exit_stack.callback(callback, *args, **kwds)", "intent": "Accepts an arbitrary `callback` function and arguments and adds it to the callback stack . With arguments `*args`, `**kwds`.", "question_id": 1629}
{"snippet": "Path.resolve(strict=False)", "intent": "Make the path absolute , resolving any symlinks . If the path doesn \u2019 t exist and `strict` is True , FileNotFoundError is raised .", "question_id": 7311}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "CookiePolicy.return_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be returned to server . `request` is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header ( ) .", "question_id": 4533}
{"snippet": "struct.pack_into(buffer, offset, v1, v2)", "intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "question_id": 9560}
{"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}
{"snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "question_id": 1205}
{"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}
{"snippet": "os.fchmod(fd, mode)", "intent": "Change the `mode` of the file given by `fd` to the numeric mode .", "question_id": 6719}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "nntplib.NNTP_SSL(host, port=563)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port .", "question_id": 6430}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "resource.setrlimit(resource, limits)", "intent": "Sets new `limits` of consumption of `resource` .", "question_id": 8072}
{"snippet": "collections.namedtuple(typename, field_names, rename=False)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names .", "question_id": 1377}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "Codec.decode(input, errors)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1263}
{"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "pool.apply_async(func, args, kwds, callback)", "intent": "A variant of the apply ( ) method which returns a result object . If `callback` is specified then it should be a callable which accepts a single argument . With arguments `func`, `args`, `kwds`.", "question_id": 6336}
{"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "logging.StreamHandler(stream=None)", "intent": "Returns a new instance of the StreamHandler class . If `stream` is specified , the instance will use it for logging output ; otherwise , sys.stderr will be used .", "question_id": 5422}
{"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}
{"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}
{"snippet": "format(value, format_spec)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4021}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "connection.cursor(factory=Cursor)", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8807}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}
{"snippet": "asyncio.set_child_watcher(watcher)", "intent": "Set the current child `watcher` to watcher for the current policy .", "question_id": 383}
{"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}
{"snippet": "header.encode(\\t', maxlinelen=None, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3136}
{"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "tuple(iterable)", "intent": "Tuples may be constructed in a number of ways : The constructor builds a tuple whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9160}
{"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}
{"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}
{"snippet": "__import__(name, locals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4144}
{"snippet": "importlib.__import__(name, globals=None, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `level`.", "question_id": 4790}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "dataclasses.field(default=MISSING, repr=True)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . With arguments `repr`.", "question_id": 2176}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "deque.extend(iterable)", "intent": "Extend the right side of the deque by appending elements from the `iterable` argument .", "question_id": 1358}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715}
{"snippet": "Cmd.postcmd(stop, line)", "intent": "Hook method executed just after a command dispatch is finished . `line` is the command line which was executed , and `stop` is a flag which indicates whether execution will be terminated after the call to postcmd ( ) ; this will be the return value of the onecmd ( ) method .", "question_id": 1142}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "codeop.compile_command(source, filename=\"<input>\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' .", "question_id": 1305}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`.", "question_id": 322}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "curses.setupterm(fd=-1)", "intent": "Initialize the terminal . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1981}
{"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}
{"snippet": "urllib.parse.parse_qsl(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11679}
{"snippet": "TarFile.extract(member, path=\"\", numeric_owner=False)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9945}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`, `metavar`.", "question_id": 74}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}
{"snippet": "formatter.NullFormatter(writer=None)", "intent": "A formatter which does nothing . If `writer` is omitted , a NullWriter instance is created .", "question_id": 3839}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "header.append(s, charset=None)", "intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance .", "question_id": 3127}
{"snippet": "test_case.assertIn(first, second, msg=None)", "intent": "Test that `first` is ( or is not ) in `second` . With arguments `msg`.", "question_id": 11392}
{"snippet": "str(encoding='utf-8')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9172}
{"snippet": "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)", "intent": "The same as RawValue ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes object . With arguments `typecode_or_type`, `*args`.", "question_id": 6274}
{"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}
{"snippet": "Queue.put(item, block=True)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7850}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}
{"snippet": "condition.wait_for(predicate)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value .", "question_id": 10392}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "subprocess.check_output(args, timeout=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `timeout`.", "question_id": 9687}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}
{"snippet": "fcntl.ioctl(fd, request, arg=0, mutate_flag=True)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "question_id": 3745}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}
{"snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12914}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, bases=(), namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2192}
{"snippet": "datetime.replace(tzinfo=self.tzinfo)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2292}
{"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}
{"snippet": "loop.getaddrinfo(host, port, type=0, flags=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `flags`.", "question_id": 298}
{"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}
{"snippet": "warnings.simplefilter(action, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `append`.", "question_id": 12036}
{"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}
{"snippet": "bdb.set_break(filename, lineno, cond, funcname)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "question_id": 793}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}
{"snippet": "pprint.pprint(object, width=80)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7646}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256}
{"snippet": "doctest.testfile(filename, optionflags=0)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `optionflags` ( default value 0 ) takes the bitwise OR of option flags .", "question_id": 2773}
{"snippet": "gettext.gettext(message)", "intent": "Return the localized translation of `message` , based on the current global domain , language , and locale directory .", "question_id": 4216}
{"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}
{"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "question_id": 11423}
{"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264}
{"snippet": "config_parser.getint(section, option, raw=False)", "intent": "A convenience method which coerces the `option` in the specified `section` to an integer . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "question_id": 1533}
{"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}
{"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}
{"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560}
{"snippet": "threading.Timer(interval, function, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10414}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}
{"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}
{"snippet": "os.chown(path, uid, gid, follow_symlinks=True)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` . With arguments `follow_symlinks`.", "question_id": 6841}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "NodeList.item(i)", "intent": "Return the `i` \u2019 th item from the sequence , if there is one , or None .", "question_id": 12336}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "InteractiveConsole.interact(banner=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close !", "question_id": 1185}
{"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}
{"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915}
{"snippet": "quopri.encode(input, output, quotetabs, header=False)", "intent": "Encode the contents of the `input` file and write the resulting quoted-printable data to the `output` file . `quotetabs` , a non-optional flag which controls whether to encode embedded spaces and tabs ; when true it encodes such embedded whitespace , and when false it leaves them unencoded . Note that spaces and tabs appearing at the end of lines are always encoded , as per RFC 1521. `header` is a flag which controls if spaces are encoded as underscores as per RFC 1522 .", "question_id": 7876}
{"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}
{"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "question_id": 11477}
{"snippet": "bdb.Breakpoint(self, file, line, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 757}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}
{"snippet": "datetime.astimezone(tz=None)", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2295}
{"snippet": "operator.__invert__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6543}
{"snippet": "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd, is_authenticated=False)", "intent": "`realm` , `uri` , `user` , `passwd` are as for HTTPPasswordMgr.add_password ( ) . `is_authenticated` sets the initial value of the is_authenticated flag for the given URI or list of URIs .", "question_id": 11860}
{"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "connection.executemany(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8814}
{"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870}
{"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}
{"snippet": "profile.Profile(timeunit=0.0)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time .", "question_id": 7671}
{"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}
{"snippet": "inspect.signature(callable)", "intent": "Return a Signature object for the given `callable` :", "question_id": 4977}
{"snippet": "set.intersection(*others)", "intent": "Return a new set with elements common to the set and all others . With arguments `*others`.", "question_id": 9447}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "doctest.testmod(verbose=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2780}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "threading.Timer(interval, function, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10414}
{"snippet": "multiprocessing.pool.Pool(processes, initializer)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts .", "question_id": 6329}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668}
{"snippet": "os.execvpe(file, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7016}
{"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}
{"snippet": "ctypes.string_at(address)", "intent": "This function returns the C string starting at memory `address` address as a bytes object .", "question_id": 1834}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "time.ctime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10438}
{"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}
{"snippet": "subprocess.Popen(args, cwd=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "question_id": 9608}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "__import__(name, globals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4142}
{"snippet": "importlib.find_loader(name, path=None)", "intent": "Find the loader for a module , optionally within the specified `path` . If the module is in sys.modules , then sys.modules [ `name` ] .__loader__ is returned ( unless the loader would be None or is not set , in which case ValueError is raised ) .", "question_id": 4796}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "tempfile.TemporaryFile(dir=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `dir` , `prefix` and `suffix` parameters have the same meaning and defaults as with mkstemp ( ) .", "question_id": 10040}
{"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}
{"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}
{"snippet": "shelve.BsdDbShelf(dict, keyencoding='utf-8')", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8255}
{"snippet": "dbm.open(file)", "intent": "Open the database `file` file and return a corresponding object .", "question_id": 2366}
{"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980}
{"snippet": "audioop.avg(fragment, width)", "intent": "Return the average over all samples in the `fragment` . With arguments `width`.", "question_id": 683}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . With arguments `is_package`.", "question_id": 4915}
{"snippet": "asyncio.open_connection(limit=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . `limit` determines the buffer size limit used by the returned StreamReader instance .", "question_id": 467}
{"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}
{"snippet": "r_lock.acquire(timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10383}
{"snippet": "CookiePolicy.domain_return_ok(domain, request)", "intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "question_id": 4534}
{"snippet": "doctest.debug(module, name)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above .", "question_id": 2888}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`, `streamreader`.", "question_id": 1210}
{"snippet": "SimpleXMLRPCServer.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "question_id": 12735}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "test_case.assertRaises(exception, callable, *args, **kwds)", "intent": "Test that an `exception` is raised when `callable` is called with any positional or keyword arguments that are also passed to assertRaises ( ) . With arguments `*args`, `**kwds`.", "question_id": 11399}
{"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}
{"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}
{"snippet": "gzip.open(filename, mode='rb', encoding=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4279}
{"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}
{"snippet": "doctest.testfile(filename, globs=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `globs` gives a dict to be used as the globals when executing examples .", "question_id": 2770}
{"snippet": "traceback.format_exception(etype, value, tb, limit=None)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `limit`.", "question_id": 10778}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "ssl.wrap_socket(sock)", "intent": "Takes an instance `sock` of socket.socket , and returns an instance of ssl.SSLSocket , a subtype of socket.socket , which wraps the underlying socket in an SSL context .", "question_id": 8901}
{"snippet": "io.TextIOWrapper(buffer)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "question_id": 5146}
{"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "http.client.HTTPResponse(sock)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`.", "question_id": 4402}
{"snippet": "Widget.tk.createfilehandler(file, mask, func)", "intent": "Registers the `file` handler callback function `func` . The `mask` argument is an ORed combination of any of the three constants below .", "question_id": 10537}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}
{"snippet": "shutil.unpack_archive(filename, extract_dir, format)", "intent": "Unpack an archive . `filename` is the full path of the archive . `extract_dir` is the name of the target directory where the archive is unpacked . `format` is the archive format : one of \u201c zip \u201d , \u201c tar \u201d , \u201c gztar \u201d , \u201c bztar \u201d , or \u201c xztar \u201d .", "question_id": 8363}
{"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}
{"snippet": "quopri.encodestring(s, quotetabs=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`.", "question_id": 7880}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "lzma.decompress(data, format=FORMAT_AUTO)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5715}
{"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "shutil.copyfile(src, dst, follow_symlinks=True)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst . If `follow_symlinks` is false and src is a symbolic link , a new symbolic link will be created instead of copying the file src points to .", "question_id": 8312}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "str(encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4117}
{"snippet": "base64.a85encode(b, foldspaces=False, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 732}
{"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}
{"snippet": "logging.handlers.DatagramHandler(host, port)", "intent": "Returns a new instance of the DatagramHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5490}
{"snippet": "xml.dom.getDOMImplementation(features=())", "intent": "Return a suitable DOM implementation . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12305}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "config_parser.items(section)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1556}
{"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}
{"snippet": "unittest.mock.Mock(**kwargs, return_value=DEFAULT)", "intent": "Create a new Mock object . With arguments `**kwargs`, `return_value`.", "question_id": 11563}
{"snippet": "json.JSONDecodeError(msg, doc, pos)", "intent": "Subclass of ValueError with the following additional attributes : With arguments `msg`, `doc`, `pos`.", "question_id": 5335}
{"snippet": "code.InteractiveConsole(locals=None, filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`, `filename`.", "question_id": 1160}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "fcntl.lockf(fd, cmd)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values :", "question_id": 3747}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "tempfile.SpooledTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10055}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "datetime.time(second=0)", "intent": "All arguments are optional . With arguments `second`.", "question_id": 2317}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2185}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "turtle.bk(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10906}
{"snippet": "loop.remove_writer(fd)", "intent": "Stop monitoring the `fd` file descriptor for write availability .", "question_id": 275}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "bz2.BZ2File(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 889}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}
{"snippet": "memory_bio.write(buf)", "intent": "Write the bytes from `buf` to the memory BIO .", "question_id": 9058}
{"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "OSError(errno, strerror, filename)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.", "question_id": 3652}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "os.killpg(pgid, sig)", "intent": "Send the signal `sig` to the process group `pgid` .", "question_id": 7038}
{"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}
{"snippet": "http.client.HTTPResponse(sock, debuglevel=0)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `debuglevel`.", "question_id": 4403}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "email.mime.message.MIMEMessage(_msg, _subtype='rfc822')", "intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised . Optional `_subtype` sets the subtype of the message ; it defaults to rfc822 .", "question_id": 3351}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}
{"snippet": "zlib.compressobj(zdict, level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12903}
{"snippet": "text_calendar.prmonth(theyear, themonth, w=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 933}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "config_parser.get(section, option, raw=False)", "intent": "Get an `option` value for the named `section` . All the ' % ' interpolations are expanded in the return values , unless the `raw` argument is true .", "question_id": 1525}
{"snippet": "connection.backup(target)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance .", "question_id": 8829}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}
{"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "Morsel.output(attrs=None, header='Set-Cookie:')", "intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` . By default , all the attributes are included , unless `attrs` is given , in which case it should be a list of attributes to use .", "question_id": 4604}
{"snippet": "warnings.simplefilter(action, lineno=0)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "question_id": 12035}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "question_id": 1575}
{"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}
{"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865}
{"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}
{"snippet": "platform.popen(cmd, mode='r')", "intent": "Portable popen ( ) interface . With arguments `cmd`, `mode`.", "question_id": 7506}
{"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}
{"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}
{"snippet": "copy.deepcopy(x, memo)", "intent": "Return a deep copy of `x` . With arguments `memo`.", "question_id": 1662}
{"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "zlib.adler32(data, value)", "intent": "Computes an Adler-32 checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 1 is used .", "question_id": 12893}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12458}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "joinable_queue.poll(timeout)", "intent": "Return whether there is any data available to be read . If `timeout` is not specified then it will return immediately .", "question_id": 6234}
{"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`, `updated`.", "question_id": 4163}
{"snippet": "platform.win32_ver(release='', version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7500}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "shlex.split(s, posix=True)", "intent": "Split the string `s` using shell-like syntax . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8270}
{"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}
{"snippet": "window.addch(ch)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2001}
{"snippet": "os.symlink(src, dst, target_is_directory=False)", "intent": "Create a symbolic link pointing to `src` named `dst` . Otherwise , the symlink will be created as a directory if `target_is_directory` is True or a file symlink ( the default ) otherwise .", "question_id": 6952}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "__import__(name, globals=None, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4140}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . ( Note _exit ( ) exits the process immediately , which means it doesn \u2019 t do any cleanup like flushing `file` buffers . ) If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3729}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5866}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9038}
{"snippet": "types.new_class(name, bases=())", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) . With arguments `bases`.", "question_id": 11171}
{"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "dataclasses.field(default=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function .", "question_id": 2168}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, filters=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5711}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "property(fset=None, doc=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4094}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "extension_file_loader.create_module(spec)", "intent": "Creates the module object from the given specification in accordance with PEP 489 . With arguments `spec`.", "question_id": 4906}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "bdb.get_bpbynumber(arg)", "intent": "Return a breakpoint specified by the given number . If `arg` is a string , it will be converted to a number .", "question_id": 799}
{"snippet": "queue.get(block)", "intent": "Remove and return an item from the queue . If optional args `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 6205}
{"snippet": "pickle.loads(bytes_object, encoding=\"ASCII\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7381}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "sys.getsizeof(object, default)", "intent": "Return the size of an `object` in bytes . If given , `default` will be returned if the object does not provide means to retrieve the size .", "question_id": 9802}
{"snippet": "doctest.DocTestFinder(verbose=False, recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2846}
{"snippet": "set | other | ...", "intent": "Return a new set with elements from the set and all others.", "question_id": 9446}
{"snippet": "directory.start_component(component=None, feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6099}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}
{"snippet": "TarFile.list(verbose=True, members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9930}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434}
{"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951}
{"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}
{"snippet": "importlib.machinery.ModuleSpec(name, loader, origin=None, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . Normally \u201c `origin` \u201d should be set , but it may be None ( the default ) which indicates it is unspecified ( e.g . With arguments `is_package`.", "question_id": 4917}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "question_id": 8797}
{"snippet": "pkgutil.extend_path(path, name)", "intent": "Extend the search `path` for the modules which comprise a package . It also looks for *.pkg files beginning where * matches the `name` argument .", "question_id": 7436}
{"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}
{"snippet": "pprint.PrettyPrinter(depth=None)", "intent": "Construct a PrettyPrinter instance . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7626}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "tempfile.mkstemp(prefix=None, dir=None)", "intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used . If `dir` is not None , the file will be created in that directory ; otherwise , a default directory is used .", "question_id": 10079}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "doctest.DocTestFinder(verbose=False, recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2846}
{"snippet": "py_compile.compile(file, doraise=False)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `doraise` is true , a PyCompileError is raised when an error is encountered while compiling file .", "question_id": 7824}
{"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "csv.DictReader(f, *args, **kwds, restval=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`, `restval`.", "question_id": 1695}
{"snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)", "intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "question_id": 12151}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}
{"snippet": "random.choices(population, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7901}
{"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544}
{"snippet": "asyncio.shield(aw, loop=None)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task . With arguments `loop`.", "question_id": 604}
{"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}
{"snippet": "importlib.util.find_spec(name, package=None)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4929}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "decimal.quantize(exp, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2463}
{"snippet": "marshal.dump(value, file, version)", "intent": "Write the `value` on the open `file` . The `version` argument indicates the data format that dump should use ( see below ) .", "question_id": 5878}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)", "intent": "Add `headers` and payload to `msg` : If `charset` is provided ( which is valid only for str ) , encode the string to bytes using the specified character set . With arguments `<'str'>`, `subtype`.", "question_id": 3047}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "config_parser.get(section, option, raw=False)", "intent": "Get an `option` value for the named `section` . All the ' % ' interpolations are expanded in the return values , unless the `raw` argument is true .", "question_id": 1525}
{"snippet": "control.event(event, argument, condition=1, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`, `ordering`.", "question_id": 6129}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}
{"snippet": "cgi.parse_qsl(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1043}
{"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}
{"snippet": "property(fget=None, fset=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fset` is a function for setting an attribute value .", "question_id": 4090}
{"snippet": "Path.mkdir(parents=False)", "intent": "Create a new directory at this given path . If `parents` is true , any missing parents of this path are created as needed ; they are created with the default permissions without taking mode into account ( mimicking the POSIX mkdir -p command ) .", "question_id": 7286}
{"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}
{"snippet": "coverage_results.write_results(show_missing=True, summary=False, coverdir=None)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits . Set `summary` to include in the output the coverage summary per module . `coverdir` specifies the directory into which the coverage result files will be output .", "question_id": 10732}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}
{"snippet": "os.walk(top, topdown=True, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6980}
{"snippet": "test.support.temp_cwd(quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10184}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "os.preadv(fd, buffers, offset)", "intent": "Read from a file descriptor `fd` at a position of `offset` into mutable bytes-like objects `buffers` , leaving the file offset unchanged .", "question_id": 6784}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "turtle.RawPen(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11159}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 49}
{"snippet": "mock.assert_has_calls(calls, any_order=False)", "intent": "assert the mock has been called with the specified `calls` . If `any_order` is false ( the default ) then the calls must be sequential .", "question_id": 11576}
{"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}
{"snippet": "plistlib.dumps(value, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `skipkeys`.", "question_id": 7574}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}
{"snippet": "io.open(file, mode='r', buffering=-1)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`, `buffering`.", "question_id": 5059}
{"snippet": "bytearray()", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor :", "question_id": 9266}
{"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}
{"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}
{"snippet": "Node.toprettyxml(indent=\"\\t\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12418}
{"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}
{"snippet": "bdb.Breakpoint(self, file, line, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 757}
{"snippet": "asyncio.open_connection(limit=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . `limit` determines the buffer size limit used by the returned StreamReader instance .", "question_id": 467}
{"snippet": "element_tree.find(match, namespaces=None)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`, `namespaces`.", "question_id": 12513}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdInput`.", "question_id": 9632}
{"snippet": "sequence_matcher.set_seq1(a)", "intent": "Set the first sequence to be compared . With arguments `a`.", "question_id": 2680}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .", "question_id": 9033}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}
{"snippet": "mmap.mmap(fileno, length, offset)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset .", "question_id": 5984}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}
{"snippet": "subprocess.check_output(args, timeout=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `timeout`.", "question_id": 9687}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}
{"snippet": "re.subn(pattern, repl, string, count=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`.", "question_id": 7956}
{"snippet": "null_translations.lngettext(singular, plural, n)", "intent": "Equivalent to gettext ( ) and ngettext ( ) , but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with set_output_charset ( ) . With arguments `singular`, `plural`, `n`.", "question_id": 4253}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "io_base.truncate(size=None)", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5079}
{"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2112}
{"snippet": "plistlib.loads(data, fmt=None)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`.", "question_id": 7556}
{"snippet": "loop.sock_recv(sock, nbytes)", "intent": "Receive up to `nbytes` from `sock` .", "question_id": 276}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914}
{"snippet": "json.dumps(obj, **kw, separators=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `separators`.", "question_id": 5287}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}
{"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}
{"snippet": "curses.ungetch(ch)", "intent": "Push `ch` so the next getch ( ) will return it .", "question_id": 1993}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}
{"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10233}
{"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3727}
{"snippet": "nntplib.NNTP_SSL(host, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "question_id": 6432}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "tixCommand.tix_cget(option)", "intent": "Returns the current value of the configuration `option` given by option .", "question_id": 10582}
{"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}
{"snippet": "asyncio.open_connection(limit=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . `limit` determines the buffer size limit used by the returned StreamReader instance .", "question_id": 467}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "doctest.testmod(optionflags=0)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2782}
{"snippet": "os.walk(top, topdown=True, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6980}
{"snippet": "faulthandler.unregister(signum)", "intent": "Unregister a user signal : uninstall the handler of the `signum` signal installed by register ( ) .", "question_id": 3739}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "argparse.FileType(mode='r', encoding=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `encoding`.", "question_id": 91}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}
{"snippet": "codecs.iterencode(iterator, encoding, **kwargs)", "intent": "Uses an incremental encoder to iteratively encode the input provided by `iterator` . With arguments `encoding`, `**kwargs`.", "question_id": 1239}
{"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}
{"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}
{"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}
{"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)", "intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "question_id": 12151}
{"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}
{"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8728}
{"snippet": "doctest.DocFileSuite(*paths, setUp=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `setUp` specifies a set-up function for the test suite . With arguments `*paths`.", "question_id": 2799}
{"snippet": "unittest.TextTestRunner(stream=None, descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11542}
{"snippet": "tempfile.mkdtemp(prefix=None, dir=None)", "intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "question_id": 10087}
{"snippet": "Queue.put(item, block=True, timeout=None)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7852}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}
{"snippet": "property(fset=None, fdel=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . `fdel` is a function for deleting an attribute value .", "question_id": 4093}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12528}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "pdb.Pdb(stdout=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7344}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "Template.open(file, mode)", "intent": "Return a file-like object , open to `file` , but read from or written to by the pipeline . With arguments `mode`.", "question_id": 7433}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}
{"snippet": "http.client.HTTPResponse(sock, method=None, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `method`, `url`.", "question_id": 4408}
{"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}
{"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}
{"snippet": "asyncio.Queue(loop=None)", "intent": "A first in , first out ( FIFO ) queue . With arguments `loop`.", "question_id": 447}
{"snippet": "loop.getaddrinfo(host, port, type=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `proto`.", "question_id": 297}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "ur_lopener.open_unknown(fullurl, data=None)", "intent": "Overridable interface to open unknown URL types . With arguments `fullurl`, `data`.", "question_id": 11895}
{"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430}
{"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11149}
{"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425}
{"snippet": "bz2.BZ2File(filename)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 886}
{"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}
{"snippet": "socket.getaddrinfo(host, port)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None .", "question_id": 8635}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5865}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 1119}
{"snippet": "connection.executemany(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8814}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 967}
{"snippet": "dis.findlinestarts(code)", "intent": "This generator function uses the co_firstlineno and co_lnotab attributes of the `code` object code to find the offsets which are starts of lines in the source code .", "question_id": 2729}
{"snippet": "turtle.screensize(canvwidth=None, canvheight=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `canvheight`, `bg`.", "question_id": 11054}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2666}
{"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}
{"snippet": "ZipFile.extract(member, path=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `path` specifies a different directory to extract to .", "question_id": 12815}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}
{"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}
{"snippet": "queue_listener.addHandler(hdlr)", "intent": "Adds the specified handler `hdlr` to this logger .", "question_id": 5580}
{"snippet": "webbrowser.open(url, new=0, autoraise=True)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12105}
{"snippet": "chunk.Chunk(file, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1078}
{"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}
{"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "base_manager.register(typeid, callable, proxytype, exposed, method_to_typeid, create_method)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid . `exposed` is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod ( ) . `method_to_typeid` is a mapping used to specify the return type of those exposed methods which should return a proxy . If a manager instance will be connected to the server using the connect ( ) method , or if the `create_method` argument is False then this can be left as None .", "question_id": 6288}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}
{"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434}
{"snippet": "unicodedata.name(chr)", "intent": "Returns the name assigned to the character `chr` as a string .", "question_id": 11342}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "scheduler.enterabs(time, priority, action, argument=(), kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8121}
{"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 966}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "bytes(source, encoding, errors)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`, `errors`.", "question_id": 3985}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "itertools.filterfalse(predicate, iterable)", "intent": "Make an iterator that filters elements from `iterable` returning only those for which the `predicate` is False .", "question_id": 5252}
{"snippet": "email.generator.Generator(outfp)", "intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3092}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "gettext.bind_textdomain_codeset(domain)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4212}
{"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "datetime.datetime(year, month, day, microsecond=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `microsecond`.", "question_id": 2251}
{"snippet": "unittest.main(defaultTest=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11547}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "process.join(timeout)", "intent": "If the optional argument `timeout` is None ( the default ) , the method blocks until the process whose join ( ) method is called terminates .", "question_id": 6177}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "decimal.quantize(exp, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2463}
{"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}
{"snippet": "message.__str__()", "intent": "Equivalent to as_string ( ) .", "question_id": 2946}
{"snippet": "pkgutil.walk_packages(path=None, prefix='', onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7456}
{"snippet": "asyncio.open_connection(sock=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `sock`.", "question_id": 472}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}
{"snippet": "ftplib.FTP(host='', passwd='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3886}
{"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}
{"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}
{"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12801}
{"snippet": "turtle.tracer(n=None, delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11061}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1705}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256}
{"snippet": "Queue.put(item, block=True)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7850}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "datetime.replace(microsecond=self.microsecond)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "question_id": 2291}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "subprocess.call(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9663}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "platform.libc_ver(version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7540}
{"snippet": "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4940}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}
{"snippet": "json.dump(obj, fp, **kw, indent=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level . With arguments `**kw`.", "question_id": 5276}
{"snippet": "sequence_matcher.set_seq2(b)", "intent": "Set the second sequence to be compared . With arguments `b`.", "question_id": 2681}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "glob.glob(pathname, recursive=False)", "intent": "Return a possibly-empty list of path names that match `pathname` , which must be a string containing a path specification . If `recursive` is true , the pattern \u201c ** \u201d will match any files and zero or more directories , subdirectories and symbolic links to directories .", "question_id": 4265}
{"snippet": "secrets.token_bytes(nbytes=None)", "intent": "Return a random byte string containing `nbytes` number of bytes .", "question_id": 8136}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}
{"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}
{"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "question_id": 6327}
{"snippet": "ZipFile.extract(member, pwd=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `pwd` is the password used for encrypted files .", "question_id": 12816}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}
{"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}
{"snippet": "struct.pack_into(format, buffer, offset, v1, v2)", "intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "question_id": 9552}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 49}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "question_id": 8797}
{"snippet": "config_parser.optionxform(option)", "intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "question_id": 1565}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "pool.apply_async(func, args, kwds, callback)", "intent": "A variant of the apply ( ) method which returns a result object . If `callback` is specified then it should be a callable which accepts a single argument . With arguments `func`, `args`, `kwds`.", "question_id": 6336}
{"snippet": "mime_types.read_windows_registry(strict=True)", "intent": "Load MIME type information from the Windows registry . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "question_id": 5975}
{"snippet": "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`, `disable_existing_loggers`.", "question_id": 5415}
{"snippet": "loop.sock_recv(sock, nbytes)", "intent": "Receive up to `nbytes` from `sock` .", "question_id": 276}
{"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}
{"snippet": "parser.parse(fp)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object .", "question_id": 3388}
{"snippet": "lzma.open(filename, mode=\"rb\", format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5665}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715}
{"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}
{"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}
{"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}
{"snippet": "re.subn(pattern, repl, string)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`.", "question_id": 7955}
{"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004}
{"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714}
{"snippet": "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd, is_authenticated=False)", "intent": "`realm` , `uri` , `user` , `passwd` are as for HTTPPasswordMgr.add_password ( ) . `is_authenticated` sets the initial value of the is_authenticated flag for the given URI or list of URIs .", "question_id": 11860}
{"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "binascii.a2b_base64(string)", "intent": "Convert a block of base64 data back to binary and return the binary data . With arguments `string`.", "question_id": 823}
{"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}
{"snippet": "os.spawnv(mode, path, args)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7057}
{"snippet": "multiprocessing.pool.Pool(processes, initializer)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts .", "question_id": 6329}
{"snippet": "FTP.retrbinary(cmd, callback, rest=None)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . `rest` means the same thing as in the transfercmd ( ) method .", "question_id": 3928}
{"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}
{"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "writer.new_alignment(align)", "intent": "Set the alignment style . The `align` value can be any object , but by convention is a string or None , where None indicates that the writer \u2019 s \u201c preferred \u201d alignment should be used .", "question_id": 3842}
{"snippet": "raw_io_base.read(size=-1)", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5085}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "FTP.retrbinary(cmd, callback, blocksize=8192)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . The optional `blocksize` argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer ( which will also be the largest size of the data blocks passed to callback ) .", "question_id": 3927}
{"snippet": "generator.flatten(msg, linesep=None)", "intent": "Print the textual representation of the message object structure rooted at `msg` to the output file specified when the Generator instance was created . If `linesep` is not None , use it as the separator character between all the lines of the flattened message .", "question_id": 3102}
{"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "typing.get_type_hints(obj, globals, locals)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . In addition , forward references encoded as string literals are handled by evaluating them in `globals` and `locals` namespaces . With arguments `obj`.", "question_id": 11324}
{"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}
{"snippet": "platform.win32_ver(release='', version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7500}
{"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}
{"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474}
{"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}
{"snippet": "platform.win32_ver(release='', version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7500}
{"snippet": "Pattern.findall(string, pos, endpos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7981}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}
{"snippet": "frozenset()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9434}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}
{"snippet": "IMAP4.setannotation(mailbox, entry, attribute)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "question_id": 4735}
{"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdOutput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdOutput`.", "question_id": 9633}
{"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820}
{"snippet": "ctypes.CDLL(name, use_last_error=False)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `use_last_error`.", "question_id": 1744}
{"snippet": "code.interact(readfunc=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1169}
{"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}
{"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}
{"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}
{"snippet": "mimetypes.MimeTypes(strict=True)", "intent": "This class represents a MIME-types database . With arguments `strict`.", "question_id": 5958}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "ctypes.wstring_at(address, size=-1)", "intent": "This function returns the wide character string starting at memory `address` address as a string . If `size` is specified , it is used as the number of characters of the string , otherwise the string is assumed to be zero-terminated .", "question_id": 1841}
{"snippet": "concurrent.futures.wait(fs, return_when=ALL_COMPLETED)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `return_when` indicates when this function should return .", "question_id": 1482}
{"snippet": "operator.__abs__(obj)", "intent": "Return the absolute value of `obj` .", "question_id": 6531}
{"snippet": "bytearray.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9306}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}
{"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', policy=compat32)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "question_id": 3323}
{"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}
{"snippet": "asyncio.open_unix_connection(ssl=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `ssl`.", "question_id": 487}
{"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}
{"snippet": "decimal.quantize(exp, rounding=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2462}
{"snippet": "warnings.filterwarnings(action, message='', lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `lineno`.", "question_id": 12031}
{"snippet": "locale.format(format, val, grouping=False)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`, `grouping`.", "question_id": 5389}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}
{"snippet": "codecs.open(filename, mode='r')", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1226}
{"snippet": "locale.currency(val, grouping=False, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5398}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1706}
{"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}
{"snippet": "http.client.HTTPResponse(sock, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `url`.", "question_id": 4405}
{"snippet": "TarFile.extractall(path=\".\", members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9936}
{"snippet": "shutil.unpack_archive(filename, extract_dir, format)", "intent": "Unpack an archive . `filename` is the full path of the archive . `extract_dir` is the name of the target directory where the archive is unpacked . `format` is the archive format : one of \u201c zip \u201d , \u201c tar \u201d , \u201c gztar \u201d , \u201c bztar \u201d , or \u201c xztar \u201d .", "question_id": 8363}
{"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}
{"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "doctest.testmod(verbose=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2780}
{"snippet": "compileall.compile_path(legacy=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `legacy`.", "question_id": 1434}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "urllib.parse.urlsplit(urlstring, scheme='')", "intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`, `scheme`.", "question_id": 11691}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "bytearray.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9380}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}
{"snippet": "Codec.decode(input, errors)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1263}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`.", "question_id": 12848}
{"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}
{"snippet": "test.support.run_doctest(module, verbosity=None, optionflags=0)", "intent": "Run doctest.testmod ( ) on the given `module` . If `verbosity` is None , doctest.testmod ( ) is run with verbosity set to verbose . `optionflags` is passed as optionflags to doctest.testmod ( ) .", "question_id": 10161}
{"snippet": "turtle.screensize(canvheight=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvheight`, `bg`.", "question_id": 11053}
{"snippet": "os.walk(top, onerror=None)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "question_id": 6977}
{"snippet": "socket.gethostbyname_ex(hostname)", "intent": "Translate a host name to IPv4 address format , extended interface . Return a triple ( `hostname` , aliaslist , ipaddrlist ) where hostname is the primary host name responding to the given ip_address , aliaslist is a ( possibly empty ) list of alternative host names for the same address , and ipaddrlist is a list of IPv4 addresses for the same interface on the same host ( often but not always a single address ) .", "question_id": 8648}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "element_tree.find(match)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12512}
{"snippet": "cmd.Cmd(completekey='tab', stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1131}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12467}
{"snippet": "ctypes.OleDLL(name, use_errno=False)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `use_errno`.", "question_id": 1753}
{"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714}
{"snippet": "pprint.PrettyPrinter(indent=1, width=80)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7629}
{"snippet": "Path.replace(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7309}
{"snippet": "doc_test_finder.find(obj, name, module, globs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2851}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}
{"snippet": "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd)", "intent": "`realm` , `uri` , `user` , `passwd` are as for HTTPPasswordMgr.add_password ( ) .", "question_id": 11859}
{"snippet": "bdb.runeval(expr)", "intent": "Debug an expression executed via the eval ( ) function . With arguments `expr`.", "question_id": 811}
{"snippet": "logging.Formatter(fmt=None, style='%')", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5615}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075}
{"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258}
{"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}
{"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}
{"snippet": "re.error(msg, pos=None)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . With arguments `msg`, `pos`.", "question_id": 7963}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)", "intent": "Report that the given `example` raised an unexpected exception . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `exc_info` is a tuple containing information about the unexpected exception ( as returned by sys.exc_info ( ) ) .", "question_id": 2872}
{"snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`, `handle`.", "question_id": 1765}
{"snippet": "os.register_at_fork(before=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "question_id": 7046}
{"snippet": "io.FileIO(name, mode='r', opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending . A custom `opener` can be used by passing a callable as opener .", "question_id": 5104}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "compileall.compile_dir(dir, force=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `force` is true , modules are re-compiled even if the timestamps are up to date .", "question_id": 1412}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}
{"snippet": "winreg.OpenKey(key, sub_key, reserved=0)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "question_id": 12139}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}
{"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "aifc.readframes(nframes)", "intent": "Read and return the next `nframes` frames from the audio file .", "question_id": 20}
{"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}
{"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "mailbox.Maildir(dirname, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5757}
{"snippet": "logging.handlers.SocketHandler(host, port)", "intent": "Returns a new instance of the SocketHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5482}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "turtle.backward(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10907}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "timeit.Timer(setup='pass')", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10499}
{"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769}
{"snippet": "urllib.request.urlretrieve(url, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11884}
{"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "os.utime(path, ns, follow_symlinks=True)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `follow_symlinks`.", "question_id": 6962}
{"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}
{"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12454}
{"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}
{"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2185}
{"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}
{"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`.", "question_id": 12848}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}
{"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}
{"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "unittest.mock.mock_open(mock=None, read_data=None)", "intent": "A helper function to create a `mock` to replace the use of open ( ) . `read_data` is a string for the read ( ) , readline ( ) , and readlines ( ) methods of the file handle to return .", "question_id": 11656}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "gettext.bind_textdomain_codeset(domain)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4212}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4941}
{"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "codecs.encode(obj, encoding='utf-8', errors='strict')", "intent": "Encodes `obj` using the codec registered for `encoding` . The default error handler is 'strict ' meaning that encoding `errors` raise ValueError ( or a more codec specific subclass , such as UnicodeEncodeError ) .", "question_id": 1195}
{"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}
{"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}
{"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}
{"snippet": "test_case.assertNotAlmostEqual(first, second, msg=None, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "question_id": 11431}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 49}
{"snippet": "HTMLParser.handle_startendtag(tag, attrs)", "intent": "Similar to handle_starttag ( ) , but called when the parser encounters an XHTML-style empty `tag` ( < img ... / > ) . With arguments `attrs`.", "question_id": 4358}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "array.array(typecode, initializer)", "intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "question_id": 115}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "tempfile.NamedTemporaryFile(mode='w+b', buffering=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`, `buffering`.", "question_id": 10052}
{"snippet": "deque.extend(iterable)", "intent": "Extend the right side of the deque by appending elements from the `iterable` argument .", "question_id": 1358}
{"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "importlib.util.module_from_spec(spec)", "intent": "Create a new module based on `spec` and spec.loader.create_module .", "question_id": 4930}
{"snippet": "http.server.SimpleHTTPRequestHandler(request, client_address, server)", "intent": "This class serves files from the current `directory` and below , directly mapping the directory structure to HTTP requests . A lot of the work , such as parsing the `request` , is done by the base class BaseHTTPRequestHandler . With arguments `client_address`, `server`.", "question_id": 4659}
{"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}
{"snippet": "ArgumentParser.exit(status=0, message=None)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 113}
{"snippet": "doctest.Example(source, want, exc_msg=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`.", "question_id": 2825}
{"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}
{"snippet": "logging.handlers.WatchedFileHandler(filename, mode='a')", "intent": "Returns a new instance of the WatchedFileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5441}
{"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}
{"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}
{"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}
{"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}
{"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}
{"snippet": "traceback.print_exc(limit=None, chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10750}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)", "intent": "nnn should be a three-digit HTTP error `code` . With arguments `req`, `fp`, `msg`, `hdrs`.", "question_id": 11847}
{"snippet": "queue_listener.removeHandler(hdlr)", "intent": "Removes the specified handler `hdlr` from this logger .", "question_id": 5581}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}
{"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10233}
{"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}
{"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}
{"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}
{"snippet": "test.support.requires(resource)", "intent": "Raise ResourceDenied if `resource` is not available .", "question_id": 10147}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12528}
{"snippet": "definition.__qualname__", "intent": "The qualified name of the class, function, method, descriptor, or generator instance.", "question_id": 9503}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stderr=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 526}
{"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}
{"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)", "intent": "The same as RawValue ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes object . With arguments `typecode_or_type`, `*args`.", "question_id": 6274}
{"snippet": "CookiePolicy.return_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be returned to server . `request` is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header ( ) .", "question_id": 4533}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}
{"snippet": "shelve.BsdDbShelf(dict, protocol=None, keyencoding='utf-8')", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8257}
{"snippet": "json.JSONDecodeError(msg, doc, pos)", "intent": "Subclass of ValueError with the following additional attributes : With arguments `msg`, `doc`, `pos`.", "question_id": 5335}
{"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}
{"snippet": "subprocess.call(args, stdin=None, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `stdin`.", "question_id": 9666}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "mock.assert_has_calls(calls, any_order=False)", "intent": "assert the mock has been called with the specified `calls` . If `any_order` is false ( the default ) then the calls must be sequential .", "question_id": 11576}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2665}
{"snippet": "oss_mixer_device.set_recsrc(bitmask)", "intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "question_id": 7209}
{"snippet": "profile.runctx(command, globals, locals)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string .", "question_id": 7665}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "os.posix_fadvise(fd, offset, len, advice)", "intent": "Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations . The `advice` applies to the region of the file specified by `fd` starting at `offset` and continuing for `len` bytes .", "question_id": 6776}
{"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`, `parser_class`.", "question_id": 80}
{"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}
{"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}
{"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "turtle.screensize(canvwidth=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `bg`.", "question_id": 11052}
{"snippet": "code.interact(banner=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1167}
{"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "csv.DictReader(f, *args, **kwds, restkey=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`.", "question_id": 1694}
{"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}
{"snippet": "mailbox.mbox(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5770}
{"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}
{"snippet": "tty.setraw(fd, when=termios.TCSAFLUSH)", "intent": "Change the mode of the file descriptor `fd` to raw . If `when` is omitted , it defaults to termios.TCSAFLUSH , and is passed to termios.tcsetattr ( ) .", "question_id": 10900}
{"snippet": "ensurepip.bootstrap(upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3491}
{"snippet": "text_calendar.pryear(theyear, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`.", "question_id": 948}
{"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "null_translations.lngettext(singular, plural, n)", "intent": "Equivalent to gettext ( ) and ngettext ( ) , but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with set_output_charset ( ) . With arguments `singular`, `plural`, `n`.", "question_id": 4253}
{"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}
{"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}
{"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}
{"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}
{"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}
{"snippet": "dispatcher.listen(backlog)", "intent": "Listen for connections made to the socket . The `backlog` argument specifies the maximum number of queued connections and should be at least 1 ; the maximum value is system-dependent ( usually 5 ) .", "question_id": 670}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "doc_test_finder.find(obj, name, module, globs, extraglobs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2850}
{"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}
{"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}
{"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}
{"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}
{"snippet": "chunk.seek(pos)", "intent": "Set the chunk \u2019 s current position . With arguments `pos`.", "question_id": 1087}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "FTP.connect(host='', port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3909}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`, `stdout`, `stderr`.", "question_id": 328}
{"snippet": "HTTPConnection.request(method, url, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4433}
{"snippet": "multiprocessing.Process(kwargs={})", "intent": "Process objects represent activity that is run in a separate process . `kwargs` is a dictionary of keyword arguments for the target invocation .", "question_id": 6170}
{"snippet": "fileinput.FileInput(bufsize=0)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `bufsize`.", "question_id": 3804}
{"snippet": "wsgiref.util.request_uri(environ, include_query=True)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . If `include_query` is false , the query string is not included in the resulting URI . With arguments `environ`.", "question_id": 12212}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "bytearray(source, encoding)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`.", "question_id": 3982}
{"snippet": "zlib.compressobj(zdict, level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12898}
{"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}
{"snippet": "profile.Profile(timer=None, timeunit=0.0)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . If the number is an integer , the `timeunit` specifies a multiplier that specifies the duration of each unit of time .", "question_id": 7674}
{"snippet": "stat.S_ISDIR(mode)", "intent": "Return non-zero if the `mode` is from a directory .", "question_id": 9061}
{"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "io.StringIO(initial_value='', newline='\\n')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5167}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `dllname` should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log ( if not specified , 'win32service.pyd ' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5509}
{"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367}
{"snippet": "subprocess.check_call(args, timeout=None)", "intent": "Run command with arguments . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface . With arguments `args`.", "question_id": 9675}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, timeout=1.0)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . A `timeout` can be specified for communication with the SMTP server using the timeout argument . With arguments `fromaddr`.", "question_id": 5518}
{"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "nntplib.NNTP(host, timeout, port=119)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection .", "question_id": 6400}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}
{"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823}
{"snippet": "unittest.registerResult(result)", "intent": "Register a TestResult object for control-c handling . Registering a `result` stores a weak reference to it , so it doesn \u2019 t prevent the result from being garbage collected .", "question_id": 11556}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}
{"snippet": "shutil.copytree(src, dst, ignore=None, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8331}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255}
{"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}
{"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}
{"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}
{"snippet": "email.utils.formatdate(timeval=None, localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3475}
{"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `udata`.", "question_id": 8165}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "lzma.LZMAFile(filename=None, format=None)", "intent": "Open an LZMA-compressed file in binary `mode` . The `filename` argument specifies either the file object to wrap , or the name of the file to open ( as a str , bytes or path-like object ) . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5674}
{"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}
{"snippet": "mailcap.findmatch(caps, filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5875}
{"snippet": "mime_types.readfp(fp, strict=True)", "intent": "Load MIME type information from an open file `fp` . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "question_id": 5973}
{"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}
{"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}
{"snippet": "message.set_default_type(ctype)", "intent": "Set the default content type . `ctype` should either be text/plain or message/rfc822 , although this is not enforced .", "question_id": 2982}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}
{"snippet": "platform.mac_ver('', ''), release='')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7510}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `func`.", "question_id": 5586}
{"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}
{"snippet": "shlex.error_leader(lineno=None)", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `lineno`.", "question_id": 8292}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "loop.sock_sendall(sock, data)", "intent": "Send `data` to the `sock` socket .", "question_id": 278}
{"snippet": "FTP.login(passwd='', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3921}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}
{"snippet": "calendar.prcal(year, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `c`.", "question_id": 1004}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}
{"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}
{"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "ZeroDivisionError", "intent": "Raised when the second argument of a division or modulo operation is zero.", "question_id": 3683}
{"snippet": "heapq.heappushpop(heap, item)", "intent": "Push `item` on the `heap` , then pop and return the smallest item from the heap .", "question_id": 4318}
{"snippet": "extension_file_loader.create_module(spec)", "intent": "Creates the module object from the given specification in accordance with PEP 489 . With arguments `spec`.", "question_id": 4906}
{"snippet": "parser.sequence2st(sequence)", "intent": "This function accepts a parse tree represented as a `sequence` and builds an internal representation if possible .", "question_id": 7212}
{"snippet": "logging.Formatter(fmt=None, datefmt=None)", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . If no `datefmt` is specified , a format is used which is described in the formatTime ( ) documentation .", "question_id": 5614}
{"snippet": "Path.resolve(strict=False)", "intent": "Make the path absolute , resolving any symlinks . If the path doesn \u2019 t exist and `strict` is True , FileNotFoundError is raised .", "question_id": 7311}
{"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}
{"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}
{"snippet": "socket.ioctl(control, option)", "intent": "The ioctl ( ) method is a limited interface to the WSAIoctl system interface . Currently only the following `control` codes are supported : SIO_RCVALL , SIO_KEEPALIVE_VALS , and SIO_LOOPBACK_FAST_PATH . With arguments `option`.", "question_id": 8688}
{"snippet": "config_parser.remove_section(section)", "intent": "Remove the specified `section` from the configuration .", "question_id": 1564}
{"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493}
{"snippet": "faulthandler.unregister(signum)", "intent": "Unregister a user signal : uninstall the handler of the `signum` signal installed by register ( ) .", "question_id": 3739}
{"snippet": "email.generator.DecodedGenerator(outfp)", "intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "question_id": 3106}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "bz2.BZ2File(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 889}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}
{"snippet": "io.open(file, mode='r')", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`.", "question_id": 5052}
{"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}
{"snippet": "os.execle(path, arg0, arg1, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "question_id": 7010}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}
{"snippet": "multiprocessing.Barrier(parties, action)", "intent": "A barrier object : a clone of threading.Barrier . With arguments `parties`, `action`.", "question_id": 6244}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}
{"snippet": "bdb.runeval(expr, locals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 813}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`, `hStdInput`.", "question_id": 9632}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "BaseTransport.get_extra_info(name, default=None)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get . `default` is the value to return if the information is not available , or if the transport does not support querying it with the given third-party event loop implementation or on the current platform .", "question_id": 399}
{"snippet": "subprocess.call(args, stdin=None, shell=False)", "intent": "Run the command described by `args` . With arguments `stdin`, `shell`.", "question_id": 9668}
{"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "tzinfo.fromutc(dt)", "intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "question_id": 2356}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 759}
{"snippet": "loop.getaddrinfo(host, port, family=0, flags=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `flags`.", "question_id": 296}
{"snippet": "xmlrpc.client.ServerProxy(uri, transport=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional second argument is a `transport` factory instance ; by default it is an internal SafeTransport instance for https : URLs and an internal HTTP Transport instance otherwise . With arguments `uri`.", "question_id": 12670}
{"snippet": "syslog.openlog(ident)", "intent": "Logging options of subsequent syslog ( ) calls can be set by calling openlog ( ) . The optional `ident` keyword argument is a string which is prepended to every message , and defaults to sys.argv [ 0 ] with leading path components stripped .", "question_id": 9881}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}
{"snippet": "msvcrt.open_osfhandle(handle, flags)", "intent": "Create a C runtime file descriptor from the file `handle` handle . The `flags` parameter should be a bitwise OR of os.O_APPEND , os.O_RDONLY , and os.O_TEXT .", "question_id": 6153}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}
{"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}
{"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}
{"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741}
{"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509}
{"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}
{"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}
{"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}
{"snippet": "test.support.import_module(name, required_on(), deprecated=False)", "intent": "This function imports and returns the named module . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`, `required_on()`.", "question_id": 10241}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}
{"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}
{"snippet": "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10972}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}
{"snippet": "datetime.time(minute=0)", "intent": "All arguments are optional . With arguments `minute`.", "question_id": 2316}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "doctest.Example(source, want, lineno=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`.", "question_id": 2826}
{"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}
{"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "SubprocessTransport.get_pipe_transport(fd)", "intent": "Return the transport for the communication pipe corresponding to the integer file descriptor `fd` :", "question_id": 420}
{"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}
{"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "warnings.simplefilter(action, category=Warning, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `lineno`, `append`.", "question_id": 12040}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "xml.etree.ElementTree.tostringlist(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12464}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}
{"snippet": "loop.remove_writer(fd)", "intent": "Stop monitoring the `fd` file descriptor for write availability .", "question_id": 275}
{"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2660}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "Path.rglob(pattern)", "intent": "This is like calling Path.glob ( ) with \u201c **/ \u201d added in front of the given relative `pattern` :", "question_id": 7312}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10973}
{"snippet": "formatter.push_margin(margin)", "intent": "Increase the number of left `margin` indentations by one , associating the logical tag margin with the new indentation .", "question_id": 3830}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}
{"snippet": "mimetypes.MimeTypes(filenames=())", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database .", "question_id": 5957}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "path_finder.find_spec(fullname, path=None, target=None)", "intent": "Class method that attempts to find a spec for the module specified by `fullname` on sys.path or , if defined , on `path` . With arguments `target`.", "question_id": 4878}
{"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "question_id": 11477}
{"snippet": "style.lookup(style, option, state=None, default=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10680}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, timeout=1.0)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . A `timeout` can be specified for communication with the SMTP server using the timeout argument . With arguments `fromaddr`.", "question_id": 5518}
{"snippet": "warnings.filterwarnings(action, message='', lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `lineno`.", "question_id": 12031}
{"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "calendar.prmonth(theyear, themonth, w=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`.", "question_id": 994}
{"snippet": "filecmp.dircmp(a, b, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3762}
{"snippet": "@dataclasses.dataclass(repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `repr`.", "question_id": 2159}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED, allowZip64=True)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`, `allowZip64`.", "question_id": 12854}
{"snippet": "test.support.calcvobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nPn { `fmt` } 0n or , if gettotalrefcount exists , 2PnPn { fmt } 0P .", "question_id": 10201}
{"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996}
{"snippet": "py_compile.compile(file, cfile=None, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . The byte-code is written to `cfile` , which defaults to the PEP 3147/PEP 488 path , ending in .pyc . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7827}
{"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}
{"snippet": "plistlib.dumps(value, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `skipkeys`.", "question_id": 7574}
{"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}
{"snippet": "logging.handlers.SocketHandler(host, port)", "intent": "Returns a new instance of the SocketHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5482}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}
{"snippet": "UserWarning", "intent": "Base class for warnings generated by user code.", "question_id": 3702}
{"snippet": "SimpleXMLRPCServer.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request .", "question_id": 12735}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "smtplib.SMTP_SSL(port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8480}
{"snippet": "test.support.run_unittest(*classes)", "intent": "Execute unittest.TestCase subclasses passed to the function . With arguments `*classes`.", "question_id": 10157}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}
{"snippet": "bisect.insort_right(a, x, lo=0, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`, `hi`.", "question_id": 871}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}
{"snippet": "pkgutil.extend_path(path, name)", "intent": "Extend the search `path` for the modules which comprise a package . It also looks for *.pkg files beginning where * matches the `name` argument .", "question_id": 7436}
{"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}
{"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996}
{"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "mailbox.mbox(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5770}
{"snippet": "config_parser.items(section, raw=False)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1557}
{"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}
{"snippet": "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12420}
{"snippet": "difflib.unified_diff(a, b, fromfile='', fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2655}
{"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}
{"snippet": "os.register_at_fork(before=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_child`.", "question_id": 7050}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}
{"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}
{"snippet": "shutil.copyfile(src, dst)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst .", "question_id": 8311}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}
{"snippet": "signal.setitimer(which, seconds)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8391}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}
{"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}
{"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "bz2.BZ2File(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 887}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}
{"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}
{"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}
{"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}
{"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}
{"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}
{"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}
{"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}
{"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}
{"snippet": "XMLReader.setDTDHandler(handler)", "intent": "Set the current DTDHandler . With arguments `handler`.", "question_id": 12617}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "asyncio.wrap_future(future)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`.", "question_id": 357}
{"snippet": "pickle.Unpickler(file, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7400}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}
{"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}
{"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}
{"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}
{"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}
{"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "asyncio.open_connection(limit=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . `limit` determines the buffer size limit used by the returned StreamReader instance .", "question_id": 467}
{"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}
{"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}
{"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}
{"snippet": "difflib.context_diff(a, b, fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2631}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}
{"snippet": "ctypes.PyDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`, `mode`.", "question_id": 1771}
{"snippet": "config_parser.read(filenames, encoding=None)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed . With arguments `encoding`.", "question_id": 1513}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}
{"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "winreg.OpenKeyEx(key, sub_key, reserved=0)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "question_id": 12143}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}
{"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}
{"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}
{"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}
{"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}
{"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}
{"snippet": "Morsel.js_output(attrs=None)", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP header was sent . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4606}
{"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}
{"snippet": "ast.parse(source, filename='<unknown>', mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 148}
{"snippet": "AU_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 9725}
{"snippet": "warnings.filterwarnings(action, message='', lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `lineno`.", "question_id": 12031}
{"snippet": "stream_writer.write(object)", "intent": "Writes the `object` \u2019 s contents encoded to the stream .", "question_id": 1281}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "dis.dis(x=None, depth=None)", "intent": "Disassemble the `x` object . The maximal `depth` of recursion is limited by depth unless it is None .", "question_id": 2712}
{"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}
{"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}
{"snippet": "directory.start_component(component=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory .", "question_id": 6094}
{"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}
{"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild, context)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . `context` can be used to specify the context used for starting the worker processes . With arguments `initargs`.", "question_id": 6326}
{"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944}
{"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}
{"snippet": "stream_writer.get_extra_info(name)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`.", "question_id": 515}
{"snippet": "py_compile.compile(file, cfile=None, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . The byte-code is written to `cfile` , which defaults to the PEP 3147/PEP 488 path , ending in .pyc . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7827}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}
{"snippet": "email.message_from_string(s, policy=policy.compat32)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) . `_class` and `policy` are interpreted as with the Parser class constructor .", "question_id": 3406}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "FileCookieJar.load(filename=None)", "intent": "Load cookies from a file . With arguments `filename`.", "question_id": 4507}
{"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "traceback.format_exception(etype, value, tb)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`.", "question_id": 10777}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}
{"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}
{"snippet": "locale.format(format, val)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`.", "question_id": 5388}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}
{"snippet": "fcntl.ioctl(fd, request, arg=0)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . With arguments `fd`.", "question_id": 3743}
{"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}
{"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}
{"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}
{"snippet": "os.utime(path, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6968}
{"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402}
{"snippet": "bz2.BZ2File(filename, mode='r', buffering=None, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 893}
{"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}
{"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630}
{"snippet": "importlib.machinery.SourceFileLoader(fullname, path)", "intent": "A concrete implementation of importlib.abc.SourceLoader by subclassing importlib.abc.FileLoader and providing some concrete implementations of other methods . With arguments `fullname`, `path`.", "question_id": 4889}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "counter.update(iterable-or-mapping)", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1348}
{"snippet": "header.append(s, charset=None, errors='strict')", "intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "question_id": 3129}
{"snippet": "doctest.Example(source, want, exc_msg=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`.", "question_id": 2825}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}
{"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11422}
{"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}
{"snippet": "parser.issuite(st)", "intent": "This function mirrors isexpr ( ) in that it reports whether an ST object represents an 'exec ' form , commonly known as a \u201c suite. \u201d It is not safe to assume that this function is equivalent to not isexpr ( `st` ) , as additional syntactic fragments may be supported in the future .", "question_id": 7225}
{"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794}
{"snippet": "collections.namedtuple(typename, field_names, defaults=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . `defaults` can be None or an iterable of default values .", "question_id": 1378}
{"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "traceback.FrameSummary(filename, lineno, name)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . With arguments `filename`, `lineno`, `name`.", "question_id": 10833}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}
{"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "ctypes.byref(obj, offset)", "intent": "Returns a light-weight pointer to `obj` , which must be an instance of a ctypes type . `offset` defaults to zero , and must be an integer that will be added to the internal pointer value .", "question_id": 1810}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "datetime.astimezone(tz=None)", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2295}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}
{"snippet": "mock.assert_called_with(*args, **kwargs)", "intent": "This method is a convenient way of asserting that calls are made in a particular way : With arguments `*args`, `**kwargs`.", "question_id": 11572}
{"snippet": "select.kevent(ident)", "intent": "( Only supported on BSD . ) With arguments `ident`.", "question_id": 8156}
{"snippet": "threading.Condition(lock=None)", "intent": "This class implements condition variable objects . If the `lock` argument is given and not None , it must be a Lock or RLock object , and it is used as the underlying lock .", "question_id": 10387}
{"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, delimiters=('=')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `delimiters`.", "question_id": 1573}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}
{"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}
{"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}
{"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}
{"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}
{"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236}
{"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "json.dump(obj, fp, **kw, indent=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level . With arguments `**kw`.", "question_id": 5276}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5873}
{"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}
{"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "datetime.timedelta(milliseconds=0)", "intent": "All arguments are optional and default to 0 . With arguments `milliseconds`.", "question_id": 2208}
{"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}
{"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}
{"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}
{"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}
{"snippet": "shlex.shlex(infile=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "question_id": 8275}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863}
{"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075}
{"snippet": "socket.getaddrinfo(host, port, family=0, type=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8640}
{"snippet": "zlib.compressobj(strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `strategy` is used to tune the compression algorithm .", "question_id": 12912}
{"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}
{"snippet": "gzip.open(filename, newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4277}
{"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "http.client.HTTPResponse(sock, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `url`.", "question_id": 4405}
{"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}
{"snippet": "nntplib.NNTP(host, user=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6411}
{"snippet": "element.findtext(match, namespaces=None)", "intent": "Finds text for the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12497}
{"snippet": "traceback.print_last(chain=True)", "intent": "This is a shorthand for print_exception ( sys.last_type , sys.last_value , sys.last_traceback , `limit` , `file` , `chain` ) .", "question_id": 10756}
{"snippet": "imaplib.IMAP4(port=IMAP4_PORT)", "intent": "This class implements the actual IMAP4 protocol . If `port` is omitted , the standard IMAP4 port ( 143 ) is used .", "question_id": 4671}
{"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "timeit.timeit(stmt='pass', globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code . With arguments `stmt`.", "question_id": 10485}
{"snippet": "len(proxy)", "intent": "Return the number of items in the underlying mapping . With arguments `proxy`.", "question_id": 11210}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "loop.getaddrinfo(host, port, family=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `proto`.", "question_id": 295}
{"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}
{"snippet": "shlex.error_leader(lineno=None)", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `lineno`.", "question_id": 8292}
{"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}
{"snippet": "config_parser.readfp(fp, filename=None)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) . With arguments `filename`.", "question_id": 1567}
{"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}
{"snippet": "urllib.parse.parse_qsl(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11679}
{"snippet": "traceback.format_exception(etype, value, tb, limit=None)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`, `limit`.", "question_id": 10778}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "question_id": 8797}
{"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}
{"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}
{"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}
{"snippet": "calendar.itermonthdays(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 913}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "audioop.cross(fragment, width)", "intent": "Return the number of zero crossings in the `fragment` passed as an argument . With arguments `width`.", "question_id": 687}
{"snippet": "doctest.DocTestRunner(verbose=None)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity .", "question_id": 2863}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}
{"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}
{"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}
{"snippet": "ZipFile.open(name, mode='r', pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12810}
{"snippet": "difflib.ndiff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) .", "question_id": 2642}
{"snippet": "loop.getnameinfo(sockaddr)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.", "question_id": 299}
{"snippet": "datetime.timezone(offset)", "intent": "The `offset` argument must be specified as a timedelta object representing the difference between the local time and UTC .", "question_id": 2357}
{"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}
{"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}
{"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`.", "question_id": 1703}
{"snippet": "DatagramProtocol.error_received(exc)", "intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "question_id": 441}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}
{"snippet": "text_io_base.seek(offset)", "intent": "Change the stream position to the given `offset` .", "question_id": 5142}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}
{"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}
{"snippet": "Morsel.setdefault(key, value=None)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) . With arguments `value`.", "question_id": 4612}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075}
{"snippet": "http.cookies.BaseCookie(input)", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances . If `input` is given , it is passed to the load ( ) method .", "question_id": 4578}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}
{"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}
{"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}
{"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}
{"snippet": "os.chflags(path, flags)", "intent": "Set the `flags` of `path` to the numeric flags .", "question_id": 6833}
{"snippet": "header.append(s, charset=None, errors='strict')", "intent": "Append the string `s` to the MIME header . Optional `charset` , if given , should be a Charset instance ( see email.charset ) or the name of a character set , which will be converted to a Charset instance . Optional `errors` is passed as the errors argument to the decode call if s is a byte string .", "question_id": 3129}
{"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}
{"snippet": "POP3.list()", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) .", "question_id": 7610}
{"snippet": "decimal.quantize(exp, context=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . In this case , the rounding mode is determined by the rounding argument if given , else by the given `context` argument ; if neither argument is given the rounding mode of the current thread \u2019 s context is used . With arguments `exp`.", "question_id": 2463}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402}
{"snippet": "turtle.backward(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10907}
{"snippet": "msilib.Feature(db, id, title, desc, display, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6117}
{"snippet": "shlex.shlex(instream=None, infile=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d . The second optional argument is a filename string , which sets the initial value of the `infile` attribute .", "question_id": 8278}
{"snippet": "lzma.open(filename, newline=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 5664}
{"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "pprint.pprint(object, compact=False)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7648}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289}
{"snippet": "importlib.util.spec_from_loader(name, loader, origin=None, is_package=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`, `is_package`.", "question_id": 4937}
{"snippet": "uuid.uuid5(namespace, name)", "intent": "Generate a UUID based on the SHA-1 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11963}
{"snippet": "shutil.copyfileobj(fsrc, fdst, length)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` . The integer `length` , if given , is the buffer size .", "question_id": 8309}
{"snippet": "shlex.shlex(posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8276}
{"snippet": "sys._getframe(depth)", "intent": "Return a frame object from the call stack . If optional integer `depth` is given , return the frame object that many calls below the top of the stack .", "question_id": 9805}
{"snippet": "zipfile.ZipFile(file, mode='r', compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12797}
{"snippet": "oss_mixer_device.set_recsrc(bitmask)", "intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "question_id": 7209}
{"snippet": "str(object='')", "intent": "Return a string version of `object` .", "question_id": 9169}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "msvcrt.open_osfhandle(handle, flags)", "intent": "Create a C runtime file descriptor from the file `handle` handle . The `flags` parameter should be a bitwise OR of os.O_APPEND , os.O_RDONLY , and os.O_TEXT .", "question_id": 6153}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "webbrowser.open(url, autoraise=True)", "intent": "Display `url` using the default browser . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12104}
{"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}
{"snippet": "logging.disable(level=CRITICAL)", "intent": "Provides an overriding `level` level for all loggers which takes precedence over the logger \u2019 s own level .", "question_id": 5645}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}
{"snippet": "iterator.__iter__()", "intent": "Return the iterator object itself .", "question_id": 9152}
{"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}
{"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}
{"snippet": "mailcap.findmatch(caps, key='view', filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5873}
{"snippet": "shutil.copytree(src, dst, ignore=None, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8331}
{"snippet": "warnings.warn(message, category=None, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12003}
{"snippet": "filecmp.cmpfiles(dir1, dir2, common, shallow=True)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` . The `shallow` parameter has the same meaning and default value as for filecmp.cmp ( ) .", "question_id": 3758}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, sinfo=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `sinfo`.", "question_id": 5588}
{"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}
{"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "platform.architecture(executable=sys.executable, bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7462}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}
{"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}
{"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}
{"snippet": "codeop.compile_command(source, filename=\"<input>\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' .", "question_id": 1305}
{"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}
{"snippet": "webbrowser.open(url, new=0, autoraise=True)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12105}
{"snippet": "bytes.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9343}
{"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}
{"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}
{"snippet": "__import__(name, globals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4142}
{"snippet": "email.generator.DecodedGenerator(outfp)", "intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "question_id": 3106}
{"snippet": "loop.create_connection(protocol_factory, family=0)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . The socket `family` can be either AF_INET or AF_INET6 depending on host ( or the family argument , if provided ) .", "question_id": 206}
{"snippet": "ctypes._SimpleCData", "intent": "This non-public class is the base class of all fundamental ctypes data types.", "question_id": 1853}
{"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}
{"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}
{"snippet": "email.mime.text.MIMEText(_text, _subtype='plain')", "intent": "Module : email.mime.text `_text` is the string for the payload . `_subtype` is the minor type and defaults to plain .", "question_id": 3355}
{"snippet": "doctest.DocFileSuite(*paths, optionflags=0)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "question_id": 2802}
{"snippet": "email_message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3271}
{"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}
{"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}
{"snippet": "base64.a85decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 742}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "bisect.bisect_right(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 856}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, order=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2189}
{"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}
{"snippet": "base64.encodestring(s)", "intent": "Deprecated alias of encodebytes ( ) . With arguments `s`.", "question_id": 752}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}
{"snippet": "ipaddress.IPv6Network(address, strict=True)", "intent": "Construct an IPv6 network definition . `address` can be one of the following : If `strict` is True and host bits are set in the supplied address , then ValueError is raised .", "question_id": 5220}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "ctypes.CDLL(name, handle=None)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `handle`.", "question_id": 1742}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072}
{"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189}
{"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}
{"snippet": "warnings.simplefilter(action, lineno=0)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "question_id": 12035}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189}
{"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}
{"snippet": "os.utime(path, ns, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6960}
{"snippet": "platform.java_ver('', ''), '', ''), release='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7491}
{"snippet": "doctest.Example(source, want, lineno=0, indent=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `indent`.", "question_id": 2832}
{"snippet": "unittest.mock.mock_open(mock=None)", "intent": "A helper function to create a `mock` to replace the use of open ( ) .", "question_id": 11654}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}
{"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}
{"snippet": "subprocess.Popen(args, close_fds=True)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `close_fds` is true , all file descriptors except 0 , 1 and 2 will be closed before the child process is executed .", "question_id": 9606}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}
{"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}
{"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}
{"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "time.replace(microsecond=self.microsecond)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "question_id": 2338}
{"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}
{"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}
{"snippet": "robot_file_parser.request_rate(useragent)", "intent": "Returns the contents of the Request-rate parameter from robots.txt as a named tuple RequestRate ( requests , seconds ) . If there is no such parameter or it doesn \u2019 t apply to the `useragent` specified or the robots.txt entry for this parameter has invalid syntax , return None .", "question_id": 11916}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`, `metavar`.", "question_id": 74}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}
{"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}
{"snippet": "io.BufferedRandom(raw)", "intent": "A buffered interface to random access streams . The constructor creates a reader and writer for a seekable `raw` stream , given in the first argument .", "question_id": 5128}
{"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "async_exit_stack.push_async_exit(exit)", "intent": "Similar to push ( ) but expects either an asynchronous context manager or a coroutine function . With arguments `exit`.", "question_id": 1634}
{"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}
{"snippet": "signal.setitimer(which, seconds, interval=0.0)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8392}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}
{"snippet": "turtle.tracer(delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11060}
{"snippet": "Node.cloneNode(deep)", "intent": "Clone this node . Setting `deep` means to clone all child nodes as well .", "question_id": 12335}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . With arguments `prog`, `parser_class`.", "question_id": 79}
{"snippet": "locale.getlocale(category=LC_CTYPE)", "intent": "Returns the current setting for the given locale `category` as sequence containing language code , encoding .", "question_id": 5376}
{"snippet": "hashlib.new(name, data)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter . With arguments `data`.", "question_id": 4297}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467}
{"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11422}
{"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}
{"snippet": "turtle.tracer(n=None, delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11061}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "window.insnstr(y, x, str, n, attr)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`, `attr`.", "question_id": 2079}
{"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "Codec.decode(input, errors)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1263}
{"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}
{"snippet": "tuple(iterable)", "intent": "Tuples may be constructed in a number of ways : The constructor builds a tuple whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9160}
{"snippet": "quopri.encodestring(s, quotetabs=False, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`, `header`.", "question_id": 7882}
{"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}
{"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}
{"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}
{"snippet": "mailbox.__iter__()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5732}
{"snippet": "Pattern.fullmatch(string, pos)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object . The optional `pos` and `endpos` parameters have the same meaning as for the search ( ) method .", "question_id": 7977}
{"snippet": "importlib.util.find_spec(name, package=None)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4929}
{"snippet": "audioop.byteswap(fragment, width)", "intent": "\u201c Byteswap \u201d all samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 686}
{"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}
{"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10249}
{"snippet": "fileinput.FileInput(files=None)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "question_id": 3801}
{"snippet": "socket.makefile(newline=None)", "intent": "Return a file object associated with the socket . With arguments `newline`.", "question_id": 8696}
{"snippet": "directory.start_component(component=None, uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6102}
{"snippet": "loop.sock_sendall(sock, data)", "intent": "Send `data` to the `sock` socket .", "question_id": 278}
{"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`.", "question_id": 5585}
{"snippet": "bz2.BZ2File(filename, buffering=None)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored .", "question_id": 888}
{"snippet": "bytearray.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9380}
{"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "AU_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 9725}
{"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}
{"snippet": "bytes_parser.parse(fp)", "intent": "Read all the data from the binary file-like object `fp` , parse the resulting bytes , and return the message object .", "question_id": 3376}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}
{"snippet": "Telnet.set_option_negotiation_callback(callback)", "intent": "Each time a telnet option is read on the input flow , this `callback` ( if set ) is called with the following parameters : callback ( telnet socket , command ( DO/DONT/WILL/WONT ) , option ) .", "question_id": 10032}
{"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}
{"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 1119}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "element.iterfind(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12503}
{"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}
{"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}
{"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}
{"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060}
{"snippet": "importlib.find_loader(name, path=None)", "intent": "Find the loader for a module , optionally within the specified `path` . If the module is in sys.modules , then sys.modules [ `name` ] .__loader__ is returned ( unless the loader would be None or is not set , in which case ValueError is raised ) .", "question_id": 4796}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "email.message_from_bytes(s, _class=None)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3397}
{"snippet": "textwrap.TextWrapper(**kwargs)", "intent": "The TextWrapper constructor accepts a number of optional keyword arguments . With arguments `**kwargs`.", "question_id": 10326}
{"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}
{"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}
{"snippet": "DOMImplementation.hasFeature(feature, version)", "intent": "Return true if the `feature` identified by the pair of strings feature and `version` is implemented .", "question_id": 12311}
{"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}
{"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}
{"snippet": "OpenerDirector.add_handler(handler)", "intent": "`handler` should be an instance of BaseHandler .", "question_id": 11834}
{"snippet": "logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `dllname` should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log ( if not specified , 'win32service.pyd ' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5509}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12240}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}
{"snippet": "tempfile.mkstemp(prefix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10080}
{"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12239}
{"snippet": "gettext.bind_textdomain_codeset(domain)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4212}
{"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}
{"snippet": "test.support.calcobjsize(fmt)", "intent": "Return struct.calcsize ( ) for nP { `fmt` } 0n or , if gettotalrefcount exists , 2PnP { fmt } 0P .", "question_id": 10200}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}
{"snippet": "robot_file_parser.request_rate(useragent)", "intent": "Returns the contents of the Request-rate parameter from robots.txt as a named tuple RequestRate ( requests , seconds ) . If there is no such parameter or it doesn \u2019 t apply to the `useragent` specified or the robots.txt entry for this parameter has invalid syntax , return None .", "question_id": 11916}
{"snippet": "str(object='')", "intent": "Return a str version of `object` .", "question_id": 4114}
{"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}
{"snippet": "shelve.open(filename, flag='c')", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) .", "question_id": 8235}
{"snippet": "socket.getaddrinfo(host, port)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None .", "question_id": 8635}
{"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}
{"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}
{"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}
{"snippet": "lzma.decompress(data, format=FORMAT_AUTO)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5715}
{"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}
{"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}
{"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}
{"snippet": "subprocess.check_output(args, cwd=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `cwd`.", "question_id": 9683}
{"snippet": "http.client.HTTPConnection(host, blocksize=8192)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "question_id": 4377}
{"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}
{"snippet": "warnings.catch_warnings(record=False, module=None)", "intent": "A context manager that copies and , upon exit , restores the warnings filter and the showwarning ( ) function . If the `record` argument is False ( the default ) the context manager returns None on entry . The `module` argument takes a module that will be used instead of the module returned when you import warnings whose filter will be protected .", "question_id": 12045}
{"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}
{"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "widget.tag_has(tagname)", "intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "question_id": 10668}
{"snippet": "base_selector.get_key(fileobj)", "intent": "Return the key associated with a registered file object . With arguments `fileobj`.", "question_id": 8223}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "str(object=b'', encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4122}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}
{"snippet": "mimetypes.MimeTypes(filenames=())", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database .", "question_id": 5957}
{"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820}
{"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "pickle.load(file, encoding=\"ASCII\", errors=\"strict\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7377}
{"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdout=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 525}
{"snippet": "cgi.parse_qs(qs, keep_blank_values=False)", "intent": "This function is deprecated in this module . With arguments `qs`, `keep_blank_values`.", "question_id": 1040}
{"snippet": "fileinput.FileInput(bufsize=0)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `bufsize`.", "question_id": 3804}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}
{"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}
{"snippet": "email_message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3270}
{"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}
{"snippet": "xml.dom.registerDOMImplementation(name, factory)", "intent": "Register the `factory` function with the `name` name .", "question_id": 12302}
{"snippet": "pickle.loads(bytes_object, fix_imports=True, errors=\"strict\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7384}
{"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "io.StringIO(newline='\\n')", "intent": "An in-memory stream for text I/O . If `newline` translation is enabled , newlines will be encoded as if by write ( ) .", "question_id": 5166}
{"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "pwd.getpwuid(uid)", "intent": "Return the password database entry for the given numeric user ID . With arguments `uid`.", "question_id": 7703}
{"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "signal.setitimer(which, seconds)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8391}
{"snippet": "oss_audio_device.setparameters(format, nchannels, samplerate, strict=False)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods . If `strict` is true , setparameters ( ) checks to see if each parameter was actually set to the requested value , and raises OSSAudioError if not .", "question_id": 7192}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}
{"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}
{"snippet": "loop.create_unix_connection(protocol_factory, ssl=None)", "intent": "Create a Unix connection . With arguments `protocol_factory`, `ssl`.", "question_id": 224}
{"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "os.spawnve(mode, path, args, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7058}
{"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}
{"snippet": "select.epoll(sizehint=-1, flags=0)", "intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .", "question_id": 8153}
{"snippet": "patch.object(target, attribute, **kwargs, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11621}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474}
{"snippet": "re.subn(pattern, repl, string, flags=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `flags`.", "question_id": 7957}
{"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}
{"snippet": "directory.start_component(component=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory .", "question_id": 6094}
{"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}
{"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}
{"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249}
{"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}
{"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10974}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "FTP.connect(host='')", "intent": "Connect to the given `host` and `port` .", "question_id": 3905}
{"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}
{"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}
{"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "venv.EnvBuilder(system_site_packages=False, clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `clear`.", "question_id": 11979}
{"snippet": "asyncio.gather(*aws, loop=None)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`, `loop`.", "question_id": 600}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}
{"snippet": "subprocess.check_call(args, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9671}
{"snippet": "pprint.pformat(object, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7635}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "struct.pack_into(buffer, offset, v1, v2)", "intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "question_id": 9560}
{"snippet": "traceback_exception.from_exception(exc, capture_locals=False)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10815}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "lazy_loader.factory(loader)", "intent": "A static method which returns a callable that creates a lazy `loader` .", "question_id": 4944}
{"snippet": "glob.iglob(pathname)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`.", "question_id": 4266}
{"snippet": "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale . With arguments `firstweekday`.", "question_id": 980}
{"snippet": "str.rsplit(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9237}
{"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes . With arguments `multithread`.", "question_id": 12243}
{"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}
{"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}
{"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}
{"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}
{"snippet": "signal.setitimer(which, seconds, interval=0.0)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8392}
{"snippet": "calendar.yeardayscalendar(year)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) .", "question_id": 924}
{"snippet": "group.__str__()", "intent": "The str value of a Group is formatted according to RFC 5322 , but with no Content Transfer Encoding of any non-ASCII characters .", "question_id": 3207}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}
{"snippet": "asyncio.open_unix_connection(ssl=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `ssl`.", "question_id": 487}
{"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}
{"snippet": "HTTPPasswordMgr.add_password(realm, uri, user, passwd)", "intent": "`uri` can be either a single URI , or a sequence of URIs . `realm` , `user` and `passwd` must be strings .", "question_id": 11857}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}
{"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}
{"snippet": "test_case.assertIsInstance(obj, cls, msg=None)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) . With arguments `msg`.", "question_id": 11396}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "lzma.open(filename, mode=\"rb\", format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5665}
{"snippet": "faulthandler.unregister(signum)", "intent": "Unregister a user signal : uninstall the handler of the `signum` signal installed by register ( ) .", "question_id": 3739}
{"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}
{"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}
{"snippet": "importlib.find_loader(name, path=None)", "intent": "Find the loader for a module , optionally within the specified `path` . If the module is in sys.modules , then sys.modules [ `name` ] .__loader__ is returned ( unless the loader would be None or is not set , in which case ValueError is raised ) .", "question_id": 4796}
{"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}
{"snippet": "secrets.token_hex(nbytes=None)", "intent": "Return a random text string , in hexadecimal . The string has `nbytes` random bytes , each byte converted to two hex digits .", "question_id": 8140}
{"snippet": "ctypes.byref(obj, offset)", "intent": "Returns a light-weight pointer to `obj` , which must be an instance of a ctypes type . `offset` defaults to zero , and must be an integer that will be added to the internal pointer value .", "question_id": 1810}
{"snippet": "dataclasses.field(default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2169}
{"snippet": "PurePath.with_suffix(suffix)", "intent": "Return a new path with the `suffix` changed .", "question_id": 7261}
{"snippet": "stat.S_ISDIR(mode)", "intent": "Return non-zero if the `mode` is from a directory .", "question_id": 9061}
{"snippet": "time.isoformat(timespec='auto')", "intent": "Return a string representing the time in ISO 8601 format , HH : MM : SS.ffffff or , if microsecond is 0 , HH : MM : SS If utcoffset ( ) does not return None , a string is appended , giving the UTC offset : HH : MM : SS.ffffff+HH : MM [ : SS [ .ffffff ] ] or , if self.microsecond is 0 , HH : MM : SS+HH : MM [ : SS [ .ffffff ] ] . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2345}
{"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}
{"snippet": "pdb.Pdb(completekey='tab')", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7342}
{"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : With arguments `prog`, `parser_class`, `option_string`, `required`.", "question_id": 76}
{"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}
{"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}
{"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309}
{"snippet": "test.support.import_fresh_module(name, fresh=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10247}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "frozenset(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9433}
{"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874}
{"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . To specify the use of a `secure` protocol ( TLS ) , pass in a tuple to the secure argument . With arguments `fromaddr`.", "question_id": 5519}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "turtle.fd(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10904}
{"snippet": "POP3.list()", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) .", "question_id": 7610}
{"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}
{"snippet": "raw_io_base.read(size=-1)", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5085}
{"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}
{"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}
{"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, dict_type=collections.OrderedDict)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `dict_type`.", "question_id": 1571}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "html_diff.__init__(tabsize=8)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 .", "question_id": 2599}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}
{"snippet": "mmap.flush(offset)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6006}
{"snippet": "gc.set_debug(flags)", "intent": "Set the garbage collection debugging `flags` .", "question_id": 4172}
{"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434}
{"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}
{"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}
{"snippet": "bz2.BZ2File(filename, buffering=None, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 892}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078}
{"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}
{"snippet": "msilib.Feature(db, id, title, desc, display, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6118}
{"snippet": "bdb.get_file_breaks(filename)", "intent": "Return all breakpoints in `filename` , or an empty list if none are set .", "question_id": 802}
{"snippet": "asyncio.open_unix_connection(ssl=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `ssl`.", "question_id": 487}
{"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}
{"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}
{"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}
{"snippet": "xmlparser.StartNamespaceDeclHandler(prefix, uri)", "intent": "Called when an element contains a namespace declaration . With arguments `prefix`, `uri`.", "question_id": 7767}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}
{"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}
{"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4588}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "shelve.Shelf(dict, protocol=None, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8249}
{"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}
{"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}
{"snippet": "base64.b64decode(s, altchars=None, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 713}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}
{"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094}
{"snippet": "str(errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4118}
{"snippet": "connection.backup(target)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance .", "question_id": 8829}
{"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}
{"snippet": "bz2.open(filename, mode='r')", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 877}
{"snippet": "io.TextIOWrapper(buffer)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "question_id": 5146}
{"snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)", "intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power . `dklen` is the length of the derived key .", "question_id": 4311}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}
{"snippet": "xml.dom.getDOMImplementation(features=())", "intent": "Return a suitable DOM implementation . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12305}
{"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}
{"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}
{"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}
{"snippet": "operator.index(a)", "intent": "Return `a` converted to an integer .", "question_id": 6538}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}
{"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}
{"snippet": "element_tree.find(match, namespaces=None)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`, `namespaces`.", "question_id": 12513}
{"snippet": "array.array(typecode, initializer)", "intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "question_id": 115}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "timeit.Timer(setup='pass', timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10505}
{"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}
{"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}
{"snippet": "xmlparser.ExternalEntityParserCreate(context)", "intent": "Create a \u201c child \u201d parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser . The `context` parameter should be the string passed to the ExternalEntityRefHandler ( ) handler function , described below .", "question_id": 7739}
{"snippet": "turtle.onrelease(fun, btn=1)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`.", "question_id": 11024}
{"snippet": "base64.urlsafe_b64encode(s)", "intent": "Encode bytes-like object `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the encoded bytes .", "question_id": 716}
{"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}
{"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}
{"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}
{"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "question_id": 5987}
{"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}
{"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}
{"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}
{"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}
{"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}
{"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}
{"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "curses.textpad.rectangle(win, uly, ulx, lry, lrx)", "intent": "Draw a rectangle . With arguments `win`, `uly`, `ulx`, `lry`, `lrx`.", "question_id": 2134}
{"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2666}
{"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}
{"snippet": "test_case.assertNotIsInstance(obj, cls, msg=None)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) . With arguments `msg`.", "question_id": 11398}
{"snippet": "incremental_decoder.decode(object)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object .", "question_id": 1275}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777}
{"snippet": "set.update(*others)", "intent": "Update the set , adding elements from all others . With arguments `*others`.", "question_id": 9454}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863}
{"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}
{"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}
{"snippet": "IMAP4.select(mailbox='INBOX', readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4732}
{"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}
{"snippet": "zlib.compressobj(wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12910}
{"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590}
{"snippet": "argparse.ArgumentParser(parents=)", "intent": "Create a new ArgumentParser object . With arguments `parents`.", "question_id": 43}
{"snippet": "types.DynamicClassAttribute(fset=None)", "intent": "Route attribute access on a class to __getattr__ . With arguments `fset`.", "question_id": 11220}
{"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}
{"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}
{"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}
{"snippet": "os.startfile(path, operation)", "intent": "Start a file with its associated application . The `path` parameter is relative to the current directory . When `operation` is not specified or 'open ' , this acts like double-clicking the file in Windows Explorer , or giving the file name as an argument to the start command from the interactive command shell : the file is opened with whatever application ( if any ) its extension is associated .", "question_id": 7066}
{"snippet": "ArgumentParser.add_argument_group(title=None, description=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 98}
{"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}
{"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}
{"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}
{"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741}
{"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}
{"snippet": "print(*objects, sep=' ', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4082}
{"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\", method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12465}
{"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}
{"snippet": "patch.dict(in_dict, **kwargs, values=(), clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11631}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}
{"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}
{"snippet": "marshal.dump(value, file)", "intent": "Write the `value` on the open `file` .", "question_id": 5879}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}
{"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "test_case.assertIsInstance(obj, cls, msg=None)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) . With arguments `msg`.", "question_id": 11396}
{"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}
{"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}
{"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}
{"snippet": "Path.chmod(mode)", "intent": "Change the file `mode` and permissions , like os.chmod ( ) :", "question_id": 7268}
{"snippet": "zlib.decompress(data, wbits=MAX_WBITS, bufsize=DEF_BUF_SIZE)", "intent": "Decompresses the bytes in `data` , returning a bytes object containing the uncompressed data . The `wbits` parameter depends on the format of data , and is discussed further below . If `bufsize` is given , it is used as the initial size of the output buffer .", "question_id": 12922}
{"snippet": "mimetypes.guess_all_extensions(type)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type .", "question_id": 5941}
{"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}
{"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}
{"snippet": "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `enable_SMTPUTF8` determines whether the SMTPUTF8 extension ( as defined in RFC 6531 ) should be enabled .", "question_id": 8430}
{"snippet": "faulthandler.unregister(signum)", "intent": "Unregister a user signal : uninstall the handler of the `signum` signal installed by register ( ) .", "question_id": 3739}
{"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}
{"snippet": "socket.makefile(mode='r', encoding=None)", "intent": "Return a file object associated with the socket . These arguments are interpreted the same way as by the built-in open ( ) function , except the only supported `mode` values are ' r ' ( default ) , ' w ' and ' b ' . With arguments `encoding`.", "question_id": 8698}
{"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}
{"snippet": "patch.object(target, attribute, **kwargs)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . With arguments `**kwargs`.", "question_id": 11618}
{"snippet": "pool.starmap_async(func, iterable, chunksize, callback)", "intent": "A combination of starmap ( ) and map_async ( ) that iterates over `iterable` of iterables and calls `func` with the iterables unpacked . With arguments `chunksize`, `callback`.", "question_id": 6353}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "ast.dump(node, annotate_fields=True)", "intent": "Return a formatted dump of the tree in `node` . If `annotate_fields` is true ( by default ) , the returned string will show the names and the values for fields .", "question_id": 164}
{"snippet": "io.open(file, opener=None)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `opener`.", "question_id": 5058}
{"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}
{"snippet": "doctest.debug(module, name)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above .", "question_id": 2888}
{"snippet": "codecs.StreamReader(stream)", "intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "question_id": 1284}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}
{"snippet": "test_case.assertTrue(expr)", "intent": "Test that `expr` is true ( or false ) .", "question_id": 11379}
{"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "bz2.BZ2File(filename, buffering=None, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 892}
{"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}
{"snippet": "ctypes.CDLL(name, use_last_error=False)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `use_last_error`.", "question_id": 1744}
{"snippet": "config_parser.optionxform(option)", "intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "question_id": 1565}
{"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585}
{"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}
{"snippet": "ArgumentParser.add_argument_group(description=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 97}
{"snippet": "stream_writer.get_extra_info(name, default=None)", "intent": "Access optional transport information ; see BaseTransport.get_extra_info ( ) for details . With arguments `name`, `default`.", "question_id": 516}
{"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}
{"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}
{"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}
{"snippet": "Telnet.read_until(expected, timeout=None)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10010}
{"snippet": "null_handler.handle(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5438}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "socket.socket(fileno=None)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number . If `fileno` is specified , the values for family , type , and `proto` are auto-detected from the specified file descriptor .", "question_id": 8617}
{"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}
{"snippet": "socket.makefile(newline=None)", "intent": "Return a file object associated with the socket . With arguments `newline`.", "question_id": 8696}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "array.extend(iterable)", "intent": "Append items from `iterable` to the end of the array .", "question_id": 124}
{"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}
{"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}
{"snippet": "uuid.UUID(hex=None, bytes_le=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11946}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}
{"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}
{"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}
{"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}
{"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}
{"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}
{"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}
{"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}
{"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}
{"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}
{"snippet": "shutil.chown(path, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8343}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}
{"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}
{"snippet": "py_zip_file.writepy(pathname, basename='')", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) . `basename` is intended for internal use only .", "question_id": 12857}
{"snippet": "config_parser.items(section)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1556}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "bz2.open(filename, mode='r', newline=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 885}
{"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}
{"snippet": "getpass.getpass(stream=None)", "intent": "Prompt the user for a password without echoing . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4206}
{"snippet": "mailbox.mbox(path, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5771}
{"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}
{"snippet": "itertools.zip_longest(*iterables, fillvalue=None)", "intent": "Make an iterator that aggregates elements from each of the iterables . If the iterables are of uneven length , missing values are filled-in with `fillvalue` . With arguments `*iterables`.", "question_id": 5269}
{"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}
{"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}
{"snippet": "deque.extend(iterable)", "intent": "Extend the right side of the deque by appending elements from the `iterable` argument .", "question_id": 1358}
{"snippet": "message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3010}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}
{"snippet": "mailbox.__setitem__(key, message)", "intent": "Replace the `message` corresponding to `key` with message .", "question_id": 5728}
{"snippet": "difflib.unified_diff(a, b, fromfile='', fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2655}
{"snippet": "warnings.simplefilter(action, category=Warning, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `lineno`, `append`.", "question_id": 12040}
{"snippet": "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8250}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}
{"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}
{"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}
{"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}
{"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}
{"snippet": "dis.disco(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2723}
{"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}
{"snippet": "warnings.formatwarning(message, category, filename, lineno, line=None)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12022}
{"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}
{"snippet": "FTP.set_debuglevel(level)", "intent": "Set the instance \u2019 s debugging `level` .", "question_id": 3903}
{"snippet": "curses.ungetch(ch)", "intent": "Push `ch` so the next getch ( ) will return it .", "question_id": 1993}
{"snippet": "file_handler.emit(record)", "intent": "Outputs the `record` to the file .", "question_id": 5435}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}
{"snippet": "SubprocessProtocol.pipe_connection_lost(fd, exc)", "intent": "Called when one of the pipes communicating with the child process is closed . `fd` is the integer file descriptor that was closed . With arguments `exc`.", "question_id": 443}
{"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}
{"snippet": "itertools.dropwhile(predicate, iterable)", "intent": "Make an iterator that drops elements from the `iterable` as long as the `predicate` is true ; afterwards , returns every element .", "question_id": 5251}
{"snippet": "generator.flatten(msg, linesep=None)", "intent": "Print the textual representation of the message object structure rooted at `msg` to the output file specified when the Generator instance was created . If `linesep` is not None , use it as the separator character between all the lines of the flattened message .", "question_id": 3102}
{"snippet": "logging.handlers.BaseRotatingHandler(filename, mode)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`.", "question_id": 5450}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "os.pwrite(fd, str, offset)", "intent": "Write the bytestring in `str` to file descriptor `fd` at position of `offset` , leaving the file offset unchanged .", "question_id": 6788}
{"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "question_id": 65}
{"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}
{"snippet": "audioop.avg(fragment, width)", "intent": "Return the average over all samples in the `fragment` . With arguments `width`.", "question_id": 683}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}
{"snippet": "mmap.rfind(sub)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6016}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859}
{"snippet": "test.support.set_memlimit(limit)", "intent": "Set the values for max_memuse and real_max_memuse for big memory tests . With arguments `limit`.", "question_id": 10167}
{"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}
{"snippet": "tkinter.Tk(baseName=None)", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`.", "question_id": 10519}
{"snippet": "policy.fold_binary(name, value)", "intent": "The same as fold ( ) , except that the returned `value` should be a bytes object rather than a string . With arguments `name`.", "question_id": 3427}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "window.addch(y, x, ch)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2003}
{"snippet": "turtle.turtlesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10997}
{"snippet": "re.error(msg, pos=None)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . With arguments `msg`, `pos`.", "question_id": 7963}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}
{"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "str.endswith(suffix, start, end)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position . With optional `end` , stop comparing at that position .", "question_id": 9189}
{"snippet": "POP3.noop()", "intent": "Do nothing .", "question_id": 7614}
{"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}
{"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}
{"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}
{"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}
{"snippet": "os.setxattr(path, attribute, value, follow_symlinks=True)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . With arguments `follow_symlinks`.", "question_id": 7003}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}
{"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}
{"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}
{"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}
{"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11138}
{"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}
{"snippet": "curses.setupterm(fd=-1)", "intent": "Initialize the terminal . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1981}
{"snippet": "compile(source, filename, mode, flags=0, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3997}
{"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}
{"snippet": "types.DynamicClassAttribute(doc=None)", "intent": "Route attribute access on a class to __getattr__ . With arguments `doc`.", "question_id": 11222}
{"snippet": "style.lookup(style, option, default=None)", "intent": "Returns the value specified for `option` in `style` . If the `default` argument is set , it is used as a fallback value in case no specification for option is found .", "question_id": 10679}
{"snippet": "io.TextIOWrapper(buffer)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` .", "question_id": 5146}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stderr=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 540}
{"snippet": "codecs.StreamReader(stream)", "intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "question_id": 1284}
{"snippet": "snapshot.compare_to(old_snapshot: Snapshot, key_type: str, cumulative: bool=False)", "intent": "Compute the differences with an old snapshot . With arguments `old_snapshot: Snapshot`, `key_type: str`, `cumulative: bool`.", "question_id": 10872}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "question_id": 12124}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315}
{"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}
{"snippet": "bisect.bisect(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 863}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12240}
{"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}
{"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}
{"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}
{"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}
{"snippet": "loop.call_at(when, callback, *args)", "intent": "Schedule `callback` to be called at the given absolute timestamp `when` ( an int or a float ) , using the same time reference as loop.time ( ) . With arguments `*args`.", "question_id": 195}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "mailbox.Babyl(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in Babyl format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5796}
{"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}
{"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}
{"snippet": "importlib.util.spec_from_file_location(name, location, loader=None, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4941}
{"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used . If `flushOnClose` is specified as False , then the buffer is not flushed when the handler is closed .", "question_id": 5534}
{"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}
{"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}
{"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}
{"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}
{"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}
{"snippet": "turtle.onscreenclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`.", "question_id": 11076}
{"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}
{"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}
{"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}
{"snippet": "loop.sendfile(transport, file)", "intent": "Send a `file` over a `transport` .", "question_id": 256}
{"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}
{"snippet": "traceback.FrameSummary(filename, lineno, name, locals=None)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . It may optionally have a stringified version of the frames `locals` included in it . With arguments `filename`, `lineno`, `name`.", "question_id": 10835}
{"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443}
{"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}
{"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}
{"snippet": "heapq.heappush(heap, item)", "intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "question_id": 4316}
{"snippet": "code.compile_command(source, filename=\"<input>\", symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1174}
{"snippet": "gettext.find(domain, localedir=None, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4228}
{"snippet": "msilib.Feature(db, id, title, desc, display, parent=None, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6123}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10975}
{"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075}
{"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}
{"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}
{"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}
{"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}
{"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}
{"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}
{"snippet": "syslog.syslog(priority, message)", "intent": "Send the string `message` to the system logger . Each message is tagged with a `priority` composed of a facility and a level .", "question_id": 9878}
{"snippet": "venv.EnvBuilder(system_site_packages=False, upgrade=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `upgrade`.", "question_id": 11981}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042}
{"snippet": "wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)", "intent": "Create an HTTP handler for the given `request` ( i.e . a socket ) , `client_address` ( a ( host , port ) tuple ) , and `server` ( WSGIServer instance ) .", "question_id": 12231}
{"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}
{"snippet": "test.support.start_threads(threads, unlock=None)", "intent": "Context manager to start `threads` . With arguments `unlock`.", "question_id": 10199}
{"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}
{"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}
{"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}
{"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}
{"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}
{"snippet": "msilib.FCICreate(cabname, files)", "intent": "Create a new CAB file named `cabname` . `files` must be a list of tuples , each containing the name of the file on disk , and the name of the file inside the CAB file .", "question_id": 6058}
{"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}
{"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5419}
{"snippet": "types.resolve_bases(bases)", "intent": "Resolve MRO entries dynamically as specified by PEP 560 . This function looks for items in `bases` that are not instances of type , and returns a tuple where each such object that has an __mro_entries__ method is replaced with an unpacked result of calling this method .", "question_id": 11182}
{"snippet": "set.intersection_update(*others)", "intent": "Update the set , keeping only elements found in it and all others . With arguments `*others`.", "question_id": 9456}
{"snippet": "pwd.getpwuid(uid)", "intent": "Return the password database entry for the given numeric user ID . With arguments `uid`.", "question_id": 7703}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}
{"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}
{"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}
{"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}
{"snippet": "lzma.LZMACompressor(filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5682}
{"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}
{"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}
{"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}
{"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}
{"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}
{"snippet": "gc.set_debug(flags)", "intent": "Set the garbage collection debugging `flags` .", "question_id": 4172}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777}
{"snippet": "doctest.DocTestSuite(tearDown=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2812}
{"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938}
{"snippet": "config_parser.read_file(f, source=None)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) . Optional argument `source` specifies the name of the file being read .", "question_id": 1515}
{"snippet": "codecs.open(filename, buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1229}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}
{"snippet": "audioop.mul(fragment, width, factor)", "intent": "Return a `fragment` that has all samples in the original fragment multiplied by the floating-point value `factor` . With arguments `width`.", "question_id": 699}
{"snippet": "unittest.main(testLoader=unittest.defaultTestLoader)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "question_id": 11550}
{"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}
{"snippet": "bytes.replace(old, new, count)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9307}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\")", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`, `subtype`.", "question_id": 3040}
{"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}
{"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}
{"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 39}
{"snippet": "curses.qiflush(flag)", "intent": "If `flag` is False , the effect is the same as calling noqiflush ( ) .", "question_id": 1969}
{"snippet": "logging.addLevelName(level, levelName)", "intent": "Associates `level` level with text `levelName` in an internal dictionary , which is used to map numeric levels to a textual representation , for example when a Formatter formats a message .", "question_id": 5646}
{"snippet": "os.minor(device)", "intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6883}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}
{"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "inspect.getcallargs(func, *args, **kwds)", "intent": "Bind the args and kwds to the argument names of the Python function or method `func` , as if it was called with them . whenever func ( `*args` , `**kwds` ) would raise an exception because of incompatible signature , an exception of the same type and the same or similar message is raised .", "question_id": 5019}
{"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}
{"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}
{"snippet": "future.set_exception(exception)", "intent": "Mark the Future as done and set an `exception` .", "question_id": 363}
{"snippet": "resource.setrlimit(resource, limits)", "intent": "Sets new `limits` of consumption of `resource` .", "question_id": 8072}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}
{"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}
{"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}
{"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}
{"snippet": "urllib.request.build_opener(handler)", "intent": "Return an OpenerDirector instance , which chains the handlers in the order given . With arguments `handler`.", "question_id": 11763}
{"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, filename=None)", "intent": "Add `headers` and payload to `msg` : If not specified , and `filename` is specified , add the header with the value attachment . With arguments `<'str'>`.", "question_id": 3043}
{"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}
{"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}
{"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}
{"snippet": "doctest.testmod(m=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form .", "question_id": 2777}
{"snippet": "gc.get_referents(*objs)", "intent": "Return a list of objects directly referred to by any of the arguments . With arguments `*objs`.", "question_id": 4182}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, dict_type=collections.OrderedDict)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `dict_type`.", "question_id": 1571}
{"snippet": "coverage_results.write_results(show_missing=True, summary=False)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits . Set `summary` to include in the output the coverage summary per module .", "question_id": 10729}
{"snippet": "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10101}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}
{"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "email.utils.parsedate(date)", "intent": "Attempts to parse a `date` according to the rules in RFC 2822. however , some mailers don \u2019 t follow that format as specified , so parsedate ( ) tries to guess correctly in such cases .", "question_id": 3464}
{"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11429}
{"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}
{"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}
{"snippet": "directory.start_component(component=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory .", "question_id": 6094}
{"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}
{"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}
{"snippet": "json.JSONDecodeError(msg, doc, pos)", "intent": "Subclass of ValueError with the following additional attributes : With arguments `msg`, `doc`, `pos`.", "question_id": 5335}
{"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940}
{"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}
{"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}
{"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}
{"snippet": "str(object=b'', encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9177}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "lzma.compress(data, format=FORMAT_XZ, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5710}
{"snippet": "unittest.FunctionTestCase(testFunc, description=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `description`.", "question_id": 11476}
{"snippet": "email.message.EmailMessage(policy=default)", "intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "question_id": 3223}
{"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}
{"snippet": "object.__reduce_ex__(protocol)", "intent": "Alternatively , a __reduce_ex__ ( ) method may be defined . The only difference is this method should take a single integer argument , the `protocol` version .", "question_id": 7414}
{"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}
{"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}
{"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}
{"snippet": "winreg.OpenKey(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12140}
{"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}
{"snippet": "os.fwalk(top='.', topdown=True)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `topdown`.", "question_id": 6989}
{"snippet": "SSLContext.wrap_socket(sock, server_side=False, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . `session` , see session .", "question_id": 9031}
{"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}
{"snippet": "codecs.lookup(encoding)", "intent": "Looks up the codec info in the Python codec registry and returns a CodecInfo object as defined below . With arguments `encoding`.", "question_id": 1200}
{"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}
{"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}
{"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}
{"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242}
{"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}
{"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}
{"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}
{"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen, flags)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . Set mode , IV , AEAD associated data length and `flags` for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8727}
{"snippet": "inspect.signature(callable)", "intent": "Return a Signature object for the given `callable` :", "question_id": 4977}
{"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}
{"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}
{"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}
{"snippet": "dis.dis(x=None)", "intent": "Disassemble the `x` object .", "question_id": 2708}
{"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}
{"snippet": "winreg.DeleteKeyEx(key, sub_key, reserved=0)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `reserved` is a reserved integer , and must be zero .", "question_id": 12130}
{"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}
{"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}
{"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}
{"snippet": "urllib.parse.urlparse(urlstring, scheme='')", "intent": "Parse a URL into six components , returning a 6-item named tuple . It should be the same type ( text or bytes ) as `urlstring` , except that the default value `` is always allowed , and is automatically converted to b '' if appropriate . This corresponds to the general structure of a URL : `scheme` : //netloc/path ; parameters ? query # fragment .", "question_id": 11666}
{"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}
{"snippet": "window.addstr(y, x, str, attr)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2010}
{"snippet": "email_policy.header_source_parse(sourcelines)", "intent": "The name is parsed as everything up to the \u2018 : \u2019 and returned unmodified . With arguments `sourcelines`.", "question_id": 3434}
{"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}
{"snippet": "Morsel.setdefault(key, value=None)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) . With arguments `value`.", "question_id": 4612}
{"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}
{"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}
{"snippet": "formatter.push_margin(margin)", "intent": "Increase the number of left `margin` indentations by one , associating the logical tag margin with the new indentation .", "question_id": 3830}
{"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}
{"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068}
{"snippet": "gettext.bind_textdomain_codeset(domain)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4212}
{"snippet": "argparse.ArgumentParser(parents=)", "intent": "Create a new ArgumentParser object . With arguments `parents`.", "question_id": 53}
{"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}
{"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}
{"snippet": "patch.object(target, attribute, **kwargs, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11621}
{"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}
{"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}
{"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}
{"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}
{"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}
{"snippet": "bdb.Breakpoint(self, file, line, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 757}
{"snippet": "timeit.Timer(globals=None)", "intent": "Class for timing execution speed of small code snippets . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "question_id": 10501}
{"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}
{"snippet": "struct.unpack_from(buffer, offset=0)", "intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "question_id": 9563}
{"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12665}
{"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}
{"snippet": "platform.libc_ver(version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7540}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}
{"snippet": "cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 1119}
{"snippet": "dis.disco(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2724}
{"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12662}
{"snippet": "itertools.zip_longest(*iterables, fillvalue=None)", "intent": "Make an iterator that aggregates elements from each of the iterables . If the iterables are of uneven length , missing values are filled-in with `fillvalue` . With arguments `*iterables`.", "question_id": 5269}
{"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794}
{"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}
{"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}
{"snippet": "wsgiref.validate.validator(application)", "intent": "Wrap `application` and return a new WSGI application object .", "question_id": 12235}
{"snippet": "XMLReader.setDTDHandler(handler)", "intent": "Set the current DTDHandler . With arguments `handler`.", "question_id": 12617}
{"snippet": "bytearray.endswith(suffix)", "intent": "Return True if the binary data ends with the specified `suffix` , otherwise return False .", "question_id": 9288}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "getpass.getpass(prompt='Password: ', stream=None)", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4207}
{"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}
{"snippet": "timeit.repeat(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10492}
{"snippet": "connection.backup(target, progress=None, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8838}
{"snippet": "FileCookieJar.load(ignore_discard=False, ignore_expires=False)", "intent": "Load cookies from a file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4512}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "fcntl.fcntl(fd, cmd)", "intent": "Perform the operation `cmd` on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3740}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}
{"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}
{"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}
{"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}
{"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}
{"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}
{"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004}
{"snippet": "doctest.run_docstring_examples(f, globs, verbose=False)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures .", "question_id": 2787}
{"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}
{"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`, `stdout`, `stderr`.", "question_id": 328}
{"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}
{"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}
{"snippet": "dict(**kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . With arguments `**kwarg`.", "question_id": 9467}
{"snippet": "shutil.copytree(src, dst, symlinks=False)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree .", "question_id": 8324}
{"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}
{"snippet": "property(fset=None, doc=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4094}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}
{"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}
{"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}
{"snippet": "email.generator.BytesGenerator(outfp)", "intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3078}
{"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}
{"snippet": "Morsel.output(attrs=None)", "intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` . By default , all the attributes are included , unless `attrs` is given , in which case it should be a list of attributes to use .", "question_id": 4602}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}
{"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}
{"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}
{"snippet": "curses.meta(flag)", "intent": "If `flag` is True , allow 8-bit characters to be input .", "question_id": 1953}
{"snippet": "test.support.set_memlimit(limit)", "intent": "Set the values for max_memuse and real_max_memuse for big memory tests . With arguments `limit`.", "question_id": 10167}
{"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "bytes.partition(sep)", "intent": "Split the sequence at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9305}
{"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}
{"snippet": "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4940}
{"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}
{"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}
{"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}
{"snippet": "threading.Barrier(parties, action=None)", "intent": "Create a barrier object for `parties` number of threads . An `action` , when provided , is a callable to be called by one of the threads when they are released .", "question_id": 10418}
{"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722}
{"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}
{"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}
{"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}
{"snippet": "Path.lchmod(mode)", "intent": "Like Path.chmod ( ) but , if the path points to a symbolic link , the symbolic link \u2019 s `mode` is changed rather than its target \u2019 s .", "question_id": 7282}
{"snippet": "email.headerregistry.Group(addresses=None)", "intent": "The class used to represent an address group . As a convenience for processing lists of `addresses` that consist of a mixture of groups and single addresses , a Group may also be used to represent single addresses that are not part of a group by setting `display_name` to None and providing a list of the single address as addresses .", "question_id": 3203}
{"snippet": "formatter.DumbWriter(file=None, maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3858}
{"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}
{"snippet": "calendar.prcal(year, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `c`.", "question_id": 1004}
{"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}
{"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}
{"snippet": "FTP.login(user='anonymous', acct='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3920}
{"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}
{"snippet": "os.utime(path, ns, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6960}
{"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}
{"snippet": "BaseHandler.add_parent(director)", "intent": "Add a `director` as parent .", "question_id": 11840}
{"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}
{"snippet": "email_message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3265}
{"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}
{"snippet": "nntplib.NNTP_SSL(host, timeout, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `user`.", "question_id": 6421}
{"snippet": "bytearray(source)", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor : With arguments `source`.", "question_id": 9265}
{"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}
{"snippet": "pool.starmap_async(func, iterable, chunksize, callback)", "intent": "A combination of starmap ( ) and map_async ( ) that iterates over `iterable` of iterables and calls `func` with the iterables unpacked . With arguments `chunksize`, `callback`.", "question_id": 6353}
{"snippet": "hmac.new(key, digestmod=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . `digestmod` is the digest name , digest constructor or module for the HMAC object to use .", "question_id": 4331}
{"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "email.utils.formatdate(localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3474}
{"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}
{"snippet": "doc_test_parser.parse(string, name='<string>')", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2860}
{"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}
{"snippet": "itertools.count(start=0)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5247}
{"snippet": "io_base.truncate(size=None)", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5079}
{"snippet": "os.removexattr(path, attribute)", "intent": "Removes the extended filesystem `attribute` attribute from `path` .", "question_id": 6999}
{"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352}
{"snippet": "time.replace(hour=self.hour, minute=self.minute)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`, `minute`.", "question_id": 2341}
{"snippet": "turtle.bk(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10906}
{"snippet": "collections.namedtuple(typename, field_names, rename=False, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1381}
{"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}
{"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}
{"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}
{"snippet": "zipfile.ZipFile(file, mode='r', compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12797}
{"snippet": "collections.namedtuple(typename, field_names, rename=False)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names .", "question_id": 1377}
{"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}
{"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}
{"snippet": "test_case.assertIsNotNone(expr)", "intent": "Test that `expr` is ( or is not ) None .", "question_id": 11389}
{"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}
{"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}
{"snippet": "unittest.FunctionTestCase(testFunc, description=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `description`.", "question_id": 11476}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "code.interact(readfunc=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1169}
{"snippet": "policy.fold(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message for a given header .", "question_id": 3426}
{"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this handler .", "question_id": 5601}
{"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}
{"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, loop=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`, `loop`.", "question_id": 541}
{"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}
{"snippet": "bdb.get_bpbynumber(arg)", "intent": "Return a breakpoint specified by the given number . If `arg` is a string , it will be converted to a number .", "question_id": 799}
{"snippet": "header.encode(\\t', maxlinelen=None)", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . With arguments `\\t'`.", "question_id": 3132}
{"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}
{"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}
{"snippet": "test.support.requires(resource)", "intent": "Raise ResourceDenied if `resource` is not available .", "question_id": 10147}
{"snippet": "plistlib.dumps(value, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `skipkeys`.", "question_id": 7574}
{"snippet": "compileall.compile_path(quiet=0)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `quiet`.", "question_id": 1433}
{"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}
{"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}
{"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}
{"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577}
{"snippet": "xml.parsers.expat.ErrorString(errno)", "intent": "Returns an explanatory string for a given error number `errno` .", "question_id": 7727}
{"snippet": "test_result.addFailure(test, err)", "intent": "Called when the `test` case test signals a failure . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11525}
{"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}
{"snippet": "dis.findlinestarts(code)", "intent": "This generator function uses the co_firstlineno and co_lnotab attributes of the `code` object code to find the offsets which are starts of lines in the source code .", "question_id": 2729}
{"snippet": "multiprocessing.get_context(method=None)", "intent": "Return a context object which has the same attributes as the multiprocessing module . If `method` is None then the default context is returned .", "question_id": 6225}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "timeit.repeat(stmt='pass', repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10495}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4157}
{"snippet": "os.killpg(pgid, sig)", "intent": "Send the signal `sig` to the process group `pgid` .", "question_id": 7038}
{"snippet": "window.addch(ch)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2001}
{"snippet": "message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3004}
{"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}
{"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}
{"snippet": "dis.Bytecode(x, current_offset=None)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . If `current_offset` is not None , it refers to an instruction offset in the disassembled code . With arguments `x`.", "question_id": 2697}
{"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}
{"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}
{"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}
{"snippet": "base_proxy._callmethod(methodname, args)", "intent": "Call and return the result of a method of the proxy \u2019 s referent . Note in particular that an exception will be raised if `methodname` has not been exposed . With arguments `args`.", "question_id": 6321}
{"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}
{"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}
{"snippet": "asyncio.wait_for(aw, timeout)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` .", "question_id": 605}
{"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443}
{"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, fflags=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `fflags`.", "question_id": 8163}
{"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}
{"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}
{"snippet": "profile.Profile(builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "question_id": 7673}
{"snippet": "logging.handlers.DatagramHandler(host, port)", "intent": "Returns a new instance of the DatagramHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5490}
{"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}
{"snippet": "os.spawnl(mode, path)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process .", "question_id": 7053}
{"snippet": "Path.lchmod(mode)", "intent": "Like Path.chmod ( ) but , if the path points to a symbolic link , the symbolic link \u2019 s `mode` is changed rather than its target \u2019 s .", "question_id": 7282}
{"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}
{"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}
{"snippet": "TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING)", "intent": "Create a string buffer from a TarInfo object . With arguments `format`, `encoding`.", "question_id": 9977}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}
{"snippet": "urllib.request.urlretrieve(url, filename=None, reporthook=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied . With arguments `reporthook`.", "question_id": 11885}
{"snippet": "nntplib.NNTP(host, timeout, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . An optional `timeout` can be specified for the socket connection . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6406}
{"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}
{"snippet": "mimetypes.MimeTypes(filenames=())", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database .", "question_id": 5957}
{"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}
{"snippet": "bytearray.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9310}
{"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}
{"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}
{"snippet": "formatter.assert_line_data(flag=1)", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .", "question_id": 3837}
{"snippet": "io.FileIO(name, closefd=True, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener . With arguments `closefd`.", "question_id": 5105}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}
{"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}
{"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}
{"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}
{"snippet": "set | other | ...", "intent": "Return a new set with elements from the set and all others.", "question_id": 9446}
{"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}
{"snippet": "faulthandler.dump_traceback_later(timeout)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3722}
{"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}
{"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}
{"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}
{"snippet": "timeit.repeat(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10491}
{"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}
{"snippet": "turtle.setposition(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10917}
{"snippet": "tarfile.open(**kwargs)", "intent": "Return a TarFile object for the pathname `name` . With arguments `**kwargs`.", "question_id": 9890}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}
{"snippet": "ArgumentParser.add_argument_group(description=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 97}
{"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}
{"snippet": "plistlib.load(fp, fmt=None)", "intent": "Read a plist file . `fp` should be a readable and binary file object . The `fmt` is the format of the file and the following values are valid :", "question_id": 7548}
{"snippet": "importlib.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4798}
{"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}
{"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}
{"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}
{"snippet": "sys.getsizeof(object, default)", "intent": "Return the size of an `object` in bytes . If given , `default` will be returned if the object does not provide means to retrieve the size .", "question_id": 9802}
{"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}
{"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}
{"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None, low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 412}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'EmailMessage'>`.", "question_id": 3063}
{"snippet": "io.open(file, mode='r', buffering=-1)", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`, `buffering`.", "question_id": 5059}
{"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "asyncio.wrap_future(future, loop=None)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`, `loop`.", "question_id": 358}
{"snippet": "parser.issuite(st)", "intent": "This function mirrors isexpr ( ) in that it reports whether an ST object represents an 'exec ' form , commonly known as a \u201c suite. \u201d It is not safe to assume that this function is equivalent to not isexpr ( `st` ) , as additional syntactic fragments may be supported in the future .", "question_id": 7225}
{"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}
{"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}
{"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}
{"snippet": "loop.sendfile(transport, file, offset=0)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file .", "question_id": 257}
{"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}
{"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}
{"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}
{"snippet": "termios.tcsetattr(fd, when, attributes)", "intent": "Set the tty `attributes` for file descriptor `fd` from the attributes , which is a list like the one returned by tcgetattr ( ) . The `when` argument determines when the attributes are changed : TCSANOW to change immediately , TCSADRAIN to change after transmitting all queued output , or TCSAFLUSH to change after transmitting all queued output and discarding all queued input .", "question_id": 10103}
{"snippet": "code.interact(readfunc=None, local=None)", "intent": "Convenience function to run a read-eval-print loop . This creates a new instance of InteractiveConsole and sets `readfunc` to be used as the InteractiveConsole.raw_input ( ) method , if provided . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1169}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}
{"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}
{"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}
{"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a', backupCount=0)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used . You can use the `maxBytes` and `backupCount` values to allow the file to rollover at a predetermined size .", "question_id": 5465}
{"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "ctypes.WINFUNCTYPE(restype, *argtypes)", "intent": "Windows only : The returned function prototype creates functions that use the stdcall calling convention , except on Windows CE where WINFUNCTYPE ( ) is the same as CFUNCTYPE ( ) . With arguments `restype`, `*argtypes`.", "question_id": 1796}
{"snippet": "gc.get_referents(*objs)", "intent": "Return a list of objects directly referred to by any of the arguments . With arguments `*objs`.", "question_id": 4182}
{"snippet": "pickle.load(file, fix_imports=True, errors=\"strict\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7376}
{"snippet": "ZipFile.open(name, mode='r')", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' .", "question_id": 12807}
{"snippet": "argparse.ArgumentParser(usage=None)", "intent": "Create a new ArgumentParser object . With arguments `usage`.", "question_id": 50}
{"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}
{"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}
{"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}
{"snippet": "element_tree.write(file, encoding=\"us-ascii\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12528}
{"snippet": "lzma.decompress(data, filters=None)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5717}
{"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}
{"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3727}
{"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}
{"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}
{"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}
{"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}
{"snippet": "loop.getaddrinfo(host, port, type=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `proto`.", "question_id": 297}
{"snippet": "Codec.encode(input, errors)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1261}
{"snippet": "DatagramProtocol.error_received(exc)", "intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "question_id": 441}
{"snippet": "InteractiveConsole.push(line)", "intent": "Push a `line` of source text to the interpreter .", "question_id": 1188}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}
{"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}
{"snippet": "fcntl.lockf(fd, cmd, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3749}
{"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}
{"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}
{"snippet": "subprocess.call(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9664}
{"snippet": "typing.MutableMapping(MappingKT, VT)", "intent": "A generic version of collections.abc.MutableMapping . With arguments `MappingKT`, `VT`.", "question_id": 11259}
{"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}
{"snippet": "IMAP4.append(mailbox, flags, date_time, message)", "intent": "Append `message` to named `mailbox` . With arguments `flags`, `date_time`.", "question_id": 4691}
{"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}
{"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}
{"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481}
{"snippet": "Path.chmod(mode)", "intent": "Change the file `mode` and permissions , like os.chmod ( ) :", "question_id": 7268}
{"snippet": "filecmp.dircmp(a, b, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3762}
{"snippet": "xml.dom.registerDOMImplementation(name, factory)", "intent": "Register the `factory` function with the `name` name .", "question_id": 12302}
{"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}
{"snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 758}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "TarFile.list(verbose=True, members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9930}
{"snippet": "struct.pack_into(buffer, offset, v1, v2)", "intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "question_id": 9560}
{"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}
{"snippet": "binascii.b2a_qp(data, istext=True, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 834}
{"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}
{"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}
{"snippet": "FTP.connect(host='')", "intent": "Connect to the given `host` and `port` .", "question_id": 3905}
{"snippet": "audioop.findfit(fragment, reference)", "intent": "Try to match `reference` as well as possible to a portion of `fragment` ( which should be the longer fragment ) .", "question_id": 689}
{"snippet": "urllib.parse.quote(string, errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11708}
{"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}
{"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}
{"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}
{"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1708}
{"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}
{"snippet": "time.gmtime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10441}
{"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}
{"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}
{"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}
{"snippet": "TarFile.extractall(path=\".\", members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9936}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021}
{"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "tkinter.Tk(baseName=None)", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`.", "question_id": 10519}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}
{"snippet": "operator.__inv__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6542}
{"snippet": "ctypes.CDLL(name, handle=None)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `handle`.", "question_id": 1742}
{"snippet": "datetime.datetime(year, month, day)", "intent": "The `year` , `month` and `day` arguments are required .", "question_id": 2247}
{"snippet": "stream_reader.read(size, chars)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return .", "question_id": 1287}
{"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}
{"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}
{"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}
{"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}
{"snippet": "OptionParser.add_option(option)", "intent": "To define an `option` with only a short option string :", "question_id": 6623}
{"snippet": "codecs.ignore_errors(exception)", "intent": "Implements the 'ignore ' error handling : malformed data is ignored and encoding or decoding is continued without further notice . With arguments `exception`.", "question_id": 1257}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}
{"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10246}
{"snippet": "bytearray.rsplit(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9357}
{"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}
{"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}
{"snippet": "re.subn(pattern, repl, string, count=0, flags=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `count`, `flags`.", "question_id": 7958}
{"snippet": "test.support.import_fresh_module(name, fresh=(), deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10247}
{"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}
{"snippet": "asyncio.open_connection(sock=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `sock`.", "question_id": 472}
{"snippet": "ConnectionRefusedError", "intent": "A subclass of ConnectionError, raised when a connection attempt is refused by the peer.", "question_id": 3691}
{"snippet": "code.InteractiveConsole(locals=None)", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `locals`.", "question_id": 1158}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}
{"snippet": "urllib.request.urlopen(url, timeout, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11743}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 968}
{"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}
{"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}
{"snippet": "unittest.mock.Mock(**kwargs, return_value=DEFAULT)", "intent": "Create a new Mock object . With arguments `**kwargs`, `return_value`.", "question_id": 11563}
{"snippet": "str(object=b'', encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9177}
{"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4588}
{"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}
{"snippet": "sync_manager.Barrier(parties, action)", "intent": "Create a shared threading.Barrier object and return a proxy for it . With arguments `parties`, `action`.", "question_id": 6297}
{"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}
{"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}
{"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}
{"snippet": "Path.open(newline=None)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `newline`.", "question_id": 7297}
{"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}
{"snippet": "shutil.copyfile(src, dst, follow_symlinks=True)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst . If `follow_symlinks` is false and src is a symbolic link , a new symbolic link will be created instead of copying the file src points to .", "question_id": 8312}
{"snippet": "py_compile.compile(file, optimize=-1)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `optimize` controls the optimization level and is passed to the built-in compile ( ) function .", "question_id": 7825}
{"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}
{"snippet": "traceback.print_exception(etype, value, tb, file=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10739}
{"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}
{"snippet": "oss_audio_device.setparameters(format, nchannels, strict=False)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods . If `strict` is true , setparameters ( ) checks to see if each parameter was actually set to the requested value , and raises OSSAudioError if not .", "question_id": 7194}
{"snippet": "os.open(path, flags)", "intent": "Open the file `path` and set various `flags` according to flags and possibly its `mode` according to mode .", "question_id": 6738}
{"snippet": "test_case.assertIsNot(first, second, msg=None)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object . With arguments `msg`.", "question_id": 11386}
{"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args, description)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable . `description` can be provided to describe the format , and will be returned by the get_unpack_formats ( ) function .", "question_id": 8366}
{"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}
{"snippet": "element.findtext(match, namespaces=None)", "intent": "Finds text for the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12497}
{"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}
{"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}
{"snippet": "pool.map_async(func, iterable, chunksize)", "intent": "A variant of the map ( ) method which returns a result object . With arguments `func`, `iterable`, `chunksize`.", "question_id": 6344}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}
{"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}
{"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser(), exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2849}
{"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}
{"snippet": "base_selector.register(fileobj, events, data=None)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor . `data` is an opaque object .", "question_id": 8216}
{"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}
{"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}
{"snippet": "mailbox.MH(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in MH format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5777}
{"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509}
{"snippet": "marshal.loads(bytes)", "intent": "Convert the bytes-like object to a value . Extra `bytes` in the input are ignored .", "question_id": 5883}
{"snippet": "email.contentmanager.set_content(msg, <'str'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'str'>`.", "question_id": 3044}
{"snippet": "sync_manager.dict(sequence)", "intent": "Create a shared dict object and return a proxy for it . With arguments `sequence`.", "question_id": 6315}
{"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}
{"snippet": "tempfile.TemporaryFile(newline=None)", "intent": "Return a file-like object that can be used as a temporary storage area . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10037}
{"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}
{"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}
{"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}
{"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}
{"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}
{"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}
{"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}
{"snippet": "loop.start_tls(transport, protocol, sslcontext, server_hostname=None)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`, `server_hostname`.", "question_id": 266}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315}
{"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}
{"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}
{"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}
{"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}
{"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}
{"snippet": "message.get_param(param, header='content-type', unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2997}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11128}
{"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}
{"snippet": "auto.with_traceback(tb)", "intent": "This method sets `tb` as the new traceback for the exception and returns the exception object .", "question_id": 3630}
{"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}
{"snippet": "gettext.find(domain)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes .", "question_id": 4221}
{"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}
{"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}
{"snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1176}
{"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}
{"snippet": "dataclasses.field(default=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function .", "question_id": 2168}
{"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}
{"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444}
{"snippet": "doc_test_parser.get_doctest(string, globs, name, filename, lineno)", "intent": "Extract all doctest examples from the given `string` , and collect them into a DocTest object . `globs` , `name` , `filename` , and `lineno` are attributes for the new DocTest object .", "question_id": 2856}
{"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}
{"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}
{"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}
{"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}
{"snippet": "len(s)", "intent": "Return the number of elements in set `s` ( cardinality of s ) .", "question_id": 9435}
{"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}
{"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}
{"snippet": "datetime.datetime(year, month, day, hour=0, microsecond=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `microsecond`.", "question_id": 2256}
{"snippet": "cgitb.enable(display=1)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser .", "question_id": 1060}
{"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}
{"snippet": "turtle.distance(x, y=None)", "intent": "Return the distance from the turtle to ( `x` , `y` ) , the given vector , or the given other turtle , in turtle step units .", "question_id": 10944}
{"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}
{"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}
{"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}
{"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}
{"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}
{"snippet": "CookieJar.clear(domain, path, name)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed . If given three arguments , then the cookie with the specified domain , path and `name` is removed .", "question_id": 4493}
{"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}
{"snippet": "element_tree.find(match, namespaces=None)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`, `namespaces`.", "question_id": 12513}
{"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191}
{"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}
{"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None)", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3213}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934}
{"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}
{"snippet": "mmap.find(sub)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6004}
{"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}
{"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}
{"snippet": "shelve.open(filename, flag='c')", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) .", "question_id": 8235}
{"snippet": "test_case.subTest(**params, msg=None)", "intent": "Return a context manager which executes the enclosed code block as a subtest . `msg` and params are optional , arbitrary values which are displayed whenever a subtest fails , allowing you to identify them clearly . With arguments `**params`.", "question_id": 11373}
{"snippet": "platform.java_ver('', ''), '', ''), vendor='', osinfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7494}
{"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}
{"snippet": "select.kevent(ident)", "intent": "( Only supported on BSD . ) With arguments `ident`.", "question_id": 8156}
{"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}
{"snippet": "chunk.Chunk(file, align=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries .", "question_id": 1076}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}
{"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}
{"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}
{"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}
{"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502}
{"snippet": "cgi.parse_qsl(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1043}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "ZipFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object .", "question_id": 12814}
{"snippet": "codecs.encode(obj)", "intent": "Encodes `obj` using the codec registered for `encoding` .", "question_id": 1192}
{"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}
{"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075}
{"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}
{"snippet": "timeit.Timer(setup='pass')", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10499}
{"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}
{"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}
{"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}
{"snippet": "test.support.join_thread(thread, timeout=30.0)", "intent": "Join a `thread` within `timeout` .", "question_id": 10255}
{"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9168}
{"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}
{"snippet": "frozenset()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9434}
{"snippet": "sqlite3.complete_statement(sql)", "intent": "Returns True if the string `sql` contains one or more complete SQL statements terminated by semicolons .", "question_id": 8801}
{"snippet": "mh.__delitem__(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5787}
{"snippet": "r_lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . When invoked with the `block` argument set to True , block until the lock is in an unlocked state ( not owned by any process or thread ) unless the lock is already owned by the current process or thread .", "question_id": 6259}
{"snippet": "loop.start_tls(transport, protocol, sslcontext, ssl_handshake_timeout=None)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`, `ssl_handshake_timeout`.", "question_id": 267}
{"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}
{"snippet": "encodings.idna.ToUnicode(label)", "intent": "Convert a `label` to Unicode , as specified in RFC 3490 .", "question_id": 1303}
{"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}
{"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}
{"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}
{"snippet": "test.support.TransientResource(exc, **kwargs)", "intent": "Instances are a context manager that raises ResourceDenied if the specified exception type is raised . With arguments `exc`, `**kwargs`.", "question_id": 10285}
{"snippet": "platform.architecture(executable=sys.executable)", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7459}
{"snippet": "shutil.copyfileobj(fsrc, fdst, length)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` . The integer `length` , if given , is the buffer size .", "question_id": 8309}
{"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}
{"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}
{"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}
{"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}
{"snippet": "sniffer.sniff(sample, delimiters=None)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found . If the optional `delimiters` parameter is given , it is interpreted as a string containing possible valid delimiter characters .", "question_id": 1716}
{"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "kqueue.control(changelist, max_events, timeout)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`, `timeout`.", "question_id": 8201}
{"snippet": "BaseCookie.js_output(attrs=None)", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4593}
{"snippet": "math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 5897}
{"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}
{"snippet": "FTP.storbinary(cmd, fp, blocksize=8192)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored .", "question_id": 3934}
{"snippet": "pprint.pformat(object, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7636}
{"snippet": "subprocess.check_call(args, stdin=None, shell=False)", "intent": "Run command with arguments . With arguments `args`, `stdin`, `shell`.", "question_id": 9678}
{"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}
{"snippet": "pool.map(func, iterable, chunksize)", "intent": "A parallel equivalent of the map ( ) built-in function ( it supports only one `iterable` argument though ) . The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer . With arguments `func`.", "question_id": 6340}
{"snippet": "Pattern.finditer(string, pos, endpos)", "intent": "Similar to the finditer ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7984}
{"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "bytes(source, encoding, errors)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`, `errors`.", "question_id": 3985}
{"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}
{"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}
{"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}
{"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}
{"snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, errors='replace')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11677}
{"snippet": "binascii.b2a_qp(data, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 831}
{"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}
{"snippet": "select.kevent(ident)", "intent": "( Only supported on BSD . ) With arguments `ident`.", "question_id": 8156}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769}
{"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}
{"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}
{"snippet": "auto.with_traceback(tb)", "intent": "This method sets `tb` as the new traceback for the exception and returns the exception object .", "question_id": 3630}
{"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "multiprocessing.Value(typecode_or_type, *args, lock=True)", "intent": "Return a ctypes object allocated from shared memory . `typecode_or_type` determines the type of the returned object : it is either a ctypes type or a one character typecode of the kind used by the array module . `*args` is passed on to the constructor for the type . If `lock` is True ( the default ) then a new recursive lock object is created to synchronize access to the value .", "question_id": 6266}
{"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}
{"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}
{"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}
{"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}
{"snippet": "urllib.request.URLopener(**x509, proxies=None)", "intent": "Base class for opening and reading URLs . The optional `proxies` parameter should be a dictionary mapping scheme names to proxy URLs , where an empty dictionary turns proxies off completely . With arguments `**x509`.", "question_id": 11891}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}
{"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}
{"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}
{"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}
{"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}
{"snippet": "doc_test_runner.run(test, out=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2875}
{"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}
{"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}
{"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078}
{"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}
{"snippet": "dict(iterable, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . Otherwise , the positional argument must be an `iterable` object . With arguments `**kwarg`.", "question_id": 9469}
{"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}
{"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}
{"snippet": "os.access(path, mode)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions .", "question_id": 6820}
{"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . If your SMTP server requires authentication , you can specify a ( username , password ) tuple for the `credentials` argument . With arguments `fromaddr`.", "question_id": 5516}
{"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}
{"snippet": "codecs.CodecInfo(encode, decode, streamreader=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`.", "question_id": 1202}
{"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}
{"snippet": "raw_config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1590}
{"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}
{"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}
{"snippet": "test.support.bind_port(sock)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`.", "question_id": 10258}
{"snippet": "test_case.assertAlmostEqual(first, second, msg=None, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta . With arguments `msg`.", "question_id": 11423}
{"snippet": "test.support.set_memlimit(limit)", "intent": "Set the values for max_memuse and real_max_memuse for big memory tests . With arguments `limit`.", "question_id": 10167}
{"snippet": "urllib.parse.urlencode(query, errors=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11736}
{"snippet": "asyncio.wrap_future(future)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`.", "question_id": 357}
{"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}
{"snippet": "BaseException", "intent": "The base class for all built-in exceptions.", "question_id": 3628}
{"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}
{"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}
{"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}
{"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}
{"snippet": "connection.executemany(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8813}
{"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}
{"snippet": "urllib.request.urlopen(url, timeout, data=None, context=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .", "question_id": 11751}
{"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}
{"snippet": "str.find(sub)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9196}
{"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, server_hostname=None, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9040}
{"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}
{"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}
{"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}
{"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "codecs.iterencode(iterator, encoding, **kwargs)", "intent": "Uses an incremental encoder to iteratively encode the input provided by `iterator` . With arguments `encoding`, `**kwargs`.", "question_id": 1239}
{"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068}
{"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}
{"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}
{"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}
{"snippet": "tkinter.Tcl(screenName=None, className='Tk')", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `screenName`, `className`.", "question_id": 10533}
{"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}
{"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}
{"snippet": "bytes_io.read1(size)", "intent": "In BytesIO , this is the same as read ( ) . With arguments `size`.", "question_id": 5113}
{"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}
{"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}
{"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}
{"snippet": "logging.handlers.TimedRotatingFileHandler(filename, interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5472}
{"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}
{"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}
{"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}
{"snippet": "os.execvpe(file, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7016}
{"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}
{"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}
{"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}
{"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'EmailMessage'>`.", "question_id": 3059}
{"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}
{"snippet": "print(*objects, end='\\n', file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4083}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}
{"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}
{"snippet": "email.charset.add_charset(charset)", "intent": "Add character properties to the global registry . `charset` is the input character set , and must be the canonical name of a character set .", "question_id": 2926}
{"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}
{"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}
{"snippet": "urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11704}
{"snippet": "calendar.prcal(year)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) .", "question_id": 1001}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}
{"snippet": "FTP.dir(argument)", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3957}
{"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}
{"snippet": "email_policy.header_source_parse(sourcelines)", "intent": "The name is parsed as everything up to the \u2018 : \u2019 and returned unmodified . With arguments `sourcelines`.", "question_id": 3434}
{"snippet": "subprocess.check_call(args, stdout=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9671}
{"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}
{"snippet": "base64.a85decode(b, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 738}
{"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}
{"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416}
{"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}
{"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}
{"snippet": "compileall.compile_path(optimize=-1)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `optimize`.", "question_id": 1435}
{"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}
{"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}
{"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}
{"snippet": "pkgutil.walk_packages(path=None, onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7454}
{"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}
{"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11128}
{"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}
{"snippet": "null_importer.find_module(fullname, path)", "intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`, `path`.", "question_id": 4781}
{"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}
{"snippet": "watched_file_handler.emit(record)", "intent": "Outputs the `record` to the file , but first calls reopenIfNeeded ( ) to reopen the file if it has changed .", "question_id": 5449}
{"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}
{"snippet": "pkgutil.extend_path(path, name)", "intent": "Extend the search `path` for the modules which comprise a package . It also looks for *.pkg files beginning where * matches the `name` argument .", "question_id": 7436}
{"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934}
{"snippet": "multiprocessing.JoinableQueue(maxsize)", "intent": "JoinableQueue , a Queue subclass , is a queue which additionally has task_done ( ) and join ( ) methods . With arguments `maxsize`.", "question_id": 6215}
{"snippet": "tty.setraw(fd, when=termios.TCSAFLUSH)", "intent": "Change the mode of the file descriptor `fd` to raw . If `when` is omitted , it defaults to termios.TCSAFLUSH , and is passed to termios.tcsetattr ( ) .", "question_id": 10900}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "unpickler.find_class(module, name)", "intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "question_id": 7408}
{"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}
{"snippet": "faulthandler.unregister(signum)", "intent": "Unregister a user signal : uninstall the handler of the `signum` signal installed by register ( ) .", "question_id": 3739}
{"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}
{"snippet": "@functools.lru_cache(typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4148}
{"snippet": "bdb.Breakpoint(self, file, line, cond=None, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`, `cond`.", "question_id": 760}
{"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}
{"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "glob.iglob(pathname)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`.", "question_id": 4266}
{"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}
{"snippet": "os.execvp(file, args)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7015}
{"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}
{"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}
{"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021}
{"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}
{"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}
{"snippet": "dataclasses.make_dataclass(cls_name, fields, frozen=False)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2191}
{"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}
{"snippet": "datetime.time(minute=0)", "intent": "All arguments are optional . With arguments `minute`.", "question_id": 2316}
{"snippet": "turtle.circle(radius, extent=None, steps=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10926}
{"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "zlib.decompress(data, wbits=MAX_WBITS, bufsize=DEF_BUF_SIZE)", "intent": "Decompresses the bytes in `data` , returning a bytes object containing the uncompressed data . The `wbits` parameter depends on the format of data , and is discussed further below . If `bufsize` is given , it is used as the initial size of the output buffer .", "question_id": 12922}
{"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}
{"snippet": "ctypes.string_at(address)", "intent": "This function returns the C string starting at memory `address` address as a bytes object .", "question_id": 1834}
{"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}
{"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}
{"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094}
{"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}
{"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}
{"snippet": "message.set_param(param, value, header='Content-Type', replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3008}
{"snippet": "Morsel.output(attrs=None, header='Set-Cookie:')", "intent": "Return a string representation of the Morsel , suitable to be sent as an HTTP `header` . By default , all the attributes are included , unless `attrs` is given , in which case it should be a list of attributes to use .", "question_id": 4604}
{"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}
{"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}
{"snippet": "os.execvpe(file, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7016}
{"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}
{"snippet": "test.support.requires(resource)", "intent": "Raise ResourceDenied if `resource` is not available .", "question_id": 10147}
{"snippet": "str(errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9173}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}
{"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}
{"snippet": "unicodedata.name(chr)", "intent": "Returns the name assigned to the character `chr` as a string .", "question_id": 11342}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "cgitb.html(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1072}
{"snippet": "io.FileIO(name, closefd=True, opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : A custom `opener` can be used by passing a callable as opener . With arguments `closefd`.", "question_id": 5105}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "asyncio.open_unix_connection(limit=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `limit`.", "question_id": 486}
{"snippet": "BaseTransport.get_extra_info(name, default=None)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get . `default` is the value to return if the information is not available , or if the transport does not support querying it with the given third-party event loop implementation or on the current platform .", "question_id": 399}
{"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}
{"snippet": "config_parser.remove_section(section)", "intent": "Remove the specified `section` from the configuration .", "question_id": 1564}
{"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}
{"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}
{"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}
{"snippet": "tempfile.TemporaryFile(mode='w+b', encoding=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10042}
{"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}
{"snippet": "aifc.readframes(nframes)", "intent": "Read and return the next `nframes` frames from the audio file .", "question_id": 20}
{"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}
{"snippet": "doc_test_runner.run(test, out=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2875}
{"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}
{"snippet": "urllib.request.Request(url, data=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed .", "question_id": 11769}
{"snippet": "ContentHandler.startElementNS(name, qname, attrs)", "intent": "Signals the start of an element in namespace mode . The `name` parameter contains the name of the element type as a ( uri , localname ) tuple , the `qname` parameter contains the raw XML 1.0 name used in the source document , and the `attrs` parameter holds an instance of the AttributesNS interface ( see The AttributesNS Interface ) containing the attributes of the element .", "question_id": 12577}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . The type of socket opened depends on the `socktype` argument , which defaults to socket.SOCK_DGRAM and thus opens a UDP socket . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5499}
{"snippet": "mailcap.findmatch(caps, MIMEtype, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5864}
{"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}
{"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}
{"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5548}
{"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}
{"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}
{"snippet": "base64.a85decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 743}
{"snippet": "audioop.bias(fragment, width, bias)", "intent": "Return a `fragment` that is the original fragment with a `bias` added to each sample . With arguments `width`.", "question_id": 685}
{"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}
{"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}
{"snippet": "fileinput.input(bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `bufsize`.", "question_id": 3786}
{"snippet": "os.spawnlp(mode, file)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` .", "question_id": 7055}
{"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}
{"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}
{"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}
{"snippet": "codecs.encode(obj)", "intent": "Encodes `obj` using the codec registered for `encoding` .", "question_id": 1192}
{"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}
{"snippet": "itertools.filterfalse(predicate, iterable)", "intent": "Make an iterator that filters elements from `iterable` returning only those for which the `predicate` is False .", "question_id": 5252}
{"snippet": "itertools.repeat(object, times)", "intent": "Make an iterator that returns `object` over and over again . Runs indefinitely unless the `times` argument is specified .", "question_id": 5262}
{"snippet": "io.FileIO(name, mode='r', opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending . A custom `opener` can be used by passing a callable as opener .", "question_id": 5104}
{"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}
{"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}
{"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}
{"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}
{"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}
{"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}
{"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}
{"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}
{"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}
{"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}
{"snippet": "email.encoders.encode_quopri(msg)", "intent": "Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1 . With arguments `msg`.", "question_id": 3069}
{"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}
{"snippet": "ur_lopener.retrieve(url, filename=None, reporthook=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) .", "question_id": 11900}
{"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}
{"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}
{"snippet": "compileall.compile_dir(dir, force=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `force` is true , modules are re-compiled even if the timestamps are up to date .", "question_id": 1412}
{"snippet": "path_entry_finder.find_spec(fullname)", "intent": "An abstract method for finding a spec for the specified module . With arguments `fullname`.", "question_id": 4808}
{"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}
{"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}
{"snippet": "test_case.assertNotAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11428}
{"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}
{"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391}
{"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}
{"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}
{"snippet": "warnings.showwarning(message, category, filename, lineno, line=None)", "intent": "Write a warning to a `file` . The default implementation calls formatwarning ( `message` , `category` , `filename` , `lineno` , `line` ) and writes the resulting string to file , which defaults to sys.stderr .", "question_id": 12019}
{"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}
{"snippet": "email.generator.DecodedGenerator(outfp)", "intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "question_id": 3106}
{"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}
{"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810}
{"snippet": "os.sendfile(out, in, offset, count, headers, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6798}
{"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}
{"snippet": "abstract_event_loop_policy.set_child_watcher(watcher)", "intent": "Set the current child process `watcher` to watcher .", "question_id": 379}
{"snippet": "base_selector.get_key(fileobj)", "intent": "Return the key associated with a registered file object . With arguments `fileobj`.", "question_id": 8223}
{"snippet": "Telnet.set_option_negotiation_callback(callback)", "intent": "Each time a telnet option is read on the input flow , this `callback` ( if set ) is called with the following parameters : callback ( telnet socket , command ( DO/DONT/WILL/WONT ) , option ) .", "question_id": 10032}
{"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}
{"snippet": "types.DynamicClassAttribute(doc=None)", "intent": "Route attribute access on a class to __getattr__ . With arguments `doc`.", "question_id": 11222}
{"snippet": "BaseHandler.add_parent(director)", "intent": "Add a `director` as parent .", "question_id": 11840}
{"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}
{"snippet": "traceback.format_exception(etype, value, tb)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`.", "question_id": 10777}
{"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}
{"snippet": "parser.isexpr(st)", "intent": "When `st` represents an 'eval ' form , this function returns true , otherwise it returns false .", "question_id": 7224}
{"snippet": "compileall.compile_file(fullname)", "intent": "Compile the file with path `fullname` .", "question_id": 1419}
{"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}
{"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}
{"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}
{"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}
{"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}
{"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}
{"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007}
{"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}
{"snippet": "calendar.month(theyear, themonth, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `l`.", "question_id": 999}
{"snippet": "optparse.OptionGroup(parser, title)", "intent": "where With arguments `parser`, `title`.", "question_id": 6616}
{"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}
{"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}
{"snippet": "os.kill(pid, sig)", "intent": "Send signal `sig` to the process `pid` .", "question_id": 7037}
{"snippet": "fcntl.lockf(fd, cmd, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3749}
{"snippet": "Pattern.subn(repl, string)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7989}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}
{"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}
{"snippet": "turtle.circle(radius, extent=None, steps=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10926}
{"snippet": "re.subn(pattern, repl, string)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`.", "question_id": 7955}
{"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}
{"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}
{"snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "question_id": 11477}
{"snippet": "os.spawnv(mode, path, args)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7057}
{"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}
{"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}
{"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}
{"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}
{"snippet": "multiprocessing.pool.Pool(processes, initializer)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts .", "question_id": 6329}
{"snippet": "policy.fold_binary(name, value)", "intent": "The same as fold ( ) , except that the returned `value` should be a bytes object rather than a string . With arguments `name`.", "question_id": 3427}
{"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}
{"snippet": "traceback.format_exception(etype, value, tb)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`.", "question_id": 10777}
{"snippet": "Telnet.set_debuglevel(debuglevel)", "intent": "Set the debug level . The higher the value of `debuglevel` , the more debug output you get ( on sys.stdout ) .", "question_id": 10023}
{"snippet": "dis.disco(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2723}
{"snippet": "cgi.parse_multipart(fp, pdict, encoding=\"utf-8\")", "intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding .", "question_id": 1048}
{"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}
{"snippet": "os.initgroups(username, gid)", "intent": "Call the system initgroups ( ) to initialize the group access list with all of the groups of which the specified `username` is a member , plus the specified group id . With arguments `gid`.", "question_id": 6691}
{"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}
{"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}
{"snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11422}
{"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}
{"snippet": "compileall.compile_path(skip_curdir=True, maxlevels=0)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . Note that unlike the other compile functions , `maxlevels` defaults to 0 .", "question_id": 1437}
{"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}
{"snippet": "Telnet.set_debuglevel(debuglevel)", "intent": "Set the debug level . The higher the value of `debuglevel` , the more debug output you get ( on sys.stdout ) .", "question_id": 10023}
{"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}
{"snippet": "Pattern.subn(repl, string)", "intent": "Identical to the subn ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7989}
{"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}
{"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}
{"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}
{"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}
{"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}
{"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}
{"snippet": "pickle.loads(bytes_object, fix_imports=True, errors=\"strict\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7384}
{"snippet": "asyncio.wait_for(aw, timeout)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` .", "question_id": 605}
{"snippet": "traceback.print_tb(tb)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive .", "question_id": 10733}
{"snippet": "decimal.copy_sign(other)", "intent": "Return a copy of the first operand with the sign set to be the same as the sign of the second operand . With arguments `other`.", "question_id": 2410}
{"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}
{"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322}
{"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}
{"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}
{"snippet": "shutil.copystat(src, dst, follow_symlinks=True)", "intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` . If `follow_symlinks` is false , and src and dst both refer to symbolic links , copystat ( ) will operate on the symbolic links themselves rather than the files the symbolic links refer to\u2014reading the information from the src symbolic link , and writing the information to the dst symbolic link .", "question_id": 8317}
{"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}
{"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}
{"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 968}
{"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}
{"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}
{"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}
{"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}
{"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}
{"snippet": "struct.unpack_from(format, buffer, offset=0)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9555}
{"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}
{"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}
{"snippet": "codeop.compile_command(source, filename=\"<input>\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' .", "question_id": 1305}
{"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}
{"snippet": "formatter.set_spacing(spacing)", "intent": "Set the `spacing` style for the writer .", "question_id": 3835}
{"snippet": "lzma.LZMADecompressor(format=FORMAT_AUTO, filters=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `format` argument specifies the container format that should be used . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "question_id": 5695}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434}
{"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}
{"snippet": "platform.architecture(executable=sys.executable)", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7459}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10973}
{"snippet": "queue.get(block)", "intent": "Remove and return an item from the queue . If optional args `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 6205}
{"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10246}
{"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}
{"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}
{"snippet": "stream_handler.setStream(stream)", "intent": "Sets the instance \u2019 s `stream` to the specified value , if it is different .", "question_id": 5425}
{"snippet": "test_case.assertRaises(exception, callable, *args, **kwds)", "intent": "Test that an `exception` is raised when `callable` is called with any positional or keyword arguments that are also passed to assertRaises ( ) . With arguments `*args`, `**kwds`.", "question_id": 11399}
{"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}
{"snippet": "connection.backup(target, progress=None, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8837}
{"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}
{"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}
{"snippet": "msvcrt.locking(fd, mode, nbytes)", "intent": "Lock part of a file based on file descriptor `fd` from the C runtime . `mode` must be one of the LK_* constants listed below . The locked region of the file extends from the current file position for `nbytes` bytes , and may continue beyond the end of the file .", "question_id": 6146}
{"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}
{"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}
{"snippet": "os.posix_fadvise(fd, offset, len, advice)", "intent": "Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations . The `advice` applies to the region of the file specified by `fd` starting at `offset` and continuing for `len` bytes .", "question_id": 6776}
{"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}
{"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}
{"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}
{"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}
{"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}
{"snippet": "difflib.context_diff(a, b, fromfile='', fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2636}
{"snippet": "faulthandler.unregister(signum)", "intent": "Unregister a user signal : uninstall the handler of the `signum` signal installed by register ( ) .", "question_id": 3739}
{"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}
{"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472}
{"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}
{"snippet": "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4159}
{"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}
{"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}
{"snippet": "fraction.__ceil__()", "intent": "Returns the least int > = self .", "question_id": 3874}
{"snippet": "venv.EnvBuilder(system_site_packages=False, clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `clear`.", "question_id": 11979}
{"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961}
{"snippet": "csv.DictReader(f, *args, **kwds, fieldnames=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1693}
{"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}
{"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}
{"snippet": "str(object='')", "intent": "Return a string version of `object` .", "question_id": 9169}
{"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}
{"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}
{"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}
{"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345}
{"snippet": "tempfile.mktemp(suffix='', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10099}
{"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}
{"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}
{"snippet": "stat.S_ISDIR(mode)", "intent": "Return non-zero if the `mode` is from a directory .", "question_id": 9061}
{"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}
{"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}
{"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}
{"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}
{"snippet": "code.compile_command(source, filename=\"<input>\", symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1174}
{"snippet": "turtle.write(arg, 8, \"normal\"), move=False, font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10974}
