[{"snippet": "xmlrpc.server.CGIXMLRPCRequestHandler()", "intent": "Create a new instance to handle XML-RPC requests in a CGI environment .", "question_id": 12722}, {"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}, {"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY", "intent": "Expat was not able to allocate memory internally.", "question_id": 7797}, {"snippet": "aifc.aifc()", "intent": "Create an AIFF-C file .", "question_id": 26}, {"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}, {"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}, {"snippet": "zipfile.BadZipFile", "intent": "The error raised for bad ZIP files.", "question_id": 12778}, {"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242}, {"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}, {"snippet": "functools.partialmethod(func, *args, **keywords)", "intent": "Return a new partialmethod descriptor which behaves like partial except that it is designed to be used as a method definition rather than being directly callable . `func` must be a descriptor or a callable ( objects which are both , like normal functions , are handled as descriptors ) . With arguments `*args`, `**keywords`.", "question_id": 4152}, {"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}, {"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}, {"snippet": "os.access(path, mode, effective_ids=False, follow_symlinks=True)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . If `effective_ids` is True , access ( ) will perform its access checks using the effective uid/gid instead of the real uid/gid . With arguments `follow_symlinks`.", "question_id": 6826}, {"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}, {"snippet": "mmap.mmap(fileno, length, tagname=None, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `tagname` , if specified and not None , is a string giving a tag name for the mapping . With arguments `access`.", "question_id": 5983}, {"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}, {"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9038}, {"snippet": "time.CLOCK_HIGHRES", "intent": "The Solaris OS has a CLOCK_HIGHRES timer that attempts to use an optimal hardware source, and may give close to nanosecond resolution.", "question_id": 10464}, {"snippet": "WriteTransport.set_write_buffer_limits(low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 411}, {"snippet": "ArgumentParser.print_help()", "intent": "Print a help message , including the program usage and information about the arguments registered with the ArgumentParser .", "question_id": 105}, {"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}, {"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511}, {"snippet": "bdb.clear_all_file_breaks(filename)", "intent": "Delete all breakpoints in `filename` .", "question_id": 797}, {"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}, {"snippet": "webbrowser.register(name, constructor, instance=None, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12113}, {"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}, {"snippet": "element.remove(subelement)", "intent": "Removes `subelement` from the element .", "question_id": 12506}, {"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}, {"snippet": "errno.EADDRNOTAVAIL", "intent": "Cannot assign requested address", "question_id": 3604}, {"snippet": "operator.__inv__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6542}, {"snippet": "window.insertln()", "intent": "Insert a blank line under the cursor .", "question_id": 2076}, {"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}, {"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}, {"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377}, {"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}, {"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}, {"snippet": "zipfile.ZipFile(file, allowZip64=True)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . If `allowZip64` is True ( the default ) zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 4 GiB .", "question_id": 12795}, {"snippet": "bdb.set_trace()", "intent": "Start debugging from `frame` .", "question_id": 790}, {"snippet": "turtle.begin_poly()", "intent": "Start recording the vertices of a polygon .", "question_id": 11031}, {"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}, {"snippet": "FileCookieJar.delayload", "intent": "If true, load cookies lazily from disk.", "question_id": 4523}, {"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}, {"snippet": "NNTP.xover(start, end, file=None)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select . With arguments `file`.", "question_id": 6500}, {"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}, {"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}, {"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}, {"snippet": "imp.C_EXTENSION", "intent": "The module was found as dynamically loadable shared library.", "question_id": 4776}, {"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}, {"snippet": "formatter.set_spacing(spacing)", "intent": "Set the `spacing` style for the writer .", "question_id": 3835}, {"snippet": "stream_reader.read(size, chars)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding . The `chars` argument indicates the number of decoded code points or bytes to return .", "question_id": 1287}, {"snippet": "winsound.SND_NOSTOP", "intent": "Do not interrupt sounds currently playing.", "question_id": 12203}, {"snippet": "enum.unique()", "intent": "Enum class decorator that ensures only one name is bound to any one value .", "question_id": 3503}, {"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}, {"snippet": "inspect.getcomments(object)", "intent": "Return in a single string any lines of comments immediately preceding the `object` \u2019 s source code ( for a class , function , or method ) , or at the top of the Python source file ( if the object is a module ) .", "question_id": 4970}, {"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204}, {"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}, {"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}, {"snippet": "raw_io_base.readall()", "intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "question_id": 5086}, {"snippet": "tarfile.TarFile(tarinfo=TarInfo)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `tarinfo` argument can be used to replace the default TarInfo class with a different one .", "question_id": 9918}, {"snippet": "bytearray.splitlines(keepends=False)", "intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9402}, {"snippet": "maildir.flush()", "intent": "All changes to Maildir mailboxes are immediately applied , so this method does nothing .", "question_id": 5763}, {"snippet": "formatter.format(format_string, *args, **kwargs)", "intent": "The primary API method . With arguments `format_string`, `*args`, `**kwargs`.", "question_id": 9517}, {"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367}, {"snippet": "null_handler.createLock()", "intent": "This method returns None for the lock , since there is no underlying I/O to which access needs to be serialized .", "question_id": 5439}, {"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}, {"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}, {"snippet": "doctest.DocTestRunner(verbose=None)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `verbose` controls the DocTestRunner \u2019 s verbosity .", "question_id": 2863}, {"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}, {"snippet": "io_base.readlines()", "intent": "Read and return a list of lines from the stream .", "question_id": 5072}, {"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}, {"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}, {"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}, {"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}, {"snippet": "Pattern.fullmatch(string)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object .", "question_id": 7978}, {"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}, {"snippet": "sqlite3.ProgrammingError", "intent": "Exception raised for programming errors, e.g.", "question_id": 8860}, {"snippet": "SimpleXMLRPCServer.register_function(function=None)", "intent": "Register a `function` that can respond to XML-RPC requests .", "question_id": 12732}, {"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672}, {"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592}, {"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}, {"snippet": "readline.write_history_file(filename)", "intent": "Save the history list to a readline history file , overwriting any existing file . The default `filename` is ~/.history .", "question_id": 8023}, {"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6043}, {"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}, {"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745}, {"snippet": "time.CLOCK_REALTIME", "intent": "System-wide real-time clock.", "question_id": 10471}, {"snippet": "crypt.methods", "intent": "A list of available password hashing algorithms, as crypt.METHOD_* objects.", "question_id": 1673}, {"snippet": "Wave_read.tell()", "intent": "Return current file pointer position .", "question_id": 12063}, {"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}, {"snippet": "collections.namedtuple(typename, field_names)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format .", "question_id": 1376}, {"snippet": "PurePath.parents", "intent": "An immutable sequence providing access to the logical ancestors of the path:", "question_id": 7247}, {"snippet": "Node.writexml(writer)", "intent": "Write XML to the `writer` object .", "question_id": 12403}, {"snippet": "UserWarning", "intent": "Base class for warnings generated by user code.", "question_id": 3702}, {"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}, {"snippet": "test_result.startTestRun()", "intent": "Called once before any tests are executed .", "question_id": 11522}, {"snippet": "pool.map(func, iterable, chunksize)", "intent": "A parallel equivalent of the map ( ) built-in function ( it supports only one `iterable` argument though ) . The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer . With arguments `func`.", "question_id": 6340}, {"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}, {"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}, {"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}, {"snippet": "cmath.pi", "intent": "The mathematical constant \u03c0, as a float.", "question_id": 1120}, {"snippet": "select.epoll()", "intent": "( Only supported on Linux 2.5.44 and newer . )", "question_id": 8150}, {"snippet": "lzma_decompressor.check", "intent": "The ID of the integrity check used by the input stream.", "question_id": 5700}, {"snippet": "argparse.FileType(mode='r', bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`, `bufsize`.", "question_id": 90}, {"snippet": "msilib.schema", "intent": "This is the standard MSI schema for MSI 2.0, with the tables variable providing a list of table definitions, and _Validation_records providing the data for MSI validation.", "question_id": 6143}, {"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, params=None)", "intent": "Add `headers` and payload to `msg` : If `params` is specified , iterate its items method and use the resulting ( key , value ) pairs to set additional parameters on the Content-Type header . With arguments `<'str'>`.", "question_id": 3045}, {"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}, {"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813}, {"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}, {"snippet": "socket.recv_into(buffer)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8716}, {"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}, {"snippet": "heapq.nsmallest(n, iterable)", "intent": "Return a list with the `n` smallest elements from the dataset defined by `iterable` .", "question_id": 4327}, {"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}, {"snippet": "source_file_loader.load_module()", "intent": "Concrete implementation of importlib.abc.Loader.load_module ( ) where specifying the `name` of the module to load is optional .", "question_id": 4895}, {"snippet": "doctest.DocTestFinder(verbose=False)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder .", "question_id": 2841}, {"snippet": "locale.getlocale(category=LC_CTYPE)", "intent": "Returns the current setting for the given locale `category` as sequence containing language code , encoding .", "question_id": 5376}, {"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}, {"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}, {"snippet": "http.cookiejar.LoadError", "intent": "Instances of FileCookieJar raise this exception on failure to load cookies from a file.", "question_id": 4468}, {"snippet": "str.isdigit()", "intent": "Return true if all characters in the string are digits and there is at least one character , false otherwise .", "question_id": 9206}, {"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}, {"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}, {"snippet": "widget.identify_element(x, y)", "intent": "Returns the element at position `x` , `y` .", "question_id": 10638}, {"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}, {"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}, {"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}, {"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}, {"snippet": "xml.parsers.expat.ErrorString(errno)", "intent": "Returns an explanatory string for a given error number `errno` .", "question_id": 7727}, {"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}, {"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}, {"snippet": "test_loader.loadTestsFromName(name, module=None)", "intent": "Return a suite of all test cases given a string specifier . The specifier `name` is a \u201c dotted name \u201d that may resolve either to a `module` , a test case class , a test method within a test case class , a TestSuite instance , or a callable object which returns a TestCase or TestSuite instance .", "question_id": 11495}, {"snippet": "os.link(src, dst, follow_symlinks=True)", "intent": "Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.", "question_id": 6853}, {"snippet": "tempfile.TemporaryDirectory(suffix=None, prefix=None, dir=None)", "intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `suffix`, `prefix`, `dir`.", "question_id": 10070}, {"snippet": "str.splitlines()", "intent": "Return a list of the lines in the string , breaking at line boundaries .", "question_id": 9246}, {"snippet": "doctest.DocTestRunner(checker=None, optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `checker` specifies the OutputChecker object ( or drop-in replacement ) that should be used to compare the expected outputs to the actual outputs of doctest examples . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2866}, {"snippet": "json_encoder.pos", "intent": "The start index of doc where parsing failed.", "question_id": 5338}, {"snippet": "connection.text_factory", "intent": "Using this attribute you can control what objects are returned for the TEXT data type.", "question_id": 8826}, {"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}, {"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}, {"snippet": "shelve.BsdDbShelf(dict, protocol=None)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8253}, {"snippet": "readline.get_current_history_length()", "intent": "Return the number of items currently in the history .", "question_id": 8030}, {"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}, {"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}, {"snippet": "errno.EADDRNOTAVAIL", "intent": "Cannot assign requested address", "question_id": 3604}, {"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed')", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . With arguments `**_params`.", "question_id": 3317}, {"snippet": "os.truncate(path, length)", "intent": "Truncate the file corresponding to `path` , so that it is at most `length` bytes in size .", "question_id": 6956}, {"snippet": "calendar.HTMLCalendar()", "intent": "This class can be used to generate HTML calendars .", "question_id": 956}, {"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}, {"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}, {"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}, {"snippet": "deque.extend(iterable)", "intent": "Extend the right side of the deque by appending elements from the `iterable` argument .", "question_id": 1358}, {"snippet": "OSError(errno, strerror, filename)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.", "question_id": 3652}, {"snippet": "bytes_feed_parser.close()", "intent": "Complete the parsing of all previously fed data and return the root message object .", "question_id": 3367}, {"snippet": "turtle.screensize(canvheight=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvheight`, `bg`.", "question_id": 11053}, {"snippet": "_c_data._b_base_", "intent": "Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "question_id": 1850}, {"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}, {"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}, {"snippet": "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6119}, {"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}, {"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}, {"snippet": "importlib.util.resolve_name(name, package)", "intent": "Resolve a relative module `name` to an absolute one . This allows for usage such as importlib.util.resolve_name ( 'sys ' , __package__ ) without doing a check to see if the `package` argument is needed .", "question_id": 4927}, {"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363}, {"snippet": "xml.sax.saxutils.unescape(data, entities={})", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` . You can unescape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12655}, {"snippet": "os.spawnl(mode, path)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process .", "question_id": 7053}, {"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}, {"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}, {"snippet": "queue.cancel_join_thread()", "intent": "Prevent join_thread ( ) from blocking .", "question_id": 6210}, {"snippet": "devpoll.register(fd, eventmask)", "intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer . `eventmask` is an optional bitmask describing the type of events you want to check for .", "question_id": 8172}, {"snippet": "config_parser.getfloat(section, option, fallback)", "intent": "A convenience method which coerces the `option` in the specified `section` to a floating point number . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "question_id": 1536}, {"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}, {"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}, {"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}, {"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}, {"snippet": "dis.distb()", "intent": "Disassemble the top-of-stack function of a traceback , using the last traceback if none was passed .", "question_id": 2715}, {"snippet": "example.options", "intent": "A dictionary mapping from option flags to True or False, which is used to override default options for this example.", "question_id": 2839}, {"snippet": "threading.Timer(interval, function, args=None, kwargs=None)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10415}, {"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}, {"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}, {"snippet": "ArgumentParser.format_usage()", "intent": "Return a string containing a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 107}, {"snippet": "writer.new_margin(margin, level)", "intent": "Set the `margin` `level` to the integer level and the logical tag to margin .", "question_id": 3844}, {"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}, {"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}, {"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}, {"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}, {"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}, {"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}, {"snippet": "trace.Trace(countfuncs=0)", "intent": "Create an object to `trace` execution of a single statement or expression . `countfuncs` enables listing of the functions called during the run .", "question_id": 10709}, {"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}, {"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}, {"snippet": "decimal.to_integral_exact(context=None)", "intent": "Round to the nearest integer , signaling Inexact or Rounded as appropriate if `rounding` occurs . The rounding mode is determined by the rounding parameter if given , else by the given `context` .", "question_id": 2486}, {"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}, {"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}, {"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 51}, {"snippet": "message.set_charset(charset)", "intent": "Set the character set of the payload to `charset` , which can either be a Charset instance ( see email.charset ) , a string naming a character set , or None .", "question_id": 2962}, {"snippet": "PurePath.suffixes", "intent": "A list of the path\u2019s file extensions:", "question_id": 7251}, {"snippet": "errno.ETOOMANYREFS", "intent": "Too many references: cannot splice", "question_id": 3614}, {"snippet": "i_pv4_network.subnets()", "intent": "The subnets that join to make the current network definition , depending on the argument values .", "question_id": 5208}, {"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}, {"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}, {"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}, {"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}, {"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}, {"snippet": "prototype(vtbl_index, name, paramflags, iid)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method . `iid` is an optional pointer to the interface identifier which is used in extended error reporting . With arguments `paramflags`.", "question_id": 1805}, {"snippet": "sys.exc_info()", "intent": "This function returns a tuple of three values that give information about the exception that is currently being handled .", "question_id": 9785}, {"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}, {"snippet": "ZipFile.write(filename)", "intent": "Write the file named `filename` to the archive , giving it the archive name `arcname` ( by default , this will be the same as filename , but without a drive letter and with leading path separators removed ) .", "question_id": 12831}, {"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}, {"snippet": "tkinter.tix.LabelFrame", "intent": "The LabelFrame widget packages a frame widget and a label into one mega widget.", "question_id": 10557}, {"snippet": "resource.RUSAGE_SELF", "intent": "Pass to getrusage() to request resources consumed by the calling process, which is the sum of resources used by all threads in the process.", "question_id": 8097}, {"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11138}, {"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}, {"snippet": "@dataclasses.dataclass(frozen=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `frozen`.", "question_id": 2163}, {"snippet": "TimeoutError", "intent": "Raised when a system function timed out at the system level.", "question_id": 3700}, {"snippet": "urllib.request.HTTPSHandler(debuglevel=0)", "intent": "A class to handle opening of HTTPS URLs . With arguments `debuglevel`.", "question_id": 11803}, {"snippet": "HTTPConnection.request(method, url, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4430}, {"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}, {"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}, {"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}, {"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}, {"snippet": "email.message_from_file(fp)", "intent": "Return a message object structure tree from an open file object . This is equivalent to Parser ( ) .parse ( `fp` ) .", "question_id": 3408}, {"snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . With arguments `qs`.", "question_id": 11670}, {"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}, {"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}, {"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}, {"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}, {"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}, {"snippet": "PurePath.is_absolute()", "intent": "Return whether the path is absolute or not .", "question_id": 7255}, {"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}, {"snippet": "bisect.bisect_left(a, x, lo=0, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 855}, {"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}, {"snippet": "email.policy.Policy(**kw)", "intent": "This is the abstract base class for all policy classes . With arguments `**kw`.", "question_id": 3412}, {"snippet": "winreg.KEY_ENUMERATE_SUB_KEYS", "intent": "Required to enumerate the subkeys of a registry key.", "question_id": 12169}, {"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}, {"snippet": "ssl.RAND_add(bytes, entropy)", "intent": "Mix the given `bytes` into the SSL pseudo-random number generator . The parameter `entropy` ( a float ) is a lower bound on the entropy contained in string ( so you can always use 0.0 ) .", "question_id": 8889}, {"snippet": "binary.encode(out)", "intent": "Write the XML-RPC base 64 encoding of this binary item to the `out` stream object .", "question_id": 12688}, {"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237}, {"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}, {"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323}, {"snippet": "pool.starmap(func, iterable, chunksize)", "intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] . With arguments `chunksize`.", "question_id": 6350}, {"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}, {"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}, {"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}, {"snippet": "xmlrpc.server.CGIXMLRPCRequestHandler()", "intent": "Create a new instance to handle XML-RPC requests in a CGI environment .", "question_id": 12722}, {"snippet": "sys.ps1", "intent": "Strings specifying the primary and secondary prompt of the interpreter.", "question_id": 9832}, {"snippet": "profile.Profile(builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "question_id": 7673}, {"snippet": "set | other | ...", "intent": "Return a new set with elements from the set and all others.", "question_id": 9446}, {"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}, {"snippet": "symbol.get_namespaces()", "intent": "Return a list of namespaces bound to this name .", "question_id": 9764}, {"snippet": "deque.pop()", "intent": "Remove and return an element from the right side of the deque .", "question_id": 1364}, {"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}, {"snippet": "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6269}, {"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}, {"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}, {"snippet": "traceback_exception.from_exception(exc)", "intent": "Capture an exception for later rendering . With arguments `exc`.", "question_id": 10812}, {"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `requestHandler` parameter should be a factory for request handler instances ; it defaults to SimpleXMLRPCRequestHandler .", "question_id": 12713}, {"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}, {"snippet": "str.rstrip(chars)", "intent": "Return a copy of the string with trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9239}, {"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}, {"snippet": "math.copysign(x, y)", "intent": "Return a float with the magnitude ( absolute value ) of `x` but the sign of `y` .", "question_id": 5886}, {"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}, {"snippet": "os.removexattr(path, attribute)", "intent": "Removes the extended filesystem `attribute` attribute from `path` .", "question_id": 6999}, {"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}, {"snippet": "PurePath.root", "intent": "A string representing the (local or global) root, if any:", "question_id": 7245}, {"snippet": "errno.ERANGE", "intent": "Math result not representable", "question_id": 3539}, {"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}, {"snippet": "socket.getblocking()", "intent": "Return True if socket is in blocking mode , False if in non-blocking .", "question_id": 8686}, {"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2788}, {"snippet": "base_selector.get_key(fileobj)", "intent": "Return the key associated with a registered file object . With arguments `fileobj`.", "question_id": 8223}, {"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, loop=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`, `loop`.", "question_id": 531}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042}, {"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684}, {"snippet": "nntplib.NNTP_SSL(host, port=563, password=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `password`.", "question_id": 6437}, {"snippet": "devpoll.register(fd)", "intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer .", "question_id": 8173}, {"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}, {"snippet": "window.inch(y)", "intent": "Return the character at the given position in the window . With arguments `y`.", "question_id": 2070}, {"snippet": "xml.parsers.expat.model.XML_CTYPE_EMPTY", "intent": "Elements which are declared to be EMPTY have this model type.", "question_id": 7781}, {"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}, {"snippet": "sys.version_info", "intent": "A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.", "question_id": 9854}, {"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}, {"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}, {"snippet": "HTTPPasswordMgr.find_user_password(realm, authuri)", "intent": "Get user/password for given `realm` and URI , if any . With arguments `authuri`.", "question_id": 11858}, {"snippet": "concurrent.futures.wait(fs, timeout=None)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete . `timeout` can be used to control the maximum number of seconds to wait before returning .", "question_id": 1481}, {"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}, {"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}, {"snippet": "HTTPConnection.getresponse()", "intent": "Should be called after a request is sent to get the response from the server .", "question_id": 4435}, {"snippet": "operator.contains(a, b)", "intent": "Return the outcome of the test `b` in `a` .", "question_id": 6570}, {"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}, {"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}, {"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}, {"snippet": "Wave_write.setframerate(n)", "intent": "Set the frame rate to `n` .", "question_id": 12067}, {"snippet": "os.register_at_fork(before=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_child`.", "question_id": 7050}, {"snippet": "mmap.flush(offset, size)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6005}, {"snippet": "timezone.utcoffset(dt)", "intent": "Return the fixed value specified when the timezone instance is constructed . The `dt` argument is ignored .", "question_id": 2359}, {"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}, {"snippet": "calendar.weekheader(n)", "intent": "Return a header containing abbreviated weekday names . `n` specifies the width in characters for one weekday .", "question_id": 990}, {"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717}, {"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}, {"snippet": "logging.FileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "question_id": 5431}, {"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}, {"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}, {"snippet": "email.generator.Generator(outfp, mangle_from_=None, maxheaderlen=None)", "intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` . If optional `mangle_from_` is True , put a > character in front of any line in the body that starts with the exact string `` From `` , that is From followed by a space at the beginning of a line . If `maxheaderlen` is not None , refold any header lines that are longer than maxheaderlen , or if 0 , do not rewrap any headers .", "question_id": 3096}, {"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}, {"snippet": "pkgutil.get_loader(module_or_name)", "intent": "Get a loader object for `module_or_name` .", "question_id": 7442}, {"snippet": "os.R_OK", "intent": "Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively.", "question_id": 6829}, {"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}, {"snippet": "cmath.log10(x)", "intent": "Return the base-10 logarithm of `x` .", "question_id": 1099}, {"snippet": "curses.savetty()", "intent": "Save the current state of the terminal modes in a buffer , usable by resetty ( ) .", "question_id": 1977}, {"snippet": "parser.st2list(st, line_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token .", "question_id": 7215}, {"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}, {"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}, {"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016}, {"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047}, {"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}, {"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}, {"snippet": "collections.UserDict()", "intent": "Class that simulates a dictionary .", "question_id": 1396}, {"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}, {"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}, {"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}, {"snippet": "pickle.load(file, fix_imports=True, errors=\"strict\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7376}, {"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}, {"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}, {"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}, {"snippet": "codec_info.decode", "intent": "The stateless encoding and decoding functions.", "question_id": 1213}, {"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}, {"snippet": "turtle.numinput(title, prompt, default=None, maxval=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11089}, {"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}, {"snippet": "time.get_clock_info(name)", "intent": "Get information on the specified clock as a namespace object . With arguments `name`.", "question_id": 10440}, {"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}, {"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}, {"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}, {"snippet": "SSLContext.wrap_socket(sock, server_side=False, suppress_ragged_eofs=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . The parameter `suppress_ragged_eofs` specifies how the SSLSocket.recv ( ) method should signal unexpected EOF from the other end of the connection .", "question_id": 9029}, {"snippet": "email.message.Message()", "intent": "If `policy` is specified ( it must be an instance of a policy class ) use the rules it specifies to update and serialize the representation of the message .", "question_id": 2936}, {"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}, {"snippet": "json.JSONEncoder()", "intent": "Extensible JSON encoder for Python data structures .", "question_id": 5322}, {"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}, {"snippet": "codeop.compile_command(source, filename=\"<input>\", symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1307}, {"snippet": "readline.set_startup_hook(function)", "intent": "Set or remove the `function` invoked by the rl_startup_hook callback of the underlying library .", "question_id": 8036}, {"snippet": "os.listxattr(follow_symlinks=True)", "intent": "Return a list of the extended filesystem attributes on `path` . With arguments `follow_symlinks`.", "question_id": 6997}, {"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}, {"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}, {"snippet": "SSLContext.wrap_socket(sock, server_side=False, suppress_ragged_eofs=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . The parameter `suppress_ragged_eofs` specifies how the SSLSocket.recv ( ) method should signal unexpected EOF from the other end of the connection .", "question_id": 9029}, {"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}, {"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}, {"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}, {"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}, {"snippet": "itertools.islice(iterable, start, stop, step)", "intent": "Make an iterator that returns selected elements from the `iterable` . If `start` is non-zero , then elements from the iterable are skipped until start is reached . If `stop` is None , then iteration continues until the iterator is exhausted , if at all ; otherwise , it stops at the specified position . Afterward , elements are returned consecutively unless `step` is set higher than one which results in items being skipped .", "question_id": 5256}, {"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}, {"snippet": "pickletools.dis(pickle, memo=None, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7424}, {"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}, {"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}, {"snippet": "io.FileIO(name, mode='r')", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending .", "question_id": 5100}, {"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}, {"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}, {"snippet": "window.bkgdset(ch)", "intent": "Set the window \u2019 s background . With arguments `ch`.", "question_id": 2018}, {"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}, {"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318}, {"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}, {"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154}, {"snippet": "stat.S_IREAD", "intent": "Unix V7 synonym for S_IRUSR.", "question_id": 9110}, {"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}, {"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}, {"snippet": "OptionParser.print_version()", "intent": "Print the version message for the current program ( self.version ) to `file` ( default stdout ) .", "question_id": 6619}, {"snippet": "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10235}, {"snippet": "lzma.LZMADecompressor(filters=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "question_id": 5693}, {"snippet": "test_case.assertNotAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11426}, {"snippet": "InteractiveInterpreter.showtraceback()", "intent": "Display the exception that just occurred .", "question_id": 1182}, {"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}, {"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}, {"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}, {"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794}, {"snippet": "IMAP4.subscribe(mailbox)", "intent": "Subscribe to new `mailbox` .", "question_id": 4746}, {"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4591}, {"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}, {"snippet": "timedelta.resolution", "intent": "The smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1).", "question_id": 2216}, {"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}, {"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}, {"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI", "intent": "An XML declaration was found somewhere other than the start of the input data.", "question_id": 7795}, {"snippet": "AU_write.writeframesraw(data)", "intent": "Write audio frames , without correcting nframes . With arguments `data`.", "question_id": 9728}, {"snippet": "@abc.abstractproperty", "intent": "A subclass of the built-in property(), indicating an abstract property.", "question_id": 7}, {"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}, {"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}, {"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}, {"snippet": "TarFile.add(name, recursive=True, filter=None)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9955}, {"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126}, {"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}, {"snippet": "compileall.compile_file(fullname)", "intent": "Compile the file with path `fullname` .", "question_id": 1419}, {"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}, {"snippet": "asyncore.loop()", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed .", "question_id": 651}, {"snippet": "quopri.encodestring(s, header=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . With arguments `s`, `header`.", "question_id": 7881}, {"snippet": "asyncio.wait(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 . `timeout` ( a float or int ) , if specified , can be used to control the maximum number of seconds to wait before returning .", "question_id": 614}, {"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}, {"snippet": "io_base.readable()", "intent": "Return True if the stream can be read from .", "question_id": 5069}, {"snippet": "locale.LC_ALL", "intent": "Combination of all locale settings.", "question_id": 5410}, {"snippet": "directory.add_file(file)", "intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component .", "question_id": 6103}, {"snippet": "email.headerregistry.MIMEVersionHeader", "intent": "There is really only one valid value for the MIME-Version header, and that is 1.0.", "question_id": 3163}, {"snippet": "Node.writexml(writer, newl=\"\")", "intent": "Write XML to the `writer` object . The `newl` parameter specifies the string to use to terminate newlines .", "question_id": 12406}, {"snippet": "decimal.next_toward(other)", "intent": "If the two operands are unequal , return the number closest to the first operand in the direction of the second operand . With arguments `other`.", "question_id": 2455}, {"snippet": "threading.BoundedSemaphore()", "intent": "Class implementing bounded semaphore objects .", "question_id": 10404}, {"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}, {"snippet": "unicodedata.combining(chr)", "intent": "Returns the canonical combining class assigned to the character `chr` as integer .", "question_id": 11351}, {"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}, {"snippet": "importlib.__import__(name, fromlist=())", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `fromlist`.", "question_id": 4786}, {"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}, {"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}, {"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}, {"snippet": "oss_mixer_device.close()", "intent": "This method closes the open mixer device file .", "question_id": 7201}, {"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}, {"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}, {"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}, {"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}, {"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}, {"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}, {"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}, {"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}, {"snippet": "window.getstr(n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `n`.", "question_id": 2060}, {"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}, {"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}, {"snippet": "i_pv6_address.ipv4_mapped", "intent": "For addresses that appear to be IPv4 mapped addresses (starting with ::FFFF/96), this property will report the embedded IPv4 address.", "question_id": 5189}, {"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}, {"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}, {"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}, {"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}, {"snippet": "calendar.itermonthdays2(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 914}, {"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}, {"snippet": "prototype(vtbl_index, name)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method .", "question_id": 1807}, {"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}, {"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927}, {"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}, {"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}, {"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}, {"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}, {"snippet": "asyncore.loop()", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed .", "question_id": 651}, {"snippet": "errno.EBADSLT", "intent": "Invalid slot", "question_id": 3562}, {"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}, {"snippet": "POP3.top(which, howmuch)", "intent": "Retrieves the message header plus `howmuch` lines of the message after the header of message number `which` .", "question_id": 7616}, {"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}, {"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}, {"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}, {"snippet": "ServerProxy.system.methodSignature(name)", "intent": "This method takes one parameter , the `name` of a method implemented by the XML-RPC server .", "question_id": 12680}, {"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}, {"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}, {"snippet": "xml.sax.saxutils.XMLGenerator(out=None)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout .", "question_id": 12659}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "question_id": 65}, {"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}, {"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}, {"snippet": "gettext.translation(domain, languages=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4231}, {"snippet": "tkinter.tix.TList", "intent": "The TList widget can be used to display data in a tabular format.", "question_id": 10573}, {"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}, {"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}, {"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}, {"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996}, {"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}, {"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}, {"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}, {"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}, {"snippet": "fraction.denominator", "intent": "Denominator of the Fraction in lowest term.", "question_id": 3868}, {"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}, {"snippet": "multiprocessing.connection.answer_challenge(connection, authkey)", "intent": "Receive a message , calculate the digest of the message using `authkey` as the key , and then send the digest back . With arguments `connection`.", "question_id": 6367}, {"snippet": "xml.etree.ElementTree.ProcessingInstruction(target)", "intent": "PI element factory . `target` is a string containing the PI target .", "question_id": 12448}, {"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}, {"snippet": "grp.getgrgid(gid)", "intent": "Return the group database entry for the given numeric group ID . With arguments `gid`.", "question_id": 4269}, {"snippet": "Token.MISSING", "intent": "A marker object used by Token.old_value.", "question_id": 1647}, {"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}, {"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}, {"snippet": "str.center(width, fillchar)", "intent": "Return centered in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9180}, {"snippet": "queue_listener.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on this logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5570}, {"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}, {"snippet": "InputSource.getPublicId()", "intent": "Returns the public identifier of this InputSource .", "question_id": 12635}, {"snippet": "test.support.captured_stdout()", "intent": "A context managers that temporarily replaces the named stream with io.StringIO object .", "question_id": 10174}, {"snippet": "context.min(x, y)", "intent": "Compares two values numerically and returns the minimum . With arguments `x`, `y`.", "question_id": 2551}, {"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}, {"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}, {"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355}, {"snippet": "turtle.towards(x)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10938}, {"snippet": "platform.python_compiler()", "intent": "Returns a string identifying the compiler used for compiling Python .", "question_id": 7474}, {"snippet": "bz2.BZ2File(filename)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 886}, {"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}, {"snippet": "uuid.UUID(bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11939}, {"snippet": "textwrap.wrap(text, **kwargs)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10318}, {"snippet": "element_tree.find(match, namespaces=None)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`, `namespaces`.", "question_id": 12513}, {"snippet": "poll.poll()", "intent": "Polls the set of registered file descriptors , and returns a possibly-empty list containing ( fd , event ) 2-tuples for the descriptors that have events or errors to report .", "question_id": 8196}, {"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}, {"snippet": "heapq.nlargest(n, iterable, key=None)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` . `key` , if provided , specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4326}, {"snippet": "http_handler.emit(record)", "intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "question_id": 5552}, {"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}, {"snippet": "itertools.groupby(iterable, key=None)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` . The `key` is a function computing a key value for each element .", "question_id": 5254}, {"snippet": "binascii.a2b_uu(string)", "intent": "Convert a single line of uuencoded data back to binary and return the binary data . With arguments `string`.", "question_id": 820}, {"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}, {"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "controller.open_new_tab(url)", "intent": "Open `url` in a new page ( \u201c tab \u201d ) of the browser handled by this controller , if possible , otherwise equivalent to open_new ( ) .", "question_id": 12119}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}, {"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}, {"snippet": "property(fset=None, doc=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4094}, {"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}, {"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064}, {"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}, {"snippet": "zipfile.BadZipFile", "intent": "The error raised for bad ZIP files.", "question_id": 12778}, {"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}, {"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}, {"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}, {"snippet": "gzip.open(filename)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4272}, {"snippet": "ctypes.DllGetClassObject()", "intent": "Windows only : This function is a hook which allows implementing in-process COM servers with ctypes .", "question_id": 1818}, {"snippet": "turtle.reset()", "intent": "Delete the turtle \u2019 s drawings from the screen , re-center the turtle and set variables to the default values .", "question_id": 10967}, {"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}, {"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}, {"snippet": "importlib.util.resolve_name(name, package)", "intent": "Resolve a relative module `name` to an absolute one . This allows for usage such as importlib.util.resolve_name ( 'sys ' , __package__ ) without doing a check to see if the `package` argument is needed .", "question_id": 4927}, {"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}, {"snippet": "os.WEXITED", "intent": "Flags that can be used in options in waitid() that specify what child signal to wait for.", "question_id": 7075}, {"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}, {"snippet": "mimetypes.encodings_map", "intent": "Dictionary mapping filename extensions to encoding types.", "question_id": 5953}, {"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}, {"snippet": "timer.print_exc()", "intent": "Helper to print a traceback from the timed code .", "question_id": 10515}, {"snippet": "base64.a85encode(b, wrapcol=0, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 734}, {"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}, {"snippet": "xml.dom.pulldom.parseString(string)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` .", "question_id": 12429}, {"snippet": "aifc.close()", "intent": "Close the AIFF file .", "question_id": 24}, {"snippet": "mock.configure_mock(**kwargs)", "intent": "Set attributes on the mock through keyword arguments . With arguments `**kwargs`.", "question_id": 11585}, {"snippet": "frozenset(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9433}, {"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}, {"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696}, {"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}, {"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}, {"snippet": "str.islower()", "intent": "Return true if all cased characters 4 in the string are lowercase and there is at least one cased character , false otherwise .", "question_id": 9208}, {"snippet": "difflib.unified_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2652}, {"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}, {"snippet": "types.MethodDescriptorType", "intent": "The type of methods of some built-in data types such as str.join().", "question_id": 11194}, {"snippet": "re.sub(pattern, repl, string, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . With arguments `flags`.", "question_id": 7953}, {"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}, {"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}, {"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}, {"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274}, {"snippet": "logging.handlers.RotatingFileHandler(filename, encoding=None)", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `encoding` is not None , it is used to open the file with that encoding .", "question_id": 5462}, {"snippet": "server.is_serving()", "intent": "Return True if the server is accepting new connections .", "question_id": 339}, {"snippet": "venv.EnvBuilder(system_site_packages=False, upgrade=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `upgrade`.", "question_id": 11981}, {"snippet": "readline.get_endidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8045}, {"snippet": "ZipInfo.volume", "intent": "Volume number of file header.", "question_id": 12873}, {"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}, {"snippet": "platform.java_ver('', ''), '', ''), vendor='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7493}, {"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}, {"snippet": "gettext.find(domain, localedir=None)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `localedir` is as in bindtextdomain ( ) .", "question_id": 4222}, {"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}, {"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}, {"snippet": "dispatcher.create_socket(family=socket.AF_INET)", "intent": "This is identical to the creation of a normal socket , and will use the same options for creation . With arguments `family`.", "question_id": 664}, {"snippet": "base64.decodestring(s)", "intent": "Deprecated alias of decodebytes ( ) . With arguments `s`.", "question_id": 749}, {"snippet": "snapshot.statistics(key_type: str)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`.", "question_id": 10876}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "shlex.pop_source()", "intent": "Pop the last-pushed input source from the input stack .", "question_id": 8289}, {"snippet": "maildir_message.get_date()", "intent": "Return the delivery date of the message as a floating-point number representing seconds since the epoch .", "question_id": 5819}, {"snippet": "ssl.OP_SINGLE_DH_USE", "intent": "Prevents re-use of the same DH key for distinct SSL sessions.", "question_id": 8939}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}, {"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}, {"snippet": "sniffer.sniff(sample)", "intent": "Analyze the given `sample` and return a Dialect subclass reflecting the parameters found .", "question_id": 1715}, {"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}, {"snippet": "doctest.DebugRunner(checker=None, verbose=None)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `checker`, `verbose`.", "question_id": 2898}, {"snippet": "difflib.diff_bytes(dfunc, a, b, fromfiledate=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2660}, {"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}, {"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}, {"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}, {"snippet": "bdb.set_trace()", "intent": "Start debugging with a Bdb instance from caller \u2019 s frame .", "question_id": 819}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286}, {"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}, {"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}, {"snippet": "UserWarning", "intent": "Base class for warnings generated by user code.", "question_id": 3702}, {"snippet": "doc_test_runner.run(test, compileflags=None, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2878}, {"snippet": "ur_lopener.open(fullurl, data=None)", "intent": "Open `fullurl` using the appropriate protocol . The `data` argument has the same meaning as the data argument of urlopen ( ) .", "question_id": 11893}, {"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}, {"snippet": "nntplib.NNTPDataError", "intent": "Exception raised when there is some error in the response data.", "question_id": 6445}, {"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}, {"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}, {"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}, {"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}, {"snippet": "socket.ioctl(control, option)", "intent": "The ioctl ( ) method is a limited interface to the WSAIoctl system interface . Currently only the following `control` codes are supported : SIO_RCVALL , SIO_KEEPALIVE_VALS , and SIO_LOOPBACK_FAST_PATH . With arguments `option`.", "question_id": 8688}, {"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}, {"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}, {"snippet": "tempfile.mkstemp(prefix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `prefix` is not None , the file name will begin with that prefix ; otherwise , a default prefix is used . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10080}, {"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}, {"snippet": "i_pv4_address.exploded", "intent": "The string representation in dotted decimal notation.", "question_id": 5177}, {"snippet": "BaseCookie.output()", "intent": "Return a string representation suitable to be sent as HTTP headers .", "question_id": 4584}, {"snippet": "text_calendar.pryear(theyear, w=2, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `c`.", "question_id": 952}, {"snippet": "Attr.value", "intent": "The text value of the attribute.", "question_id": 12373}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\")", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`, `subtype`.", "question_id": 3040}, {"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374}, {"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}, {"snippet": "signal.setitimer(which, seconds, interval=0.0)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8392}, {"snippet": "aifc.getcomptype()", "intent": "Return a bytes array of length 4 describing the type of compression used in the audio file .", "question_id": 15}, {"snippet": "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12454}, {"snippet": "pool.imap(func, iterable)", "intent": "A lazier version of map ( ) . With arguments `func`, `iterable`.", "question_id": 6347}, {"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}, {"snippet": "doctest.debug(module, name)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above .", "question_id": 2888}, {"snippet": "terminal_size.lines", "intent": "Height of the terminal window in characters.", "question_id": 6815}, {"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352}, {"snippet": "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4505}, {"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}, {"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191}, {"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}, {"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}, {"snippet": "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None)", "intent": "Module : email.mime.audio `_audiodata` is a string containing the raw audio data . Otherwise you can explicitly specify the audio subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3335}, {"snippet": "email.utils.localtime(dt=None)", "intent": "Return local time as an aware datetime object . Otherwise `dt` argument should be a datetime instance , and it is converted to the local time zone according to the system time zone database .", "question_id": 3453}, {"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}, {"snippet": "xml.etree.ElementTree.fromstringlist(sequence, parser=None)", "intent": "Parses an XML document from a `sequence` of string fragments . `parser` is an optional parser instance .", "question_id": 12440}, {"snippet": "formatter.add_line_break()", "intent": "Add a hard line break if one does not already exist .", "question_id": 3820}, {"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}, {"snippet": "queue.Empty", "intent": "Exception raised when non-blocking get() (or get_nowait()) is called on a Queue object which is empty.", "question_id": 7844}, {"snippet": "Unpacker.unpack_float()", "intent": "Unpacks a single-precision floating point number .", "question_id": 12290}, {"snippet": "ctypes.c_wchar_p", "intent": "Represents the C wchar_t * datatype, which must be a pointer to a zero-terminated wide character string.", "question_id": 1882}, {"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}, {"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}, {"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}, {"snippet": "os.path.commonpath(paths)", "intent": "Return the longest common sub-path of each pathname in the sequence `paths` .", "question_id": 7144}, {"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}, {"snippet": "pow(x, y)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4074}, {"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016}, {"snippet": "json.loads(s, **kw, encoding=None, cls=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`, `cls`.", "question_id": 5308}, {"snippet": "base_server.socket_type", "intent": "The type of socket used by the server; socket.SOCK_STREAM and socket.SOCK_DGRAM are two common values.", "question_id": 8773}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "Pattern.pattern", "intent": "The pattern string from which the pattern object was compiled.", "question_id": 7994}, {"snippet": "test_case.assertLogs()", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11411}, {"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}, {"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}, {"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}, {"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}, {"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}, {"snippet": "str(object='')", "intent": "Return a str version of `object` .", "question_id": 4114}, {"snippet": "str(object=b'', encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4122}, {"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}, {"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}, {"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}, {"snippet": "plistlib.load(fp, dict_type=dict)", "intent": "Read a plist file . `fp` should be a readable and binary file object . The `dict_type` is the type used for dictionaries that are read from the plist file .", "question_id": 7550}, {"snippet": "HTTPConnection.set_tunnel(host, headers=None)", "intent": "Set the `host` and the `port` for HTTP Connect Tunnelling . The `headers` argument should be a mapping of extra HTTP headers to send with the CONNECT request .", "question_id": 4439}, {"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}, {"snippet": "bz2.BZ2File(filename, buffering=None, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . The `buffering` argument is ignored . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 892}, {"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`.", "question_id": 63}, {"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037}, {"snippet": "winsound.SND_NOSTOP", "intent": "Do not interrupt sounds currently playing.", "question_id": 12203}, {"snippet": "str.rstrip()", "intent": "Return a copy of the string with trailing characters removed .", "question_id": 9240}, {"snippet": "importlib.__import__(name, globals=None, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `level`.", "question_id": 4790}, {"snippet": "subprocess.Popen(args, close_fds=True)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `close_fds` is true , all file descriptors except 0 , 1 and 2 will be closed before the child process is executed .", "question_id": 9606}, {"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}, {"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}, {"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}, {"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}, {"snippet": "ArgumentParser.add_argument_group()", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages .", "question_id": 95}, {"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}, {"snippet": "dis.hasname", "intent": "Sequence of bytecodes that access an attribute by name.", "question_id": 2747}, {"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}, {"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}, {"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133}, {"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}, {"snippet": "test_case.tearDown()", "intent": "Method called immediately after the test method has been called and the result recorded .", "question_id": 11366}, {"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}, {"snippet": "errno.EPERM", "intent": "Operation not permitted", "question_id": 3506}, {"snippet": "pickle.Unpickler(file, errors=\"strict\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7401}, {"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}, {"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322}, {"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492}, {"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}, {"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}, {"snippet": "subprocess.check_call(args)", "intent": "Run command with arguments . With arguments `args`.", "question_id": 9669}, {"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}, {"snippet": "widget.insert(parent, index, **kw, iid=None)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "question_id": 10641}, {"snippet": "os.link(src, dst, follow_symlinks=True)", "intent": "Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.", "question_id": 6853}, {"snippet": "imaplib.IMAP4_SSL(keyfile=None)", "intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . `keyfile` and `certfile` are a legacy alternative to ssl_context - they can point to PEM-formatted private key and certificate chain files for the SSL connection .", "question_id": 4679}, {"snippet": "decimal.ln(context=None)", "intent": "Return the natural ( base e ) logarithm of the operand . With arguments `context`.", "question_id": 2430}, {"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}, {"snippet": "Repr.repr_TYPE(obj, level)", "intent": "Formatting methods for specific types are implemented as methods with a name based on the type name . In the method name , TYPE is replaced by ' _'.join ( type ( `obj` ) .__name__.split ( ) ) . Type-specific methods which need to recursively format a value should call self.repr1 ( subobj , `level` - 1 ) .", "question_id": 8068}, {"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}, {"snippet": "exit_stack.close()", "intent": "Immediately unwinds the callback stack , invoking callbacks in the reverse order of registration .", "question_id": 1631}, {"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}, {"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}, {"snippet": "file_handler.close()", "intent": "Closes the file .", "question_id": 5434}, {"snippet": "mbox.get_file(key)", "intent": "Using the file after calling flush ( ) or close ( ) on the mbox instance may yield unpredictable results or raise an exception . With arguments `key`.", "question_id": 5772}, {"snippet": "re.compile(pattern, flags=0)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below . The expression \u2019 s behaviour can be modified by specifying a `flags` value .", "question_id": 7923}, {"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}, {"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}, {"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}, {"snippet": "pickle.load(file, fix_imports=True)", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7372}, {"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}, {"snippet": "date.weekday()", "intent": "Return the day of the week as an integer , where Monday is 0 and Sunday is 6 .", "question_id": 2239}, {"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}, {"snippet": "winsound.MB_ICONHAND", "intent": "Play the SystemHand sound.", "question_id": 12207}, {"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}, {"snippet": "bz2.open(filename, mode='r', newline=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 885}, {"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}, {"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}, {"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}, {"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}, {"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}, {"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}, {"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}, {"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}, {"snippet": "@unittest.expectedFailure", "intent": "Mark the test as an expected failure.", "question_id": 11361}, {"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}, {"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}, {"snippet": "server.start_serving()", "intent": "Start accepting connections .", "question_id": 337}, {"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}, {"snippet": "itertools.starmap(function, iterable)", "intent": "Make an iterator that computes the `function` using arguments obtained from the `iterable` .", "question_id": 5264}, {"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}, {"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}, {"snippet": "urllib.parse.quote(string, encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11707}, {"snippet": "os.GRND_NONBLOCK", "intent": "By  default, when reading from /dev/random, getrandom() blocks if no random bytes are available, and when reading from /dev/urandom, it blocks if the entropy pool has not yet been initialized.", "question_id": 7140}, {"snippet": "decimal.logical_or(other, context=None)", "intent": "logical_or ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`, `context`.", "question_id": 2440}, {"snippet": "textwrap.wrap(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most `width` characters long . With arguments `**kwargs`.", "question_id": 10319}, {"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}, {"snippet": "winreg.FlushKey(key)", "intent": "Writes all the attributes of a `key` to the registry .", "question_id": 12136}, {"snippet": "mailcap.findmatch(caps, MIMEtype)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`, `MIMEtype`.", "question_id": 5861}, {"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}, {"snippet": "xml.parsers.expat.model.XML_CQUANT_OPT", "intent": "The model is optional: it can appear once or not at all, as for A?.", "question_id": 7784}, {"snippet": "DTDHandler.notationDecl(name, publicId, systemId)", "intent": "Handle a notation declaration event . With arguments `name`, `publicId`, `systemId`.", "question_id": 12583}, {"snippet": "FTP.connect(host='', source_address=None)", "intent": "Connect to the given `host` and `port` . `source_address` is a 2-tuple ( host , port ) for the socket to bind to as its source address before connecting .", "question_id": 3911}, {"snippet": "tempfile.TemporaryDirectory(prefix=None, dir=None)", "intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `prefix`, `dir`.", "question_id": 10069}, {"snippet": "DAY_1 ... DAY_7", "intent": "Get the name of the n-th day of the week.", "question_id": 5359}, {"snippet": "auto.filename", "intent": "For exceptions that involve a file system path (such as open() or os.unlink()), filename is the file name passed to the function.", "question_id": 3657}, {"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}, {"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}, {"snippet": "doctest.DocTestFinder(exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2844}, {"snippet": "UUID.urn", "intent": "The UUID as a URN as specified in RFC 4122.", "question_id": 11952}, {"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}, {"snippet": "sysconfig.get_path(name, scheme, vars)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) .", "question_id": 9863}, {"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}, {"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}, {"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}, {"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}, {"snippet": "subprocess.Popen(args, stderr=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9604}, {"snippet": "bytearray.rsplit(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9357}, {"snippet": "tempfile.mktemp(prefix='tmp', dir=None)", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10100}, {"snippet": "turtle.begin_poly()", "intent": "Start recording the vertices of a polygon .", "question_id": 11031}, {"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}, {"snippet": "pkgutil.extend_path(path, name)", "intent": "Extend the search `path` for the modules which comprise a package . It also looks for *.pkg files beginning where * matches the `name` argument .", "question_id": 7436}, {"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}, {"snippet": "collections.deque(iterable)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` .", "question_id": 1351}, {"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006}, {"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}, {"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}, {"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}, {"snippet": "Request.type", "intent": "The URI scheme.", "question_id": 11817}, {"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}, {"snippet": "POP3.getwelcome()", "intent": "Returns the greeting string sent by the POP3 server .", "question_id": 7602}, {"snippet": "turtle.tracer()", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11058}, {"snippet": "copyreg.constructor(object)", "intent": "Declares `object` to be a valid constructor .", "question_id": 1665}, {"snippet": "turtle.shapesize(outline=None)", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10989}, {"snippet": "coverage_results.update(other)", "intent": "Merge in data from another CoverageResults object . With arguments `other`.", "question_id": 10724}, {"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}, {"snippet": "email_policy.header_store_parse(name, value)", "intent": "The `name` is returned unchanged . If the input `value` has a name attribute and it matches name ignoring case , the value is returned unchanged .", "question_id": 3435}, {"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}, {"snippet": "window.instr(y, x, n)", "intent": "Return a bytes object of characters , extracted from the window starting at the current cursor position , or at `y` , `x` if specified . If `n` is specified , instr ( ) returns a string at most n characters long ( exclusive of the trailing NUL ) .", "question_id": 2087}, {"snippet": "base64.a85encode(b, foldspaces=False, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 732}, {"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}, {"snippet": "operator.__abs__(obj)", "intent": "Return the absolute value of `obj` .", "question_id": 6531}, {"snippet": "CookieJar.clear(domain, path, name)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed . If given three arguments , then the cookie with the specified domain , path and `name` is removed .", "question_id": 4493}, {"snippet": "async_chat.push_with_producer(producer)", "intent": "Takes a `producer` object and adds it to the producer queue associated with the channel .", "question_id": 176}, {"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}, {"snippet": "os.seteuid(euid)", "intent": "Set the current process \u2019 s effective user id . With arguments `euid`.", "question_id": 6694}, {"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}, {"snippet": "audioop.bias(fragment, width, bias)", "intent": "Return a `fragment` that is the original fragment with a `bias` added to each sample . With arguments `width`.", "question_id": 685}, {"snippet": "datetime.fromordinal(ordinal)", "intent": "Return the datetime corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2264}, {"snippet": "curses.color_pair(color_number)", "intent": "Return the attribute value for displaying text in the specified color . With arguments `color_number`.", "question_id": 1925}, {"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}, {"snippet": "urllib.parse.ParseResultBytes(scheme, netloc, path, params, query, fragment)", "intent": "Concrete class for urlparse ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `params`, `query`, `fragment`.", "question_id": 11703}, {"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361}, {"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}, {"snippet": "lzma.LZMAFile(filters=None)", "intent": "Open an LZMA-compressed file in binary `mode` . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5672}, {"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}, {"snippet": "ProcessingInstruction.data", "intent": "The content of the processing instruction following the first whitespace character.", "question_id": 12379}, {"snippet": "importlib.util.LazyLoader(loader)", "intent": "A class which postpones the execution of the `loader` of a module until the module has an attribute accessed .", "question_id": 4943}, {"snippet": "TarFile.gettarinfo()", "intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file .", "question_id": 9959}, {"snippet": "codecs.StreamReader(stream)", "intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "question_id": 1284}, {"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}, {"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}, {"snippet": "time.ctime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10438}, {"snippet": "credits", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1613}, {"snippet": "doctest.DocTestSuite()", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite .", "question_id": 2806}, {"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}, {"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}, {"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}, {"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126}, {"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}, {"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}, {"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}, {"snippet": "nntplib.NNTP(host, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6416}, {"snippet": "bytes.rsplit(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9353}, {"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}, {"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}, {"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}, {"snippet": "faulthandler.dump_traceback_later(timeout, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3725}, {"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}, {"snippet": "window.attrset(attr)", "intent": "Set the \u201c background \u201d set of attributes to `attr` .", "question_id": 2014}, {"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}, {"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "question_id": 1575}, {"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}, {"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}, {"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}, {"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}, {"snippet": "sys.api_version", "intent": "The C API version for this interpreter.", "question_id": 9853}, {"snippet": "http.HTTPStatus", "intent": "A subclass of enum.IntEnum that defines a set of HTTP status codes, reason phrases and long descriptions written in English.", "question_id": 4613}, {"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}, {"snippet": "importlib.util.spec_from_loader(name, loader, origin=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`.", "question_id": 4935}, {"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}, {"snippet": "Path.is_char_device()", "intent": "Return True if the path points to a character device ( or a symbolic link pointing to a character device ) , False if it points to another kind of file .", "question_id": 7280}, {"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}, {"snippet": "loop.sendfile(transport, file, offset=0, fallback=True)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file . `fallback` set to True makes asyncio to manually read and send the file when the platform does not support the sendfile system call ( e.g .", "question_id": 261}, {"snippet": "locale.ERA_T_FMT", "intent": "Get a format string for time.strftime() to represent a time in a locale-specific era-based way.", "question_id": 5371}, {"snippet": "credits", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1613}, {"snippet": "completed_process.cmd", "intent": "Command that was used to spawn the child process.", "question_id": 9588}, {"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}, {"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}, {"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, bases=(), namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2192}, {"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}, {"snippet": "inspect.CO_NOFREE", "intent": "The flag is set if there are no free or cell variables.", "question_id": 5046}, {"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}, {"snippet": "warnings.filterwarnings(action, message='', category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `category`.", "question_id": 12029}, {"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}, {"snippet": "FileCookieJar.revert()", "intent": "Clear all cookies and reload cookies from a saved file .", "question_id": 4514}, {"snippet": "ssl.SSLSyscallError", "intent": "A subclass of SSLError raised when a system error was encountered while trying to fulfill an operation on a SSL socket.", "question_id": 8879}, {"snippet": "stringprep.in_table_c3(code)", "intent": "Determine whether `code` is in tableC.3 ( Private use ) .", "question_id": 9541}, {"snippet": "NNTP.xhdr(hdr, str)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search .", "question_id": 6497}, {"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}, {"snippet": "charset.__ne__(other)", "intent": "This method allows you to compare two Charset instances for inequality . With arguments `other`.", "question_id": 2925}, {"snippet": "pprint.pformat(object, indent=1, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7639}, {"snippet": "subprocess.check_output(args, timeout=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `timeout`.", "question_id": 9687}, {"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}, {"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}, {"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}, {"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}, {"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}, {"snippet": "resource.getrusage(who)", "intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "question_id": 8095}, {"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}, {"snippet": "SSLContext.wrap_socket(sock, suppress_ragged_eofs=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `suppress_ragged_eofs` specifies how the SSLSocket.recv ( ) method should signal unexpected EOF from the other end of the connection .", "question_id": 9025}, {"snippet": "os.open(path, flags)", "intent": "Open the file `path` and set various `flags` according to flags and possibly its `mode` according to mode .", "question_id": 6738}, {"snippet": "urllib.request.Request(url, unverifiable=False)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `unverifiable` should indicate whether the request is unverifiable , as defined by RFC 2965 .", "question_id": 11772}, {"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}, {"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}, {"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec=None)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . The `spec` and `spec_set` keyword arguments are passed to the MagicMock if patch is creating one for you . With arguments `**kwargs`.", "question_id": 11615}, {"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255}, {"snippet": "token.COMMENT", "intent": "Token value used to indicate a comment.", "question_id": 10698}, {"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}, {"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}, {"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}, {"snippet": "email.errors.HeaderParseError", "intent": "Raised under some error conditions when parsing the RFC 5322 headers of a message, this class is derived from MessageParseError.", "question_id": 3075}, {"snippet": "buffered_reader.read1(size)", "intent": "Read and return up to `size` bytes with only one call on the raw stream .", "question_id": 5122}, {"snippet": "str.islower()", "intent": "Return true if all cased characters 4 in the string are lowercase and there is at least one cased character , false otherwise .", "question_id": 9208}, {"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}, {"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}, {"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}, {"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}, {"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}, {"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}, {"snippet": "traceback.FrameSummary(filename, lineno, name)", "intent": "Represent a single frame in the traceback or stack that is being formatted or printed . With arguments `filename`, `lineno`, `name`.", "question_id": 10833}, {"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}, {"snippet": "faulthandler.enable(file=sys.stderr)", "intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback . The `file` must be kept open until the fault handler is disabled : see issue with file descriptors .", "question_id": 3717}, {"snippet": "controller.open(url)", "intent": "Display `url` using the browser handled by this controller .", "question_id": 12114}, {"snippet": "True", "intent": "The true value of the bool type.", "question_id": 1603}, {"snippet": "codecs.strict_errors(exception)", "intent": "Implements the 'strict ' error handling : each encoding or decoding error raises a UnicodeError . With arguments `exception`.", "question_id": 1255}, {"snippet": "base_http_request_handler.log_message(format)", "intent": "Logs an arbitrary message to sys.stderr . The `format` argument is a standard printf-style format string , where the additional arguments to log_message ( ) are applied as inputs to the formatting .", "question_id": 4653}, {"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}, {"snippet": "faulthandler.enable(file=sys.stderr, all_threads=True)", "intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback . The `file` must be kept open until the fault handler is disabled : see issue with file descriptors . If `all_threads` is True , produce tracebacks for every running thread .", "question_id": 3719}, {"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}, {"snippet": "sys._xoptions", "intent": "A dictionary of the various implementation-specific flags passed through the -X command-line option.", "question_id": 9857}, {"snippet": "collections.Counter(iterable-or-mapping)", "intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "question_id": 1340}, {"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}, {"snippet": "asyncio.wrap_future(future)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`.", "question_id": 357}, {"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753}, {"snippet": "TarFile.addfile(tarinfo)", "intent": "Add the TarInfo object `tarinfo` to the archive .", "question_id": 9957}, {"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}, {"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}, {"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}, {"snippet": "email.parser.BytesHeaderParser(policy=policy.compat32)", "intent": "Exactly like BytesParser , except that headersonly defaults to True . With arguments `policy`.", "question_id": 3382}, {"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}, {"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}, {"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}, {"snippet": "ConfigParser.optionxform(option)", "intent": "This method transforms `option` names on every read , get , or set operation .", "question_id": 1494}, {"snippet": "frame.lineno", "intent": "Line number (int).", "question_id": 10869}, {"snippet": "date.strftime(format)", "intent": "Return a string representing the date , controlled by an explicit `format` string .", "question_id": 2245}, {"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}, {"snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)", "intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "question_id": 12151}, {"snippet": "struct.pack_into(buffer, offset, v1, v2)", "intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "question_id": 9560}, {"snippet": "POP3.apop(user, secret)", "intent": "Use the more secure APOP authentication to log into the POP3 server . With arguments `user`, `secret`.", "question_id": 7606}, {"snippet": "resource.RLIMIT_STACK", "intent": "The maximum size (in bytes) of the call stack for the current process.", "question_id": 8079}, {"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}, {"snippet": "os.kill(pid, sig)", "intent": "Send signal `sig` to the process `pid` .", "question_id": 7037}, {"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}, {"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}, {"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}, {"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}, {"snippet": "multiprocessing.pool.Pool(processes, initializer)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts .", "question_id": 6329}, {"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}, {"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}, {"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}, {"snippet": "ur_lopener.open_unknown(fullurl, data=None)", "intent": "Overridable interface to open unknown URL types . With arguments `fullurl`, `data`.", "question_id": 11895}, {"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}, {"snippet": "html_calendar.cssclass_year", "intent": "The CSS class for the whole year\u2019s table of tables (used by formatyear()).", "question_id": 975}, {"snippet": "turtle.write(arg, 8, \"normal\"), move=False, font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10974}, {"snippet": "SSLSocket.compression()", "intent": "Return the compression algorithm being used as a string , or None if the connection isn \u2019 t compressed .", "question_id": 8981}, {"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425}, {"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}, {"snippet": "SystemExit", "intent": "This exception is raised by the sys.exit() function.", "question_id": 3669}, {"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}, {"snippet": "NNTP.list(group_pattern=None, file=None)", "intent": "Send a LIST or LIST ACTIVE command . Return a pair ( response , list ) where list is a list of tuples representing all the groups available from this NNTP server , optionally matching the pattern string `group_pattern` . With arguments `file`.", "question_id": 6468}, {"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}, {"snippet": "queue.SimpleQueue", "intent": "Constructor for an unbounded FIFO queue.", "question_id": 7843}, {"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472}, {"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}, {"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}, {"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}, {"snippet": "Cmd.cmdqueue", "intent": "A list of queued input lines.", "question_id": 1148}, {"snippet": "ZipFile.open(name, force_zip64=False)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . With arguments `force_zip64`.", "question_id": 12809}, {"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}, {"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}, {"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}, {"snippet": "tixCommand.tix_filedialog(dlgclass)", "intent": "Returns the file selection dialog that may be shared among different calls from this application . An optional `dlgclass` parameter can be passed as a string to specified what type of file selection dialog widget is desired .", "question_id": 10585}, {"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}, {"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}, {"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}, {"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}, {"snippet": "os.read(fd, n)", "intent": "Read at most `n` bytes from file descriptor `fd` .", "question_id": 6793}, {"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5685}, {"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503}, {"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}, {"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}, {"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}, {"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}, {"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}, {"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}, {"snippet": "symbol.is_local()", "intent": "Return True if the symbol is local to its block .", "question_id": 9760}, {"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}, {"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}, {"snippet": "ssl.SSLError", "intent": "Raised to signal an error from the underlying SSL implementation (currently provided by the OpenSSL library).", "question_id": 8873}, {"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}, {"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}, {"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}, {"snippet": "bound_arguments.args", "intent": "A tuple of positional arguments values.", "question_id": 5004}, {"snippet": "AU_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 9725}, {"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}, {"snippet": "zlib.compressobj(zdict, level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12898}, {"snippet": "inspect.signature(callable)", "intent": "Return a Signature object for the given `callable` :", "question_id": 4977}, {"snippet": "charset.__ne__(other)", "intent": "This method allows you to compare two Charset instances for inequality . With arguments `other`.", "question_id": 2925}, {"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}, {"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425}, {"snippet": "xml.dom.XML_NAMESPACE", "intent": "The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4).", "question_id": 12308}, {"snippet": "mimetypes.inited", "intent": "Flag indicating whether or not the global data structures have been initialized.", "question_id": 5950}, {"snippet": "maildir.close()", "intent": "Maildir instances do not keep any open files and the underlying mailboxes do not support locking , so this method does nothing .", "question_id": 5766}, {"snippet": "urllib.request.urlopen(url, cadefault=False)", "intent": "Open the URL `url` , which can be either a string or a Request object . The `cadefault` parameter is ignored .", "question_id": 11756}, {"snippet": "test.support.SuppressCrashReport", "intent": "A context manager used to try to prevent crash dialog popups on tests that are expected to crash a subprocess.", "question_id": 10289}, {"snippet": "os.setgid(gid)", "intent": "Set the current process \u2019 group id . With arguments `gid`.", "question_id": 6695}, {"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}, {"snippet": "content_manager.set_content(msg, obj, *args, **kw)", "intent": "If the maintype is multipart , raise a TypeError ; otherwise look up a handler function based on the type of `obj` ( see next paragraph ) , call clear_content ( ) on the `msg` , and call the handler function , passing through all arguments . With arguments `*args`, `**kw`.", "question_id": 3033}, {"snippet": "glob.escape(pathname)", "intent": "Escape all special characters ( ' ? With arguments `pathname`.", "question_id": 4268}, {"snippet": "base64.b64decode(s, altchars=None, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 713}, {"snippet": "audioop.findfactor(fragment, reference)", "intent": "Return a factor F such that rms ( add ( `fragment` , mul ( `reference` , -F ) ) ) is minimal , i.e. , return the factor with which you should multiply reference to make it match as well as possible to fragment .", "question_id": 688}, {"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}, {"snippet": "cmath.cos(x)", "intent": "Return the cosine of `x` .", "question_id": 1104}, {"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}, {"snippet": "style.theme_create(themename)", "intent": "Create a new theme . It is an error if `themename` already exists .", "question_id": 10686}, {"snippet": "warnings.warn(message, category=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `category` argument , if given , must be a warning category class ( see above ) ; it defaults to UserWarning .", "question_id": 12000}, {"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}, {"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed')", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . With arguments `**_params`.", "question_id": 3317}, {"snippet": "i_pv4_address.max_prefixlen", "intent": "The total number of bits in the address representation for this version: 32 for IPv4, 128 for IPv6.", "question_id": 5176}, {"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342}, {"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}, {"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}, {"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}, {"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}, {"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}, {"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}, {"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12801}, {"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}, {"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}, {"snippet": "decimal.quantize(exp, rounding=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2462}, {"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}, {"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}, {"snippet": "mailbox.__len__()", "intent": "Return a count of messages in the mailbox .", "question_id": 5744}, {"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}, {"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}, {"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}, {"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}, {"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}, {"snippet": "kevent.udata", "intent": "User defined value.", "question_id": 8208}, {"snippet": "i_pv4_address.reverse_pointer", "intent": "The name of the reverse DNS PTR record for the IP address, e.g.", "question_id": 5179}, {"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12467}, {"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}, {"snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12914}, {"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238}, {"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}, {"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}, {"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}, {"snippet": "socket.getaddrinfo(host, port, type=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8637}, {"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}, {"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2185}, {"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}, {"snippet": "xmlrpc.client.dumps(params, methodresponse=None, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12707}, {"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}, {"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}, {"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}, {"snippet": "deque.pop()", "intent": "Remove and return an element from the right side of the deque .", "question_id": 1364}, {"snippet": "locale.format(format, val, grouping=False)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`, `grouping`.", "question_id": 5389}, {"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}, {"snippet": "Document.createElement(tagName)", "intent": "Create and return a new element node . With arguments `tagName`.", "question_id": 12345}, {"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}, {"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}, {"snippet": "oss_audio_device.close()", "intent": "Explicitly close the audio device .", "question_id": 7178}, {"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}, {"snippet": "shutil.get_archive_formats()", "intent": "Return a list of supported formats for archiving .", "question_id": 8358}, {"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}, {"snippet": "doc_test.examples", "intent": "A list of Example objects encoding the individual interactive Python examples that should be run by this test.", "question_id": 2818}, {"snippet": "lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "question_id": 6253}, {"snippet": "Telnet.open(host, port=0)", "intent": "Connect to a `host` . The optional second argument is the `port` number , which defaults to the standard Telnet port ( 23 ) .", "question_id": 10021}, {"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}, {"snippet": "test.support.check__all__(test_case, module, extra=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "question_id": 10279}, {"snippet": "mailbox.popitem()", "intent": "Return an arbitrary ( key , message ) pair , where key is a key and message is a message representation , and delete the corresponding message .", "question_id": 5748}, {"snippet": "modulefinder.ModuleFinder(debug=0, excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6033}, {"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}, {"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}, {"snippet": "FTP.ntransfercmd(cmd, rest=None)", "intent": "Like transfercmd ( ) , but returns a tuple of the data connection and the expected size of the data . `cmd` and `rest` means the same thing as in transfercmd ( ) .", "question_id": 3946}, {"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}, {"snippet": "urllib.parse.urlencode(query, doseq=False)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key .", "question_id": 11733}, {"snippet": "unicodedata.numeric(chr)", "intent": "Returns the numeric value assigned to the character `chr` as float .", "question_id": 11348}, {"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}, {"snippet": "tkinter.tix.TList", "intent": "The TList widget can be used to display data in a tabular format.", "question_id": 10573}, {"snippet": "html_calendar.formatyearpage(theyear, width=3, encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 967}, {"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}, {"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}, {"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}, {"snippet": "traceback_exception.from_list(a_list)", "intent": "Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . With arguments `a_list`.", "question_id": 10831}, {"snippet": "base_handler.origin_server", "intent": "This attribute should be set to a true value if the handler\u2019s _write() and _flush() are being used to communicate directly to the client, rather than via a CGI-like gateway protocol that wants the HTTP status in a special Status: header.", "question_id": 12268}, {"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}, {"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12129}, {"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11430}, {"snippet": "os.chroot(path)", "intent": "Change the root directory of the current process to `path` .", "question_id": 6843}, {"snippet": "os.RWF_NOWAIT", "intent": "Do not wait for data which is not immediately available.", "question_id": 6786}, {"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}, {"snippet": "xml.etree.ElementTree.XMLParser(encoding=None)", "intent": "This class is the low-level building block of the module . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12549}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, repr=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2187}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}, {"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}, {"snippet": "queue_handler.emit(record)", "intent": "Enqueues the result of preparing the LogRecord . This can result in the `record` silently being dropped ( if logging.raiseExceptions is False ) or a message printed to sys.stderr ( if logging.raiseExceptions is True ) .", "question_id": 5554}, {"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}, {"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}, {"snippet": "traceback_exception.from_exception(exc, capture_locals=False)", "intent": "Capture an exception for later rendering . `limit` , `lookup_lines` and `capture_locals` are as for the StackSummary class . With arguments `exc`.", "question_id": 10815}, {"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443}, {"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}, {"snippet": "mbox_message.add_flag(flag)", "intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "question_id": 5830}, {"snippet": "functools.reduce(function, iterable, initializer)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . If the optional `initializer` is present , it is placed before the items of the sequence in the calculation , and serves as a default when the sequence is empty . With arguments `iterable`.", "question_id": 4153}, {"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}, {"snippet": "SSLContext.wrap_socket(sock, do_handshake_on_connect=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `do_handshake_on_connect` specifies whether to do the SSL handshake automatically after doing a socket.connect ( ) , or whether the application program will call it explicitly , by invoking the SSLSocket.do_handshake ( ) method .", "question_id": 9024}, {"snippet": "doctest.DebugRunner(checker=None, optionflags=0)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `checker`, `optionflags`.", "question_id": 2899}, {"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}, {"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}, {"snippet": "traceback_exception.extract(frame_gen, capture_locals=False)", "intent": "Construct a StackSummary object from a frame generator ( such as is returned by walk_stack ( ) or walk_tb ( ) ) . If `limit` is supplied , only this many frames are taken from `frame_gen` . If `capture_locals` is True the local variables in each FrameSummary are captured as object representations .", "question_id": 10826}, {"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365}, {"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}, {"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}, {"snippet": "charset.__str__()", "intent": "Returns input_charset as a string coerced to lower case .", "question_id": 2923}, {"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}, {"snippet": "audioop.avgpp(fragment, width)", "intent": "Return the average peak-peak value over all samples in the `fragment` . With arguments `width`.", "question_id": 684}, {"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}, {"snippet": "codecs.CodecInfo(encode, decode, streamreader=None, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `streamreader`, `incrementaldecoder`.", "question_id": 1209}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327}, {"snippet": "bz2_file.peek(n)", "intent": "Return buffered data without advancing the file position . With arguments `n`.", "question_id": 894}, {"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639}, {"snippet": "ssl.RAND_add(bytes, entropy)", "intent": "Mix the given `bytes` into the SSL pseudo-random number generator . The parameter `entropy` ( a float ) is a lower bound on the entropy contained in string ( so you can always use 0.0 ) .", "question_id": 8889}, {"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}, {"snippet": "difflib.SequenceMatcher(isjunk=None, b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2675}, {"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418}, {"snippet": "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded . `top_level_dir` is stored so load_tests does not need to pass this argument in to loader.discover ( ) .", "question_id": 11502}, {"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}, {"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}, {"snippet": "xml.parsers.expat.ParserCreate(encoding=None)", "intent": "Creates and returns a new xmlparser object . `encoding` , if specified , must be a string naming the encoding used by the XML data .", "question_id": 7729}, {"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}, {"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}, {"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}, {"snippet": "UnknownHandler.unknown_open()", "intent": "Raise a URLError exception .", "question_id": 11878}, {"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138}, {"snippet": "subprocess.run(args)", "intent": "Run the command described by `args` .", "question_id": 9567}, {"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}, {"snippet": "stringprep.in_table_d2(code)", "intent": "Determine whether `code` is in tableD.2 ( Characters with bidirectional property \u201c L \u201d ) .", "question_id": 9549}, {"snippet": "ctypes.c_short", "intent": "Represents the C signed short datatype.", "question_id": 1868}, {"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}, {"snippet": "tkinter.tix.ExFileSelectBox", "intent": "The ExFileSelectBox widget is usually embedded in a tixExFileSelectDialog widget.", "question_id": 10567}, {"snippet": "HMAC.copy()", "intent": "Return a copy ( \u201c clone \u201d ) of the hmac object .", "question_id": 4337}, {"snippet": "xml.dom.getDOMImplementation(features=())", "intent": "Return a suitable DOM implementation . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12305}, {"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}, {"snippet": "code.InteractiveInterpreter(locals=None)", "intent": "This class deals with parsing and interpreter state ( the user \u2019 s namespace ) ; it does not deal with input buffering or prompting or input file naming ( the filename is always passed in explicitly ) . The optional `locals` argument specifies the dictionary in which code will be executed ; it defaults to a newly created dictionary with key '__name__ ' set to '__console__ ' and key '__doc__ ' set to None .", "question_id": 1156}, {"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}, {"snippet": "curses.ungetch(ch)", "intent": "Push `ch` so the next getch ( ) will return it .", "question_id": 1993}, {"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}, {"snippet": "ArgumentParser.convert_arg_line_to_args(arg_line)", "intent": "Arguments that are read from a file ( see the fromfile_prefix_chars keyword argument to the ArgumentParser constructor ) are read one argument per line . This method takes a single argument `arg_line` which is a string read from the argument file .", "question_id": 109}, {"snippet": "DatagramTransport.sendto(data)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 416}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stderr=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 540}, {"snippet": "header.encode(\\t', maxlinelen=None)", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . With arguments `\\t'`.", "question_id": 3132}, {"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}, {"snippet": "msilib.Feature(db, id, title, desc, display, level=1, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6120}, {"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}, {"snippet": "context.min(x, y)", "intent": "Compares two values numerically and returns the minimum . With arguments `x`, `y`.", "question_id": 2551}, {"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}, {"snippet": "AU_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 9720}, {"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}, {"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}, {"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}, {"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}, {"snippet": "Wave_write.setframerate(n)", "intent": "Set the frame rate to `n` .", "question_id": 12067}, {"snippet": "@contextlib.contextmanager", "intent": "This function is a decorator that can be used to define a factory function for with statement context managers, without needing to create a class or separate __enter__() and __exit__() methods.", "question_id": 1617}, {"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}, {"snippet": "FileCookieJar.load(filename=None, ignore_discard=False)", "intent": "Load cookies from a file . With arguments `filename`, `ignore_discard`.", "question_id": 4510}, {"snippet": "socket.CAN_RAW_FD_FRAMES", "intent": "Enables CAN FD support in a CAN_RAW socket.", "question_id": 8585}, {"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}, {"snippet": "process.send_signal(signal)", "intent": "Sends the `signal` signal to the child process .", "question_id": 550}, {"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}, {"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}, {"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}, {"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}, {"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}, {"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}, {"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}, {"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}, {"snippet": "netrc.hosts", "intent": "Dictionary mapping host names to (login, account, password) tuples.", "question_id": 6389}, {"snippet": "test.support.script_helper.assert_python_ok(*args, **env_vars)", "intent": "Assert that running the interpreter with args and optional environment variables env_vars succeeds ( rc == 0 ) and return a ( return code , stdout , stderr ) tuple . With arguments `*args`, `**env_vars`.", "question_id": 10301}, {"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}, {"snippet": "logging.handlers.HTTPHandler(host, url, secure=False, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5549}, {"snippet": "struct.iter_unpack(format, buffer)", "intent": "Iteratively unpack from the `buffer` buffer according to the `format` string format .", "question_id": 9556}, {"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}, {"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}, {"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}, {"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}, {"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}, {"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}, {"snippet": "View.Modify(kind, data)", "intent": "Modify the view , by calling MsiViewModify ( ) . `kind` can be one of MSIMODIFY_SEEK , MSIMODIFY_REFRESH , MSIMODIFY_INSERT , MSIMODIFY_UPDATE , MSIMODIFY_ASSIGN , MSIMODIFY_REPLACE , MSIMODIFY_MERGE , MSIMODIFY_DELETE , MSIMODIFY_INSERT_TEMPORARY , MSIMODIFY_VALIDATE , MSIMODIFY_VALIDATE_NEW , MSIMODIFY_VALIDATE_FIELD , or MSIMODIFY_VALIDATE_DELETE . `data` must be a record describing the new data .", "question_id": 6075}, {"snippet": "parser.st2list(st, line_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . If `line_info` is true , line number information will be included for all terminal tokens as a third element of the list representing the token .", "question_id": 7215}, {"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}, {"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}, {"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991}, {"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}, {"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}, {"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}, {"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}, {"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}, {"snippet": "winreg.KEY_QUERY_VALUE", "intent": "Required to query the values of a registry key.", "question_id": 12166}, {"snippet": "inspect.getcomments(object)", "intent": "Return in a single string any lines of comments immediately preceding the `object` \u2019 s source code ( for a class , function , or method ) , or at the top of the Python source file ( if the object is a module ) .", "question_id": 4970}, {"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}, {"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}, {"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157}, {"snippet": "logging.handlers.HTTPHandler(host, url, secure=False, context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5550}, {"snippet": "subprocess.call(args)", "intent": "Run the command described by `args` .", "question_id": 9659}, {"snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "question_id": 4995}, {"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}, {"snippet": "SyntaxError", "intent": "Raised when the parser encounters a syntax error.", "question_id": 3665}, {"snippet": "os.posix_fallocate(fd, offset, len)", "intent": "Ensures that enough disk space is allocated for the file specified by `fd` starting from `offset` and continuing for `len` bytes .", "question_id": 6775}, {"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}, {"snippet": "decimal.next_toward(other, context=None)", "intent": "If the two operands are unequal , return the number closest to the first operand in the direction of the second operand . With arguments `other`, `context`.", "question_id": 2456}, {"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}, {"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}, {"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}, {"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845}, {"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}, {"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}, {"snippet": "HTMLParser.handle_startendtag(tag, attrs)", "intent": "Similar to handle_starttag ( ) , but called when the parser encounters an XHTML-style empty `tag` ( < img ... / > ) . With arguments `attrs`.", "question_id": 4358}, {"snippet": "window.inch(y, x)", "intent": "Return the character at the given position in the window . With arguments `y`, `x`.", "question_id": 2069}, {"snippet": "robot_file_parser.unknown", "intent": "The platform does not provide information on whether the UUID was generated safely or not.", "question_id": 11936}, {"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}, {"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}, {"snippet": "nntplib.NNTP(host, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6416}, {"snippet": "inspect.isasyncgenfunction(object)", "intent": "Return true if the `object` is an asynchronous generator function , for example :", "question_id": 4957}, {"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}, {"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}, {"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}, {"snippet": "http.server.HTTPServer(server_address, RequestHandlerClass)", "intent": "This class builds on the TCPServer class by storing the server address as instance variables named server_name and server_port . With arguments `server_address`, `RequestHandlerClass`.", "question_id": 4614}, {"snippet": "doctest.testfile(filename, package=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for a module-relative filename .", "question_id": 2769}, {"snippet": "itertools.groupby(iterable)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "question_id": 5253}, {"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}, {"snippet": "struct.unpack_from(buffer, offset=0)", "intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "question_id": 9563}, {"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}, {"snippet": "os.tcsetpgrp(fd, pg)", "intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "question_id": 6807}, {"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}, {"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}, {"snippet": "bytecode.from_traceback(tb)", "intent": "Construct a Bytecode instance from the given traceback , setting current_offset to the instruction responsible for the exception . With arguments `tb`.", "question_id": 2699}, {"snippet": "zipimporter.get_filename(fullname)", "intent": "Return the value __file__ would be set to if the specified module was imported . With arguments `fullname`.", "question_id": 12886}, {"snippet": "CGIXMLRPCRequestHandler.register_instance(instance)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request ; the return value is returned to the client as the result .", "question_id": 12744}, {"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}, {"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}, {"snippet": "operator.indexOf(a, b)", "intent": "Return the index of the first of occurrence of `b` in `a` .", "question_id": 6577}, {"snippet": "base_rotating_handler.rotation_filename(default_name)", "intent": "Modify the filename of a log file when rotating . With arguments `default_name`.", "question_id": 5456}, {"snippet": "loop.set_default_executor(executor)", "intent": "Set `executor` as the default executor used by run_in_executor ( ) .", "question_id": 306}, {"snippet": "calendar.TextCalendar()", "intent": "This class can be used to generate plain text calendars .", "question_id": 926}, {"snippet": "FTP.abort()", "intent": "Abort a file transfer that is in progress .", "question_id": 3923}, {"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}, {"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}, {"snippet": "test.support.check_no_resource_warning(testcase)", "intent": "Context manager to check that no ResourceWarning was raised . With arguments `testcase`.", "question_id": 10166}, {"snippet": "operator.__setitem__(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6579}, {"snippet": "str.swapcase()", "intent": "Return a copy of the string with uppercase characters converted to lowercase and vice versa .", "question_id": 9252}, {"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}, {"snippet": "base64.b64decode(s, altchars=None, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 713}, {"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}, {"snippet": "test_case.assertRaises(exception, callable, *args, **kwds)", "intent": "Test that an `exception` is raised when `callable` is called with any positional or keyword arguments that are also passed to assertRaises ( ) . With arguments `*args`, `**kwds`.", "question_id": 11399}, {"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}, {"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}, {"snippet": "xml.sax.parse(filename_or_stream, handler)", "intent": "Create a SAX parser and use it to parse a document . The document , passed in as `filename_or_stream` , can be a filename or a file object . The `handler` parameter needs to be a SAX ContentHandler instance .", "question_id": 12593}, {"snippet": "imp.get_tag()", "intent": "Return the PEP 3147 magic tag string matching this version of Python \u2019 s magic number , as returned by get_magic ( ) .", "question_id": 4770}, {"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}, {"snippet": "task.print_stack(file=None)", "intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 638}, {"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}, {"snippet": "warnings.formatwarning(message, category, filename, lineno)", "intent": "Format a warning the standard way . `line` is a line of source code to be included in the warning `message` ; if line is not supplied , formatwarning ( ) will try to read the line specified by `filename` and `lineno` . With arguments `category`.", "question_id": 12021}, {"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}, {"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}, {"snippet": "winreg.HKEY_CLASSES_ROOT", "intent": "Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types.", "question_id": 12155}, {"snippet": "context.logical_xor(x, y)", "intent": "Applies the logical operation xor between each operand \u2019 s digits . With arguments `x`, `y`.", "question_id": 2548}, {"snippet": "turtle.shapetransform()", "intent": "Set or return the current transformation matrix of the turtle shape .", "question_id": 11008}, {"snippet": "ctypes.c_longdouble", "intent": "Represents the C long double datatype.", "question_id": 1859}, {"snippet": "base_manager.start(initializer, initargs)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6282}, {"snippet": "audioop.getsample(fragment, width, index)", "intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "question_id": 691}, {"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}, {"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}, {"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}, {"snippet": "window.clrtobot()", "intent": "Erase from cursor to the end of the window : all lines below the cursor are deleted , and then the equivalent of clrtoeol ( ) is performed .", "question_id": 2036}, {"snippet": "time.time_ns()", "intent": "Similar to time ( ) but returns time as an integer number of nanoseconds since the epoch .", "question_id": 10461}, {"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}, {"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}, {"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}, {"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}, {"snippet": "contextvars.ContextVar(name)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes .", "question_id": 1638}, {"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}, {"snippet": "types.AsyncGeneratorType", "intent": "The type of asynchronous generator-iterator objects, created by asynchronous generator functions.", "question_id": 11187}, {"snippet": "str.lower()", "intent": "Return a copy of the string with all the cased characters 4 converted to lowercase .", "question_id": 9217}, {"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}, {"snippet": "logging.handlers.MemoryHandler(capacity)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) .", "question_id": 5529}, {"snippet": "str.split()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9241}, {"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}, {"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}, {"snippet": "queue.put(obj, block)", "intent": "Put `obj` into the queue . If the optional argument `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 6201}, {"snippet": "weakref.getweakrefs(object)", "intent": "Return a list of all weak reference and proxy objects which refer to `object` .", "question_id": 12080}, {"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}, {"snippet": "binascii.b2a_uu(data, backtick=False)", "intent": "Convert binary `data` to a line of ASCII characters , the return value is the converted line , including a newline char . If `backtick` is true , zeros are represented by ' ` ' instead of spaces .", "question_id": 822}, {"snippet": "DOMImplementation.hasFeature(feature, version)", "intent": "Return true if the `feature` identified by the pair of strings feature and `version` is implemented .", "question_id": 12311}, {"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}, {"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}, {"snippet": "sys.hexversion", "intent": "The version number encoded as a single integer.", "question_id": 9814}, {"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}, {"snippet": "Popen.communicate(input=None)", "intent": "Interact with process : Send data to stdin . The optional `input` argument should be data to be sent to the child process , or None , if no data should be sent to the child .", "question_id": 9613}, {"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}, {"snippet": "asyncio.wait_for(aw, timeout)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` .", "question_id": 605}, {"snippet": "base64.standard_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the standard Base64 alphabet and return the decoded bytes .", "question_id": 715}, {"snippet": "unittest.mock.Mock(**kwargs)", "intent": "Create a new Mock object . With arguments `**kwargs`.", "question_id": 11560}, {"snippet": "SimpleQueue.qsize()", "intent": "Return the approximate size of the queue .", "question_id": 7861}, {"snippet": "test_case.assertIsNot(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11385}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11152}, {"snippet": "date.replace(year=self.year)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`.", "question_id": 2230}, {"snippet": "CookiePolicy.netscape", "intent": "Implement Netscape protocol.", "question_id": 4536}, {"snippet": "SSLSocket.get_channel_binding()", "intent": "Get channel binding data for current connection , as a bytes object .", "question_id": 8982}, {"snippet": "os.sched_getparam(pid)", "intent": "Return the scheduling parameters as a sched_param instance for the process with PID `pid` .", "question_id": 7110}, {"snippet": "site.addsitedir(sitedir, known_paths=None)", "intent": "Add a directory to sys.path and process its .pth files . With arguments `sitedir`, `known_paths`.", "question_id": 8408}, {"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}, {"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}, {"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478}, {"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}, {"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}, {"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}, {"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}, {"snippet": "SSLContext.wrap_socket(sock, server_side=False)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket .", "question_id": 9023}, {"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}, {"snippet": "doctest.run_docstring_examples(f, globs, verbose=False, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2791}, {"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}, {"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333}, {"snippet": "ensurepip.bootstrap(upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3491}, {"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}, {"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}, {"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}, {"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}, {"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}, {"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}, {"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}, {"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}, {"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}, {"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813}, {"snippet": "bz2.BZ2File(filename)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 886}, {"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}, {"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}, {"snippet": "pool.join()", "intent": "Wait for the worker processes to exit .", "question_id": 6358}, {"snippet": "fcntl.ioctl(fd, request, arg=0)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . With arguments `fd`.", "question_id": 3743}, {"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}, {"snippet": "test.support.LARGEST", "intent": "Object that is greater than anything (except itself).", "question_id": 10136}, {"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}, {"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}, {"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}, {"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}, {"snippet": "timeit.Timer(timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10500}, {"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}, {"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}, {"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}, {"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}, {"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300}, {"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}, {"snippet": "inspect_loader.load_module(fullname)", "intent": "Implementation of Loader.load_module ( ) . With arguments `fullname`.", "question_id": 4832}, {"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}, {"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}, {"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}, {"snippet": "curses.termattrs()", "intent": "Return a logical OR of all video attributes supported by the terminal .", "question_id": 1984}, {"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}, {"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}, {"snippet": "asyncio.LimitOverrunError", "intent": "Reached the buffer size limit while looking for a separator.", "question_id": 352}, {"snippet": "email.headerregistry.MIMEVersionHeader", "intent": "There is really only one valid value for the MIME-Version header, and that is 1.0.", "question_id": 3163}, {"snippet": "bdb.set_return(frame)", "intent": "Stop when returning from the given `frame` .", "question_id": 787}, {"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}, {"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}, {"snippet": "json.JSONEncoder(skipkeys=False)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None .", "question_id": 5323}, {"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}, {"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}, {"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}, {"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}, {"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}, {"snippet": "bz2.BZ2File(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly . If mode is ' w ' or ' a ' , `compresslevel` can be an integer between 1 and 9 specifying the level of compression : 1 produces the least compression , and 9 ( default ) produces the most compression .", "question_id": 891}, {"snippet": "errno.EMFILE", "intent": "Too many open files", "question_id": 3529}, {"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}, {"snippet": "struct.unpack_from(buffer, offset=0)", "intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "question_id": 9563}, {"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}, {"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}, {"snippet": "SMTP.starttls()", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode .", "question_id": 8526}, {"snippet": "map(function, iterable)", "intent": "Return an iterator that applies `function` to every item of `iterable` , yielding the results .", "question_id": 4048}, {"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980}, {"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}, {"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}, {"snippet": "shutil.register_unpack_format(name, extensions, function, extra_args)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives . When provided , `extra_args` is a sequence of ( name , value ) tuples that will be passed as keywords arguments to the callable .", "question_id": 8367}, {"snippet": "Dialect.strict", "intent": "When True, raise exception Error on bad CSV input.", "question_id": 1730}, {"snippet": "loop.call_later(delay, callback, *args)", "intent": "Schedule `callback` to be called after the given `delay` number of seconds ( can be either an int or a float ) . With arguments `*args`.", "question_id": 193}, {"snippet": "str.zfill(width)", "intent": "Return a copy of the string left filled with ASCII ' 0 ' digits to make a string of length `width` .", "question_id": 9256}, {"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}, {"snippet": "gettext.translation(domain, localedir=None, fallback=False)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . To allow setting the `fallback` , copy.copy ( ) is used to clone each translation object from the cache ; the actual instance data is still shared with the cache .", "question_id": 4237}, {"snippet": "ssl.VERIFY_X509_STRICT", "intent": "Possible value for SSLContext.verify_flags to disable workarounds for broken X.509 certificates.", "question_id": 8918}, {"snippet": "asyncio.iscoroutine(obj)", "intent": "Return True if `obj` is a coroutine object .", "question_id": 645}, {"snippet": "os.minor(device)", "intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6883}, {"snippet": "Node.nodeType", "intent": "An integer representing the node type.", "question_id": 12314}, {"snippet": "csvreader.line_num", "intent": "The number of lines read from the source iterator.", "question_id": 1733}, {"snippet": "shutil.copyfileobj(fsrc, fdst, length)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` . The integer `length` , if given , is the buffer size .", "question_id": 8309}, {"snippet": "textbox.edit(validator)", "intent": "This is the entry point you will normally use . If `validator` is supplied , it must be a function .", "question_id": 2136}, {"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}, {"snippet": "loop.getaddrinfo(host, port, family=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`.", "question_id": 290}, {"snippet": "base64.a85encode(b, foldspaces=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 .", "question_id": 727}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}, {"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}, {"snippet": "View.Close()", "intent": "Close the view , through MsiViewClose ( ) .", "question_id": 6076}, {"snippet": "asyncio.BoundedSemaphore(value=1)", "intent": "A bounded semaphore object . Bounded Semaphore is a version of Semaphore that raises a ValueError in release ( ) if it increases the internal counter above the initial `value` .", "question_id": 589}, {"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}, {"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}, {"snippet": "xml.etree.ElementTree.ProcessingInstruction(target, text=None)", "intent": "PI element factory . `target` is a string containing the PI target . `text` is a string containing the PI contents , if given .", "question_id": 12449}, {"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}, {"snippet": "sys.getwindowsversion()", "intent": "Return a named tuple describing the Windows version currently running .", "question_id": 9809}, {"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}, {"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}, {"snippet": "unittest.mock.create_autospec(spec, **kwargs)", "intent": "Create a mock object using another object as a `spec` . With arguments `**kwargs`.", "question_id": 11649}, {"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745}, {"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}, {"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}, {"snippet": "urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied . With arguments `reporthook`.", "question_id": 11888}, {"snippet": "turtle.undo()", "intent": "Undo ( repeatedly ) the last turtle action ( s ) .", "question_id": 10933}, {"snippet": "source_file_loader.load_module(name=None)", "intent": "Concrete implementation of importlib.abc.Loader.load_module ( ) where specifying the `name` of the module to load is optional .", "question_id": 4896}, {"snippet": "os.set_handle_inheritable(handle, inheritable)", "intent": "Set the \u201c `inheritable` \u201d flag of the specified `handle` .", "question_id": 6819}, {"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}, {"snippet": "logging.handlers.HTTPHandler(host, url, secure=False, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5549}, {"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}, {"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}, {"snippet": "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES", "intent": "A list of strings representing the file suffixes for optimized bytecode modules.", "question_id": 4867}, {"snippet": "email.utils.encode_rfc2231(s, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3481}, {"snippet": "unicodedata.decomposition(chr)", "intent": "Returns the character decomposition mapping assigned to the character `chr` as string .", "question_id": 11354}, {"snippet": "sys.set_asyncgen_hooks(firstiter, finalizer)", "intent": "Accepts two optional keyword arguments which are callables that accept an asynchronous generator iterator as an argument . The `firstiter` callable will be called when an asynchronous generator is iterated for the first time . The `finalizer` will be called when an asynchronous generator is about to be garbage collected .", "question_id": 9840}, {"snippet": "@functools.wraps(wrapped)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`.", "question_id": 4160}, {"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}, {"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}, {"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924}, {"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}, {"snippet": "inspect.getframeinfo(frame)", "intent": "Get information about a `frame` or traceback object .", "question_id": 5023}, {"snippet": "ctypes.util.find_library(name)", "intent": "Try to find a library and return a pathname . `name` is the library name without any prefix like lib , suffix like .so , .dylib or version number ( this is the form used for the posix linker option -l ) .", "question_id": 1739}, {"snippet": "datetime.astimezone(tz=None)", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2295}, {"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}, {"snippet": "socket.socketpair(family, type)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8624}, {"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}, {"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}, {"snippet": "Morsel.js_output(attrs=None)", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP header was sent . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4606}, {"snippet": "context.sqrt(x)", "intent": "Square root of a non-negative number to context precision . With arguments `x`.", "question_id": 2571}, {"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}, {"snippet": "BaseCookie.js_output()", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP headers was sent .", "question_id": 4592}, {"snippet": "oss_audio_device.setparameters(format, nchannels)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods .", "question_id": 7193}, {"snippet": "shutil.get_archive_formats()", "intent": "Return a list of supported formats for archiving .", "question_id": 8358}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT", "intent": "Something other than whitespace occurred after the document element.", "question_id": 7794}, {"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}, {"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}, {"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}, {"snippet": "locale.resetlocale()", "intent": "Sets the locale for `category` to the default setting .", "question_id": 5380}, {"snippet": "barrier.wait(timeout=None)", "intent": "Pass the barrier . If a `timeout` is provided , it is used in preference to any that was supplied to the class constructor .", "question_id": 10422}, {"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}, {"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}, {"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}, {"snippet": "message.set_param(param, value, header='Content-Type', charset=None)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If optional `charset` is specified , the parameter will be encoded according to RFC 2231 . With arguments `param`.", "question_id": 3006}, {"snippet": "devpoll.register(fd)", "intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer .", "question_id": 8173}, {"snippet": "NNTP.getcapabilities()", "intent": "Return the RFC 3977 capabilities advertised by the server , as a dict instance mapping capability names to ( possibly empty ) lists of values .", "question_id": 6450}, {"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}, {"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}, {"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}, {"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}, {"snippet": "turtle.seth(to_angle)", "intent": "Set the orientation of the turtle to `to_angle` .", "question_id": 10921}, {"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481}, {"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}, {"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}, {"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}, {"snippet": "config_parser.optionxform(option)", "intent": "Transforms the `option` name option as found in an input file or as passed in by client code to the form that should be used in the internal structures .", "question_id": 1565}, {"snippet": "pickle.Unpickler(file, fix_imports=True)", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7399}, {"snippet": "socket.sendfile(file, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8734}, {"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}, {"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`.", "question_id": 12848}, {"snippet": "html_calendar.formatyear(theyear)", "intent": "Return a year \u2019 s calendar as an HTML table . With arguments `theyear`.", "question_id": 960}, {"snippet": "zlib.error", "intent": "Exception raised on compression and decompression errors.", "question_id": 12892}, {"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}, {"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}, {"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}, {"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}, {"snippet": "POP3.capa()", "intent": "Query the server \u2019 s capabilities as specified in RFC 2449 .", "question_id": 7603}, {"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}, {"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}, {"snippet": "turtle.distance(x)", "intent": "Return the distance from the turtle to ( `x` , `y` ) , the given vector , or the given other turtle , in turtle step units .", "question_id": 10943}, {"snippet": "grp.getgrnam(name)", "intent": "Return the group database entry for the given group `name` .", "question_id": 4270}, {"snippet": "math.hypot(x, y)", "intent": "Return the Euclidean norm , sqrt ( x*x + y*y ) . This is the length of the vector from the origin to point ( `x` , `y` ) .", "question_id": 5919}, {"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}, {"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "question_id": 65}, {"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}, {"snippet": "multiprocessing.Condition()", "intent": "A condition variable : an alias for threading.Condition .", "question_id": 6249}, {"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "window.resize(nlines, ncols)", "intent": "Reallocate storage for a curses window to adjust its dimensions to the specified values . With arguments `nlines`, `ncols`.", "question_id": 2108}, {"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}, {"snippet": "turtle.showturtle()", "intent": "Make the turtle visible .", "question_id": 10979}, {"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}, {"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013}, {"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}, {"snippet": "lzma.LZMADecompressor(format=FORMAT_AUTO, filters=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `format` argument specifies the container format that should be used . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "question_id": 5695}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}, {"snippet": "test_case.shortDescription()", "intent": "Returns a description of the test , or None if no description has been provided .", "question_id": 11470}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}, {"snippet": "random.shuffle(x, random)", "intent": "Shuffle the sequence `x` in place . The optional argument `random` is a 0-argument function returning a random float in [ 0.0 , 1.0 ) ; by default , this is the function random ( ) .", "question_id": 7903}, {"snippet": "test.support.run_doctest(module, optionflags=0)", "intent": "Run doctest.testmod ( ) on the given `module` . `optionflags` is passed as optionflags to doctest.testmod ( ) .", "question_id": 10160}, {"snippet": "math.fmod(x, y)", "intent": "Return fmod ( `x` , `y` ) , as defined by the platform C library .", "question_id": 5890}, {"snippet": "somenamedtuple._replace(**kwargs)", "intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "question_id": 1386}, {"snippet": "_c_data._objects", "intent": "This member is either None or a dictionary containing Python objects that need to be kept alive so that the memory block contents is kept valid.", "question_id": 1852}, {"snippet": "queue_handler.prepare(record)", "intent": "Prepares a `record` for queuing .", "question_id": 5555}, {"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}, {"snippet": "tempfile.mktemp(suffix='', prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10098}, {"snippet": "chain_map.new_child()", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance .", "question_id": 1337}, {"snippet": "cmath.cos(x)", "intent": "Return the cosine of `x` .", "question_id": 1104}, {"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}, {"snippet": "ur_lopener.open(fullurl)", "intent": "Open `fullurl` using the appropriate protocol .", "question_id": 11892}, {"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182}, {"snippet": "int.from_bytes(bytes, byteorder, signed=False)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument indicates whether two \u2019 s complement is used to represent the integer .", "question_id": 9146}, {"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}, {"snippet": "asyncio.wait_for(aw, timeout)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` .", "question_id": 605}, {"snippet": "datetime.now(tz=None)", "intent": "Return the current local date and time . If optional argument `tz` is None or not specified , this is like today ( ) , but , if possible , supplies more precision than can be gotten from going through a time.time ( ) timestamp ( for example , this may be possible on platforms supplying the C gettimeofday ( ) function ) .", "question_id": 2259}, {"snippet": "xmlrpc.client.dumps(params, methodname=None, encoding=None)", "intent": "Convert `params` into an XML-RPC request . If methodresponse is true , only a single value can be returned , meaning that params must be of length 1. `encoding` , if supplied , is the encoding to use in the generated XML ; the default is UTF-8 . With arguments `methodname`.", "question_id": 12704}, {"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}, {"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}, {"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}, {"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}, {"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639}, {"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}, {"snippet": "warnings.warn_explicit(message, category, filename, lineno)", "intent": "This is a low-level interface to the functionality of warn ( ) , passing in explicitly the `message` , `category` , `filename` and line number , and optionally the `module` name and the `registry` ( which should be the __warningregistry__ dictionary of the module ) . With arguments `lineno`.", "question_id": 12007}, {"snippet": "datetime.strptime(date_string, format)", "intent": "Return a datetime corresponding to `date_string` , parsed according to `format` .", "question_id": 2268}, {"snippet": "tarfile.USTAR_FORMAT", "intent": "POSIX.1-1988 (ustar) format.", "question_id": 9909}, {"snippet": "i_pv4_network.subnets(new_prefix=None)", "intent": "The subnets that join to make the current network definition , depending on the argument values . `new_prefix` is the desired new prefix of the subnets ; it must be larger than our prefix .", "question_id": 5210}, {"snippet": "os.rename(src, dst, dst_dir_fd=None)", "intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "question_id": 6894}, {"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365}, {"snippet": "ipaddress.NetmaskValueError(ValueError)", "intent": "Any value error related to the net mask . With arguments `ValueError`.", "question_id": 5238}, {"snippet": "TarFile.list(verbose=True, members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9930}, {"snippet": "profile.runcall(func, *args, **kwargs)", "intent": "Profile `func` ( `*args` , `**kwargs` )", "question_id": 7687}, {"snippet": "resource.RLIMIT_VMEM", "intent": "The largest area of mapped memory which the process may occupy.", "question_id": 8085}, {"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}, {"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}, {"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}, {"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}, {"snippet": "semaphore.acquire(blocking=True, timeout=None)", "intent": "Acquire a semaphore . When invoked with `blocking` set to false , do not block . When invoked with a `timeout` other than None , it will block for at most timeout seconds .", "question_id": 10402}, {"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}, {"snippet": "uuid.NAMESPACE_DNS", "intent": "When this namespace is specified, the name string is a fully-qualified domain name.", "question_id": 11964}, {"snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)", "intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power . `dklen` is the length of the derived key .", "question_id": 4311}, {"snippet": "typing.Type()", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example :", "question_id": 11232}, {"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931}, {"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}, {"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}, {"snippet": "shelve.open(filename, flag='c')", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) .", "question_id": 8235}, {"snippet": "pkgutil.ImpImporter()", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm .", "question_id": 7437}, {"snippet": "resource.RLIMIT_SBSIZE", "intent": "The maximum size (in bytes) of socket buffer usage for this user.", "question_id": 8092}, {"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}, {"snippet": "base_http_request_handler.send_header(keyword, value)", "intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "question_id": 4643}, {"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}, {"snippet": "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None, offset=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError . If `lineno` is not None , compares to the line of the SyntaxError . If `offset` is not None , compares to the offset of the SyntaxError .", "question_id": 10238}, {"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899}, {"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}, {"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}, {"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}, {"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}, {"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}, {"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}, {"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}, {"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}, {"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}, {"snippet": "Record.GetInteger(field)", "intent": "Return the value of `field` as an integer where possible .", "question_id": 6082}, {"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8350}, {"snippet": "shlex.token", "intent": "The token buffer.", "question_id": 8306}, {"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}, {"snippet": "doctest.testfile(filename, package=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for a module-relative filename .", "question_id": 2769}, {"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}, {"snippet": "urllib.parse.quote_from_bytes(bytes)", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding .", "question_id": 11721}, {"snippet": "symbol_table.is_optimized()", "intent": "Return True if the locals in this table can be optimized .", "question_id": 9738}, {"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942}, {"snippet": "xml.sax.handler.ErrorHandler", "intent": "Interface used by the parser to present error and warning messages to the application.", "question_id": 12567}, {"snippet": "importlib.find_loader(name)", "intent": "Find the loader for a module , optionally within the specified `path` . If the module is in sys.modules , then sys.modules [ `name` ] .__loader__ is returned ( unless the loader would be None or is not set , in which case ValueError is raised ) .", "question_id": 4795}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "os.CLD_DUMPED", "intent": "These are the possible values for si_code in the result returned by waitid().", "question_id": 7079}, {"snippet": "unittest.main(testLoader=unittest.defaultTestLoader)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "question_id": 11550}, {"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}, {"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}, {"snippet": "file_handler.emit(record)", "intent": "Outputs the `record` to the file .", "question_id": 5435}, {"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}, {"snippet": "loop.create_unix_connection(protocol_factory, path=None, sock=None)", "intent": "Create a Unix connection . `path` is the name of a Unix domain socket and is required , unless a `sock` parameter is specified . With arguments `protocol_factory`.", "question_id": 229}, {"snippet": "set(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9431}, {"snippet": "context_var.get(default)", "intent": "Return a value for the context variable for the current context . With arguments `default`.", "question_id": 1640}, {"snippet": "DocumentType.name", "intent": "The name of the root element as given in the DOCTYPE declaration, if present.", "question_id": 12341}, {"snippet": "shlex.shlex(infile=None, posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8281}, {"snippet": "Pattern.search(string, pos, endpos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 . The optional parameter `endpos` limits how far the string will be searched ; it will be as if the string is endpos characters long , so only the characters from pos to endpos - 1 will be searched for a match .", "question_id": 7970}, {"snippet": "dataclasses.Field", "intent": "Field objects describe each defined field.", "question_id": 2177}, {"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}, {"snippet": "uuid.uuid1()", "intent": "Generate a UUID from a host ID , sequence number , and the current time .", "question_id": 11957}, {"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139}, {"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}, {"snippet": "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.", "question_id": 4162}, {"snippet": "listener.close()", "intent": "Close the bound socket or named pipe of the listener object .", "question_id": 6377}, {"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}, {"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}, {"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}, {"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}, {"snippet": "sndhdr.whathdr(filename)", "intent": "Determines the type of sound data stored in a file based on the file header . The name of the file is given by `filename` .", "question_id": 8550}, {"snippet": "ctypes.byref(obj, offset)", "intent": "Returns a light-weight pointer to `obj` , which must be an instance of a ctypes type . `offset` defaults to zero , and must be an integer that will be added to the internal pointer value .", "question_id": 1810}, {"snippet": "mh.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "question_id": 5781}, {"snippet": "window.getch(y, x)", "intent": "Get a character . With arguments `y`, `x`.", "question_id": 2051}, {"snippet": "math.pi", "intent": "The mathematical constant \u03c0 = 3.141592\u2026, to available precision.", "question_id": 5934}, {"snippet": "typing.FrozenSet(frozenset)", "intent": "A generic version of builtins.frozenset . With arguments `frozenset`.", "question_id": 11275}, {"snippet": "window.noutrefresh()", "intent": "Mark for refresh but wait .", "question_id": 2098}, {"snippet": "wsgiref.util.FileWrapper(filelike, blksize=8192)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12218}, {"snippet": "time.replace(hour=self.hour)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2335}, {"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}, {"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}, {"snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "question_id": 1205}, {"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}, {"snippet": "dis.Bytecode(x, first_line=None)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . If `first_line` is not None , it indicates the line number that should be reported for the first source line in the disassembled code . With arguments `x`.", "question_id": 2696}, {"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}, {"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}, {"snippet": "os.chdir(path)", "intent": "Change the current working directory to `path` .", "question_id": 6832}, {"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}, {"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026}, {"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}, {"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}, {"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}, {"snippet": "email_message.get_boundary()", "intent": "Return the value of the boundary parameter of the Content-Type header of the message , or `failobj` if either the header is missing , or has no boundary parameter .", "question_id": 3276}, {"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}, {"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}, {"snippet": "bytearray.rsplit(sep=None, maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9358}, {"snippet": "faulthandler.disable()", "intent": "Disable the fault handler : uninstall the signal handlers installed by enable ( ) .", "question_id": 3720}, {"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}, {"snippet": "counter.fromkeys(iterable)", "intent": "This class method is not implemented for Counter objects . With arguments `iterable`.", "question_id": 1347}, {"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}, {"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}, {"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}, {"snippet": "audioop.bias(fragment, width, bias)", "intent": "Return a `fragment` that is the original fragment with a `bias` added to each sample . With arguments `width`.", "question_id": 685}, {"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}, {"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}, {"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}, {"snippet": "sys.abiflags", "intent": "On POSIX systems where Python was built with the standard configure script, this contains the ABI flags as specified by PEP 3149.", "question_id": 9766}, {"snippet": "FTP.delete(filename)", "intent": "Remove the file named `filename` from the server .", "question_id": 3960}, {"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}, {"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}, {"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157}, {"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}, {"snippet": "doctest.testfile(filename, package=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for a module-relative filename .", "question_id": 2769}, {"snippet": "io.FileIO(name, mode='r')", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending .", "question_id": 5100}, {"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068}, {"snippet": "SMTP.verify(address)", "intent": "Check the validity of an `address` on this server using SMTP VRFY .", "question_id": 8521}, {"snippet": "multiprocessing.AuthenticationError", "intent": "Raised when there is an authentication error.", "question_id": 6191}, {"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}, {"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}, {"snippet": "mailbox.Babyl(path, factory=None)", "intent": "A subclass of Mailbox for mailboxes in Babyl format . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . With arguments `path`.", "question_id": 5795}, {"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}, {"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}, {"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}, {"snippet": "gc.set_threshold(threshold0, threshold1, threshold2)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection . If generation 0 has been examined more than `threshold1` times since generation 1 has been examined , then generation 1 is examined as well . Similarly , `threshold2` controls the number of collections of generation 1 before collecting generation 2 .", "question_id": 4176}, {"snippet": "os.path.commonprefix(list)", "intent": "Return the longest path prefix ( taken character-by-character ) that is a prefix of all paths in `list` .", "question_id": 7145}, {"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}, {"snippet": "linecache.clearcache()", "intent": "Clear the cache .", "question_id": 5345}, {"snippet": "InputSource.setCharacterStream(charfile)", "intent": "Set the character stream ( a text file ) for this input source . With arguments `charfile`.", "question_id": 12642}, {"snippet": "Path.lchmod(mode)", "intent": "Like Path.chmod ( ) but , if the path points to a symbolic link , the symbolic link \u2019 s `mode` is changed rather than its target \u2019 s .", "question_id": 7282}, {"snippet": "tarfile.open(**kwargs, bufsize=10240)", "intent": "Return a TarFile object for the pathname `name` . `bufsize` specifies the blocksize and defaults to 20 * 512 bytes . With arguments `**kwargs`.", "question_id": 9894}, {"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}, {"snippet": "os.makedirs(name)", "intent": "Recursive directory creation function . With arguments `name`.", "question_id": 6866}, {"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}, {"snippet": "functools.update_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4158}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5472}, {"snippet": "getopt.gnu_getopt(args)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`.", "question_id": 4200}, {"snippet": "math.log(x)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5908}, {"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}, {"snippet": "os.sysconf(name)", "intent": "Return integer-valued system configuration values . If the configuration value specified by `name` isn \u2019 t defined , -1 is returned .", "question_id": 7119}, {"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609}, {"snippet": "contextlib.AbstractAsyncContextManager", "intent": "An abstract base class for classes that implement object.__aenter__() and object.__aexit__().", "question_id": 1616}, {"snippet": "FTP.storlines(cmd, fp)", "intent": "Store a file in ASCII transfer mode . `cmd` should be an appropriate STOR command ( see storbinary ( ) ) . Lines are read until EOF from the file object `fp` ( opened in binary mode ) using its readline ( ) method to provide the data to be stored .", "question_id": 3941}, {"snippet": "shlex.eof", "intent": "Token used to determine end of file.", "question_id": 8307}, {"snippet": "codecs.open(filename, mode='r', buffering=1)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . `buffering` has the same meaning as for the built-in open ( ) function . With arguments `filename`.", "question_id": 1232}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}, {"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}, {"snippet": "context.next_toward(x, y)", "intent": "Returns the number closest to `x` , in direction towards `y` .", "question_id": 2557}, {"snippet": "Popen.communicate(input=None)", "intent": "Interact with process : Send data to stdin . The optional `input` argument should be data to be sent to the child process , or None , if no data should be sent to the child .", "question_id": 9613}, {"snippet": "mh.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "question_id": 5781}, {"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}, {"snippet": "os.posix_fallocate(fd, offset, len)", "intent": "Ensures that enough disk space is allocated for the file specified by `fd` starting from `offset` and continuing for `len` bytes .", "question_id": 6775}, {"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}, {"snippet": "IncrementalParser.reset()", "intent": "This method is called after close has been called to reset the parser so that it is ready to parse new documents .", "question_id": 12629}, {"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}, {"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}, {"snippet": "object.__reduce_ex__(protocol)", "intent": "Alternatively , a __reduce_ex__ ( ) method may be defined . The only difference is this method should take a single integer argument , the `protocol` version .", "question_id": 7414}, {"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961}, {"snippet": "Popen.send_signal(signal)", "intent": "Sends the `signal` signal to the child .", "question_id": 9616}, {"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}, {"snippet": "pickletools.dis(pickle, out=None, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7422}, {"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}, {"snippet": "Node.toprettyxml(newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12419}, {"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\", optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2795}, {"snippet": "style.layout(style)", "intent": "Define the widget layout for given `style` .", "question_id": 10681}, {"snippet": "numbers.Rational", "intent": "Subtypes Real and adds numerator and denominator properties, which should be in lowest terms.", "question_id": 6509}, {"snippet": "os.forkpty()", "intent": "Fork a child process , using a new pseudo-terminal as the child \u2019 s controlling terminal .", "question_id": 7036}, {"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}, {"snippet": "subprocess.check_output(args, text=None)", "intent": "Run command with arguments and return its output . The actual `encoding` of the output data may depend on the command being invoked , so the decoding to `text` will often need to be handled at the application level . With arguments `args`.", "question_id": 9688}, {"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}, {"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}, {"snippet": "sched.scheduler(timefunc=time.monotonic)", "intent": "The scheduler class defines a generic interface to scheduling events . It needs two functions to actually deal with the \u201c outside world \u201d \u2014 `timefunc` should be callable without arguments , and return a number ( the \u201c time \u201d , in any units whatsoever ) .", "question_id": 8115}, {"snippet": "memoryview.tobytes()", "intent": "Return the data in the buffer as a bytestring .", "question_id": 9413}, {"snippet": "OptionParser.print_usage()", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6644}, {"snippet": "urllib.request.urlopen(url, data=None, context=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .", "question_id": 11761}, {"snippet": "OptionParser.get_version()", "intent": "Same as print_version ( ) but returns the version string instead of printing it .", "question_id": 6621}, {"snippet": "tree_builder.data(data)", "intent": "Adds text to the current element . `data` is a string .", "question_id": 12542}, {"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "question_id": 5995}, {"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}, {"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}, {"snippet": "imp.cache_from_source(path)", "intent": "Return the PEP 3147 `path` to the byte-compiled file associated with the source path .", "question_id": 4767}, {"snippet": "process.terminate()", "intent": "Terminate the process .", "question_id": 6186}, {"snippet": "shlex.shlex(punctuation_chars=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `punctuation_chars` argument provides a way to make the behaviour even closer to how real shells parse .", "question_id": 8277}, {"snippet": "ssl.VerifyMode", "intent": "enum.IntEnum collection of CERT_* constants.", "question_id": 8914}, {"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}, {"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}, {"snippet": "Record.GetFieldCount()", "intent": "Return the number of fields of the record , through MsiRecordGetFieldCount ( ) .", "question_id": 6081}, {"snippet": "zlib.decompress(data, wbits=MAX_WBITS, bufsize=DEF_BUF_SIZE)", "intent": "Decompresses the bytes in `data` , returning a bytes object containing the uncompressed data . The `wbits` parameter depends on the format of data , and is discussed further below . If `bufsize` is given , it is used as the initial size of the output buffer .", "question_id": 12922}, {"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}, {"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}, {"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}, {"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}, {"snippet": "test.support.unload(name)", "intent": "Delete `name` from sys.modules .", "question_id": 10139}, {"snippet": "buffered_io_base.readinto1(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , using at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5097}, {"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}, {"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}, {"snippet": "CookieJar.make_cookies(response, request)", "intent": "Return sequence of Cookie objects extracted from `response` object . See the documentation for extract_cookies ( ) for the interfaces required of the response and `request` arguments .", "question_id": 4490}, {"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}, {"snippet": "coverage_results.write_results(coverdir=None)", "intent": "Write coverage results . `coverdir` specifies the directory into which the coverage result files will be output .", "question_id": 10728}, {"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}, {"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, preset=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5684}, {"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\", optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2795}, {"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}, {"snippet": "base_http_request_handler.headers", "intent": "Holds an instance of the class specified by the MessageClass class variable.", "question_id": 4624}, {"snippet": "time.CLOCK_MONOTONIC", "intent": "Clock that cannot be set and represents monotonic time since some unspecified starting point.", "question_id": 10465}, {"snippet": "os.path.samefile(path1, path2)", "intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "question_id": 7166}, {"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . With arguments `database`, `basedir`.", "question_id": 6092}, {"snippet": "fraction.limit_denominator(max_denominator=1000000)", "intent": "Finds and returns the closest Fraction to self that has denominator at most `max_denominator` .", "question_id": 3872}, {"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}, {"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}, {"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}, {"snippet": "str.ljust(width, fillchar)", "intent": "Return the string left justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9215}, {"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}, {"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}, {"snippet": "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4434}, {"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932}, {"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}, {"snippet": "sys.argv", "intent": "The list of command line arguments passed to a Python script.", "question_id": 9767}, {"snippet": "os.WNOHANG", "intent": "The option for waitpid() to return immediately if no child process status is available immediately.", "question_id": 7085}, {"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}, {"snippet": "window.chgat(y, x, attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2032}, {"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}, {"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}, {"snippet": "operator.xor(a, b)", "intent": "Return the bitwise exclusive or of `a` and `b` .", "question_id": 6566}, {"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}, {"snippet": "ArgumentParser.add_argument(name or flags..., action)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.", "question_id": 67}, {"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}, {"snippet": "loop.sock_connect(sock, address)", "intent": "Connect `sock` to a remote socket at `address` .", "question_id": 279}, {"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}, {"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}, {"snippet": "doctest.DocTestRunner()", "intent": "A processing class used to execute and verify the interactive examples in a DocTest .", "question_id": 2861}, {"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}, {"snippet": "sys.ps1", "intent": "Strings specifying the primary and secondary prompt of the interpreter.", "question_id": 9832}, {"snippet": "sync_manager.Namespace()", "intent": "Create a shared Namespace object and return a proxy for it .", "question_id": 6305}, {"snippet": "bdb.dispatch_line(frame)", "intent": "If the debugger should stop on the current line , invoke the user_line ( ) method ( which should be overridden in subclasses ) . With arguments `frame`.", "question_id": 773}, {"snippet": "inspect.isbuiltin(object)", "intent": "Return true if the `object` is a built-in function or a bound built-in method .", "question_id": 4962}, {"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}, {"snippet": "logging.basicConfig(**kwargs)", "intent": "Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger . With arguments `**kwargs`.", "question_id": 5649}, {"snippet": "tarfile.TarFile(format=DEFAULT_FORMAT)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . `format` controls the archive format .", "question_id": 9917}, {"snippet": "pool.imap_unordered(func, iterable)", "intent": "The same as imap ( ) except that the ordering of the results from the returned iterator should be considered arbitrary . With arguments `func`, `iterable`.", "question_id": 6349}, {"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}, {"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}, {"snippet": "readline.get_line_buffer()", "intent": "Return the current contents of the line buffer ( rl_line_buffer in the underlying library ) .", "question_id": 8018}, {"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}, {"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}, {"snippet": "turtle.position()", "intent": "Return the turtle \u2019 s current location ( x , y ) ( as a Vec2D vector ) .", "question_id": 10936}, {"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}, {"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}, {"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}, {"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}, {"snippet": "config_parser.items(section, raw=False)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1557}, {"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}, {"snippet": "r_lock.release()", "intent": "Release a lock , decrementing the recursion level .", "question_id": 6262}, {"snippet": "profile.Profile(builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "question_id": 7673}, {"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}, {"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}, {"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}, {"snippet": "test_result.tb_locals", "intent": "If set to true then local variables will be shown in tracebacks.", "question_id": 11517}, {"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}, {"snippet": "Wave_write.setcomptype(type, name)", "intent": "Set the compression `type` and description . With arguments `name`.", "question_id": 12069}, {"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}, {"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}, {"snippet": "window.addstr(y, x, str, attr)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2010}, {"snippet": "os.execle(path, arg0, arg1, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "question_id": 7010}, {"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}, {"snippet": "datetime.utcfromtimestamp(timestamp)", "intent": "Return the UTC datetime corresponding to the POSIX `timestamp` , with tzinfo None .", "question_id": 2263}, {"snippet": "pool.imap(func, iterable)", "intent": "A lazier version of map ( ) . With arguments `func`, `iterable`.", "question_id": 6347}, {"snippet": "asyncio.Protocol(BaseProtocol)", "intent": "The base class for implementing streaming protocols ( TCP , Unix sockets , etc ) . With arguments `BaseProtocol`.", "question_id": 427}, {"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}, {"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391}, {"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}, {"snippet": "xmlparser.ProcessingInstructionHandler(target, data)", "intent": "Called for every processing instruction . With arguments `target`, `data`.", "question_id": 7762}, {"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}, {"snippet": "mock.mock_calls", "intent": "mock_calls records all calls to the mock object, its methods, magic methods and return value mocks.", "question_id": 11595}, {"snippet": "html.unescape(s)", "intent": "Convert all named and numeric character references ( e.g . & gt ; , & # 62 ; , & # x3e ; ) in the string `s` to the corresponding Unicode characters .", "question_id": 4348}, {"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}, {"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}, {"snippet": "context.compare_total(x, y)", "intent": "Compares two operands using their abstract representation . With arguments `x`, `y`.", "question_id": 2522}, {"snippet": "faulthandler.dump_traceback_later(timeout)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True .", "question_id": 3722}, {"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}, {"snippet": "tarfile.TarFile(errors='surrogateescape')", "intent": "All following arguments are optional and can be accessed as instance attributes as well . If `errorlevel` is 0 , all `errors` are ignored when using TarFile.extract ( ) .", "question_id": 9922}, {"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126}, {"snippet": "platform.java_ver('', ''), '', ''))", "intent": "Version interface for Jython . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7485}, {"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584}, {"snippet": "element.text", "intent": "These attributes can be used to hold additional data associated with the element.", "question_id": 12480}, {"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}, {"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}, {"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}, {"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}, {"snippet": "os.environb", "intent": "Bytes version of environ: a mapping object representing the environment as byte strings.", "question_id": 6659}, {"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}, {"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}, {"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}, {"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}, {"snippet": "Repr.repr1(obj, level)", "intent": "Recursive implementation used by repr ( ) . This uses the type of `obj` to determine which formatting method to call , passing it obj and `level` .", "question_id": 8067}, {"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}, {"snippet": "SSLContext.wrap_socket(sock, server_side=False, server_hostname=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . On client connections , the optional parameter `server_hostname` specifies the hostname of the service which we are connecting to .", "question_id": 9030}, {"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}, {"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}, {"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}, {"snippet": "difflib.SequenceMatcher(isjunk=None, a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2674}, {"snippet": "email.header.Header(s=None, maxlinelen=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value . The maximum line length can be specified explicitly via `maxlinelen` .", "question_id": 3124}, {"snippet": "gzip.open(filename)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4272}, {"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}, {"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}, {"snippet": "imaplib.IMAP4_SSL(keyfile=None)", "intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . `keyfile` and `certfile` are a legacy alternative to ssl_context - they can point to PEM-formatted private key and certificate chain files for the SSL connection .", "question_id": 4679}, {"snippet": "doctest.REPORT_ONLY_FIRST_FAILURE", "intent": "When specified, display the first failing example in each doctest, but suppress output for all remaining examples.", "question_id": 2762}, {"snippet": "sync_manager.Array(typecode, sequence)", "intent": "Create an array and return a proxy for it . With arguments `typecode`, `sequence`.", "question_id": 6311}, {"snippet": "os.path.relpath(path)", "intent": "Return a relative filepath to `path` either from the current directory or from an optional `start` directory .", "question_id": 7164}, {"snippet": "bytes.upper()", "intent": "Return a copy of the sequence with all the lowercase ASCII characters converted to their corresponding uppercase counterpart .", "question_id": 9407}, {"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}, {"snippet": "base_request_handler.finish()", "intent": "Called after the handle ( ) method to perform any clean-up actions required .", "question_id": 8786}, {"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}, {"snippet": "cgitb.enable(logdir=None, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1067}, {"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}, {"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}, {"snippet": "gc.set_debug(flags)", "intent": "Set the garbage collection debugging `flags` .", "question_id": 4172}, {"snippet": "epoll.poll()", "intent": "Wait for events .", "question_id": 8187}, {"snippet": "context.logical_and(x, y)", "intent": "Applies the logical operation and between each operand \u2019 s digits . With arguments `x`, `y`.", "question_id": 2545}, {"snippet": "auto.errno", "intent": "A numeric error code from the C variable errno.", "question_id": 3654}, {"snippet": "writer.send_line_break()", "intent": "Break the current line .", "question_id": 3847}, {"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787}, {"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}, {"snippet": "test.support.bind_port(sock)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`.", "question_id": 10258}, {"snippet": "max(iterable, key, default)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4049}, {"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}, {"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402}, {"snippet": "warnings.filterwarnings(action, category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `category`.", "question_id": 12025}, {"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}, {"snippet": "writer.send_paragraph(blankline)", "intent": "Produce a paragraph separation of at least `blankline` blank lines , or the equivalent .", "question_id": 3848}, {"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}, {"snippet": "IMAP4.xatom(name)", "intent": "Allow simple extension commands notified by server in CAPABILITY response . With arguments `name`.", "question_id": 4752}, {"snippet": "doctest.DocTestRunner()", "intent": "A processing class used to execute and verify the interactive examples in a DocTest .", "question_id": 2861}, {"snippet": "urllib.request.getproxies()", "intent": "This helper function returns a dictionary of scheme to proxy server URL mappings .", "question_id": 11767}, {"snippet": "sched.scheduler(delayfunc=time.sleep)", "intent": "The scheduler class defines a generic interface to scheduling events . The `delayfunc` function should be callable with one argument , compatible with the output of timefunc , and should delay that many time units .", "question_id": 8116}, {"snippet": "warnings.filterwarnings(action, category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `category`.", "question_id": 12025}, {"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}, {"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}, {"snippet": "turtle.bgpic()", "intent": "Set background image or return name of current backgroundimage .", "question_id": 11041}, {"snippet": "queue_listener.getChild(suffix)", "intent": "Returns a logger which is a descendant to this logger , as determined by the `suffix` .", "question_id": 5569}, {"snippet": "loop.create_server(protocol_factory)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`.", "question_id": 232}, {"snippet": "formatter.assert_line_data(flag=1)", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .", "question_id": 3837}, {"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}, {"snippet": "decimal.number_class(context=None)", "intent": "Return a string describing the class of the operand . With arguments `context`.", "question_id": 2460}, {"snippet": "Repr.repr_TYPE(obj, level)", "intent": "Formatting methods for specific types are implemented as methods with a name based on the type name . In the method name , TYPE is replaced by ' _'.join ( type ( `obj` ) .__name__.split ( ) ) . Type-specific methods which need to recursively format a value should call self.repr1 ( subobj , `level` - 1 ) .", "question_id": 8068}, {"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}, {"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}, {"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}, {"snippet": "set - other - ...", "intent": "Return a new set with elements in the set that are not in the others.", "question_id": 9450}, {"snippet": "re.search(pattern, string, flags=0)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object . With arguments `flags`.", "question_id": 7938}, {"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}, {"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042}, {"snippet": "HTTPConnection.request(method, url, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4430}, {"snippet": "finder.find_module(fullname, path=None)", "intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`, `path`.", "question_id": 4801}, {"snippet": "weakref.getweakrefcount(object)", "intent": "Return the number of weak references and proxies which refer to `object` .", "question_id": 12079}, {"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}, {"snippet": "socket.recvmsg_into(buffers)", "intent": "Receive normal data and ancillary data from the socket , behaving as recvmsg ( ) would , but scatter the non-ancillary data into a series of `buffers` instead of returning a new bytes object .", "question_id": 8710}, {"snippet": "POP3.list()", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) .", "question_id": 7610}, {"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}, {"snippet": "os.utime(path, ns, follow_symlinks=True)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `follow_symlinks`.", "question_id": 6962}, {"snippet": "test_case.id()", "intent": "Return a string identifying the specific test case .", "question_id": 11469}, {"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}, {"snippet": "HTTPDigestAuthHandler.http_error_401(req, fp, code, msg, hdrs)", "intent": "Retry the request with authentication information , if available . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11869}, {"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}, {"snippet": "Decompress.unused_data", "intent": "A bytes object which contains any bytes past the end of the compressed data.", "question_id": 12931}, {"snippet": "io_base.seek(offset)", "intent": "Change the stream position to the given byte `offset` .", "question_id": 5074}, {"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}, {"snippet": "datetime.datetime(year, month, day, hour=0, microsecond=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `microsecond`.", "question_id": 2256}, {"snippet": "window.border()", "intent": "Draw a border around the edges of the window .", "question_id": 2027}, {"snippet": "os.pwrite(fd, str, offset)", "intent": "Write the bytestring in `str` to file descriptor `fd` at position of `offset` , leaving the file offset unchanged .", "question_id": 6788}, {"snippet": "test.support.check_free_after_iterating(test, iter, cls, args=())", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`, `args`.", "question_id": 10272}, {"snippet": "sys._getframe()", "intent": "Return a frame object from the call stack .", "question_id": 9806}, {"snippet": "audioop.cross(fragment, width)", "intent": "Return the number of zero crossings in the `fragment` passed as an argument . With arguments `width`.", "question_id": 687}, {"snippet": "subprocess.check_call(args, stderr=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9672}, {"snippet": "element_tree.write(file, default_namespace=None)", "intent": "Writes the element tree to a `file` , as XML . `default_namespace` sets the default XML namespace ( for \u201c xmlns \u201d ) .", "question_id": 12530}, {"snippet": "urllib.parse.DefragResult(url, fragment)", "intent": "Concrete class for urldefrag ( ) results containing str data . With arguments `url`, `fragment`.", "question_id": 11699}, {"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}, {"snippet": "TarFile.open()", "intent": "Alternative constructor .", "question_id": 9923}, {"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}, {"snippet": "ArgumentParser.add_mutually_exclusive_group()", "intent": "Create a mutually exclusive group .", "question_id": 99}, {"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}, {"snippet": "xml.sax.SAXException(msg)", "intent": "Encapsulate an XML error or warning . When instantiated , `msg` should be a human-readable description of the error .", "question_id": 12597}, {"snippet": "Path.resolve(strict=False)", "intent": "Make the path absolute , resolving any symlinks . If the path doesn \u2019 t exist and `strict` is True , FileNotFoundError is raised .", "question_id": 7311}, {"snippet": "mock.mock_add_spec(spec)", "intent": "Add a `spec` to a mock .", "question_id": 11582}, {"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}, {"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}, {"snippet": "multiprocessing.managers.BaseManager(address)", "intent": "Create a BaseManager object . `address` is the address on which the manager process listens for new connections .", "question_id": 6280}, {"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}, {"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . ( Note _exit ( ) exits the process immediately , which means it doesn \u2019 t do any cleanup like flushing `file` buffers . ) If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3729}, {"snippet": "asyncio.Lock(loop=None)", "intent": "Implements a mutex lock for asyncio tasks . With arguments `loop`.", "question_id": 559}, {"snippet": "socket.getdefaulttimeout()", "intent": "Return the default timeout in seconds ( float ) for new socket objects .", "question_id": 8667}, {"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}, {"snippet": "xml.sax.xmlreader.InputSource(system_id=None)", "intent": "Encapsulation of the information needed by the XMLReader to read entities . With arguments `system_id`.", "question_id": 12610}, {"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055}, {"snippet": "tarfile.DEFAULT_FORMAT", "intent": "The default format for creating archives.", "question_id": 9912}, {"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}, {"snippet": "LookupError", "intent": "The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: IndexError, KeyError.", "question_id": 3634}, {"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}, {"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}, {"snippet": "context.log10(x)", "intent": "Returns the base 10 logarithm of `x` .", "question_id": 2543}, {"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}, {"snippet": "completed_process.args", "intent": "The arguments used to launch the process.", "question_id": 9578}, {"snippet": "NNTP.newgroups(date, file=None)", "intent": "Send a NEWGROUPS command . The `date` argument should be a datetime.date or datetime.datetime object . If `file` is supplied , though , then groups will be empty .", "question_id": 6462}, {"snippet": "errno.ETOOMANYREFS", "intent": "Too many references: cannot splice", "question_id": 3614}, {"snippet": "doctest.DocTestSuite(test_finder=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `test_finder` is the DocTestFinder object ( or a drop-in replacement ) that is used to extract doctests from the module .", "question_id": 2810}, {"snippet": "platform.python_branch()", "intent": "Returns a string identifying the Python implementation SCM branch .", "question_id": 7475}, {"snippet": "xmlparser.CommentHandler(data)", "intent": "Called for comments . `data` is the text of the comment , excluding the leading ' < ! -- ' and trailing ' -- > ' .", "question_id": 7769}, {"snippet": "codecs.BOM_BE", "intent": "These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "question_id": 1244}, {"snippet": "path_finder.find_spec(fullname)", "intent": "Class method that attempts to find a spec for the module specified by `fullname` on sys.path or , if defined , on `path` .", "question_id": 4875}, {"snippet": "Option.TYPE_CHECKER", "intent": "A dictionary mapping type names to type-checking functions.", "question_id": 6650}, {"snippet": "InteractiveInterpreter.runsource(source)", "intent": "Compile and run some `source` in the interpreter .", "question_id": 1175}, {"snippet": "struct.calcsize(format)", "intent": "Return the size of the struct ( and hence of the bytes object produced by pack ( `format` , ... ) ) corresponding to the format string format .", "question_id": 9557}, {"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}, {"snippet": "selector_key.data", "intent": "Optional opaque data associated to this file object: for example, this could be used to store a per-client session ID.", "question_id": 8213}, {"snippet": "tempfile.mkstemp(text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10075}, {"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}, {"snippet": "Queue.put(item, block=True)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7850}, {"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268}, {"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}, {"snippet": "test_case.assertMultiLineEqual(first, second)", "intent": "Test that the multiline string `first` is equal to the string `second` .", "question_id": 11448}, {"snippet": "struct.pack_into(format, buffer, offset, v1, v2)", "intent": "Pack the values `v1` , `v2` , \u2026 according to the `format` string format and write the packed bytes into the writable `buffer` buffer starting at position `offset` .", "question_id": 9552}, {"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}, {"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}, {"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}, {"snippet": "base_http_request_handler.end_headers()", "intent": "Adds a blank line ( indicating the end of the HTTP headers in the response ) to the headers buffer and calls flush_headers ( ) .", "question_id": 4646}, {"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}, {"snippet": "urllib.request.urlretrieve(url)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11881}, {"snippet": "functools.partial(func, *args, **keywords)", "intent": "Return a new partial object which when called will behave like `func` called with the positional arguments args and keyword arguments keywords . With arguments `*args`, `**keywords`.", "question_id": 4151}, {"snippet": "Option.callback_kwargs", "intent": "Additional positional and keyword arguments to pass to callback after the four standard callback arguments.", "question_id": 6635}, {"snippet": "stat.ST_ATIME", "intent": "Time of last access.", "question_id": 9081}, {"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}, {"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}, {"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}, {"snippet": "warnings.simplefilter(action, category=Warning, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`, `lineno`, `append`.", "question_id": 12040}, {"snippet": "window.chgat(y, x, attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2032}, {"snippet": "os.WEXITSTATUS(status)", "intent": "If WIFEXITED ( `status` ) is true , return the integer parameter to the exit ( 2 ) system call .", "question_id": 7093}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}, {"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}, {"snippet": "termios.tcflush(fd, queue)", "intent": "Discard queued data on file descriptor `fd` . The `queue` selector specifies which queue : TCIFLUSH for the input queue , TCOFLUSH for the output queue , or TCIOFLUSH for both queues .", "question_id": 10106}, {"snippet": "test.support.check__all__(test_case, module, name_of_module=None, blacklist=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `name_of_module` argument can specify ( as a string or tuple thereof ) what module ( s ) an API could be defined in order to be detected as a public API . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "question_id": 10282}, {"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}, {"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}, {"snippet": "tempfile.mkstemp()", "intent": "Creates a temporary file in the most secure manner possible .", "question_id": 10071}, {"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "threading.Semaphore(value=1)", "intent": "This class implements semaphore objects . A semaphore manages an atomic counter representing the number of release ( ) calls minus the number of acquire ( ) calls , plus an initial `value` .", "question_id": 10398}, {"snippet": "env_builder.create(env_dir)", "intent": "Create a virtual environment by specifying the target directory ( absolute or relative to the current directory ) which is to contain the virtual environment . With arguments `env_dir`.", "question_id": 11982}, {"snippet": "condition.notify_all()", "intent": "Wake up all tasks waiting on this condition .", "question_id": 577}, {"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}, {"snippet": "typing.FrozenSet(frozenset)", "intent": "A generic version of builtins.frozenset . With arguments `frozenset`.", "question_id": 11275}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}, {"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, timeout=1.0)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . A `timeout` can be specified for communication with the SMTP server using the timeout argument . With arguments `fromaddr`.", "question_id": 5518}, {"snippet": "os.EX_CONFIG", "intent": "Exit code that means that some kind of configuration error occurred.", "question_id": 7033}, {"snippet": "sndhdr.what(filename)", "intent": "Determines the type of sound data stored in the file `filename` using whathdr ( ) .", "question_id": 8549}, {"snippet": "ctypes.PyDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`, `mode`.", "question_id": 1771}, {"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}, {"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}, {"snippet": "pool.apply_async(func, args, kwds, callback)", "intent": "A variant of the apply ( ) method which returns a result object . If `callback` is specified then it should be a callable which accepts a single argument . With arguments `func`, `args`, `kwds`.", "question_id": 6336}, {"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}, {"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123}, {"snippet": "wsgiref.handlers.read_environ()", "intent": "Transcode CGI variables from os.environ to PEP 3333 \u201c bytes in unicode \u201d strings , returning a new dictionary .", "question_id": 12270}, {"snippet": "os.fchmod(fd, mode)", "intent": "Change the `mode` of the file given by `fd` to the numeric mode .", "question_id": 6719}, {"snippet": "types.MethodDescriptorType", "intent": "The type of methods of some built-in data types such as str.join().", "question_id": 11194}, {"snippet": "Panel.below()", "intent": "Returns the panel below the current panel .", "question_id": 2146}, {"snippet": "collections.deque(iterable, maxlen)", "intent": "Returns a new deque object initialized left-to-right ( using append ( ) ) with data from `iterable` . If `maxlen` is not specified or is None , deques may grow to an arbitrary length .", "question_id": 1350}, {"snippet": "uu.encode(in_file, out_file)", "intent": "Uuencode file `in_file` into file `out_file` .", "question_id": 11917}, {"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857}, {"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}, {"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}, {"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}, {"snippet": "tracemalloc.take_snapshot()", "intent": "Take a snapshot of traces of memory blocks allocated by Python .", "question_id": 10850}, {"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}, {"snippet": "traceback.print_exception(etype, value, tb, limit=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10738}, {"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}, {"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}, {"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}, {"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}, {"snippet": "wave.open(file, mode=None)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a file-like object . `mode` can be :", "question_id": 12047}, {"snippet": "DefaultCookiePolicy.blocked_domains()", "intent": "Return the sequence of blocked domains ( as a tuple ) .", "question_id": 4539}, {"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}, {"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}, {"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}, {"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}, {"snippet": "email.message_from_bytes(s, policy=policy.compat32)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) . Optional `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3398}, {"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}, {"snippet": "wsgiref.simple_server.demo_app(environ, start_response)", "intent": "This function is a small but complete WSGI application that returns a text page containing the message \u201c Hello world ! \u201d and a list of the key/value pairs provided in the `environ` parameter . With arguments `start_response`.", "question_id": 12227}, {"snippet": "os.WIFSTOPPED(status)", "intent": "Return True if the process has been stopped , otherwise return False . With arguments `status`.", "question_id": 7090}, {"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}, {"snippet": "pickle.dumps(obj)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file .", "question_id": 7367}, {"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}, {"snippet": "shelve.Shelf(dict)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object .", "question_id": 8244}, {"snippet": "widget.step()", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10617}, {"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}, {"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560}, {"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}, {"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}, {"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}, {"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}, {"snippet": "dis.Bytecode(x)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . With arguments `x`.", "question_id": 2695}, {"snippet": "loop.sendfile(transport, file, offset=0)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file .", "question_id": 257}, {"snippet": "partial.args", "intent": "The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.", "question_id": 4165}, {"snippet": "os.SCHED_IDLE", "intent": "Scheduling policy for extremely low priority background tasks.", "question_id": 7098}, {"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}, {"snippet": "ctypes.util.find_library(name)", "intent": "Try to find a library and return a pathname . `name` is the library name without any prefix like lib , suffix like .so , .dylib or version number ( this is the form used for the posix linker option -l ) .", "question_id": 1739}, {"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}, {"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}, {"snippet": "window.addstr(str, attr)", "intent": "Paint the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2008}, {"snippet": "Path.is_file()", "intent": "Return True if the path points to a regular file ( or a symbolic link pointing to a regular file ) , False if it points to another kind of file .", "question_id": 7274}, {"snippet": "wave.open(file, mode=None)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a file-like object . `mode` can be :", "question_id": 12047}, {"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}, {"snippet": "xmlparser.ErrorLineNumber", "intent": "Line number at which an error occurred.", "question_id": 7751}, {"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}, {"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859}, {"snippet": "doctest.Example(source, want, lineno=0, indent=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `lineno`, `indent`.", "question_id": 2832}, {"snippet": "socket.SOL_ALG", "intent": "Constants for Linux Kernel cryptography.", "question_id": 8600}, {"snippet": "config_parser.sections()", "intent": "Return a list of the sections available ; the default section is not included in the list .", "question_id": 1507}, {"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}, {"snippet": "os.path.supports_unicode_filenames", "intent": "True if arbitrary Unicode strings can be used as file names (within limitations imposed by the file system).", "question_id": 7172}, {"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`.", "question_id": 65}, {"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}, {"snippet": "argval", "intent": "resolved arg value (if known), otherwise same as arg", "question_id": 2737}, {"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}, {"snippet": "Token.MISSING", "intent": "A marker object used by Token.old_value.", "question_id": 1647}, {"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}, {"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}, {"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12240}, {"snippet": "urllib.request.URLopener(**x509, proxies=None)", "intent": "Base class for opening and reading URLs . The optional `proxies` parameter should be a dictionary mapping scheme names to proxy URLs , where an empty dictionary turns proxies off completely . With arguments `**x509`.", "question_id": 11891}, {"snippet": "context.sqrt(x)", "intent": "Square root of a non-negative number to context precision . With arguments `x`.", "question_id": 2571}, {"snippet": "copy.error", "intent": "Raised for module specific errors.", "question_id": 1664}, {"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "scheduler.run(blocking=True)", "intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "question_id": 8129}, {"snippet": "urllib.request.AbstractDigestAuthHandler()", "intent": "This is a mixin class that helps with HTTP authentication , both to the remote host and to a proxy .", "question_id": 11795}, {"snippet": "base64.a85encode(b, foldspaces=False, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 732}, {"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2658}, {"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}, {"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}, {"snippet": "xml.sax.handler.all_properties", "intent": "List of all known property names.", "question_id": 12569}, {"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}, {"snippet": "ast.parse(source, filename='<unknown>')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 146}, {"snippet": "@abc.abstractmethod", "intent": "A decorator indicating abstract methods.", "question_id": 4}, {"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}, {"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}, {"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}, {"snippet": "ProcessingInstruction.target", "intent": "The content of the processing instruction up to the first whitespace character.", "question_id": 12378}, {"snippet": "sysconfig.is_python_build()", "intent": "Return True if the running Python interpreter was built from source and is being run from its built location , and not from a location resulting from e.g .", "question_id": 9872}, {"snippet": "TarFile.list(verbose=True, members=None)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9930}, {"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}, {"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}, {"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}, {"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}, {"snippet": "email.mime.text.MIMEText(_text, _subtype='plain', _charset=None)", "intent": "Module : email.mime.text `_text` is the string for the payload . `_subtype` is the minor type and defaults to plain . `_charset` is the character set of the text and is passed as an argument to the MIMENonMultipart constructor ; it defaults to us-ascii if the string contains only ascii code points , and utf-8 otherwise .", "question_id": 3358}, {"snippet": "ast.iter_fields(node)", "intent": "Yield a tuple of ( fieldname , value ) for each field in node._fields that is present on `node` .", "question_id": 156}, {"snippet": "config_parser.getint(section, option, fallback, raw=False, vars=None)", "intent": "A convenience method which coerces the `option` in the specified `section` to an integer . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "question_id": 1531}, {"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}, {"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}, {"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}, {"snippet": "json.dumps(obj, **kw, separators=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `separators`.", "question_id": 5287}, {"snippet": "str.startswith(prefix)", "intent": "Return True if string starts with the `prefix` , otherwise return False .", "question_id": 9249}, {"snippet": "bz2_compressor.compress(data)", "intent": "Provide `data` to the compressor object .", "question_id": 898}, {"snippet": "base_http_request_handler.send_header(keyword, value)", "intent": "Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers ( ) or flush_headers ( ) is invoked . `keyword` should specify the header keyword , with `value` specifying its value .", "question_id": 4643}, {"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014}, {"snippet": "mailbox.update(arg)", "intent": "Parameter `arg` should be a key-to-message mapping or an iterable of ( key , message ) pairs .", "question_id": 5749}, {"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}, {"snippet": "xml.parsers.expat.model.XML_CQUANT_OPT", "intent": "The model is optional: it can appear once or not at all, as for A?.", "question_id": 7784}, {"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}, {"snippet": "json.load(fp, **kw, cls=None, parse_float=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "question_id": 5298}, {"snippet": "timeit.timeit(number=1000000)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10480}, {"snippet": "cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b . `abs_tol` is the minimum absolute tolerance \u2013 useful for comparisons near zero .", "question_id": 1119}, {"snippet": "profile.Profile()", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides .", "question_id": 7669}, {"snippet": "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`, `encoding`.", "question_id": 5451}, {"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}, {"snippet": "urllib.request.urlopen(url, context=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .", "question_id": 11757}, {"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}, {"snippet": "POP3.list(which)", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) . If `which` is set , it is the message to list .", "question_id": 7609}, {"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281}, {"snippet": "_c_data.in_dll(library, name)", "intent": "This method returns a ctypes type instance exported by a shared `library` . `name` is the name of the symbol that exports the data , library is the loaded shared library .", "question_id": 1849}, {"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}, {"snippet": "window.resize(nlines, ncols)", "intent": "Reallocate storage for a curses window to adjust its dimensions to the specified values . With arguments `nlines`, `ncols`.", "question_id": 2108}, {"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}, {"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5495}, {"snippet": "HTTPConnection.request(method, url, body=None, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4431}, {"snippet": "async_result.get()", "intent": "Return the result when it arrives .", "question_id": 6361}, {"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}, {"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}, {"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}, {"snippet": "turtle.distance(x, y=None)", "intent": "Return the distance from the turtle to ( `x` , `y` ) , the given vector , or the given other turtle , in turtle step units .", "question_id": 10944}, {"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}, {"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}, {"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}, {"snippet": "credits", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1613}, {"snippet": "base64.b85encode(b)", "intent": "Encode the bytes-like object `b` using base85 ( as used in e.g .", "question_id": 744}, {"snippet": "datetime.tzinfo", "intent": "An abstract base class for time zone information objects.", "question_id": 2202}, {"snippet": "email.utils.encode_rfc2231(s, charset=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3480}, {"snippet": "mock.mock_add_spec(spec, spec_set=False)", "intent": "Add a `spec` to a mock . If `spec_set` is true then only attributes on the spec can be set .", "question_id": 11583}, {"snippet": "contextlib.ContextDecorator", "intent": "A base class that enables a context manager to also be used as a decorator.", "question_id": 1625}, {"snippet": "email.generator.Generator(outfp)", "intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3092}, {"snippet": "mbox.get_file(key)", "intent": "Using the file after calling flush ( ) or close ( ) on the mbox instance may yield unpredictable results or raise an exception . With arguments `key`.", "question_id": 5772}, {"snippet": "stat.ST_ATIME", "intent": "Time of last access.", "question_id": 9081}, {"snippet": "message.set_payload(payload)", "intent": "Set the entire message object \u2019 s `payload` to payload .", "question_id": 2960}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}, {"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}, {"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}, {"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}, {"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}, {"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}, {"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}, {"snippet": "json.JSONDecoder(object_hook=None)", "intent": "Simple JSON decoder . `object_hook` , if specified , will be called with the result of every JSON object decoded and its return value will be used in place of the given dict .", "question_id": 5311}, {"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}, {"snippet": "pkgutil.walk_packages(path=None, prefix='')", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "question_id": 7453}, {"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401}, {"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}, {"snippet": "NNTP.newnews(group, date, file=None)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) . With arguments `file`.", "question_id": 6464}, {"snippet": "stat.S_IFLNK", "intent": "Symbolic link.", "question_id": 9085}, {"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}, {"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}, {"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}, {"snippet": "stream_reader.readuntil()", "intent": "Read data from the stream until `separator` is found .", "question_id": 508}, {"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}, {"snippet": "zlib.compress(data)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data .", "question_id": 12895}, {"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}, {"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}, {"snippet": "base_manager.register(typeid, callable)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object .", "question_id": 6292}, {"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}, {"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}, {"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}, {"snippet": "Wave_read.getmark(id)", "intent": "Raise an error . With arguments `id`.", "question_id": 12061}, {"snippet": "curses.ascii.isblank(c)", "intent": "Checks for an ASCII whitespace character ; space or horizontal tab . With arguments `c`.", "question_id": 1902}, {"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}, {"snippet": "imp.get_tag()", "intent": "Return the PEP 3147 magic tag string matching this version of Python \u2019 s magic number , as returned by get_magic ( ) .", "question_id": 4770}, {"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}, {"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}, {"snippet": "extension_file_loader.create_module(spec)", "intent": "Creates the module object from the given specification in accordance with PEP 489 . With arguments `spec`.", "question_id": 4906}, {"snippet": "window.insch(y, x, ch)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , moving the line from position x right by one character .", "question_id": 2074}, {"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}, {"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}, {"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}, {"snippet": "CookiePolicy.domain_return_ok(domain, request)", "intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "question_id": 4534}, {"snippet": "site.PREFIXES", "intent": "A list of prefixes for site-packages directories.", "question_id": 8402}, {"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}, {"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}, {"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}, {"snippet": "statistic_diff.count", "intent": "Number of memory blocks in the new snapshot (int): 0 if the memory blocks have been released in the new snapshot.", "question_id": 10885}, {"snippet": "AttributesNS.getNameByQName(name)", "intent": "Return the ( namespace , localname ) pair for a qualified `name` .", "question_id": 12649}, {"snippet": "tokenize.open(filename)", "intent": "Open a file in read only mode using the encoding detected by detect_encoding ( ) . With arguments `filename`.", "question_id": 10704}, {"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}, {"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}, {"snippet": "turtle.screensize(canvwidth=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `bg`.", "question_id": 11052}, {"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}, {"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}, {"snippet": "dis.distb()", "intent": "Disassemble the top-of-stack function of a traceback , using the last traceback if none was passed .", "question_id": 2715}, {"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}, {"snippet": "ArgumentParser.add_mutually_exclusive_group()", "intent": "Create a mutually exclusive group .", "question_id": 99}, {"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}, {"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}, {"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}, {"snippet": "difflib.Differ(linejunk=None, charjunk=None)", "intent": "Optional keyword parameters `linejunk` and `charjunk` are for filter functions ( or None ) :", "question_id": 2693}, {"snippet": "getpass.getpass(prompt='Password: ', stream=None)", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' . On Unix , the prompt is written to the file-like object `stream` using the replace error handler if needed .", "question_id": 4207}, {"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}, {"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}, {"snippet": "curses.doupdate()", "intent": "Update the physical screen .", "question_id": 1930}, {"snippet": "super(type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4126}, {"snippet": "sys.base_exec_prefix", "intent": "Set during Python startup, before site.py is run, to the same value as exec_prefix.", "question_id": 9768}, {"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}, {"snippet": "multiprocessing.get_all_start_methods()", "intent": "Returns a list of the supported start methods , the first of which is the default .", "question_id": 6223}, {"snippet": "numbers.Number", "intent": "The root of the numeric hierarchy.", "question_id": 6503}, {"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}, {"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}, {"snippet": "NNTP.help(file=None)", "intent": "Send a HELP command . With arguments `file`.", "question_id": 6475}, {"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}, {"snippet": "curses.ascii.controlnames", "intent": "A 33-element string array that contains the ASCII mnemonics for the thirty-two ASCII control characters from 0 (NUL) to 0x1f (US), in order, plus the mnemonic SP for the space character.", "question_id": 1918}, {"snippet": "os.WIFEXITED(status)", "intent": "Return True if the process exited using the exit ( 2 ) system call , otherwise return False . With arguments `status`.", "question_id": 7092}, {"snippet": "test.support.open_urlresource(url, *args, **kw)", "intent": "Open `url` . With arguments `*args`, `**kw`.", "question_id": 10239}, {"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}, {"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}, {"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}, {"snippet": "kevent.fflags", "intent": "Filter specific flags.", "question_id": 8206}, {"snippet": "raw_io_base.readall()", "intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "question_id": 5086}, {"snippet": "multiprocessing.Barrier(parties)", "intent": "A barrier object : a clone of threading.Barrier . With arguments `parties`.", "question_id": 6245}, {"snippet": "typing.get_type_hints(obj, globals, locals)", "intent": "Return a dictionary containing type hints for a function , method , module or class object . In addition , forward references encoded as string literals are handled by evaluating them in `globals` and `locals` namespaces . With arguments `obj`.", "question_id": 11324}, {"snippet": "logging.handlers.DatagramHandler(host, port)", "intent": "Returns a new instance of the DatagramHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5490}, {"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}, {"snippet": "webbrowser.register(name, constructor, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12112}, {"snippet": "mailcap.getcaps()", "intent": "Returns a dictionary mapping MIME types to a list of mailcap file entries .", "question_id": 5877}, {"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}, {"snippet": "completed_process.stderr", "intent": "Stderr output of the child process if it was captured by run().", "question_id": 9598}, {"snippet": "set.update(*others)", "intent": "Update the set , adding elements from all others . With arguments `*others`.", "question_id": 9454}, {"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}, {"snippet": "socket.close()", "intent": "Mark the socket closed .", "question_id": 8675}, {"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}, {"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439}, {"snippet": "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 758}, {"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}, {"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}, {"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}, {"snippet": "collections.OrderedDict()", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order .", "question_id": 1390}, {"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358}, {"snippet": "signal.SIG_IGN", "intent": "This is another standard signal handler, which will simply ignore the given signal.", "question_id": 8374}, {"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}, {"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1706}, {"snippet": "shutil.copytree(src, dst, ignore=None, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8331}, {"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705}, {"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}, {"snippet": "subprocess.BELOW_NORMAL_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have a below average priority.", "question_id": 9650}, {"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}, {"snippet": "bz2.open(filename, mode='r', newline=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 885}, {"snippet": "BaseTransport.get_extra_info(name, default=None)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get . `default` is the value to return if the information is not available , or if the transport does not support querying it with the given third-party event loop implementation or on the current platform .", "question_id": 399}, {"snippet": "text_io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given `offset` . Behaviour depends on the `whence` parameter .", "question_id": 5143}, {"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}, {"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}, {"snippet": "UUID.int", "intent": "The UUID as a 128-bit integer.", "question_id": 11951}, {"snippet": "Popen.wait()", "intent": "Wait for child process to terminate .", "question_id": 9610}, {"snippet": "statistics.median_high(data)", "intent": "Return the high median of `data` .", "question_id": 9129}, {"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}, {"snippet": "async_chat.found_terminator()", "intent": "Called when the incoming data stream matches the termination condition set by set_terminator ( ) .", "question_id": 173}, {"snippet": "json.JSONDecoder(parse_float=None)", "intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5312}, {"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}, {"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}, {"snippet": "cmath.nan", "intent": "A floating-point \u201cnot a number\u201d (NaN) value.", "question_id": 1125}, {"snippet": "asyncio.start_server(client_connected_cb, ssl=None)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `ssl`.", "question_id": 482}, {"snippet": "operator.methodcaller(name, args...)", "intent": "Return a callable object that calls the method `name` on its operand . With arguments `args...`.", "question_id": 6586}, {"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}, {"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}, {"snippet": "mailcap.findmatch(caps, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5872}, {"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}, {"snippet": "test.support.reap_children()", "intent": "Use this at the end of test_main whenever sub-processes are started .", "question_id": 10256}, {"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}, {"snippet": "bdb.get_bpbynumber(arg)", "intent": "Return a breakpoint specified by the given number . If `arg` is a string , it will be converted to a number .", "question_id": 799}, {"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}, {"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}, {"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}, {"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}, {"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}, {"snippet": "turtle.down()", "intent": "Pull the pen down \u2013 drawing when moving .", "question_id": 10950}, {"snippet": "is_jump_target", "intent": "True if other code jumps to here, otherwise False", "question_id": 2741}, {"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}, {"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859}, {"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}, {"snippet": "Telnet.interact()", "intent": "Interaction function , emulates a very dumb Telnet client .", "question_id": 10028}, {"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`.", "question_id": 10854}, {"snippet": "random.choices(population, weights=None, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7899}, {"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}, {"snippet": "xmlparser.specified_attributes", "intent": "If set to a non-zero integer, the parser will report only those attributes which were specified in the document instance and not those which were derived from attribute declarations.", "question_id": 7747}, {"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}, {"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}, {"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}, {"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196}, {"snippet": "lzma_decompressor.eof", "intent": "True if the end-of-stream marker has been reached.", "question_id": 5701}, {"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}, {"snippet": "chunk.close()", "intent": "Close and skip to the end of the chunk .", "question_id": 1085}, {"snippet": "decimal.quantize(exp, rounding=None)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2462}, {"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}, {"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}, {"snippet": "csv.register_dialect(name, dialect)", "intent": "Associate `dialect` with `name` .", "question_id": 1685}, {"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}, {"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}, {"snippet": "test.support.MISSING_C_DOCSTRINGS", "intent": "Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS.", "question_id": 10132}, {"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}, {"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}, {"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, all_frames: bool=False)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `all_frames: bool`.", "question_id": 10856}, {"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}, {"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}, {"snippet": "asyncio.iscoroutinefunction(func)", "intent": "Return True if `func` is a coroutine function .", "question_id": 646}, {"snippet": "somenamedtuple._make(iterable)", "intent": "Class method that makes a new instance from an existing sequence or `iterable` .", "question_id": 1384}, {"snippet": "resource.RLIMIT_FSIZE", "intent": "The maximum size of a file which the process may create.", "question_id": 8077}, {"snippet": "test.support.unix_shell", "intent": "Path for shell if not on Windows; otherwise None.", "question_id": 10113}, {"snippet": "Panel.hide()", "intent": "Hide the panel .", "question_id": 2149}, {"snippet": "header.__ne__(other)", "intent": "This method allows you to compare two Header instances for inequality . With arguments `other`.", "question_id": 3140}, {"snippet": "doctest.DocTestParser", "intent": "A processing class used to extract interactive examples from a string, and use them to create a DocTest object.", "question_id": 2855}, {"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}, {"snippet": "operator.__iadd__(a, b)", "intent": "`a` = iadd ( a , `b` ) is equivalent to a += b .", "question_id": 6589}, {"snippet": "bz2.open(filename, mode='r', newline=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 885}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}, {"snippet": "dbm.gnu.error", "intent": "Raised on dbm.gnu-specific errors, such as I/O errors.", "question_id": 2370}, {"snippet": "struct.unpack(format, buffer)", "intent": "Unpack from the `buffer` buffer ( presumably packed by pack ( `format` , ... ) ) according to the format string format .", "question_id": 9553}, {"snippet": "zlib.compressobj(strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `strategy` is used to tune the compression algorithm .", "question_id": 12912}, {"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\")", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`, `subtype`.", "question_id": 3040}, {"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}, {"snippet": "element.findtext(match, default=None, namespaces=None)", "intent": "Finds text for the first subelement matching `match` . Returns the text content of the first matching element , or `default` if no element was found . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12498}, {"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}, {"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}, {"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}, {"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}, {"snippet": "text_wrapper.fill(text)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph .", "question_id": 10340}, {"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}, {"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}, {"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}, {"snippet": "_thread.error", "intent": "Raised on thread-specific errors.", "question_id": 12941}, {"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}, {"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}, {"snippet": "meta_path_finder.find_module(fullname, path)", "intent": "A legacy method for finding a loader for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "question_id": 4805}, {"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}, {"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}, {"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}, {"snippet": "test_case.longMessage", "intent": "This class attribute determines what happens when a custom failure message is passed as the msg argument to an assertXYY call that fails.", "question_id": 11465}, {"snippet": "TarFile.list()", "intent": "Print a table of contents to sys.stdout .", "question_id": 9927}, {"snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7366}, {"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}, {"snippet": "auto.args", "intent": "The tuple of arguments given to the exception constructor.", "question_id": 3629}, {"snippet": "Pattern.findall(string, pos, endpos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7981}, {"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}, {"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}, {"snippet": "http.client.HTTPResponse(sock, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `url`.", "question_id": 4405}, {"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}, {"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}, {"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}, {"snippet": "dbm.open(file, mode=0o666)", "intent": "Open the database `file` file and return a corresponding object . The optional `mode` argument is the Unix mode of the file , used only when the database has to be created .", "question_id": 2368}, {"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}, {"snippet": "struct.Struct(format)", "intent": "Return a new Struct object which writes and reads binary data according to the `format` string format .", "question_id": 9558}, {"snippet": "re.ASCII", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7925}, {"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}, {"snippet": "decimal.logical_xor(other)", "intent": "logical_xor ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2441}, {"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629}, {"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}, {"snippet": "xml.sax.make_parser(parser_list=)", "intent": "Create and return a SAX XMLReader object . If `parser_list` is provided , it must be a list of strings which name modules that have a function named create_parser ( ) .", "question_id": 12590}, {"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401}, {"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}, {"snippet": "CookieJar.clear(domain, path, name)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed . If given three arguments , then the cookie with the specified domain , path and `name` is removed .", "question_id": 4493}, {"snippet": "doctest.DocTestFinder(parser=DocTestParser(), exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2849}, {"snippet": "urllib.parse.urlsplit(urlstring, scheme='')", "intent": "This is similar to urlparse ( ) , but does not split the params from the URL . With arguments `urlstring`, `scheme`.", "question_id": 11691}, {"snippet": "operator.__not__(obj)", "intent": "Return the outcome of not `obj` .", "question_id": 6526}, {"snippet": "ContentHandler.startPrefixMapping(prefix, uri)", "intent": "Begin the scope of a prefix-URI Namespace mapping . With arguments `prefix`, `uri`.", "question_id": 12573}, {"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}, {"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}, {"snippet": "Pattern.split(string)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`.", "question_id": 7979}, {"snippet": "compile(source, filename, mode, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3995}, {"snippet": "turtle.isvisible()", "intent": "Return True if the Turtle is shown , False if it \u2019 s hidden .", "question_id": 10981}, {"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}, {"snippet": "Panel.bottom()", "intent": "Push the panel to the bottom of the stack .", "question_id": 2147}, {"snippet": "xml.sax.parse(filename_or_stream, handler)", "intent": "Create a SAX parser and use it to parse a document . The document , passed in as `filename_or_stream` , can be a filename or a file object . The `handler` parameter needs to be a SAX ContentHandler instance .", "question_id": 12593}, {"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}, {"snippet": "email_message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3271}, {"snippet": "email.generator.DecodedGenerator(outfp, fmt=None)", "intent": "Act like Generator , except that for any subpart of the message passed to Generator.flatten ( ) , if the subpart is of main type text , print the decoded payload of the subpart , and if the main type is not text , instead of printing it fill in the string `fmt` using information from the part and print the resulting filled-in string . With arguments `outfp`.", "question_id": 3109}, {"snippet": "tkinter.tix.Meter", "intent": "The Meter widget can be used to show the progress of a background job which may take a long time to execute.", "question_id": 10558}, {"snippet": "plistlib.dump(value, fp, sort_keys=True)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . With arguments `fp`.", "question_id": 7565}, {"snippet": "@dataclasses.dataclass()", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below .", "question_id": 2157}, {"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}, {"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}, {"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}, {"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}, {"snippet": "statistics.median(data)", "intent": "Return the median ( middle value ) of numeric `data` , using the common \u201c mean of middle two \u201d method .", "question_id": 9127}, {"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}, {"snippet": "ctypes.PyDLL(name)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`.", "question_id": 1770}, {"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}, {"snippet": "importlib.util.spec_from_loader(name, loader, origin=None, is_package=None)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`, `origin`, `is_package`.", "question_id": 4937}, {"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}, {"snippet": "cursor.close()", "intent": "Close the cursor now ( rather than whenever __del__ is called ) .", "question_id": 8848}, {"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}, {"snippet": "bdb.runeval(expr, globals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 812}, {"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61}, {"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}, {"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}, {"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}, {"snippet": "mailbox.Maildir(dirname, factory=None, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . Parameter `factory` is a callable object that accepts a file-like message representation ( which behaves as if opened in binary mode ) and returns a custom representation . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5757}, {"snippet": "tarfile.ExtractError", "intent": "Is raised for non-fatal errors when using TarFile.extract(), but only if TarFile.errorlevel== 2.", "question_id": 9906}, {"snippet": "locale.normalize(localename)", "intent": "Returns a normalized locale code for the given locale name . With arguments `localename`.", "question_id": 5379}, {"snippet": "AU_write.writeframes(data)", "intent": "Write audio frames and make sure nframes is correct . With arguments `data`.", "question_id": 9729}, {"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}, {"snippet": "subprocess.check_call(args, stdin=None, stderr=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`, `stdin`.", "question_id": 9677}, {"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}, {"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}, {"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}, {"snippet": "context.sqrt(x)", "intent": "Square root of a non-negative number to context precision . With arguments `x`.", "question_id": 2571}, {"snippet": "gettext.translation(domain, class_=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . The actual class instantiated is `class_` if provided , otherwise GNUTranslations .", "question_id": 4232}, {"snippet": "unittest.mock.mock_open(mock=None, read_data=None)", "intent": "A helper function to create a `mock` to replace the use of open ( ) . `read_data` is a string for the read ( ) , readline ( ) , and readlines ( ) methods of the file handle to return .", "question_id": 11656}, {"snippet": "dircmp.diff_files", "intent": "Files which are in both a and b, whose contents differ according to the class\u2019s file comparison operator.", "question_id": 3778}, {"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}, {"snippet": "os.WNOWAIT", "intent": "Flags that can be used in options in waitid() that specify what child signal to wait for.", "question_id": 7077}, {"snippet": "time.timezone", "intent": "The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).", "question_id": 10474}, {"snippet": "Popen.communicate()", "intent": "Interact with process : Send data to stdin .", "question_id": 9612}, {"snippet": "time.time_ns()", "intent": "Similar to time ( ) but returns time as an integer number of nanoseconds since the epoch .", "question_id": 10461}, {"snippet": "timeit.Timer()", "intent": "Class for timing execution speed of small code snippets .", "question_id": 10497}, {"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2112}, {"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}, {"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}, {"snippet": "TarFile.open()", "intent": "Alternative constructor .", "question_id": 9923}, {"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}, {"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}, {"snippet": "base_server.handle_timeout()", "intent": "This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received .", "question_id": 8778}, {"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}, {"snippet": "urllib.parse.quote_from_bytes(bytes)", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding .", "question_id": 11721}, {"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`.", "question_id": 10854}, {"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}, {"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}, {"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}, {"snippet": "json_encoder.msg", "intent": "The unformatted error message.", "question_id": 5336}, {"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}, {"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}, {"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}, {"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}, {"snippet": "tzinfo.fromutc(dt)", "intent": "This is called from the default datetime.astimezone ( ) implementation . When called from that , dt.tzinfo is self , and `dt` \u2019 s date and time data are to be viewed as expressing a UTC time .", "question_id": 2356}, {"snippet": "str.format_map(mapping)", "intent": "Similar to str.format ( **mapping ) , except that `mapping` is used directly and not copied to a dict .", "question_id": 9198}, {"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}, {"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}, {"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}, {"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}, {"snippet": "dis.distb(tb=None, file=None)", "intent": "Disassemble the top-of-stack function of a traceback , using the last traceback if none was passed . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise . With arguments `tb`.", "question_id": 2718}, {"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}, {"snippet": "io_base.readline(size=-1)", "intent": "Read and return one line from the stream . If `size` is specified , at most size bytes will be read .", "question_id": 5071}, {"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991}, {"snippet": "http.cookiejar.LWPCookieJar(filename, policy=None)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`, `policy`.", "question_id": 4530}, {"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}, {"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}, {"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}, {"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}, {"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, logRequests=True)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . If `logRequests` is true ( the default ) , requests will be logged ; setting this parameter to false will turn off logging .", "question_id": 12714}, {"snippet": "asyncio.wait(aws, loop=None, timeout=None)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 . `timeout` ( a float or int ) , if specified , can be used to control the maximum number of seconds to wait before returning .", "question_id": 611}, {"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}, {"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}, {"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}, {"snippet": "xmlparser.EndElementHandler(name)", "intent": "Called for the end of every element . With arguments `name`.", "question_id": 7761}, {"snippet": "null_translations.info()", "intent": "Return the \u201c protected \u201d _info variable , a dictionary containing the metadata found in the message catalog file .", "question_id": 4254}, {"snippet": "random.choices(population, weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights .", "question_id": 7900}, {"snippet": "BaseCookie.output(attrs=None)", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4585}, {"snippet": "asyncio.gather(*aws, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`.", "question_id": 601}, {"snippet": "winreg.REG_DWORD", "intent": "32-bit number.", "question_id": 12175}, {"snippet": "ZeroDivisionError", "intent": "Raised when the second argument of a division or modulo operation is zero.", "question_id": 3683}, {"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}, {"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}, {"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}, {"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}, {"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}, {"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}, {"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}, {"snippet": "calendar.prcal(year, w=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`.", "question_id": 1002}, {"snippet": "lzma.open(filename, format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5658}, {"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}, {"snippet": "turtle.bgcolor(*args)", "intent": "Set or return background color of the TurtleScreen . With arguments `*args`.", "question_id": 11040}, {"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}, {"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509}, {"snippet": "statistics.StatisticsError", "intent": "Subclass of ValueError for statistics-related exceptions.", "question_id": 9141}, {"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}, {"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}, {"snippet": "gzip.open(filename, encoding=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4275}, {"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}, {"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}, {"snippet": "uuid.RFC_4122", "intent": "Specifies the UUID layout given in RFC 4122.", "question_id": 11969}, {"snippet": "pickletools.dis(pickle, memo=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7423}, {"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}, {"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}, {"snippet": "mailbox.lock()", "intent": "Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it .", "question_id": 5751}, {"snippet": "Request.get_full_url()", "intent": "Return the URL given in the constructor .", "question_id": 11829}, {"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}, {"snippet": "os.tcsetpgrp(fd, pg)", "intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "question_id": 6807}, {"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}, {"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}, {"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}, {"snippet": "lock.acquire()", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) .", "question_id": 12952}, {"snippet": "xmlparser.StartCdataSectionHandler()", "intent": "Called at the start of a CDATA section .", "question_id": 7770}, {"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932}, {"snippet": "NNTP.login(user=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6452}, {"snippet": "Queue.task_done()", "intent": "Indicate that a formerly enqueued task is complete .", "question_id": 7859}, {"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}, {"snippet": "directory.start_component(component=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory .", "question_id": 6094}, {"snippet": "socket.setsockopt(level, optname, None, optlen: int)", "intent": "Set the value of the given socket option ( see the Unix manual page setsockopt ( 2 ) ) . The value can be an integer , `None` or a bytes-like object representing a buffer . With arguments `level`, `optname`, `optlen: int`.", "question_id": 8739}, {"snippet": "base_server.socket", "intent": "The socket object on which the server will listen for incoming requests.", "question_id": 8770}, {"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}, {"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}, {"snippet": "bdb.run(cmd, locals=None)", "intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "question_id": 809}, {"snippet": "TarFile.extractall(path=\".\", members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9936}, {"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}, {"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}, {"snippet": "test.support.script_helper.spawn_python(*args, **kw, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stderr`.", "question_id": 10305}, {"snippet": "doctest.DocTestSuite(tearDown=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2812}, {"snippet": "binascii.crc_hqx(data, value)", "intent": "Compute a 16-bit CRC `value` of `data` , starting with value as the initial CRC , and return the result .", "question_id": 840}, {"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}, {"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}, {"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}, {"snippet": "Record.SetStream(field, value)", "intent": "Set `field` to the contents of the file named `value` , through MsiRecordSetStream ( ) .", "question_id": 6085}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}, {"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}, {"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763}, {"snippet": "mailcap.findmatch(caps)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.", "question_id": 5869}, {"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}, {"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}, {"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}, {"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}, {"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738}, {"snippet": "NNTP.login(usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6454}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "View.GetColumnInfo(kind)", "intent": "Return a record describing the columns of the view , through calling MsiViewGetColumnInfo ( ) . `kind` can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES .", "question_id": 6073}, {"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}, {"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}, {"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}, {"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `comment_prefixes`.", "question_id": 1574}, {"snippet": "html_calendar.formatyearpage(theyear, encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 965}, {"snippet": "base64.b32decode(s, casefold=False, map01=None)", "intent": "Decode the Base32 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input . The optional argument `map01` when not None , specifies which letter the digit 1 should be mapped to ( when map01 is not None , the digit 0 is always mapped to the letter O ) .", "question_id": 722}, {"snippet": "ctypes.c_ulong", "intent": "Represents the C unsigned long datatype.", "question_id": 1877}, {"snippet": "widget.delete(*items)", "intent": "Delete all specified items and all their descendants . With arguments `*items`.", "question_id": 10627}, {"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}, {"snippet": "winreg.DeleteKeyEx(key, sub_key, reserved=0)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `reserved` is a reserved integer , and must be zero .", "question_id": 12130}, {"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}, {"snippet": "base_http_request_handler.command", "intent": "Contains the command (request type).", "question_id": 4621}, {"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}, {"snippet": "doctest.DocFileSuite(*paths, optionflags=0)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "question_id": 2802}, {"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}, {"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}, {"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948}, {"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}, {"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}, {"snippet": "time.altzone", "intent": "The offset of the local DST timezone, in seconds west of UTC, if one is defined.", "question_id": 10472}, {"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}, {"snippet": "email.generator.BytesGenerator(outfp)", "intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3078}, {"snippet": "int.to_bytes(length, byteorder, signed=False)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument determines whether two \u2019 s complement is used to represent the integer .", "question_id": 9144}, {"snippet": "i_pv4_network.with_netmask", "intent": "A string representation of the network, with the mask in net mask notation.", "question_id": 5201}, {"snippet": "smtp_channel.rcpttos", "intent": "Holds a list of strings containing the addresses identified in the \u201cRCPT TO:\u201d lines from the client.", "question_id": 8444}, {"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}, {"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}, {"snippet": "Unpacker.set_position(position)", "intent": "Sets the data buffer unpack `position` to position .", "question_id": 12287}, {"snippet": "SimpleQueue.put(item)", "intent": "Put `item` into the queue .", "question_id": 7863}, {"snippet": "config_parser.items(section)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1556}, {"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12794}, {"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}, {"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}, {"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}, {"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}, {"snippet": "bytearray(source)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways :", "question_id": 3983}, {"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}, {"snippet": "subprocess.Popen(args, executable=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9601}, {"snippet": "turtle.Turtle", "intent": "Subclass of RawTurtle, has the same interface but draws on a default Screen object created automatically when needed for the first time.", "question_id": 11160}, {"snippet": "os.write(fd, str)", "intent": "Write the bytestring in `str` to file descriptor `fd` .", "question_id": 6809}, {"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}, {"snippet": "dis.disassemble(code)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2719}, {"snippet": "tarfile.open(**kwargs, name=None, mode='r')", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . With arguments `**kwargs`.", "question_id": 9895}, {"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}, {"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}, {"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}, {"snippet": "configparser.Error", "intent": "Base class for all other configparser exceptions.", "question_id": 1591}, {"snippet": "email.charset.add_codec(charset, codecname)", "intent": "Add a codec that map characters in the given character set to and from Unicode . `charset` is the canonical name of a character set . `codecname` is the name of a Python codec , as appropriate for the second argument to the str \u2019 s encode ( ) method .", "question_id": 2935}, {"snippet": "resource_reader.contents()", "intent": "Returns an iterable of strings over the contents of the package .", "question_id": 4822}, {"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}, {"snippet": "loop.start_tls(transport, protocol, sslcontext, server_hostname=None)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`, `server_hostname`.", "question_id": 266}, {"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}, {"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}, {"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}, {"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}, {"snippet": "str.rsplit(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9236}, {"snippet": "quopri.decode(input, output, header=False)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .", "question_id": 7874}, {"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}, {"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}, {"snippet": "csvreader.__next__()", "intent": "Return the next row of the reader \u2019 s iterable object as a list ( if the object was returned from reader ( ) ) or a dict ( if it is a DictReader instance ) , parsed according to the current dialect .", "question_id": 1731}, {"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}, {"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}, {"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247}, {"snippet": "email_message.set_boundary(boundary)", "intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "question_id": 3278}, {"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}, {"snippet": "inspect.istraceback(object)", "intent": "Return true if the `object` is a traceback .", "question_id": 4959}, {"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}, {"snippet": "json.JSONEncoder(check_circular=True)", "intent": "Extensible JSON encoder for Python data structures . If `check_circular` is true ( the default ) , then lists , dicts , and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion ( which would cause an OverflowError ) .", "question_id": 5325}, {"snippet": "queue_listener.propagate", "intent": "If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger.", "question_id": 5565}, {"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}, {"snippet": "IMAP4.myrights(mailbox)", "intent": "Show my ACLs for a `mailbox` ( i.e .", "question_id": 4716}, {"snippet": "secrets.choice(sequence)", "intent": "Return a randomly-chosen element from a non-empty `sequence` .", "question_id": 8132}, {"snippet": "xml.sax.SAXException(msg)", "intent": "Encapsulate an XML error or warning . When instantiated , `msg` should be a human-readable description of the error .", "question_id": 12597}, {"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}, {"snippet": "parser.parse(fp, headersonly=False)", "intent": "Read all the data from the text-mode file-like object `fp` , parse the resulting text , and return the root message object . With arguments `headersonly`.", "question_id": 3389}, {"snippet": "Cookie.domain_initial_dot", "intent": "True if the domain explicitly specified by the server began with a dot ('.", "question_id": 4570}, {"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}, {"snippet": "operator.concat(a, b)", "intent": "Return `a` + `b` for a and b sequences .", "question_id": 6568}, {"snippet": "CookiePolicy.path_return_ok(path, request)", "intent": "Return false if cookies should not be returned , given cookie `path` . With arguments `request`.", "question_id": 4535}, {"snippet": "stat.S_ISBLK(mode)", "intent": "Return non-zero if the `mode` is from a block special device file .", "question_id": 9063}, {"snippet": "resource_reader.open_resource(resource)", "intent": "Returns an opened , file-like object for binary reading of the `resource` .", "question_id": 4819}, {"snippet": "email.utils.encode_rfc2231(s, charset=None, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3482}, {"snippet": "turtle.get_shapepoly()", "intent": "Return the current shape polygon as tuple of coordinate pairs .", "question_id": 11018}, {"snippet": "doctest.DocFileSuite(*paths, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2798}, {"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837}, {"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}, {"snippet": "xmlrpc.client.dumps(params, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12702}, {"snippet": "sys.getdefaultencoding()", "intent": "Return the name of the current default string encoding used by the Unicode implementation .", "question_id": 9796}, {"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}, {"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}, {"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}, {"snippet": "decimal.fma(other, third, context=None)", "intent": "Fused multiply-add . With arguments `other`, `third`, `context`.", "question_id": 2416}, {"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text')", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3211}, {"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}, {"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}, {"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}, {"snippet": "urllib.parse.urljoin(base, url, allow_fragments=True)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) . The `allow_fragments` argument has the same meaning and default as for urlparse ( ) .", "question_id": 11696}, {"snippet": "email_policy.refold_source", "intent": "If the value for a header in the Message object originated from a parser (as opposed to being set by a program), this attribute indicates whether or not a generator should refold that value when transforming the message back into serialized form.", "question_id": 3430}, {"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}, {"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}, {"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}, {"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}, {"snippet": "mmap.flush(offset)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6006}, {"snippet": "Element.hasAttributeNS(namespaceURI, localName)", "intent": "Returns true if the element has an attribute named by `namespaceURI` and `localName` .", "question_id": 12358}, {"snippet": "config_parser.get(section, option, fallback, vars=None)", "intent": "Get an `option` value for the named `section` . If the key is not found and `fallback` is provided , it is used as a fallback value . If `vars` is provided , it must be a dictionary .", "question_id": 1522}, {"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}, {"snippet": "test.support.check__all__(test_case, module, name_of_module=None, blacklist=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `name_of_module` argument can specify ( as a string or tuple thereof ) what module ( s ) an API could be defined in order to be detected as a public API . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "question_id": 10282}, {"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}, {"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}, {"snippet": "semaphore.acquire(blocking=True)", "intent": "Acquire a semaphore . When invoked with `blocking` set to false , do not block .", "question_id": 10400}, {"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}, {"snippet": "context.create_decimal(num)", "intent": "Creates a new Decimal instance from `num` but using self as context .", "question_id": 2513}, {"snippet": "SimpleQueue.get()", "intent": "Remove and return an item from the queue .", "question_id": 7868}, {"snippet": "bytearray.fromhex(string)", "intent": "This bytearray class method returns bytearray object , decoding the given `string` object .", "question_id": 9267}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "date.resolution", "intent": "The smallest possible difference between non-equal date objects, timedelta(days=1).", "question_id": 2225}, {"snippet": "test_case.records", "intent": "A list of logging.LogRecord objects of the matching log messages.", "question_id": 11415}, {"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}, {"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}, {"snippet": "os.SCHED_SPORADIC", "intent": "Scheduling policy for sporadic server programs.", "question_id": 7099}, {"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}, {"snippet": "policy.fold_binary(name, value)", "intent": "The same as fold ( ) , except that the returned `value` should be a bytes object rather than a string . With arguments `name`.", "question_id": 3427}, {"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}, {"snippet": "parser.st2tuple(st, col_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree . With arguments `col_info`.", "question_id": 7220}, {"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175}, {"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}, {"snippet": "turtle.home()", "intent": "Move turtle to the origin \u2013 coordinates ( 0,0 ) \u2013 and set its heading to its start-orientation ( which depends on the mode , see mode ( ) ) .", "question_id": 10922}, {"snippet": "str.replace(old, new)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` .", "question_id": 9225}, {"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}, {"snippet": "base_server.handle_request()", "intent": "Process a single request .", "question_id": 8761}, {"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}, {"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}, {"snippet": "crypt.METHOD_CRYPT", "intent": "The traditional method with a 2 character salt and 13 characters of hash.", "question_id": 1672}, {"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}, {"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}, {"snippet": "queue.SimpleQueue", "intent": "Constructor for an unbounded FIFO queue.", "question_id": 7843}, {"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}, {"snippet": "ur_lopener.retrieve(url, filename=None, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11901}, {"snippet": "IMAP4.lsub(directory='\"\"')", "intent": "List subscribed mailbox names in `directory` matching `pattern` .", "question_id": 4713}, {"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}, {"snippet": "heapq.merge(*iterables, key=None)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element .", "question_id": 4322}, {"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}, {"snippet": "queue_listener.propagate", "intent": "If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger.", "question_id": 5565}, {"snippet": "future.add_done_callback(fn)", "intent": "Attaches the callable `fn` to the future .", "question_id": 1476}, {"snippet": "unittest.mock.create_autospec(spec, **kwargs, spec_set=False)", "intent": "Create a mock object using another object as a `spec` . If `spec_set` is True then attempting to set attributes that don \u2019 t exist on the spec object will raise an AttributeError . With arguments `**kwargs`.", "question_id": 11650}, {"snippet": "json.loads(s, **kw, parse_int=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`, `parse_int`.", "question_id": 5305}, {"snippet": "widget.tag_has(tagname, item=None)", "intent": "If `item` is specified , returns 1 or 0 depending on whether the specified item has the given `tagname` .", "question_id": 10669}, {"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}, {"snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`, `handle`.", "question_id": 1765}, {"snippet": "widget.bbox(item)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) .", "question_id": 10620}, {"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}, {"snippet": "bz2.compress(data)", "intent": "Compress `data` , a bytes-like object .", "question_id": 906}, {"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}, {"snippet": "pickletools.dis(pickle, memo=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . `memo` can be a Python dictionary that will be used as the pickle \u2019 s memo ; it can be used to perform disassemblies across multiple pickles created by the same pickler .", "question_id": 7417}, {"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}, {"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}, {"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}, {"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}, {"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}, {"snippet": "signal.setitimer(which, seconds, interval=0.0)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8392}, {"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}, {"snippet": "test_result.skipped", "intent": "A list containing 2-tuples of TestCase instances and strings holding the reason for skipping the test.", "question_id": 11510}, {"snippet": "InteractiveInterpreter.showsyntaxerror()", "intent": "Display the syntax error that just occurred .", "question_id": 1180}, {"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}, {"snippet": "sys_log_handler.encodePriority(facility, priority)", "intent": "Encodes the `facility` and `priority` into an integer .", "question_id": 5504}, {"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}, {"snippet": "widget.yview(*args)", "intent": "Query or modify vertical position of the treeview . With arguments `*args`.", "question_id": 10671}, {"snippet": "loop.get_exception_handler()", "intent": "Return the current exception handler , or None if no custom exception handler was set .", "question_id": 308}, {"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}, {"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}, {"snippet": "text_wrapper.fix_sentence_endings", "intent": "(default: False) If true, TextWrapper attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.", "question_id": 10334}, {"snippet": "dataclasses.fields(class_or_instance)", "intent": "Returns a tuple of Field objects that define the fields for this dataclass . With arguments `class_or_instance`.", "question_id": 2178}, {"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}, {"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}, {"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}, {"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}, {"snippet": "process.terminate()", "intent": "Terminate the process .", "question_id": 6186}, {"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}, {"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}, {"snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7393}, {"snippet": "urllib.parse.urlencode(query)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value .", "question_id": 11732}, {"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}, {"snippet": "email_message.set_default_type(ctype)", "intent": "Set the default content type . `ctype` should either be text/plain or message/rfc822 , although this is not enforced .", "question_id": 3259}, {"snippet": "xml.etree.ElementTree.XML(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12469}, {"snippet": "socket.dup()", "intent": "Duplicate the socket .", "question_id": 8679}, {"snippet": "pprint.PrettyPrinter(indent=1, stream=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol \u2019 s write ( ) method .", "question_id": 7631}, {"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}, {"snippet": "ScrolledText.frame", "intent": "The frame which surrounds the text and scroll bar widgets.", "question_id": 10542}, {"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}, {"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}, {"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}, {"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}, {"snippet": "curses.init_color(color_number, r, g, b)", "intent": "Change the definition of a color , taking the number of the color to be changed followed by three RGB values ( for the amounts of red , green , and blue components ) . The value of `color_number` must be between 0 and COLORS . Each of `r` , `g` , `b` , must be a value between 0 and 1000 .", "question_id": 1945}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}, {"snippet": "inspect.isclass(object)", "intent": "Return true if the `object` is a class , whether built-in or created in Python code .", "question_id": 4949}, {"snippet": "ArgumentParser.add_argument_group()", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages .", "question_id": 95}, {"snippet": "ConnectionError", "intent": "A base class for connection-related issues.", "question_id": 3688}, {"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}, {"snippet": "sys.builtin_module_names", "intent": "A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "question_id": 9771}, {"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}, {"snippet": "pprint.PrettyPrinter(indent=1, width=80)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7629}, {"snippet": "profile.Profile(builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . With arguments `builtins`.", "question_id": 7673}, {"snippet": "mailbox.iterkeys()", "intent": "Return an iterator over all keys if called as iterkeys ( ) or return a list of keys if called as keys ( ) .", "question_id": 5729}, {"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}, {"snippet": "site.USER_SITE", "intent": "Path to the user site-packages for the running Python.", "question_id": 8404}, {"snippet": "bytes.splitlines(keepends=False)", "intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9400}, {"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}, {"snippet": "platform.java_ver('', ''), '', ''), vendor='', osinfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7494}, {"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}, {"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}, {"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}, {"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}, {"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}, {"snippet": "queue_handler.enqueue(record)", "intent": "Enqueues the `record` on the queue using put_nowait ( ) ; you may want to override this if you want to use blocking behaviour , or a timeout , or a customized queue implementation .", "question_id": 5556}, {"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}, {"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}, {"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}, {"snippet": "test_result.shouldStop", "intent": "Set to True when the execution of tests should stop by stop().", "question_id": 11513}, {"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}, {"snippet": "ctypes.memset(dst, c, count)", "intent": "Same as the standard C memset library function : fills the memory block at address `dst` with `count` bytes of value c. dst must be an integer specifying an address , or a ctypes instance . With arguments `c`.", "question_id": 1827}, {"snippet": "Packer.pack_bytes(bytes)", "intent": "Packs a variable length byte stream , similarly to pack_string ( ) . With arguments `bytes`.", "question_id": 12281}, {"snippet": "datetime.ctime()", "intent": "Return a string representing the date and time , for example datetime ( 2002 , 12 , 4 , 20 , 30 , 40 ) .ctime ( ) == 'Wed Dec 4 20:30:40 2002 ' .", "question_id": 2311}, {"snippet": "sys.winver", "intent": "The version number used to form registry keys on Windows platforms.", "question_id": 9856}, {"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363}, {"snippet": "IMAP4.list(directory, pattern)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4706}, {"snippet": "parameter.annotation", "intent": "The annotation for the parameter.", "question_id": 5000}, {"snippet": "lock.acquire(timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12954}, {"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}, {"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344}, {"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}, {"snippet": "_thread.start_new_thread(function, args)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) .", "question_id": 12944}, {"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}, {"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}, {"snippet": "completed_process.args", "intent": "The arguments used to launch the process.", "question_id": 9578}, {"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}, {"snippet": "ctypes.PYFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the Python calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1800}, {"snippet": "proxy[key]", "intent": "Return the item of the underlying mapping with key key.", "question_id": 11208}, {"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}, {"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}, {"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69}, {"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}, {"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}, {"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}, {"snippet": "dataclasses.field(repr=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `repr`.", "question_id": 2170}, {"snippet": "policy.cte_type", "intent": "Controls the type of Content Transfer Encodings that may be or are required to be used.", "question_id": 3415}, {"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}, {"snippet": "ctypes.byref(obj, offset)", "intent": "Returns a light-weight pointer to `obj` , which must be an instance of a ctypes type . `offset` defaults to zero , and must be an integer that will be added to the internal pointer value .", "question_id": 1810}, {"snippet": "content_disposition_header.content-disposition", "intent": "inline and attachment are the only valid values in common use.", "question_id": 3172}, {"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}, {"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}, {"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}, {"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}, {"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}, {"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}, {"snippet": "Match.pos", "intent": "The value of pos which was passed to the search() or match() method of a regex object.", "question_id": 8009}, {"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}, {"snippet": "decimal.min_mag(other)", "intent": "Similar to the min ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2449}, {"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}, {"snippet": "doc_test_runner.run(test, clear_globs=True)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . If `clear_globs` is true ( the default ) , then this namespace will be cleared after the test runs , to help with garbage collection .", "question_id": 2876}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, headers=None)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3046}, {"snippet": "test.support.detect_api_mismatch(ref_api, other_api, ignore=())", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10268}, {"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847}, {"snippet": "argparse.ArgumentParser(usage=None)", "intent": "Create a new ArgumentParser object . With arguments `usage`.", "question_id": 40}, {"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}, {"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}, {"snippet": "email_message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3265}, {"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}, {"snippet": "xml.etree.ElementTree.ElementTree()", "intent": "ElementTree wrapper class .", "question_id": 12507}, {"snippet": "Node.normalize()", "intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "question_id": 12334}, {"snippet": "operator.truediv(a, b)", "intent": "Return `a` / `b` where 2/3 is .66 rather than 0 .", "question_id": 6564}, {"snippet": "itertools.accumulate(iterable, func)", "intent": "Make an iterator that returns accumulated sums , or accumulated results of other binary functions ( specified via the optional `func` argument ) . Elements of the input `iterable` may be any type that can be accepted as arguments to func .", "question_id": 5239}, {"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12553}, {"snippet": "shutil.copytree(src, dst, symlinks=False, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8328}, {"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}, {"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}, {"snippet": "mock._get_child_mock(**kw)", "intent": "Create the child mocks for attributes and return value . With arguments `**kw`.", "question_id": 11587}, {"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6030}, {"snippet": "Dialect.quoting", "intent": "Controls when quotes should be generated by the writer and recognised by the reader.", "question_id": 1728}, {"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}, {"snippet": "policy.header_fetch_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` currently stored in the Message when that header is requested by the application program , and whatever the method returns is what is passed back to the application as the value of the header being retrieved .", "question_id": 3425}, {"snippet": "xml.sax.saxutils.XMLGenerator(short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12661}, {"snippet": "curses.termattrs()", "intent": "Return a logical OR of all video attributes supported by the terminal .", "question_id": 1984}, {"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}, {"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}, {"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}, {"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}, {"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}, {"snippet": "mh.pack()", "intent": "Rename messages in the mailbox as necessary to eliminate gaps in numbering .", "question_id": 5785}, {"snippet": "__import__(name, locals=None, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4143}, {"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}, {"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}, {"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}, {"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}, {"snippet": "@importlib.util.module_for_loader", "intent": "A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with.", "question_id": 4931}, {"snippet": "stat.S_ISCHR(mode)", "intent": "Return non-zero if the `mode` is from a character special device file .", "question_id": 9062}, {"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}, {"snippet": "Panel.move(y, x)", "intent": "Move the panel to the screen coordinates ( `y` , `x` ) .", "question_id": 2150}, {"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}, {"snippet": "socket.sendmsg_afalg(msg, op, iv, assoclen, flags)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . Set mode , IV , AEAD associated data length and `flags` for AF_ALG socket . With arguments `msg`, `op`, `iv`, `assoclen`.", "question_id": 8727}, {"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}, {"snippet": "test.support.TESTFN_UNDECODABLE", "intent": "Set to a filename (bytes type) that should not be able to be decoded by file system encoding in strict mode.", "question_id": 10119}, {"snippet": "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11421}, {"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}, {"snippet": "maildir_message.add_flag(flag)", "intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "question_id": 5817}, {"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}, {"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}, {"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}, {"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}, {"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}, {"snippet": "shutil.copyfile(src, dst, follow_symlinks=True)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst . If `follow_symlinks` is false and src is a symbolic link , a new symbolic link will be created instead of copying the file src points to .", "question_id": 8312}, {"snippet": "argparse.FileType(bufsize=-1, errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `errors`.", "question_id": 94}, {"snippet": "bytes.center(width)", "intent": "Return a copy of the object centered in a sequence of length `width` .", "question_id": 9336}, {"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}, {"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}, {"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}, {"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}, {"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}, {"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}, {"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}, {"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}, {"snippet": "element_tree.write(file, encoding=\"us-ascii\", method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12535}, {"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715}, {"snippet": "loop.getnameinfo(sockaddr, flags=0)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`, `flags`.", "question_id": 300}, {"snippet": "prototype(func_spec, paramflags)", "intent": "Returns a foreign function exported by a shared library . `func_spec` must be a 2-tuple ( name_or_ordinal , library ) . With arguments `paramflags`.", "question_id": 1803}, {"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}, {"snippet": "netrc.authenticators(host)", "intent": "Return a 3-tuple ( login , account , password ) of authenticators for `host` .", "question_id": 6387}, {"snippet": "os.chdir(path)", "intent": "These functions are described in Files and Directories . With arguments `path`.", "question_id": 6660}, {"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "re.compile(pattern)", "intent": "Compile a regular expression `pattern` into a regular expression object , which can be used for matching using its match ( ) , search ( ) and other methods , described below .", "question_id": 7922}, {"snippet": "Pattern.fullmatch(string)", "intent": "If the whole `string` matches this regular expression , return a corresponding match object .", "question_id": 7978}, {"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}, {"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}, {"snippet": "os.SF_SYNC", "intent": "Parameters to the sendfile() function, if the implementation supports them.", "question_id": 6804}, {"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}, {"snippet": "file_loader.get_data(path)", "intent": "Reads `path` as a binary file and returns the bytes from it .", "question_id": 4840}, {"snippet": "test.support.requires(resource)", "intent": "Raise ResourceDenied if `resource` is not available .", "question_id": 10147}, {"snippet": "loop.getaddrinfo(host, port, family=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`.", "question_id": 290}, {"snippet": "sequence_matcher.get_opcodes()", "intent": "Return list of 5-tuples describing how to turn a into b .", "question_id": 2684}, {"snippet": "calendar.yeardayscalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 925}, {"snippet": "socket.shutdown(how)", "intent": "Shut down one or both halves of the connection . If `how` is SHUT_RD , further receives are disallowed .", "question_id": 8740}, {"snippet": "turtle.update()", "intent": "Perform a TurtleScreen update .", "question_id": 11062}, {"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}, {"snippet": "json.dumps(obj, **kw, ensure_ascii=True)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `ensure_ascii`.", "question_id": 5282}, {"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}, {"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}, {"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}, {"snippet": "time.time_ns()", "intent": "Similar to time ( ) but returns time as an integer number of nanoseconds since the epoch .", "question_id": 10461}, {"snippet": "subprocess.Popen(args, executable=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9601}, {"snippet": "traceback.format_list(extracted_list)", "intent": "Given a list of tuples or FrameSummary objects as returned by extract_tb ( ) or extract_stack ( ) , return a list of strings ready for printing . With arguments `extracted_list`.", "question_id": 10775}, {"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511}, {"snippet": "io.TextIOWrapper(buffer, errors=None)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `errors` is an optional string that specifies how encoding and decoding errors are to be handled .", "question_id": 5148}, {"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714}, {"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}, {"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}, {"snippet": "io_base.seekable()", "intent": "Return True if the stream supports random access .", "question_id": 5076}, {"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}, {"snippet": "BaseCookie.load(rawdata)", "intent": "If `rawdata` is a string , parse it as an HTTP_COOKIE and add the values found there as Morsels .", "question_id": 4594}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX", "intent": "The document attempted to remove the namespace declaration associated with a prefix.", "question_id": 7811}, {"snippet": "mailbox.NoSuchMailboxError", "intent": "Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.", "question_id": 5857}, {"snippet": "calendar.yeardays2calendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting ( similar to yeardatescalendar ( ) ) . With arguments `width`.", "question_id": 923}, {"snippet": "ctypes.WinDLL(name, mode=DEFAULT_MODE)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return int by default . With arguments `name`, `mode`.", "question_id": 1761}, {"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}, {"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF", "intent": "An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly.", "question_id": 7800}, {"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}, {"snippet": "operator.__contains__(a, b)", "intent": "Return the outcome of the test `b` in `a` .", "question_id": 6571}, {"snippet": "math.remainder(x, y)", "intent": "Return the IEEE 754-style remainder of `x` with respect to `y` .", "question_id": 5903}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}, {"snippet": "base_handler.setup_environ()", "intent": "Set the environ attribute to a fully-populated WSGI environment .", "question_id": 12259}, {"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}, {"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}, {"snippet": "smtpd.SMTPChannel(server, conn, addr, decode_data=False)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `decode_data` and enable_SMTPUTF8 can not be set to True at the same time .", "question_id": 8431}, {"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}, {"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}, {"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}, {"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}, {"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}, {"snippet": "somenamedtuple._fields", "intent": "Tuple of strings listing the field names.", "question_id": 1387}, {"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}, {"snippet": "FTP.login()", "intent": "Log in as the given `user` .", "question_id": 3915}, {"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}, {"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}, {"snippet": "BaseTransport.get_extra_info(name, default=None)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get . `default` is the value to return if the information is not available , or if the transport does not support querying it with the given third-party event loop implementation or on the current platform .", "question_id": 399}, {"snippet": "doctest.ELLIPSIS", "intent": "When specified, an ellipsis marker (...) in the expected output can match any substring in the actual output.", "question_id": 2755}, {"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}, {"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}, {"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 968}, {"snippet": "simple_http_request_handler.extensions_map", "intent": "A dictionary mapping suffixes into MIME types.", "question_id": 4662}, {"snippet": "file_finder.find_spec(fullname, target=None)", "intent": "Attempt to find the spec to handle `fullname` within path . With arguments `target`.", "question_id": 4885}, {"snippet": "text_io_base.encoding", "intent": "The name of the encoding used to decode the stream\u2019s bytes into strings, and to encode strings into bytes.", "question_id": 5133}, {"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}, {"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}, {"snippet": "socketserver.BaseRequestHandler", "intent": "This is the superclass of all request handler objects.", "question_id": 8783}, {"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}, {"snippet": "writer.send_hor_rule(*args, **kw)", "intent": "Display a horizontal rule on the output device . With arguments `*args`, `**kw`.", "question_id": 3849}, {"snippet": "deque.append(x)", "intent": "Add `x` to the right side of the deque .", "question_id": 1353}, {"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}, {"snippet": "fractions.Fraction()", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3859}, {"snippet": "xml.sax.make_parser(parser_list=)", "intent": "Create and return a SAX XMLReader object . If `parser_list` is provided , it must be a list of strings which name modules that have a function named create_parser ( ) .", "question_id": 12590}, {"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}, {"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}, {"snippet": "errno.EDOM", "intent": "Math argument out of domain of func", "question_id": 3538}, {"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}, {"snippet": "traceback.print_tb(tb, limit=None, file=None)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive . If `file` is omitted or None , the output goes to sys.stderr ; otherwise it should be an open file or file-like object to receive the output .", "question_id": 10736}, {"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}, {"snippet": "decimal.is_zero()", "intent": "Return True if the argument is a ( positive or negative ) zero and False otherwise .", "question_id": 2428}, {"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}, {"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4121}, {"snippet": "secrets.choice(sequence)", "intent": "Return a randomly-chosen element from a non-empty `sequence` .", "question_id": 8132}, {"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}, {"snippet": "bytearray.replace(old, new, count)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9309}, {"snippet": "window.chgat(attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "question_id": 2030}, {"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}, {"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}, {"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}, {"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}, {"snippet": "base_http_request_handler.log_request()", "intent": "Logs an accepted ( successful ) request .", "question_id": 4648}, {"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}, {"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}, {"snippet": "test.support.FS_NONASCII", "intent": "A non-ASCII character encodable by os.fsencode().", "question_id": 10114}, {"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}, {"snippet": "smtplib.LMTP(local_hostname=None)", "intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client . The optional arguments `local_hostname` and `source_address` have the same meaning as they do in the SMTP class .", "question_id": 8491}, {"snippet": "logging.Formatter(fmt=None)", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used .", "question_id": 5611}, {"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}, {"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}, {"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}, {"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}, {"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}, {"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}, {"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}, {"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136}, {"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963}, {"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}, {"snippet": "netrc.netrc()", "intent": "A netrc instance or subclass instance encapsulates data from a netrc `file` .", "question_id": 6385}, {"snippet": "PurePath.name", "intent": "A string representing the final path component, excluding the drive and root, if any:", "question_id": 7249}, {"snippet": "inspect.unwrap(func, stop=None)", "intent": "Get the object wrapped by `func` . `stop` is an optional callback accepting an object in the wrapper chain as its sole argument that allows the unwrapping to be terminated early if the callback returns a true value .", "question_id": 5022}, {"snippet": "chunk.seek(pos, whence=0)", "intent": "Set the chunk \u2019 s current position . The `whence` argument is optional and defaults to 0 ( absolute file positioning ) ; other values are 1 ( seek relative to the current position ) and 2 ( seek relative to the file \u2019 s end ) . With arguments `pos`.", "question_id": 1088}, {"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}, {"snippet": "asyncio.sleep(delay, result=None, loop=None)", "intent": "Block for `delay` seconds . If `result` is provided , it is returned to the caller when the coroutine completes . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 598}, {"snippet": "sched.scheduler(timefunc=time.monotonic, delayfunc=time.sleep)", "intent": "The scheduler class defines a generic interface to scheduling events . It needs two functions to actually deal with the \u201c outside world \u201d \u2014 `timefunc` should be callable without arguments , and return a number ( the \u201c time \u201d , in any units whatsoever ) . The `delayfunc` function should be callable with one argument , compatible with the output of timefunc , and should delay that many time units .", "question_id": 8117}, {"snippet": "queue.SimpleQueue", "intent": "Constructor for an unbounded FIFO queue.", "question_id": 7843}, {"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}, {"snippet": "io.BytesIO(initial_bytes)", "intent": "A stream implementation using an in-memory bytes buffer . The optional argument `initial_bytes` is a bytes-like object that contains initial data .", "question_id": 5109}, {"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}, {"snippet": "i_pv4_address.is_multicast", "intent": "True if the address is reserved for multicast use.", "question_id": 5180}, {"snippet": "logging.handlers.BufferingHandler(capacity)", "intent": "Initializes the handler with a buffer of the specified `capacity` .", "question_id": 5525}, {"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "writer.send_label_data(data)", "intent": "Set `data` to the left of the current left margin , if possible .", "question_id": 3852}, {"snippet": "barrier.wait(timeout=None)", "intent": "Pass the barrier . If a `timeout` is provided , it is used in preference to any that was supplied to the class constructor .", "question_id": 10422}, {"snippet": "os.fstat(fd)", "intent": "Get the status of the file descriptor `fd` .", "question_id": 6723}, {"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}, {"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}, {"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}, {"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}, {"snippet": "pdb.set_trace()", "intent": "See the documentation for the functions explained above .", "question_id": 7360}, {"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}, {"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}, {"snippet": "resource.setrlimit(resource, limits)", "intent": "Sets new `limits` of consumption of `resource` .", "question_id": 8072}, {"snippet": "winreg.DeleteValue(key, value)", "intent": "Removes a named `value` from a registry `key` .", "question_id": 12132}, {"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}, {"snippet": "TarInfo.ischr()", "intent": "Return True if it is a character device .", "question_id": 9997}, {"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}, {"snippet": "compileall.compile_dir(dir, rx=None)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `rx` is given , its search method is called on the complete path to each file considered for compilation , and if it returns a true value , the file is skipped .", "question_id": 1413}, {"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}, {"snippet": "DocumentType.internalSubset", "intent": "A string giving the complete internal subset from the document.", "question_id": 12340}, {"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}, {"snippet": "Unpacker.unpack_double()", "intent": "Unpacks a double-precision floating point number , similarly to unpack_float ( ) .", "question_id": 12291}, {"snippet": "ssl.HAS_ECDH", "intent": "Whether the OpenSSL library has built-in support for the Elliptic Curve-based Diffie-Hellman key exchange.", "question_id": 8947}, {"snippet": "gc.get_count()", "intent": "Return the current collection counts as a tuple of ( count0 , count1 , count2 ) .", "question_id": 4179}, {"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}, {"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}, {"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}, {"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}, {"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}, {"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}, {"snippet": "dict.pop(key, default)", "intent": "If `key` is in the dictionary , remove it and return its value , else return `default` .", "question_id": 9486}, {"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}, {"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}, {"snippet": "kevent.data", "intent": "Filter specific data.", "question_id": 8207}, {"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300}, {"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}, {"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}, {"snippet": "subprocess.CompletedProcess", "intent": "The return value from run(), representing a process that has finished.", "question_id": 9577}, {"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}, {"snippet": "unicodedata.decimal(chr)", "intent": "Returns the decimal value assigned to the character `chr` as integer .", "question_id": 11344}, {"snippet": "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`, `MIMEtype`.", "question_id": 5868}, {"snippet": "asyncio.Semaphore(loop=None)", "intent": "A Semaphore object . With arguments `loop`.", "question_id": 583}, {"snippet": "lock.acquire(timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12954}, {"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}, {"snippet": "loop.create_server(protocol_factory, flags=socket.AI_PASSIVE)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `flags`.", "question_id": 236}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stderr=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 540}, {"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "errno.EDESTADDRREQ", "intent": "Destination address required", "question_id": 3594}, {"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}, {"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}, {"snippet": "iterator.__iter__()", "intent": "Return the iterator object itself .", "question_id": 9152}, {"snippet": "widget.set(value)", "intent": "Sets the `value` of the combobox to value .", "question_id": 10600}, {"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022}, {"snippet": "class.get_methods()", "intent": "Return a tuple containing the names of methods declared in the class .", "question_id": 9752}, {"snippet": "dict.values()", "intent": "Return a new view of the dictionary \u2019 s values .", "question_id": 9493}, {"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}, {"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}, {"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}, {"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}, {"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}, {"snippet": "context.to_eng_string(x)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `x`.", "question_id": 2573}, {"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}, {"snippet": "timeit.repeat(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10488}, {"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}, {"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}, {"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}, {"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}, {"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}, {"snippet": "compile(source, filename, mode, flags=0, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3997}, {"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}, {"snippet": "smtpd.MailmanProxy(localaddr, remoteaddr)", "intent": "Create a new pure proxy server . Everything will be relayed to `remoteaddr` , unless local mailman configurations knows about an address , in which case it will be handled via mailman . With arguments `localaddr`.", "question_id": 8426}, {"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}, {"snippet": "ac_in_buffer_size", "intent": "The asynchronous input buffer size (default 4096).", "question_id": 168}, {"snippet": "context.remainder_near(x, y)", "intent": "Returns `x` - `y` * n , where n is the integer nearest the exact value of x / y ( if the result is 0 then its sign will be the sign of x ) .", "question_id": 2566}, {"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}, {"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}, {"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}, {"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}, {"snippet": "completed_process.stderr", "intent": "Captured stderr from the child process.", "question_id": 9581}, {"snippet": "ArgumentParser.format_usage()", "intent": "Return a string containing a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 107}, {"snippet": "compile(source, filename, mode, flags=0, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3997}, {"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}, {"snippet": "asyncio.Server", "intent": "Server objects are asynchronous context managers.", "question_id": 334}, {"snippet": "crypt.mksalt(method=None)", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1677}, {"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}, {"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}, {"snippet": "SSLContext.load_default_certs(purpose=Purpose.SERVER_AUTH)", "intent": "Load a set of default \u201c certification authority \u201d ( CA ) certificates from default locations . The `purpose` flag specifies what kind of CA certificates are loaded .", "question_id": 9002}, {"snippet": "connection.rollback()", "intent": "This method rolls back any changes to the database since the last call to commit ( ) .", "question_id": 8809}, {"snippet": "shlex.quote(s)", "intent": "Return a shell-escaped version of the string s. The returned value is a string that can safely be used as one token in a shell command line , for cases where you can not use a list . With arguments `s`.", "question_id": 8272}, {"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}, {"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}, {"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}, {"snippet": "locale.resetlocale(category=LC_ALL)", "intent": "Sets the locale for `category` to the default setting .", "question_id": 5381}, {"snippet": "locale.RADIXCHAR", "intent": "Get the radix character (decimal dot, decimal comma, etc.", "question_id": 5363}, {"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}, {"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}, {"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}, {"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206}, {"snippet": "DatagramProtocol.datagram_received(data, addr)", "intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "question_id": 440}, {"snippet": "FTP.retrlines(cmd)", "intent": "Retrieve a file or directory listing in ASCII transfer mode . `cmd` should be an appropriate RETR command ( see retrbinary ( ) ) or a command such as LIST or NLST ( usually just the string 'LIST ' ) .", "question_id": 3930}, {"snippet": "urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11704}, {"snippet": "codec_info.encode", "intent": "The stateless encoding and decoding functions.", "question_id": 1212}, {"snippet": "mimetypes.inited", "intent": "Flag indicating whether or not the global data structures have been initialized.", "question_id": 5950}, {"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}, {"snippet": "date.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2241}, {"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}, {"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}, {"snippet": "io.TextIOWrapper(buffer, encoding=None, newline=None)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `encoding` gives the name of the encoding that the stream will be decoded or encoded with . `newline` controls how line endings are handled .", "question_id": 5153}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}, {"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}, {"snippet": "socket.HCI_FILTER", "intent": "For use with BTPROTO_HCI.", "question_id": 8610}, {"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668}, {"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}, {"snippet": "PurePath.stem", "intent": "The final path component, without its suffix:", "question_id": 7252}, {"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}, {"snippet": "raw_config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1589}, {"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}, {"snippet": "imp.new_module(name)", "intent": "Return a new empty module object called `name` .", "question_id": 4765}, {"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}, {"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}, {"snippet": "xml.dom.DomstringSizeErr", "intent": "Raised when a specified range of text does not fit into a string.", "question_id": 12381}, {"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}, {"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}, {"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}, {"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}, {"snippet": "msvcrt.open_osfhandle(handle, flags)", "intent": "Create a C runtime file descriptor from the file `handle` handle . The `flags` parameter should be a bitwise OR of os.O_APPEND , os.O_RDONLY , and os.O_TEXT .", "question_id": 6153}, {"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}, {"snippet": "uu.decode(in_file, quiet=False)", "intent": "This call decodes uuencoded file `in_file` placing the result on file `out_file` . Setting `quiet` to a true value silences this warning .", "question_id": 11928}, {"snippet": "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . `path` is the name of a Unix domain socket , and is required , unless a `sock` argument is provided . With arguments `protocol_factory`, `backlog`.", "question_id": 250}, {"snippet": "loop.connect_write_pipe(protocol_factory, pipe)", "intent": "Register the write end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 302}, {"snippet": "@functools.wraps(wrapped)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`.", "question_id": 4160}, {"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}, {"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}, {"snippet": "oss_audio_device.speed(samplerate)", "intent": "Try to set the audio sampling rate to `samplerate` samples per second .", "question_id": 7187}, {"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}, {"snippet": "decimal.sqrt(context=None)", "intent": "Return the square root of the argument to full precision . With arguments `context`.", "question_id": 2477}, {"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}, {"snippet": "secrets.choice(sequence)", "intent": "Return a randomly-chosen element from a non-empty `sequence` .", "question_id": 8132}, {"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}, {"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}, {"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}, {"snippet": "BaseHandler.add_parent(director)", "intent": "Add a `director` as parent .", "question_id": 11840}, {"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}, {"snippet": "null_translations.info()", "intent": "Return the \u201c protected \u201d _info variable , a dictionary containing the metadata found in the message catalog file .", "question_id": 4254}, {"snippet": "SSLContext.session_stats()", "intent": "Get statistics about the SSL sessions created or managed by this context .", "question_id": 9042}, {"snippet": "subprocess.run(args, stdin=None)", "intent": "Run the command described by `args` . The input argument is passed to Popen.communicate ( ) and thus to the subprocess \u2019 s `stdin` .", "question_id": 9568}, {"snippet": "Cmd.onecmd(str)", "intent": "Interpret the argument as though it had been typed in response to the prompt . If there is a do_* ( ) method for the command `str` , the return value of that method is returned , otherwise the return value from the default ( ) method is returned .", "question_id": 1137}, {"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}, {"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}, {"snippet": "os.altsep", "intent": "An alternative character used by the operating system to separate pathname components, or None if only one separator character exists.", "question_id": 7124}, {"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}, {"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}, {"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}, {"snippet": "SSLContext.wrap_socket(sock, server_side=False, server_hostname=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . On client connections , the optional parameter `server_hostname` specifies the hostname of the service which we are connecting to .", "question_id": 9030}, {"snippet": "test.support.unix_shell", "intent": "Path for shell if not on Windows; otherwise None.", "question_id": 10113}, {"snippet": "base_http_request_handler.handle()", "intent": "Calls handle_one_request ( ) once ( or , if persistent connections are enabled , multiple times ) to handle incoming HTTP requests .", "question_id": 4634}, {"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}, {"snippet": "email.parser.Parser(policy=policy.compat32)", "intent": "This class is parallel to BytesParser , but handles string input . With arguments `policy`.", "question_id": 3386}, {"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}, {"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}, {"snippet": "tkinter.tix.Meter", "intent": "The Meter widget can be used to show the progress of a background job which may take a long time to execute.", "question_id": 10558}, {"snippet": "operator.__ge__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6523}, {"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}, {"snippet": "doctest.DocFileSuite(*paths, globs=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . The setUp function can access the test globals as the `globs` attribute of the test passed . With arguments `*paths`.", "question_id": 2801}, {"snippet": "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . If `respect_handler_level` is True , a handler \u2019 s level is respected ( compared with the level for the message ) when deciding whether to pass messages to that handler ; otherwise , the behaviour is as in previous Python versions - to always pass each message to each handler . With arguments `*handlers`.", "question_id": 5558}, {"snippet": "traceback.print_exc(limit=None, file=None)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10749}, {"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}, {"snippet": "os.sched_get_priority_min(policy)", "intent": "Get the minimum priority value for `policy` .", "question_id": 7105}, {"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}, {"snippet": "pyclbr.readmodule(module)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package .", "question_id": 7706}, {"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}, {"snippet": "queue.full()", "intent": "Return True if there are maxsize items in the queue .", "question_id": 451}, {"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}, {"snippet": "InputSource.getByteStream()", "intent": "Get the byte stream for this input source .", "question_id": 12641}, {"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}, {"snippet": "asyncio.open_connection(family=0)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `family`.", "question_id": 469}, {"snippet": "test_case.assertAlmostEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . With arguments `msg`.", "question_id": 11419}, {"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}, {"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}, {"snippet": "timeit.Timer(stmt='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals .", "question_id": 10498}, {"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}, {"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813}, {"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}, {"snippet": "readline.redisplay()", "intent": "Change what \u2019 s displayed on the screen to reflect the current contents of the line buffer .", "question_id": 8020}, {"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}, {"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}, {"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}, {"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}, {"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}, {"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}, {"snippet": "chunk.Chunk(file, align=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries .", "question_id": 1076}, {"snippet": "IMAP4.xatom()", "intent": "Allow simple extension commands notified by server in CAPABILITY response .", "question_id": 4753}, {"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}, {"snippet": "bytes.isalnum()", "intent": "Return true if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty , false otherwise .", "question_id": 9381}, {"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}, {"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}, {"snippet": "math.log(x, base)", "intent": "With one argument , return the natural logarithm of `x` ( to `base` e ) .", "question_id": 5907}, {"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}, {"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}, {"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}, {"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}, {"snippet": "socket.setdefaulttimeout(timeout)", "intent": "Set the default `timeout` in seconds ( float ) for new socket objects .", "question_id": 8668}, {"snippet": "subprocess.STARTF_USESHOWWINDOW", "intent": "Specifies that the STARTUPINFO.wShowWindow attribute contains additional information.", "question_id": 9646}, {"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909}, {"snippet": "policy.header_store_parse(name, value)", "intent": "The email package calls this method with the `name` and `value` provided by the application program when the application program is modifying a Message programmatically ( as opposed to a Message created by a parser ) .", "question_id": 3424}, {"snippet": "cgihttp_request_handler.do_POST()", "intent": "This method serves the 'POST ' request type , only allowed for CGI scripts .", "question_id": 4668}, {"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}, {"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}, {"snippet": "copyreg.pickle(type, function, constructor=None)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type . The optional `constructor` parameter , if provided , is a callable object which can be used to reconstruct the object when called with the tuple of arguments returned by function at pickling time .", "question_id": 1667}, {"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "AU_read.rewind()", "intent": "Rewind the file pointer to the beginning of the audio stream .", "question_id": 9716}, {"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}, {"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}, {"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}, {"snippet": "bdb.Breakpoint(self, file, line, cond=None, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`, `cond`.", "question_id": 760}, {"snippet": "Codec.decode(input, errors)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1263}, {"snippet": "gzip.compress(data)", "intent": "Compress the `data` , returning a bytes object containing the compressed data .", "question_id": 4294}, {"snippet": "struct.calcsize(format)", "intent": "Return the size of the struct ( and hence of the bytes object produced by pack ( `format` , ... ) ) corresponding to the format string format .", "question_id": 9557}, {"snippet": "datetime.min", "intent": "The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None).", "question_id": 2269}, {"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}, {"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}, {"snippet": "errno.ECHILD", "intent": "No child processes", "question_id": 3515}, {"snippet": "traceback.print_exception(etype, value, tb, file=None, chain=True)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . If `chain` is true ( the default ) , then chained exceptions ( the __cause__ or __context__ attributes of the exception ) will be printed as well , like the interpreter itself does when printing an unhandled exception . With arguments `etype`, `value`.", "question_id": 10743}, {"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}, {"snippet": "subprocess.PIPE", "intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened.", "question_id": 9584}, {"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544}, {"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}, {"snippet": "operator.getitem(a, b)", "intent": "Return the value of `a` at index `b` .", "question_id": 6575}, {"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}, {"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}, {"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}, {"snippet": "FTP_TLS.auth()", "intent": "Set up a secure control connection by using TLS or SSL , depending on what is specified in the ssl_version attribute .", "question_id": 3969}, {"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204}, {"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}, {"snippet": "cgi.parse_qsl(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1043}, {"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}, {"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}, {"snippet": "window.getch(y)", "intent": "Get a character . With arguments `y`.", "question_id": 2052}, {"snippet": "_func_ptr.restype", "intent": "Assign a ctypes type to specify the result type of the foreign function.", "question_id": 1787}, {"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}, {"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}, {"snippet": "oss_audio_device.close()", "intent": "Explicitly close the audio device .", "question_id": 7178}, {"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}, {"snippet": "config_parser.items(section)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1556}, {"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}, {"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}, {"snippet": "turtle.ontimer(fun)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11079}, {"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}, {"snippet": "os.P_PID", "intent": "These are the possible values for idtype in waitid().", "question_id": 7072}, {"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}, {"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}, {"snippet": "netrc.NetrcParseError", "intent": "Exception raised by the netrc class when syntactical errors are encountered in source text.", "question_id": 6386}, {"snippet": "sys.__interactivehook__", "intent": "When this attribute exists, its value is automatically called (with no arguments) when the interpreter is launched in interactive mode.", "question_id": 9817}, {"snippet": "email_message.make_alternative(boundary=None)", "intent": "Convert a non-multipart or a multipart/related into a multipart/alternative , moving any existing Content- headers and payload into a ( new ) first part of the multipart . If `boundary` is specified , use it as the boundary string in the multipart , otherwise leave the boundary to be automatically created when it is needed ( for example , when the message is serialized ) .", "question_id": 3297}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}, {"snippet": "datetime.timetz()", "intent": "Return time object with same hour , minute , second , microsecond , fold , and tzinfo attributes .", "question_id": 2283}, {"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}, {"snippet": "turtle.begin_fill()", "intent": "To be called just before drawing a shape to be filled .", "question_id": 10965}, {"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}, {"snippet": "widget.set(item)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` .", "question_id": 10658}, {"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}, {"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "tracemalloc.is_tracing()", "intent": "True if the tracemalloc module is tracing Python memory allocations , False otherwise .", "question_id": 10846}, {"snippet": "asyncio.open_unix_connection(path=None, loop=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `path`, `loop`.", "question_id": 491}, {"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}, {"snippet": "locale.currency(val, symbol=True)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "question_id": 5393}, {"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}, {"snippet": "urllib.parse.quote_plus(string, errors=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `errors`.", "question_id": 11716}, {"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}, {"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}, {"snippet": "Telnet.read_until(expected, timeout=None)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10010}, {"snippet": "subprocess.CREATE_NO_WINDOW", "intent": "A Popen creationflags parameter to specify that a new process will not create a window.", "question_id": 9655}, {"snippet": "ur_lopener.version", "intent": "Variable that specifies the user agent of the opener object.", "question_id": 11904}, {"snippet": "set -= other | ...", "intent": "Update the set, removing elements found in others.", "question_id": 9459}, {"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "See the documentation for the functions explained above . With arguments `function`, `*args`, `**kwds`.", "question_id": 7359}, {"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}, {"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}, {"snippet": "json_encoder.doc", "intent": "The JSON document being parsed.", "question_id": 5337}, {"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}, {"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}, {"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}, {"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}, {"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}, {"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}, {"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}, {"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}, {"snippet": "mimetypes.types_map", "intent": "Dictionary mapping filename extensions to MIME types.", "question_id": 5954}, {"snippet": "subprocess.getstatusoutput(cmd)", "intent": "Return ( exitcode , output ) of executing `cmd` in a shell .", "question_id": 9689}, {"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}, {"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}, {"snippet": "audioop.alaw2lin(fragment, width)", "intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 682}, {"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}, {"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}, {"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}, {"snippet": "traceback_exception.extract(frame_gen, capture_locals=False)", "intent": "Construct a StackSummary object from a frame generator ( such as is returned by walk_stack ( ) or walk_tb ( ) ) . If `limit` is supplied , only this many frames are taken from `frame_gen` . If `capture_locals` is True the local variables in each FrameSummary are captured as object representations .", "question_id": 10826}, {"snippet": "asyncio.as_completed(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently . With arguments `loop`.", "question_id": 616}, {"snippet": "datetime.astimezone()", "intent": "Return a datetime object with new tzinfo attribute `tz` , adjusting the date and time data so the result is the same UTC time as self , but in tz \u2019 s local time .", "question_id": 2294}, {"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}, {"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}, {"snippet": "dict.clear()", "intent": "Remove all items from the dictionary .", "question_id": 9478}, {"snippet": "curses.panel.bottom_panel()", "intent": "Returns the bottom panel in the panel stack .", "question_id": 2141}, {"snippet": "unittest.mock.Mock(**kwargs, wraps=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `wraps`.", "question_id": 11564}, {"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}, {"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004}, {"snippet": "stringprep.in_table_a1(code)", "intent": "Determine whether `code` is in tableA.1 ( Unassigned code points in Unicode 3.2 ) .", "question_id": 9531}, {"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}, {"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}, {"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961}, {"snippet": "faulthandler.enable(file=sys.stderr, all_threads=True)", "intent": "Enable the fault handler : install handlers for the SIGSEGV , SIGFPE , SIGABRT , SIGBUS and SIGILL signals to dump the Python traceback . The `file` must be kept open until the fault handler is disabled : see issue with file descriptors . If `all_threads` is True , produce tracebacks for every running thread .", "question_id": 3719}, {"snippet": "stream_writer.write(object)", "intent": "Writes the `object` \u2019 s contents encoded to the stream .", "question_id": 1281}, {"snippet": "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively . If the `buffer_size` is omitted it defaults to DEFAULT_BUFFER_SIZE .", "question_id": 5131}, {"snippet": "date.isoformat()", "intent": "Return a string representing the date in ISO 8601 format , \u2018 YYYY-MM-DD \u2019 .", "question_id": 2242}, {"snippet": "queue_listener.filter(record)", "intent": "Applies this logger \u2019 s filters to the `record` and returns a true value if the record is to be processed .", "question_id": 5579}, {"snippet": "locale.currency(val, symbol=True, grouping=False, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default . If `grouping` is true ( which is not the default ) , grouping is done with the value . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5399}, {"snippet": "shlex.push_token(str)", "intent": "Push the argument onto the token stack . With arguments `str`.", "question_id": 8284}, {"snippet": "buffered_io_base.write(b)", "intent": "Write the given bytes-like object , `b` , and return the number of bytes written ( always equal to the length of b in bytes , since if the write fails an OSError will be raised ) .", "question_id": 5098}, {"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}, {"snippet": "traceback.format_exception(etype, value, tb)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`.", "question_id": 10777}, {"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}, {"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}, {"snippet": "chain.from_iterable(iterable)", "intent": "Alternate constructor for chain ( ) . Gets chained inputs from a single `iterable` argument that is evaluated lazily .", "question_id": 5242}, {"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}, {"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}, {"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}, {"snippet": "traceback.format_stack(f=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10788}, {"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}, {"snippet": "unpickler.find_class(module, name)", "intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "question_id": 7408}, {"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}, {"snippet": "base_server.server_activate()", "intent": "Called by the server \u2019 s constructor to activate the server .", "question_id": 8780}, {"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}, {"snippet": "turtle.setworldcoordinates(llx, lly, urx, ury)", "intent": "Set up user-defined coordinate system and switch to mode \u201c world \u201d if necessary . With arguments `llx`, `lly`, `urx`, `ury`.", "question_id": 11055}, {"snippet": "time.replace(tzinfo=self.tzinfo)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2339}, {"snippet": "Request.get_full_url()", "intent": "Return the URL given in the constructor .", "question_id": 11829}, {"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}, {"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}, {"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289}, {"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118}, {"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}, {"snippet": "readline.insert_text(string)", "intent": "Insert text into the line buffer at the cursor position . With arguments `string`.", "question_id": 8019}, {"snippet": "text_calendar.pryear(theyear, w=2, l=1)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `l`.", "question_id": 951}, {"snippet": "FTP.delete(filename)", "intent": "Remove the file named `filename` from the server .", "question_id": 3960}, {"snippet": "window.getbegyx()", "intent": "Return a tuple ( y , x ) of co-ordinates of upper-left corner .", "question_id": 2049}, {"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}, {"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032}, {"snippet": "OSError()", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) .", "question_id": 3649}, {"snippet": "email.message.EmailMessage()", "intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "question_id": 3222}, {"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}, {"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}, {"snippet": "email.utils.formatdate(timeval=None, localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3472}, {"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}, {"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}, {"snippet": "itertools.islice(iterable, start, stop, step)", "intent": "Make an iterator that returns selected elements from the `iterable` . If `start` is non-zero , then elements from the iterable are skipped until start is reached . If `stop` is None , then iteration continues until the iterator is exhausted , if at all ; otherwise , it stops at the specified position . Afterward , elements are returned consecutively unless `step` is set higher than one which results in items being skipped .", "question_id": 5256}, {"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}, {"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}, {"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}, {"snippet": "message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3004}, {"snippet": "urllib.request.ProxyDigestAuthHandler(password_mgr=None)", "intent": "Handle authentication with the proxy . `password_mgr` , if given , should be something that is compatible with HTTPPasswordMgr ; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported .", "question_id": 11800}, {"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}, {"snippet": "subprocess.STARTUPINFO()", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation .", "question_id": 9625}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, repr=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2187}, {"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287}, {"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}, {"snippet": "ssl.create_default_context(cafile=None)", "intent": "Return a new SSLContext object with default settings for the given `purpose` . `cafile` , `capath` , `cadata` represent optional CA certificates to trust for certificate verification , as in SSLContext.load_verify_locations ( ) .", "question_id": 8865}, {"snippet": "xmlrpc.client.dumps(params, methodname=None, encoding=None)", "intent": "Convert `params` into an XML-RPC request . If methodresponse is true , only a single value can be returned , meaning that params must be of length 1. `encoding` , if supplied , is the encoding to use in the generated XML ; the default is UTF-8 . With arguments `methodname`.", "question_id": 12704}, {"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}, {"snippet": "ssl.HAS_SNI", "intent": "Whether the OpenSSL library has built-in support for the Server Name Indication extension (as defined in RFC 6066).", "question_id": 8948}, {"snippet": "binhex.Error", "intent": "Exception raised when something can\u2019t be encoded using the binhex format (for example, a filename is too long to fit in the filename field), or when input is not properly encoded binhex data.", "question_id": 851}, {"snippet": "test.support.find_unused_port()", "intent": "Returns an unused port that should be suitable for binding .", "question_id": 10261}, {"snippet": "turtle.mode(mode=None)", "intent": "Set turtle `mode` ( \u201c standard \u201d , \u201c logo \u201d or \u201c world \u201d ) and perform reset .", "question_id": 11093}, {"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}, {"snippet": "threading.main_thread()", "intent": "Return the main Thread object .", "question_id": 10345}, {"snippet": "window.addstr(y, x, str, attr)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2010}, {"snippet": "asyncio.gather(*aws, loop=None)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`, `loop`.", "question_id": 600}, {"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}, {"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}, {"snippet": "http.cookiejar.DefaultCookiePolicy(hide_cookie2=False)", "intent": "Constructor arguments should be passed as keyword arguments only . With arguments `hide_cookie2`.", "question_id": 4482}, {"snippet": "message.preamble", "intent": "The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string.", "question_id": 3028}, {"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}, {"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}, {"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}, {"snippet": "logging.handlers.SocketHandler(host, port)", "intent": "Returns a new instance of the SocketHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5482}, {"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "threading.Semaphore(value=1)", "intent": "This class implements semaphore objects . A semaphore manages an atomic counter representing the number of release ( ) calls minus the number of acquire ( ) calls , plus an initial `value` .", "question_id": 10398}, {"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}, {"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}, {"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}, {"snippet": "compat32.fold_binary(name, value)", "intent": "Headers are folded using the Header folding algorithm , which preserves existing line breaks in the `value` , and wraps each resulting line to the max_line_length . With arguments `name`.", "question_id": 3450}, {"snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7393}, {"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961}, {"snippet": "email.charset.Charset()", "intent": "Map character sets to their email properties .", "question_id": 2910}, {"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}, {"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}, {"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}, {"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}, {"snippet": "stringprep.in_table_c12(code)", "intent": "Determine whether `code` is in tableC.1.2 ( Non-ASCII space characters ) .", "question_id": 9536}, {"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}, {"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}, {"snippet": "http_handler.emit(record)", "intent": "Sends the `record` to the Web server as a URL-encoded dictionary .", "question_id": 5552}, {"snippet": "Telnet.read_very_lazy()", "intent": "Return any data available in the cooked queue ( very lazy ) .", "question_id": 10016}, {"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}, {"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}, {"snippet": "auto.start", "intent": "The first index of invalid data in object.", "question_id": 3677}, {"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}, {"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}, {"snippet": "termios.tcgetattr(fd)", "intent": "Return a list containing the tty attributes for file descriptor `fd` , as follows : [ iflag , oflag , cflag , lflag , ispeed , ospeed , cc ] where cc is a list of the tty special characters ( each a string of length 1 , except the items with indices VMIN and VTIME , which are integers when these fields are defined ) .", "question_id": 10102}, {"snippet": "errno.ENOTEMPTY", "intent": "Directory not empty", "question_id": 3544}, {"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}, {"snippet": "__import__(name)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4135}, {"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}, {"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}, {"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}, {"snippet": "event.clear()", "intent": "Clear ( unset ) the event .", "question_id": 567}, {"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}, {"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}, {"snippet": "abstract_event_loop_policy.get_child_watcher()", "intent": "Get a child process watcher object .", "question_id": 378}, {"snippet": "urllib.parse.urldefrag(url)", "intent": "If `url` contains a fragment identifier , return a modified version of url with no fragment identifier , and the fragment identifier as a separate string .", "question_id": 11697}, {"snippet": "subprocess.check_call(args, stderr=None)", "intent": "Run command with arguments . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `args`.", "question_id": 9672}, {"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}, {"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}, {"snippet": "SSLSocket.getpeercert(binary_form=False)", "intent": "If there is no certificate for the peer on the other end of the connection , return None . If the `binary_form` parameter is False , and a certificate was received from the peer , this method returns a dict instance .", "question_id": 8978}, {"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, allowZip64=True)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . If `allowZip64` is True ( the default ) zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 4 GiB .", "question_id": 12800}, {"snippet": "bound_arguments.arguments", "intent": "An ordered, mutable mapping (collections.OrderedDict) of parameters\u2019 names to arguments\u2019 values.", "question_id": 5003}, {"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}, {"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}, {"snippet": "winreg.OpenKeyEx(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12144}, {"snippet": "zipimporter.find_module(fullname)", "intent": "Search for a module specified by `fullname` .", "question_id": 12883}, {"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}, {"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}, {"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}, {"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}, {"snippet": "NNTP.login(user=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6456}, {"snippet": "token.tok_name", "intent": "Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated.", "question_id": 10694}, {"snippet": "errno.EOVERFLOW", "intent": "Value too large for defined data type", "question_id": 3580}, {"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}, {"snippet": "stat.UF_COMPRESSED", "intent": "The file is stored compressed (Mac OS X 10.6+).", "question_id": 9118}, {"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684}, {"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}, {"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944}, {"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}, {"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}, {"snippet": "socket.CAN_BCM", "intent": "CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) protocol.", "question_id": 8583}, {"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}, {"snippet": "Path.owner()", "intent": "Return the name of the user owning the file .", "question_id": 7302}, {"snippet": "test_case.assertWarns(warning, msg=None)", "intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) . If only the warning and possibly the `msg` arguments are given , return a context manager so that the code under test can be written inline rather than as a function :", "question_id": 11407}, {"snippet": "executor.submit(fn, *args, **kwargs)", "intent": "Schedules the callable , `fn` , to be executed as fn ( `*args` `**kwargs` ) and returns a Future object representing the execution of the callable .", "question_id": 1440}, {"snippet": "xml_pull_parser.feed(data)", "intent": "Feed the given bytes `data` to the parser .", "question_id": 12558}, {"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}, {"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}, {"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639}, {"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}, {"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}, {"snippet": "xml.etree.ElementTree.XMLPullParser(events=None)", "intent": "A pull parser suitable for non-blocking applications . Its input-side API is similar to that of XMLParser , but instead of pushing calls to a callback target , XMLPullParser collects an internal list of parsing `events` and lets the user read from it .", "question_id": 12557}, {"snippet": "str.isprintable()", "intent": "Return true if all characters in the string are printable or the string is empty , false otherwise .", "question_id": 9210}, {"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}, {"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845}, {"snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream')", "intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . With arguments `**_params`.", "question_id": 3327}, {"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}, {"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}, {"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}, {"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}, {"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}, {"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}, {"snippet": "fileinput.input(backup='')", "intent": "Create an instance of the FileInput class . With arguments `backup`.", "question_id": 3785}, {"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}, {"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}, {"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}, {"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}, {"snippet": "HMAC.update(msg)", "intent": "Update the hmac object with `msg` .", "question_id": 4334}, {"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}, {"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}, {"snippet": "xmlrpc.client.dumps(params, methodresponse=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true .", "question_id": 12700}, {"snippet": "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE)", "intent": "Create a subprocess from `cmd` , which can be a str or a bytes string encoded to the filesystem encoding , using the platform \u2019 s \u201c shell \u201d syntax . The `protocol_factory` must be a callable returning a subclass of the SubprocessProtocol class . With arguments `**kwargs`, `stdin`.", "question_id": 322}, {"snippet": "path_finder.find_module(fullname, path=None)", "intent": "A legacy wrapper around find_spec ( ) . With arguments `fullname`, `path`.", "question_id": 4880}, {"snippet": "queue_listener.handle(record)", "intent": "Conditionally emits the specified logging `record` , depending on filters which may have been added to the handler .", "question_id": 5606}, {"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}, {"snippet": "file_loader.load_module(fullname)", "intent": "Calls super \u2019 s load_module ( ) . With arguments `fullname`.", "question_id": 4838}, {"snippet": "xml.sax.handler.ErrorHandler", "intent": "Interface used by the parser to present error and warning messages to the application.", "question_id": 12567}, {"snippet": "socket.recv_into(buffer, nbytes)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8715}, {"snippet": "nntplib.decode_header(header_str)", "intent": "Decode a header value , un-escaping any escaped non-ASCII characters . `header_str` must be a str object .", "question_id": 6502}, {"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}, {"snippet": "aifc.tell()", "intent": "Return the current write position in the output file .", "question_id": 34}, {"snippet": "base_handler.setup_environ()", "intent": "Set the environ attribute to a fully-populated WSGI environment .", "question_id": 12259}, {"snippet": "smtplib.SMTP_SSL(local_hostname=None)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class .", "question_id": 8481}, {"snippet": "configparser.ConfigParser(':'), ';'), comment_prefixes=('#')", "intent": "The main configuration parser . When `comment_prefixes` is given , it will be used as the set of substrings that prefix comments in otherwise empty lines . With arguments `':')`, `';')`.", "question_id": 1501}, {"snippet": "xml.etree.ElementTree.iterparse(source, events=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `events` is a sequence of events to report back .", "question_id": 12443}, {"snippet": "mailbox.MaildirMessage(message=None)", "intent": "A `message` with Maildir-specific behaviors .", "question_id": 5812}, {"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}, {"snippet": "pickletools.dis(pickle, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7419}, {"snippet": "audioop.getsample(fragment, width, index)", "intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "question_id": 691}, {"snippet": "typing.Mapping(Sized)", "intent": "A generic version of collections.abc.Mapping . With arguments `Sized`.", "question_id": 11258}, {"snippet": "shelve.Shelf(dict, protocol=None)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8245}, {"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "subprocess.Popen(args, cwd=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "question_id": 9608}, {"snippet": "time.clock()", "intent": "On Unix , return the current processor time as a floating point number expressed in seconds .", "question_id": 10431}, {"snippet": "pickle.DEFAULT_PROTOCOL", "intent": "An integer, the default protocol version used for pickling.", "question_id": 7362}, {"snippet": "pickletools.dis(pickle, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7419}, {"snippet": "plistlib.load(fp)", "intent": "Read a plist file . `fp` should be a readable and binary file object .", "question_id": 7547}, {"snippet": "save_signals.matches(self, d, **kwargs)", "intent": "Try to match a single dict with the supplied arguments . With arguments `self`, `d`, `**kwargs`.", "question_id": 10293}, {"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}, {"snippet": "PurePath.stem", "intent": "The final path component, without its suffix:", "question_id": 7252}, {"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}, {"snippet": "csv.register_dialect(name, dialect, **fmtparams)", "intent": "Associate `dialect` with `name` . With arguments `**fmtparams`.", "question_id": 1684}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'str'>`.", "question_id": 3044}, {"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}, {"snippet": "shutil.copytree(src, dst, copy_function=copy2)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `copy_function` is given , it must be a callable that will be used to copy each file .", "question_id": 8326}, {"snippet": "SSLContext.set_ciphers(ciphers)", "intent": "Set the available `ciphers` for sockets created with this context .", "question_id": 9015}, {"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}, {"snippet": "pprint.pprint(object)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline .", "question_id": 7643}, {"snippet": "errno.EBADFD", "intent": "File descriptor in bad state", "question_id": 3582}, {"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}, {"snippet": "datetime.timedelta(milliseconds=0)", "intent": "All arguments are optional and default to 0 . With arguments `milliseconds`.", "question_id": 2208}, {"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}, {"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}, {"snippet": "NNTP.post(data)", "intent": "Post an article using the POST command . The `data` argument is either a file object opened for binary reading , or any iterable of bytes objects ( representing raw lines of the article to be posted ) .", "question_id": 6492}, {"snippet": "UUID.is_safe", "intent": "An enumeration of SafeUUID which indicates whether the platform generated the UUID in a multiprocessing-safe way.", "question_id": 11955}, {"snippet": "email.headerregistry.AddressHeader", "intent": "Address headers are one of the most complex structured header types.", "question_id": 3158}, {"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}, {"snippet": "platform.libc_ver(lib='', version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7545}, {"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}, {"snippet": "inspect.signature(callable)", "intent": "Return a Signature object for the given `callable` :", "question_id": 4977}, {"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}, {"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}, {"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}, {"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}, {"snippet": "dispatcher.bind(address)", "intent": "Bind the socket to `address` .", "question_id": 671}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}, {"snippet": "SubprocessTransport.get_pipe_transport(fd)", "intent": "Return the transport for the communication pipe corresponding to the integer file descriptor `fd` :", "question_id": 420}, {"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}, {"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}, {"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}, {"snippet": "range(start, stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9164}, {"snippet": "test.support.modules_setup()", "intent": "Return a copy of sys.modules .", "question_id": 10250}, {"snippet": "CookiePolicy.return_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be returned to server . `request` is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header ( ) .", "question_id": 4533}, {"snippet": "widget.next(item)", "intent": "Returns the identifier of `item` \u2019 s next sibling , or \u2018 \u2019 if item is the last child of its parent .", "question_id": 10645}, {"snippet": "email.message_from_binary_file(fp)", "intent": "Return a message object structure tree from an open binary file object . This is equivalent to BytesParser ( ) .parse ( `fp` ) .", "question_id": 3400}, {"snippet": "gettext.translation(domain, localedir=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4230}, {"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}, {"snippet": "fancy_ur_lopener.prompt_user_passwd(host, realm)", "intent": "Return information needed to authenticate the user at the given `host` in the specified security `realm` .", "question_id": 11906}, {"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}, {"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}, {"snippet": "widget.insert(parent, index, **kw, iid=None)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "question_id": 10641}, {"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}, {"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}, {"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346}, {"snippet": "Pattern.finditer(string, pos, endpos)", "intent": "Similar to the finditer ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7984}, {"snippet": "ssl.OP_NO_TICKET", "intent": "Prevent client side from requesting a session ticket.", "question_id": 8944}, {"snippet": "signal.setitimer(which, seconds, interval=0.0)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8392}, {"snippet": "Cmd.cmdloop(intro=None)", "intent": "Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . The optional argument is a banner or `intro` string to be issued before the first prompt ( this overrides the intro class attribute ) .", "question_id": 1136}, {"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}, {"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH", "intent": "An end tag did not match the innermost open start tag.", "question_id": 7802}, {"snippet": "mock.__dir__()", "intent": "Mock objects limit the results of dir ( some_mock ) to useful results .", "question_id": 11586}, {"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}, {"snippet": "gc.freeze()", "intent": "Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections .", "question_id": 4184}, {"snippet": "runpy.run_module(mod_name, init_globals=None)", "intent": "Execute the code of the specified module and return the resulting module globals dictionary . The `mod_name` argument should be an absolute module name . The optional dictionary argument `init_globals` may be used to pre-populate the module \u2019 s globals dictionary before the code is executed .", "question_id": 8103}, {"snippet": "base_handler.get_scheme()", "intent": "Return the URL scheme being used for the current request .", "question_id": 12258}, {"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}, {"snippet": "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)", "intent": "Returns a new instance of the MemoryHandler class . The instance is initialized with a buffer size of `capacity` ( number of records buffered ) . If `flushLevel` is not specified , ERROR is used .", "question_id": 5530}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, loop=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `loop`.", "question_id": 527}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "intent": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.", "question_id": 7793}, {"snippet": "test.support.check__all__(test_case, module, blacklist=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `blacklist` argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise . With arguments `test_case`.", "question_id": 10280}, {"snippet": "os.dup2(fd, fd2)", "intent": "Duplicate file descriptor `fd` to `fd2` , closing the latter first if necessary .", "question_id": 6717}, {"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}, {"snippet": "time.replace(hour=self.hour)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2335}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "str.endswith(suffix)", "intent": "Return True if the string ends with the specified `suffix` , otherwise return False .", "question_id": 9191}, {"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}, {"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}, {"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}, {"snippet": "logging.FileHandler(filename, mode='a')", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . With arguments `filename`.", "question_id": 5427}, {"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}, {"snippet": "bytearray.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9268}, {"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}, {"snippet": "lzma_decompressor.check", "intent": "The ID of the integrity check used by the input stream.", "question_id": 5700}, {"snippet": "zlib.compressobj(zdict, level=-1, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `strategy` is used to tune the compression algorithm .", "question_id": 12906}, {"snippet": "textwrap.dedent(text)", "intent": "Remove any common leading whitespace from every line in `text` .", "question_id": 10323}, {"snippet": "bytes_feed_parser.close()", "intent": "Complete the parsing of all previously fed data and return the root message object .", "question_id": 3367}, {"snippet": "xml.etree.ElementTree.XMLParser(html=0)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated .", "question_id": 12547}, {"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}, {"snippet": "doctest.DocTestSuite(setUp=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2811}, {"snippet": "subprocess.run(args, stderr=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9571}, {"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}, {"snippet": "xmlrpc.client.ServerProxy(uri, encoding=None)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . The optional third argument is an `encoding` , by default UTF-8 . With arguments `uri`.", "question_id": 12671}, {"snippet": "str.islower()", "intent": "Return true if all cased characters 4 in the string are lowercase and there is at least one cased character , false otherwise .", "question_id": 9208}, {"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}, {"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}, {"snippet": "abstract_event_loop.partial", "intent": "A string of bytes read before the end of stream was reached.", "question_id": 351}, {"snippet": "turtle.ondrag(fun, btn=1)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`.", "question_id": 11028}, {"snippet": "source_loader.get_code(fullname)", "intent": "Concrete implementation of InspectLoader.get_code ( ) . With arguments `fullname`.", "question_id": 4845}, {"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}, {"snippet": "widget.selection_add(*items)", "intent": "Add items to the selection . With arguments `*items`.", "question_id": 10655}, {"snippet": "config_parser.read_file(f, source=None)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) . Optional argument `source` specifies the name of the file being read .", "question_id": 1515}, {"snippet": "codeop.compile_command(source, filename=\"<input>\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . In that case , the `filename` attribute of the code object will be filename , which defaults to ' < input > ' .", "question_id": 1305}, {"snippet": "sys.getsizeof(object, default)", "intent": "Return the size of an `object` in bytes . If given , `default` will be returned if the object does not provide means to retrieve the size .", "question_id": 9802}, {"snippet": "fileinput.hook_encoded(encoding)", "intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "question_id": 3811}, {"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}, {"snippet": "IMAP4.getannotation(mailbox, entry, attribute)", "intent": "Retrieve the specified ANNOTATIONs for `mailbox` . With arguments `entry`, `attribute`.", "question_id": 4703}, {"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}, {"snippet": "__debug__", "intent": "This constant is true if Python was not started with an -O option.", "question_id": 1607}, {"snippet": "mh.lock()", "intent": "Three locking mechanisms are used\u2014dot locking and , if available , the flock ( ) and lockf ( ) system calls .", "question_id": 5789}, {"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}, {"snippet": "queue_listener.createLock()", "intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "question_id": 5596}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE", "intent": "An attribute was used more than once in a start tag.", "question_id": 7792}, {"snippet": "SSLSocket.compression()", "intent": "Return the compression algorithm being used as a string , or None if the connection isn \u2019 t compressed .", "question_id": 8981}, {"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}, {"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}, {"snippet": "doctest.set_unittest_reportflags(flags)", "intent": "Set the doctest reporting `flags` to use .", "question_id": 2816}, {"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}, {"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}, {"snippet": "buffered_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` and return the number of bytes read .", "question_id": 5096}, {"snippet": "audioop.avg(fragment, width)", "intent": "Return the average over all samples in the `fragment` . With arguments `width`.", "question_id": 683}, {"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}, {"snippet": "SSLContext.get_ca_certs()", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates .", "question_id": 9011}, {"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}, {"snippet": "shlex.pop_source()", "intent": "Pop the last-pushed input source from the input stack .", "question_id": 8289}, {"snippet": "scheduler.enterabs(time, priority, action, kwargs={})", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) . `kwargs` is a dictionary holding the keyword arguments for action .", "question_id": 8120}, {"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}, {"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}, {"snippet": "csv.excel_tab", "intent": "The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.", "question_id": 1712}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}, {"snippet": "min(arg1, arg2, *args)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4057}, {"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}, {"snippet": "email.headerregistry.HeaderRegistry(base_class=BaseHeader, default_class=UnstructuredHeader, use_default_map=True)", "intent": "This is the factory used by EmailPolicy by default . HeaderRegistry builds the class used to create a header instance dynamically , using `base_class` and a specialized class retrieved from a registry that it holds . When a given header name does not appear in the registry , the class specified by `default_class` is used as the specialized class . When `use_default_map` is True ( the default ) , the standard mapping of header names to classes is copied in to the registry during initialization .", "question_id": 3182}, {"snippet": "smtp_channel.mailfrom", "intent": "Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client.", "question_id": 8443}, {"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}, {"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}, {"snippet": "configparser.NoSectionError", "intent": "Exception raised when a specified section is not found.", "question_id": 1592}, {"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}, {"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}, {"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}, {"snippet": "scheduler.run(blocking=True)", "intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "question_id": 8129}, {"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}, {"snippet": "email_message.iter_attachments()", "intent": "Return an iterator over all of the immediate sub-parts of the message that are not candidate \u201c body \u201d parts .", "question_id": 3288}, {"snippet": "Telnet.read_very_lazy()", "intent": "Return any data available in the cooked queue ( very lazy ) .", "question_id": 10016}, {"snippet": "window.is_linetouched(line)", "intent": "Return True if the specified `line` was modified since the last call to refresh ( ) ; otherwise return False .", "question_id": 2089}, {"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}, {"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}, {"snippet": "mailbox.mbox(path)", "intent": "A subclass of Mailbox for mailboxes in mbox format . With arguments `path`.", "question_id": 5768}, {"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}, {"snippet": "mime_version_header.minor", "intent": "The minor version number as an integer", "question_id": 3166}, {"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}, {"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}, {"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}, {"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}, {"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}, {"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}, {"snippet": "dircmp.report_partial_closure()", "intent": "Print a comparison between a and b and common immediate subdirectories .", "question_id": 3765}, {"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}, {"snippet": "test_case.assertWarnsRegex(warning, regex, msg=None)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` . With arguments `msg`.", "question_id": 11410}, {"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}, {"snippet": "loop.create_server(protocol_factory, backlog=100)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `backlog`.", "question_id": 238}, {"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}, {"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}, {"snippet": "platform.platform(aliased=0, terse=0)", "intent": "Returns a single string identifying the underlying platform with as much useful information as possible . If `aliased` is true , the function will use aliases for various platforms that report system names which differ from their common names , for example SunOS will be reported as Solaris . Setting `terse` to true causes the function to return only the absolute minimum information needed to identify the platform .", "question_id": 7471}, {"snippet": "pkgutil.walk_packages(prefix='', onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7455}, {"snippet": "str.split(maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9243}, {"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}, {"snippet": "doctest.testmod(name=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional argument `name` gives the name of the module ; by default , or if None , m.__name__ is used .", "question_id": 2778}, {"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}, {"snippet": "auto.winerror", "intent": "Under Windows, this gives you the native Windows error code.", "question_id": 3655}, {"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}, {"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}, {"snippet": "difflib.Differ()", "intent": "Optional keyword parameters `linejunk` and `charjunk` are for filter functions ( or None ) :", "question_id": 2690}, {"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}, {"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}, {"snippet": "Path.touch(exist_ok=True)", "intent": "Create a file at this given path . If the file already exists , the function succeeds if `exist_ok` is true ( and its modification time is updated to the current time ) , otherwise FileExistsError is raised .", "question_id": 7319}, {"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}, {"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}, {"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}, {"snippet": "queue_listener.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on this logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5570}, {"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}, {"snippet": "IMAP4.select(mailbox='INBOX')", "intent": "Select a `mailbox` .", "question_id": 4730}, {"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}, {"snippet": "base_handler.get_scheme()", "intent": "Return the URL scheme being used for the current request .", "question_id": 12258}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}, {"snippet": "importlib.util.cache_from_source(path, optimization=None)", "intent": "Return the PEP 3147/PEP 488 `path` to the byte-compiled file associated with the source path . The `optimization` parameter is used to specify the optimization level of the bytecode file .", "question_id": 4923}, {"snippet": "process.daemon", "intent": "The process\u2019s daemon flag, a Boolean value.", "question_id": 6181}, {"snippet": "Wave_read.close()", "intent": "Close the stream if it was opened by wave , and make the instance unusable .", "question_id": 12050}, {"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}, {"snippet": "print(*objects, sep=' ', flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4082}, {"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, loop=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`, `loop`.", "question_id": 541}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}, {"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}, {"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}, {"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}, {"snippet": "memoryview(obj)", "intent": "Create a memoryview that references `obj` .", "question_id": 9411}, {"snippet": "window.untouchwin()", "intent": "Mark all lines in the window as unchanged since the last call to refresh ( ) .", "question_id": 2128}, {"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}, {"snippet": "math.pow(x, y)", "intent": "Return `x` raised to the power `y` .", "question_id": 5912}, {"snippet": "turtle.reset()", "intent": "Delete the turtle \u2019 s drawings from the screen , re-center the turtle and set variables to the default values .", "question_id": 10967}, {"snippet": "mmap.read_byte()", "intent": "Returns a byte at the current file position as an integer , and advances the file position by 1 .", "question_id": 6011}, {"snippet": "test.support.gc_collect()", "intent": "Force as many objects as possible to be collected .", "question_id": 10192}, {"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}, {"snippet": "maildir_message.get_date()", "intent": "Return the delivery date of the message as a floating-point number representing seconds since the epoch .", "question_id": 5819}, {"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}, {"snippet": "webbrowser.register(name, constructor)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12110}, {"snippet": "types.MethodWrapperType", "intent": "The type of bound methods of some built-in data types and base classes.", "question_id": 11193}, {"snippet": "test.support.check_syntax_error(testcase, statement, errtext='')", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError .", "question_id": 10232}, {"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823}, {"snippet": "test.support.script_helper.spawn_python(*args, **kw)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`.", "question_id": 10303}, {"snippet": "array.tobytes()", "intent": "Convert the array to an array of machine values and return the bytes representation ( the same sequence of bytes that would be written to a file by the tofile ( ) method . )", "question_id": 136}, {"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}, {"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}, {"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}, {"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}, {"snippet": "Queue.get(block=True)", "intent": "Remove and return an item from the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 7855}, {"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}, {"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}, {"snippet": "sync_manager.Value(typecode, value)", "intent": "Create an object with a writable `value` attribute and return a proxy for it . With arguments `typecode`.", "question_id": 6312}, {"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}, {"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}, {"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . The type of socket opened depends on the `socktype` argument , which defaults to socket.SOCK_DGRAM and thus opens a UDP socket . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5499}, {"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}, {"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}, {"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}, {"snippet": "i_pv4_network.network_address", "intent": "The network address for the network.", "question_id": 5196}, {"snippet": "library_loader.LoadLibrary(name)", "intent": "Load a shared library into the process and return it . With arguments `name`.", "question_id": 1780}, {"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}, {"snippet": "doctest.DocTestRunner(checker=None, optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `checker` specifies the OutputChecker object ( or drop-in replacement ) that should be used to compare the expected outputs to the actual outputs of doctest examples . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2866}, {"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}, {"snippet": "zipapp.create_archive(source, target=None, interpreter=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12773}, {"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}, {"snippet": "smtplib.LMTP()", "intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client .", "question_id": 8488}, {"snippet": "POP3.dele(which)", "intent": "Flag message number `which` for deletion .", "question_id": 7612}, {"snippet": "fraction.__round__()", "intent": "The first version returns the nearest int to self , rounding half to even .", "question_id": 3875}, {"snippet": "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2641}, {"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}, {"snippet": "loop.create_server(protocol_factory, ssl=None)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`, `ssl`.", "question_id": 239}, {"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}, {"snippet": "unittest.main(testLoader=unittest.defaultTestLoader)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "question_id": 11550}, {"snippet": "str.maketrans(x, y)", "intent": "This static method returns a translation table usable for str.translate ( ) . If there are two arguments , they must be strings of equal length , and in the resulting dictionary , each character in `x` will be mapped to the character at the same position in `y` .", "question_id": 9221}, {"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}, {"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}, {"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}, {"snippet": "html_diff.make_table(fromlines, tolines)", "intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted .", "question_id": 2618}, {"snippet": "NNTP.post(data)", "intent": "Post an article using the POST command . The `data` argument is either a file object opened for binary reading , or any iterable of bytes objects ( representing raw lines of the article to be posted ) .", "question_id": 6492}, {"snippet": "os.makedirs(name, mode=0o777)", "intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . With arguments `name`.", "question_id": 6867}, {"snippet": "TarInfo.mtime", "intent": "Time of last modification.", "question_id": 9983}, {"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}, {"snippet": "message.set_type(type, requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3015}, {"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}, {"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}, {"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}, {"snippet": "OpenerDirector.open(url)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11837}, {"snippet": "urllib.parse.quote_plus(string, errors=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `errors`.", "question_id": 11716}, {"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}, {"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}, {"snippet": "signature.bind_partial(*args, **kwargs)", "intent": "Works the same way as Signature.bind ( ) , but allows the omission of some required arguments ( mimics functools.partial ( ) behavior . ) With arguments `*args`, `**kwargs`.", "question_id": 4987}, {"snippet": "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)", "intent": "Called for each declared attribute for an element `type` . `elname` is the name of the element to which the declaration applies and `attname` is the name of the attribute declared . The attribute type is a string passed as type ; the possible values are 'CDATA ' , 'ID ' , 'IDREF ' , \u2026 `default` gives the default value for the attribute used when the attribute is not specified by the document instance , or None if there is no default value ( # IMPLIED values ) . If the attribute is `required` to be given in the document instance , required will be true .", "question_id": 7759}, {"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}, {"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}, {"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}, {"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}, {"snippet": "widget.insert(parent, index, **kw, iid=None)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . If `iid` is specified , it is used as the item identifier ; iid must not already exist in the tree . With arguments `**kw`.", "question_id": 10641}, {"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}, {"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}, {"snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7393}, {"snippet": "future.cancel()", "intent": "Attempt to cancel the call .", "question_id": 1468}, {"snippet": "subprocess.check_output(args, errors=None)", "intent": "Run command with arguments and return its output . This behaviour may be overridden by setting text , encoding , `errors` , or `universal_newlines` to True as described in Frequently Used Arguments and run ( ) . With arguments `args`.", "question_id": 9685}, {"snippet": "email.utils.quote(str)", "intent": "Return a new string with backslashes in `str` replaced by two backslashes , and double quotes replaced by backslash-double quote .", "question_id": 3458}, {"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}, {"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}, {"snippet": "pyc_invalidation_mode.CHECKED_HASH", "intent": "The .pyc file includes a hash of the source file content, which Python will compare against the source at runtime to determine if the .pyc file needs to be regenerated.", "question_id": 7833}, {"snippet": "timeit.timeit(timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10479}, {"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text')", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3211}, {"snippet": "time.clock_settime_ns(clk_id, time: int)", "intent": "Similar to clock_settime ( ) but set time with nanoseconds . With arguments `clk_id`, `time: int`.", "question_id": 10437}, {"snippet": "opname", "intent": "human readable name for operation", "question_id": 2735}, {"snippet": "winreg.KEY_ENUMERATE_SUB_KEYS", "intent": "Required to enumerate the subkeys of a registry key.", "question_id": 12169}, {"snippet": "webbrowser.open(url, new=0, autoraise=True)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12105}, {"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}, {"snippet": "loop.getnameinfo(sockaddr)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.", "question_id": 299}, {"snippet": "oss_mixer_device.set_recsrc(bitmask)", "intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "question_id": 7209}, {"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}, {"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}, {"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}, {"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}, {"snippet": "fraction.from_float(flt)", "intent": "This class method constructs a Fraction representing the exact value of `flt` , which must be a float .", "question_id": 3869}, {"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}, {"snippet": "test.support.open_urlresource(url, *args, **kw)", "intent": "Open `url` . With arguments `*args`, `**kw`.", "question_id": 10239}, {"snippet": "py_compile.compile(file, optimize=-1)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `optimize` controls the optimization level and is passed to the built-in compile ( ) function .", "question_id": 7825}, {"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}, {"snippet": "fcntl.ioctl(fd, request, arg=0, mutate_flag=True)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . If a mutable buffer is passed , then the behaviour is determined by the value of the `mutate_flag` parameter . With arguments `fd`.", "question_id": 3745}, {"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}, {"snippet": "BaseProtocol.connection_lost(exc)", "intent": "Called when the connection is lost or closed . With arguments `exc`.", "question_id": 432}, {"snippet": "Packer.pack_double(value)", "intent": "Packs the double-precision floating point number `value` .", "question_id": 12276}, {"snippet": "Path.chmod(mode)", "intent": "Change the file `mode` and permissions , like os.chmod ( ) :", "question_id": 7268}, {"snippet": "symtable.SymbolTable", "intent": "A namespace table for a block.", "question_id": 9733}, {"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}, {"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}, {"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}, {"snippet": "scheduler.run(blocking=True)", "intent": "Run all scheduled events . If `blocking` is false executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler ( if any ) .", "question_id": 8129}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}, {"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}, {"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}, {"snippet": "http.client.HTTPResponse(sock, method=None, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `method`, `url`.", "question_id": 4408}, {"snippet": "dumbdbm.sync()", "intent": "Synchronize the on-disk directory and data files .", "question_id": 2389}, {"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}, {"snippet": "Queue.put(item, block=True)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7850}, {"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}, {"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}, {"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}, {"snippet": "sunau.AUDIO_FILE_MAGIC", "intent": "An integer every valid Sun AU file begins with, stored in big-endian form.", "question_id": 9694}, {"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}, {"snippet": "locale.setlocale(category)", "intent": "If `locale` is given and not None , setlocale ( ) modifies the locale setting for the `category` .", "question_id": 5350}, {"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}, {"snippet": "str.format_map(mapping)", "intent": "Similar to str.format ( **mapping ) , except that `mapping` is used directly and not copied to a dict .", "question_id": 9198}, {"snippet": "queue_handler.emit(record)", "intent": "Enqueues the result of preparing the LogRecord . This can result in the `record` silently being dropped ( if logging.raiseExceptions is False ) or a message printed to sys.stderr ( if logging.raiseExceptions is True ) .", "question_id": 5554}, {"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}, {"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}, {"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}, {"snippet": "venv.EnvBuilder(system_site_packages=False, symlinks=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `symlinks`.", "question_id": 11980}, {"snippet": "os.R_OK", "intent": "Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively.", "question_id": 6829}, {"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}, {"snippet": "email.charset.add_charset(charset, header_enc=None, body_enc=None)", "intent": "Add character properties to the global registry . `charset` is the input character set , and must be the canonical name of a character set . Optional `header_enc` and `body_enc` is either Charset.QP for quoted-printable , Charset.BASE64 for base64 encoding , Charset.SHORTEST for the shortest of quoted-printable or base64 encoding , or None for no encoding .", "question_id": 2930}, {"snippet": "dataclasses.field(default=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function .", "question_id": 2168}, {"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}, {"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}, {"snippet": "text_io_base.read(size=-1)", "intent": "Read and return at most `size` characters from the stream as a single str .", "question_id": 5139}, {"snippet": "connection.close()", "intent": "This closes the database connection .", "question_id": 8810}, {"snippet": "bytes.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of subsequence `sub` in the range [ `start` , `end` ] .", "question_id": 9269}, {"snippet": "winreg.REG_SZ", "intent": "A null-terminated string.", "question_id": 12187}, {"snippet": "doctest.DocTestSuite(module=None, globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2814}, {"snippet": "joinable_queue.send(obj)", "intent": "Send an object to the other end of the connection which should be read using recv ( ) . With arguments `obj`.", "question_id": 6230}, {"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}, {"snippet": "SSLContext.verify_mode", "intent": "Whether to try to verify other peers\u2019 certificates and how to behave if verification fails.", "question_id": 9051}, {"snippet": "uuid.UUID()", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11937}, {"snippet": "ctypes._SimpleCData", "intent": "This non-public class is the base class of all fundamental ctypes data types.", "question_id": 1853}, {"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}, {"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}, {"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}, {"snippet": "secrets.randbelow(n)", "intent": "Return a random int in the range [ 0 , `n` ) .", "question_id": 8133}, {"snippet": "bytearray.expandtabs()", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size .", "question_id": 9379}, {"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}, {"snippet": "bytecode.from_traceback(tb)", "intent": "Construct a Bytecode instance from the given traceback , setting current_offset to the instruction responsible for the exception . With arguments `tb`.", "question_id": 2699}, {"snippet": "widget.bbox(item)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) .", "question_id": 10620}, {"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976}, {"snippet": "context_var.name", "intent": "The name of the variable.", "question_id": 1639}, {"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}, {"snippet": "widget.exists(item)", "intent": "Returns True if the specified `item` is present in the tree .", "question_id": 10629}, {"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}, {"snippet": "http.client.HTTP_PORT", "intent": "The default port for the HTTP protocol (always 80).", "question_id": 4424}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}, {"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}, {"snippet": "style.theme_create(themename, parent=None, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10689}, {"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859}, {"snippet": "os.path.samefile(path1, path2)", "intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "question_id": 7166}, {"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}, {"snippet": "test.support.run_in_subinterp(code)", "intent": "Run `code` in subinterpreter .", "question_id": 10270}, {"snippet": "differ.compare(a, b)", "intent": "Compare two sequences of lines , and generate the delta ( `a` sequence of lines ) . With arguments `b`.", "question_id": 2694}, {"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}, {"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}, {"snippet": "unittest.mock.patch(target, **kwargs, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11611}, {"snippet": "FileCookieJar.load(filename=None)", "intent": "Load cookies from a file . With arguments `filename`.", "question_id": 4507}, {"snippet": "widget.xview(*args)", "intent": "Query or modify horizontal position of the treeview . With arguments `*args`.", "question_id": 10670}, {"snippet": "cmath.isclose(a, b)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise .", "question_id": 1116}, {"snippet": "SimpleQueue.put_nowait(item)", "intent": "Equivalent to put ( `item` ) , provided for compatibility with Queue.put_nowait ( ) .", "question_id": 7867}, {"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}, {"snippet": "decimal.logical_invert()", "intent": "logical_invert ( ) is a logical operation .", "question_id": 2437}, {"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}, {"snippet": "cgihttp_request_handler.do_POST()", "intent": "This method serves the 'POST ' request type , only allowed for CGI scripts .", "question_id": 4668}, {"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}, {"snippet": "FTP.login(passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3917}, {"snippet": "urllib.request.urlcleanup()", "intent": "Cleans up temporary files that may have been left behind by previous calls to urlretrieve ( ) .", "question_id": 11889}, {"snippet": "os.getenv(key)", "intent": "Return the value of the environment variable `key` if it exists , or `default` if it doesn \u2019 t .", "question_id": 6668}, {"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}, {"snippet": "urllib.request.HTTPCookieProcessor()", "intent": "A class to handle HTTP Cookies .", "question_id": 11782}, {"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}, {"snippet": "test_result.shouldStop", "intent": "Set to True when the execution of tests should stop by stop().", "question_id": 11513}, {"snippet": "csv.writer(csvfile, **fmtparams, dialect='excel')", "intent": "Return a writer object responsible for converting the user \u2019 s data into delimited strings on the given file-like object . `csvfile` can be any object with a write ( ) method . An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1683}, {"snippet": "asyncio.set_event_loop_policy(policy)", "intent": "Set the current process-wide `policy` to policy .", "question_id": 373}, {"snippet": "datetime.strftime(format)", "intent": "Return a string representing the date and time , controlled by an explicit `format` string .", "question_id": 2312}, {"snippet": "email.header.Header(maxlinelen=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . The maximum line length can be specified explicitly via `maxlinelen` .", "question_id": 3119}, {"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}, {"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}, {"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69}, {"snippet": "numbers.Complex", "intent": "Subclasses of this type describe complex numbers and include the operations that work on the built-in complex type.", "question_id": 6504}, {"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}, {"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}, {"snippet": "random.SystemRandom(seed)", "intent": "Class that uses the os.urandom ( ) function for generating random numbers from sources provided by the operating system . Accordingly , the `seed` ( ) method has no effect and is ignored .", "question_id": 7920}, {"snippet": "collections.namedtuple(typename, field_names)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format .", "question_id": 1376}, {"snippet": "threading.Semaphore(value=1)", "intent": "This class implements semaphore objects . A semaphore manages an atomic counter representing the number of release ( ) calls minus the number of acquire ( ) calls , plus an initial `value` .", "question_id": 10398}, {"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}, {"snippet": "PurePath.with_name(name)", "intent": "Return a new path with the `name` changed .", "question_id": 7260}, {"snippet": "sysconfig.get_path(name, scheme, vars)", "intent": "Return an installation path corresponding to the path `name` , from the install `scheme` named scheme . If `vars` is provided , it must be a dictionary of variables that will update the dictionary return by get_config_vars ( ) .", "question_id": 9863}, {"snippet": "logging.Formatter(fmt=None)", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used .", "question_id": 5611}, {"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object .", "question_id": 12550}, {"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}, {"snippet": "control.condition(action, condition)", "intent": "Make an entry into the ControlCondition table for this control . With arguments `action`, `condition`.", "question_id": 6131}, {"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}, {"snippet": "dict.update()", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9492}, {"snippet": "base_http_request_handler.date_time_string()", "intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "question_id": 4655}, {"snippet": "asyncio.Queue(maxsize=0, loop=None)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite . With arguments `loop`.", "question_id": 448}, {"snippet": "bytes_generator.write(s)", "intent": "Encode `s` using the ASCII codec and the surrogateescape error handler , and pass it to the write method of the outfp passed to the BytesGenerator \u2019 s constructor .", "question_id": 3091}, {"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}, {"snippet": "nntplib.NNTP(host, port=119, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6416}, {"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}, {"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}, {"snippet": "BufferedProtocol.buffer_updated(nbytes)", "intent": "Called when the buffer was updated with the received data . `nbytes` is the total number of bytes that were written to the buffer .", "question_id": 438}, {"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874}, {"snippet": "inspect.getouterframes(frame, context=1)", "intent": "Get a list of `frame` records for a frame and all outer frames . With arguments `context`.", "question_id": 5026}, {"snippet": "str.capitalize()", "intent": "Return a copy of the string with its first character capitalized and the rest lowercased .", "question_id": 9178}, {"snippet": "lzma.open(filename, mode=\"rb\")", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to .", "question_id": 5657}, {"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}, {"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}, {"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}, {"snippet": "future.add_done_callback(callback, context=None)", "intent": "Add a `callback` to be run when the Future is done . An optional keyword-only `context` argument allows specifying a custom contextvars.Context for the callback to run in .", "question_id": 367}, {"snippet": "widget.identify_row(y)", "intent": "Returns the item ID of the item at position `y` .", "question_id": 10635}, {"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}, {"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}, {"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}, {"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324}, {"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}, {"snippet": "turtle.shape()", "intent": "Set turtle shape to shape with given `name` or , if name is not given , return name of current shape .", "question_id": 10982}, {"snippet": "dispatcher.listen(backlog)", "intent": "Listen for connections made to the socket . The `backlog` argument specifies the maximum number of queued connections and should be at least 1 ; the maximum value is system-dependent ( usually 5 ) .", "question_id": 670}, {"snippet": "os.utime(path, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6968}, {"snippet": "logging.handlers.HTTPHandler(host, url)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . With arguments `url`.", "question_id": 5541}, {"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931}, {"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}, {"snippet": "zipfile.ZipFile(file, compression=ZIP_STORED, compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12801}, {"snippet": "inspect.isfunction(object)", "intent": "Return true if the `object` is a Python function , which includes functions created by a lambda expression .", "question_id": 4951}, {"snippet": "TarFile.add(name, arcname=None)", "intent": "Add the file `name` to the archive . If given , `arcname` specifies an alternative name for the file in the archive .", "question_id": 9950}, {"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}, {"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}, {"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}, {"snippet": "task.get_stack(limit=None)", "intent": "Return the list of stack frames for this Task . The optional `limit` argument sets the maximum number of frames to return ; by default all available frames are returned .", "question_id": 635}, {"snippet": "decimal.ROUND_CEILING", "intent": "Round towards Infinity.", "question_id": 2577}, {"snippet": "symbol_table.has_children()", "intent": "Return True if the block has nested namespaces within it .", "question_id": 9740}, {"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}, {"snippet": "test.support.script_helper.interpreter_requires_environment()", "intent": "Return True if sys.executable interpreter requires environment variables in order to be able to run at all .", "question_id": 10299}, {"snippet": "winreg.HKEY_DYN_DATA", "intent": "This key is not used in versions of Windows after 98.", "question_id": 12161}, {"snippet": "symbol.sym_name", "intent": "Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated.", "question_id": 9731}, {"snippet": "structure._fields_", "intent": "A sequence defining the structure fields.", "question_id": 1890}, {"snippet": "env_builder.setup_python(context)", "intent": "Creates a copy or symlink to the Python executable in the environment . With arguments `context`.", "question_id": 11985}, {"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}, {"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}, {"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}, {"snippet": "stream_reader.readline(size, keepends)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method . If `keepends` is false line-endings will be stripped from the lines returned .", "question_id": 1290}, {"snippet": "cgi.print_environ_usage()", "intent": "Print a list of useful ( used by CGI ) environment variables in HTML .", "question_id": 1056}, {"snippet": "r_lock.acquire()", "intent": "Acquire a lock , blocking or non-blocking .", "question_id": 6258}, {"snippet": "os.spawnv(mode, path, args)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7057}, {"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094}, {"snippet": "http.cookies.BaseCookie()", "intent": "This class is a dictionary-like object whose keys are strings and whose values are Morsel instances .", "question_id": 4579}, {"snippet": "mailbox.discard(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5727}, {"snippet": "errno.ELIBEXEC", "intent": "Cannot exec a shared library directly", "question_id": 3588}, {"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}, {"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}, {"snippet": "io.IOBase", "intent": "The abstract base class for all I/O classes, acting on streams of bytes.", "question_id": 5063}, {"snippet": "unicodedata.numeric(chr, default)", "intent": "Returns the numeric value assigned to the character `chr` as float . If no such value is defined , `default` is returned , or , if not given , ValueError is raised .", "question_id": 11347}, {"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}, {"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}, {"snippet": "fcntl.lockf(fd, cmd, len=0, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3751}, {"snippet": "node_visitor.visit(node)", "intent": "Visit a `node` .", "question_id": 160}, {"snippet": "window.immedok(flag)", "intent": "If `flag` is True , any change in the window image automatically causes the window to be refreshed ; you no longer have to call refresh ( ) yourself .", "question_id": 2068}, {"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352}, {"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687}, {"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}, {"snippet": "signal.SIG_UNBLOCK", "intent": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be unblocked.", "question_id": 8383}, {"snippet": "pool.starmap(func, iterable)", "intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] .", "question_id": 6351}, {"snippet": "signal.NSIG", "intent": "One more than the number of the highest signal number.", "question_id": 8378}, {"snippet": "Match.lastindex", "intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "question_id": 8011}, {"snippet": "imaplib.IMAP4(port=IMAP4_PORT)", "intent": "This class implements the actual IMAP4 protocol . If `port` is omitted , the standard IMAP4 port ( 143 ) is used .", "question_id": 4671}, {"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}, {"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}, {"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}, {"snippet": "bisect.insort_left(a, x)", "intent": "Insert `x` in `a` in sorted order .", "question_id": 864}, {"snippet": "errno.ENOMEM", "intent": "Out of memory", "question_id": 3517}, {"snippet": "charset.output_codec", "intent": "The name of the Python codec used to convert Unicode to the output_charset.", "question_id": 2917}, {"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}, {"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}, {"snippet": "Option.help", "intent": "Help text to print for this option when listing all available options after the user supplies a help option (such as --help).", "question_id": 6636}, {"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}, {"snippet": "os.forkpty()", "intent": "Fork a child process , using a new pseudo-terminal as the child \u2019 s controlling terminal .", "question_id": 7036}, {"snippet": "test_suite.debug()", "intent": "Run the tests associated with this suite without collecting the result .", "question_id": 11486}, {"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851}, {"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}, {"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}, {"snippet": "HMAC.copy()", "intent": "Return a copy ( \u201c clone \u201d ) of the hmac object .", "question_id": 4337}, {"snippet": "decimal.Subnormal", "intent": "Exponent was lower than Emin prior to rounding.", "question_id": 2592}, {"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}, {"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}, {"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}, {"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}, {"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}, {"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}, {"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}, {"snippet": "i_pv4_address.is_private", "intent": "True if the address is allocated for private networks.", "question_id": 5181}, {"snippet": "test_loader.loadTestsFromNames(names)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name .", "question_id": 11496}, {"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}, {"snippet": "print(*objects, sep=' ', end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4080}, {"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}, {"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}, {"snippet": "asyncio.LimitOverrunError", "intent": "Reached the buffer size limit while looking for a separator.", "question_id": 352}, {"snippet": "math.degrees(x)", "intent": "Convert angle `x` from radians to degrees .", "question_id": 5922}, {"snippet": "oss_mixer_device.set_recsrc(bitmask)", "intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "question_id": 7209}, {"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}, {"snippet": "chunk.seek(pos, whence=0)", "intent": "Set the chunk \u2019 s current position . The `whence` argument is optional and defaults to 0 ( absolute file positioning ) ; other values are 1 ( seek relative to the current position ) and 2 ( seek relative to the file \u2019 s end ) . With arguments `pos`.", "question_id": 1088}, {"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "json_encoder.default(o)", "intent": "Implement this method in a subclass such that it returns a serializable object for `o` , or calls the base implementation ( to raise a TypeError ) .", "question_id": 5332}, {"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773}, {"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}, {"snippet": "sync_manager.dict()", "intent": "Create a shared dict object and return a proxy for it .", "question_id": 6313}, {"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}, {"snippet": "UUID.is_safe", "intent": "An enumeration of SafeUUID which indicates whether the platform generated the UUID in a multiprocessing-safe way.", "question_id": 11955}, {"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}, {"snippet": "subprocess.CREATE_NEW_CONSOLE", "intent": "The new process has a new console, instead of inheriting its parent\u2019s console (the default).", "question_id": 9647}, {"snippet": "asyncio.BaseProtocol", "intent": "Base protocol with methods that all protocols share.", "question_id": 426}, {"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}, {"snippet": "test_case.assertIsNot(first, second, msg=None)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object . With arguments `msg`.", "question_id": 11386}, {"snippet": "email_message.get_boundary()", "intent": "Return the value of the boundary parameter of the Content-Type header of the message , or `failobj` if either the header is missing , or has no boundary parameter .", "question_id": 3276}, {"snippet": "dbm.dumb.open(filename)", "intent": "Open a dumbdbm database and return a dumbdbm object . The `filename` argument is the basename of the database file ( without any specific extensions ) .", "question_id": 2388}, {"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}, {"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}, {"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}, {"snippet": "xml.etree.ElementTree.XML(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12470}, {"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}, {"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}, {"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}, {"snippet": "resource_reader.contents()", "intent": "Returns an iterable of strings over the contents of the package .", "question_id": 4822}, {"snippet": "control.mapping(event, attribute)", "intent": "Make an entry into the EventMapping table for this control . With arguments `event`, `attribute`.", "question_id": 6130}, {"snippet": "bytes.replace(old, new)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` .", "question_id": 9308}, {"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}, {"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}, {"snippet": "callable(object)", "intent": "Return True if the `object` argument appears callable , False if not .", "question_id": 3989}, {"snippet": "os.putenv(key, value)", "intent": "Set the environment variable named `key` to the string `value` .", "question_id": 6692}, {"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}, {"snippet": "bz2.compress(data)", "intent": "Compress `data` , a bytes-like object .", "question_id": 906}, {"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}, {"snippet": "FTP.dir()", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output .", "question_id": 3958}, {"snippet": "subprocess.SW_HIDE", "intent": "Hides the window.", "question_id": 9644}, {"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}, {"snippet": "set.union(*others)", "intent": "Return a new set with elements from the set and all others . With arguments `*others`.", "question_id": 9445}, {"snippet": "warnings.filterwarnings(action, category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `category`.", "question_id": 12025}, {"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}, {"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}, {"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}, {"snippet": "SSLSocket.read(len=1024)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance .", "question_id": 8972}, {"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}, {"snippet": "re.sub(pattern, repl, string, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . With arguments `flags`.", "question_id": 7953}, {"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}, {"snippet": "OSError(errno, strerror, filename)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . The particular subclass depends on the final `errno` value . With arguments `strerror`, `filename`.", "question_id": 3652}, {"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340}, {"snippet": "resource.RLIMIT_NICE", "intent": "The ceiling for the process\u2019s nice level (calculated as 20 - rlim_cur).", "question_id": 8088}, {"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}, {"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}, {"snippet": "str.translate(table)", "intent": "Return a copy of the string in which each character has been mapped through the given translation `table` .", "question_id": 9254}, {"snippet": "typing.Union", "intent": "Union type; Union[X, Y] means either X or Y.", "question_id": 11333}, {"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}, {"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}, {"snippet": "base_handler.error_headers", "intent": "The HTTP headers used for error responses.", "question_id": 12264}, {"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}, {"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}, {"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}, {"snippet": "test_result.wasSuccessful()", "intent": "Return True if all tests run so far have passed , otherwise returns False .", "question_id": 11518}, {"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}, {"snippet": "buffered_io_base.readinto1(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , using at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5097}, {"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}, {"snippet": "multiprocessing.Pipe()", "intent": "Returns a pair ( conn1 , conn2 ) of Connection objects representing the ends of a pipe .", "question_id": 6194}, {"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}, {"snippet": "process.terminate()", "intent": "Stop the child process .", "question_id": 551}, {"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}, {"snippet": "cgi.parse_multipart(fp, pdict, errors=\"replace\")", "intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding . With arguments `errors`.", "question_id": 1049}, {"snippet": "xml.sax.handler.all_properties", "intent": "List of all known property names.", "question_id": 12569}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}, {"snippet": "future.result(timeout=None)", "intent": "Return the value returned by the call . If the call hasn \u2019 t yet completed then this method will wait up to `timeout` seconds .", "question_id": 1473}, {"snippet": "Node.toprettyxml()", "intent": "Return a pretty-printed version of the document .", "question_id": 12413}, {"snippet": "prototype(func_spec, paramflags)", "intent": "Returns a foreign function exported by a shared library . `func_spec` must be a 2-tuple ( name_or_ordinal , library ) . With arguments `paramflags`.", "question_id": 1803}, {"snippet": "BufferError", "intent": "Raised when a buffer related operation cannot be performed.", "question_id": 3633}, {"snippet": "VMADDR*", "intent": "Constants for Linux host/guest communication.", "question_id": 8604}, {"snippet": "socket.socketpair(family, type)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8624}, {"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}, {"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}, {"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}, {"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}, {"snippet": "email.utils.formatdate()", "intent": "Returns a date string as per RFC 2822 , e.g .", "question_id": 3468}, {"snippet": "locale.normalize(localename)", "intent": "Returns a normalized locale code for the given locale name . With arguments `localename`.", "question_id": 5379}, {"snippet": "unicodedata.numeric(chr)", "intent": "Returns the numeric value assigned to the character `chr` as float .", "question_id": 11348}, {"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}, {"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}, {"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}, {"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}, {"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}, {"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}, {"snippet": "XMLReader.setLocale(locale)", "intent": "Allow an application to set the `locale` for errors and warnings .", "question_id": 12622}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}, {"snippet": "mh.__delitem__(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5787}, {"snippet": "dis.Bytecode(x)", "intent": "Analyse the bytecode corresponding to a function , generator , asynchronous generator , coroutine , method , string of source code , or a code object ( as returned by compile ( ) ) . With arguments `x`.", "question_id": 2695}, {"snippet": "chain_map.new_child(m=None)", "intent": "Returns a new ChainMap containing a new map followed by all of the maps in the current instance . If `m` is specified , it becomes the new map at the front of the list of mappings ; if not specified , an empty dict is used , so that a call to d.new_child ( ) is equivalent to : ChainMap ( { } , *d.maps ) .", "question_id": 1338}, {"snippet": "Packer.pack_string(s)", "intent": "Packs a variable length string , s. The length of the string is first packed as an unsigned integer , then the string data is packed with pack_fstring ( ) . With arguments `s`.", "question_id": 12279}, {"snippet": "warnings.catch_warnings()", "intent": "A context manager that copies and , upon exit , restores the warnings filter and the showwarning ( ) function .", "question_id": 12042}, {"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}, {"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773}, {"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}, {"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}, {"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}, {"snippet": "TarFile.extractall(numeric_owner=False)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9935}, {"snippet": "bytes(source, encoding, errors)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`, `errors`.", "question_id": 3985}, {"snippet": "Packer.pack_fopaque(n, data)", "intent": "Packs a fixed length opaque `data` stream , similarly to pack_fstring ( ) . With arguments `n`.", "question_id": 12278}, {"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}, {"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}, {"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}, {"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}, {"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}, {"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}, {"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}, {"snippet": "test_case.records", "intent": "A list of logging.LogRecord objects of the matching log messages.", "question_id": 11415}, {"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}, {"snippet": "ipaddress.AddressValueError(ValueError)", "intent": "Any value error related to the address . With arguments `ValueError`.", "question_id": 5237}, {"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}, {"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11128}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "tempfile.mkdtemp()", "intent": "Creates a temporary directory in the most secure manner possible .", "question_id": 10081}, {"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}, {"snippet": "dataclasses.field(default=MISSING, default_factory=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function . As shown above , the MISSING value is a sentinel object used to detect if the default and `default_factory` parameters are provided .", "question_id": 2175}, {"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}, {"snippet": "cgi.print_environ()", "intent": "Format the shell environment in HTML .", "question_id": 1053}, {"snippet": "shutil.unpack_archive(filename, extract_dir, format)", "intent": "Unpack an archive . `filename` is the full path of the archive . `extract_dir` is the name of the target directory where the archive is unpacked . `format` is the archive format : one of \u201c zip \u201d , \u201c tar \u201d , \u201c gztar \u201d , \u201c bztar \u201d , or \u201c xztar \u201d .", "question_id": 8363}, {"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}, {"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}, {"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}, {"snippet": "struct.unpack_from(format, buffer)", "intent": "Unpack from `buffer` starting at position `offset` , according to the `format` string format .", "question_id": 9554}, {"snippet": "msvcrt.kbhit()", "intent": "Return true if a keypress is waiting to be read .", "question_id": 6155}, {"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}, {"snippet": "webbrowser.register(name, constructor, instance=None)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12111}, {"snippet": "auto.reason", "intent": "A string describing the specific codec error.", "question_id": 3675}, {"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}, {"snippet": "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `ignore_discard`, `ignore_expires`.", "question_id": 4520}, {"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}, {"snippet": "BaseCookie.output()", "intent": "Return a string representation suitable to be sent as HTTP headers .", "question_id": 4584}, {"snippet": "gettext.translation(domain, localedir=None, languages=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4235}, {"snippet": "zlib.crc32(data, value)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 0 is used .", "question_id": 12917}, {"snippet": "modulefinder.ModuleFinder(debug=0, replace_paths=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing . `replace_paths` is a list of ( oldpath , newpath ) tuples that will be replaced in module paths .", "question_id": 6044}, {"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}, {"snippet": "unittest.FunctionTestCase(testFunc)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`.", "question_id": 11473}, {"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}, {"snippet": "wsgiref.util.request_uri(environ, include_query=True)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . If `include_query` is false , the query string is not included in the resulting URI . With arguments `environ`.", "question_id": 12212}, {"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}, {"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}, {"snippet": "sqlite3.IntegrityError", "intent": "Exception raised when the relational integrity of the database is affected, e.g.", "question_id": 8859}, {"snippet": "errno.EBUSY", "intent": "Device or resource busy", "question_id": 3521}, {"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this handler .", "question_id": 5602}, {"snippet": "datetime.time(minute=0)", "intent": "All arguments are optional . With arguments `minute`.", "question_id": 2316}, {"snippet": "email.generator.Generator(outfp, policy=None)", "intent": "Return a Generator object that will write any message provided to the flatten ( ) method , or any text provided to the write ( ) method , to the file-like object `outfp` . mangle_from_ defaults to the value of the mangle_from_ setting of the `policy` ( which is True for the compat32 policy and False for all others ) .", "question_id": 3095}, {"snippet": "ctypes.OleDLL(name, use_errno=False)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `use_errno`.", "question_id": 1753}, {"snippet": "tkinter.tix.Balloon", "intent": "A Balloon that pops up over a widget to provide help.", "question_id": 10552}, {"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}, {"snippet": "gettext.find(domain)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes .", "question_id": 4221}, {"snippet": "CookiePolicy.domain_return_ok(domain, request)", "intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "question_id": 4534}, {"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}, {"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}, {"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319}, {"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}, {"snippet": "logging.addLevelName(level, levelName)", "intent": "Associates `level` level with text `levelName` in an internal dictionary , which is used to map numeric levels to a textual representation , for example when a Formatter formats a message .", "question_id": 5646}, {"snippet": "urllib.parse.quote(string)", "intent": "Replace special characters in `string` using the % xx escape .", "question_id": 11705}, {"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}, {"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}, {"snippet": "thread.run()", "intent": "Method representing the thread \u2019 s activity .", "question_id": 10363}, {"snippet": "asyncio.SelectorEventLoop", "intent": "An event loop based on the selectors module.", "question_id": 342}, {"snippet": "turtle.ScrolledCanvas(master)", "intent": "Used by class Screen , which thus automatically provides a ScrolledCanvas as playground for the turtles . With arguments `master`.", "question_id": 11163}, {"snippet": "zlib.decompressobj(zdict)", "intent": "Returns a decompression object , to be used for decompressing data streams that won \u2019 t fit into memory at once . The `zdict` parameter specifies a predefined compression dictionary .", "question_id": 12923}, {"snippet": "PyDLL._handle", "intent": "The system handle used to access the library.", "question_id": 1777}, {"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175}, {"snippet": "zlib.decompressobj(wbits=MAX_WBITS)", "intent": "Returns a decompression object , to be used for decompressing data streams that won \u2019 t fit into memory at once . The `wbits` parameter controls the size of the history buffer ( or the \u201c window size \u201d ) , and what header and trailer format is expected .", "question_id": 12926}, {"snippet": "random.normalvariate(mu, sigma)", "intent": "Normal distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7914}, {"snippet": "bytearray.fromhex(string)", "intent": "This bytearray class method returns bytearray object , decoding the given `string` object .", "question_id": 9267}, {"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}, {"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}, {"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}, {"snippet": "context.values()", "intent": "Return a list of all variables \u2019 values in the context object .", "question_id": 1659}, {"snippet": "os.getlogin()", "intent": "Return the name of the user logged in on the controlling terminal of the process .", "question_id": 6679}, {"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}, {"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}, {"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}, {"snippet": "str(object='')", "intent": "Return a string version of `object` .", "question_id": 9169}, {"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}, {"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}, {"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}, {"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}, {"snippet": "io.FileIO(name, mode='r', opener=None)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : The `mode` can be ' r ' , ' w ' , ' x ' or ' a ' for reading ( default ) , writing , exclusive creation or appending . A custom `opener` can be used by passing a callable as opener .", "question_id": 5104}, {"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}, {"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}, {"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}, {"snippet": "audioop.getsample(fragment, width, index)", "intent": "Return the value of sample `index` from the `fragment` . With arguments `width`.", "question_id": 691}, {"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}, {"snippet": "bytes.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9278}, {"snippet": "@functools.total_ordering", "intent": "Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest.", "question_id": 4150}, {"snippet": "os.tcsetpgrp(fd, pg)", "intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "question_id": 6807}, {"snippet": "codecs.encode(obj)", "intent": "Encodes `obj` using the codec registered for `encoding` .", "question_id": 1192}, {"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}, {"snippet": "shutil.ignore_patterns(*patterns)", "intent": "This factory function creates a function that can be used as a callable for copytree ( ) \u2019 s ignore argument , ignoring files and directories that match one of the glob-style patterns provided . With arguments `*patterns`.", "question_id": 8322}, {"snippet": "test_case.assertAlmostEqual(first, second, places=7)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11418}, {"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}, {"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}, {"snippet": "traceback.print_stack()", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive .", "question_id": 10761}, {"snippet": "os.chown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6839}, {"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}, {"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}, {"snippet": "tabnanny.filename_only", "intent": "Flag indicating whether to print only the filenames of files containing whitespace related problems.", "question_id": 9887}, {"snippet": "imghdr.tests", "intent": "A list of functions performing the individual tests.", "question_id": 4759}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "tempfile.TemporaryFile(mode='w+b')", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed .", "question_id": 10034}, {"snippet": "contextlib.redirect_stderr(new_target)", "intent": "Similar to redirect_stdout ( ) but redirecting sys.stderr to another file or file-like object . With arguments `new_target`.", "question_id": 1624}, {"snippet": "Match.end(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8005}, {"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}, {"snippet": "Packer.pack_string(s)", "intent": "Packs a variable length string , s. The length of the string is first packed as an unsigned integer , then the string data is packed with pack_fstring ( ) . With arguments `s`.", "question_id": 12279}, {"snippet": "random.choice(seq)", "intent": "Return a random element from the non-empty sequence `seq` .", "question_id": 7894}, {"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}, {"snippet": "stringprep.in_table_b1(code)", "intent": "Determine whether `code` is in tableB.1 ( Commonly mapped to nothing ) .", "question_id": 9532}, {"snippet": "xmlparser.ErrorColumnNumber", "intent": "Column number at which an error occurred.", "question_id": 7750}, {"snippet": "pickle.Pickler(file, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7392}, {"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340}, {"snippet": "tkinter.WRITABLE", "intent": "Constants used in the mask arguments.", "question_id": 10540}, {"snippet": "traceback.format_exception(etype, value, tb)", "intent": "Format a stack trace and the exception information . The return `value` is a list of strings , each ending in a newline and some containing internal newlines . With arguments `etype`, `tb`.", "question_id": 10777}, {"snippet": "gdbm.sync()", "intent": "When the database has been opened in fast mode , this method forces any unwritten data to be written to the disk .", "question_id": 2377}, {"snippet": "argparse.ArgumentParser(usage=None)", "intent": "Create a new ArgumentParser object . With arguments `usage`.", "question_id": 40}, {"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}, {"snippet": "os.utime(path, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` .", "question_id": 6968}, {"snippet": "ConnectionError", "intent": "A base class for connection-related issues.", "question_id": 3688}, {"snippet": "socket.sendmsg(buffers)", "intent": "Send normal and ancillary data to the socket , gathering the non-ancillary data from a series of `buffers` and concatenating it into a single message .", "question_id": 8726}, {"snippet": "quopri.encodestring(s, quotetabs=False)", "intent": "Like encode ( ) , except that it accepts a source bytes and returns the corresponding encoded bytes . By default , it sends a False value to `quotetabs` parameter of the encode ( ) function . With arguments `s`.", "question_id": 7880}, {"snippet": "locale.currency(val, symbol=True, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5397}, {"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}, {"snippet": "doctest.ELLIPSIS", "intent": "When specified, an ellipsis marker (...) in the expected output can match any substring in the actual output.", "question_id": 2755}, {"snippet": "random.expovariate(lambd)", "intent": "Exponential distribution . `lambd` is 1.0 divided by the desired mean .", "question_id": 7910}, {"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}, {"snippet": "config_parser.items(raw=False)", "intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1553}, {"snippet": "base64.a85encode(b, foldspaces=False, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 732}, {"snippet": "mailbox.Maildir(dirname)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout .", "question_id": 5754}, {"snippet": "locale.currency(val, symbol=True, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5397}, {"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}, {"snippet": "cgi.escape(s)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences .", "question_id": 1057}, {"snippet": "ArgumentParser.get_default(dest)", "intent": "Get the default value for a namespace attribute , as set by either add_argument ( ) or by set_defaults ( ) : With arguments `dest`.", "question_id": 102}, {"snippet": "Codec.encode(input, errors)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) . The `errors` argument defines the error handling to apply .", "question_id": 1261}, {"snippet": "incremental_encoder.getstate()", "intent": "Return the current state of the encoder which must be an integer .", "question_id": 1270}, {"snippet": "Pattern.findall(string, pos, endpos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7981}, {"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}, {"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}, {"snippet": "test.support.temp_cwd(quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10184}, {"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12462}, {"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}, {"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}, {"snippet": "random.Random()", "intent": "Class that implements the default pseudo-random number generator used by the random module .", "question_id": 7919}, {"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}, {"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}, {"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}, {"snippet": "xml.sax.saxutils.unescape(data)", "intent": "Unescape ' & amp ; ' , ' & lt ; ' , and ' & gt ; ' in a string of `data` .", "question_id": 12654}, {"snippet": "runpy.run_module(mod_name)", "intent": "Execute the code of the specified module and return the resulting module globals dictionary . The `mod_name` argument should be an absolute module name .", "question_id": 8102}, {"snippet": "oss_audio_device.setparameters(format, nchannels, strict=False)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods . If `strict` is true , setparameters ( ) checks to see if each parameter was actually set to the requested value , and raises OSSAudioError if not .", "question_id": 7194}, {"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}, {"snippet": "os.rename(src, dst)", "intent": "Rename the file or directory `src` to `dst` .", "question_id": 6892}, {"snippet": "connection.execute(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8811}, {"snippet": "xml.parsers.expat.ExpatError", "intent": "The exception raised when Expat reports an error.", "question_id": 7724}, {"snippet": "mock.reset_mock()", "intent": "The reset_mock method resets all the call attributes on a mock object :", "question_id": 11578}, {"snippet": "@test.support.bigmemtest(size, memuse)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it .", "question_id": 10227}, {"snippet": "loop.getnameinfo(sockaddr)", "intent": "Asynchronous version of socket.getnameinfo ( ) . With arguments `sockaddr`.", "question_id": 299}, {"snippet": "context.logical_or(x, y)", "intent": "Applies the logical operation or between each operand \u2019 s digits . With arguments `x`, `y`.", "question_id": 2547}, {"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}, {"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}, {"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}, {"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}, {"snippet": "widget.identify_element(x, y)", "intent": "Returns the element at position `x` , `y` .", "question_id": 10638}, {"snippet": "json.dumps(obj, **kw, separators=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `separators`.", "question_id": 5287}, {"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715}, {"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}, {"snippet": "sys.getfilesystemencoding()", "intent": "Return the name of the encoding used to convert between Unicode filenames and bytes filenames .", "question_id": 9798}, {"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}, {"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}, {"snippet": "itertools.repeat(object)", "intent": "Make an iterator that returns `object` over and over again .", "question_id": 5263}, {"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71}, {"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}, {"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}, {"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}, {"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, headers=None)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3046}, {"snippet": "context.multiply(x, y)", "intent": "Return the product of `x` and `y` .", "question_id": 2554}, {"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}, {"snippet": "readline.get_begidx()", "intent": "Get the beginning or ending index of the completion scope .", "question_id": 8044}, {"snippet": "Match.lastindex", "intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "question_id": 8011}, {"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}, {"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}, {"snippet": "window.chgat(y, x, attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2032}, {"snippet": "Repr.maxlevel", "intent": "Depth limit on the creation of recursive representations.", "question_id": 8055}, {"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}, {"snippet": "ctypes.wstring_at(address)", "intent": "This function returns the wide character string starting at memory `address` address as a string .", "question_id": 1840}, {"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}, {"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}, {"snippet": "inspect.getdoc(object)", "intent": "Get the documentation string for an `object` , cleaned up with cleandoc ( ) .", "question_id": 4969}, {"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}, {"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}, {"snippet": "turtle.shapetransform(t11=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11009}, {"snippet": "random.choices(population, weights=None, cum_weights=None)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7899}, {"snippet": "email.message.Message()", "intent": "If `policy` is specified ( it must be an instance of a policy class ) use the rules it specifies to update and serialize the representation of the message .", "question_id": 2936}, {"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}, {"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}, {"snippet": "abstract_event_loop_policy.get_child_watcher()", "intent": "Get a child process watcher object .", "question_id": 378}, {"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}, {"snippet": "IMAP4.xatom()", "intent": "Allow simple extension commands notified by server in CAPABILITY response .", "question_id": 4753}, {"snippet": "tempfile.NamedTemporaryFile(mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `mode`.", "question_id": 10044}, {"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}, {"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}, {"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}, {"snippet": "loop.get_exception_handler()", "intent": "Return the current exception handler , or None if no custom exception handler was set .", "question_id": 308}, {"snippet": "shelve.open(filename, writeback=False)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "question_id": 8237}, {"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}, {"snippet": "loop.sock_sendfile(sock, file, offset=0)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket . `offset` tells from where to start reading the file .", "question_id": 282}, {"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}, {"snippet": "stat.S_IRWXO", "intent": "Mask for permissions for others (not in group).", "question_id": 9105}, {"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209}, {"snippet": "asyncio.ensure_future(obj)", "intent": "Return : If `obj` is neither of the above a TypeError is raised .", "question_id": 355}, {"snippet": "base_server.server_close()", "intent": "Clean up the server .", "question_id": 8766}, {"snippet": "bytearray(source, encoding, errors)", "intent": "Return a new array of bytes . The optional `source` parameter can be used to initialize the array in a few different ways : With arguments `encoding`, `errors`.", "question_id": 3981}, {"snippet": "IMAP4.recent()", "intent": "Prompt server for an update .", "question_id": 4724}, {"snippet": "turtle.onclick(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`, `add`.", "question_id": 11022}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}, {"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}, {"snippet": "counter.subtract(iterable-or-mapping)", "intent": "Elements are subtracted from an iterable or from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1345}, {"snippet": "datetime.isocalendar()", "intent": "Return a 3-tuple , ( ISO year , ISO week number , ISO weekday ) .", "question_id": 2305}, {"snippet": "os.fstat(fd)", "intent": "Get the status of the file descriptor `fd` .", "question_id": 6723}, {"snippet": "email.headerregistry.ContentTransferEncoding", "intent": "Handles the Content-Transfer-Encoding header.", "question_id": 3173}, {"snippet": "DefaultCookiePolicy.DomainRFC2965Match", "intent": "When setting cookies, require a full RFC 2965 domain-match.", "question_id": 4554}, {"snippet": "xml.sax.handler.all_properties", "intent": "List of all known property names.", "question_id": 12569}, {"snippet": "email.errors.BoundaryError", "intent": "Deprecated and no longer used.", "question_id": 3076}, {"snippet": "base_selector.register(fileobj, events, data=None)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor . `data` is an opaque object .", "question_id": 8216}, {"snippet": "asyncio.AbstractEventLoopPolicy", "intent": "An abstract base class for asyncio policies.", "question_id": 374}, {"snippet": "Option.const", "intent": "For actions that store a constant value, the constant value to store.", "question_id": 6631}, {"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}, {"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}, {"snippet": "urllib.request.Request(url, data=None, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11777}, {"snippet": "itertools.groupby(iterable)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "question_id": 5253}, {"snippet": "window.bkgd(ch, attr)", "intent": "Set the background property of the window to the character `ch` , with attributes `attr` .", "question_id": 2015}, {"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}, {"snippet": "aifc.close()", "intent": "Close the AIFF file .", "question_id": 24}, {"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}, {"snippet": "multiprocessing.get_start_method(allow_none=False)", "intent": "Return the name of start method used for starting processes . If the start method has not been fixed and `allow_none` is false , then the start method is fixed to the default and the name is returned .", "question_id": 6227}, {"snippet": "Pattern.groupindex", "intent": "A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "question_id": 7993}, {"snippet": "FTPHandler.ftp_open(req)", "intent": "Open the FTP file indicated by `req` .", "question_id": 11875}, {"snippet": "platform.platform(aliased=0, terse=0)", "intent": "Returns a single string identifying the underlying platform with as much useful information as possible . If `aliased` is true , the function will use aliases for various platforms that report system names which differ from their common names , for example SunOS will be reported as Solaris . Setting `terse` to true causes the function to return only the absolute minimum information needed to identify the platform .", "question_id": 7471}, {"snippet": "venv.create(env_dir, clear=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `clear`.", "question_id": 11991}, {"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}, {"snippet": "timeit.Timer(setup='pass')", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10499}, {"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}, {"snippet": "decimal.logical_xor(other)", "intent": "logical_xor ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2441}, {"snippet": "math.log1p(x)", "intent": "Return the natural logarithm of 1+x ( base e ) . The result is calculated in a way which is accurate for `x` near zero .", "question_id": 5909}, {"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}, {"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}, {"snippet": "Request.add_unredirected_header(key, header)", "intent": "Add a `header` that will not be added to a redirected request . With arguments `key`.", "question_id": 11826}, {"snippet": "os.startfile(path, operation)", "intent": "Start a file with its associated application . The `path` parameter is relative to the current directory . When `operation` is not specified or 'open ' , this acts like double-clicking the file in Windows Explorer , or giving the file name as an argument to the start command from the interactive command shell : the file is opened with whatever application ( if any ) its extension is associated .", "question_id": 7066}, {"snippet": "logging.handlers.QueueListener(queue, *handlers)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . With arguments `*handlers`.", "question_id": 5557}, {"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}, {"snippet": "base_http_request_handler.path", "intent": "Contains the request path.", "question_id": 4622}, {"snippet": "zipfile.LargeZipFile", "intent": "The error raised when a ZIP file would require ZIP64 functionality but that has not been enabled.", "question_id": 12780}, {"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}, {"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}, {"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}, {"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}, {"snippet": "os.scandir()", "intent": "Return an iterator of os.DirEntry objects corresponding to the entries in the directory given by `path` .", "question_id": 6903}, {"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}, {"snippet": "threading.local", "intent": "A class that represents thread-local data.", "question_id": 10351}, {"snippet": "selector_key.data", "intent": "Optional opaque data associated to this file object: for example, this could be used to store a per-client session ID.", "question_id": 8213}, {"snippet": "os.utime(path, ns, times=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6960}, {"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}, {"snippet": "ctypes.c_void_p", "intent": "Represents the C void * type.", "question_id": 1880}, {"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}, {"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}, {"snippet": "OptionParser.get_version()", "intent": "Same as print_version ( ) but returns the version string instead of printing it .", "question_id": 6621}, {"snippet": "bdb.run(cmd, locals=None)", "intent": "Debug a statement executed via the exec ( ) function . `globals` defaults to __main__.__dict__ , `locals` defaults to globals . With arguments `cmd`.", "question_id": 809}, {"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}, {"snippet": "operator.__xor__(a, b)", "intent": "Return the bitwise exclusive or of `a` and `b` .", "question_id": 6567}, {"snippet": "call.call_list()", "intent": "For a call object that represents multiple calls , call_list ( ) returns a list of all the intermediate calls as well as the final call .", "question_id": 11648}, {"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}, {"snippet": "stat_result.st_uid", "intent": "User identifier of the file owner.", "question_id": 6926}, {"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}, {"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}, {"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}, {"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}, {"snippet": "test.support.patch(test_instance, object_to_patch, attr_name, new_value)", "intent": "Override object_to_patch.attr_name with `new_value` . Also add cleanup procedure to `test_instance` to restore `object_to_patch` for `attr_name` .", "question_id": 10269}, {"snippet": "symbol.is_imported()", "intent": "Return True if the symbol is created from an import statement .", "question_id": 9756}, {"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}, {"snippet": "string.whitespace", "intent": "A string containing all ASCII characters that are considered whitespace.", "question_id": 9515}, {"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}, {"snippet": "asyncio.PriorityQueue", "intent": "A variant of Queue; retrieves entries in priority order (lowest first).", "question_id": 459}, {"snippet": "operator.methodcaller(name, args...)", "intent": "Return a callable object that calls the method `name` on its operand . With arguments `args...`.", "question_id": 6586}, {"snippet": "os.tcgetpgrp(fd)", "intent": "Return the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) .", "question_id": 6806}, {"snippet": "__import__(name, globals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4136}, {"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}, {"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}, {"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}, {"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "env_builder.create_configuration(context)", "intent": "Creates the pyvenv.cfg configuration file in the environment . With arguments `context`.", "question_id": 11984}, {"snippet": "base_http_request_handler.send_response_only(code)", "intent": "Sends the response header only , used for the purposes when 100 Continue response is sent by the server to the client . The headers not buffered and sent directly the output stream.If the `message` is not specified , the HTTP message corresponding the response `code` is sent .", "question_id": 4644}, {"snippet": "json.dump(obj, fp, **kw, indent=None)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level . With arguments `**kw`.", "question_id": 5276}, {"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286}, {"snippet": "os.startfile(path, operation)", "intent": "Start a file with its associated application . The `path` parameter is relative to the current directory . When `operation` is not specified or 'open ' , this acts like double-clicking the file in Windows Explorer , or giving the file name as an argument to the start command from the interactive command shell : the file is opened with whatever application ( if any ) its extension is associated .", "question_id": 7066}, {"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}, {"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}, {"snippet": "is_jump_target", "intent": "True if other code jumps to here, otherwise False", "question_id": 2741}, {"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}, {"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}, {"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}, {"snippet": "round(number)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4101}, {"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}, {"snippet": "context_var.set(value)", "intent": "Call to set a new `value` for the context variable in the current context .", "question_id": 1642}, {"snippet": "decimal.compare(other)", "intent": "Compare the values of two Decimal instances . With arguments `other`.", "question_id": 2399}, {"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}, {"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}, {"snippet": "widget.set_children(item, *newchildren)", "intent": "Replaces `item` \u2019 s child with newchildren . With arguments `*newchildren`.", "question_id": 10624}, {"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247}, {"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}, {"snippet": "xml.sax.xmlreader.XMLReader", "intent": "Base class which can be inherited by SAX parsers.", "question_id": 12606}, {"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}, {"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}, {"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}, {"snippet": "sequence_matcher.get_matching_blocks()", "intent": "Return list of triples describing non-overlapping matching subsequences .", "question_id": 2683}, {"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6040}, {"snippet": "FTP.storlines(cmd, fp)", "intent": "Store a file in ASCII transfer mode . `cmd` should be an appropriate STOR command ( see storbinary ( ) ) . Lines are read until EOF from the file object `fp` ( opened in binary mode ) using its readline ( ) method to provide the data to be stored .", "question_id": 3941}, {"snippet": "path_entry_finder.find_spec(fullname, target=None)", "intent": "An abstract method for finding a spec for the specified module . When passed in , `target` is a module object that the finder may use to make a more educated guess about what spec to return . With arguments `fullname`.", "question_id": 4809}, {"snippet": "functools.update_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4158}, {"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}, {"snippet": "@test.support.bigmemtest(size, memuse, dry_run=True)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it . If `dry_run` is True , the value passed to the test method may be less than the requested value .", "question_id": 10228}, {"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}, {"snippet": "BufferedProtocol.buffer_updated(nbytes)", "intent": "Called when the buffer was updated with the received data . `nbytes` is the total number of bytes that were written to the buffer .", "question_id": 438}, {"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}, {"snippet": "os.F_OK", "intent": "Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively.", "question_id": 6828}, {"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}, {"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}, {"snippet": "winreg.KEY_WOW64_64KEY", "intent": "Indicates that an application on 64-bit Windows should operate on the 64-bit registry view.", "question_id": 12172}, {"snippet": "NameError", "intent": "Raised when a local or global name is not found.", "question_id": 3646}, {"snippet": "gdbm.sync()", "intent": "When the database has been opened in fast mode , this method forces any unwritten data to be written to the disk .", "question_id": 2377}, {"snippet": "types.DynamicClassAttribute()", "intent": "Route attribute access on a class to __getattr__ .", "question_id": 11218}, {"snippet": "os.fdatasync(fd)", "intent": "Force write of file with filedescriptor `fd` to disk .", "question_id": 6721}, {"snippet": "path_entry_finder.find_loader(fullname)", "intent": "A legacy method for finding a loader for the specified module . With arguments `fullname`.", "question_id": 4810}, {"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}, {"snippet": "ur_lopener.retrieve(url, data=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . It will be called once at the start and after each chunk of `data` is read from the network .", "question_id": 11899}, {"snippet": "operator.__lshift__(a, b)", "intent": "Return `a` shifted left by `b` .", "question_id": 6545}, {"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}, {"snippet": "email.headerregistry.BaseHeader(name, value)", "intent": "`name` and `value` are passed to BaseHeader from the header_factory call .", "question_id": 3150}, {"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}, {"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}, {"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}, {"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}, {"snippet": "test.support.start_threads(threads)", "intent": "Context manager to start `threads` .", "question_id": 10198}, {"snippet": "socketserver.ForkingTCPServer", "intent": "These classes are pre-defined using the mix-in classes.", "question_id": 8755}, {"snippet": "difflib.context_diff(a, b, fromfile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2629}, {"snippet": "BaseTransport.get_extra_info(name)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get .", "question_id": 398}, {"snippet": "timeit.Timer(stmt='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals .", "question_id": 10498}, {"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}, {"snippet": "test.support.start_threads(threads, unlock=None)", "intent": "Context manager to start `threads` . With arguments `unlock`.", "question_id": 10199}, {"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}, {"snippet": "traceback.format_stack(limit=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10789}, {"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}, {"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}, {"snippet": "FileCookieJar.revert(filename=None, ignore_discard=False)", "intent": "Clear all cookies and reload cookies from a saved file . With arguments `filename`, `ignore_discard`.", "question_id": 4518}, {"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}, {"snippet": "json.JSONDecoder()", "intent": "Simple JSON decoder .", "question_id": 5310}, {"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}, {"snippet": "select.epoll()", "intent": "( Only supported on Linux 2.5.44 and newer . )", "question_id": 8150}, {"snippet": "html_diff.__init__(wrapcolumn=None)", "intent": "Initializes instance of HtmlDiff . `wrapcolumn` is an optional keyword to specify column number where lines are broken and wrapped , defaults to None where lines are not wrapped .", "question_id": 2600}, {"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}, {"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}, {"snippet": "dis.hascompare", "intent": "Sequence of bytecodes of Boolean operations.", "question_id": 2751}, {"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}, {"snippet": "Class.module", "intent": "The name of the module defining the class described.", "question_id": 7717}, {"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}, {"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}, {"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}, {"snippet": "contextlib.nullcontext()", "intent": "Return a context manager that returns `enter_result` from __enter__ , but otherwise does nothing .", "question_id": 1620}, {"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}, {"snippet": "connection.interrupt()", "intent": "You can call this method from a different thread to abort any queries that might be executing on the connection .", "question_id": 8819}, {"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}, {"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}, {"snippet": "str(object=b'')", "intent": "Return a string version of `object` .", "question_id": 9171}, {"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225}, {"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}, {"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}, {"snippet": "unittest.mock.patch(target, **kwargs, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11611}, {"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}, {"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}, {"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}, {"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}, {"snippet": "fcntl.flock(fd, operation)", "intent": "Perform the lock `operation` operation on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3746}, {"snippet": "email.message_from_string(s, _class=None)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) . `_class` and `policy` are interpreted as with the Parser class constructor .", "question_id": 3405}, {"snippet": "code.InteractiveConsole(filename=\"<console>\")", "intent": "Closely emulate the behavior of the interactive Python interpreter . With arguments `filename`.", "question_id": 1159}, {"snippet": "struct.unpack_from(buffer)", "intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "question_id": 9562}, {"snippet": "subprocess.CalledProcessError", "intent": "Subclass of SubprocessError, raised when a process run by check_call() or check_output() returns a non-zero exit status.", "question_id": 9593}, {"snippet": "base64.a85encode(b, wrapcol=0, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 734}, {"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}, {"snippet": "ssl.VERIFY_X509_STRICT", "intent": "Possible value for SSLContext.verify_flags to disable workarounds for broken X.509 certificates.", "question_id": 8918}, {"snippet": "test.support.run_in_subinterp(code)", "intent": "Run `code` in subinterpreter .", "question_id": 10270}, {"snippet": "dict.fromkeys(iterable)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9481}, {"snippet": "gdbm.sync()", "intent": "When the database has been opened in fast mode , this method forces any unwritten data to be written to the disk .", "question_id": 2377}, {"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}, {"snippet": "kevent.fflags", "intent": "Filter specific flags.", "question_id": 8206}, {"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}, {"snippet": "winreg.SetValueEx(key, value_name, reserved, type, value)", "intent": "Stores data in the `value` field of an open registry `key` . `value_name` is a string that names the subkey with which the value is associated . `reserved` can be anything \u2013 zero is always passed to the API . `type` is an integer that specifies the type of the data .", "question_id": 12151}, {"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}, {"snippet": "curses.tparm(str)", "intent": "Instantiate the bytes object `str` with the supplied parameters , where str should be a parameterized string obtained from the terminfo database .", "question_id": 1989}, {"snippet": "SSLContext.wrap_bio(incoming, outgoing, server_side=False, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9038}, {"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`.", "question_id": 63}, {"snippet": "Pattern.pattern", "intent": "The pattern string from which the pattern object was compiled.", "question_id": 7994}, {"snippet": "directory.start_component(component=None, uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6102}, {"snippet": "OptionParser.print_usage(file=None)", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6645}, {"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}, {"snippet": "time.mktime(t)", "intent": "This is the inverse function of localtime ( ) . With arguments `t`.", "question_id": 10445}, {"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}, {"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}, {"snippet": "str.find(sub, start, end)", "intent": "Return the lowest index in the string where substring `sub` is found within the slice s [ `start` : `end` ] .", "question_id": 9194}, {"snippet": "socket.sendall(bytes)", "intent": "Send data to the socket . Unlike send ( ) , this method continues to send data from `bytes` until either all data has been sent or an error occurs .", "question_id": 8720}, {"snippet": "NNTP.date()", "intent": "Return a pair ( response , date ) .", "question_id": 6494}, {"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}, {"snippet": "xmlparser.ErrorLineNumber", "intent": "Line number at which an error occurred.", "question_id": 7751}, {"snippet": "process.join(timeout)", "intent": "If the optional argument `timeout` is None ( the default ) , the method blocks until the process whose join ( ) method is called terminates .", "question_id": 6177}, {"snippet": "configparser.RawConfigParser(':'), ';'), delimiters=('=')", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `delimiters`.", "question_id": 1583}, {"snippet": "selectors.PollSelector", "intent": "select.poll()-based selector.", "question_id": 8227}, {"snippet": "tokenize.untokenize(iterable)", "intent": "Converts tokens back into Python source code . The `iterable` must return sequences with at least two elements , the token type and the token string .", "question_id": 10702}, {"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}, {"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}, {"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}, {"snippet": "audioop.alaw2lin(fragment, width)", "intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 682}, {"snippet": "set ^ other", "intent": "Return a new set with elements in either the set or other but not both.", "question_id": 9452}, {"snippet": "http.cookiejar.LWPCookieJar(filename)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`.", "question_id": 4528}, {"snippet": "ZipFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory .", "question_id": 12820}, {"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}, {"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}, {"snippet": "configparser.InterpolationDepthError", "intent": "Exception raised when string interpolation cannot be completed because the number of iterations exceeds MAX_INTERPOLATION_DEPTH.", "question_id": 1597}, {"snippet": "email.mime.audio.MIMEAudio(_audiodata, **_params)", "intent": "Module : email.mime.audio `_audiodata` is a string containing the raw audio data . With arguments `**_params`.", "question_id": 3334}, {"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`, `metavar`.", "question_id": 74}, {"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}, {"snippet": "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.", "question_id": 4162}, {"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}, {"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326}, {"snippet": "typing.Tuple", "intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "question_id": 11335}, {"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}, {"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584}, {"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}, {"snippet": "pickletools.dis(pickle, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7418}, {"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}, {"snippet": "shutil.copyfileobj(fsrc, fdst)", "intent": "Copy the contents of the file-like object `fsrc` to the file-like object `fdst` .", "question_id": 8310}, {"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}, {"snippet": "SubprocessTransport.kill()", "intent": "Kill the subprocess .", "question_id": 422}, {"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}, {"snippet": "shlex.punctuation_chars", "intent": "A read-only property.", "question_id": 8308}, {"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}, {"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931}, {"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text')", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3211}, {"snippet": "file_handler.close()", "intent": "Closes the file .", "question_id": 5434}, {"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}, {"snippet": "sys._enablelegacywindowsfsencoding()", "intent": "Changes the default filesystem encoding and errors mode to \u2018 mbcs \u2019 and \u2018 replace \u2019 respectively , for consistency with versions of Python prior to 3.6 .", "question_id": 9843}, {"snippet": "operator.__eq__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6521}, {"snippet": "bytearray.rpartition(sep)", "intent": "Split the sequence at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9324}, {"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}, {"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}, {"snippet": "decimal.compare_total(other)", "intent": "Compare two operands using their abstract representation rather than their numerical value . With arguments `other`.", "question_id": 2403}, {"snippet": "HTTPSHandler.https_open(req)", "intent": "Send an HTTPS request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11872}, {"snippet": "tarfile.StreamError", "intent": "Is raised for the limitations that are typical for stream-like TarFile objects.", "question_id": 9905}, {"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}, {"snippet": "calendar.Calendar()", "intent": "Creates a Calendar object .", "question_id": 909}, {"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}, {"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}, {"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}, {"snippet": "stats.print_stats(*restrictions)", "intent": "This method for the Stats class prints out a report as described in the profile.run ( ) definition . With arguments `*restrictions`.", "question_id": 7695}, {"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}, {"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}, {"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}, {"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}, {"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907}, {"snippet": "multiprocessing.Manager()", "intent": "Returns a started SyncManager object which can be used for sharing objects between processes .", "question_id": 6278}, {"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}, {"snippet": "property(fget=None, fdel=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value . `fdel` is a function for deleting an attribute value .", "question_id": 4091}, {"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266}, {"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}, {"snippet": "curses.putp(str)", "intent": "Equivalent to tputs ( `str` , 1 , putchar ) ; emit the value of a specified terminfo capability for the current terminal .", "question_id": 1968}, {"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}, {"snippet": "ctypes.CDLL(name, handle=None)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `handle`.", "question_id": 1742}, {"snippet": "syslog.openlog(ident)", "intent": "Logging options of subsequent syslog ( ) calls can be set by calling openlog ( ) . The optional `ident` keyword argument is a string which is prepended to every message , and defaults to sys.argv [ 0 ] with leading path components stripped .", "question_id": 9881}, {"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}, {"snippet": "email.message_from_bytes(s)", "intent": "Return a message object structure from a bytes-like object . This is equivalent to BytesParser ( ) .parsebytes ( `s` ) .", "question_id": 3396}, {"snippet": "FTP_TLS.prot_p()", "intent": "Set up secure data connection .", "question_id": 3971}, {"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485}, {"snippet": "widget.yview(*args)", "intent": "Query or modify vertical position of the treeview . With arguments `*args`.", "question_id": 10671}, {"snippet": "base_handler.setup_environ()", "intent": "Set the environ attribute to a fully-populated WSGI environment .", "question_id": 12259}, {"snippet": "calendar.isleap(year)", "intent": "Returns True if `year` is a leap year , otherwise False .", "question_id": 987}, {"snippet": "site.getsitepackages()", "intent": "Return a list containing all global site-packages directories .", "question_id": 8409}, {"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}, {"snippet": "datetime.time", "intent": "An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds (there is no notion of \u201cleap seconds\u201d here).", "question_id": 2199}, {"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}, {"snippet": "sys.intern(string)", "intent": "Enter `string` in the table of \u201c interned \u201d strings and return the interned string \u2013 which is string itself or a copy .", "question_id": 9818}, {"snippet": "buffered_reader.peek()", "intent": "Return bytes from the stream without advancing the position .", "question_id": 5119}, {"snippet": "ctypes.c_short", "intent": "Represents the C signed short datatype.", "question_id": 1868}, {"snippet": "FTPHandler.ftp_open(req)", "intent": "Open the FTP file indicated by `req` .", "question_id": 11875}, {"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}, {"snippet": "ctypes.wstring_at(address, size=-1)", "intent": "This function returns the wide character string starting at memory `address` address as a string . If `size` is specified , it is used as the number of characters of the string , otherwise the string is assumed to be zero-terminated .", "question_id": 1841}, {"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}, {"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}, {"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}, {"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}, {"snippet": "message.as_string(unixfrom=False, maxheaderlen=0)", "intent": "Return the entire message flattened as a string . When optional `unixfrom` is true , the envelope header is included in the returned string . For backward compatibility reasons , `maxheaderlen` defaults to 0 , so if you want a different value you must override it explicitly ( the value specified for max_line_length in the `policy` will be ignored by this method ) .", "question_id": 2942}, {"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}, {"snippet": "Telnet.msg(msg, *args)", "intent": "Print a debug message when the debug level is > 0 . With arguments `msg`, `*args`.", "question_id": 10022}, {"snippet": "decimal.min_mag(other)", "intent": "Similar to the min ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2449}, {"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}, {"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}, {"snippet": "doctest.DocFileSuite(*paths, encoding=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `encoding` specifies an encoding that should be used to convert the file to unicode . With arguments `*paths`.", "question_id": 2804}, {"snippet": "@functools.lru_cache(typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4148}, {"snippet": "tracemalloc.stop()", "intent": "Stop tracing Python memory allocations : uninstall hooks on Python memory allocators .", "question_id": 10849}, {"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}, {"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}, {"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}, {"snippet": "logging.handlers.HTTPHandler(host, url)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . With arguments `url`.", "question_id": 5541}, {"snippet": "bytes.fromhex(string)", "intent": "This bytes class method returns a bytes object , decoding the given `string` object .", "question_id": 9261}, {"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}, {"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}, {"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}, {"snippet": "socketserver.UnixDatagramServer(server_address, RequestHandlerClass, bind_and_activate=True)", "intent": "These more infrequently used classes are similar to the TCP and UDP classes , but use Unix domain sockets ; they \u2019 re not available on non-Unix platforms . With arguments `server_address`, `RequestHandlerClass`, `bind_and_activate`.", "question_id": 8752}, {"snippet": "TarFile.list()", "intent": "Print a table of contents to sys.stdout .", "question_id": 9927}, {"snippet": "stat.S_IRWXG", "intent": "Mask for group permissions.", "question_id": 9101}, {"snippet": "FTP.mlsd(facts=)", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . `facts` is a list of strings representing the type of information desired ( e.g .", "question_id": 3949}, {"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, strict=True)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `strict`.", "question_id": 1576}, {"snippet": "datetime.datetime(year, month, day, hour=0, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `second`.", "question_id": 2255}, {"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}, {"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}, {"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481}, {"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}, {"snippet": "FTP.connect()", "intent": "Connect to the given `host` and `port` .", "question_id": 3904}, {"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}, {"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}, {"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}, {"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}, {"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}, {"snippet": "window.border(ls, rs, ts)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`.", "question_id": 2024}, {"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}, {"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}, {"snippet": "IMAP4.unsubscribe(mailbox)", "intent": "Unsubscribe from old `mailbox` .", "question_id": 4751}, {"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}, {"snippet": "multiprocessing.get_start_method()", "intent": "Return the name of start method used for starting processes .", "question_id": 6226}, {"snippet": "formatter.pop_style()", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3833}, {"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}, {"snippet": "stat_result.st_fstype", "intent": "String that uniquely identifies the type of the filesystem that contains the file.", "question_id": 6941}, {"snippet": "bdb.set_break(filename, lineno, cond, funcname)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "question_id": 793}, {"snippet": "random.setstate(state)", "intent": "`state` should have been obtained from a previous call to getstate ( ) , and setstate ( ) restores the internal state of the generator to what it was at the time getstate ( ) was called .", "question_id": 7888}, {"snippet": "os.pipe2(flags)", "intent": "Create a pipe with `flags` set atomically .", "question_id": 6774}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}, {"snippet": "locale.D_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent a date in a locale-specific way.", "question_id": 5356}, {"snippet": "Cmd.cmdqueue", "intent": "A list of queued input lines.", "question_id": 1148}, {"snippet": "importlib.machinery.ModuleSpec(name, loader, is_package=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . With arguments `is_package`.", "question_id": 4915}, {"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}, {"snippet": "gc.DEBUG_COLLECTABLE", "intent": "Print information on collectable objects found.", "question_id": 4190}, {"snippet": "InputSource.getCharacterStream()", "intent": "Get the character stream for this input source .", "question_id": 12643}, {"snippet": "sys.warnoptions", "intent": "This is an implementation detail of the warnings framework; do not modify this value.", "question_id": 9855}, {"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}, {"snippet": "pprint.PrettyPrinter(indent=1, depth=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . The number of levels which may be printed is controlled by `depth` ; if the data structure being printed is too deep , the next contained level is replaced by ... . By default , there is no constraint on the depth of the objects being formatted .", "question_id": 7630}, {"snippet": "http.client.HTTPConnection(host, blocksize=8192)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "question_id": 4377}, {"snippet": "timeit.timeit(globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code .", "question_id": 10481}, {"snippet": "copy.deepcopy(x, memo)", "intent": "Return a deep copy of `x` . With arguments `memo`.", "question_id": 1662}, {"snippet": "ref.__callback__", "intent": "This read-only attribute returns the callback currently associated to the weakref.", "question_id": 12076}, {"snippet": "compileall.compile_path(quiet=0)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `quiet`.", "question_id": 1433}, {"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}, {"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}, {"snippet": "widget.selection_remove(*items)", "intent": "Remove items from the selection . With arguments `*items`.", "question_id": 10656}, {"snippet": "bytes(source, encoding)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "question_id": 9258}, {"snippet": "winsound.SND_NODEFAULT", "intent": "If the specified sound cannot be found, do not play the system default sound.", "question_id": 12202}, {"snippet": "sys.intern(string)", "intent": "Enter `string` in the table of \u201c interned \u201d strings and return the interned string \u2013 which is string itself or a copy .", "question_id": 9818}, {"snippet": "Path.read_text()", "intent": "Return the decoded contents of the pointed-to file as a string :", "question_id": 7304}, {"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}, {"snippet": "bytes.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9331}, {"snippet": "turtle.end_fill()", "intent": "Fill the shape drawn after the last call to begin_fill ( ) .", "question_id": 10966}, {"snippet": "locale.getpreferredencoding()", "intent": "Return the encoding used for text data , according to user preferences .", "question_id": 5377}, {"snippet": "bdb.set_break(filename, lineno, cond, funcname, temporary=0)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`, `temporary`.", "question_id": 794}, {"snippet": "connection.cursor()", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8806}, {"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}, {"snippet": "DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)", "intent": "Handle an unparsed entity declaration event . With arguments `name`, `publicId`, `systemId`, `ndata`.", "question_id": 12584}, {"snippet": "Panel.above()", "intent": "Returns the panel above the current panel .", "question_id": 2145}, {"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}, {"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}, {"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}, {"snippet": "writer.send_label_data(data)", "intent": "Set `data` to the left of the current left margin , if possible .", "question_id": 3852}, {"snippet": "sysconfig.get_config_var(name)", "intent": "Return the value of a single variable `name` .", "question_id": 9859}, {"snippet": "code.InteractiveConsole()", "intent": "Closely emulate the behavior of the interactive Python interpreter .", "question_id": 1157}, {"snippet": "loop.getaddrinfo(host, port, family=0, type=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `type`.", "question_id": 294}, {"snippet": "email.contentmanager.set_content(msg, <'str'>)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3039}, {"snippet": "datetime.timedelta(hours=0)", "intent": "All arguments are optional and default to 0 . With arguments `hours`.", "question_id": 2210}, {"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714}, {"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}, {"snippet": "decimal.is_signed()", "intent": "Return True if the argument has a negative sign and False otherwise .", "question_id": 2424}, {"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}, {"snippet": "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)", "intent": "Load a set of \u201c certification authority \u201d ( CA ) certificates used to validate other peers \u2019 certificates when verify_mode is other than CERT_NONE . At least one of `cafile` or `capath` must be specified . The `cadata` object , if present , is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates .", "question_id": 9010}, {"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}, {"snippet": "xmlparser.ordered_attributes", "intent": "Setting this attribute to a non-zero integer causes the attributes to be reported as a list rather than a dictionary.", "question_id": 7746}, {"snippet": "DefaultCookiePolicy.strict_rfc2965_unverifiable", "intent": "Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).", "question_id": 4547}, {"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068}, {"snippet": "Match.lastindex", "intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "question_id": 8011}, {"snippet": "shlex.split(s, comments=False, posix=True)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) . This function operates in POSIX mode by default , but uses non-POSIX mode if the `posix` argument is false .", "question_id": 8271}, {"snippet": "codecs.BOM_BE", "intent": "These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "question_id": 1244}, {"snippet": "datetime.time(minute=0)", "intent": "All arguments are optional . With arguments `minute`.", "question_id": 2316}, {"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386}, {"snippet": "warnings.simplefilter(action, category=Warning)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`.", "question_id": 12034}, {"snippet": "socketserver.UnixStreamServer(server_address, RequestHandlerClass)", "intent": "These more infrequently used classes are similar to the TCP and UDP classes , but use Unix domain sockets ; they \u2019 re not available on non-Unix platforms . With arguments `server_address`, `RequestHandlerClass`.", "question_id": 8749}, {"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}, {"snippet": "mime_types.guess_all_extensions(type, strict=True)", "intent": "Similar to the guess_all_extensions ( ) function , using the tables stored as part of the object . With arguments `type`, `strict`.", "question_id": 5969}, {"snippet": "shlex.split(s, comments=False)", "intent": "Split the string `s` using shell-like syntax . If `comments` is False ( the default ) , the parsing of comments in the given string will be disabled ( setting the commenters attribute of the shlex instance to the empty string ) .", "question_id": 8269}, {"snippet": "doctest.REPORT_NDIFF", "intent": "When specified, differences are computed by difflib.Differ, using the same algorithm as the popular ndiff.py utility.", "question_id": 2761}, {"snippet": "Cmd.cmdqueue", "intent": "A list of queued input lines.", "question_id": 1148}, {"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}, {"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}, {"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}, {"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}, {"snippet": "OptionParser.add_option(*opt_str)", "intent": "To define an option with only a short option string : With arguments `*opt_str`.", "question_id": 6624}, {"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}, {"snippet": "errno.ENOTCONN", "intent": "Transport endpoint is not connected", "question_id": 3612}, {"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}, {"snippet": "datetime.timedelta(milliseconds=0)", "intent": "All arguments are optional and default to 0 . With arguments `milliseconds`.", "question_id": 2208}, {"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}, {"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}, {"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}, {"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585}, {"snippet": "urllib.request.AbstractBasicAuthHandler()", "intent": "This is a mixin class that helps with HTTP authentication , both to the remote host and to a proxy .", "question_id": 11789}, {"snippet": "OptionParser.print_version(file=None)", "intent": "Print the version message for the current program ( self.version ) to `file` ( default stdout ) .", "question_id": 6620}, {"snippet": "lzma.LZMAFile()", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5666}, {"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}, {"snippet": "os.execve(path, args, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7014}, {"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}, {"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}, {"snippet": "gc.get_referents(*objs)", "intent": "Return a list of objects directly referred to by any of the arguments . With arguments `*objs`.", "question_id": 4182}, {"snippet": "Popen.stdin", "intent": "If the stdin argument was PIPE, this attribute is a writeable stream object as returned by open().", "question_id": 9620}, {"snippet": "Match.lastindex", "intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "question_id": 8011}, {"snippet": "turtle.screensize(bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `bg`.", "question_id": 11050}, {"snippet": "pdb.set_trace(header=None)", "intent": "Enter the debugger at the calling stack frame . If given , `header` is printed to the console just before debugging begins .", "question_id": 7337}, {"snippet": "POP3.getwelcome()", "intent": "Returns the greeting string sent by the POP3 server .", "question_id": 7602}, {"snippet": "zipfile.ZipFile(file, mode='r', compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12799}, {"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}, {"snippet": "text_io_wrapper.write_through", "intent": "Whether writes are passed immediately to the underlying binary buffer.", "question_id": 5157}, {"snippet": "smtp_channel.rcpttos", "intent": "Holds a list of strings containing the addresses identified in the \u201cRCPT TO:\u201d lines from the client.", "question_id": 8444}, {"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704}, {"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}, {"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}, {"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}, {"snippet": "threading.Thread(group=None, name=None)", "intent": "This constructor should always be called with keyword arguments . `group` should be None ; reserved for future extension when a ThreadGroup class is implemented . `name` is the thread name .", "question_id": 10360}, {"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}, {"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}, {"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}, {"snippet": "inspect.isasyncgen(object)", "intent": "Return true if the `object` is an asynchronous generator iterator created by an asynchronous generator function .", "question_id": 4958}, {"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}, {"snippet": "doctest.testfile(filename, verbose=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `verbose` prints lots of stuff if true , and prints only failures if false ; by default , or if None , it \u2019 s true if and only if '-v ' is in sys.argv .", "question_id": 2771}, {"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . However , if it is necessary to check the name of the subparser that was invoked , the `dest` keyword argument to the add_subparsers ( ) call will work : Similarly , when a `help` message is requested from a subparser , only the help for that particular parser will be printed . With arguments `prog`, `parser_class`, `option_string`, `required`, `metavar`.", "question_id": 74}, {"snippet": "crypt.methods", "intent": "A list of available password hashing algorithms, as crypt.METHOD_* objects.", "question_id": 1673}, {"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}, {"snippet": "NNTP.login(user=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6452}, {"snippet": "doctest.testmod(verbose=None)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2780}, {"snippet": "multiprocessing.JoinableQueue(maxsize)", "intent": "JoinableQueue , a Queue subclass , is a queue which additionally has task_done ( ) and join ( ) methods . With arguments `maxsize`.", "question_id": 6215}, {"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}, {"snippet": "devpoll.close()", "intent": "Close the file descriptor of the polling object .", "question_id": 8169}, {"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}, {"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}, {"snippet": "winreg.DeleteKeyEx(key, sub_key, reserved=0)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `reserved` is a reserved integer , and must be zero .", "question_id": 12130}, {"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}, {"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2788}, {"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}, {"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}, {"snippet": "@test.support.bigmemtest(size, memuse)", "intent": "Decorator for bigmem tests . `size` is a requested size for the test ( in arbitrary , test-interpreted units . ) `memuse` is the number of bytes per unit for the test , or a good estimate of it .", "question_id": 10227}, {"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}, {"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}, {"snippet": "test.support.detect_api_mismatch(ref_api, other_api)", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10267}, {"snippet": "decimal.max(other)", "intent": "Like max ( self , `other` ) except that the `context` rounding rule is applied before returning and that NaN values are either signaled or ignored ( depending on the context and whether they are signaling or quiet ) .", "question_id": 2443}, {"snippet": "xml.sax.handler.all_features", "intent": "List of all features.", "question_id": 12568}, {"snippet": "pkgutil.walk_packages()", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules .", "question_id": 7449}, {"snippet": "locale.D_T_FMT", "intent": "Get a string that can be used as a format string for time.strftime() to represent date and time in a locale-specific way.", "question_id": 5355}, {"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}, {"snippet": "Pattern.finditer(string, pos)", "intent": "Similar to the finditer ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7985}, {"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}, {"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}, {"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}, {"snippet": "asyncio.ProactorEventLoop", "intent": "An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "question_id": 343}, {"snippet": "asyncio.sleep(delay, loop=None)", "intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 597}, {"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}, {"snippet": "itertools.zip_longest(*iterables, fillvalue=None)", "intent": "Make an iterator that aggregates elements from each of the iterables . If the iterables are of uneven length , missing values are filled-in with `fillvalue` . With arguments `*iterables`.", "question_id": 5269}, {"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}, {"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}, {"snippet": "doctest.DocTestFinder(verbose=False, parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2845}, {"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4313}, {"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}, {"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}, {"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}, {"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}, {"snippet": "gettext.find(domain, languages=None)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code .", "question_id": 4223}, {"snippet": "tracemalloc.stop()", "intent": "Stop tracing Python memory allocations : uninstall hooks on Python memory allocators .", "question_id": 10849}, {"snippet": "pool.map_async(func, iterable)", "intent": "A variant of the map ( ) method which returns a result object . With arguments `func`, `iterable`.", "question_id": 6345}, {"snippet": "Template.append(cmd, kind)", "intent": "Append a new action at the end . The `cmd` variable must be a valid bourne shell command . The `kind` variable consists of two letters .", "question_id": 7431}, {"snippet": "memoryview.ndim", "intent": "An integer indicating how many dimensions of a multi-dimensional array the memory represents.", "question_id": 9424}, {"snippet": "Request.full_url", "intent": "The original URL passed to the constructor.", "question_id": 11816}, {"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}, {"snippet": "dbm.dumb.open(filename, flag)", "intent": "Open a dumbdbm database and return a dumbdbm object . The `filename` argument is the basename of the database file ( without any specific extensions ) . The optional `flag` argument supports only the semantics of ' c ' and ' n ' values .", "question_id": 2387}, {"snippet": "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12125}, {"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467}, {"snippet": "fileinput.input(files=None)", "intent": "Create an instance of the FileInput class . With arguments `files`.", "question_id": 3783}, {"snippet": "io.RawIOBase", "intent": "Base class for raw binary I/O.", "question_id": 5083}, {"snippet": "doc_test_finder.find(obj, name, module, globs, extraglobs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2850}, {"snippet": "asyncio.wrap_future(future, loop=None)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`, `loop`.", "question_id": 358}, {"snippet": "element.remove(subelement)", "intent": "Removes `subelement` from the element .", "question_id": 12506}, {"snippet": "sched.scheduler(delayfunc=time.sleep)", "intent": "The scheduler class defines a generic interface to scheduling events . The `delayfunc` function should be callable with one argument , compatible with the output of timefunc , and should delay that many time units .", "question_id": 8116}, {"snippet": "platform.popen(cmd)", "intent": "Portable popen ( ) interface . With arguments `cmd`.", "question_id": 7505}, {"snippet": "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)", "intent": "Creates a StreamRecoder instance which implements a two-way conversion : `encode` and `decode` work on the frontend \u2014 the data visible to code calling read ( ) and write ( ) , while `Reader` and `Writer` work on the backend \u2014 the data in `stream` .", "question_id": 1299}, {"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}, {"snippet": "gzip.GzipFile(filename=None, compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4289}, {"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}, {"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}, {"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}, {"snippet": "math.isinf(x)", "intent": "Return True if `x` is a positive or negative infinity , and False otherwise .", "question_id": 5899}, {"snippet": "null_translations.ngettext(singular, plural, n)", "intent": "If a fallback has been set , forward ngettext ( ) to the fallback . Otherwise , return `singular` if `n` is 1 ; return `plural` otherwise .", "question_id": 4252}, {"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "calendar.monthcalendar(year, month)", "intent": "Returns a matrix representing a `month` \u2019 s calendar . With arguments `year`.", "question_id": 992}, {"snippet": "tempfile.tempdir", "intent": "When set to a value other than None, this variable defines the default value for the dir argument to the functions defined in this module.", "question_id": 10093}, {"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}, {"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}, {"snippet": "Telnet.open(host)", "intent": "Connect to a `host` .", "question_id": 10020}, {"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}, {"snippet": "test.support.wait_threads_exit()", "intent": "Context manager to wait until all threads created in the with statement exit .", "question_id": 10196}, {"snippet": "json.JSONDecoder(parse_constant=None)", "intent": "Simple JSON decoder . `parse_constant` , if specified , will be called with one of the following strings : '-Infinity ' , 'Infinity ' , 'NaN ' .", "question_id": 5314}, {"snippet": "list.sort(key=None)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) .", "question_id": 9157}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}, {"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}, {"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}, {"snippet": "turtle.showturtle()", "intent": "Make the turtle visible .", "question_id": 10979}, {"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}, {"snippet": "loop.shutdown_asyncgens()", "intent": "Schedule all currently open asynchronous generator objects to close with an aclose ( ) call .", "question_id": 188}, {"snippet": "configparser.ConfigParser(':'), ';'), defaults=None)", "intent": "The main configuration parser . When `defaults` is given , it is initialized into the dictionary of intrinsic defaults . With arguments `':')`, `';')`.", "question_id": 1497}, {"snippet": "os.makedirs(name, exist_ok=False)", "intent": "Recursive directory creation function . If `exist_ok` is False ( the default ) , an FileExistsError is raised if the target directory already exists . With arguments `name`.", "question_id": 6868}, {"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}, {"snippet": "turtle.circle(radius, extent=None, steps=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10926}, {"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}, {"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}, {"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}, {"snippet": "struct.calcsize(format)", "intent": "Return the size of the struct ( and hence of the bytes object produced by pack ( `format` , ... ) ) corresponding to the format string format .", "question_id": 9557}, {"snippet": "element_tree._setroot(element)", "intent": "Replaces the root `element` for this tree .", "question_id": 12511}, {"snippet": "wsgiref.simple_server.make_server(host, port, app)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` .", "question_id": 12223}, {"snippet": "importlib.util.spec_from_file_location(name, location, loader=None, submodule_search_locations=None)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . Missing information will be filled in on the spec by making use of `loader` APIs and by the implication that the module will be file-based . With arguments `name`, `location`, `submodule_search_locations`.", "question_id": 4941}, {"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}, {"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}, {"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}, {"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}, {"snippet": "queue_listener.removeHandler(hdlr)", "intent": "Removes the specified handler `hdlr` from this logger .", "question_id": 5581}, {"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}, {"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}, {"snippet": "importlib.resources.Package", "intent": "The Package type is defined as Union[str, ModuleType].", "question_id": 4850}, {"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}, {"snippet": "unittest.mock.NonCallableMock(**kwargs, wraps=None)", "intent": "A non-callable version of Mock . With arguments `**kwargs`, `wraps`.", "question_id": 11599}, {"snippet": "bdb.set_next(frame)", "intent": "Stop on the next line in or below the given `frame` .", "question_id": 786}, {"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}, {"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}, {"snippet": "DefaultCookiePolicy.strict_ns_set_path", "intent": "Don\u2019t allow setting cookies whose path doesn\u2019t path-match request URI.", "question_id": 4551}, {"snippet": "platform.node()", "intent": "Returns the computer \u2019 s network name ( may not be fully qualified ! ) .", "question_id": 7467}, {"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}, {"snippet": "pickle.load(file, encoding=\"ASCII\")", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7373}, {"snippet": "lzma.LZMADecompressor(format=FORMAT_AUTO, filters=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `format` argument specifies the container format that should be used . The `filters` argument specifies the filter chain that was used to create the stream being decompressed .", "question_id": 5695}, {"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}, {"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}, {"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}, {"snippet": "context.ln(x)", "intent": "Returns the natural ( base e ) logarithm of `x` .", "question_id": 2542}, {"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347}, {"snippet": "str.zfill(width)", "intent": "Return a copy of the string left filled with ASCII ' 0 ' digits to make a string of length `width` .", "question_id": 9256}, {"snippet": "os.link(src, dst, follow_symlinks=True)", "intent": "Create a hard link pointing to `src` named `dst` . With arguments `follow_symlinks`.", "question_id": 6853}, {"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}, {"snippet": "complex()", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4002}, {"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}, {"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}, {"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}, {"snippet": "loop.set_default_executor(executor)", "intent": "Set `executor` as the default executor used by run_in_executor ( ) .", "question_id": 306}, {"snippet": "CookiePolicy.return_ok(cookie, request)", "intent": "Return boolean value indicating whether `cookie` should be returned to server . `request` is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header ( ) .", "question_id": 4533}, {"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}, {"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}, {"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}, {"snippet": "SystemExit", "intent": "This exception is raised by the sys.exit() function.", "question_id": 3669}, {"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}, {"snippet": "bz2.open(filename, mode='r', newline=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 885}, {"snippet": "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)", "intent": "Return a Request or None in response to a redirect . If a redirection should take place , return a new Request to allow http_error_30* ( ) to perform the redirect to `newurl` . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11850}, {"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}, {"snippet": "pdb.Pdb(readrc=True)", "intent": "Pdb is the debugger class . The `readrc` argument defaults to true and controls whether Pdb will load .pdbrc files from the filesystem .", "question_id": 7347}, {"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}, {"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}, {"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}, {"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}, {"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}, {"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}, {"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}, {"snippet": "deque.extendleft(iterable)", "intent": "Extend the left side of the deque by appending elements from `iterable` .", "question_id": 1359}, {"snippet": "vars()", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4133}, {"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}, {"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}, {"snippet": "element_tree.iter(tag=None)", "intent": "Creates and returns a tree iterator for the root element . `tag` is the tag to look for ( default is to return all elements ) .", "question_id": 12522}, {"snippet": "pprint.PrettyPrinter(width=80)", "intent": "Construct a PrettyPrinter instance . The desired output `width` is constrained using the width parameter ; the default is 80 characters .", "question_id": 7625}, {"snippet": "meta_path_finder.invalidate_caches()", "intent": "An optional method which , when called , should invalidate any internal cache used by the finder .", "question_id": 4806}, {"snippet": "base_server.allow_reuse_address", "intent": "Whether the server will allow the reuse of an address.", "question_id": 8771}, {"snippet": "urllib.request.CacheFTPHandler", "intent": "Open FTP URLs, keeping a cache of open FTP connections to minimize delays.", "question_id": 11813}, {"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}, {"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}, {"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}, {"snippet": "bytes_generator.clone(fp)", "intent": "Return an independent clone of this BytesGenerator instance with the exact same option settings , and `fp` as the new outfp .", "question_id": 3090}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5472}, {"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}, {"snippet": "gettext.GNUTranslations", "intent": "The following methods are overridden from the base class implementation:", "question_id": 4260}, {"snippet": "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object . `offset` may be specified as a non-negative integer offset . `access` may be specified in lieu of flags and prot as an optional keyword parameter .", "question_id": 5987}, {"snippet": "robot_file_parser.can_fetch(useragent, url)", "intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "question_id": 11912}, {"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}, {"snippet": "test.support.python_is_optimized()", "intent": "Return True if Python was not built with -O0 or -Og .", "question_id": 10145}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}, {"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}, {"snippet": "errno.EIDRM", "intent": "Identifier removed", "question_id": 3548}, {"snippet": "mimetypes.guess_extension(type, strict=True)", "intent": "Guess the extension for a file based on its MIME `type` , given by type . The optional `strict` argument has the same meaning as with the guess_type ( ) function .", "question_id": 5944}, {"snippet": "csv.excel", "intent": "The excel class defines the usual properties of an Excel-generated CSV file.", "question_id": 1711}, {"snippet": "source_loader.set_data(path, data)", "intent": "Optional abstract method which writes the specified bytes to a file `path` . With arguments `data`.", "question_id": 4844}, {"snippet": "gettext.find(domain, languages=None)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code .", "question_id": 4223}, {"snippet": "condition.wait_for(predicate, timeout=None)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value . A `timeout` may be provided giving the maximum time to wait .", "question_id": 10393}, {"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}, {"snippet": "ctypes.sizeof(obj_or_type)", "intent": "Returns the size in bytes of a ctypes type or instance memory buffer . With arguments `obj_or_type`.", "question_id": 1833}, {"snippet": "multiprocessing.get_start_method()", "intent": "Return the name of start method used for starting processes .", "question_id": 6226}, {"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}, {"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}, {"snippet": "errno.ELIBMAX", "intent": "Attempting to link in too many shared libraries", "question_id": 3587}, {"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}, {"snippet": "mailbox.iteritems()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5734}, {"snippet": "Path.mkdir(exist_ok=False)", "intent": "Create a new directory at this given path . If `exist_ok` is false ( the default ) , FileExistsError is raised if the target directory already exists .", "question_id": 7287}, {"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}, {"snippet": "operator.__ne__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6522}, {"snippet": "collections.UserList(list)", "intent": "Class that simulates a `list` .", "question_id": 1398}, {"snippet": "lzma.compress(data, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5707}, {"snippet": "code.interact()", "intent": "Convenience function to run a read-eval-print loop .", "question_id": 1161}, {"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}, {"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}, {"snippet": "xml.parsers.expat.model.XML_CTYPE_CHOICE", "intent": "The named element allows a choice from a number of options; this is used for content models such as (A | B | C).", "question_id": 7780}, {"snippet": "element_tree.iter()", "intent": "Creates and returns a tree iterator for the root element .", "question_id": 12521}, {"snippet": "asyncio.LifoQueue", "intent": "A variant of Queue that retrieves most recently added entries first (last in, first out).", "question_id": 460}, {"snippet": "date.fromtimestamp(timestamp)", "intent": "Return the local date corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2220}, {"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}, {"snippet": "robot_file_parser.request_rate(useragent)", "intent": "Returns the contents of the Request-rate parameter from robots.txt as a named tuple RequestRate ( requests , seconds ) . If there is no such parameter or it doesn \u2019 t apply to the `useragent` specified or the robots.txt entry for this parameter has invalid syntax , return None .", "question_id": 11916}, {"snippet": "xmlparser.ErrorLineNumber", "intent": "Line number at which an error occurred.", "question_id": 7751}, {"snippet": "uuid.UUID(hex=None, bytes=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11945}, {"snippet": "aifc.setparams(nchannels, sampwidth, framerate, comptype, compname)", "intent": "Set all the above parameters at once . With arguments `nchannels`, `sampwidth`, `framerate`, `comptype`, `compname`.", "question_id": 32}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` . If `backupCount` is nonzero , at most backupCount files will be kept , and if more would be created when rollover occurs , the oldest one is deleted .", "question_id": 5479}, {"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}, {"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}, {"snippet": "msvcrt.getch()", "intent": "Read a keypress and return the resulting character as a byte string .", "question_id": 6156}, {"snippet": "headers.add_header(name, value, **_params)", "intent": "Add a ( possibly multi-valued ) header , with optional MIME parameters specified via keyword arguments . `name` is the header field to add . If the parameter `value` is a string , it is added to the header value parameters in the form name= '' value '' . With arguments `**_params`.", "question_id": 12222}, {"snippet": "urllib.request.ProxyHandler(proxies=None)", "intent": "Cause requests to go through a proxy . If `proxies` is given , it must be a dictionary mapping protocol names to URLs of proxies .", "question_id": 11785}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "winreg.DisableReflectionKey(key)", "intent": "Disables registry reflection for 32-bit processes running on a 64-bit operating system . `key` is an already open key , or one of the predefined HKEY_* constants .", "question_id": 12152}, {"snippet": "mmap.mmap(fileno, length)", "intent": "( Unix version ) Maps `length` bytes from the file specified by the file descriptor `fileno` , and returns a mmap object .", "question_id": 5992}, {"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}, {"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}, {"snippet": "xmlrpc.server.SimpleXMLRPCRequestHandler", "intent": "Create a new request handler instance.", "question_id": 12730}, {"snippet": "locale.currency(val, symbol=True)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . The returned string includes the currency `symbol` if symbol is true , which is the default .", "question_id": 5393}, {"snippet": "lzma.decompress(data, memlimit=None)", "intent": "Decompress `data` ( a bytes object ) , returning the uncompressed data as a bytes object . See LZMADecompressor above for a description of the `format` , `memlimit` and `filters` arguments .", "question_id": 5716}, {"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}, {"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}, {"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}, {"snippet": "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "intent": "Format a pretty argument spec from the values returned by getfullargspec ( ) . The first seven arguments are ( `args` , `varargs` , `varkw` , `defaults` , `kwonlyargs` , `kwonlydefaults` , `annotations` ) . With arguments `formatarg`, `formatvarargs`, `formatvarkw`, `formatvalue`.", "question_id": 5015}, {"snippet": "thread.isDaemon()", "intent": "Old getter/setter API for daemon ; use it directly as a property instead .", "question_id": 10372}, {"snippet": "array.tolist()", "intent": "Convert the array to an ordinary list with the same items .", "question_id": 138}, {"snippet": "unittest.mock.mock_open()", "intent": "A helper function to create a `mock` to replace the use of open ( ) .", "question_id": 11653}, {"snippet": "bdb.Bdb(skip=None)", "intent": "The Bdb class acts as a generic Python debugger base class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 769}, {"snippet": "turtle.filling()", "intent": "Return fillstate ( True if filling , False else ) .", "question_id": 10964}, {"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274}, {"snippet": "context_var.name", "intent": "The name of the variable.", "question_id": 1639}, {"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}, {"snippet": "future.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Future is done .", "question_id": 366}, {"snippet": "base64.a85decode(b, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 738}, {"snippet": "pkgutil.ImpImporter()", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm .", "question_id": 7437}, {"snippet": "os.environb", "intent": "Bytes version of environ: a mapping object representing the environment as byte strings.", "question_id": 6659}, {"snippet": "opname", "intent": "human readable name for operation", "question_id": 2735}, {"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}, {"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}, {"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}, {"snippet": "asyncio.current_task()", "intent": "Return the currently running Task instance , or None if no task is running .", "question_id": 620}, {"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}, {"snippet": "readline.parse_and_bind(string)", "intent": "Execute the init line provided in the `string` argument .", "question_id": 8015}, {"snippet": "importlib.abc.SourceLoader", "intent": "An abstract base class for implementing source (and optionally bytecode) file loading.", "question_id": 4841}, {"snippet": "glob.iglob(pathname)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`.", "question_id": 4266}, {"snippet": "shake.hexdigest(length)", "intent": "Like digest ( ) except the digest is returned as a string object of double `length` , containing only hexadecimal digits .", "question_id": 4309}, {"snippet": "lock.acquire(blocking=True, timeout=-1)", "intent": "Acquire a lock , `blocking` or non-blocking . When invoked with the floating-point `timeout` argument set to a positive value , block for at most the number of seconds specified by timeout and as long as the lock can not be acquired .", "question_id": 10378}, {"snippet": "sys.__breakpointhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9782}, {"snippet": "Wave_read.readframes(n)", "intent": "Reads and returns at most `n` frames of audio , as a bytes object .", "question_id": 12058}, {"snippet": "os.POSIX_FADV_SEQUENTIAL", "intent": "Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "question_id": 6778}, {"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927}, {"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963}, {"snippet": "context.compare_total(x, y)", "intent": "Compares two operands using their abstract representation . With arguments `x`, `y`.", "question_id": 2522}, {"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}, {"snippet": "window.scroll()", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2111}, {"snippet": "ctypes.c_wchar_p", "intent": "Represents the C wchar_t * datatype, which must be a pointer to a zero-terminated wide character string.", "question_id": 1882}, {"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}, {"snippet": "errno.ECHILD", "intent": "No child processes", "question_id": 3515}, {"snippet": "DictWriter.writeheader()", "intent": "Write a row with the field names ( as specified in the constructor ) .", "question_id": 1738}, {"snippet": "POP3.capa()", "intent": "Query the server \u2019 s capabilities as specified in RFC 2449 .", "question_id": 7603}, {"snippet": "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), supported_dists=('SuSE')", "intent": "Tries to determine the name of the Linux OS distribution name . `supported_dists` may be given to define the set of Linux distributions to look for . With arguments `'debian'`, `'redhat'`, `'mandrake'`, `...)`.", "question_id": 7531}, {"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}, {"snippet": "counter.update()", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) .", "question_id": 1349}, {"snippet": "HTMLParser.handle_data(data)", "intent": "This method is called to process arbitrary `data` ( e.g .", "question_id": 4359}, {"snippet": "test.support.SaveSignals", "intent": "Class to save and restore signal handlers registered by the Python signal handler.", "question_id": 10292}, {"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}, {"snippet": "email_message.clear_content()", "intent": "Remove the payload and all of the Content- headers , leaving all other headers intact and in their original order .", "question_id": 3307}, {"snippet": "urllib.request.urlopen(url, timeout, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11743}, {"snippet": "i_pv6_address.teredo", "intent": "For addresses that appear to be Teredo addresses (starting with 2001::/32) as defined by RFC 4380, this property will report the embedded (server, client) IP address pair.", "question_id": 5191}, {"snippet": "control.event(event, argument)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`.", "question_id": 6126}, {"snippet": "message.get_charsets()", "intent": "Return a list containing the character set names in the message .", "question_id": 3024}, {"snippet": "OptionParser.get_option_group(opt_str)", "intent": "Return the OptionGroup to which the short or long option string `opt_str` ( e.g .", "question_id": 6618}, {"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}, {"snippet": "unpickler.find_class(module, name)", "intent": "Import `module` if necessary and return the object called `name` from it , where the module and name arguments are str objects .", "question_id": 7408}, {"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}, {"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951}, {"snippet": "curses.napms(ms)", "intent": "Sleep for `ms` milliseconds .", "question_id": 1956}, {"snippet": "formatter.get_value(key, args, kwargs)", "intent": "Retrieve a given field value . The `key` argument will be either an integer or a string . If it is an integer , it represents the index of the positional argument in `args` ; if it is a string , then it represents a named argument in `kwargs` .", "question_id": 9521}, {"snippet": "message.get_boundary()", "intent": "Return the value of the boundary parameter of the Content-Type header of the message , or `failobj` if either the header is missing , or has no boundary parameter .", "question_id": 3019}, {"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}, {"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}, {"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}, {"snippet": "calendar.LocaleHTMLCalendar(locale=None)", "intent": "This subclass of HTMLCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 983}, {"snippet": "os.utime(path, ns, follow_symlinks=True)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `follow_symlinks`.", "question_id": 6962}, {"snippet": "shutil.Error", "intent": "This exception collects exceptions that are raised during a multi-file operation.", "question_id": 8349}, {"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}, {"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}, {"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}, {"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}, {"snippet": "auto.winerror", "intent": "Under Windows, this gives you the native Windows error code.", "question_id": 3655}, {"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}, {"snippet": "sys.int_info", "intent": "A named tuple that holds information about Python\u2019s internal representation of integers.", "question_id": 9816}, {"snippet": "errno.EREMOTEIO", "intent": "Remote I/O error", "question_id": 3626}, {"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}, {"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}, {"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}, {"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}, {"snippet": "keyword.iskeyword(s)", "intent": "Return true if `s` is a Python keyword .", "question_id": 5341}, {"snippet": "unittest.mock.call(*args, **kwargs)", "intent": "call ( ) is a helper object for making simpler assertions , for comparing with call_args , call_args_list , mock_calls and method_calls . With arguments `*args`, `**kwargs`.", "question_id": 11647}, {"snippet": "ctypes.GetLastError()", "intent": "Windows only : Returns the last error code set by Windows in the calling thread .", "question_id": 1823}, {"snippet": "locale.delocalize(string)", "intent": "Converts a `string` into a normalized number string , following the LC_NUMERIC settings .", "question_id": 5401}, {"snippet": "os.chmod(path, mode)", "intent": "Change the `mode` of `path` to the numeric mode .", "question_id": 6835}, {"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}, {"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}, {"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}, {"snippet": "datetime.datetime(year, month, day, second=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `second`.", "question_id": 2250}, {"snippet": "loop.call_soon_threadsafe(callback, *args)", "intent": "A thread-safe variant of call_soon ( ) . With arguments `callback`, `*args`.", "question_id": 191}, {"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}, {"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}, {"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}, {"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}, {"snippet": "patch.dict(in_dict, **kwargs, clear=False)", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . If `clear` is true then the dictionary will be cleared before the new values are set . With arguments `**kwargs`.", "question_id": 11630}, {"snippet": "argparse.Namespace", "intent": "Simple class used by default by parse_args() to create an object holding attributes and return it.", "question_id": 73}, {"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}, {"snippet": "xmlparser.Parse(data, isfinal)", "intent": "Parses the contents of the string `data` , calling the appropriate handler functions to process the parsed data . `isfinal` must be true on the final call to this method ; it allows the parsing of a single file in fragments , not the submission of multiple files .", "question_id": 7732}, {"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}, {"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}, {"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}, {"snippet": "platform.win32_ver()", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7495}, {"snippet": "breakpoint.disable()", "intent": "Mark the breakpoint as disabled .", "question_id": 764}, {"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}, {"snippet": "random.gammavariate(alpha, beta)", "intent": "Gamma distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7911}, {"snippet": "DefaultCookiePolicy.allowed_domains()", "intent": "Return None , or the sequence of allowed domains ( as a tuple ) .", "question_id": 4542}, {"snippet": "pkgutil.walk_packages(prefix='', onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7455}, {"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}, {"snippet": "resource.setrlimit(resource, limits)", "intent": "Sets new `limits` of consumption of `resource` .", "question_id": 8072}, {"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6030}, {"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}, {"snippet": "email.utils.encode_rfc2231(s, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3481}, {"snippet": "SSLSocket.shared_ciphers()", "intent": "Return the list of ciphers shared by the client during the handshake .", "question_id": 8980}, {"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}, {"snippet": "bytearray()", "intent": "Return a new array of bytes .", "question_id": 3984}, {"snippet": "mailbox.Error", "intent": "The based class for all other module-specific exceptions.", "question_id": 5856}, {"snippet": "decimal.min_mag(other, context=None)", "intent": "Similar to the min ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`, `context`.", "question_id": 2450}, {"snippet": "doctest.REPORT_UDIFF", "intent": "When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff.", "question_id": 2759}, {"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}, {"snippet": "os.getcwd()", "intent": "These functions are described in Files and Directories .", "question_id": 6662}, {"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}, {"snippet": "ZipInfo.internal_attr", "intent": "Internal attributes.", "question_id": 12874}, {"snippet": "email_message.replace_header(_name, _value)", "intent": "Replace a header . Replace the first header found in the message that matches `_name` , retaining header order and field name case of the original header . With arguments `_value`.", "question_id": 3254}, {"snippet": "ast.parse(source, mode='exec')", "intent": "Parse the `source` into an AST node . Equivalent to compile ( source , `filename` , `mode` , ast.PyCF_ONLY_AST ) .", "question_id": 147}, {"snippet": "sysconfig.parse_config_h(fp, vars)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file . With arguments `vars`.", "question_id": 9873}, {"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}, {"snippet": "stat_result.st_atime_ns", "intent": "Time of most recent access expressed in nanoseconds as an integer.", "question_id": 6932}, {"snippet": "zlib.compressobj(zdict, level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12903}, {"snippet": "FTP.login(user='anonymous', passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3919}, {"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}, {"snippet": "socket.AF_VSOCK", "intent": "Constants for Linux host/guest communication.", "question_id": 8602}, {"snippet": "tkinter.tix.Tree", "intent": "The Tree widget can be used to display hierarchical data in a tree form.", "question_id": 10572}, {"snippet": "queue_listener.info(msg, *args, **kwargs)", "intent": "Logs a message with level INFO on this logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5571}, {"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}, {"snippet": "importlib.util.resolve_name(name, package)", "intent": "Resolve a relative module `name` to an absolute one . This allows for usage such as importlib.util.resolve_name ( 'sys ' , __package__ ) without doing a check to see if the `package` argument is needed .", "question_id": 4927}, {"snippet": "loop.create_server(protocol_factory)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`.", "question_id": 232}, {"snippet": "datetime.date()", "intent": "Return date object with same year , month and day .", "question_id": 2281}, {"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}, {"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}, {"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}, {"snippet": "json.JSONDecoder(object_hook=None)", "intent": "Simple JSON decoder . `object_hook` , if specified , will be called with the result of every JSON object decoded and its return value will be used in place of the given dict .", "question_id": 5311}, {"snippet": "bytes_io.readinto1(b)", "intent": "In BytesIO , this is the same as readinto ( ) . With arguments `b`.", "question_id": 5115}, {"snippet": "codecs.replace_errors(exception)", "intent": "Implements the 'replace ' error handling ( for text encodings only ) : substitutes ' ? ' With arguments `exception`.", "question_id": 1256}, {"snippet": "contextvars.Context", "intent": "A mapping of ContextVars to their values.", "question_id": 1649}, {"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}, {"snippet": "reprlib.Repr", "intent": "Class which provides formatting services useful in implementing functions similar to the built-in repr(); size limits for  different object types are added to avoid the generation of representations which are excessively long.", "question_id": 8050}, {"snippet": "bytes.islower()", "intent": "Return true if there is at least one lowercase ASCII character in the sequence and no uppercase ASCII characters , false otherwise .", "question_id": 9389}, {"snippet": "socket.sendall(bytes)", "intent": "Send data to the socket . Unlike send ( ) , this method continues to send data from `bytes` until either all data has been sent or an error occurs .", "question_id": 8720}, {"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}, {"snippet": "locale.strcoll(string1, string2)", "intent": "Compares two strings according to the current LC_COLLATE setting . As any other compare function , returns a negative , or a positive value , or 0 , depending on whether `string1` collates before or after `string2` or is equal to it .", "question_id": 5382}, {"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}, {"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}, {"snippet": "sys.implementation", "intent": "An object containing information about the implementation of the currently running Python interpreter.", "question_id": 9815}, {"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}, {"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}, {"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}, {"snippet": "html.parser.HTMLParser(convert_charrefs=True)", "intent": "Create a parser instance able to parse invalid markup . If `convert_charrefs` is True ( the default ) , all character references ( except the ones in script/style elements ) are automatically converted to the corresponding Unicode characters .", "question_id": 4350}, {"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}, {"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}, {"snippet": "POP3.dele(which)", "intent": "Flag message number `which` for deletion .", "question_id": 7612}, {"snippet": "os.execv(path, args)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7013}, {"snippet": "socket.get_inheritable()", "intent": "Get the inheritable flag of the socket \u2019 s file descriptor or socket \u2019 s handle : True if the socket can be inherited in child processes , False if it can not .", "question_id": 8681}, {"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}, {"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}, {"snippet": "auto.object", "intent": "The object the codec was attempting to encode or decode.", "question_id": 3676}, {"snippet": "platform.architecture(executable=sys.executable)", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7459}, {"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}, {"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}, {"snippet": "subprocess.call(args, stdin=None, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `stdin`.", "question_id": 9666}, {"snippet": "bisect.insort_right(a, x, hi=len(a))", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `hi`.", "question_id": 870}, {"snippet": "queue.put_nowait(item)", "intent": "Put an `item` into the queue without blocking .", "question_id": 456}, {"snippet": "datetime.MAXYEAR", "intent": "The largest year number allowed in a date or datetime object.", "question_id": 2197}, {"snippet": "typing.Text", "intent": "Text is an alias for str.", "question_id": 11314}, {"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}, {"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047}, {"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287}, {"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}, {"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}, {"snippet": "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)", "intent": "Return a new Dialog object . An entry in the Dialog table is made , with the specified coordinates , dialog attributes , `title` , `name` of the `first` , `default` , and `cancel` controls . With arguments `db`, `x`, `y`, `w`, `h`, `attr`.", "question_id": 6135}, {"snippet": "test.support.check_syntax_error(testcase, statement, lineno=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . If `lineno` is not None , compares to the line of the SyntaxError .", "question_id": 10233}, {"snippet": "ZipFile.extractall(path=None, pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `path` specifies a different directory to extract to . `pwd` is the password used for encrypted files .", "question_id": 12823}, {"snippet": "dataclasses.field(metadata=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `metadata`.", "question_id": 2174}, {"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}, {"snippet": "curses.ungetch(ch)", "intent": "Push `ch` so the next getch ( ) will return it .", "question_id": 1993}, {"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078}, {"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}, {"snippet": "platform.libc_ver(version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7540}, {"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}, {"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}, {"snippet": "writer.send_label_data(data)", "intent": "Set `data` to the left of the current left margin , if possible .", "question_id": 3852}, {"snippet": "json.JSONDecoder(parse_float=None)", "intent": "Simple JSON decoder . `parse_float` , if specified , will be called with the string of every JSON float to be decoded .", "question_id": 5312}, {"snippet": "test_suite.addTests(tests)", "intent": "Add all the `tests` from an iterable of TestCase and TestSuite instances to this test suite .", "question_id": 11484}, {"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}, {"snippet": "profile.runctx(command, globals, locals)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string .", "question_id": 7665}, {"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}, {"snippet": "dbm.ndbm.error", "intent": "Raised on dbm.ndbm-specific errors, such as I/O errors.", "question_id": 2379}, {"snippet": "operator.__index__(a)", "intent": "Return `a` converted to an integer .", "question_id": 6539}, {"snippet": "asyncio.subprocess.Process", "intent": "An object that wraps OS processes created by the create_subprocess_exec() and create_subprocess_shell() functions.", "question_id": 546}, {"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}, {"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}, {"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}, {"snippet": "Pattern.split(string)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`.", "question_id": 7979}, {"snippet": "chunk.Chunk(file, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1078}, {"snippet": "stat_result.st_birthtime", "intent": "Time of file creation.", "question_id": 6940}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}, {"snippet": "wsgiref.util.request_uri(environ)", "intent": "Return the full request URI , optionally including the query string , using the algorithm found in the \u201c URL Reconstruction \u201d section of PEP 3333 . With arguments `environ`.", "question_id": 12211}, {"snippet": "email.headerregistry.Address(addr_spec=None)", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3190}, {"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299}, {"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}, {"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}, {"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}, {"snippet": "email.headerregistry.Address()", "intent": "The class used to represent an email address .", "question_id": 3186}, {"snippet": "base_http_request_handler.date_time_string(timestamp=None)", "intent": "Returns the date and time given by `timestamp` ( which must be None or in the format returned by time.time ( ) ) , formatted for a message header .", "question_id": 4656}, {"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}, {"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}, {"snippet": "compileall.compile_dir(dir, rx=None)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `rx` is given , its search method is called on the complete path to each file considered for compilation , and if it returns a true value , the file is skipped .", "question_id": 1413}, {"snippet": "test.support.check__all__(test_case, module, extra=())", "intent": "Assert that the __all__ variable of `module` contains all public names . The `extra` argument can be a set of names that wouldn \u2019 t otherwise be automatically detected as \u201c public \u201d , like objects without a proper __module__ attribute . With arguments `test_case`.", "question_id": 10279}, {"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}, {"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}, {"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}, {"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}, {"snippet": "os.RWF_HIPRI", "intent": "High priority read/write.", "question_id": 6787}, {"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}, {"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}, {"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}, {"snippet": "FTP.cwd(pathname)", "intent": "Set the current directory on the server . With arguments `pathname`.", "question_id": 3961}, {"snippet": "str.split(sep=None)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9242}, {"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}, {"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}, {"snippet": "window.echochar(ch, attr)", "intent": "Add character `ch` with attribute `attr` , and immediately call refresh ( ) on the window .", "question_id": 2044}, {"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}, {"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}, {"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}, {"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327}, {"snippet": "locale.str(float)", "intent": "Formats a floating point number using the same format as the built-in function str ( `float` ) , but takes the decimal point into account .", "question_id": 5400}, {"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}, {"snippet": "os.removedirs(name)", "intent": "Remove directories recursively . With arguments `name`.", "question_id": 6891}, {"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}, {"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH", "intent": "An end tag did not match the innermost open start tag.", "question_id": 7802}, {"snippet": "text_io_wrapper.reconfigure(encoding, errors, newline)", "intent": "Reconfigure this text stream using new settings for `encoding` , `errors` , `newline` , line_buffering and `write_through` .", "question_id": 5160}, {"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}, {"snippet": "io_base.seek(offset)", "intent": "Change the stream position to the given byte `offset` .", "question_id": 5074}, {"snippet": "Pattern.pattern", "intent": "The pattern string from which the pattern object was compiled.", "question_id": 7994}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}, {"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}, {"snippet": "Database.Close()", "intent": "Close the database object , through MsiCloseHandle ( ) .", "question_id": 6071}, {"snippet": "DocumentType.entities", "intent": "This is a NamedNodeMap giving the definitions of external entities.", "question_id": 12342}, {"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}, {"snippet": "datetime.isoformat(timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2308}, {"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}, {"snippet": "symbol.get_namespace()", "intent": "Return the namespace bound to this name .", "question_id": 9765}, {"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}, {"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}, {"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}, {"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}, {"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}, {"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}, {"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277}, {"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}, {"snippet": "bisect.bisect_right(a, x, lo=0, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 859}, {"snippet": "datetime.MINYEAR", "intent": "The smallest year number allowed in a date or datetime object.", "question_id": 2196}, {"snippet": "pkgutil.iter_modules(path=None, prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7448}, {"snippet": "winsound.SND_ALIAS", "intent": "The sound parameter is a sound association name from the registry.", "question_id": 12197}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1707}, {"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 49}, {"snippet": "marshal.dump(value, file)", "intent": "Write the `value` on the open `file` .", "question_id": 5879}, {"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}, {"snippet": "policy.raise_on_defect", "intent": "If True, any defects encountered will be raised as errors.", "question_id": 3416}, {"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}, {"snippet": "Node.removeChild(oldChild)", "intent": "Remove a child node . `oldChild` must be a child of this node ; if not , ValueError is raised .", "question_id": 12332}, {"snippet": "pool.close()", "intent": "Prevents any more tasks from being submitted to the pool .", "question_id": 6356}, {"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}, {"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032}, {"snippet": "zipimporter.get_filename(fullname)", "intent": "Return the value __file__ would be set to if the specified module was imported . With arguments `fullname`.", "question_id": 12886}, {"snippet": "code.compile_command(source, filename=\"<input>\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1172}, {"snippet": "fractions.gcd(a, b)", "intent": "Return the greatest common divisor of the integers `a` and `b` .", "question_id": 3877}, {"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}, {"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}, {"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}, {"snippet": "shlex.infile", "intent": "The name of the current input file, as initially set at class instantiation time or stacked by later source requests.", "question_id": 8301}, {"snippet": "message.get_param(param)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string .", "question_id": 2991}, {"snippet": "turtle.onkeyrelease(fun, key)", "intent": "Bind `fun` to key-release event of `key` .", "question_id": 11068}, {"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}, {"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}, {"snippet": "msilib.Feature(db, id, title, desc, display, level=1, directory=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6120}, {"snippet": "ctypes.PyDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`, `mode`.", "question_id": 1771}, {"snippet": "test.support.fs_is_case_insensitive(directory)", "intent": "Return True if the file system for `directory` is case-insensitive .", "question_id": 10266}, {"snippet": "ArgumentParser.exit(status=0, message=None)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 113}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}, {"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}, {"snippet": "imp.C_EXTENSION", "intent": "The module was found as dynamically loadable shared library.", "question_id": 4776}, {"snippet": "dict.setdefault(key)", "intent": "If `key` is in the dictionary , return its value .", "question_id": 9490}, {"snippet": "condition.wait_for(predicate, timeout=None)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value . A `timeout` may be provided giving the maximum time to wait .", "question_id": 10393}, {"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}, {"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}, {"snippet": "profile.runctx(cmd, globals, locals)", "intent": "Profile the `cmd` via exec ( ) with the specified global and local environment . With arguments `globals`, `locals`.", "question_id": 7686}, {"snippet": "message.__delitem__(name)", "intent": "Delete all occurrences of the field with `name` name from the message \u2019 s headers .", "question_id": 2968}, {"snippet": "Element.setAttributeNode(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the name attribute matches . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12367}, {"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}, {"snippet": "socket.sendmsg_afalg(msg, op)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`.", "question_id": 8730}, {"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994}, {"snippet": "inspect.iscoroutinefunction(object)", "intent": "Return true if the `object` is a coroutine function ( a function defined with an async def syntax ) .", "question_id": 4954}, {"snippet": "file_finder.path", "intent": "The path the finder will search in.", "question_id": 4883}, {"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}, {"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}, {"snippet": "re.error(msg, pattern=None, pos=None)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . It is never an error if a string contains no match for a `pattern` . With arguments `msg`, `pos`.", "question_id": 7964}, {"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}, {"snippet": "multiprocessing.pool.Pool(processes, initializer)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts .", "question_id": 6329}, {"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}, {"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}, {"snippet": "bdb.break_anywhere(frame)", "intent": "This method checks if there is a breakpoint in the filename of the current `frame` .", "question_id": 779}, {"snippet": "shlex.get_token()", "intent": "Return a token .", "question_id": 8283}, {"snippet": "imghdr.what(filename)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type .", "question_id": 4757}, {"snippet": "email_policy.refold_source", "intent": "If the value for a header in the Message object originated from a parser (as opposed to being set by a program), this attribute indicates whether or not a generator should refold that value when transforming the message back into serialized form.", "question_id": 3430}, {"snippet": "os.chown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6839}, {"snippet": "NNTP.next()", "intent": "Send a NEXT command .", "question_id": 6478}, {"snippet": "turtle.pen(**pendict, pen=None)", "intent": "Return or set the `pen` \u2019 s attributes in a \u201c pen-dictionary \u201d with the following key/value pairs : With arguments `**pendict`.", "question_id": 10959}, {"snippet": "sysconfig.parse_config_h(fp)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file .", "question_id": 9874}, {"snippet": "email_policy.header_source_parse(sourcelines)", "intent": "The name is parsed as everything up to the \u2018 : \u2019 and returned unmodified . With arguments `sourcelines`.", "question_id": 3434}, {"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}, {"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "socket.getservbyport(port)", "intent": "Translate an Internet `port` number and protocol name to a service name for that service .", "question_id": 8656}, {"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763}, {"snippet": "http.HTTPStatus", "intent": "A subclass of enum.IntEnum that defines a set of HTTP status codes, reason phrases and long descriptions written in English.", "question_id": 4613}, {"snippet": "sys.path", "intent": "A list of strings that specifies the search path for modules.", "question_id": 9827}, {"snippet": "bytes.lstrip(chars)", "intent": "Return a copy of the sequence with specified leading bytes removed . The `chars` argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters .", "question_id": 9343}, {"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}, {"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}, {"snippet": "os.P_NOWAITO", "intent": "Possible values for the mode parameter to the spawn* family of functions.", "question_id": 7062}, {"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}, {"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}, {"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}, {"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}, {"snippet": "zipimporter.find_module(fullname, path)", "intent": "Search for a module specified by `fullname` . The optional `path` argument is ignored\u2014it \u2019 s there for compatibility with the importer protocol .", "question_id": 12882}, {"snippet": "bdb.Breakpoint(self, file, line, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 757}, {"snippet": "resource.RLIMIT_SWAP", "intent": "The maximum size (in bytes) of the swap space that may be reserved or used by all of this user id\u2019s processes.", "question_id": 8093}, {"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}, {"snippet": "pickle.loads(bytes_object)", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object .", "question_id": 7379}, {"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}, {"snippet": "str.rsplit()", "intent": "Return a list of the words in the string , using `sep` as the delimiter string .", "question_id": 9235}, {"snippet": "errno.EUSERS", "intent": "Too many users", "question_id": 3592}, {"snippet": "mimetypes.read_mime_types(filename)", "intent": "Load the type map given in the file `filename` , if it exists .", "question_id": 5947}, {"snippet": "tracemalloc.stop()", "intent": "Stop tracing Python memory allocations : uninstall hooks on Python memory allocators .", "question_id": 10849}, {"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}, {"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}, {"snippet": "scheduler.enter(delay, priority, action, argument=())", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`.", "question_id": 8123}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}, {"snippet": "SystemError", "intent": "Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope.", "question_id": 3668}, {"snippet": "test.support.checksizeof(test, o, size)", "intent": "For testcase `test` , assert that the sys.getsizeof for `o` plus the GC header `size` equals size .", "question_id": 10202}, {"snippet": "code.InteractiveConsole()", "intent": "Closely emulate the behavior of the interactive Python interpreter .", "question_id": 1157}, {"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}, {"snippet": "unittest.mock.Mock(**kwargs, return_value=DEFAULT)", "intent": "Create a new Mock object . With arguments `**kwargs`, `return_value`.", "question_id": 11563}, {"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}, {"snippet": "xml.etree.ElementTree.parse(source)", "intent": "Parses an XML section into an element tree . `source` is a filename or file object containing XML data .", "question_id": 12446}, {"snippet": "importlib.resources.read_text(package, resource, encoding='utf-8')", "intent": "Read and return the contents of `resource` within `package` as a str . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "question_id": 4859}, {"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 539}, {"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}, {"snippet": "os.set_blocking(fd, blocking)", "intent": "Set the `blocking` mode of the specified file descriptor . With arguments `fd`.", "question_id": 6801}, {"snippet": "readline.set_completer_delims(string)", "intent": "Set or get the word delimiters for completion . With arguments `string`.", "question_id": 8046}, {"snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "question_id": 4995}, {"snippet": "dircmp.report()", "intent": "Print ( to sys.stdout ) a comparison between a and b .", "question_id": 3764}, {"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}, {"snippet": "str(object=b'', encoding='utf-8')", "intent": "Return a str version of `object` . With arguments `encoding`.", "question_id": 4119}, {"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}, {"snippet": "warnings.filterwarnings(action, message='', category=Warning)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `category`.", "question_id": 12029}, {"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}, {"snippet": "server.close()", "intent": "Stop serving : close listening sockets and set the sockets attribute to None .", "question_id": 335}, {"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}, {"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}, {"snippet": "zipfile.PyZipFile(file)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`.", "question_id": 12846}, {"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}, {"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}, {"snippet": "calendar.calendar(year, l=1, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `m`.", "question_id": 1020}, {"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}, {"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}, {"snippet": "Cmd.postcmd(stop, line)", "intent": "Hook method executed just after a command dispatch is finished . `line` is the command line which was executed , and `stop` is a flag which indicates whether execution will be terminated after the call to postcmd ( ) ; this will be the return value of the onecmd ( ) method .", "question_id": 1142}, {"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}, {"snippet": "test.support.join_thread(thread)", "intent": "Join a `thread` within `timeout` .", "question_id": 10254}, {"snippet": "IMAP4.sort(sort_criteria, charset, search_criterion)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4740}, {"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}, {"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}, {"snippet": "modulefinder.ReplacePackage(oldname, newname)", "intent": "Allows specifying that the module named `oldname` is in fact the package named `newname` .", "question_id": 6024}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}, {"snippet": "cgihttp_request_handler.do_POST()", "intent": "This method serves the 'POST ' request type , only allowed for CGI scripts .", "question_id": 4668}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}, {"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}, {"snippet": "xmlparser.ordered_attributes", "intent": "Setting this attribute to a non-zero integer causes the attributes to be reported as a list rather than a dictionary.", "question_id": 7746}, {"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}, {"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}, {"snippet": "xml.parsers.expat.error", "intent": "Alias for ExpatError.", "question_id": 7725}, {"snippet": "locale.ERA_D_FMT", "intent": "Get a format string for time.strftime() to represent a date in a locale-specific era-based way.", "question_id": 5370}, {"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}, {"snippet": "SystemError", "intent": "Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope.", "question_id": 3668}, {"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}, {"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}, {"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}, {"snippet": "select.kevent(ident, udata=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `udata`.", "question_id": 8161}, {"snippet": "platform.python_implementation()", "intent": "Returns a string identifying the Python implementation .", "question_id": 7476}, {"snippet": "buffered_io_base.read1(size)", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5094}, {"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}, {"snippet": "curses.curs_set(visibility)", "intent": "Set the cursor state . `visibility` can be set to 0 , 1 , or 2 , for invisible , normal , or very visible .", "question_id": 1926}, {"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}, {"snippet": "os.seteuid(euid)", "intent": "Set the current process \u2019 s effective user id . With arguments `euid`.", "question_id": 6694}, {"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258}, {"snippet": "robot_file_parser.unknown", "intent": "The platform does not provide information on whether the UUID was generated safely or not.", "question_id": 11936}, {"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260}, {"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}, {"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}, {"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}, {"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}, {"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}, {"snippet": "py_compile.compile(file, optimize=-1)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `optimize` controls the optimization level and is passed to the built-in compile ( ) function .", "question_id": 7825}, {"snippet": "prototype(vtbl_index, name, paramflags, iid)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method . `iid` is an optional pointer to the interface identifier which is used in extended error reporting . With arguments `paramflags`.", "question_id": 1805}, {"snippet": "loop.getaddrinfo(host, port, type=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `type`, `proto`.", "question_id": 297}, {"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}, {"snippet": "SSLSocket.verify_client_post_handshake()", "intent": "Requests post-handshake authentication ( PHA ) from a TLS 1.3 client .", "question_id": 8987}, {"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}, {"snippet": "FileCookieJar.save()", "intent": "Save cookies to a file .", "question_id": 4498}, {"snippet": "mailbox.__setitem__(key, message)", "intent": "Replace the `message` corresponding to `key` with message .", "question_id": 5728}, {"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}, {"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}, {"snippet": "robot_file_parser.set_url(url)", "intent": "Sets the URL referring to a robots.txt file . With arguments `url`.", "question_id": 11909}, {"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810}, {"snippet": "bisect.bisect_left(a, x, lo=0)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 853}, {"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}, {"snippet": "null_handler.createLock()", "intent": "This method returns None for the lock , since there is no underlying I/O to which access needs to be serialized .", "question_id": 5439}, {"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}, {"snippet": "Node.removeChild(oldChild)", "intent": "Remove a child node . `oldChild` must be a child of this node ; if not , ValueError is raised .", "question_id": 12332}, {"snippet": "os.utime(path, ns)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` .", "question_id": 6959}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5472}, {"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}, {"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}, {"snippet": "hashlib.algorithms_available", "intent": "A set containing the names of the hash algorithms that are available in the running Python interpreter.", "question_id": 4300}, {"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "question_id": 8797}, {"snippet": "loop.sendfile(transport, file)", "intent": "Send a `file` over a `transport` .", "question_id": 256}, {"snippet": "str.center(width, fillchar)", "intent": "Return centered in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9180}, {"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}, {"snippet": "ZipFile.writestr(zinfo_or_arcname, data, compresslevel=None)", "intent": "Write a file into the archive . `zinfo_or_arcname` is either the file name it will be given in the archive , or a ZipInfo instance . The contents is `data` , which may be either a str or a bytes instance ; if it is a str , it is encoded as UTF-8 first . Similarly , `compresslevel` will override the constructor if given .", "question_id": 12841}, {"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478}, {"snippet": "shelve.Shelf(dict, protocol=None)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8245}, {"snippet": "IMAP4.starttls(ssl_context=None)", "intent": "Send a STARTTLS command . The `ssl_context` argument is optional and should be a ssl.SSLContext object .", "question_id": 4743}, {"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}, {"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}, {"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}, {"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}, {"snippet": "profile.runctx(command, globals, locals, filename=None, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `filename`, `sort`.", "question_id": 7668}, {"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}, {"snippet": "xml.dom.XML_NAMESPACE", "intent": "The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4).", "question_id": 12308}, {"snippet": "SMTP.auth(mechanism, authobject)", "intent": "Issue an SMTP AUTH command for the specified authentication `mechanism` , and handle the challenge response via `authobject` .", "question_id": 8524}, {"snippet": "oss_audio_device.mode", "intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "question_id": 7200}, {"snippet": "tixCommand.tix_filedialog()", "intent": "Returns the file selection dialog that may be shared among different calls from this application .", "question_id": 10586}, {"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}, {"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}, {"snippet": "future.set_running_or_notify_cancel()", "intent": "This method should only be called by Executor implementations before executing the work associated with the Future and by unit tests .", "question_id": 1477}, {"snippet": "configparser.InterpolationMissingOptionError", "intent": "Exception raised when an option referenced from a value does not exist.", "question_id": 1598}, {"snippet": "zipimporter.get_filename(fullname)", "intent": "Return the value __file__ would be set to if the specified module was imported . With arguments `fullname`.", "question_id": 12886}, {"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}, {"snippet": "open(file, mode='r', encoding=None)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4071}, {"snippet": "ctypes.sizeof(obj_or_type)", "intent": "Returns the size in bytes of a ctypes type or instance memory buffer . With arguments `obj_or_type`.", "question_id": 1833}, {"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}, {"snippet": "importlib.util.module_from_spec(spec)", "intent": "Create a new module based on `spec` and spec.loader.create_module .", "question_id": 4930}, {"snippet": "doctest.DONT_ACCEPT_BLANKLINE", "intent": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "question_id": 2753}, {"snippet": "email.parser.FeedParser()", "intent": "Works like BytesFeedParser except that the input to the feed ( ) method must be a string .", "question_id": 3368}, {"snippet": "plistlib.writePlist(rootObject, pathOrFile)", "intent": "Write `rootObject` to an XML plist file . `pathOrFile` may be either a file name or a ( writable and binary ) file object", "question_id": 7580}, {"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}, {"snippet": "socket.CMSG_SPACE(length)", "intent": "Return the buffer size needed for recvmsg ( ) to receive an ancillary data item with associated data of the given `length` , along with any trailing padding .", "question_id": 8666}, {"snippet": "InputSource.setCharacterStream(charfile)", "intent": "Set the character stream ( a text file ) for this input source . With arguments `charfile`.", "question_id": 12642}, {"snippet": "turtle.getscreen()", "intent": "Return the TurtleScreen object the turtle is drawing on .", "question_id": 11037}, {"snippet": "dir(object)", "intent": "Without arguments , return the list of names in the current local scope . With an argument , attempt to return a list of valid attributes for that `object` .", "question_id": 4007}, {"snippet": "os.path.splitdrive(path)", "intent": "Split the pathname `path` into a pair ( drive , tail ) where drive is either a mount point or the empty string .", "question_id": 7170}, {"snippet": "SMTP.connect(host='localhost', port=0)", "intent": "Connect to a `host` on a given `port` .", "question_id": 8514}, {"snippet": "codecs.CodecInfo(encode, decode, incrementaldecoder=None)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`, `incrementaldecoder`.", "question_id": 1205}, {"snippet": "FieldStorage.getfirst(name)", "intent": "This method always returns only one value associated with form field `name` .", "question_id": 1026}, {"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}, {"snippet": "platform.java_ver('', ''), '', ''), release='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7491}, {"snippet": "_thread.interrupt_main()", "intent": "Simulate the effect of a signal.SIGINT signal arriving in the main thread .", "question_id": 12945}, {"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}, {"snippet": "unicodedata.name(chr, default)", "intent": "Returns the name assigned to the character `chr` as a string . If no name is defined , `default` is returned , or , if not given , ValueError is raised .", "question_id": 11341}, {"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}, {"snippet": "ZipInfo.date_time", "intent": "The time and date of the last modification to the archive member.", "question_id": 12864}, {"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}, {"snippet": "widget.stop()", "intent": "Stop autoincrement mode : cancels any recurring timer event initiated by Progressbar.start ( ) for this progress bar .", "question_id": 10619}, {"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}, {"snippet": "dircmp.diff_files", "intent": "Files which are in both a and b, whose contents differ according to the class\u2019s file comparison operator.", "question_id": 3778}, {"snippet": "oss_mixer_device.set_recsrc(bitmask)", "intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "question_id": 7209}, {"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}, {"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}, {"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}, {"snippet": "tree_builder.data(data)", "intent": "Adds text to the current element . `data` is a string .", "question_id": 12542}, {"snippet": "hash(object)", "intent": "Return the hash value of the `object` ( if it has one ) .", "question_id": 4029}, {"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}, {"snippet": "window.clearok(flag)", "intent": "If `flag` is True , the next call to refresh ( ) will clear the window completely .", "question_id": 2035}, {"snippet": "mailbox.MMDF(path)", "intent": "A subclass of Mailbox for mailboxes in MMDF format . With arguments `path`.", "question_id": 5802}, {"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}, {"snippet": "asyncio.sleep(delay, result=None, loop=None)", "intent": "Block for `delay` seconds . If `result` is provided , it is returned to the caller when the coroutine completes . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 598}, {"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}, {"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}, {"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}, {"snippet": "str.encode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9188}, {"snippet": "datetime.max", "intent": "The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None).", "question_id": 2270}, {"snippet": "time.tzname", "intent": "A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.", "question_id": 10475}, {"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}, {"snippet": "importlib.abc.FileLoader(fullname, path)", "intent": "An abstract base class which inherits from ResourceLoader and ExecutionLoader , providing concrete implementations of ResourceLoader.get_data ( ) and ExecutionLoader.get_filename ( ) . The `fullname` argument is a fully resolved name of the module the loader is to handle . The `path` argument is the path to the file for the module .", "question_id": 4835}, {"snippet": "html.escape(s)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences .", "question_id": 4346}, {"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}, {"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}, {"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 39}, {"snippet": "Packer.reset()", "intent": "Resets the pack buffer to the empty string .", "question_id": 12274}, {"snippet": "null_translations.install()", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ .", "question_id": 4258}, {"snippet": "signature.replace(parameters, return_annotation)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4988}, {"snippet": "pickletools.dis(pickle, out=None, indentlevel=4)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . Successive levels , indicated by MARK opcodes in the stream , are indented by `indentlevel` spaces .", "question_id": 7421}, {"snippet": "xml.etree.ElementTree.iterparse(source, events=None, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `events` is a sequence of events to report back . `parser` is an optional parser instance .", "question_id": 12445}, {"snippet": "partial.args", "intent": "The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.", "question_id": 4165}, {"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}, {"snippet": "errno.EINPROGRESS", "intent": "Operation now in progress", "question_id": 3620}, {"snippet": "IndexError", "intent": "Raised when a sequence subscript is out of range.", "question_id": 3642}, {"snippet": "test_case.assertEqual(first, second, msg=None)", "intent": "Test that `first` and `second` are equal . With arguments `msg`.", "question_id": 11376}, {"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}, {"snippet": "element_tree.write(file, short_empty_elements=True)", "intent": "Writes the element tree to a `file` , as XML . The keyword-only `short_empty_elements` parameter controls the formatting of elements that contain no content .", "question_id": 12532}, {"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}, {"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}, {"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139}, {"snippet": "unittest.mock.Mock(**kwargs)", "intent": "Create a new Mock object . With arguments `**kwargs`.", "question_id": 11560}, {"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}, {"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}, {"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}, {"snippet": "xmlrpc.client.dumps(params, methodname=None, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` . With arguments `methodname`.", "question_id": 12705}, {"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}, {"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}, {"snippet": "content_manager.get_content(msg, *args, **kw)", "intent": "Look up a handler function based on the mimetype of `msg` ( see next paragraph ) , call it , passing through all arguments , and return the result of the call . With arguments `*args`, `**kw`.", "question_id": 3032}, {"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}, {"snippet": "http.cookiejar.FileCookieJar(filename, delayload=None)", "intent": "`policy` is an object implementing the CookiePolicy interface . With arguments `filename`, `delayload`.", "question_id": 4472}, {"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}, {"snippet": "tkinter.tix.DirSelectDialog", "intent": "The DirSelectDialog widget presents the directories in the file system in a dialog window.", "question_id": 10565}, {"snippet": "decimal.compare_total_mag(other, context=None)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . This operation is unaffected by `context` and is quiet : no flags are changed and no rounding is performed . With arguments `other`.", "question_id": 2406}, {"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}, {"snippet": "pdb.Pdb(completekey='tab', skip=None)", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7350}, {"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}, {"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}, {"snippet": "socket_handler.send(packet)", "intent": "Send a pickled byte-string `packet` to the socket .", "question_id": 5488}, {"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}, {"snippet": "os.fdatasync(fd)", "intent": "Force write of file with filedescriptor `fd` to disk .", "question_id": 6721}, {"snippet": "Node.childNodes", "intent": "A list of nodes contained within this node.", "question_id": 12319}, {"snippet": "re.split(pattern, string, maxsplit=0, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list . With arguments `flags`.", "question_id": 7946}, {"snippet": "Path.owner()", "intent": "Return the name of the user owning the file .", "question_id": 7302}, {"snippet": "platform.uname()", "intent": "Fairly portable uname interface .", "question_id": 7484}, {"snippet": "subprocess.call(args, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead :", "question_id": 9661}, {"snippet": "socket.has_ipv6", "intent": "This constant contains a boolean value which indicates if IPv6 is supported on this platform.", "question_id": 8607}, {"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}, {"snippet": "doctest.run_docstring_examples(f, globs, verbose=False)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . If optional argument `verbose` is true , output is generated even if there are no failures .", "question_id": 2787}, {"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154}, {"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}, {"snippet": "socket.setblocking(flag)", "intent": "Set blocking or non-blocking mode of the socket : if `flag` is false , the socket is set to non-blocking , else to blocking mode .", "question_id": 8737}, {"snippet": "email.policy.compat32", "intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "question_id": 3451}, {"snippet": "socket.getdefaulttimeout()", "intent": "Return the default timeout in seconds ( float ) for new socket objects .", "question_id": 8667}, {"snippet": "context.subtract(x, y)", "intent": "Return the difference between `x` and `y` .", "question_id": 2572}, {"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}, {"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}, {"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}, {"snippet": "weakref.getweakrefs(object)", "intent": "Return a list of all weak reference and proxy objects which refer to `object` .", "question_id": 12080}, {"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}, {"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}, {"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}, {"snippet": "Document.createProcessingInstruction(target, data)", "intent": "Create and return a processing instruction node containing the `target` and `data` passed as parameters .", "question_id": 12349}, {"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}, {"snippet": "decimal.Decimal(context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2393}, {"snippet": "xml.sax.saxutils.escape(data)", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` .", "question_id": 12652}, {"snippet": "errno.EDEADLOCK", "intent": "File locking deadlock error", "question_id": 3563}, {"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}, {"snippet": "errno.ENOSYS", "intent": "Function not implemented", "question_id": 3543}, {"snippet": "os.DirEntry", "intent": "Object yielded by scandir() to expose the file path and other file attributes of a directory entry.", "question_id": 6906}, {"snippet": "xml.etree.ElementTree.ElementTree()", "intent": "ElementTree wrapper class .", "question_id": 12507}, {"snippet": "Path.replace(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7309}, {"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}, {"snippet": "re.split(pattern, string, flags=0)", "intent": "Split `string` by the occurrences of `pattern` . With arguments `flags`.", "question_id": 7945}, {"snippet": "py_zip_file.writepy(pathname)", "intent": "Search for files *.py and add the corresponding file to the archive . If `pathname` is a file , the filename must end with .py , and just the ( corresponding *.pyc ) file is added at the top level ( no path information ) .", "question_id": 12856}, {"snippet": "TarFile.gettarinfo(name=None, fileobj=None)", "intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor .", "question_id": 9964}, {"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}, {"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}, {"snippet": "message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "question_id": 3003}, {"snippet": "sys.flags", "intent": "The named tuple flags exposes the status of command line flags.", "question_id": 9790}, {"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}, {"snippet": "NNTP.head()", "intent": "Same as article ( ) , but sends a HEAD command .", "question_id": 6484}, {"snippet": "json.load(fp, **kw, parse_constant=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_constant` , if specified , will be called with one of the following strings : '-Infinity ' , 'Infinity ' , 'NaN ' . With arguments `**kw`.", "question_id": 5295}, {"snippet": "ast.literal_eval(node_or_string)", "intent": "Safely evaluate an expression node or a string containing a Python literal or container display . With arguments `node_or_string`.", "question_id": 149}, {"snippet": "compileall.compile_dir(dir, legacy=False)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `legacy` is true , byte-code files are written to their legacy locations and names , which may overwrite byte-code files created by another version of Python .", "question_id": 1415}, {"snippet": "imp.find_module(name, path)", "intent": "Try to find the module `name` . If `path` is omitted or None , the list of directory names given by sys.path is searched , but first a few special places are searched : the function tries to find a built-in module with the given name ( C_BUILTIN ) , then a frozen module ( PY_FROZEN ) , and on some systems some other places are looked in as well ( on Windows , it looks in the registry which may point to a specific file ) .", "question_id": 4762}, {"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}, {"snippet": "Telnet.expect(list)", "intent": "Read until one from a `list` of a regular expressions matches .", "question_id": 10030}, {"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}, {"snippet": "control.event(event, argument, condition=1)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `condition`.", "question_id": 6127}, {"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}, {"snippet": "audioop.maxpp(fragment, width)", "intent": "Return the maximum peak-peak value in the sound `fragment` . With arguments `width`.", "question_id": 697}, {"snippet": "decimal.Context(capitals=None)", "intent": "Creates a new context . The `capitals` field is either 0 or 1 ( the default ) .", "question_id": 2504}, {"snippet": "async_chat.push(data)", "intent": "Pushes `data` on to the channel \u2019 s queue to ensure its transmission .", "question_id": 175}, {"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}, {"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}, {"snippet": "test_case.run()", "intent": "Run the test , collecting the `result` into the TestResult object passed as result .", "question_id": 11369}, {"snippet": "abc_meta.register(subclass)", "intent": "Register `subclass` as a \u201c virtual subclass \u201d of this ABC .", "question_id": 2}, {"snippet": "zlib.compressobj(zdict, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `method` is the compression algorithm .", "question_id": 12899}, {"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}, {"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}, {"snippet": "text_calendar.formatmonth(theyear, themonth, w=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . With arguments `theyear`, `themonth`.", "question_id": 929}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}, {"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}, {"snippet": "Pattern.search(string, pos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 .", "question_id": 7971}, {"snippet": "deque.popleft()", "intent": "Remove and return an element from the left side of the deque .", "question_id": 1365}, {"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}, {"snippet": "test_result.errors", "intent": "A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "question_id": 11508}, {"snippet": "signature.bind(*args, **kwargs)", "intent": "Create a mapping from positional and keyword arguments to parameters . Returns BoundArguments if `*args` and `**kwargs` match the signature , or raises a TypeError .", "question_id": 4986}, {"snippet": "window.addch(y, x, ch)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2003}, {"snippet": "imp.get_tag()", "intent": "Return the PEP 3147 magic tag string matching this version of Python \u2019 s magic number , as returned by get_magic ( ) .", "question_id": 4770}, {"snippet": "concurrent.futures.ProcessPoolExecutor()", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes .", "question_id": 1457}, {"snippet": "config_parser.has_option(section, option)", "intent": "If the given `section` exists , and contains the given `option` , return True ; otherwise return False .", "question_id": 1511}, {"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}, {"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}, {"snippet": "shelve.BsdDbShelf(dict, keyencoding='utf-8')", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8255}, {"snippet": "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . The add_subparsers ( ) method is normally called with no arguments and returns a special `action` object . With arguments `prog`, `parser_class`.", "question_id": 79}, {"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}, {"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}, {"snippet": "decimal.next_plus()", "intent": "Return the smallest number representable in the given `context` ( or in the current thread \u2019 s context if no context is given ) that is larger than the given operand .", "question_id": 2453}, {"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}, {"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}, {"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}, {"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}, {"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}, {"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}, {"snippet": "email.headerregistry.ContentTypeHeader", "intent": "A ParameterizedMIMEHeader class that handles the Content-Type header.", "question_id": 3169}, {"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717}, {"snippet": "str.lstrip(chars)", "intent": "Return a copy of the string with leading characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9218}, {"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}, {"snippet": "inspect_loader.source_to_code(data)", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e .", "question_id": 4829}, {"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}, {"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}, {"snippet": "types.MethodDescriptorType", "intent": "The type of methods of some built-in data types such as str.join().", "question_id": 11194}, {"snippet": "Path.glob(pattern)", "intent": "Glob the given relative `pattern` in the directory represented by this path , yielding all matching files ( of any kind ) :", "question_id": 7271}, {"snippet": "subprocess.DEVNULL", "intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that the special file os.devnull will be used.", "question_id": 9583}, {"snippet": "queue_handler.prepare(record)", "intent": "Prepares a `record` for queuing .", "question_id": 5555}, {"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}, {"snippet": "decimal.next_toward(other)", "intent": "If the two operands are unequal , return the number closest to the first operand in the direction of the second operand . With arguments `other`.", "question_id": 2455}, {"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}, {"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}, {"snippet": "Request.get_method()", "intent": "Return a string indicating the HTTP request method .", "question_id": 11824}, {"snippet": "chunk.read(size=-1)", "intent": "Read at most `size` bytes from the chunk ( less if the read hits the end of the chunk before obtaining size bytes ) .", "question_id": 1091}, {"snippet": "urllib.request.Request(url, data=None, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . `data` must be an object specifying additional data to send to the server , or None if no such data is needed . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11774}, {"snippet": "str(errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4118}, {"snippet": "os.walk(top, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6978}, {"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}, {"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}, {"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375}, {"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}, {"snippet": "queue.put(obj)", "intent": "Put `obj` into the queue .", "question_id": 6202}, {"snippet": "socket.SocketType", "intent": "This is a Python type object that represents the socket object type.", "question_id": 8633}, {"snippet": "mmap.seek(pos)", "intent": "Set the file \u2019 s current position . With arguments `pos`.", "question_id": 6018}, {"snippet": "trace.Trace(outfile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `outfile` is the name of the file in which to write updated count information .", "question_id": 10714}, {"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}, {"snippet": "ctypes.c_uint32", "intent": "Represents the C 32-bit unsigned int datatype.", "question_id": 1875}, {"snippet": "xml.parsers.expat.model.XML_CQUANT_PLUS", "intent": "The model must occur one or more times (like A+).", "question_id": 7785}, {"snippet": "base_header.defects", "intent": "A tuple of HeaderDefect instances reporting any RFC compliance problems found during parsing.", "question_id": 3152}, {"snippet": "dict.update(other)", "intent": "Update the dictionary with the key/value pairs from `other` , overwriting existing keys .", "question_id": 9491}, {"snippet": "window.insnstr(str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . With arguments `str`.", "question_id": 2078}, {"snippet": "curses.OK", "intent": "Some curses routines  that  return  an integer, such as  napms(), return OK upon success.", "question_id": 2132}, {"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}, {"snippet": "random.normalvariate(mu, sigma)", "intent": "Normal distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7914}, {"snippet": "inspect.CO_OPTIMIZED", "intent": "The code object is optimized, using fast locals.", "question_id": 5040}, {"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}, {"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}, {"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}, {"snippet": "errno.EXFULL", "intent": "Exchange full", "question_id": 3559}, {"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}, {"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}, {"snippet": "shlex.error_leader(infile=None)", "intent": "This method generates an error message leader in the format of a Unix C compiler error label ; the format is ' '' % s '' , line % d : ' , where the % s is replaced with the name of the current source file and the % d with the current input line number ( the optional arguments can be used to override these ) . With arguments `infile`.", "question_id": 8291}, {"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}, {"snippet": "print(*objects, sep=' ')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4076}, {"snippet": "pickletools.dis(pickle, out=None)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7416}, {"snippet": "queue_listener.createLock()", "intent": "Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe .", "question_id": 5596}, {"snippet": "FTP.connect(host='')", "intent": "Connect to the given `host` and `port` .", "question_id": 3905}, {"snippet": "str.expandtabs()", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size .", "question_id": 9192}, {"snippet": "@reprlib.recursive_repr(fillvalue=\"...\")", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread . If a recursive call is made , the `fillvalue` is returned , otherwise , the usual __repr__ ( ) call is made .", "question_id": 8054}, {"snippet": "mailbox.remove(key)", "intent": "Delete the message corresponding to `key` from the mailbox .", "question_id": 5725}, {"snippet": "turtle.onkey(fun, key)", "intent": "Bind `fun` to key-release event of `key` .", "question_id": 11067}, {"snippet": "warnings.simplefilter(action, lineno=0)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "question_id": 12035}, {"snippet": "mailbox.close()", "intent": "Flush the mailbox , unlock it if necessary , and close any open files .", "question_id": 5753}, {"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}, {"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}, {"snippet": "Repr.maxlevel", "intent": "Depth limit on the creation of recursive representations.", "question_id": 8055}, {"snippet": "pprint.pprint(object, stream=None, indent=1)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7649}, {"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}, {"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}, {"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}, {"snippet": "tkinter.tix.TList", "intent": "The TList widget can be used to display data in a tabular format.", "question_id": 10573}, {"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}, {"snippet": "executor.shutdown()", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing .", "question_id": 1445}, {"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}, {"snippet": "pprint.isreadable(object)", "intent": "Determine if the formatted representation of `object` is \u201c readable , \u201d or can be used to reconstruct the value using eval ( ) .", "question_id": 7653}, {"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}, {"snippet": "json.JSONDecoder(strict=True)", "intent": "Simple JSON decoder . If `strict` is false ( True is the default ) , then control characters will be allowed inside strings .", "question_id": 5315}, {"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}, {"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}, {"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}, {"snippet": "bytes(source, encoding, errors)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) . With arguments `errors`.", "question_id": 9257}, {"snippet": "DOMImplementation.hasFeature(feature, version)", "intent": "Return true if the `feature` identified by the pair of strings feature and `version` is implemented .", "question_id": 12311}, {"snippet": "multiprocessing.get_context()", "intent": "Return a context object which has the same attributes as the multiprocessing module .", "question_id": 6224}, {"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}, {"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}, {"snippet": "nntplib.NNTPReplyError", "intent": "Exception raised when an unexpected reply is received from the server.", "question_id": 6441}, {"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}, {"snippet": "doctest.DocTestFailure(test, example, got)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` \u2019 s actual output did not match its expected output . With arguments `test`, `got`.", "question_id": 2902}, {"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}, {"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391}, {"snippet": "asyncore.loop(timeout, use_poll, map, count)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 647}, {"snippet": "element.find(match, namespaces=None)", "intent": "Finds the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12492}, {"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}, {"snippet": "loop.default_exception_handler(context)", "intent": "Default exception handler . `context` parameter has the same meaning as in call_exception_handler ( ) .", "question_id": 309}, {"snippet": "email_message.del_param(param, requote=True)", "intent": "Remove the given parameter completely from the Content-Type `header` . Use of the `requote` parameter with EmailMessage objects is deprecated . With arguments `param`.", "question_id": 3272}, {"snippet": "KeyboardInterrupt", "intent": "Raised when the user hits the interrupt key (normally Control-C or Delete).", "question_id": 3644}, {"snippet": "int.from_bytes(bytes, byteorder, signed=False)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument indicates whether two \u2019 s complement is used to represent the integer .", "question_id": 9146}, {"snippet": "timeit.repeat(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10493}, {"snippet": "fileinput.FileInput(bufsize=0)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `bufsize`.", "question_id": 3804}, {"snippet": "subprocess.SW_HIDE", "intent": "Hides the window.", "question_id": 9644}, {"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}, {"snippet": "sys.settrace(tracefunc)", "intent": "Set the system \u2019 s trace function , which allows you to implement a Python source code debugger in Python . For more fine-grained usage , it \u2019 s possible to set a trace function by assigning frame.f_trace = `tracefunc` explicitly , rather than relying on it being set indirectly via the return value from an already installed trace function .", "question_id": 9839}, {"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}, {"snippet": "errno.ENETDOWN", "intent": "Network is down", "question_id": 3605}, {"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687}, {"snippet": "tkinter.Tcl(baseName=None, useTk=0)", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`, `useTk`.", "question_id": 10536}, {"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 966}, {"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}, {"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084}, {"snippet": "smtp_handler.getSubject(record)", "intent": "If you want to specify a subject line which is record-dependent , override this method . With arguments `record`.", "question_id": 5524}, {"snippet": "cgitb.html(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as HTML and returning the result as a string .", "question_id": 1071}, {"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}, {"snippet": "wsgi_request_handler.get_environ()", "intent": "Returns a dictionary containing the WSGI environment for a request .", "question_id": 12232}, {"snippet": "loop.call_soon(callback, *args)", "intent": "Schedule a `callback` to be called with args arguments at the next iteration of the event loop . With arguments `*args`.", "question_id": 189}, {"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}, {"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}, {"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}, {"snippet": "bdb.Breakpoint(self, file, line, cond=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`, `cond`.", "question_id": 756}, {"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}, {"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}, {"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}, {"snippet": "json.dumps(obj, **kw, indent=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `indent`.", "question_id": 5286}, {"snippet": "compile(source, filename, mode, dont_inherit=False, optimize=-1)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source . The argument `optimize` specifies the optimization level of the compiler ; the default value of -1 selects the optimization level of the interpreter as given by -O options .", "question_id": 3998}, {"snippet": "loop.remove_writer(fd)", "intent": "Stop monitoring the `fd` file descriptor for write availability .", "question_id": 275}, {"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}, {"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}, {"snippet": "re.subn(pattern, repl, string, flags=0)", "intent": "Perform the same operation as sub ( ) , but return a tuple ( new_string , number_of_subs_made ) . With arguments `pattern`, `repl`, `string`, `flags`.", "question_id": 7957}, {"snippet": "subprocess.call(args, stdin=None, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead : With arguments `stdin`.", "question_id": 9666}, {"snippet": "codecs.encode(obj)", "intent": "Encodes `obj` using the codec registered for `encoding` .", "question_id": 1192}, {"snippet": "IMAP4.rename(oldmailbox, newmailbox)", "intent": "Rename mailbox named `oldmailbox` to `newmailbox` .", "question_id": 4725}, {"snippet": "types.new_class(name)", "intent": "Creates a class object dynamically using the appropriate metaclass . The first three arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) , the keyword arguments ( such as metaclass ) .", "question_id": 11170}, {"snippet": "BaseHandler.http_error_default(req, fp, code, msg, hdrs)", "intent": "This method is not defined in BaseHandler , but subclasses should override it if they intend to provide a catch-all for otherwise unhandled HTTP errors . `req` will be a Request object , `fp` will be a file-like object with the HTTP error body , `code` will be the three-digit code of the error , `msg` will be the user-visible explanation of the code and `hdrs` will be a mapping object with the headers of the error .", "question_id": 11846}, {"snippet": "Dialect.quotechar", "intent": "A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "question_id": 1727}, {"snippet": "process.terminate()", "intent": "Terminate the process .", "question_id": 6186}, {"snippet": "message.__bytes__()", "intent": "Equivalent to as_bytes ( ) .", "question_id": 2951}, {"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}, {"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}, {"snippet": "test.support.MISSING_C_DOCSTRINGS", "intent": "Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS.", "question_id": 10132}, {"snippet": "smtp_channel.conn", "intent": "Holds the socket object connecting to the client.", "question_id": 8438}, {"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}, {"snippet": "feature.set_current()", "intent": "Make this feature the current feature of msilib .", "question_id": 6124}, {"snippet": "test_case.assertListEqual(first, second)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`.", "question_id": 11454}, {"snippet": "os.geteuid()", "intent": "Return the current process \u2019 s effective user id .", "question_id": 6675}, {"snippet": "codecs.BOM", "intent": "These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "question_id": 1243}, {"snippet": "zipfile.ZipFile(file, mode='r', compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12799}, {"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}, {"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}, {"snippet": "SMTP.docmd(cmd, args='')", "intent": "Send a command `cmd` to the server . The optional argument `args` is simply concatenated to the command , separated by a space .", "question_id": 8510}, {"snippet": "bdb.runctx(cmd, globals, locals)", "intent": "For backwards compatibility . With arguments `cmd`, `globals`, `locals`.", "question_id": 815}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}, {"snippet": "urllib.request.urlopen(url, timeout, cafile=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11744}, {"snippet": "pickle.dump(obj, file, protocol=None)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) .", "question_id": 7364}, {"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}, {"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}, {"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}, {"snippet": "timeit.repeat(stmt='pass', repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10495}, {"snippet": "traceback_exception.offset", "intent": "For syntax errors - the offset into the text where the error occurred.", "question_id": 10810}, {"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}, {"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}, {"snippet": "set.difference(*others)", "intent": "Return a new set with elements in the set that are not in the others . With arguments `*others`.", "question_id": 9449}, {"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}, {"snippet": "xml.etree.ElementTree.ParseError", "intent": "XML parse error, raised by the various parsing methods in this module when parsing fails.", "question_id": 12561}, {"snippet": "super(type, object-or-type)", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` . With arguments `object-or-type`.", "question_id": 4125}, {"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}, {"snippet": "statistics.pstdev(data)", "intent": "Return the population standard deviation ( the square root of the population variance ) . With arguments `data`.", "question_id": 9133}, {"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}, {"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}, {"snippet": "platform.system_alias(system, release, version)", "intent": "Returns ( `system` , `release` , `version` ) aliased to common marketing names used for some systems .", "question_id": 7482}, {"snippet": "completed_process.stdout", "intent": "Captured stdout from the child process.", "question_id": 9580}, {"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}, {"snippet": "CookiePolicy.hide_cookie2", "intent": "Don\u2019t add Cookie2 header to requests (the presence of this header indicates to the server that we understand RFC 2965 cookies).", "question_id": 4538}, {"snippet": "socket.setblocking(flag)", "intent": "Set blocking or non-blocking mode of the socket : if `flag` is false , the socket is set to non-blocking , else to blocking mode .", "question_id": 8737}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}, {"snippet": "tempfile.NamedTemporaryFile(dir=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `dir`.", "question_id": 10050}, {"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}, {"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}, {"snippet": "xml.sax.xmlreader.InputSource(system_id=None)", "intent": "Encapsulation of the information needed by the XMLReader to read entities . With arguments `system_id`.", "question_id": 12610}, {"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}, {"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}, {"snippet": "modulefinder.ModuleFinder()", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script .", "question_id": 6035}, {"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}, {"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}, {"snippet": "random.Random(seed)", "intent": "Class that implements the default pseudo-random number generator used by the random module . With arguments `seed`.", "question_id": 7918}, {"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}, {"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}, {"snippet": "IMAP4.sort(sort_criteria, charset)", "intent": "The sort command is a variant of search with sorting semantics for the results . Sort has two arguments before the `search_criterion` argument ( s ) ; a parenthesized list of `sort_criteria` , and the searching `charset` .", "question_id": 4741}, {"snippet": "errno.ENOTSOCK", "intent": "Socket operation on non-socket", "question_id": 3593}, {"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}, {"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}, {"snippet": "barrier.n_waiting", "intent": "The number of threads currently waiting in the barrier.", "question_id": 10426}, {"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}, {"snippet": "doctest.debug_src(src, pm=False)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument . Optional argument `pm` has the same meaning as in function debug ( ) above .", "question_id": 2891}, {"snippet": "cgitb.handler(info=None)", "intent": "This function handles an exception using the default settings ( that is , show a report in the browser , but don \u2019 t log to a file ) . The optional `info` argument should be a 3-tuple containing an exception type , exception value , and traceback object , exactly like the tuple returned by sys.exc_info ( ) .", "question_id": 1074}, {"snippet": "socket.sendfile(file, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8734}, {"snippet": "bz2.BZ2File(filename)", "intent": "Open a bzip2-compressed file in binary `mode` . If `filename` is a str or bytes object , open the named file directly .", "question_id": 886}, {"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}, {"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}, {"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}, {"snippet": "zlib.error", "intent": "Exception raised on compression and decompression errors.", "question_id": 12892}, {"snippet": "gc.get_objects()", "intent": "Returns a list of all objects tracked by the collector , excluding the list returned .", "question_id": 4174}, {"snippet": "shlex.shlex(infile=None, posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The second optional argument is a filename string , which sets the initial value of the `infile` attribute . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8281}, {"snippet": "smtp_channel.seen_greeting", "intent": "Holds a string containing the greeting sent by the client in its \u201cHELO\u201d.", "question_id": 8442}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "cmd.Cmd()", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework .", "question_id": 1127}, {"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}, {"snippet": "contextvars.Context", "intent": "A mapping of ContextVars to their values.", "question_id": 1649}, {"snippet": "errno.ETXTBSY", "intent": "Text file busy", "question_id": 3531}, {"snippet": "datetime.time(hour=0, second=0)", "intent": "All arguments are optional . With arguments `hour`, `second`.", "question_id": 2322}, {"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}, {"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}, {"snippet": "ur_lopener.version", "intent": "Variable that specifies the user agent of the opener object.", "question_id": 11904}, {"snippet": "log_record.getMessage()", "intent": "Returns the message for this LogRecord instance after merging any user-supplied arguments with the message .", "question_id": 5630}, {"snippet": "queue.get(block)", "intent": "Remove and return an item from the queue . If optional args `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 6205}, {"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}, {"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}, {"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}, {"snippet": "decimal.max_mag(other, context=None)", "intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`, `context`.", "question_id": 2446}, {"snippet": "urllib.parse.parse_qs(qs, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11672}, {"snippet": "_func_ptr.errcheck", "intent": "Assign a Python function or another callable to this attribute.", "question_id": 1789}, {"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}, {"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}, {"snippet": "kevent.fflags", "intent": "Filter specific flags.", "question_id": 8206}, {"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}, {"snippet": "range(start, stop, step)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`, `step`.", "question_id": 4096}, {"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}, {"snippet": "multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer)", "intent": "The same as RawArray ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes array . With arguments `typecode_or_type`, `size_or_initializer`.", "question_id": 6271}, {"snippet": "FieldStorage.getlist(name)", "intent": "This method always returns a list of values associated with form field `name` .", "question_id": 1028}, {"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}, {"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}, {"snippet": "ssl.OP_NO_TICKET", "intent": "Prevent client side from requesting a session ticket.", "question_id": 8944}, {"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`.", "question_id": 59}, {"snippet": "os.utime(path, ns, times=None, dir_fd=None)", "intent": "Set the access and modified `times` of the file specified by `path` . utime ( ) takes two optional parameters , times and `ns` . With arguments `dir_fd`.", "question_id": 6963}, {"snippet": "element.remove(subelement)", "intent": "Removes `subelement` from the element .", "question_id": 12506}, {"snippet": "typing.ClassVar", "intent": "Special type construct to mark class variables.", "question_id": 11337}, {"snippet": "os.pwrite(fd, str, offset)", "intent": "Write the bytestring in `str` to file descriptor `fd` at position of `offset` , leaving the file offset unchanged .", "question_id": 6788}, {"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}, {"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}, {"snippet": "traceback.print_exception(etype, value, tb, chain=True)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . If `chain` is true ( the default ) , then chained exceptions ( the __cause__ or __context__ attributes of the exception ) will be printed as well , like the interpreter itself does when printing an unhandled exception . With arguments `etype`, `value`.", "question_id": 10740}, {"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}, {"snippet": "element.makeelement(tag, attrib)", "intent": "Creates a new element object of the same type as this element . With arguments `tag`, `attrib`.", "question_id": 12505}, {"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}, {"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}, {"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}, {"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}, {"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}, {"snippet": "queue_listener.getChild(suffix)", "intent": "Returns a logger which is a descendant to this logger , as determined by the `suffix` .", "question_id": 5569}, {"snippet": "dis.stack_effect(opcode, oparg)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2731}, {"snippet": "Decompress.decompress(data, max_length=0)", "intent": "Decompress `data` , returning a bytes object containing the uncompressed data corresponding to at least part of the data in string . If the optional parameter `max_length` is non-zero then the return value will be no longer than max_length .", "question_id": 12935}, {"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}, {"snippet": "gettext.translation(domain)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4229}, {"snippet": "statistics.pstdev(data, mu=None)", "intent": "Return the population standard deviation ( the square root of the population variance ) . With arguments `data`, `mu`.", "question_id": 9134}, {"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}, {"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}, {"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}, {"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}, {"snippet": "DocXMLRPCServer.set_server_title(server_title)", "intent": "Set the title used in the generated HTML documentation . With arguments `server_title`.", "question_id": 12761}, {"snippet": "connection.backup(target, pages=0, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8835}, {"snippet": "@functools.lru_cache()", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4146}, {"snippet": "i_pv4_network.max_prefixlen", "intent": "Refer to the corresponding attribute documentation in IPv4Address.", "question_id": 5194}, {"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}, {"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}, {"snippet": "function.get_frees()", "intent": "Return a tuple containing names of free variables in this function .", "question_id": 9750}, {"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}, {"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798}, {"snippet": "BaseTransport.set_protocol(protocol)", "intent": "Set a new `protocol` .", "question_id": 400}, {"snippet": "time.ctime()", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time .", "question_id": 10439}, {"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}, {"snippet": "_thread.LockType", "intent": "This is the type of lock objects.", "question_id": 12942}, {"snippet": "memory_bio.read()", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9056}, {"snippet": "exit(code=None)", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e . EOF ) to exit \u201d , and when called , raise SystemExit with the specified exit `code` .", "question_id": 1611}, {"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}, {"snippet": "ctypes.memmove(dst, src, count)", "intent": "Same as the standard C memmove library function : copies `count` bytes from `src` to `dst` .", "question_id": 1826}, {"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}, {"snippet": "turtle.onscreenclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11077}, {"snippet": "socket.recv_into(buffer, nbytes)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8715}, {"snippet": "unittest.mock.sentinel", "intent": "The sentinel object provides a convenient way of providing unique objects for your tests.", "question_id": 11645}, {"snippet": "config_parser.options(section)", "intent": "Return a list of options available in the specified `section` .", "question_id": 1510}, {"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}, {"snippet": "mailbox.MaildirMessage()", "intent": "A `message` with Maildir-specific behaviors .", "question_id": 5811}, {"snippet": "widget.get()", "intent": "Returns the current value of the combobox .", "question_id": 10599}, {"snippet": "urllib.parse.parse_qsl(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11679}, {"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}, {"snippet": "mock.return_value", "intent": "Set this to configure the value returned by calling the mock:", "question_id": 11590}, {"snippet": "uuid.UUID()", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11937}, {"snippet": "socket.if_indextoname(if_index)", "intent": "Return a network interface name corresponding to an interface index number . With arguments `if_index`.", "question_id": 8672}, {"snippet": "SMTP.starttls(keyfile=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext .", "question_id": 8527}, {"snippet": "str(object='')", "intent": "Return a string version of `object` .", "question_id": 9169}, {"snippet": "WriteTransport.get_write_buffer_limits()", "intent": "Get the high and low watermarks for write flow control .", "question_id": 408}, {"snippet": "parameter.kind", "intent": "Describes how argument values are bound to the parameter.", "question_id": 5001}, {"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}, {"snippet": "config_parser.get(section, option, raw=False, vars=None)", "intent": "Get an `option` value for the named `section` . All the ' % ' interpolations are expanded in the return values , unless the `raw` argument is true . If `vars` is provided , it must be a dictionary .", "question_id": 1527}, {"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8351}, {"snippet": "xmlparser.ExternalEntityParserCreate(context)", "intent": "Create a \u201c child \u201d parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser . The `context` parameter should be the string passed to the ExternalEntityRefHandler ( ) handler function , described below .", "question_id": 7739}, {"snippet": "itertools.compress(data, selectors)", "intent": "Make an iterator that filters elements from `data` returning only those that have a corresponding element in `selectors` that evaluates to True .", "question_id": 5245}, {"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}, {"snippet": "str.splitlines()", "intent": "Return a list of the lines in the string , breaking at line boundaries .", "question_id": 9246}, {"snippet": "email.mime.message.MIMEMessage(_msg, _subtype='rfc822', policy=compat32)", "intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised . Optional `_subtype` sets the subtype of the message ; it defaults to rfc822 . Optional `policy` argument defaults to compat32 .", "question_id": 3353}, {"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}, {"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630}, {"snippet": "LookupError", "intent": "The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: IndexError, KeyError.", "question_id": 3634}, {"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}, {"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}, {"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}, {"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}, {"snippet": "socket.CAN_ISOTP", "intent": "CAN_ISOTP, in the CAN protocol family, is the ISO-TP (ISO 15765-2) protocol.", "question_id": 8586}, {"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}, {"snippet": "startupinfo.hStdOutput", "intent": "If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard output handle for the process.", "question_id": 9637}, {"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}, {"snippet": "stringprep.in_table_c7(code)", "intent": "Determine whether `code` is in tableC.7 ( Inappropriate for canonical representation ) .", "question_id": 9545}, {"snippet": "configparser.RawConfigParser(':'), ';'), strict=True)", "intent": "Legacy variant of the ConfigParser . With arguments `':')`, `';')`, `strict`.", "question_id": 1586}, {"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}, {"snippet": "profile.print_stats()", "intent": "Create a Stats object based on the current profile and print the results to stdout .", "question_id": 7682}, {"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}, {"snippet": "os.ctermid()", "intent": "Return the filename corresponding to the controlling terminal of the process .", "question_id": 6657}, {"snippet": "email.parser.Parser()", "intent": "This class is parallel to BytesParser , but handles string input .", "question_id": 3384}, {"snippet": "uuid.uuid5(namespace, name)", "intent": "Generate a UUID based on the SHA-1 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11963}, {"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}, {"snippet": "fileinput.hook_encoded(encoding)", "intent": "Returns a hook which opens each file with open ( ) , using the given `encoding` and `errors` to read the file .", "question_id": 3811}, {"snippet": "doctest.DocFileSuite(*paths, module_relative=True)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : With arguments `*paths`.", "question_id": 2797}, {"snippet": "re.split(pattern, string, maxsplit=0)", "intent": "Split `string` by the occurrences of `pattern` . If `maxsplit` is nonzero , at most maxsplit splits occur , and the remainder of the string is returned as the final element of the list .", "question_id": 7944}, {"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042}, {"snippet": "os.walk(top, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6978}, {"snippet": "text_wrapper.tabsize", "intent": "(default: 8) If expand_tabs is true, then all tab characters in text will be expanded to zero or more spaces, depending on the current column and the given tab size.", "question_id": 10329}, {"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}, {"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}, {"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}, {"snippet": "HTTPConnection.putheader(header)", "intent": "Send an RFC 822-style `header` to the server .", "question_id": 4449}, {"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}, {"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`, `optimize`.", "question_id": 12855}, {"snippet": "asyncio.BufferedProtocol(BaseProtocol)", "intent": "A base class for implementing streaming protocols with manual control of the receive buffer . With arguments `BaseProtocol`.", "question_id": 428}, {"snippet": "exec(object, globals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables .", "question_id": 4016}, {"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}, {"snippet": "random.randrange(start, stop)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7892}, {"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}, {"snippet": "babyl_message.remove_label(label)", "intent": "Remove `label` from the list of labels on the message .", "question_id": 5843}, {"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}, {"snippet": "window.addnstr(str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2005}, {"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}, {"snippet": "lzma.LZMAFile()", "intent": "Open an LZMA-compressed file in binary `mode` .", "question_id": 5666}, {"snippet": "os.fsdecode(filename)", "intent": "Decode the path-like `filename` from the filesystem encoding with 'surrogateescape ' error handler , or 'strict ' on Windows ; return str unchanged .", "question_id": 6664}, {"snippet": "turtle.goto(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10913}, {"snippet": "urllib.parse.urlencode(query, doseq=False, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The value element in itself can be a sequence and in that case , if the optional parameter `doseq` is evaluates to True , individual key=value pairs separated by ' & ' are generated for each element of the value sequence for the key . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11738}, {"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459}, {"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}, {"snippet": "process.terminate()", "intent": "Stop the child process .", "question_id": 551}, {"snippet": "os.spawnle(mode, path, env)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . For spawnle ( ) , spawnlpe ( ) , spawnve ( ) , and spawnvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( they are used instead of the current process \u2019 environment ) ; the functions spawnl ( ) , spawnlp ( ) , spawnv ( ) , and spawnvp ( ) all cause the new process to inherit the environment of the current process .", "question_id": 7054}, {"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}, {"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}, {"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}, {"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}, {"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}, {"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}, {"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}, {"snippet": "types.BuiltinFunctionType", "intent": "The type of built-in functions like len() or sys.exit(), and methods of built-in classes.", "question_id": 11190}, {"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}, {"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047}, {"snippet": "Pattern.findall(string)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7983}, {"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}, {"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}, {"snippet": "shutil.copyfile(src, dst, follow_symlinks=True)", "intent": "Copy the contents ( no metadata ) of the file named `src` to a file named `dst` and return dst . If `follow_symlinks` is false and src is a symbolic link , a new symbolic link will be created instead of copying the file src points to .", "question_id": 8312}, {"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}, {"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}, {"snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7366}, {"snippet": "async_exit_stack.enter_async_context(cm)", "intent": "Similar to enter_context ( ) but expects an asynchronous context manager . With arguments `cm`.", "question_id": 1633}, {"snippet": "Template.open(file, mode)", "intent": "Return a file-like object , open to `file` , but read from or written to by the pipeline . With arguments `mode`.", "question_id": 7433}, {"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}, {"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e .", "question_id": 8355}, {"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}, {"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}, {"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}, {"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}, {"snippet": "loop.run_until_complete(future)", "intent": "Run until the `future` ( an instance of Future ) has completed .", "question_id": 182}, {"snippet": "decimal.logical_invert(context=None)", "intent": "logical_invert ( ) is a logical operation . With arguments `context`.", "question_id": 2438}, {"snippet": "smtp_channel.peer", "intent": "Holds the name of the client peer as returned by conn.getpeername() where conn is conn.", "question_id": 8447}, {"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481}, {"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}, {"snippet": "test_case.assertFalse(expr, msg=None)", "intent": "Test that `expr` is true ( or false ) . With arguments `msg`.", "question_id": 11382}, {"snippet": "output_checker.check_output(want, got, optionflags)", "intent": "Return True iff the actual output from an example ( `got` ) matches the expected output ( `want` ) . With arguments `optionflags`.", "question_id": 2884}, {"snippet": "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None, offset=None)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError . If `lineno` is not None , compares to the line of the SyntaxError . If `offset` is not None , compares to the offset of the SyntaxError .", "question_id": 10238}, {"snippet": "urllib.request.UnknownHandler", "intent": "A catch-all class to handle unknown URLs.", "question_id": 11814}, {"snippet": "json.JSONEncoder(check_circular=True)", "intent": "Extensible JSON encoder for Python data structures . If `check_circular` is true ( the default ) , then lists , dicts , and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion ( which would cause an OverflowError ) .", "question_id": 5325}, {"snippet": "config_parser.readfp(fp, filename=None)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) . With arguments `filename`.", "question_id": 1567}, {"snippet": "nntplib.NNTP_SSL(host)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port .", "question_id": 6429}, {"snippet": "tempfile.mktemp(prefix='tmp')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10096}, {"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}, {"snippet": "token.ISTERMINAL(x)", "intent": "Return true for terminal token values . With arguments `x`.", "question_id": 10695}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stderr=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`, `stdin`.", "question_id": 540}, {"snippet": "xml.parsers.expat.model.XML_CQUANT_NONE", "intent": "No modifier is given, so it can appear exactly once, as for A.", "question_id": 7783}, {"snippet": "msvcrt.getwch()", "intent": "Wide char variant of getch ( ) , returning a Unicode value .", "question_id": 6157}, {"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}, {"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}, {"snippet": "cgi.print_environ()", "intent": "Format the shell environment in HTML .", "question_id": 1053}, {"snippet": "urllib.request.FileHandler", "intent": "Open local files.", "question_id": 11810}, {"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636}, {"snippet": "decimal.to_eng_string(context=None)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `context`.", "question_id": 2479}, {"snippet": "Match.start(group)", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8003}, {"snippet": "codeop.compile_command(source, symbol=\"single\")", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code . The `symbol` argument determines whether source is compiled as a statement ( 'single ' , the default ) or as an expression ( 'eval ' ) .", "question_id": 1306}, {"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}, {"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}, {"snippet": "stat_result.st_mtime", "intent": "Time of most recent content modification expressed in seconds.", "question_id": 6930}, {"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}, {"snippet": "email.policy.SMTP", "intent": "Suitable for serializing messages in conformance with the email RFCs.", "question_id": 3440}, {"snippet": "cmath.asinh(x)", "intent": "Return the inverse hyperbolic sine of `x` .", "question_id": 1108}, {"snippet": "test_case.defaultTestResult()", "intent": "Return an instance of the test result class that should be used for this test case class ( if no other result instance is provided to the run ( ) method ) .", "question_id": 11468}, {"snippet": "calendar.calendar(year, w=2, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `l`.", "question_id": 1016}, {"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}, {"snippet": "set > other", "intent": "Test whether the set is a proper superset of other, that is, set >= other and set != other.", "question_id": 9444}, {"snippet": "str.lower()", "intent": "Return a copy of the string with all the cased characters 4 converted to lowercase .", "question_id": 9217}, {"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}, {"snippet": "json.JSONDecoder(parse_constant=None)", "intent": "Simple JSON decoder . `parse_constant` , if specified , will be called with one of the following strings : '-Infinity ' , 'Infinity ' , 'NaN ' .", "question_id": 5314}, {"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}, {"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}, {"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}, {"snippet": "socket.getdefaulttimeout()", "intent": "Return the default timeout in seconds ( float ) for new socket objects .", "question_id": 8667}, {"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "heapq.heappop(heap)", "intent": "Pop and return the smallest item from the `heap` , maintaining the heap invariant .", "question_id": 4317}, {"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}, {"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}, {"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}, {"snippet": "widget.item(item, **kw, option=None)", "intent": "Query or modify the options for the specified `item` . If `option` is specified then the value for that option is returned . With arguments `**kw`.", "question_id": 10643}, {"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}, {"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}, {"snippet": "NNTP.starttls(context=None)", "intent": "Send a STARTTLS command . The `context` argument is optional and should be a ssl.SSLContext object .", "question_id": 6460}, {"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}, {"snippet": "policy.mangle_from_", "intent": "If True, lines starting with \u201cFrom \u201c in the body are escaped by putting a > in front of them.", "question_id": 3417}, {"snippet": "curses.mouseinterval(interval)", "intent": "Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click , and return the previous `interval` value .", "question_id": 1954}, {"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}, {"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}, {"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}, {"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}, {"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}, {"snippet": "bytes.isalnum()", "intent": "Return true if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty , false otherwise .", "question_id": 9381}, {"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}, {"snippet": "oss_audio_device.obuffree()", "intent": "Returns the number of samples that could be queued into the hardware buffer to be played without blocking .", "question_id": 7197}, {"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}, {"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}, {"snippet": "codecs.IncrementalEncoder(errors='strict')", "intent": "Constructor for an IncrementalEncoder instance . The IncrementalEncoder may implement different error handling schemes by providing the `errors` keyword argument .", "question_id": 1266}, {"snippet": "bz2.open(filename, mode='r', newline=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 885}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}, {"snippet": "socketserver.BaseServer(server_address, RequestHandlerClass)", "intent": "This is the superclass of all Server objects in the module . The two parameters are stored in the respective `server_address` and `RequestHandlerClass` attributes .", "question_id": 8759}, {"snippet": "date.isoweekday()", "intent": "Return the day of the week as an integer , where Monday is 1 and Sunday is 7 .", "question_id": 2240}, {"snippet": "shutil.get_archive_formats()", "intent": "Return a list of supported formats for archiving .", "question_id": 8358}, {"snippet": "errno.EEXIST", "intent": "File exists", "question_id": 3522}, {"snippet": "platform.libc_ver()", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7537}, {"snippet": "urllib.parse.urlencode(query, errors=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11736}, {"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}, {"snippet": "urllib.parse.parse_qsl(qs, strict_parsing=False)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `strict_parsing` is a flag indicating what to do with parsing `errors` . With arguments `qs`.", "question_id": 11681}, {"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}, {"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}, {"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971}, {"snippet": "symbol_table.get_children()", "intent": "Return a list of the nested symbol tables .", "question_id": 9745}, {"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}, {"snippet": "typing.TypeVar", "intent": "Type variable.", "question_id": 11229}, {"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}, {"snippet": "stat.SF_NOUNLINK", "intent": "The file may not be renamed or deleted.", "question_id": 9123}, {"snippet": "header_registry.__getitem__(name)", "intent": "Construct and return a class to handle creating a `name` header .", "question_id": 3184}, {"snippet": "importlib.abc.ExecutionLoader", "intent": "An abstract base class which inherits from InspectLoader that, when implemented, helps a module to be executed as a script.", "question_id": 4833}, {"snippet": "textwrap.indent(text, prefix, predicate=None)", "intent": "Add `prefix` to the beginning of selected lines in `text` . The optional `predicate` argument can be used to control which lines are indented .", "question_id": 10325}, {"snippet": "difflib.context_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format .", "question_id": 2628}, {"snippet": "bytearray.rsplit(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9357}, {"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595}, {"snippet": "SMTP.sendmail(from_addr, to_addrs, msg, mail_options=())", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string . The caller may pass a list of ESMTP options ( such as 8bitmime ) to be used in MAIL FROM commands as `mail_options` .", "question_id": 8535}, {"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}, {"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}, {"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}, {"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}, {"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}, {"snippet": "context.to_eng_string(x)", "intent": "Convert to a string , using engineering notation if an exponent is needed . With arguments `x`.", "question_id": 2573}, {"snippet": "select.epoll(sizehint=-1, flags=0)", "intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .", "question_id": 8153}, {"snippet": "somenamedtuple._replace(**kwargs)", "intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "question_id": 1386}, {"snippet": "os.unsetenv(key)", "intent": "Unset ( delete ) the environment variable named `key` .", "question_id": 6711}, {"snippet": "csv.DictReader(f, *args, **kwds, restkey=None, restval=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`, `restval`.", "question_id": 1700}, {"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}, {"snippet": "r_lock.acquire(blocking=True)", "intent": "Acquire a lock , `blocking` or non-blocking .", "question_id": 10382}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1708}, {"snippet": "csv.reader(csvfile, **fmtparams, dialect='excel')", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . 1 An optional `dialect` parameter can be given which is used to define a set of parameters specific to a particular CSV dialect . With arguments `**fmtparams`.", "question_id": 1681}, {"snippet": "typing.Hashable", "intent": "An alias to collections.abc.Hashable", "question_id": 11247}, {"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}, {"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}, {"snippet": "structure._anonymous_", "intent": "An optional sequence that lists the names of unnamed (anonymous) fields.", "question_id": 1892}, {"snippet": "heapq.heappushpop(heap, item)", "intent": "Push `item` on the `heap` , then pop and return the smallest item from the heap .", "question_id": 4318}, {"snippet": "traceback.format(limit=None)", "intent": "Format the traceback as a list of lines with newlines . If `limit` is set , format the limit most recent frames if limit is positive .", "question_id": 10896}, {"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}, {"snippet": "property(fget=None)", "intent": "Return a property attribute . `fget` is a function for getting an attribute value .", "question_id": 4086}, {"snippet": "site.getsitepackages()", "intent": "Return a list containing all global site-packages directories .", "question_id": 8409}, {"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}, {"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}, {"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}, {"snippet": "warnings.filterwarnings(action, message='', append=False)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12032}, {"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}, {"snippet": "formatter.assert_line_data()", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band .", "question_id": 3836}, {"snippet": "sqlite3.Error", "intent": "The base class of the other exceptions in this module.", "question_id": 8857}, {"snippet": "window.addstr(str, attr)", "intent": "Paint the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2008}, {"snippet": "text_wrapper.placeholder", "intent": "(default: ' [...]') String that will appear at the end of the output text if it has been truncated.", "question_id": 10338}, {"snippet": "uu.decode(in_file, out_file=None, quiet=False)", "intent": "This call decodes uuencoded file `in_file` placing the result on file `out_file` . Setting `quiet` to a true value silences this warning .", "question_id": 11930}, {"snippet": "maildir_message.get_date()", "intent": "Return the delivery date of the message as a floating-point number representing seconds since the epoch .", "question_id": 5819}, {"snippet": "context.copy_abs(x)", "intent": "Returns a copy of `x` with the sign set to 0 .", "question_id": 2524}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE", "intent": "A parameter entity contained incomplete markup.", "question_id": 7812}, {"snippet": "base_server.serve_forever()", "intent": "Handle requests until an explicit shutdown ( ) request .", "question_id": 8762}, {"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor . The `requestHandler` parameter should be a factory for request handler instances ; it defaults to SimpleXMLRPCRequestHandler .", "question_id": 12713}, {"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}, {"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}, {"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}, {"snippet": "datetime.isoformat(sep='T', timespec='auto')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result . The optional argument `timespec` specifies the number of additional components of the time to include ( the default is 'auto ' ) .", "question_id": 2309}, {"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}, {"snippet": "ac_in_buffer_size", "intent": "The asynchronous input buffer size (default 4096).", "question_id": 168}, {"snippet": "profile.Profile(timer=None, builtins=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `builtins`.", "question_id": 7676}, {"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}, {"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}, {"snippet": "os.lseek(fd, pos, how)", "intent": "Set the current position of file descriptor `fd` to position `pos` , modified by `how` : SEEK_SET or 0 to set the position relative to the beginning of the file ; SEEK_CUR or 1 to set it relative to the current position ; SEEK_END or 2 to set it relative to the end of the file .", "question_id": 6734}, {"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}, {"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}, {"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}, {"snippet": "stringprep.in_table_c11(code)", "intent": "Determine whether `code` is in tableC.1.1 ( ASCII space characters ) .", "question_id": 9535}, {"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}, {"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}, {"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}, {"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}, {"snippet": "lzma.LZMAFile(filename=None)", "intent": "Open an LZMA-compressed file in binary `mode` . The `filename` argument specifies either the file object to wrap , or the name of the file to open ( as a str , bytes or path-like object ) .", "question_id": 5667}, {"snippet": "lzma.open(filename, newline=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 5664}, {"snippet": "Telnet.read_until(expected, timeout=None)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10010}, {"snippet": "message.get_param(param, unquote=True)", "intent": "Return the value of the Content-Type `header` \u2019 s parameter `param` as a string . In any case , the parameter value ( either the returned string , or the VALUE item in the 3-tuple ) is always unquoted , unless `unquote` is set to False .", "question_id": 2994}, {"snippet": "Template.copy(infile, outfile)", "intent": "Copy `infile` to `outfile` through the pipe .", "question_id": 7434}, {"snippet": "iter(d)", "intent": "Return an iterator over the keys of the dictionary . With arguments `d`.", "question_id": 9477}, {"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687}, {"snippet": "asyncio.shield(aw)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task .", "question_id": 603}, {"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}, {"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}, {"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}, {"snippet": "audioop.bias(fragment, width, bias)", "intent": "Return a `fragment` that is the original fragment with a `bias` added to each sample . With arguments `width`.", "question_id": 685}, {"snippet": "gnu_translations.lngettext(singular, plural, n)", "intent": "Equivalent to gettext ( ) and ngettext ( ) , but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with set_output_charset ( ) . With arguments `singular`, `plural`, `n`.", "question_id": 4263}, {"snippet": "weakref.WeakSet(elements)", "intent": "Set class that keeps weak references to its `elements` .", "question_id": 12087}, {"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}, {"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}, {"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}, {"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}, {"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}, {"snippet": "unittest.TextTestRunner()", "intent": "A basic test runner implementation that outputs results to a `stream` .", "question_id": 11533}, {"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}, {"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}, {"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}, {"snippet": "xmlrpc.client.dumps(params, methodname=None, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` . With arguments `methodname`.", "question_id": 12705}, {"snippet": "set & other & ...", "intent": "Return a new set with elements common to the set and all others.", "question_id": 9448}, {"snippet": "io.DEFAULT_BUFFER_SIZE", "intent": "An int containing the default buffer size used by the module\u2019s buffered I/O classes.", "question_id": 5050}, {"snippet": "fileinput.isfirstline()", "intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "question_id": 3796}, {"snippet": "tempfile.mkstemp()", "intent": "Creates a temporary file in the most secure manner possible .", "question_id": 10071}, {"snippet": "faulthandler.cancel_dump_traceback_later()", "intent": "Cancel the last call to dump_traceback_later ( ) .", "question_id": 3730}, {"snippet": "subprocess.run(args, cwd=None)", "intent": "Run the command described by `args` . With arguments `cwd`.", "question_id": 9574}, {"snippet": "watched_file_handler.emit(record)", "intent": "Outputs the `record` to the file , but first calls reopenIfNeeded ( ) to reopen the file if it has changed .", "question_id": 5449}, {"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509}, {"snippet": "marshal.loads(bytes)", "intent": "Convert the bytes-like object to a value . Extra `bytes` in the input are ignored .", "question_id": 5883}, {"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}, {"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}, {"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild, context)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . `context` can be used to specify the context used for starting the worker processes . With arguments `initargs`.", "question_id": 6326}, {"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}, {"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687}, {"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}, {"snippet": "sys._current_frames()", "intent": "Return a dictionary mapping each thread \u2019 s identifier to the topmost stack frame currently active in that thread at the time the function is called .", "question_id": 9775}, {"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}, {"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}, {"snippet": "urllib.parse.parse_qsl(qs)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . With arguments `qs`.", "question_id": 11679}, {"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}, {"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}, {"snippet": "errno.ENOSYS", "intent": "Function not implemented", "question_id": 3543}, {"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}, {"snippet": "style.layout(style)", "intent": "Define the widget layout for given `style` .", "question_id": 10681}, {"snippet": "doctest.testfile(filename, report=True)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `report` prints a summary at the end when true , else prints nothing at the end .", "question_id": 2772}, {"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}, {"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}, {"snippet": "pyc_invalidation_mode.CHECKED_HASH", "intent": "The .pyc file includes a hash of the source file content, which Python will compare against the source at runtime to determine if the .pyc file needs to be regenerated.", "question_id": 7833}, {"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}, {"snippet": "inspect.iscoroutine(object)", "intent": "Return true if the `object` is a coroutine created by an async def function .", "question_id": 4955}, {"snippet": "sys.executable", "intent": "A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense.", "question_id": 9787}, {"snippet": "base64.b64decode(s)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 710}, {"snippet": "html_diff.__init__(linejunk=None)", "intent": "Initializes instance of HtmlDiff . `linejunk` and `charjunk` are optional keyword arguments passed into ndiff ( ) ( used by HtmlDiff to generate the side by side HTML differences ) .", "question_id": 2601}, {"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69}, {"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}, {"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}, {"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909}, {"snippet": "window.addch(y, x, ch)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2003}, {"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}, {"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794}, {"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}, {"snippet": "meta_path_finder.find_module(fullname, path)", "intent": "A legacy method for finding a loader for the specified module . If this is a top-level import , `path` will be None . With arguments `fullname`.", "question_id": 4805}, {"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365}, {"snippet": "Option.const", "intent": "For actions that store a constant value, the constant value to store.", "question_id": 6631}, {"snippet": "json_decoder.decode(s)", "intent": "Return the Python representation of `s` ( a str instance containing a JSON document ) .", "question_id": 5320}, {"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}, {"snippet": "FTP.rename(fromname, toname)", "intent": "Rename file `fromname` on the server to `toname` .", "question_id": 3959}, {"snippet": "importlib.machinery.WindowsRegistryFinder", "intent": "Finder for modules declared in the Windows registry.", "question_id": 4873}, {"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}, {"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}, {"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}, {"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}, {"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}, {"snippet": "gzip.GzipFile(fileobj=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value .", "question_id": 4286}, {"snippet": "context.keys()", "intent": "Return a list of all variables in the context object .", "question_id": 1658}, {"snippet": "lzma.LZMAFile(filename=None)", "intent": "Open an LZMA-compressed file in binary `mode` . The `filename` argument specifies either the file object to wrap , or the name of the file to open ( as a str , bytes or path-like object ) .", "question_id": 5667}, {"snippet": "xml.sax.xmlreader.AttributesImpl(attrs)", "intent": "This is an implementation of the Attributes interface ( see section The Attributes Interface ) . Objects of this class should be instantiated by readers ; `attrs` must be a dictionary-like object containing a mapping from attribute names to attribute values .", "question_id": 12611}, {"snippet": "doctest.DocTestFinder(verbose=False, exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2847}, {"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}, {"snippet": "file_loader.get_data(path)", "intent": "Reads `path` as a binary file and returns the bytes from it .", "question_id": 4840}, {"snippet": "datetime.time(second=0)", "intent": "All arguments are optional . With arguments `second`.", "question_id": 2317}, {"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}, {"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}, {"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646}, {"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}, {"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}, {"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268}, {"snippet": "raw_io_base.readall()", "intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "question_id": 5086}, {"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}, {"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}, {"snippet": "http.cookiejar.LWPCookieJar(filename)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`.", "question_id": 4528}, {"snippet": "os.posix_fallocate(fd, offset, len)", "intent": "Ensures that enough disk space is allocated for the file specified by `fd` starting from `offset` and continuing for `len` bytes .", "question_id": 6775}, {"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}, {"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}, {"snippet": "shelve.Shelf(dict, protocol=None)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The version of the pickle `protocol` can be specified with the protocol parameter .", "question_id": 8245}, {"snippet": "object", "intent": "Return a new featureless object.", "question_id": 4060}, {"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}, {"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633}, {"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}, {"snippet": "FileCookieJar.save()", "intent": "Save cookies to a file .", "question_id": 4498}, {"snippet": "os.walk(top, topdown=True)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `topdown` is True or not specified , the triple for a directory is generated before the triples for any of its subdirectories ( directories are generated top-down ) .", "question_id": 6976}, {"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}, {"snippet": "i_pv4_network.subnets()", "intent": "The subnets that join to make the current network definition , depending on the argument values .", "question_id": 5208}, {"snippet": "lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . With the `block` argument set to True ( the default ) , the method call will block until the lock is in an unlocked state , then set it to locked and return True .", "question_id": 6253}, {"snippet": "operator.__lt__(a, b)", "intent": "Perform \u201c rich comparisons \u201d between `a` and `b` .", "question_id": 6519}, {"snippet": "turtle.degrees(fullcircle=360.0)", "intent": "Set angle measurement units , i.e . With arguments `fullcircle`.", "question_id": 10946}, {"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}, {"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}, {"snippet": "bytes.rindex(sub)", "intent": "Like rfind ( ) but raises ValueError when the subsequence `sub` is not found .", "question_id": 9319}, {"snippet": "tabnanny.NannyNag", "intent": "Raised by process_tokens() if detecting an ambiguous indent.", "question_id": 9888}, {"snippet": "SSLContext.hostname_checks_common_name", "intent": "Whether check_hostname falls back to verify the cert\u2019s subject common name in the absence of a subject alternative name extension (default: true).", "question_id": 9049}, {"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}, {"snippet": "select.epoll(sizehint=-1, flags=0)", "intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .", "question_id": 8153}, {"snippet": "set.union(*others)", "intent": "Return a new set with elements from the set and all others . With arguments `*others`.", "question_id": 9445}, {"snippet": "difflib.SequenceMatcher", "intent": "This is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are hashable.", "question_id": 2595}, {"snippet": "null_translations.set_output_charset(charset)", "intent": "Change the encoding used to return translated messages . With arguments `charset`.", "question_id": 4257}, {"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}, {"snippet": "patch.object(target, attribute, **kwargs, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11621}, {"snippet": "codecs.lookup(encoding)", "intent": "Looks up the codec info in the Python codec registry and returns a CodecInfo object as defined below . With arguments `encoding`.", "question_id": 1200}, {"snippet": "typing.cast(typ, val)", "intent": "Cast a value to a type . With arguments `typ`, `val`.", "question_id": 11323}, {"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}, {"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}, {"snippet": "types.BuiltinMethodType", "intent": "The type of built-in functions like len() or sys.exit(), and methods of built-in classes.", "question_id": 11191}, {"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}, {"snippet": "socket_handler.close()", "intent": "Closes the socket .", "question_id": 5483}, {"snippet": "poplib.error_proto", "intent": "Exception raised on any errors from this module (errors from socket module are not caught).", "question_id": 7600}, {"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}, {"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}, {"snippet": "modulefinder.ModuleFinder()", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script .", "question_id": 6035}, {"snippet": "zipapp.get_interpreter(archive)", "intent": "Return the interpreter specified in the # ! line at the start of the `archive` .", "question_id": 12777}, {"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}, {"snippet": "shlex.escapedquotes", "intent": "Characters in quotes that will interpret escape characters defined in escape.", "question_id": 8299}, {"snippet": "TabError", "intent": "Raised when indentation contains an inconsistent use of tabs and spaces.", "question_id": 3667}, {"snippet": "property(fset=None, doc=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4094}, {"snippet": "Codec.decode(input)", "intent": "Decodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1264}, {"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}, {"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}, {"snippet": "smtplib.SMTP_SSL(port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8480}, {"snippet": "memoryview.f_contiguous", "intent": "A bool indicating whether the memory is Fortran contiguous.", "question_id": 9429}, {"snippet": "decimal.compare_total_mag(other)", "intent": "Compare two operands using their abstract representation rather than their value as in compare_total ( ) , but ignoring the sign of each operand . With arguments `other`.", "question_id": 2405}, {"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}, {"snippet": "json.JSONEncoder(ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5324}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5472}, {"snippet": "dbm.open(file, mode=0o666)", "intent": "Open the database `file` file and return a corresponding object . The optional `mode` argument is the Unix mode of the file , used only when the database has to be created .", "question_id": 2368}, {"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}, {"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11139}, {"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}, {"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}, {"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}, {"snippet": "resource.RLIMIT_MSGQUEUE", "intent": "The number of bytes that can be allocated for POSIX message queues.", "question_id": 8087}, {"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}, {"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}, {"snippet": "subprocess.run(args, stdout=None)", "intent": "Run the command described by `args` . If capture_output is true , `stdout` and `stderr` will be captured .", "question_id": 9570}, {"snippet": "test_case.assertSetEqual(first, second)", "intent": "Tests that two sets are equal . Fails if either of `first` or `second` does not have a set.difference ( ) method .", "question_id": 11458}, {"snippet": "os.XATTR_SIZE_MAX", "intent": "The maximum size the value of an extended attribute can be.", "question_id": 7005}, {"snippet": "urllib.request.urlopen(url, timeout)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11742}, {"snippet": "cmath.tau", "intent": "The mathematical constant \u03c4, as a float.", "question_id": 1122}, {"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}, {"snippet": "turtle.tracer()", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11058}, {"snippet": "configparser.ConfigParser(':'), ';'), strict=True)", "intent": "The main configuration parser . When `strict` is True ( the default ) , the parser won \u2019 t allow for any section or option duplicates while reading from a single source ( file , string or dictionary ) , raising DuplicateSectionError or DuplicateOptionError . With arguments `':')`, `';')`.", "question_id": 1503}, {"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}, {"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}, {"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}, {"snippet": "str()", "intent": "Return a string version of `object` .", "question_id": 9170}, {"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}, {"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}, {"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}, {"snippet": "bz2.decompress(data)", "intent": "Decompress `data` , a bytes-like object .", "question_id": 908}, {"snippet": "test.support.gc_collect()", "intent": "Force as many objects as possible to be collected .", "question_id": 10192}, {"snippet": "async_chat.collect_incoming_data(data)", "intent": "Called with `data` holding an arbitrary amount of received data .", "question_id": 171}, {"snippet": "msilib.Binary(filename)", "intent": "Represents entries in the Binary table ; inserting such an object using add_data ( ) reads the file named `filename` into the table .", "question_id": 6064}, {"snippet": "io.open(file, mode='r')", "intent": "This is an alias for the builtin open ( ) function . With arguments `file`, `mode`.", "question_id": 5052}, {"snippet": "window.untouchwin()", "intent": "Mark all lines in the window as unchanged since the last call to refresh ( ) .", "question_id": 2128}, {"snippet": "element.extend(subelements)", "intent": "Appends `subelements` from a sequence object with zero or more elements .", "question_id": 12490}, {"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}, {"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}, {"snippet": "base64.standard_b64encode(s)", "intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "question_id": 714}, {"snippet": "json.load(fp, **kw, parse_float=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "question_id": 5293}, {"snippet": "test_case.assertIsInstance(obj, cls, msg=None)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) . With arguments `msg`.", "question_id": 11396}, {"snippet": "ssl.enum_crls(store_name)", "intent": "Retrieve CRLs from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8900}, {"snippet": "context.next_plus(x)", "intent": "Returns the smallest representable number larger than `x` .", "question_id": 2556}, {"snippet": "compileall.compile_path(skip_curdir=True, force=False)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . With arguments `force`.", "question_id": 1438}, {"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}, {"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}, {"snippet": "thread.getName()", "intent": "Old getter/setter API for name ; use it directly as a property instead .", "question_id": 10367}, {"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}, {"snippet": "dbm.open(file, flag='r')", "intent": "Open the database `file` file and return a corresponding object . The optional `flag` argument can be :", "question_id": 2367}, {"snippet": "smtplib.SMTP_SSL(timeout, local_hostname=None)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class .", "question_id": 8471}, {"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}, {"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}, {"snippet": "Cmd.precmd(line)", "intent": "Hook method executed just before the command `line` line is interpreted , but after the input prompt is generated and issued .", "question_id": 1141}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}, {"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}, {"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}, {"snippet": "maildir_message.set_info(info)", "intent": "Set \u201c `info` \u201d to info , which should be a string .", "question_id": 5822}, {"snippet": "future.cancel()", "intent": "Attempt to cancel the call .", "question_id": 1468}, {"snippet": "ensurepip.bootstrap(user=False)", "intent": "Bootstraps pip into the current or designated environment . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3492}, {"snippet": "contextlib.redirect_stderr(new_target)", "intent": "Similar to redirect_stdout ( ) but redirecting sys.stderr to another file or file-like object . With arguments `new_target`.", "question_id": 1624}, {"snippet": "os.altsep", "intent": "An alternative character used by the operating system to separate pathname components, or None if only one separator character exists.", "question_id": 7124}, {"snippet": "test.support.SuppressCrashReport", "intent": "A context manager used to try to prevent crash dialog popups on tests that are expected to crash a subprocess.", "question_id": 10289}, {"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}, {"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}, {"snippet": "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)", "intent": "Returns a new instance of the QueueListener class . The instance is initialized with the `queue` to send messages to and a list of handlers which will handle entries placed on the queue . If `respect_handler_level` is True , a handler \u2019 s level is respected ( compared with the level for the message ) when deciding whether to pass messages to that handler ; otherwise , the behaviour is as in previous Python versions - to always pass each message to each handler . With arguments `*handlers`.", "question_id": 5558}, {"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}, {"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}, {"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}, {"snippet": "base_request_handler.finish()", "intent": "Called after the handle ( ) method to perform any clean-up actions required .", "question_id": 8786}, {"snippet": "xmlparser.SetParamEntityParsing(flag)", "intent": "Control parsing of parameter entities ( including the external DTD subset ) . Possible `flag` values are XML_PARAM_ENTITY_PARSING_NEVER , XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE and XML_PARAM_ENTITY_PARSING_ALWAYS .", "question_id": 7740}, {"snippet": "test.support.TESTFN", "intent": "Set to a name that is safe to use as the name of a temporary file.", "question_id": 10115}, {"snippet": "heapq.heappop(heap)", "intent": "Pop and return the smallest item from the `heap` , maintaining the heap invariant .", "question_id": 4317}, {"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}, {"snippet": "decimal.Context(rounding=None)", "intent": "Creates a new context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "question_id": 2501}, {"snippet": "message.get_payload(decode=False)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . Optional `decode` is a flag indicating whether the payload should be decoded or not , according to the Content-Transfer-Encoding header .", "question_id": 2958}, {"snippet": "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'bytes'>`, `maintype`, `subtype`.", "question_id": 3053}, {"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}, {"snippet": "decimal.is_infinite()", "intent": "Return True if the argument is either positive or negative infinity and False otherwise .", "question_id": 2419}, {"snippet": "fileinput.isfirstline()", "intent": "Returns true if the line just read is the first line of its file , otherwise returns false .", "question_id": 3796}, {"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}, {"snippet": "inspect.Parameter(name, kind)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`.", "question_id": 4993}, {"snippet": "Path.iterdir()", "intent": "When the path points to a directory , yield path objects of the directory contents :", "question_id": 7281}, {"snippet": "os.ctermid()", "intent": "Return the filename corresponding to the controlling terminal of the process .", "question_id": 6657}, {"snippet": "widget.index(item)", "intent": "Returns the integer index of `item` within its parent \u2019 s list of children .", "question_id": 10639}, {"snippet": "io.StringIO(initial_value='')", "intent": "An in-memory stream for text I/O . The initial value of the buffer can be set by providing `initial_value` .", "question_id": 5165}, {"snippet": "shutil.chown(path, user=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8342}, {"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}, {"snippet": "os.execl(path, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . With arguments `arg0`, `arg1`.", "question_id": 7009}, {"snippet": "email_message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . If the value contains non-ASCII characters , the `charset` and `language` may be explicitly specified using the optional charset and language parameters . With arguments `param`.", "question_id": 3264}, {"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}, {"snippet": "socket.getservbyname(servicename)", "intent": "Translate an Internet service name and protocol name to a port number for that service . With arguments `servicename`.", "question_id": 8654}, {"snippet": "lzma.compress(data, format=FORMAT_XZ, filters=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5711}, {"snippet": "ssl.create_default_context(cafile=None)", "intent": "Return a new SSLContext object with default settings for the given `purpose` . `cafile` , `capath` , `cadata` represent optional CA certificates to trust for certificate verification , as in SSLContext.load_verify_locations ( ) .", "question_id": 8865}, {"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}, {"snippet": "tokenize.tokenize(readline)", "intent": "The tokenize ( ) generator requires one argument , `readline` , which must be a callable object which provides the same interface as the io.IOBase.readline ( ) method of file objects .", "question_id": 10701}, {"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}, {"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244}, {"snippet": "resource.getrusage(who)", "intent": "This function returns an object that describes the resources consumed by either the current process or its children , as specified by the `who` parameter .", "question_id": 8095}, {"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}, {"snippet": "InteractiveInterpreter.showsyntaxerror()", "intent": "Display the syntax error that just occurred .", "question_id": 1180}, {"snippet": "msvcrt.LK_LOCK", "intent": "Locks the specified bytes.", "question_id": 6147}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_SYNTAX", "intent": "Some unspecified syntax error was encountered.", "question_id": 7801}, {"snippet": "XMLReader.getProperty(propertyname)", "intent": "Return the current setting for property `propertyname` .", "question_id": 12625}, {"snippet": "urllib.request.url2pathname(path)", "intent": "Convert the `path` component path from a percent-encoded URL to the local syntax for a path .", "question_id": 11766}, {"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}, {"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}, {"snippet": "TarFile.extractall(members=None)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` .", "question_id": 9934}, {"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}, {"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}, {"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}, {"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}, {"snippet": "hmac.new(key, msg=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . If `msg` is present , the method call update ( msg ) is made .", "question_id": 4330}, {"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}, {"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}, {"snippet": "datetime.time(second=0)", "intent": "All arguments are optional . With arguments `second`.", "question_id": 2317}, {"snippet": "bytes.fromhex(string)", "intent": "This bytes class method returns a bytes object , decoding the given `string` object .", "question_id": 9261}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`, `stdin`.", "question_id": 524}, {"snippet": "globals()", "intent": "Return a dictionary representing the current global symbol table .", "question_id": 4027}, {"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}, {"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}, {"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}, {"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}, {"snippet": "unittest.main(testLoader=unittest.defaultTestLoader)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "question_id": 11550}, {"snippet": "base_http_request_handler.address_string()", "intent": "Returns the client address .", "question_id": 4658}, {"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}, {"snippet": "date.fromisoformat(date_string)", "intent": "Return a date corresponding to a `date_string` in the format emitted by date.isoformat ( ) .", "question_id": 2222}, {"snippet": "audioop.tostereo(fragment, width, lfactor, rfactor)", "intent": "Generate a stereo `fragment` from a mono fragment . Each pair of samples in the stereo fragment are computed from the mono sample , whereby left channel samples are multiplied by `lfactor` and right channel samples by `rfactor` . With arguments `width`.", "question_id": 706}, {"snippet": "parser.st2list(st, col_info=False)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree . With arguments `col_info`.", "question_id": 7216}, {"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}, {"snippet": "str.isalnum()", "intent": "Return true if all characters in the string are alphanumeric and there is at least one character , false otherwise .", "question_id": 9202}, {"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}, {"snippet": "bdb.stop_here(frame)", "intent": "This method checks if the `frame` is somewhere below botframe in the call stack .", "question_id": 777}, {"snippet": "Wave_read.getframerate()", "intent": "Returns sampling frequency .", "question_id": 12053}, {"snippet": "IMAP4.deleteacl(mailbox, who)", "intent": "Delete the ACLs ( remove any rights ) set for `who` on `mailbox` .", "question_id": 4698}, {"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}, {"snippet": "compile(source, filename, mode, flags=0, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3996}, {"snippet": "calendar.prcal(year, l=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `m`.", "question_id": 1010}, {"snippet": "turtle.right(angle)", "intent": "Turn turtle right by `angle` units .", "question_id": 10908}, {"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}, {"snippet": "NameError", "intent": "Raised when a local or global name is not found.", "question_id": 3646}, {"snippet": "errno.ELIBMAX", "intent": "Attempting to link in too many shared libraries", "question_id": 3587}, {"snippet": "sqlite3.NotSupportedError", "intent": "Exception raised in case a method or database API was used which is not supported by the database, e.g.", "question_id": 8862}, {"snippet": "socketserver.BaseRequestHandler", "intent": "This is the superclass of all request handler objects.", "question_id": 8783}, {"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}, {"snippet": "curses.ascii.unctrl(c)", "intent": "Return a string representation of the ASCII character c. If `c` is printable , this string is the character itself .", "question_id": 1917}, {"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}, {"snippet": "finalize.__call__()", "intent": "If self is alive then mark it as dead and return the result of calling func ( *args , **kwargs ) .", "question_id": 12091}, {"snippet": "async_exit_stack.push_async_callback(callback, *args, **kwds)", "intent": "Similar to `callback` ( ) but expects a coroutine function . With arguments `*args`, `**kwds`.", "question_id": 1635}, {"snippet": "time.__str__()", "intent": "For a time t , str ( t ) is equivalent to t.isoformat ( ) .", "question_id": 2346}, {"snippet": "SimpleXMLRPCServer.register_function()", "intent": "Register a `function` that can respond to XML-RPC requests .", "question_id": 12731}, {"snippet": "timezone.utc", "intent": "The UTC timezone, timezone(timedelta(0)).", "question_id": 2363}, {"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}, {"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660}, {"snippet": "deque.insert(i, x)", "intent": "Insert `x` into the deque at position `i` .", "question_id": 1363}, {"snippet": "os.spawnl(mode, path)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process .", "question_id": 7053}, {"snippet": "gettext.translation(domain, class_=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths . The actual class instantiated is `class_` if provided , otherwise GNUTranslations .", "question_id": 4232}, {"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}, {"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}, {"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}, {"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}, {"snippet": "contextlib.closing(thing)", "intent": "Return a context manager that closes `thing` upon completion of the block .", "question_id": 1619}, {"snippet": "@test.support.requires_IEEE_754", "intent": "Decorator for skipping tests on non-IEEE 754 platforms.", "question_id": 10214}, {"snippet": "calendar.itermonthdays3(year, month)", "intent": "Return an iterator for the `month` month in the `year` year similar to itermonthdates ( ) , but not restricted by the datetime.date range .", "question_id": 915}, {"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}, {"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}, {"snippet": "Path.write_text(data, encoding=None)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file : With arguments `encoding`.", "question_id": 7324}, {"snippet": "html_calendar.cssclasses", "intent": "A list of CSS classes used for each weekday.", "question_id": 970}, {"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}, {"snippet": "widget.next(item)", "intent": "Returns the identifier of `item` \u2019 s next sibling , or \u2018 \u2019 if item is the last child of its parent .", "question_id": 10645}, {"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}, {"snippet": "logging.Formatter(fmt=None, style='%')", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5615}, {"snippet": "deque.pop()", "intent": "Remove and return an element from the right side of the deque .", "question_id": 1364}, {"snippet": "context_var.name", "intent": "The name of the variable.", "question_id": 1639}, {"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}, {"snippet": "smtplib.SMTPSenderRefused", "intent": "Sender address refused.", "question_id": 8501}, {"snippet": "doctest.DocFileSuite(*paths, optionflags=0)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "question_id": 2802}, {"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}, {"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}, {"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}, {"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}, {"snippet": "timezone.dst(dt)", "intent": "Always returns None . With arguments `dt`.", "question_id": 2361}, {"snippet": "element.findall(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12493}, {"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}, {"snippet": "trace.runctx(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters , in the defined global and local environments . With arguments `cmd`.", "question_id": 10717}, {"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}, {"snippet": "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d . `encoding` is an optional text encoding .", "question_id": 12474}, {"snippet": "os.rename(src, dst, src_dir_fd=None, dst_dir_fd=None)", "intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "question_id": 6895}, {"snippet": "Cookie.is_expired(now=None)", "intent": "True if cookie has passed the time at which the server requested it should expire . If `now` is given ( in seconds since the epoch ) , return whether the cookie has expired at the specified time .", "question_id": 4576}, {"snippet": "_thread.stack_size()", "intent": "Return the thread stack `size` used when creating new threads .", "question_id": 12950}, {"snippet": "quopri.decode(input, output, header=False)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file . If the optional argument `header` is present and true , underscore will be decoded as space .", "question_id": 7874}, {"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}, {"snippet": "pty.openpty()", "intent": "Open a new pseudo-terminal pair , using os.openpty ( ) if possible , or emulation code for generic Unix systems .", "question_id": 7699}, {"snippet": "compileall.compile_file(fullname, rx=None)", "intent": "Compile the file with path `fullname` . If `rx` is given , its search method is passed the full path name to the file being compiled , and if it returns a true value , the file is not compiled and True is returned .", "question_id": 1422}, {"snippet": "connection.execute(sql)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s execute ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8812}, {"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}, {"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`, `updated`.", "question_id": 4163}, {"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}, {"snippet": "IMAP4.status(mailbox, names)", "intent": "Request named status conditions for `mailbox` . With arguments `names`.", "question_id": 4744}, {"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}, {"snippet": "stream_writer.writelines(list)", "intent": "Writes the concatenated `list` of strings to the stream ( possibly by reusing the write ( ) method ) .", "question_id": 1282}, {"snippet": "msvcrt.open_osfhandle(handle, flags)", "intent": "Create a C runtime file descriptor from the file `handle` handle . The `flags` parameter should be a bitwise OR of os.O_APPEND , os.O_RDONLY , and os.O_TEXT .", "question_id": 6153}, {"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}, {"snippet": "mock.call_count", "intent": "An integer telling you how many times the mock object has been called:", "question_id": 11589}, {"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}, {"snippet": "random.normalvariate(mu, sigma)", "intent": "Normal distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7914}, {"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}, {"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}, {"snippet": "smtplib.SMTP_SSL(timeout)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class .", "question_id": 8468}, {"snippet": "email.utils.formatdate(timeval=None, localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3475}, {"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}, {"snippet": "@staticmethod", "intent": "Transform a method into a static method.", "question_id": 4112}, {"snippet": "ctypes.set_errno(value)", "intent": "Set the current `value` of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value .", "question_id": 1831}, {"snippet": "message.set_param(param, value, header='Content-Type', language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "question_id": 3007}, {"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}, {"snippet": "bytearray.splitlines(keepends=False)", "intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9402}, {"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}, {"snippet": "curses.getwin(file)", "intent": "Read window related data stored in the `file` by an earlier putwin ( ) call .", "question_id": 1939}, {"snippet": "stream_writer.reset()", "intent": "Flushes and resets the codec buffers used for keeping state .", "question_id": 1283}, {"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}, {"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}, {"snippet": "os.unsetenv(key)", "intent": "Unset ( delete ) the environment variable named `key` .", "question_id": 6711}, {"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}, {"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}, {"snippet": "turtle.screensize(canvwidth=None, bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `canvwidth`, `bg`.", "question_id": 11052}, {"snippet": "asyncio.AbstractEventLoop", "intent": "Abstract base class for asyncio-compliant event loops.", "question_id": 344}, {"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}, {"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}, {"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 968}, {"snippet": "xmlrpc.client.loads(data, use_datetime=False)", "intent": "Convert an XML-RPC request or response into Python objects , a ( params , methodname ) . The `use_builtin_types` flag can be used to cause date/time values to be presented as datetime.datetime objects and binary `data` to be presented as bytes objects ; this flag is false by default . The obsolete `use_datetime` flag is similar to use_builtin_types but it applies only to date/time values .", "question_id": 12709}, {"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}, {"snippet": "http.client.HTTPSConnection(host, timeout)", "intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `timeout`.", "question_id": 4382}, {"snippet": "Path.write_bytes(data)", "intent": "Open the file pointed to in bytes mode , write `data` to it , and close the file :", "question_id": 7322}, {"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}, {"snippet": "signature.parameters", "intent": "An ordered mapping of parameters\u2019 names to the corresponding Parameter objects.", "question_id": 4984}, {"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}, {"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023}, {"snippet": "sysconfig.parse_config_h(fp)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file .", "question_id": 9874}, {"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}, {"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}, {"snippet": "re.error(msg, pattern=None, pos=None)", "intent": "Exception raised when a string passed to one of the functions here is not a valid regular expression ( for example , it might contain unmatched parentheses ) or when some other error occurs during compilation or matching . It is never an error if a string contains no match for a `pattern` . With arguments `msg`, `pos`.", "question_id": 7964}, {"snippet": "doctest.DocTestFinder()", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects .", "question_id": 2840}, {"snippet": "TarFile.list()", "intent": "Print a table of contents to sys.stdout .", "question_id": 9927}, {"snippet": "csv.DictReader(f, *args, **kwds)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . With arguments `*args`, `**kwds`.", "question_id": 1692}, {"snippet": "difflib.SequenceMatcher(b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2672}, {"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}, {"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857}, {"snippet": "HTTPResponse.debuglevel", "intent": "A debugging hook.", "question_id": 4466}, {"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459}, {"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}, {"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}, {"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "question_id": 6327}, {"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}, {"snippet": "FTP.connect(host='', timeout=None)", "intent": "Connect to the given `host` and `port` . The optional `timeout` parameter specifies a timeout in seconds for the connection attempt .", "question_id": 3910}, {"snippet": "next(iterator, default)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method . If `default` is given , it is returned if the iterator is exhausted , otherwise StopIteration is raised .", "question_id": 4058}, {"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}, {"snippet": "queue.cancel_join_thread()", "intent": "Prevent join_thread ( ) from blocking .", "question_id": 6210}, {"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}, {"snippet": "base_manager.register(typeid, callable, proxytype)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object . `proxytype` is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid .", "question_id": 6291}, {"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}, {"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}, {"snippet": "weakref.getweakrefcount(object)", "intent": "Return the number of weak references and proxies which refer to `object` .", "question_id": 12079}, {"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}, {"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Otherwise you can explicitly specify the image subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3343}, {"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}, {"snippet": "FTP.storlines(cmd, fp)", "intent": "Store a file in ASCII transfer mode . `cmd` should be an appropriate STOR command ( see storbinary ( ) ) . Lines are read until EOF from the file object `fp` ( opened in binary mode ) using its readline ( ) method to provide the data to be stored .", "question_id": 3941}, {"snippet": "output_checker.output_difference(example, got, optionflags)", "intent": "Return a string describing the differences between the expected output for a given `example` ( example ) and the actual output ( `got` ) . `optionflags` is the set of option flags used to compare want and got .", "question_id": 2885}, {"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}, {"snippet": "message.get_params(header='content-type', unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2989}, {"snippet": "pkgutil.walk_packages(prefix='')", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "question_id": 7451}, {"snippet": "os.minor(device)", "intent": "Extract the `device` minor number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6883}, {"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509}, {"snippet": "io_base.truncate(size=None)", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5079}, {"snippet": "Class.methods", "intent": "A dictionary mapping method names to line numbers.", "question_id": 7723}, {"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}, {"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}, {"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}, {"snippet": "bytes_io.read1(size)", "intent": "In BytesIO , this is the same as read ( ) . With arguments `size`.", "question_id": 5113}, {"snippet": "element_tree.write(file, encoding=\"us-ascii\")", "intent": "Writes the element tree to a `file` , as XML . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12528}, {"snippet": "time.strftime(format, t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10453}, {"snippet": "pool.imap(func, iterable)", "intent": "A lazier version of map ( ) . With arguments `func`, `iterable`.", "question_id": 6347}, {"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}, {"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}, {"snippet": "example.exc_msg", "intent": "The exception message generated by the example, if the example is expected to generate an exception; or None if it is not expected to generate an exception.", "question_id": 2836}, {"snippet": "fileinput.filename()", "intent": "Return the name of the file currently being read .", "question_id": 3792}, {"snippet": "urllib.request.ProxyDigestAuthHandler()", "intent": "Handle authentication with the proxy .", "question_id": 11799}, {"snippet": "itertools.cycle(iterable)", "intent": "Make an iterator returning elements from the `iterable` and saving a copy of each .", "question_id": 5250}, {"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}, {"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}, {"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}, {"snippet": "xml.etree.ElementTree.fromstringlist(sequence, parser=None)", "intent": "Parses an XML document from a `sequence` of string fragments . `parser` is an optional parser instance .", "question_id": 12440}, {"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11129}, {"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}, {"snippet": "test.support.temp_cwd(quiet=False)", "intent": "A context manager that temporarily creates a new directory and changes the current working directory ( CWD ) . If `quiet` is False and it is not possible to create or change the CWD , an error is raised .", "question_id": 10184}, {"snippet": "WriteTransport.abort()", "intent": "Close the transport immediately , without waiting for pending operations to complete .", "question_id": 405}, {"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175}, {"snippet": "incremental_decoder.decode(object, final)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object . If this is the last call to decode ( ) `final` must be true ( the default is false ) .", "question_id": 1274}, {"snippet": "window.noutrefresh()", "intent": "Mark for refresh but wait .", "question_id": 2098}, {"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745}, {"snippet": "OptionParser.set_defaults(dest=value)", "intent": "Set default values for several option destinations at once . With arguments `dest`.", "question_id": 6648}, {"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}, {"snippet": "process.start()", "intent": "Start the process \u2019 s activity .", "question_id": 6176}, {"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}, {"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}, {"snippet": "AU_write.writeframesraw(data)", "intent": "Write audio frames , without correcting nframes . With arguments `data`.", "question_id": 9728}, {"snippet": "asyncio.start_server(client_connected_cb, ssl=None)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `ssl`.", "question_id": 482}, {"snippet": "tkinter.Tcl(baseName=None)", "intent": "The Tcl ( ) function is a factory function which creates an object much like that created by the Tk class , except that it does not initialize the Tk subsystem . With arguments `baseName`.", "question_id": 10529}, {"snippet": "mailbox.get_string(key)", "intent": "Return a string representation of the message corresponding to `key` , or raise a KeyError exception if no such message exists .", "question_id": 5741}, {"snippet": "mmap.write_byte(byte)", "intent": "Write the integer `byte` into memory at the current position of the file pointer ; the file position is advanced by 1 .", "question_id": 6022}, {"snippet": "random.randrange(start, stop)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7892}, {"snippet": "curses.ascii.isascii(c)", "intent": "Checks for a character value that fits in the 7-bit ASCII set . With arguments `c`.", "question_id": 1901}, {"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}, {"snippet": "message.get_content_charset()", "intent": "Return the charset parameter of the Content-Type header , coerced to lower case .", "question_id": 3022}, {"snippet": "mmap.mmap(fileno, length, offset, tagname=None)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . `offset` may be specified as a non-negative integer offset . `tagname` , if specified and not None , is a string giving a tag name for the mapping .", "question_id": 5977}, {"snippet": "bytearray.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9334}, {"snippet": "concurrent.futures.ThreadPoolExecutor(initializer=None)", "intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously . `initializer` is an optional callable that is called at the start of each worker thread ; `initargs` is a tuple of arguments passed to the initializer .", "question_id": 1450}, {"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}, {"snippet": "loop.call_soon(callback, *args)", "intent": "Schedule a `callback` to be called with args arguments at the next iteration of the event loop . With arguments `*args`.", "question_id": 189}, {"snippet": "mimetypes.MimeTypes(filenames=())", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database .", "question_id": 5957}, {"snippet": "xml.sax.parse(filename_or_stream, handler)", "intent": "Create a SAX parser and use it to parse a document . The document , passed in as `filename_or_stream` , can be a filename or a file object . The `handler` parameter needs to be a SAX ContentHandler instance .", "question_id": 12593}, {"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}, {"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}, {"snippet": "incremental_encoder.setstate(state)", "intent": "Set the `state` of the encoder to state .", "question_id": 1271}, {"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}, {"snippet": "heapq.heappush(heap, item)", "intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "question_id": 4316}, {"snippet": "widget.state()", "intent": "Modify or inquire widget state .", "question_id": 10595}, {"snippet": "ArgumentParser.parse_args(namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 71}, {"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}, {"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, sinfo=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `sinfo`.", "question_id": 5588}, {"snippet": "msilib.add_stream(database, name, path)", "intent": "Add the file `path` into the _Stream table of `database` , with the stream `name` name .", "question_id": 6066}, {"snippet": "multiprocessing.Process(name=None)", "intent": "Process objects represent activity that is run in a separate process . `name` is the process name ( see name for more details ) .", "question_id": 6168}, {"snippet": "text_io_wrapper.reconfigure(encoding, errors, newline,                      line_buffering)", "intent": "Reconfigure this text stream using new settings for `encoding` , `errors` , `newline` , line_buffering and `write_through` . With arguments `                     line_buffering`.", "question_id": 5159}, {"snippet": "traceback.print_tb(tb)", "intent": "Print up to `limit` stack trace entries from traceback object `tb` ( starting from the caller \u2019 s frame ) if limit is positive .", "question_id": 10733}, {"snippet": "startupinfo.hStdInput", "intent": "If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard input handle for the process.", "question_id": 9636}, {"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}, {"snippet": "time.CLOCK_MONOTONIC_RAW", "intent": "Similar to CLOCK_MONOTONIC, but provides access to a raw hardware-based time that is not subject to NTP adjustments.", "question_id": 10466}, {"snippet": "asyncio.sleep(delay, loop=None)", "intent": "Block for `delay` seconds . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 597}, {"snippet": "inspect_loader.exec_module(module)", "intent": "Implementation of Loader.exec_module ( ) . With arguments `module`.", "question_id": 4831}, {"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}, {"snippet": "stat.S_IFLNK", "intent": "Symbolic link.", "question_id": 9085}, {"snippet": "subprocess.BELOW_NORMAL_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have a below average priority.", "question_id": 9650}, {"snippet": "curses.ascii.isxdigit(c)", "intent": "Checks for an ASCII hexadecimal digit . This is equivalent to `c` in string.hexdigits .", "question_id": 1911}, {"snippet": "smtpd.PureProxy(localaddr, remoteaddr)", "intent": "Create a new pure proxy server . Everything will be relayed to `remoteaddr` . With arguments `localaddr`.", "question_id": 8425}, {"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}, {"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}, {"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}, {"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}, {"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}, {"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}, {"snippet": "base64.decodestring(s)", "intent": "Deprecated alias of decodebytes ( ) . With arguments `s`.", "question_id": 749}, {"snippet": "str(object=b'', errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4120}, {"snippet": "ctypes.wstring_at(address)", "intent": "This function returns the wide character string starting at memory `address` address as a string .", "question_id": 1840}, {"snippet": "memoryview.shape", "intent": "A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array.", "question_id": 9425}, {"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}, {"snippet": "tkinter.tix.Tk(className='Tix')", "intent": "Toplevel widget of Tix which represents mostly the main window of an application . With arguments `className`.", "question_id": 10547}, {"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}, {"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}, {"snippet": "context.next_plus(x)", "intent": "Returns the smallest representable number larger than `x` .", "question_id": 2556}, {"snippet": "threading.stack_size()", "intent": "Return the thread stack `size` used when creating new threads .", "question_id": 10349}, {"snippet": "NNTP.list()", "intent": "Send a LIST or LIST ACTIVE command .", "question_id": 6465}, {"snippet": "msilib.Feature(db, id, title, desc, display, level=1)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6115}, {"snippet": "codecs.BOM_BE", "intent": "These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "question_id": 1244}, {"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}, {"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}, {"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}, {"snippet": "resource.setrlimit(resource, limits)", "intent": "Sets new `limits` of consumption of `resource` .", "question_id": 8072}, {"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}, {"snippet": "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11430}, {"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}, {"snippet": "doctest.DocFileSuite(*paths, module_relative=True, package=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `module_relative` specifies how the filenames in paths should be interpreted : Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths . With arguments `*paths`.", "question_id": 2805}, {"snippet": "turtle.write_docstringdict(filename=\"turtle_docstringdict\")", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11169}, {"snippet": "site.getusersitepackages()", "intent": "Return the path of the user-specific site-packages directory , USER_SITE .", "question_id": 8411}, {"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}, {"snippet": "email_message.iter_attachments()", "intent": "Return an iterator over all of the immediate sub-parts of the message that are not candidate \u201c body \u201d parts .", "question_id": 3288}, {"snippet": "typing.ClassVar", "intent": "Special type construct to mark class variables.", "question_id": 11337}, {"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}, {"snippet": "SSLSocket.read(len=1024, buffer=None)", "intent": "Read up to `len` bytes of data from the SSL socket and return the result as a bytes instance . If `buffer` is specified , then read into the buffer instead , and return the number of bytes read .", "question_id": 8974}, {"snippet": "ZipFile.open(name, mode='r', pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12810}, {"snippet": "memoryview.itemsize", "intent": "The size in bytes of each element of the memoryview:", "question_id": 9423}, {"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}, {"snippet": "unittest.mock.PropertyMock(*args, **kwargs)", "intent": "A mock intended to be used as a property , or other descriptor , on a class . With arguments `*args`, `**kwargs`.", "question_id": 11607}, {"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}, {"snippet": "dis.show_code(x, file=None)", "intent": "Print detailed code object information for the supplied function , method , source code string or code object to `file` ( or sys.stdout if file is not specified ) . This is a convenient shorthand for print ( code_info ( `x` ) , file=file ) , intended for interactive exploration at the interpreter prompt .", "question_id": 2706}, {"snippet": "SMTP.starttls(certfile=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext .", "question_id": 8528}, {"snippet": "cmd.Cmd()", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework .", "question_id": 1127}, {"snippet": "str.capitalize()", "intent": "Return a copy of the string with its first character capitalized and the rest lowercased .", "question_id": 9178}, {"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}, {"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}, {"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}, {"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}, {"snippet": "zlib.adler32(data)", "intent": "Computes an Adler-32 checksum of `data` .", "question_id": 12894}, {"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}, {"snippet": "configparser.ConfigParser(':'), ';'), dict_type=collections.OrderedDict)", "intent": "The main configuration parser . When `dict_type` is given , it will be used to create the dictionary objects for the list of sections , for the options within a section , and for the default values . With arguments `':')`, `';')`.", "question_id": 1498}, {"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}, {"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}, {"snippet": "traceback.clear_frames(tb)", "intent": "Clears the local variables of all the stack frames in a traceback `tb` by calling the clear ( ) method of each frame object .", "question_id": 10791}, {"snippet": "doctest.DocTestFinder(parser=DocTestParser(), recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2848}, {"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}, {"snippet": "py_compile.compile(file)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file .", "question_id": 7821}, {"snippet": "shutil.get_archive_formats()", "intent": "Return a list of supported formats for archiving .", "question_id": 8358}, {"snippet": "memoryview.tolist()", "intent": "Return the data in the buffer as a list of elements .", "question_id": 9415}, {"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}, {"snippet": "concurrent.futures.Future", "intent": "Encapsulates the asynchronous execution of a callable.", "question_id": 1467}, {"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "http.client.HTTPException", "intent": "The base class of the other exceptions in this module.", "question_id": 4410}, {"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}, {"snippet": "ArgumentParser.exit(status=0)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 111}, {"snippet": "typing.Deque(deque)", "intent": "A generic version of collections.deque . With arguments `deque`.", "question_id": 11269}, {"snippet": "multiprocessing.sharedctypes.synchronized(obj, lock)", "intent": "Return a process-safe wrapper object for a ctypes object which uses `lock` to synchronize access . With arguments `obj`.", "question_id": 6276}, {"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}, {"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}, {"snippet": "shutil.copytree(src, dst, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8325}, {"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11139}, {"snippet": "xmlrpc.client.loads(data, use_datetime=False)", "intent": "Convert an XML-RPC request or response into Python objects , a ( params , methodname ) . The `use_builtin_types` flag can be used to cause date/time values to be presented as datetime.datetime objects and binary `data` to be presented as bytes objects ; this flag is false by default . The obsolete `use_datetime` flag is similar to use_builtin_types but it applies only to date/time values .", "question_id": 12709}, {"snippet": "traceback_exception.__context__", "intent": "A TracebackException of the original __context__.", "question_id": 10803}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554}, {"snippet": "test_case.assertIsNone(expr)", "intent": "Test that `expr` is ( or is not ) None .", "question_id": 11387}, {"snippet": "mock.call_args_list", "intent": "This is a list of all the calls made to the mock object in sequence (so the length of the list is the number of times it has been called).", "question_id": 11593}, {"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}, {"snippet": "header.encode(\\t', splitchars=';)", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . With arguments `\\t'`.", "question_id": 3131}, {"snippet": "configparser.ConfigParser(':'), ';'), strict=True)", "intent": "The main configuration parser . When `strict` is True ( the default ) , the parser won \u2019 t allow for any section or option duplicates while reading from a single source ( file , string or dictionary ) , raising DuplicateSectionError or DuplicateOptionError . With arguments `':')`, `';')`.", "question_id": 1503}, {"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646}, {"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}, {"snippet": "iter(dictview)", "intent": "Return an iterator over the keys , values or items ( represented as tuples of ( key , value ) ) in the dictionary . With arguments `dictview`.", "question_id": 9495}, {"snippet": "multiprocessing.Process(args=())", "intent": "Process objects represent activity that is run in a separate process . `args` is the argument tuple for the target invocation .", "question_id": 6169}, {"snippet": "heapq.heappush(heap, item)", "intent": "Push the value `item` onto the `heap` , maintaining the heap invariant .", "question_id": 4316}, {"snippet": "os.stat(path)", "intent": "Get the status of a file or a file descriptor . Perform the equivalent of a stat ( ) system call on the given `path` .", "question_id": 6917}, {"snippet": "loop.sock_recv_into(sock, buf)", "intent": "Receive data from `sock` into the `buf` buffer .", "question_id": 277}, {"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "typing.TYPE_CHECKING", "intent": "A special constant that is assumed to be True by 3rd party static type checkers.", "question_id": 11339}, {"snippet": "lock.acquire(waitflag=1, timeout=-1)", "intent": "Without any optional argument , this method acquires the lock unconditionally , if necessary waiting until it is released by another thread ( only one thread at a time can acquire a lock \u2014 that \u2019 s their reason for existence ) . If the integer `waitflag` argument is present , the action depends on its value : if it is zero , the lock is only acquired if it can be acquired immediately without waiting , while if it is nonzero , the lock is acquired unconditionally as above . If the floating-point `timeout` argument is present and positive , it specifies the maximum wait time in seconds before returning .", "question_id": 12955}, {"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}, {"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325}, {"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}, {"snippet": "xml.sax.make_parser(parser_list=)", "intent": "Create and return a SAX XMLReader object . If `parser_list` is provided , it must be a list of strings which name modules that have a function named create_parser ( ) .", "question_id": 12590}, {"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}, {"snippet": "stringprep.in_table_c21(code)", "intent": "Determine whether `code` is in tableC.2.1 ( ASCII control characters ) .", "question_id": 9538}, {"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}, {"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}, {"snippet": "SubprocessTransport.get_pid()", "intent": "Return the subprocess process id as an integer .", "question_id": 419}, {"snippet": "tkinter.Tk(baseName=None)", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`.", "question_id": 10519}, {"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}, {"snippet": "dis.hasjrel", "intent": "Sequence of bytecodes that have a relative jump target.", "question_id": 2748}, {"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}, {"snippet": "Morsel.OutputString(attrs=None)", "intent": "Return a string representing the Morsel , without any surrounding HTTP or JavaScript . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4608}, {"snippet": "deque.count(x)", "intent": "Count the number of deque elements equal to `x` .", "question_id": 1357}, {"snippet": "os.path.samefile(path1, path2)", "intent": "Return True if both pathname arguments refer to the same file or directory . With arguments `path1`, `path2`.", "question_id": 7166}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}, {"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}, {"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}, {"snippet": "loop.create_unix_server(protocol_factory)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`.", "question_id": 242}, {"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}, {"snippet": "babyl_message.add_label(label)", "intent": "Add `label` to the list of labels on the message .", "question_id": 5842}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}, {"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503}, {"snippet": "uuid.RFC_4122", "intent": "Specifies the UUID layout given in RFC 4122.", "question_id": 11969}, {"snippet": "zipfile.BadZipfile", "intent": "Alias of BadZipFile, for compatibility with older Python versions.", "question_id": 12779}, {"snippet": "fcntl.lockf(fd, cmd, len=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3752}, {"snippet": "msvcrt.heapmin()", "intent": "Force the malloc ( ) heap to clean itself up and return unused blocks to the operating system .", "question_id": 6164}, {"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}, {"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}, {"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}, {"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}, {"snippet": "context.items()", "intent": "Return a list of 2-tuples containing all variables and their values in the context object .", "question_id": 1660}, {"snippet": "json.JSONEncoder(indent=None)", "intent": "Extensible JSON encoder for Python data structures . If `indent` is a non-negative integer or string , then JSON array elements and object members will be pretty-printed with that indent level .", "question_id": 5328}, {"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}, {"snippet": "ImportWarning", "intent": "Base class for warnings about probable mistakes in module imports.", "question_id": 3708}, {"snippet": "os.RTLD_LAZY", "intent": "Flags for use with the setdlopenflags() and getdlopenflags() functions.", "question_id": 7130}, {"snippet": "loop.sock_sendfile(sock, file)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket .", "question_id": 281}, {"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}, {"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}, {"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}, {"snippet": "errno.ESTALE", "intent": "Stale NFS file handle", "question_id": 3621}, {"snippet": "aifc.getparams()", "intent": "Returns a namedtuple ( ) ( nchannels , sampwidth , framerate , nframes , comptype , compname ) , equivalent to output of the get* ( ) methods .", "question_id": 17}, {"snippet": "warnings.warn(message, source=None)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . This makes the warning refer to deprecation ( ) \u2019 s caller , rather than to the `source` of deprecation ( ) itself ( since the latter would defeat the purpose of the warning message ) .", "question_id": 12002}, {"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}, {"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}, {"snippet": "text_calendar.formatmonth(theyear, themonth, w=0, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `w` is provided , it specifies the width of the date columns , which are centered . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 931}, {"snippet": "Widget.tk.createfilehandler(file, mask, func)", "intent": "Registers the `file` handler callback function `func` . The `mask` argument is an ORed combination of any of the three constants below .", "question_id": 10537}, {"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}, {"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}, {"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}, {"snippet": "collections.abc.AsyncIterator", "intent": "ABC for classes that provide __aiter__ and __anext__ methods.", "question_id": 1333}, {"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}, {"snippet": "tkinter.Tk(screenName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `screenName`, `className`.", "question_id": 10523}, {"snippet": "random.sample(population, k)", "intent": "Return a `k` length list of unique elements chosen from the `population` sequence or set .", "question_id": 7905}, {"snippet": "PrettyPrinter.format(object, context, maxlevels, level)", "intent": "Returns three values : the formatted version of `object` as a string , a flag indicating whether the result is readable , and a flag indicating whether recursion was detected . The second is a dictionary which contains the id ( ) of objects that are part of the current presentation `context` ( direct and indirect containers for object that are affecting the presentation ) as the keys ; if an object needs to be presented which is already represented in context , the third return value should be True . The third argument , `maxlevels` , gives the requested limit to recursion ; this will be 0 if there is no requested limit . The fourth argument , `level` , gives the current level ; recursive calls should be passed a value less than that of the current call .", "question_id": 7660}, {"snippet": "calendar.month_name", "intent": "An array that represents the months of the year in the current locale.", "question_id": 1024}, {"snippet": "Cmd.default(line)", "intent": "Method called on an input `line` when the command prefix is not recognized .", "question_id": 1139}, {"snippet": "tarfile.open(**kwargs, mode='r', fileobj=None)", "intent": "Return a TarFile object for the pathname `name` . `mode` has to be a string of the form 'filemode [ : compression ] ' , it defaults to ' r ' . If `fileobj` is specified , it is used as an alternative to a file object opened in binary mode for name . With arguments `**kwargs`.", "question_id": 9898}, {"snippet": "os.makedirs(name, mode=0o777)", "intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . With arguments `name`.", "question_id": 6867}, {"snippet": "list.sort(reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `reverse` is a boolean value .", "question_id": 9158}, {"snippet": "xmlrpc.client.dumps(params, methodresponse=None, encoding=None)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . If methodresponse is true , only a single value can be returned , meaning that params must be of length 1. `encoding` , if supplied , is the encoding to use in the generated XML ; the default is UTF-8 .", "question_id": 12706}, {"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}, {"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}, {"snippet": "datetime.now()", "intent": "Return the current local date and time .", "question_id": 2258}, {"snippet": "FileCookieJar.save(filename=None, ignore_discard=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4502}, {"snippet": "hmac.new(key, msg=None)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key . If `msg` is present , the method call update ( msg ) is made .", "question_id": 4330}, {"snippet": "optparse.OptionGroup(parser, title, description=None)", "intent": "where With arguments `parser`, `title`, `description`.", "question_id": 6617}, {"snippet": "element.findall(match, namespaces=None)", "intent": "Finds all matching subelements , by tag name or path . `namespaces` is an optional mapping from namespace prefix to full name . With arguments `match`.", "question_id": 12494}, {"snippet": "binascii.b2a_qp(data, quotetabs=False, header=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `header` is present and true , spaces will be encoded as underscores per RFC 1522 .", "question_id": 833}, {"snippet": "pprint.pformat(object, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7635}, {"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}, {"snippet": "ordered_dict.popitem(last=True)", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair . The pairs are returned in LIFO order if `last` is true or FIFO order if false .", "question_id": 1392}, {"snippet": "test.support.check_no_resource_warning(testcase)", "intent": "Context manager to check that no ResourceWarning was raised . With arguments `testcase`.", "question_id": 10166}, {"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, _encoder=email.encoders.encode_base64)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Optional `_encoder` is a callable ( i.e . With arguments `**_params`.", "question_id": 3344}, {"snippet": "raw_io_base.read()", "intent": "Read up to `size` bytes from the object and return them .", "question_id": 5084}, {"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866}, {"snippet": "errno.ECONNREFUSED", "intent": "Connection refused", "question_id": 3616}, {"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}, {"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}, {"snippet": "datetime.timedelta(seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2206}, {"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}, {"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}, {"snippet": "style.configure(style, **kw)", "intent": "Query or set the default value of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10673}, {"snippet": "winsound.MessageBeep()", "intent": "Call the underlying MessageBeep ( ) function from the Platform API .", "question_id": 12194}, {"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}, {"snippet": "ConnectionRefusedError", "intent": "A subclass of ConnectionError, raised when a connection attempt is refused by the peer.", "question_id": 3691}, {"snippet": "json_encoder.lineno", "intent": "The line corresponding to pos.", "question_id": 5339}, {"snippet": "errno.ENETUNREACH", "intent": "Network is unreachable", "question_id": 3606}, {"snippet": "UserWarning", "intent": "Base class for warnings generated by user code.", "question_id": 3702}, {"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "question_id": 12124}, {"snippet": "style.theme_create(themename, parent=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `parent` is specified , the new theme will inherit styles , elements and layouts from the parent theme .", "question_id": 10687}, {"snippet": "test_case.assertRaises(exception, callable, *args, **kwds)", "intent": "Test that an `exception` is raised when `callable` is called with any positional or keyword arguments that are also passed to assertRaises ( ) . With arguments `*args`, `**kwds`.", "question_id": 11399}, {"snippet": "subprocess.BELOW_NORMAL_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have a below average priority.", "question_id": 9650}, {"snippet": "locals()", "intent": "Update and return a dictionary representing the current local symbol table .", "question_id": 4047}, {"snippet": "dict.values()", "intent": "Return a new view of the dictionary \u2019 s values .", "question_id": 9493}, {"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}, {"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}, {"snippet": "counter.update(iterable-or-mapping)", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) . With arguments `iterable-or-mapping`.", "question_id": 1348}, {"snippet": "OptionParser.add_option(*opt_str, attr=value)", "intent": "To define an option with only a short option string : With arguments `*opt_str`, `attr`.", "question_id": 6625}, {"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}, {"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}, {"snippet": "html_diff.make_file(fromlines, tolines, todesc='')", "intent": "Compares `fromlines` and `tolines` ( lists of strings ) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted . `fromdesc` and `todesc` are optional keyword arguments to specify from/to file column header strings ( both default to an empty string ) .", "question_id": 2610}, {"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "See the documentation for the functions explained above . With arguments `function`, `*args`, `**kwds`.", "question_id": 7359}, {"snippet": "faulthandler.dump_traceback(all_threads=True)", "intent": "Dump the tracebacks of all threads into `file` . If `all_threads` is False , dump only the current thread .", "question_id": 3714}, {"snippet": "unittest.mock.NonCallableMock(**kwargs)", "intent": "A non-callable version of Mock . With arguments `**kwargs`.", "question_id": 11597}, {"snippet": "message.get_boundary()", "intent": "Return the value of the boundary parameter of the Content-Type header of the message , or `failobj` if either the header is missing , or has no boundary parameter .", "question_id": 3019}, {"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}, {"snippet": "itertools.combinations(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` .", "question_id": 5243}, {"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}, {"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}, {"snippet": "datetime.replace(microsecond=self.microsecond)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "question_id": 2291}, {"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}, {"snippet": "readline.remove_history_item(pos)", "intent": "Remove history item specified by its position from the history . With arguments `pos`.", "question_id": 8032}, {"snippet": "set.add(elem)", "intent": "Add element `elem` to the set .", "question_id": 9462}, {"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}, {"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}, {"snippet": "OptionParser.disable_interspersed_args()", "intent": "Set parsing to stop on the first non-option .", "question_id": 6638}, {"snippet": "difflib.ndiff(a, b, linejunk=None)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a Differ-style delta ( a generator generating the delta lines ) . Optional keyword parameters `linejunk` and `charjunk` are filtering functions ( or None ) :", "question_id": 2643}, {"snippet": "formatter.push_font((size, italic, bold, teletype))", "intent": "Change some or all font properties of the writer object . With arguments `(size`, `italic`, `bold`, `teletype)`.", "question_id": 3828}, {"snippet": "doc_test_runner.run(test, compileflags=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` . `compileflags` gives the set of flags that should be used by the Python compiler when running the examples .", "question_id": 2874}, {"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}, {"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}, {"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}, {"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}, {"snippet": "os.terminal_size", "intent": "A subclass of tuple, holding (columns, lines) of the terminal window size.", "question_id": 6813}, {"snippet": "auto.with_traceback(tb)", "intent": "This method sets `tb` as the new traceback for the exception and returns the exception object .", "question_id": 3630}, {"snippet": "zipfile.ZipFile(file, compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12796}, {"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}, {"snippet": "PrettyPrinter.pprint(object)", "intent": "Print the formatted representation of `object` on the configured stream , followed by a newline .", "question_id": 7657}, {"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}, {"snippet": "pstats.Stats(*filenames or profile)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . With arguments `*filenames or profile`.", "question_id": 7688}, {"snippet": "DocumentType.name", "intent": "The name of the root element as given in the DOCTYPE declaration, if present.", "question_id": 12341}, {"snippet": "time.localtime(secs)", "intent": "Like gmtime ( ) but converts to local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10443}, {"snippet": "output_checker.check_output(want, got, optionflags)", "intent": "Return True iff the actual output from an example ( `got` ) matches the expected output ( `want` ) . With arguments `optionflags`.", "question_id": 2884}, {"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}, {"snippet": "dataclasses.field(hash=None)", "intent": "For common and simple use cases , no other functionality is required . With arguments `hash`.", "question_id": 2171}, {"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}, {"snippet": "stringprep.in_table_d2(code)", "intent": "Determine whether `code` is in tableD.2 ( Characters with bidirectional property \u201c L \u201d ) .", "question_id": 9549}, {"snippet": "_func_ptr.argtypes", "intent": "Assign a tuple of ctypes types to specify the argument types that the function accepts.", "question_id": 1788}, {"snippet": "xml.etree.ElementTree.tostringlist(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12461}, {"snippet": "function.get_globals()", "intent": "Return a tuple containing names of globals in this function .", "question_id": 9749}, {"snippet": "feature.set_current()", "intent": "Make this feature the current feature of msilib .", "question_id": 6124}, {"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}, {"snippet": "traceback.print_stack(f=None, limit=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10765}, {"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}, {"snippet": "loop.create_server(protocol_factory, host=None)", "intent": "Create a TCP server ( socket type SOCK_STREAM ) listening on `port` of the `host` address . With arguments `protocol_factory`.", "question_id": 233}, {"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}, {"snippet": "queue_listener.__init__()", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5594}, {"snippet": "mailbox.Maildir(dirname, create=True)", "intent": "A subclass of Mailbox for mailboxes in Maildir format . If create is True and the `dirname` path exists , it will be treated as an existing maildir without attempting to verify its directory layout . If `create` is True , the mailbox is created if it does not exist .", "question_id": 5756}, {"snippet": "SSLContext.set_ciphers(ciphers)", "intent": "Set the available `ciphers` for sockets created with this context .", "question_id": 9015}, {"snippet": "dataclasses.field(compare=True)", "intent": "For common and simple use cases , no other functionality is required . With arguments `compare`.", "question_id": 2173}, {"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}, {"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}, {"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}, {"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}, {"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}, {"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}, {"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}, {"snippet": "plistlib.loads(data, use_builtin_types=True)", "intent": "Load a plist from a bytes object . With arguments `data`, `use_builtin_types`.", "question_id": 7557}, {"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}, {"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327}, {"snippet": "dircmp.left_only", "intent": "Files and subdirectories only in a.", "question_id": 3772}, {"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}, {"snippet": "traceback.print_exception(etype, value, tb, limit=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10738}, {"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}, {"snippet": "asyncio.open_unix_connection(sock=None)", "intent": "Establish a Unix socket connection and return a pair of ( reader , writer ) . With arguments `sock`.", "question_id": 488}, {"snippet": "email.policy.compat32", "intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "question_id": 3451}, {"snippet": "Telnet.read_very_lazy()", "intent": "Return any data available in the cooked queue ( very lazy ) .", "question_id": 10016}, {"snippet": "argparse.ArgumentParser(epilog=None)", "intent": "Create a new ArgumentParser object . With arguments `epilog`.", "question_id": 42}, {"snippet": "turtle.clearstamps()", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10931}, {"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}, {"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991}, {"snippet": "doctest.testmod(report=True)", "intent": "All arguments are optional , and all except for `m` should be specified in keyword form . Optional arguments `extraglobs` , `verbose` , `report` , `optionflags` , `raise_on_error` , and `globs` are the same as for function testfile ( ) above , except that globs defaults to m.__dict__ .", "question_id": 2781}, {"snippet": "message.is_multipart()", "intent": "Return True if the message \u2019 s payload is a list of sub-Message objects , otherwise return False .", "question_id": 2952}, {"snippet": "urllib.request.BaseHandler", "intent": "This is the base class for all registered handlers \u2014 and handles only the simple mechanics of registration.", "question_id": 11779}, {"snippet": "os.O_BINARY", "intent": "The above constants are only available on Windows.", "question_id": 6756}, {"snippet": "Node.firstChild", "intent": "The first child of the node, if there are any, or None.", "question_id": 12320}, {"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}, {"snippet": "mmap.find(sub, start, end)", "intent": "Returns the lowest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6002}, {"snippet": "loop.create_connection(protocol_factory, family=0)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . The socket `family` can be either AF_INET or AF_INET6 depending on host ( or the family argument , if provided ) .", "question_id": 206}, {"snippet": "subprocess.Popen(args, executable=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9601}, {"snippet": "decimal.Context(rounding=None)", "intent": "Creates a new context . The `rounding` option is one of the constants listed in the section Rounding Modes .", "question_id": 2501}, {"snippet": "argparse.FileType(mode='r')", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `mode`.", "question_id": 86}, {"snippet": "window.attroff(attr)", "intent": "Remove attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2012}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "counter.most_common(n)", "intent": "Return a list of the `n` most common elements and their counts from the most common to the least .", "question_id": 1343}, {"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}, {"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}, {"snippet": "HTTPResponse.msg", "intent": "A http.client.HTTPMessage instance containing the response headers.", "question_id": 4462}, {"snippet": "warnings.filterwarnings(action, message='', lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`, `lineno`.", "question_id": 12031}, {"snippet": "test.support.sortdict(dict)", "intent": "Return a repr of `dict` with keys sorted .", "question_id": 10150}, {"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}, {"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}, {"snippet": "Option.STORE_ACTIONS", "intent": "\u201cstore\u201d actions are additionally listed here.", "question_id": 6652}, {"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}, {"snippet": "pdb.set_trace()", "intent": "See the documentation for the functions explained above .", "question_id": 7360}, {"snippet": "dis.distb()", "intent": "Disassemble the top-of-stack function of a traceback , using the last traceback if none was passed .", "question_id": 2715}, {"snippet": "xml.etree.ElementTree.XML(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12469}, {"snippet": "Node.toprettyxml(newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12419}, {"snippet": "sys.excepthook(type, value, traceback)", "intent": "This function prints out a given `traceback` and exception to sys.stderr . With arguments `type`, `value`.", "question_id": 9781}, {"snippet": "widget.identify_row(y)", "intent": "Returns the item ID of the item at position `y` .", "question_id": 10635}, {"snippet": "logger_adapter.process(msg, kwargs)", "intent": "Modifies the message and/or keyword arguments passed to a logging call in order to insert contextual information . The return value is a ( `msg` , kwargs ) tuple which has the ( possibly modified ) versions of the arguments passed in . This implementation takes the object passed as extra to the constructor and adds it to `kwargs` using key \u2018 extra \u2019 .", "question_id": 5632}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, repr=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2187}, {"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}, {"snippet": "deque.clear()", "intent": "Remove all elements from the deque leaving it with length 0 .", "question_id": 1355}, {"snippet": "condition.wait()", "intent": "Wait until notified or until a `timeout` occurs .", "question_id": 10390}, {"snippet": "types.MethodDescriptorType", "intent": "The type of methods of some built-in data types such as str.join().", "question_id": 11194}, {"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}, {"snippet": "email.mime.message.MIMEMessage(_msg, _subtype='rfc822', policy=compat32)", "intent": "Module : email.mime.message `_msg` is used as the payload , and must be an instance of class Message ( or a subclass thereof ) , otherwise a TypeError is raised . Optional `_subtype` sets the subtype of the message ; it defaults to rfc822 . Optional `policy` argument defaults to compat32 .", "question_id": 3353}, {"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}, {"snippet": "turtle.onrelease(fun, btn=1, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `btn`, `add`.", "question_id": 11026}, {"snippet": "aifc.setnchannels(nchannels)", "intent": "Specify the number of channels in the audio file . With arguments `nchannels`.", "question_id": 27}, {"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}, {"snippet": "Dialect.quotechar", "intent": "A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "question_id": 1727}, {"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}, {"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}, {"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}, {"snippet": "urllib.parse.urlunparse(parts)", "intent": "Construct a URL from a tuple as returned by urlparse ( ) . The `parts` argument can be any six-item iterable .", "question_id": 11689}, {"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075}, {"snippet": "Node.writexml(writer, indent=\"\")", "intent": "Write XML to the `writer` object . The `indent` parameter is the indentation of the current node .", "question_id": 12404}, {"snippet": "pdb.runeval(expression)", "intent": "See the documentation for the functions explained above . With arguments `expression`.", "question_id": 7355}, {"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}, {"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}, {"snippet": "os.seteuid(euid)", "intent": "Set the current process \u2019 s effective user id . With arguments `euid`.", "question_id": 6694}, {"snippet": "stat.S_IWGRP", "intent": "Group has write permission.", "question_id": 9103}, {"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}, {"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "question_id": 1575}, {"snippet": "os.execl(path, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . With arguments `arg0`, `arg1`.", "question_id": 7009}, {"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}, {"snippet": "config_parser.items()", "intent": "When section is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT .", "question_id": 1552}, {"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}, {"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}, {"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2664}, {"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}, {"snippet": "operator.is_not(a, b)", "intent": "Return `a` is not `b` .", "question_id": 6529}, {"snippet": "resource_loader.get_data(path)", "intent": "An abstract method to return the bytes for the data located at `path` .", "question_id": 4824}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}, {"snippet": "robot_file_parser.parse(lines)", "intent": "Parses the `lines` argument .", "question_id": 11911}, {"snippet": "window.get_wch(y, x)", "intent": "Get a wide character . With arguments `y`, `x`.", "question_id": 2053}, {"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}, {"snippet": "tracemalloc.Traceback", "intent": "Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "question_id": 10894}, {"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006}, {"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}, {"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}, {"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}, {"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}, {"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}, {"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}, {"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}, {"snippet": "BaseCookie.output(sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4587}, {"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}, {"snippet": "audioop.alaw2lin(fragment, width)", "intent": "Convert sound fragments in a-LAW encoding to linearly encoded sound fragments . a-LAW encoding always uses 8 bits samples , so `width` refers only to the sample width of the output `fragment` here .", "question_id": 682}, {"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}, {"snippet": "enumerate(iterable, start=0)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration . The __next__ ( ) method of the iterator returned by enumerate ( ) returns a tuple containing a count ( from `start` which defaults to 0 ) and the values obtained from iterating over iterable .", "question_id": 4011}, {"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}, {"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed')", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . With arguments `**_params`.", "question_id": 3317}, {"snippet": "ur_lopener.retrieve(url, filename=None, reporthook=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) .", "question_id": 11900}, {"snippet": "IMAP4.copy(message_set, new_mailbox)", "intent": "Copy `message_set` messages onto end of `new_mailbox` .", "question_id": 4695}, {"snippet": "connection.create_aggregate(name, num_params, aggregate_class)", "intent": "Creates a user-defined aggregate function . The aggregate class must implement a step method , which accepts the number of parameters `num_params` ( if num_params is -1 , the function may take any number of arguments ) , and a finalize method which will return the final result of the aggregate . With arguments `name`, `aggregate_class`.", "question_id": 8817}, {"snippet": "fnmatch.fnmatchcase(filename, pattern)", "intent": "Test whether `filename` matches `pattern` , returning True or False ; the comparison is case-sensitive and does not apply os.path.normcase ( ) .", "question_id": 3814}, {"snippet": "os.WEXITED", "intent": "Flags that can be used in options in waitid() that specify what child signal to wait for.", "question_id": 7075}, {"snippet": "bytearray.decode(encoding=\"utf-8\", errors=\"strict\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' . `errors` may be given to set a different error handling scheme .", "question_id": 9282}, {"snippet": "tuple()", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range .", "question_id": 4129}, {"snippet": "fcntl.lockf(fd, cmd, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3749}, {"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}, {"snippet": "formatter.pop_style(n=1)", "intent": "Pop the last `n` style specifications passed to push_style ( ) .", "question_id": 3834}, {"snippet": "webbrowser.get(using=None)", "intent": "Return a controller object for the browser type `using` .", "question_id": 12109}, {"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}, {"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}, {"snippet": "zlib.ZLIB_VERSION", "intent": "The version string of the zlib library that was used for building the module.", "question_id": 12939}, {"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}, {"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}, {"snippet": "typing.BinaryIO", "intent": "Generic type IO[AnyStr] and its subclasses TextIO(IO[str]) and BinaryIO(IO[bytes]) represent the types of I/O streams such as returned by open().", "question_id": 11317}, {"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}, {"snippet": "@staticmethod", "intent": "Transform a method into a static method.", "question_id": 4112}, {"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}, {"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}, {"snippet": "window.addch(y, x, ch)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2003}, {"snippet": "trace.Trace(infile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "question_id": 10713}, {"snippet": "os.walk(top, onerror=None)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "question_id": 6977}, {"snippet": "gzip.open(filename, mode='rb', newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4281}, {"snippet": "charset.body_encoding", "intent": "Same as header_encoding, but describes the encoding for the mail message\u2019s body, which indeed may be different than the header encoding.", "question_id": 2914}, {"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}, {"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}, {"snippet": "difflib.SequenceMatcher()", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2669}, {"snippet": "ftplib.FTP(host='', passwd='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3886}, {"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed .", "question_id": 6267}, {"snippet": "window.insnstr(y, x, str, n)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor , up to `n` characters . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2080}, {"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}, {"snippet": "array.array(typecode)", "intent": "A new array whose items are restricted by `typecode` , and initialized from the optional `initializer` value , which must be a list , a bytes-like object , or iterable over elements of the appropriate type .", "question_id": 116}, {"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}, {"snippet": "Request.get_full_url()", "intent": "Return the URL given in the constructor .", "question_id": 11829}, {"snippet": "window.vline(ch, n)", "intent": "Display a vertical line starting at ( y , x ) with length `n` consisting of the character `ch` .", "question_id": 2129}, {"snippet": "message.set_param(param, value, requote=True)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional header specifies an alternative header to Content-Type , and all parameters will be quoted as necessary unless optional `requote` is False ( the default is True ) . With arguments `param`.", "question_id": 3001}, {"snippet": "time.replace(hour=self.hour, minute=self.minute)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`, `minute`.", "question_id": 2341}, {"snippet": "tree_builder.end(tag)", "intent": "Closes the current element . `tag` is the element name .", "question_id": 12543}, {"snippet": "tempfile.mkdtemp(suffix=None)", "intent": "Creates a temporary directory in the most secure manner possible . The `prefix` , `suffix` , and `dir` arguments are the same as for mkstemp ( ) .", "question_id": 10082}, {"snippet": "@test.support.anticipate_failure(condition)", "intent": "A decorator to conditionally mark tests with unittest.expectedFailure ( ) . With arguments `condition`.", "question_id": 10208}, {"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847}, {"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}, {"snippet": "formatter.NullWriter", "intent": "A writer which only provides the interface definition; no actions are taken on any methods.", "question_id": 3853}, {"snippet": "calendar.calendar(year, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `c`.", "question_id": 1014}, {"snippet": "curses.ascii.isdigit(c)", "intent": "Checks for an ASCII decimal digit , ' 0 ' through ' 9 ' . This is equivalent to `c` in string.digits .", "question_id": 1904}, {"snippet": "message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3027}, {"snippet": "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`, `disable_existing_loggers`.", "question_id": 5415}, {"snippet": "keyword.iskeyword(s)", "intent": "Return true if `s` is a Python keyword .", "question_id": 5341}, {"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}, {"snippet": "async_chat.discard_buffers()", "intent": "In emergencies this method will discard any data held in the input and/or output buffers and the producer queue .", "question_id": 172}, {"snippet": "turtle.write(arg, 8, \"normal\"), move=False)", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10970}, {"snippet": "View.Execute(params)", "intent": "Execute the SQL query of the view , through MSIViewExecute ( ) . If `params` is not None , it is a record describing actual values of the parameter tokens in the query .", "question_id": 6072}, {"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}, {"snippet": "test.support.get_attribute(obj, name)", "intent": "Get an attribute , raising unittest.SkipTest if AttributeError is raised . With arguments `obj`, `name`.", "question_id": 10257}, {"snippet": "IMAP4.uid(command, arg)", "intent": "Execute `command` args with messages identified by UID , rather than message number . With arguments `arg`.", "question_id": 4749}, {"snippet": "re.findall(pattern, string)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings .", "question_id": 7947}, {"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}, {"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}, {"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}, {"snippet": "robot_file_parser.mtime()", "intent": "Returns the time the robots.txt file was last fetched .", "question_id": 11913}, {"snippet": "unittest.FunctionTestCase(testFunc, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `tearDown`.", "question_id": 11475}, {"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}, {"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}, {"snippet": "bisect.bisect(a, x)", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` .", "question_id": 860}, {"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}, {"snippet": "errno.ENOSYS", "intent": "Function not implemented", "question_id": 3543}, {"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}, {"snippet": "IMAP4.send(data)", "intent": "Sends `data` to the remote server .", "question_id": 4733}, {"snippet": "audioop.maxpp(fragment, width)", "intent": "Return the maximum peak-peak value in the sound `fragment` . With arguments `width`.", "question_id": 697}, {"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}, {"snippet": "importlib.util.find_spec(name, package=None)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4929}, {"snippet": "maildir_message.get_subdir()", "intent": "Return either \u201c new \u201d ( if the message should be stored in the new subdirectory ) or \u201c cur \u201d ( if the message should be stored in the cur subdirectory ) .", "question_id": 5813}, {"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}, {"snippet": "mimetypes.guess_all_extensions(type, strict=True)", "intent": "Guess the extensions for a file based on its MIME `type` , given by type . The optional `strict` argument has the same meaning as with the guess_type ( ) function .", "question_id": 5942}, {"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319}, {"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}, {"snippet": "time.tzname", "intent": "A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.", "question_id": 10475}, {"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}, {"snippet": "trace.run(cmd)", "intent": "Execute the command and gather statistics from the execution with the current tracing parameters . `cmd` must be a string or code object , suitable for passing into exec ( ) .", "question_id": 10716}, {"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}, {"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}, {"snippet": "message.get_content_charset(failobj=None)", "intent": "Return the charset parameter of the Content-Type header , coerced to lower case . If there is no Content-Type header , or if that header has no charset parameter , `failobj` is returned .", "question_id": 3023}, {"snippet": "timer_handle.when()", "intent": "Return a scheduled callback time as float seconds .", "question_id": 333}, {"snippet": "Path.chmod(mode)", "intent": "Change the file `mode` and permissions , like os.chmod ( ) :", "question_id": 7268}, {"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}, {"snippet": "ctypes.resize(obj, size)", "intent": "This function resizes the internal memory buffer of `obj` , which must be an instance of a ctypes type . It is not possible to make the buffer smaller than the native `size` of the objects type , as given by sizeof ( type ( obj ) ) , but it is possible to enlarge the buffer .", "question_id": 1830}, {"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}, {"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}, {"snippet": "InteractiveConsole.interact()", "intent": "Closely emulate the interactive Python console .", "question_id": 1184}, {"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}, {"snippet": "Request.has_header(header)", "intent": "Return whether the instance has the named `header` ( checks both regular and unredirected ) .", "question_id": 11827}, {"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946}, {"snippet": "FTP_TLS.prot_p()", "intent": "Set up secure data connection .", "question_id": 3971}, {"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}, {"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}, {"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}, {"snippet": "FTP.login()", "intent": "Log in as the given `user` .", "question_id": 3915}, {"snippet": "chain_map.maps", "intent": "A user updateable list of mappings.", "question_id": 1336}, {"snippet": "tree_builder.close()", "intent": "Flushes the builder buffers , and returns the toplevel document element .", "question_id": 12541}, {"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}, {"snippet": "binascii.a2b_qp(data)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data .", "question_id": 826}, {"snippet": "mimetypes.read_mime_types(filename)", "intent": "Load the type map given in the file `filename` , if it exists .", "question_id": 5947}, {"snippet": "AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "`authreq` should be the name of the header where the information about the realm is included in the request , `host` should be the host to authenticate to , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11868}, {"snippet": "pprint.PrettyPrinter()", "intent": "Construct a PrettyPrinter instance .", "question_id": 7623}, {"snippet": "wsgiref.util.FileWrapper(filelike)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12217}, {"snippet": "TarFile.gettarinfo(arcname=None, fileobj=None)", "intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . If given , `arcname` specifies an alternative name for the file in the archive , otherwise , the name is taken from fileobj \u2019 s name attribute , or the name argument . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor .", "question_id": 9965}, {"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}, {"snippet": "symbol_table.get_type()", "intent": "Return the type of the symbol table .", "question_id": 9734}, {"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}, {"snippet": "kqueue.fromfd(fd)", "intent": "Create a kqueue object from a given file descriptor . With arguments `fd`.", "question_id": 8200}, {"snippet": "pathlib.PureWindowsPath(*pathsegments)", "intent": "A subclass of PurePath , this path flavour represents Windows filesystem paths : With arguments `*pathsegments`.", "question_id": 7242}, {"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}, {"snippet": "filter(function, iterable)", "intent": "Construct an iterator from those elements of `iterable` for which `function` returns true .", "question_id": 4018}, {"snippet": "base64.encodestring(s)", "intent": "Deprecated alias of encodebytes ( ) . With arguments `s`.", "question_id": 752}, {"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}, {"snippet": "xmlparser.CurrentColumnNumber", "intent": "Current column number in the parser input.", "question_id": 7753}, {"snippet": "json.dump(obj, fp, **kw, allow_nan=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `allow_nan` is false ( default : True ) , then it will be a ValueError to serialize out of range float values ( nan , inf , -inf ) in strict compliance of the JSON specification . With arguments `**kw`.", "question_id": 5274}, {"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561}, {"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}, {"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}, {"snippet": "message.get_content_charset()", "intent": "Return the charset parameter of the Content-Type header , coerced to lower case .", "question_id": 3022}, {"snippet": "timeit.timeit(stmt='pass', globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code . With arguments `stmt`.", "question_id": 10485}, {"snippet": "message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . With arguments `param`.", "question_id": 3000}, {"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}, {"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}, {"snippet": "cgitb.enable(logdir=None, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the argument `logdir` is present , the traceback reports are written to files . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1068}, {"snippet": "doctest.debug(module, name, pm=False)", "intent": "Debug the doctests for an object . The `module` and `name` arguments are the same as for function testsource ( ) above . Optional argument `pm` controls whether post-mortem debugging is used .", "question_id": 2889}, {"snippet": "multiprocessing.set_executable()", "intent": "Sets the path of the Python interpreter to use when starting a child process .", "question_id": 6228}, {"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}, {"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}, {"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}, {"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}, {"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}, {"snippet": "x in dictview", "intent": "Return True if x is in the underlying dictionary\u2019s keys, values or items (in the latter case, x should be a (key, value) tuple).", "question_id": 9496}, {"snippet": "curses.newwin(nlines, ncols)", "intent": "Return a new window , whose left-upper corner is at ( begin_y , begin_x ) , and whose height/width is nlines/ncols . With arguments `nlines`, `ncols`.", "question_id": 1958}, {"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}, {"snippet": "pdb.Pdb(completekey='tab')", "intent": "Pdb is the debugger class . The `completekey` , `stdin` and `stdout` arguments are passed to the underlying cmd.Cmd class ; see the description there .", "question_id": 7342}, {"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268}, {"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}, {"snippet": "str.strip(chars)", "intent": "Return a copy of the string with the leading and trailing characters removed . The `chars` argument is a string specifying the set of characters to be removed .", "question_id": 9250}, {"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}, {"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}, {"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}, {"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}, {"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}, {"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}, {"snippet": "loop.get_exception_handler()", "intent": "Return the current exception handler , or None if no custom exception handler was set .", "question_id": 308}, {"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "question_id": 6327}, {"snippet": "ReadTransport.resume_reading()", "intent": "Resume the receiving end .", "question_id": 404}, {"snippet": "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11422}, {"snippet": "connection.executemany(sql, parameters)", "intent": "This is a nonstandard shortcut that creates a cursor object by calling the cursor ( ) method , calls the cursor \u2019 s executemany ( ) method with the `parameters` given , and returns the cursor . With arguments `sql`.", "question_id": 8813}, {"snippet": "TarFile.add(name, arcname=None, recursive=True)", "intent": "Add the file `name` to the archive . If given , `arcname` specifies an alternative name for the file in the archive . This can be avoided by setting `recursive` to False .", "question_id": 9953}, {"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}, {"snippet": "tkinter.tix.DirList", "intent": "The DirList widget displays a list view of a directory, its previous directories and its sub-directories.", "question_id": 10563}, {"snippet": "bytes.endswith(suffix, start)", "intent": "Return True if the binary data ends with the specified `suffix` , otherwise return False . With optional `start` , test beginning at that position .", "question_id": 9284}, {"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}, {"snippet": "readline.set_history_length(length)", "intent": "Set or return the desired number of lines to save in the history file . With arguments `length`.", "question_id": 8028}, {"snippet": "curses.noraw()", "intent": "Leave raw mode .", "question_id": 1965}, {"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}, {"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8414}, {"snippet": "writer.new_margin(margin, level)", "intent": "Set the `margin` `level` to the integer level and the logical tag to margin .", "question_id": 3844}, {"snippet": "compileall.compile_path(skip_curdir=True)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search .", "question_id": 1430}, {"snippet": "xml.sax.saxutils.prepare_input_source(source, base='')", "intent": "This function takes an input `source` and an optional `base` URL and returns a fully resolved InputSource object ready for reading .", "question_id": 12668}, {"snippet": "Class.super", "intent": "A list of Class objects which describe the immediate base classes of the class being described.", "question_id": 7722}, {"snippet": "test_case.assertNotIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11393}, {"snippet": "str.center(width)", "intent": "Return centered in a string of length `width` .", "question_id": 9181}, {"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}, {"snippet": "set.discard(elem)", "intent": "Remove element `elem` from the set if it is present .", "question_id": 9464}, {"snippet": "locale.LC_NUMERIC", "intent": "Locale category for formatting numbers.", "question_id": 5409}, {"snippet": "crypt.METHOD_SHA256", "intent": "Another Modular Crypt Format method with 16 character salt and 43 character hash based on the SHA-256 hash function.", "question_id": 1669}, {"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481}, {"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}, {"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}, {"snippet": "json.dump(obj, fp, **kw, allow_nan=True)", "intent": "Serialize `obj` as a JSON formatted stream to `fp` ( a .write ( ) -supporting file-like object ) using this conversion table . If `allow_nan` is false ( default : True ) , then it will be a ValueError to serialize out of range float values ( nan , inf , -inf ) in strict compliance of the JSON specification . With arguments `**kw`.", "question_id": 5274}, {"snippet": "connection.backup(target, progress=None, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8838}, {"snippet": "FTP.transfercmd(cmd, rest=None)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection . If optional `rest` is given , a REST command is sent to the server , passing rest as an argument .", "question_id": 3944}, {"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}, {"snippet": "itertools.takewhile(predicate, iterable)", "intent": "Make an iterator that returns elements from the `iterable` as long as the `predicate` is true .", "question_id": 5265}, {"snippet": "date.min", "intent": "The earliest representable date, date(MINYEAR, 1, 1).", "question_id": 2223}, {"snippet": "ContentHandler.startPrefixMapping(prefix, uri)", "intent": "Begin the scope of a prefix-URI Namespace mapping . With arguments `prefix`, `uri`.", "question_id": 12573}, {"snippet": "email.generator.BytesGenerator(outfp, maxheaderlen=None)", "intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` . If `maxheaderlen` is not None , refold any header lines that are longer than maxheaderlen , or if 0 , do not rewrap any headers .", "question_id": 3080}, {"snippet": "max(arg1, arg2, *args, key)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4051}, {"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}, {"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}, {"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}, {"snippet": "IMAP4.getquota(root)", "intent": "Get the quota `root` \u2019 s resource usage and limits .", "question_id": 4704}, {"snippet": "context.is_infinite(x)", "intent": "Returns True if `x` is infinite ; otherwise returns False .", "question_id": 2534}, {"snippet": "ctypes.resize(obj, size)", "intent": "This function resizes the internal memory buffer of `obj` , which must be an instance of a ctypes type . It is not possible to make the buffer smaller than the native `size` of the objects type , as given by sizeof ( type ( obj ) ) , but it is possible to enlarge the buffer .", "question_id": 1830}, {"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}, {"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}, {"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}, {"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}, {"snippet": "PurePath.stem", "intent": "The final path component, without its suffix:", "question_id": 7252}, {"snippet": "email_message.get_content(*args, **kw)", "intent": "Call the get_content ( ) method of the `content_manager` , passing self as the message object , and passing along any other arguments or keywords as additional arguments . With arguments `*args`, `**kw`.", "question_id": 3290}, {"snippet": "test.support.TestFailed", "intent": "Exception to be raised when a test fails.", "question_id": 10108}, {"snippet": "collections.Counter(iterable-or-mapping)", "intent": "A Counter is a dict subclass for counting hashable objects . With arguments `iterable-or-mapping`.", "question_id": 1340}, {"snippet": "bytecode.from_traceback(tb)", "intent": "Construct a Bytecode instance from the given traceback , setting current_offset to the instruction responsible for the exception . With arguments `tb`.", "question_id": 2699}, {"snippet": "os.WIFSIGNALED(status)", "intent": "Return True if the process exited due to a signal , otherwise return False . With arguments `status`.", "question_id": 7091}, {"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11139}, {"snippet": "context[var]", "intent": "Return the value of the var ContextVar variable.", "question_id": 1653}, {"snippet": "resource.RLIMIT_CPU", "intent": "The maximum amount of processor time (in seconds) that a process can use.", "question_id": 8076}, {"snippet": "tuple()", "intent": "Tuples may be constructed in a number of ways :", "question_id": 9161}, {"snippet": "errno.EACCES", "intent": "Permission denied", "question_id": 3518}, {"snippet": "subprocess.Popen(args, close_fds=True)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `close_fds` is true , all file descriptors except 0 , 1 and 2 will be closed before the child process is executed .", "question_id": 9606}, {"snippet": "calendar.yeardatescalendar(year, width=3)", "intent": "Return the data for the specified `year` ready for formatting . Each month row contains up to `width` months ( defaulting to 3 ) .", "question_id": 921}, {"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}, {"snippet": "ast.fix_missing_locations(node)", "intent": "When you compile a `node` tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them .", "question_id": 152}, {"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}, {"snippet": "formatter.set_spacing(spacing)", "intent": "Set the `spacing` style for the writer .", "question_id": 3835}, {"snippet": "epoll.register(fd)", "intent": "Register a `fd` descriptor with the epoll object .", "question_id": 8184}, {"snippet": "ssl.HAS_SNI", "intent": "Whether the OpenSSL library has built-in support for the Server Name Indication extension (as defined in RFC 6066).", "question_id": 8948}, {"snippet": "set.update(*others)", "intent": "Update the set , adding elements from all others . With arguments `*others`.", "question_id": 9454}, {"snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11676}, {"snippet": "site.getusersitepackages()", "intent": "Return the path of the user-specific site-packages directory , USER_SITE .", "question_id": 8411}, {"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}, {"snippet": "template.substitute(mapping, **kwds)", "intent": "Performs the template substitution , returning a new string . `mapping` is any dictionary-like object with keys that match the placeholders in the template . With arguments `**kwds`.", "question_id": 9526}, {"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}, {"snippet": "str(errors='strict')", "intent": "Return a str version of `object` . With arguments `errors`.", "question_id": 4118}, {"snippet": "random.choices(population, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement .", "question_id": 7898}, {"snippet": "turtle.onclick(fun)", "intent": "Bind `fun` to mouse-click events on this turtle .", "question_id": 11019}, {"snippet": "subprocess.check_call(args, cwd=None)", "intent": "Run command with arguments . With arguments `args`, `cwd`.", "question_id": 9674}, {"snippet": "codecs.iterdecode(iterator, encoding, **kwargs)", "intent": "Uses an incremental decoder to iteratively decode the input provided by `iterator` . With arguments `encoding`, `**kwargs`.", "question_id": 1241}, {"snippet": "email_message.make_related()", "intent": "Convert a non-multipart message into a multipart/related message , moving any existing Content- headers and payload into a ( new ) first part of the multipart .", "question_id": 3294}, {"snippet": "element.iterfind(match)", "intent": "Finds all matching subelements , by tag name or path . With arguments `match`.", "question_id": 12502}, {"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}, {"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783}, {"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}, {"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}, {"snippet": "sqlite3.Connection", "intent": "A SQLite database connection has the following attributes and methods:", "question_id": 8803}, {"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}, {"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325}, {"snippet": "os.path.expandvars(path)", "intent": "Return the argument with environment variables expanded . With arguments `path`.", "question_id": 7150}, {"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}, {"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}, {"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}, {"snippet": "base64.urlsafe_b64decode(s)", "intent": "Decode bytes-like object or ASCII string `s` using the URL- and filesystem-safe alphabet , which substitutes - instead of + and _ instead of / in the standard Base64 alphabet , and return the decoded bytes .", "question_id": 717}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "dispatcher.listen(backlog)", "intent": "Listen for connections made to the socket . The `backlog` argument specifies the maximum number of queued connections and should be at least 1 ; the maximum value is system-dependent ( usually 5 ) .", "question_id": 670}, {"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}, {"snippet": "turtle.circle(radius, extent=None, steps=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10926}, {"snippet": "Path.owner()", "intent": "Return the name of the user owning the file .", "question_id": 7302}, {"snippet": "types.ClassMethodDescriptorType", "intent": "The type of unbound class methods of some built-in data types such as dict.__dict__['fromkeys'].", "question_id": 11195}, {"snippet": "email.charset.Charset()", "intent": "Map character sets to their email properties .", "question_id": 2910}, {"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}, {"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}, {"snippet": "os.plock(op)", "intent": "Lock program segments into memory . The value of `op` ( defined in < sys/lock.h > ) determines which segments are locked .", "question_id": 7040}, {"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}, {"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}, {"snippet": "bz2.open(filename, mode='r', encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 883}, {"snippet": "fractions.gcd(a, b)", "intent": "Return the greatest common divisor of the integers `a` and `b` .", "question_id": 3877}, {"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}, {"snippet": "message.set_boundary(boundary)", "intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "question_id": 3021}, {"snippet": "curses.qiflush()", "intent": "If `flag` is False , the effect is the same as calling noqiflush ( ) .", "question_id": 1970}, {"snippet": "Queue.put(item, block=True, timeout=None)", "intent": "Put `item` into the queue . If optional args `block` is true and `timeout` is None ( the default ) , block if necessary until a free slot is available .", "question_id": 7852}, {"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}, {"snippet": "codecs.encode(obj)", "intent": "Encodes `obj` using the codec registered for `encoding` .", "question_id": 1192}, {"snippet": "xml.dom.getDOMImplementation(name=None, features=())", "intent": "Return a suitable DOM implementation . The `name` is either well-known , the module name of a DOM implementation , or None . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12306}, {"snippet": "xmlparser.ErrorCode", "intent": "Numeric code specifying the problem.", "question_id": 7749}, {"snippet": "winreg.SaveKey(key, file_name)", "intent": "Saves the specified `key` , and all its subkeys to the specified file . `file_name` is the name of the file to save registry data to .", "question_id": 12149}, {"snippet": "incremental_encoder.getstate()", "intent": "Return the current state of the encoder which must be an integer .", "question_id": 1270}, {"snippet": "email_message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 3247}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}, {"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}, {"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}, {"snippet": "FTP.transfercmd(cmd)", "intent": "Initiate a transfer over the data connection . If the transfer is active , send an EPRT or PORT command and the transfer command specified by `cmd` , and accept the connection .", "question_id": 3943}, {"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}, {"snippet": "selectors.DefaultSelector", "intent": "The default selector class, using the most efficient implementation available on the current platform.", "question_id": 8225}, {"snippet": "unicodedata.combining(chr)", "intent": "Returns the canonical combining class assigned to the character `chr` as integer .", "question_id": 11351}, {"snippet": "xml.etree.ElementTree.ProcessingInstruction(target, text=None)", "intent": "PI element factory . `target` is a string containing the PI target . `text` is a string containing the PI contents , if given .", "question_id": 12449}, {"snippet": "itertools.combinations_with_replacement(iterable, r)", "intent": "Return `r` length subsequences of elements from the input `iterable` allowing individual elements to be repeated more than once .", "question_id": 5244}, {"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}, {"snippet": "OptionParser.set_defaults(dest=value)", "intent": "Set default values for several option destinations at once . With arguments `dest`.", "question_id": 6648}, {"snippet": "multiprocessing.connection.deliver_challenge(connection, authkey)", "intent": "Send a randomly generated message to the other end of the `connection` and wait for a reply . If the reply matches the digest of the message using `authkey` as the key then a welcome message is sent to the other end of the connection .", "question_id": 6366}, {"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}, {"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}, {"snippet": "iter(object, sentinel)", "intent": "Return an iterator `object` . If the second argument , `sentinel` , is given , then object must be a callable object .", "question_id": 4042}, {"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, all_frames: bool=False)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `all_frames: bool`.", "question_id": 10858}, {"snippet": "robot_file_parser.unsafe", "intent": "The UUID was not generated in a multiprocessing-safe way.", "question_id": 11935}, {"snippet": "Telnet.expect(list, timeout=None)", "intent": "Read until one from a `list` of a regular expressions matches . The optional second argument is a `timeout` , in seconds ; the default is to block indefinitely .", "question_id": 10031}, {"snippet": "env_builder.create(env_dir)", "intent": "Create a virtual environment by specifying the target directory ( absolute or relative to the current directory ) which is to contain the virtual environment . With arguments `env_dir`.", "question_id": 11982}, {"snippet": "test_case.defaultTestResult()", "intent": "Return an instance of the test result class that should be used for this test case class ( if no other result instance is provided to the run ( ) method ) .", "question_id": 11468}, {"snippet": "audioop.lin2adpcm(fragment, width, state)", "intent": "Convert samples to 4 bit Intel/DVI ADPCM encoding . adpcmfrag is the ADPCM coded `fragment` packed 2 4-bit values per byte . `state` is a tuple containing the state of the coder . With arguments `width`.", "question_id": 692}, {"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}, {"snippet": "header.__eq__(other)", "intent": "This method allows you to compare two Header instances for equality . With arguments `other`.", "question_id": 3139}, {"snippet": "time.gmtime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10441}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}, {"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}, {"snippet": "test_case.setUp()", "intent": "Method called to prepare the test fixture .", "question_id": 11365}, {"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006}, {"snippet": "xml.dom.WrongDocumentErr", "intent": "Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other.", "question_id": 12395}, {"snippet": "tarfile.TarFile(tarinfo=TarInfo)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `tarinfo` argument can be used to replace the default TarInfo class with a different one .", "question_id": 9918}, {"snippet": "datetime.datetime", "intent": "A combination of a date and a time.", "question_id": 2200}, {"snippet": "urllib.parse.parse_qsl(qs, keep_blank_values=False, max_num_fields=None)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional argument `max_num_fields` is the maximum number of fields to read . With arguments `qs`.", "question_id": 11688}, {"snippet": "calendar.weekday(year, month, day)", "intent": "Returns the `day` of the week ( 0 is Monday ) for `year` ( 1970\u2013\u2026 ) , `month` ( 1\u201312 ) , day ( 1\u201331 ) .", "question_id": 989}, {"snippet": "email.errors.MessageError", "intent": "This is the base class for all exceptions that the email package can raise.", "question_id": 3073}, {"snippet": "element.keys()", "intent": "Returns the elements attribute names as a list .", "question_id": 12487}, {"snippet": "style.lookup(style, option)", "intent": "Returns the value specified for `option` in `style` .", "question_id": 10677}, {"snippet": "difflib.context_diff(a, b, fromfile='', tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2635}, {"snippet": "SSLContext.verify_flags", "intent": "The flags for certificate verification operations.", "question_id": 9050}, {"snippet": "TIPC_*", "intent": "TIPC related constants, matching the ones exported by the C socket API.", "question_id": 8598}, {"snippet": "concurrent.futures.wait(fs)", "intent": "Wait for the Future instances ( possibly created by different Executor instances ) given by `fs` to complete .", "question_id": 1480}, {"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}, {"snippet": "text_io_base.readline(size=-1)", "intent": "Read until newline or EOF and return a single str . If `size` is specified , at most size characters will be read .", "question_id": 5141}, {"snippet": "bytearray.hex()", "intent": "Return a string object containing two hexadecimal digits for each byte in the instance .", "question_id": 9268}, {"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705}, {"snippet": "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)", "intent": "Return a ctypes array allocated from shared memory . `typecode_or_type` determines the type of the elements of the returned array : it is either a ctypes type or a one character typecode of the kind used by the array module . If `size_or_initializer` is an integer , then it determines the length of the array , and the array will be initially zeroed . If `lock` is True ( the default ) then a new lock object is created to synchronize access to the value .", "question_id": 6268}, {"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}, {"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}, {"snippet": "AssertionError", "intent": "Raised when an assert statement fails.", "question_id": 3635}, {"snippet": "tracemalloc.is_tracing()", "intent": "True if the tracemalloc module is tracing Python memory allocations , False otherwise .", "question_id": 10846}, {"snippet": "traceback.walk_stack(f)", "intent": "Walk a stack following f.f_back from the given frame , yielding the frame and line number for each frame . If `f` is None , the current stack is used .", "question_id": 10792}, {"snippet": "modulefinder.ModuleFinder(path=None, debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6050}, {"snippet": "fractions.Fraction(numerator=0, denominator=1)", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3862}, {"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}, {"snippet": "FieldStorage.getfirst(name, default=None)", "intent": "This method always returns only one value associated with form field `name` . 1 If no such form field or value exists then the method returns the value specified by the optional parameter `default` .", "question_id": 1027}, {"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}, {"snippet": "Node.nodeName", "intent": "This has a different meaning for each node type; see the DOM specification for details.", "question_id": 12325}, {"snippet": "os.tcsetpgrp(fd, pg)", "intent": "Set the process group associated with the terminal given by `fd` ( an open file descriptor as returned by os.open ( ) ) to `pg` .", "question_id": 6807}, {"snippet": "pool.imap(func, iterable, chunksize)", "intent": "A lazier version of map ( ) . The `chunksize` argument is the same as the one used by the map ( ) method . With arguments `func`, `iterable`.", "question_id": 6346}, {"snippet": "str.rjust(width, fillchar)", "intent": "Return the string right justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9232}, {"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}, {"snippet": "operator.__invert__(obj)", "intent": "Return the bitwise inverse of the number `obj` .", "question_id": 6543}, {"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}, {"snippet": "datetime.time(second=0)", "intent": "All arguments are optional . With arguments `second`.", "question_id": 2317}, {"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}, {"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}, {"snippet": "turtle.register_shape(name, shape=None)", "intent": "There are three different ways to call this function : Add a turtle `shape` to TurtleScreen \u2019 s shapelist . With arguments `name`.", "question_id": 11099}, {"snippet": "timeit.Timer(globals=None)", "intent": "Class for timing execution speed of small code snippets . The statement will by default be executed within timeit \u2019 s namespace ; this behavior can be controlled by passing a namespace to `globals` .", "question_id": 10501}, {"snippet": "TarFile.extract(member, set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9942}, {"snippet": "turtle.tracer(delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11060}, {"snippet": "sqlite3.sqlite_version_info", "intent": "The version number of the run-time SQLite library, as a tuple of integers.", "question_id": 8794}, {"snippet": "unicodedata.digit(chr)", "intent": "Returns the digit value assigned to the character `chr` as integer .", "question_id": 11346}, {"snippet": "time.thread_time()", "intent": "Return the value ( in fractional seconds ) of the sum of the system and user CPU time of the current thread .", "question_id": 10459}, {"snippet": "webbrowser.register(name, constructor, instance=None)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed .", "question_id": 12111}, {"snippet": "mimetypes.inited", "intent": "Flag indicating whether or not the global data structures have been initialized.", "question_id": 5950}, {"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}, {"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}, {"snippet": "ssl.create_default_context()", "intent": "Return a new SSLContext object with default settings for the given `purpose` .", "question_id": 8863}, {"snippet": "os.CLD_EXITED", "intent": "These are the possible values for si_code in the result returned by waitid().", "question_id": 7078}, {"snippet": "email.policy.compat32", "intent": "An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2.", "question_id": 3451}, {"snippet": "urllib.parse.urlencode(query, quote_via=quote_plus)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The resulting string is a series of key=value pairs separated by ' & ' characters , where both key and value are quoted using the `quote_via` function .", "question_id": 11737}, {"snippet": "@abc.abstractstaticmethod", "intent": "A subclass of the built-in staticmethod(), indicating an abstract staticmethod.", "question_id": 6}, {"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}, {"snippet": "Warning", "intent": "Base class for warning categories.", "question_id": 3701}, {"snippet": "bdb.clear_all_breaks()", "intent": "Delete all existing breakpoints .", "question_id": 798}, {"snippet": "SystemExit", "intent": "This exception is raised by the sys.exit() function.", "question_id": 3669}, {"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}, {"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}, {"snippet": "turtle.screensize(bg=None)", "intent": "If no arguments are given , return current ( canvaswidth , canvasheight ) . With arguments `bg`.", "question_id": 11050}, {"snippet": "dis.opname", "intent": "Sequence of operation names, indexable using the bytecode.", "question_id": 2742}, {"snippet": "dispatcher.handle_expt()", "intent": "Called when there is out of band ( OOB ) data for a socket connection .", "question_id": 655}, {"snippet": "condition.notify(n=1)", "intent": "Wake up at most `n` tasks ( 1 by default ) waiting on this condition .", "question_id": 575}, {"snippet": "statistics.median_grouped(data)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation .", "question_id": 9130}, {"snippet": "mailbox.Error", "intent": "The based class for all other module-specific exceptions.", "question_id": 5856}, {"snippet": "multiprocessing.Process(group=None, args=())", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `args` is the argument tuple for the target invocation .", "question_id": 6174}, {"snippet": "test.support.start_threads(threads)", "intent": "Context manager to start `threads` .", "question_id": 10198}, {"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}, {"snippet": "Path.write_bytes(data)", "intent": "Open the file pointed to in bytes mode , write `data` to it , and close the file :", "question_id": 7322}, {"snippet": "email_message.get_charsets(failobj=None)", "intent": "Return a list containing the character set names in the message . If the subpart has no Content-Type header , no charset parameter , or is not of the text main MIME type , then that item in the returned list will be `failobj` .", "question_id": 3282}, {"snippet": "extension_file_loader.is_package(fullname)", "intent": "Returns True if the file path points to a package \u2019 s __init__ module based on EXTENSION_SUFFIXES . With arguments `fullname`.", "question_id": 4908}, {"snippet": "netrc.NetrcParseError", "intent": "Exception raised by the netrc class when syntactical errors are encountered in source text.", "question_id": 6386}, {"snippet": "subprocess.call(args)", "intent": "Run the command described by `args` .", "question_id": 9659}, {"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}, {"snippet": "issubclass(class, classinfo)", "intent": "Return true if `class` is a subclass ( direct , indirect or virtual ) of `classinfo` .", "question_id": 4041}, {"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}, {"snippet": "math.gamma(x)", "intent": "Return the Gamma function at `x` .", "question_id": 5932}, {"snippet": "range.start", "intent": "The value of the start parameter (or 0 if the parameter was not supplied)", "question_id": 9165}, {"snippet": "mh.set_sequences(sequences)", "intent": "Re-define the `sequences` that exist in the mailbox based upon sequences , a dictionary of names mapped to key lists , like returned by get_sequences ( ) .", "question_id": 5784}, {"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}, {"snippet": "xml.sax.xmlreader.AttributesImpl(attrs)", "intent": "This is an implementation of the Attributes interface ( see section The Attributes Interface ) . Objects of this class should be instantiated by readers ; `attrs` must be a dictionary-like object containing a mapping from attribute names to attribute values .", "question_id": 12611}, {"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}, {"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}, {"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}, {"snippet": "secrets.token_urlsafe()", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8143}, {"snippet": "unittest.SkipTest(reason)", "intent": "This exception is raised to skip a test . With arguments `reason`.", "question_id": 11362}, {"snippet": "doctest.Example(source, want, options=None)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `options`.", "question_id": 2828}, {"snippet": "future.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 368}, {"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}, {"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}, {"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}, {"snippet": "asyncio.open_connection(loop=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . The `loop` argument is optional and can always be determined automatically when this function is awaited from a coroutine .", "question_id": 466}, {"snippet": "shutil.copy(src, dst)", "intent": "Copies the file `src` to the file or directory `dst` .", "question_id": 8318}, {"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}, {"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}, {"snippet": "resource.RLIMIT_VMEM", "intent": "The largest area of mapped memory which the process may occupy.", "question_id": 8085}, {"snippet": "types.prepare_class(name, bases=(), kwds=None)", "intent": "Calculates the appropriate metaclass and creates the class namespace . The arguments are the components that make up a class definition header : the class `name` , the base classes ( in order ) and the keyword arguments ( such as metaclass ) . The return value is a 3-tuple : metaclass , namespace , `kwds` With arguments `bases`.", "question_id": 11181}, {"snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream')", "intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . With arguments `**_params`.", "question_id": 3327}, {"snippet": "Token.var", "intent": "A read-only property.", "question_id": 1645}, {"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}, {"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}, {"snippet": "statistics.variance(data)", "intent": "Return the sample variance of `data` , an iterable of at least two real-valued numbers .", "question_id": 9139}, {"snippet": "json.dumps(obj, **kw, separators=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `separators`.", "question_id": 5287}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "subprocess.STARTUPINFO(dwFlags=0)", "intent": "Partial support of the Windows STARTUPINFO structure is used for Popen creation . With arguments `dwFlags`.", "question_id": 9626}, {"snippet": "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info)", "intent": "Contains all the information pertinent to the event being logged . The primary information is passed in `msg` and `args` , which are combined using msg % args to create the message field of the record . With arguments `name`, `level`, `pathname`, `lineno`, `exc_info`.", "question_id": 5626}, {"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}, {"snippet": "config_parser.getint(section, option, fallback)", "intent": "A convenience method which coerces the `option` in the specified `section` to an integer . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "question_id": 1528}, {"snippet": "importlib.util.spec_from_loader(name, loader)", "intent": "A factory function for creating a ModuleSpec instance based on a `loader` . With arguments `name`.", "question_id": 4934}, {"snippet": "header.encode(\\t')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . With arguments `\\t'`.", "question_id": 3130}, {"snippet": "calendar.calendar(year, l=1)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`.", "question_id": 1013}, {"snippet": "fractions.gcd(a, b)", "intent": "Return the greatest common divisor of the integers `a` and `b` .", "question_id": 3877}, {"snippet": "pickletools.dis(pickle, annotate=0)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout . If a nonzero value is given to `annotate` , each opcode in the output is annotated with a short description .", "question_id": 7419}, {"snippet": "ZeroDivisionError", "intent": "Raised when the second argument of a division or modulo operation is zero.", "question_id": 3683}, {"snippet": "compileall.compile_path(quiet=0)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `quiet`.", "question_id": 1433}, {"snippet": "d[key]", "intent": "Return the item of d with key key.", "question_id": 9472}, {"snippet": "@importlib.util.set_loader", "intent": "A decorator for importlib.abc.Loader.load_module() to set the __loader__ attribute on the returned module.", "question_id": 4932}, {"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}, {"snippet": "codecs.getencoder(encoding)", "intent": "Look up the codec for the given `encoding` and return its encoder function .", "question_id": 1218}, {"snippet": "set <= other", "intent": "Test whether every element in the set is in other.", "question_id": 9440}, {"snippet": "stream_reader.readline(size, keepends)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method . If `keepends` is false line-endings will be stripped from the lines returned .", "question_id": 1290}, {"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}, {"snippet": "decimal.Subnormal", "intent": "Exponent was lower than Emin prior to rounding.", "question_id": 2592}, {"snippet": "asyncio.wrap_future(future, loop=None)", "intent": "Wrap a concurrent.futures.Future object in a asyncio.Future object . With arguments `future`, `loop`.", "question_id": 358}, {"snippet": "random.lognormvariate(mu, sigma)", "intent": "Log normal distribution . If you take the natural logarithm of this distribution , you \u2019 ll get a normal distribution with mean `mu` and standard deviation `sigma` .", "question_id": 7913}, {"snippet": "dataclasses.field(default=MISSING)", "intent": "For common and simple use cases , no other functionality is required . To satisfy this need for additional information , you can replace the `default` field value with a call to the provided field ( ) function .", "question_id": 2168}, {"snippet": "subprocess.PIPE", "intent": "Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened.", "question_id": 9584}, {"snippet": "site.PREFIXES", "intent": "A list of prefixes for site-packages directories.", "question_id": 8402}, {"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}, {"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}, {"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}, {"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}, {"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}, {"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}, {"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}, {"snippet": "text_calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 935}, {"snippet": "stringprep.in_table_c9(code)", "intent": "Determine whether `code` is in tableC.9 ( Tagging characters ) .", "question_id": 9547}, {"snippet": "set.isdisjoint(other)", "intent": "Return True if the set has no elements in common with `other` .", "question_id": 9438}, {"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}, {"snippet": "bytearray.splitlines(keepends=False)", "intent": "Return a list of the lines in the binary sequence , breaking at ASCII line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9402}, {"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}, {"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}, {"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375}, {"snippet": "unittest.main(testLoader=unittest.defaultTestLoader)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "question_id": 11550}, {"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}, {"snippet": "window.chgat(attr)", "intent": "Set the attributes of num characters at the current cursor position , or at position ( y , x ) if supplied . With arguments `attr`.", "question_id": 2030}, {"snippet": "FTP.abort()", "intent": "Abort a file transfer that is in progress .", "question_id": 3923}, {"snippet": "connection.backup(target)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance .", "question_id": 8829}, {"snippet": "http_handler.mapLogRecord(record)", "intent": "Provides a dictionary , based on `record` , which is to be URL-encoded and sent to the web server .", "question_id": 5551}, {"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}, {"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 49}, {"snippet": "errno.EAGAIN", "intent": "Try again", "question_id": 3516}, {"snippet": "FTP.login(passwd='')", "intent": "Log in as the given `user` . The `passwd` and `acct` parameters are optional and default to the empty string .", "question_id": 3917}, {"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}, {"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}, {"snippet": "TarFile.extract(member, path=\"\", set_attrs=True)", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` . File attributes ( owner , mtime , mode ) are set unless `set_attrs` is false .", "question_id": 9944}, {"snippet": "stringprep.in_table_c21_c22(code)", "intent": "Determine whether `code` is in tableC.2 ( Control characters , union of C.2.1 and C.2.2 ) .", "question_id": 9540}, {"snippet": "isinstance(object, classinfo)", "intent": "Return true if the `object` argument is an instance of the `classinfo` argument , or of a ( direct , indirect or virtual ) subclass thereof .", "question_id": 4040}, {"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}, {"snippet": "date_time.encode(out)", "intent": "Write the XML-RPC encoding of this DateTime item to the `out` stream object .", "question_id": 12684}, {"snippet": "traceback.extract_stack(f=None)", "intent": "Extract the raw traceback from the current stack frame . The optional `f` and `limit` arguments have the same meaning as for print_stack ( ) .", "question_id": 10772}, {"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}, {"snippet": "urllib.request.urlretrieve(url, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) .", "question_id": 11884}, {"snippet": "eval(expression, globals, locals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4012}, {"snippet": "babyl_message.set_visible(visible)", "intent": "Set the message \u2019 s `visible` headers to be the same as the headers in message .", "question_id": 5845}, {"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}, {"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}, {"snippet": "winreg.QueryInfoKey(key)", "intent": "Returns information about a `key` , as a tuple .", "question_id": 12146}, {"snippet": "loop.sock_sendall(sock, data)", "intent": "Send `data` to the `sock` socket .", "question_id": 278}, {"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}, {"snippet": "sys.version_info", "intent": "A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.", "question_id": 9854}, {"snippet": "Node.cloneNode(deep)", "intent": "Clone this node . Setting `deep` means to clone all child nodes as well .", "question_id": 12335}, {"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11863}, {"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'str'>`.", "question_id": 3044}, {"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}, {"snippet": "difflib.Differ(charjunk=None)", "intent": "Optional keyword parameters `linejunk` and `charjunk` are for filter functions ( or None ) :", "question_id": 2692}, {"snippet": "email.utils.formataddr(pair)", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified .", "question_id": 3461}, {"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}, {"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}, {"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}, {"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}, {"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}, {"snippet": "text_calendar.prmonth(theyear, themonth, l=0)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`, `l`.", "question_id": 934}, {"snippet": "http.server.BaseHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to handle the HTTP requests that arrive at the `server` . By itself , it can not respond to any actual HTTP requests ; it must be subclassed to handle each `request` method ( e.g . With arguments `client_address`.", "question_id": 4616}, {"snippet": "threading.BoundedSemaphore(value=1)", "intent": "Class implementing bounded semaphore objects . A bounded semaphore checks to make sure its current `value` doesn \u2019 t exceed its initial value .", "question_id": 10405}, {"snippet": "Node.toprettyxml(indent=\"\\t\")", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n .", "question_id": 12414}, {"snippet": "readline.set_pre_input_hook(function)", "intent": "Set or remove the `function` invoked by the rl_pre_input_hook callback of the underlying library .", "question_id": 8038}, {"snippet": "ssl.PROTOCOL_TLS_SERVER", "intent": "Auto-negotiate the highest protocol version like PROTOCOL_TLS, but only support server-side SSLSocket connections.", "question_id": 8923}, {"snippet": "wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)", "intent": "Create an HTTP handler for the given `request` ( i.e . a socket ) , `client_address` ( a ( host , port ) tuple ) , and `server` ( WSGIServer instance ) .", "question_id": 12231}, {"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}, {"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}, {"snippet": "memoryview(obj)", "intent": "Create a memoryview that references `obj` .", "question_id": 9411}, {"snippet": "ssl.HAS_ALPN", "intent": "Whether the OpenSSL library has built-in support for the Application-Layer Protocol Negotiation TLS extension as described in RFC 7301.", "question_id": 8945}, {"snippet": "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `updated`.", "question_id": 4162}, {"snippet": "int.to_bytes(length, byteorder, signed=False)", "intent": "Return an array of bytes representing an integer . The integer is represented using `length` bytes . The `byteorder` argument determines the byte order used to represent the integer . The `signed` argument determines whether two \u2019 s complement is used to represent the integer .", "question_id": 9144}, {"snippet": "compileall.compile_dir(dir, workers=1)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The argument `workers` specifies how many workers are used to compile files in parallel .", "question_id": 1417}, {"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}, {"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}, {"snippet": "mh.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "question_id": 5781}, {"snippet": "json.dumps(obj, **kw, cls=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5285}, {"snippet": "auto.winerror", "intent": "Under Windows, this gives you the native Windows error code.", "question_id": 3655}, {"snippet": "base64.standard_b64encode(s)", "intent": "Encode bytes-like object `s` using the standard Base64 alphabet and return the encoded bytes .", "question_id": 714}, {"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}, {"snippet": "stat.S_IREAD", "intent": "Unix V7 synonym for S_IRUSR.", "question_id": 9110}, {"snippet": "io.IOBase", "intent": "The abstract base class for all I/O classes, acting on streams of bytes.", "question_id": 5063}, {"snippet": "message.__getitem__(name)", "intent": "Return the value of the named header field . `name` should not include the colon field separator .", "question_id": 2966}, {"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}, {"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021}, {"snippet": "base_server.server_close()", "intent": "Clean up the server .", "question_id": 8766}, {"snippet": "signal.SIG_BLOCK", "intent": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be blocked.", "question_id": 8382}, {"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}, {"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}, {"snippet": "complex(real)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number .", "question_id": 4001}, {"snippet": "NNTP.login(usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6454}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "mmap.flush(offset, size)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6005}, {"snippet": "ContentHandler.startElement(name, attrs)", "intent": "Signals the start of an element in non-namespace mode . The `name` parameter contains the raw XML 1.0 name of the element type as a string and the `attrs` parameter holds an object of the Attributes interface ( see The Attributes Interface ) containing the attributes of the element .", "question_id": 12575}, {"snippet": "message.set_type(type, header='Content-Type', requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3016}, {"snippet": "heapq.nlargest(n, iterable)", "intent": "Return a list with the `n` largest elements from the dataset defined by `iterable` .", "question_id": 4325}, {"snippet": "list()", "intent": "Lists may be constructed in several ways :", "question_id": 9155}, {"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}, {"snippet": "connection.row_factory", "intent": "You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.", "question_id": 8825}, {"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "tarfile.TarFile(dereference=False)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . If `dereference` is False , add symbolic and hard links to the archive .", "question_id": 9919}, {"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}, {"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}, {"snippet": "test.support.system_must_validate_cert(f)", "intent": "Raise unittest.SkipTest on TLS certification validation failures . With arguments `f`.", "question_id": 10149}, {"snippet": "cgi.parse_multipart(fp, pdict, encoding=\"utf-8\")", "intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding .", "question_id": 1048}, {"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}, {"snippet": "null_handler.handle(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5438}, {"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}, {"snippet": "email_message.set_param(param, value)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3260}, {"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}, {"snippet": "tempfile.NamedTemporaryFile(newline=None)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . With arguments `newline`.", "question_id": 10047}, {"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}, {"snippet": "platform.python_build()", "intent": "Returns a tuple ( buildno , builddate ) stating the Python build number and date as strings .", "question_id": 7473}, {"snippet": "faulthandler.register(signum, chain=False)", "intent": "Register a user signal : install a handler for the `signum` signal to dump the traceback of all threads , or of the current thread if `all_threads` is False , into `file` . Call the previous handler if `chain` is True .", "question_id": 3734}, {"snippet": "context.plus(x)", "intent": "Plus corresponds to the unary prefix plus operator in Python . With arguments `x`.", "question_id": 2560}, {"snippet": "input()", "intent": "If the `prompt` argument is present , it is written to standard output without a trailing newline .", "question_id": 4035}, {"snippet": "inspect.trace(context=1)", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "question_id": 5033}, {"snippet": "Completer.complete(text, state)", "intent": "Return the stateth completion for `text` . With arguments `state`.", "question_id": 8101}, {"snippet": "resource.RUSAGE_BOTH", "intent": "Pass to getrusage() to request resources consumed by both the current process and child processes.", "question_id": 8099}, {"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}, {"snippet": "doctest.debug_src(src)", "intent": "Debug the doctests in a string . This is like function debug ( ) above , except that a string containing doctest examples is specified directly , via the `src` argument .", "question_id": 2890}, {"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}, {"snippet": "wsgi_server.set_app(application)", "intent": "Sets the callable `application` as the WSGI application that will receive requests .", "question_id": 12229}, {"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}, {"snippet": "decimal.to_integral_value(rounding=None)", "intent": "Round to the nearest integer without signaling Inexact or Rounded . If given , applies `rounding` ; otherwise , uses the rounding method in either the supplied `context` or the current context .", "question_id": 2489}, {"snippet": "ast.dump(node, include_attributes=False)", "intent": "Return a formatted dump of the tree in `node` . If this is wanted , `include_attributes` can be set to true .", "question_id": 165}, {"snippet": "doctest.DocTestRunner()", "intent": "A processing class used to execute and verify the interactive examples in a DocTest .", "question_id": 2861}, {"snippet": "sqlite3.enable_callback_tracebacks(flag)", "intent": "By default you will not get any tracebacks in user-defined functions , aggregates , converters , authorizer callbacks etc . If you want to debug them , you can call this function with `flag` set to True .", "question_id": 8802}, {"snippet": "traceback.format_exc(chain=True)", "intent": "This is like print_exc ( `limit` ) but returns a string instead of printing to a file . With arguments `chain`.", "question_id": 10783}, {"snippet": "MON_1 ... MON_12", "intent": "Get the name of the n-th month.", "question_id": 5361}, {"snippet": "queue.join_thread()", "intent": "Join the background thread .", "question_id": 6209}, {"snippet": "OptionParser.add_option(*opt_str, attr=value)", "intent": "To define an option with only a short option string : With arguments `*opt_str`, `attr`.", "question_id": 6625}, {"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006}, {"snippet": "readline.read_init_file()", "intent": "Execute a readline initialization file .", "question_id": 8017}, {"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}, {"snippet": "cursor.execute(sql, parameters)", "intent": "Executes an SQL statement . With arguments `sql`, `parameters`.", "question_id": 8840}, {"snippet": "set &= other & ...", "intent": "Update the set, keeping only elements found in it and all others.", "question_id": 9457}, {"snippet": "SMTP.connect(host='localhost')", "intent": "Connect to a `host` on a given `port` .", "question_id": 8512}, {"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}, {"snippet": "datetime.time(tzinfo=None)", "intent": "All arguments are optional . `tzinfo` may be None , or an instance of a tzinfo subclass .", "question_id": 2319}, {"snippet": "mimetypes.add_type(type, ext)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` .", "question_id": 5948}, {"snippet": "resource.RLIMIT_VMEM", "intent": "The largest area of mapped memory which the process may occupy.", "question_id": 8085}, {"snippet": "platform.java_ver('', ''), '', ''), release='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7491}, {"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}, {"snippet": "semaphore.acquire(blocking=True)", "intent": "Acquire a semaphore . When invoked with `blocking` set to false , do not block .", "question_id": 10400}, {"snippet": "tokenize.detect_encoding(readline)", "intent": "The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , `readline` , in the same way as the tokenize ( ) generator .", "question_id": 10703}, {"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}, {"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}, {"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942}, {"snippet": "socketserver.UDPServer(server_address, RequestHandlerClass)", "intent": "This uses datagrams , which are discrete packets of information that may arrive out of order or be lost while in transit . With arguments `server_address`, `RequestHandlerClass`.", "question_id": 8747}, {"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126}, {"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}, {"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}, {"snippet": "asyncio.Task(coro, loop=None)", "intent": "A Future-like object that runs a Python coroutine . Event loops use cooperative scheduling : an event `loop` runs one Task at a time . With arguments `coro`.", "question_id": 625}, {"snippet": "html_calendar.cssclass_month", "intent": "The CSS class for the whole month\u2019s table (used by formatmonth()).", "question_id": 974}, {"snippet": "loop.call_soon(callback, *args, context=None)", "intent": "Schedule a `callback` to be called with args arguments at the next iteration of the event loop . An optional keyword-only `context` argument allows specifying a custom contextvars.Context for the callback to run in . With arguments `*args`.", "question_id": 190}, {"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971}, {"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118}, {"snippet": "socket.ioctl(control, option)", "intent": "The ioctl ( ) method is a limited interface to the WSAIoctl system interface . Currently only the following `control` codes are supported : SIO_RCVALL , SIO_KEEPALIVE_VALS , and SIO_LOOPBACK_FAST_PATH . With arguments `option`.", "question_id": 8688}, {"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}, {"snippet": "decimal.radix()", "intent": "Return Decimal ( 10 ) , the radix ( base ) in which the Decimal class does all its arithmetic .", "question_id": 2465}, {"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}, {"snippet": "cursor.execute(sql)", "intent": "Executes an SQL statement . With arguments `sql`.", "question_id": 8841}, {"snippet": "unittest.TextTestRunner(stream=None, descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11542}, {"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}, {"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}, {"snippet": "connection.backup(target, pages=0)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time .", "question_id": 8830}, {"snippet": "ArgumentParser.exit(status=0, message=None)", "intent": "This method terminates the program , exiting with the specified `status` and , if given , it prints a `message` before that .", "question_id": 113}, {"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}, {"snippet": "decimal.logb(context=None)", "intent": "For a nonzero number , return the adjusted exponent of its operand as a Decimal instance . With arguments `context`.", "question_id": 2434}, {"snippet": "mimetypes.knownfiles", "intent": "List of type map file names commonly installed.", "question_id": 5951}, {"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954}, {"snippet": "loop.remove_reader(fd)", "intent": "Stop monitoring the `fd` file descriptor for read availability .", "question_id": 273}, {"snippet": "turtle.Shape(type_, data)", "intent": "Data structure modeling shapes . The pair ( `type_` , `data` ) must follow this specification :", "question_id": 11164}, {"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}, {"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}, {"snippet": "timer.repeat(repeat=5)", "intent": "Call timeit ( ) a few times . With arguments `repeat`.", "question_id": 10512}, {"snippet": "operator.itemgetter(*items)", "intent": "Return a callable object that fetches item from its operand using the operand \u2019 s __getitem__ ( ) method . With arguments `*items`.", "question_id": 6585}, {"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}, {"snippet": "os.path.splitext(path)", "intent": "Split the pathname `path` into a pair ( root , ext ) such that root + ext == path , and ext is empty or begins with a period and contains at most one period .", "question_id": 7171}, {"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}, {"snippet": "doctest.DebugRunner(optionflags=0)", "intent": "A subclass of DocTestRunner that raises an exception as soon as a failure is encountered . With arguments `optionflags`.", "question_id": 2897}, {"snippet": "signal.CTRL_C_EVENT", "intent": "The signal corresponding to the Ctrl+C keystroke event.", "question_id": 8376}, {"snippet": "pprint.pprint(object, width=80)", "intent": "Prints the formatted representation of `object` on `stream` , followed by a newline . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7646}, {"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}, {"snippet": "pprint.PrettyPrinter(indent=1, compact=False)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7632}, {"snippet": "IMAP4.getquotaroot(mailbox)", "intent": "Get the list of quota roots for the named `mailbox` .", "question_id": 4705}, {"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}, {"snippet": "itertools.groupby(iterable)", "intent": "Make an iterator that returns consecutive keys and groups from the `iterable` .", "question_id": 5253}, {"snippet": "curses.wrapper(func)", "intent": "Initialize curses and call another callable object , `func` , which should be the rest of your curses-using application .", "question_id": 1999}, {"snippet": "text_wrapper.subsequent_indent", "intent": "(default: '') String that will be prepended to all lines of wrapped output except the first.", "question_id": 10333}, {"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 968}, {"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}, {"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}, {"snippet": "NotImplementedError", "intent": "This exception is derived from RuntimeError.", "question_id": 3647}, {"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}, {"snippet": "BaseCookie.output(attrs=None)", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4585}, {"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}, {"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}, {"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}, {"snippet": "context.copy()", "intent": "Return a duplicate of the context .", "question_id": 2511}, {"snippet": "ssl.SSLObject", "intent": "A reduced-scope variant of SSLSocket representing an SSL protocol instance that does not contain any network IO methods.", "question_id": 9052}, {"snippet": "multiprocessing.Process(name=None)", "intent": "Process objects represent activity that is run in a separate process . `name` is the process name ( see name for more details ) .", "question_id": 6168}, {"snippet": "sys.getrecursionlimit()", "intent": "Return the current value of the recursion limit , the maximum depth of the Python interpreter stack .", "question_id": 9801}, {"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}, {"snippet": "json.dumps(obj, **kw, default=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `default`.", "question_id": 5288}, {"snippet": "threading.Event", "intent": "Class implementing event objects.", "question_id": 10406}, {"snippet": "server.start_serving()", "intent": "Start accepting connections .", "question_id": 337}, {"snippet": "signal.setitimer(which, seconds)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8391}, {"snippet": "style.element_names()", "intent": "Returns the list of elements defined in the current theme .", "question_id": 10684}, {"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}, {"snippet": "r_lock.acquire(block=True)", "intent": "Acquire a lock , blocking or non-blocking . When invoked with the `block` argument set to True , block until the lock is in an unlocked state ( not owned by any process or thread ) unless the lock is already owned by the current process or thread .", "question_id": 6259}, {"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}, {"snippet": "HTTPPasswordMgr.add_password(realm, uri, user, passwd)", "intent": "`uri` can be either a single URI , or a sequence of URIs . `realm` , `user` and `passwd` must be strings .", "question_id": 11857}, {"snippet": "text_calendar.formatyear(theyear, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . With arguments `theyear`, `m`.", "question_id": 940}, {"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}, {"snippet": "gettext.install(domain, localedir=None, codeset=None, names=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) . For the `names` parameter , please see the description of the translation object \u2019 s install ( ) method .", "question_id": 4246}, {"snippet": "str(object='')", "intent": "Return a string version of `object` .", "question_id": 9169}, {"snippet": "test_result.addError(test, err)", "intent": "Called when the `test` case test raises an unexpected exception . `err` is a tuple of the form returned by sys.exc_info ( ) : ( type , value , traceback ) .", "question_id": 11524}, {"snippet": "ftplib.FTP_TLS()", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 .", "question_id": 3888}, {"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}, {"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}, {"snippet": "webbrowser.open_new_tab(url)", "intent": "Open `url` in a new page ( \u201c tab \u201d ) of the default browser , if possible , otherwise equivalent to open_new ( ) .", "question_id": 12107}, {"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}, {"snippet": "PurePath.joinpath(*other)", "intent": "Calling this method is equivalent to combining the path with each of the other arguments in turn : With arguments `*other`.", "question_id": 7257}, {"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}, {"snippet": "warnings.warn(message, stacklevel=1)", "intent": "Issue a warning , or maybe ignore it or raise an exception . Alternatively `message` can be a Warning instance , in which case category will be ignored and message.__class__ will be used . The `stacklevel` argument can be used by wrapper functions written in Python , like this :", "question_id": 12001}, {"snippet": "Unpacker.unpack_fstring(n)", "intent": "Unpacks and returns a fixed length string . `n` is the number of characters expected .", "question_id": 12292}, {"snippet": "subprocess.IDLE_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have an idle (lowest) priority.", "question_id": 9652}, {"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}, {"snippet": "InteractiveInterpreter.runsource(source, filename=\"<input>\", symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1178}, {"snippet": "msilib.Feature(db, id, title, desc, display)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6114}, {"snippet": "bytes.rpartition(sep)", "intent": "Split the sequence at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself or its bytearray copy , and the part after the separator .", "question_id": 9323}, {"snippet": "nis.cat(mapname, domain=default_domain)", "intent": "Return a dictionary mapping key to value such that match ( key , `mapname` ) ==value . The `domain` argument allows overriding the NIS domain used for the lookup .", "question_id": 6394}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}, {"snippet": "HTTPErrorProcessor.https_response(request, response)", "intent": "Process HTTPS error responses . With arguments `request`, `response`.", "question_id": 11880}, {"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}, {"snippet": "gc.DEBUG_STATS", "intent": "Print statistics during collection.", "question_id": 4189}, {"snippet": "shutil.get_terminal_size(lines))", "intent": "Get the size of the terminal window . With arguments `lines)`.", "question_id": 8371}, {"snippet": "pickle.loads(bytes_object, fix_imports=True, encoding=\"ASCII\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7383}, {"snippet": "Telnet.set_debuglevel(debuglevel)", "intent": "Set the debug level . The higher the value of `debuglevel` , the more debug output you get ( on sys.stdout ) .", "question_id": 10023}, {"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}, {"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}, {"snippet": "multiprocessing.managers.Namespace", "intent": "A type that can register with SyncManager.", "question_id": 6318}, {"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}, {"snippet": "os.execlp(file, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . With arguments `arg0`, `arg1`.", "question_id": 7011}, {"snippet": "curses.ascii.iscntrl(c)", "intent": "Checks for an ASCII control character ( in the range 0x00 to 0x1f or 0x7f ) . With arguments `c`.", "question_id": 1903}, {"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}, {"snippet": "shlex.push_source(newstream, newfile=None)", "intent": "Push an input source stream onto the input stack . With arguments `newstream`, `newfile`.", "question_id": 8288}, {"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}, {"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}, {"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}, {"snippet": "winreg.CreateKeyEx(key, sub_key, reserved=0)", "intent": "Creates or opens the specified `key` , returning a handle object . `sub_key` is a string that names the key this method opens or creates . `reserved` is a reserved integer , and must be zero .", "question_id": 12124}, {"snippet": "email.message.EmailMessage(policy=default)", "intent": "If `policy` is specified use the rules it specifies to update and serialize the representation of the message .", "question_id": 3223}, {"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}, {"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}, {"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}, {"snippet": "bdb.format_stack_entry(frame_lineno, lprefix=': ')", "intent": "Return a string with information about a stack entry , identified by a ( frame , lineno ) tuple : With arguments `frame_lineno`, `lprefix`.", "question_id": 806}, {"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}, {"snippet": "errno.ELOOP", "intent": "Too many symbolic links encountered", "question_id": 3545}, {"snippet": "message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3004}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', dialect='excel')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . With arguments `f`, `*args`, `**kwds`, `dialect`.", "question_id": 1707}, {"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}, {"snippet": "dbm.open(file, mode=0o666)", "intent": "Open the database `file` file and return a corresponding object . The optional `mode` argument is the Unix mode of the file , used only when the database has to be created .", "question_id": 2368}, {"snippet": "os.spawnv(mode, path, args)", "intent": "Execute the program `path` in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7057}, {"snippet": "asyncio.run(coro, debug=False)", "intent": "Execute the coroutine `coro` and return the result . If `debug` is True , the event loop will be run in debug mode .", "question_id": 593}, {"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}, {"snippet": "doctest.set_unittest_reportflags(flags)", "intent": "Set the doctest reporting `flags` to use .", "question_id": 2816}, {"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}, {"snippet": "coverage_results.write_results(coverdir=None)", "intent": "Write coverage results . `coverdir` specifies the directory into which the coverage result files will be output .", "question_id": 10728}, {"snippet": "sys.implementation", "intent": "An object containing information about the implementation of the currently running Python interpreter.", "question_id": 9815}, {"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}, {"snippet": "max(arg1, arg2, *args)", "intent": "Return the largest item in an iterable or the largest of two or more arguments . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4052}, {"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}, {"snippet": "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)", "intent": "Find longest matching block in a [ `alo` : `ahi` ] and b [ `blo` : `bhi` ] .", "question_id": 2682}, {"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}, {"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}, {"snippet": "lzma.compress(data, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5706}, {"snippet": "turtle.towards(x, y=None)", "intent": "Return the angle between the line from turtle position to position specified by ( `x` , `y` ) , the vector or the other turtle .", "question_id": 10939}, {"snippet": "terminal_size.columns", "intent": "Width of the terminal window in characters.", "question_id": 6814}, {"snippet": "audioop.cross(fragment, width)", "intent": "Return the number of zero crossings in the `fragment` passed as an argument . With arguments `width`.", "question_id": 687}, {"snippet": "unittest.main()", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable .", "question_id": 11545}, {"snippet": "multiprocessing.sharedctypes.synchronized(obj, lock)", "intent": "Return a process-safe wrapper object for a ctypes object which uses `lock` to synchronize access . With arguments `obj`.", "question_id": 6276}, {"snippet": "email.generator.BytesGenerator(outfp)", "intent": "Return a BytesGenerator object that will write any message provided to the flatten ( ) method , or any surrogateescape encoded text provided to the write ( ) method , to the file-like object `outfp` .", "question_id": 3078}, {"snippet": "mock.mock_add_spec(spec)", "intent": "Add a `spec` to a mock .", "question_id": 11582}, {"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}, {"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}, {"snippet": "http.cookiejar.LWPCookieJar(filename)", "intent": "A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library \u2019 s Set-Cookie3 file format . With arguments `filename`.", "question_id": 4528}, {"snippet": "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command .", "question_id": 8428}, {"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}, {"snippet": "datetime.resolution", "intent": "The smallest possible difference between non-equal datetime objects, timedelta(microseconds=1).", "question_id": 2271}, {"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}, {"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}, {"snippet": "Morsel.key", "intent": "The name of the cookie.", "question_id": 4598}, {"snippet": "semaphore.release()", "intent": "Release a semaphore , incrementing the internal counter by one .", "question_id": 10403}, {"snippet": "Template.open(file, mode)", "intent": "Return a file-like object , open to `file` , but read from or written to by the pipeline . With arguments `mode`.", "question_id": 7433}, {"snippet": "lzma.compress(data, format=FORMAT_XZ, filters=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5711}, {"snippet": "formatter.set_spacing(spacing)", "intent": "Set the `spacing` style for the writer .", "question_id": 3835}, {"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}, {"snippet": "locale.T_FMT_AMPM", "intent": "Get a format string for time.strftime() to represent time in the am/pm format.", "question_id": 5358}, {"snippet": "smtplib.SMTP_SSL(port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8480}, {"snippet": "context.next_toward(x, y)", "intent": "Returns the number closest to `x` , in direction towards `y` .", "question_id": 2557}, {"snippet": "i_pv4_network.with_hostmask", "intent": "A string representation of the network, with the mask in host mask notation.", "question_id": 5202}, {"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}, {"snippet": "email.header.Header(s=None, header_name=None)", "intent": "Create a MIME-compliant header that can contain strings in different character sets . Optional `s` is the initial header value . Subject ) pass in the name of the field in `header_name` .", "question_id": 3125}, {"snippet": "repr(object)", "intent": "Return a string containing a printable representation of an `object` .", "question_id": 4098}, {"snippet": "xml.sax.saxutils.prepare_input_source(source, base='')", "intent": "This function takes an input `source` and an optional `base` URL and returns a fully resolved InputSource object ready for reading .", "question_id": 12668}, {"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}, {"snippet": "NameError", "intent": "Raised when a local or global name is not found.", "question_id": 3646}, {"snippet": "NNTP.starttls(context=None)", "intent": "Send a STARTTLS command . The `context` argument is optional and should be a ssl.SSLContext object .", "question_id": 6460}, {"snippet": "ensurepip.bootstrap(upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3491}, {"snippet": "subprocess.check_call(args, stdin=None)", "intent": "Run command with arguments . With arguments `args`, `stdin`.", "question_id": 9670}, {"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}, {"snippet": "test_loader.discover(start_dir)", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory .", "question_id": 11499}, {"snippet": "getopt.gnu_getopt(args, shortopts)", "intent": "This function works like getopt ( ) , except that GNU style scanning mode is used by default . With arguments `args`, `shortopts`.", "question_id": 4198}, {"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}, {"snippet": "traceback_exception.filename", "intent": "For syntax errors - the file name where the error occurred.", "question_id": 10807}, {"snippet": "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "intent": "Create an archive file ( such as zip or tar ) and return its name . `base_name` is the name of the file to create , including the path , minus any format-specific extension . `format` is the archive format : one of \u201c zip \u201d ( if the zlib module is available ) , \u201c tar \u201d , \u201c gztar \u201d ( if the zlib module is available ) , \u201c bztar \u201d ( if the bz2 module is available ) , or \u201c xztar \u201d ( if the lzma module is available ) . `root_dir` is a directory that will be the root directory of the archive ; for example , we typically chdir into root_dir before creating the archive . `base_dir` is the directory where we start archiving from ; i.e . The `verbose` argument is unused and deprecated . If `dry_run` is true , no archive is created , but the operations that would be executed are logged to `logger` . `owner` and `group` are used when creating a tar archive .", "question_id": 8351}, {"snippet": "charset.output_charset", "intent": "Some character sets must be converted before they can be used in email headers or bodies.", "question_id": 2915}, {"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}, {"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}, {"snippet": "aifc.open(file)", "intent": "Open an AIFF or AIFF-C `file` and return an object instance with methods that are described below .", "question_id": 9}, {"snippet": "timer_handle.when()", "intent": "Return a scheduled callback time as float seconds .", "question_id": 333}, {"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}, {"snippet": "io.BufferedWriter(raw)", "intent": "A buffer providing higher-level access to a writeable , sequential RawIOBase object . The constructor creates a BufferedWriter for the given writeable `raw` stream .", "question_id": 5124}, {"snippet": "thread.start()", "intent": "Start the thread \u2019 s activity .", "question_id": 10362}, {"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}, {"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}, {"snippet": "tkinter.tix.OptionMenu", "intent": "The OptionMenu creates a menu button of options.", "question_id": 10559}, {"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}, {"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}, {"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}, {"snippet": "ur_lopener.open_unknown(fullurl, data=None)", "intent": "Overridable interface to open unknown URL types . With arguments `fullurl`, `data`.", "question_id": 11895}, {"snippet": "UUID.hex", "intent": "The UUID as a 32-character hexadecimal string.", "question_id": 11950}, {"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}, {"snippet": "asyncio.BoundedSemaphore()", "intent": "A bounded semaphore object .", "question_id": 588}, {"snippet": "maildir_message.add_flag(flag)", "intent": "Set the `flag` ( s ) specified by flag without changing other flags .", "question_id": 5817}, {"snippet": "importlib.resources.is_resource(package, name)", "intent": "Return True if there is a resource named `name` in the `package` , otherwise False .", "question_id": 4863}, {"snippet": "colorsys.rgb_to_hls(r, g, b)", "intent": "Convert the color from RGB coordinates to HLS coordinates . With arguments `r`, `g`, `b`.", "question_id": 1405}, {"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}, {"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}, {"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}, {"snippet": "filecmp.dircmp(a, b, ignore=None, hide=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . `hide` is a list of names to hide , and defaults to [ os.curdir , os.pardir ] . With arguments `b`.", "question_id": 3763}, {"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}, {"snippet": "calendar.LocaleTextCalendar()", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 977}, {"snippet": "calendar.calendar(year, w=2, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `c`.", "question_id": 1017}, {"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}, {"snippet": "Protocol.data_received(data)", "intent": "Called when some `data` is received .", "question_id": 435}, {"snippet": "importlib.util.find_spec(name, package=None)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4929}, {"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}, {"snippet": "sys_log_handler.mapPriority(levelname)", "intent": "Maps a logging level name to a syslog priority name . With arguments `levelname`.", "question_id": 5505}, {"snippet": "nt_event_log_handler.close()", "intent": "At this point , you can remove the application name from the registry as a source of event log entries .", "question_id": 5510}, {"snippet": "Repr.maxfrozenset", "intent": "Limits on the number of entries represented for the named object type.", "question_id": 8060}, {"snippet": "json.dumps(obj, **kw, separators=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `separators`.", "question_id": 5287}, {"snippet": "pickletools.genops(pickle)", "intent": "Provides an iterator over all of the opcodes in a `pickle` , returning a sequence of ( opcode , arg , pos ) triples .", "question_id": 7425}, {"snippet": "socket.sendmsg_afalg(msg, op, iv)", "intent": "Specialized version of sendmsg ( ) for AF_ALG socket . With arguments `msg`, `op`, `iv`.", "question_id": 8729}, {"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}, {"snippet": "fileinput.nextfile()", "intent": "Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count .", "question_id": 3798}, {"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}, {"snippet": "@dataclasses.dataclass(repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `repr`.", "question_id": 2159}, {"snippet": "xml.dom.InuseAttributeErr", "intent": "Raised when an attempt is made to insert an Attr node that is already present elsewhere in the document.", "question_id": 12384}, {"snippet": "FTP.size(filename)", "intent": "Request the size of the file named `filename` on the server .", "question_id": 3965}, {"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}, {"snippet": "secrets.token_bytes()", "intent": "Return a random byte string containing `nbytes` number of bytes .", "question_id": 8135}, {"snippet": "POP3.list()", "intent": "Request message list , result is in the form ( response , [ 'mesg_num octets ' , ... ] , octets ) .", "question_id": 7610}, {"snippet": "bytes.zfill(width)", "intent": "Return a copy of the sequence left filled with ASCII b ' 0 ' digits to make a sequence of length `width` .", "question_id": 9409}, {"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}, {"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}, {"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}, {"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}, {"snippet": "cmath.infj", "intent": "Complex number with zero real part and positive infinity imaginary part.", "question_id": 1124}, {"snippet": "ensurepip.bootstrap(root=None, altinstall=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . If `altinstall` is set , then pipX will not be installed .", "question_id": 3498}, {"snippet": "email.utils.formataddr(pair, charset='utf-8')", "intent": "The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for a To or Cc header . If the first element of `pair` is false , then the second element is returned unmodified . Optional `charset` is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters .", "question_id": 3462}, {"snippet": "Option.action", "intent": "(default: \"store\")", "question_id": 6626}, {"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}, {"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}, {"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}, {"snippet": "test_result.unexpectedSuccesses", "intent": "A list containing TestCase instances that were marked as expected failures, but succeeded.", "question_id": 11512}, {"snippet": "msilib.UuidCreate()", "intent": "Return the string representation of a new unique identifier .", "question_id": 6059}, {"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609}, {"snippet": "smtplib.SMTP()", "intent": "An SMTP instance encapsulates an SMTP connection .", "question_id": 8458}, {"snippet": "selectors.SelectorKey", "intent": "A SelectorKey is a namedtuple used to associate a file object to its underlying file descriptor, selected event mask and attached data.", "question_id": 8209}, {"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}, {"snippet": "shutil.chown(path, user=None, group=None)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8344}, {"snippet": "date.day", "intent": "Between 1 and the number of days in the given month of the given year.", "question_id": 2228}, {"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}, {"snippet": "base_http_request_handler.send_error(code)", "intent": "Sends and logs a complete error reply to the client . The numeric `code` specifies the HTTP error code , with `message` as an optional , short , human readable description of the error .", "question_id": 4637}, {"snippet": "curses.isendwin()", "intent": "Return True if endwin ( ) has been called ( that is , the curses library has been deinitialized ) .", "question_id": 1949}, {"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}, {"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}, {"snippet": "joinable_queue.send_bytes(buffer)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` .", "question_id": 6238}, {"snippet": "ipaddress.v6_int_to_packed(address)", "intent": "Represent an `address` as 16 packed bytes in network ( big-endian ) order .", "question_id": 5233}, {"snippet": "HTTPConnection.request(method, url, body=None)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4428}, {"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}, {"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}, {"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}, {"snippet": "turtle.clear()", "intent": "Delete all drawings and all turtles from the TurtleScreen .", "question_id": 11043}, {"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12786}, {"snippet": "abc_meta.__subclasshook__(subclass)", "intent": "( Must be defined as a class method . ) Check whether `subclass` is considered a subclass of this ABC .", "question_id": 3}, {"snippet": "inspect.trace(context=1)", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "question_id": 5033}, {"snippet": "dataclasses.astuple(instance, tuple_factory=tuple)", "intent": "Converts the dataclass `instance` to a tuple ( by using the factory function `tuple_factory` ) .", "question_id": 2182}, {"snippet": "mimetypes.read_mime_types(filename)", "intent": "Load the type map given in the file `filename` , if it exists .", "question_id": 5947}, {"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}, {"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}, {"snippet": "loop.call_exception_handler(context)", "intent": "Call the current event loop exception handler . `context` is a dict object containing the following keys ( new keys may be introduced in future Python versions ) :", "question_id": 310}, {"snippet": "pickle.dump(obj, file)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file .", "question_id": 7363}, {"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}, {"snippet": "policy.handle_defect(obj, defect)", "intent": "Handle a `defect` found on `obj` .", "question_id": 3420}, {"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}, {"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}, {"snippet": "json_encoder.encode(o)", "intent": "Return a JSON string representation of a Python data structure , `o` .", "question_id": 5333}, {"snippet": "print(*objects, file=sys.stdout)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4078}, {"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}, {"snippet": "bdb.dispatch_call(frame, arg)", "intent": "If the debugger should stop on this function call , invoke the user_call ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "question_id": 774}, {"snippet": "os.major(device)", "intent": "Extract the `device` major number from a raw device number ( usually the st_dev or st_rdev field from stat ) .", "question_id": 6882}, {"snippet": "base_selector.get_key(fileobj)", "intent": "Return the key associated with a registered file object . With arguments `fileobj`.", "question_id": 8223}, {"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891}, {"snippet": "subprocess.ABOVE_NORMAL_PRIORITY_CLASS", "intent": "A Popen creationflags parameter to specify that a new process will have an above average priority.", "question_id": 9649}, {"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}, {"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}, {"snippet": "bytearray(source)", "intent": "There is no dedicated literal syntax for bytearray objects , instead they are always created by calling the constructor : With arguments `source`.", "question_id": 9265}, {"snippet": "decimal.Subnormal", "intent": "Exponent was lower than Emin prior to rounding.", "question_id": 2592}, {"snippet": "xml.etree.ElementTree.XML(text, parser=None)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12470}, {"snippet": "asyncio.BaseProtocol", "intent": "Base protocol with methods that all protocols share.", "question_id": 426}, {"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}, {"snippet": "crypt.methods", "intent": "A list of available password hashing algorithms, as crypt.METHOD_* objects.", "question_id": 1673}, {"snippet": "calendar.HTMLCalendar()", "intent": "This class can be used to generate HTML calendars .", "question_id": 956}, {"snippet": "text_calendar.pryear(theyear, l=1, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `l`, `c`.", "question_id": 954}, {"snippet": "ctypes._Pointer", "intent": "Private, abstract base class for pointers.", "question_id": 1896}, {"snippet": "tkinter.tix.Tk()", "intent": "Toplevel widget of Tix which represents mostly the main window of an application .", "question_id": 10544}, {"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}, {"snippet": "inspect.Parameter(name, kind, annotation=Parameter.empty)", "intent": "Parameter objects are immutable . With arguments `name`, `kind`, `annotation`.", "question_id": 4995}, {"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}, {"snippet": "memoryview.contiguous", "intent": "A bool indicating whether the memory is contiguous.", "question_id": 9430}, {"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}, {"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}, {"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}, {"snippet": "context.add(x, y)", "intent": "Return the sum of `x` and `y` .", "question_id": 2518}, {"snippet": "asyncore.loop(timeout, use_poll, map)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds . The `use_poll` parameter , if true , indicates that poll ( ) should be used in preference to select ( ) ( the default is False ) . The `map` parameter is a dictionary whose items are the channels to watch .", "question_id": 648}, {"snippet": "doctest.DocTestFinder(verbose=False, recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2846}, {"snippet": "ssl.AlertDescription", "intent": "enum.IntEnum collection of ALERT_DESCRIPTION_* constants.", "question_id": 8963}, {"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544}, {"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}, {"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}, {"snippet": "sched.scheduler(timefunc=time.monotonic)", "intent": "The scheduler class defines a generic interface to scheduling events . It needs two functions to actually deal with the \u201c outside world \u201d \u2014 `timefunc` should be callable without arguments , and return a number ( the \u201c time \u201d , in any units whatsoever ) .", "question_id": 8115}, {"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}, {"snippet": "gc.get_referrers(*objs)", "intent": "Return the list of objects that directly refer to any of objs . With arguments `*objs`.", "question_id": 4181}, {"snippet": "base_server.socket", "intent": "The socket object on which the server will listen for incoming requests.", "question_id": 8770}, {"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}, {"snippet": "urllib.request.urlretrieve(url, filename=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11882}, {"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}, {"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}, {"snippet": "Template.prepend(cmd, kind)", "intent": "Add a new action at the beginning . With arguments `cmd`, `kind`.", "question_id": 7432}, {"snippet": "shlex.commenters", "intent": "The string of characters that are recognized as comment beginners.", "question_id": 8294}, {"snippet": "window.border(ls, rs, ts, bs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`.", "question_id": 2023}, {"snippet": "subprocess.run(args, input=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9569}, {"snippet": "patch.multiple(target, **kwargs)", "intent": "Perform multiple patches in a single call . With arguments `target`, `**kwargs`.", "question_id": 11632}, {"snippet": "PrettyPrinter.isreadable(object)", "intent": "Determine if the formatted representation of the `object` is \u201c readable , \u201d or can be used to reconstruct the value using eval ( ) .", "question_id": 7658}, {"snippet": "FileCookieJar.filename", "intent": "Filename of default file in which to keep cookies.", "question_id": 4522}, {"snippet": "mailcap.findmatch(caps, key='view', plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5874}, {"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}, {"snippet": "curses.ascii.isxdigit(c)", "intent": "Checks for an ASCII hexadecimal digit . This is equivalent to `c` in string.hexdigits .", "question_id": 1911}, {"snippet": "getopt.error", "intent": "Alias for GetoptError; for backward compatibility.", "question_id": 4203}, {"snippet": "heapq.heapify(x)", "intent": "Transform list `x` into a heap , in-place , in linear time .", "question_id": 4319}, {"snippet": "mmap.flush(offset, size)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6005}, {"snippet": "codecs.BOM", "intent": "These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "question_id": 1243}, {"snippet": "queue.put(obj)", "intent": "Put `obj` into the queue .", "question_id": 6202}, {"snippet": "file_finder.find_spec(fullname)", "intent": "Attempt to find the spec to handle `fullname` within path .", "question_id": 4884}, {"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}, {"snippet": "platform.win32_ver(release='', version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7500}, {"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . With arguments `database`, `basedir`.", "question_id": 6092}, {"snippet": "InteractiveConsole.interact(banner=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close !", "question_id": 1185}, {"snippet": "robot_file_parser.unsafe", "intent": "The UUID was not generated in a multiprocessing-safe way.", "question_id": 11935}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}, {"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}, {"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}, {"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}, {"snippet": "list.sort()", "intent": "This method sorts the list in place , using only < comparisons between items .", "question_id": 9156}, {"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\", optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2795}, {"snippet": "argrepr", "intent": "human readable description of operation argument", "question_id": 2738}, {"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}, {"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}, {"snippet": "object.__getstate__()", "intent": "Classes can further influence how their instances are pickled ; if the class defines the method __getstate__ ( ) , it is called and the returned object is pickled as the contents for the instance , instead of the contents of the instance \u2019 s dictionary .", "question_id": 7411}, {"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}, {"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}, {"snippet": "turtle.write(arg, 8, \"normal\"))", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . With arguments `8`, `\"normal\")`.", "question_id": 10969}, {"snippet": "message.get_content_type()", "intent": "Return the message \u2019 s content type .", "question_id": 2978}, {"snippet": "prototype(func_spec)", "intent": "Returns a foreign function exported by a shared library . `func_spec` must be a 2-tuple ( name_or_ordinal , library ) .", "question_id": 1804}, {"snippet": "ZipFile.open(name, pwd=None)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . `pwd` is the password used to decrypt encrypted ZIP files .", "question_id": 12808}, {"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}, {"snippet": "CAN_*", "intent": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "question_id": 8582}, {"snippet": "ur_lopener.open_unknown(fullurl)", "intent": "Overridable interface to open unknown URL types . With arguments `fullurl`.", "question_id": 11894}, {"snippet": "IMAP4.setquota(root, limits)", "intent": "Set the quota `root` \u2019 s resource `limits` .", "question_id": 4737}, {"snippet": "base_selector.unregister(fileobj)", "intent": "Unregister a file object from selection , removing it from monitoring . `fileobj` must be a file object previously registered .", "question_id": 8217}, {"snippet": "set ^= other", "intent": "Update the set, keeping only elements found in either set, but not in both.", "question_id": 9461}, {"snippet": "contextlib.nullcontext()", "intent": "Return a context manager that returns `enter_result` from __enter__ , but otherwise does nothing .", "question_id": 1620}, {"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}, {"snippet": "ord(c)", "intent": "Given a string representing one Unicode character , return an integer representing the Unicode code point of that character . With arguments `c`.", "question_id": 4072}, {"snippet": "multiprocessing.SimpleQueue", "intent": "It is a simplified Queue type, very close to a locked Pipe.", "question_id": 6211}, {"snippet": "bdb.trace_dispatch(frame, event, arg)", "intent": "This function is installed as the trace function of debugged frames . The default implementation decides how to dispatch a `frame` , depending on the type of `event` ( passed as a string ) that is about to be executed . The `arg` parameter depends on the previous event .", "question_id": 772}, {"snippet": "turtle.clearscreen()", "intent": "Delete all drawings and all turtles from the TurtleScreen .", "question_id": 11044}, {"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}, {"snippet": "round(number, ndigits)", "intent": "Return `number` rounded to `ndigits` precision after the decimal point .", "question_id": 4100}, {"snippet": "pickle.load(file)", "intent": "Read the pickled representation of an object from the open `file` object file and return the reconstituted object hierarchy specified therein .", "question_id": 7371}, {"snippet": "sunau.AUDIO_FILE_ENCODING_LINEAR_16", "intent": "Values of the encoding field from the AU header which are supported by this module.", "question_id": 9697}, {"snippet": "env_builder.create(env_dir)", "intent": "Create a virtual environment by specifying the target directory ( absolute or relative to the current directory ) which is to contain the virtual environment . With arguments `env_dir`.", "question_id": 11982}, {"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}, {"snippet": "FTPHandler.ftp_open(req)", "intent": "Open the FTP file indicated by `req` .", "question_id": 11875}, {"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}, {"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}, {"snippet": "bz2.BZ2Decompressor", "intent": "Create a new decompressor object.", "question_id": 900}, {"snippet": "operator.length_hint(obj, default=0)", "intent": "Return an estimated length for the object o . First try to return its actual length , then an estimate using object.__length_hint__ ( ) , and finally return the `default` value . With arguments `obj`.", "question_id": 6581}, {"snippet": "curses.has_colors()", "intent": "Return True if the terminal can display colors ; otherwise , return False .", "question_id": 1940}, {"snippet": "email.parser.BytesHeaderParser(_class=None)", "intent": "Exactly like BytesParser , except that headersonly defaults to True . With arguments `_class`.", "question_id": 3381}, {"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}, {"snippet": "config_parser.read_dict(dictionary)", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order .", "question_id": 1518}, {"snippet": "io_base.writelines(lines)", "intent": "Write a list of `lines` to the stream .", "question_id": 5081}, {"snippet": "class.mro()", "intent": "This method can be overridden by a metaclass to customize the method resolution order for its instances .", "question_id": 9505}, {"snippet": "ftplib.FTP(host='')", "intent": "Return a new instance of the FTP class . When `host` is given , the method call connect ( host ) is made .", "question_id": 3879}, {"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}, {"snippet": "os.path.relpath(path)", "intent": "Return a relative filepath to `path` either from the current directory or from an optional `start` directory .", "question_id": 7164}, {"snippet": "enum.auto", "intent": "Instances are replaced with an appropriate value for Enum members.", "question_id": 3504}, {"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}, {"snippet": "pdb.runcall(function, *args, **kwds)", "intent": "Call the `function` ( a function or method object , not a string ) with the given arguments . With arguments `*args`, `**kwds`.", "question_id": 7335}, {"snippet": "os.setuid(uid)", "intent": "Set the current process \u2019 s user id . With arguments `uid`.", "question_id": 6706}, {"snippet": "bdb.effective(file, line, frame)", "intent": "Determine if there is an effective ( active ) breakpoint at this `line` of code . With arguments `file`, `frame`.", "question_id": 818}, {"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}, {"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}, {"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}, {"snippet": "logging.handlers.NTEventLogHandler(appname)", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log .", "question_id": 5506}, {"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}, {"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}, {"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}, {"snippet": "@reprlib.recursive_repr()", "intent": "Decorator for __repr__ ( ) methods to detect recursive calls within the same thread .", "question_id": 8053}, {"snippet": "errno.ECONNABORTED", "intent": "Software caused connection abort", "question_id": 3608}, {"snippet": "AU_write.writeframesraw(data)", "intent": "Write audio frames , without correcting nframes . With arguments `data`.", "question_id": 9728}, {"snippet": "BaseProtocol.connection_made(transport)", "intent": "Called when a connection is made . The `transport` argument is the transport representing the connection .", "question_id": 431}, {"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT, create=False)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11626}, {"snippet": "curses.unget_wch(ch)", "intent": "Push `ch` so the next get_wch ( ) will return it .", "question_id": 1995}, {"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}, {"snippet": "text_calendar.formatyear(theyear, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 939}, {"snippet": "message.set_type(type, header='Content-Type')", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3014}, {"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}, {"snippet": "lzma_compressor.flush()", "intent": "Finish the compression process , returning a bytes object containing any data stored in the compressor \u2019 s internal buffers .", "question_id": 5689}, {"snippet": "tkinter.ttk.Widget", "intent": "statespec will usually be a list or a tuple.", "question_id": 10591}, {"snippet": "Node.toprettyxml(newl=\"\\n\", encoding=None)", "intent": "Return a pretty-printed version of the document . `indent` specifies the indentation string and defaults to a tabulator ; `newl` specifies the string emitted at the end of each line and defaults to \\n . The `encoding` argument behaves like the corresponding argument of toxml ( ) .", "question_id": 12419}, {"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}, {"snippet": "email_message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 3244}, {"snippet": "pickler.persistent_id(obj)", "intent": "Do nothing by default . If persistent_id ( ) returns None , `obj` is pickled as usual .", "question_id": 7395}, {"snippet": "platform.system()", "intent": "Returns the system/OS name , e.g .", "question_id": 7481}, {"snippet": "window.addstr(y, x, str, attr)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2010}, {"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}, {"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12459}, {"snippet": "context.get(var, default)", "intent": "Return the value for `var` if var has the value in the context object . Return `default` otherwise .", "question_id": 1654}, {"snippet": "ensurepip.bootstrap(verbosity=0)", "intent": "Bootstraps pip into the current or designated environment . `verbosity` controls the level of output to sys.stdout from the bootstrapping operation .", "question_id": 3495}, {"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}, {"snippet": "turtle.back(distance)", "intent": "Move the turtle backward by `distance` , opposite to the direction the turtle is headed .", "question_id": 10905}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "sys.maxunicode", "intent": "An integer giving the value of the largest Unicode code point, i.e.", "question_id": 9824}, {"snippet": "IMAP4.namespace()", "intent": "Returns IMAP namespaces as defined in RFC 2342 .", "question_id": 4717}, {"snippet": "curses.qiflush(flag)", "intent": "If `flag` is False , the effect is the same as calling noqiflush ( ) .", "question_id": 1969}, {"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}, {"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}, {"snippet": "set.remove(elem)", "intent": "Remove element `elem` from the set .", "question_id": 9463}, {"snippet": "window.insstr(y, x, str)", "intent": "Insert a character string ( as many characters as will fit on the line ) before the character under the cursor . The cursor position does not change ( after moving to `y` , `x` , if specified ) . With arguments `str`.", "question_id": 2084}, {"snippet": "marshal.version", "intent": "Indicates the format that the module uses.", "question_id": 5884}, {"snippet": "signal.SIG_UNBLOCK", "intent": "A possible value for the how parameter to pthread_sigmask() indicating that signals are to be unblocked.", "question_id": 8383}, {"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}, {"snippet": "@functools.lru_cache(maxsize=128, typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4149}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "pickle.Pickler(file)", "intent": "This takes a binary `file` for writing a pickle data stream .", "question_id": 7390}, {"snippet": "executor.shutdown(wait=True)", "intent": "Signal the executor that it should free any resources that it is using when the currently pending futures are done executing . If `wait` is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed .", "question_id": 1446}, {"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}, {"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}, {"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}, {"snippet": "Pattern.search(string, pos, endpos)", "intent": "Scan through `string` looking for the first location where this regular expression produces a match , and return a corresponding match object . The optional second parameter `pos` gives an index in the string where the search is to start ; it defaults to 0 . The optional parameter `endpos` limits how far the string will be searched ; it will be as if the string is endpos characters long , so only the characters from pos to endpos - 1 will be searched for a match .", "question_id": 7970}, {"snippet": "tempfile.mktemp(suffix='')", "intent": "Return an absolute pathname of a file that did not exist at the time the call is made . The `prefix` , `suffix` , and `dir` arguments are similar to those of mkstemp ( ) , except that bytes file names , suffix=None and prefix=None are not supported .", "question_id": 10095}, {"snippet": "test.support.gc_collect()", "intent": "Force as many objects as possible to be collected .", "question_id": 10192}, {"snippet": "io_base.flush()", "intent": "Flush the write buffers of the stream if applicable .", "question_id": 5067}, {"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}, {"snippet": "copy.deepcopy(x, memo)", "intent": "Return a deep copy of `x` . With arguments `memo`.", "question_id": 1662}, {"snippet": "base64.b64decode(s, validate=False)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . If `validate` is False ( the default ) , characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check .", "question_id": 712}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, headers=None)", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`.", "question_id": 3046}, {"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}, {"snippet": "SubprocessTransport.kill()", "intent": "Kill the subprocess .", "question_id": 422}, {"snippet": "Path.mkdir(parents=False)", "intent": "Create a new directory at this given path . If `parents` is true , any missing parents of this path are created as needed ; they are created with the default permissions without taking mode into account ( mimicking the POSIX mkdir -p command ) .", "question_id": 7286}, {"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10973}, {"snippet": "Match.string", "intent": "The string passed to match() or search().", "question_id": 8014}, {"snippet": "os.WEXITSTATUS(status)", "intent": "If WIFEXITED ( `status` ) is true , return the integer parameter to the exit ( 2 ) system call .", "question_id": 7093}, {"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}, {"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\")", "intent": "Add `headers` and payload to `msg` : With arguments `<'str'>`, `subtype`.", "question_id": 3040}, {"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}, {"snippet": "stats.add(*filenames)", "intent": "This method of the Stats class accumulates additional profiling information into the current profiling object . With arguments `*filenames`.", "question_id": 7691}, {"snippet": "open(file, opener=None)", "intent": "Open `file` and return a corresponding file object . A custom `opener` can be used by passing a callable as opener .", "question_id": 4069}, {"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}, {"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}, {"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}, {"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}, {"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}, {"snippet": "asyncio.set_event_loop(loop)", "intent": "Set `loop` as a current event loop for the current OS thread .", "question_id": 180}, {"snippet": "HTTPConnection.request(method, url, body=None, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4432}, {"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}, {"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}, {"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}, {"snippet": "Panel.set_userptr(obj)", "intent": "Set the panel \u2019 s user pointer to `obj` .", "question_id": 2152}, {"snippet": "signal.setitimer(which, seconds, interval=0.0)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8392}, {"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}, {"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}, {"snippet": "gzip.GzipFile(compresslevel=9)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `compresslevel` argument is an integer from 0 to 9 controlling the level of compression ; 1 is fastest and produces the least compression , and 9 is slowest and produces the most compression .", "question_id": 4285}, {"snippet": "pool.apply(func)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6334}, {"snippet": "test.support.findfile(filename, subdir=None)", "intent": "Return the path to the file named `filename` . Setting `subdir` indicates a relative path to use to find the file rather than looking directly in the path directories .", "question_id": 10152}, {"snippet": "pool.map_async(func, iterable, chunksize)", "intent": "A variant of the map ( ) method which returns a result object . With arguments `func`, `iterable`, `chunksize`.", "question_id": 6344}, {"snippet": "doctest.run_docstring_examples(f, globs, name=\"NoName\")", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `name` is used in failure messages , and defaults to `` NoName '' .", "question_id": 2788}, {"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}, {"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}, {"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}, {"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}, {"snippet": "gdbm.nextkey(key)", "intent": "Returns the `key` that follows key in the traversal .", "question_id": 2375}, {"snippet": "str.rsplit(sep=None, maxsplit=-1)", "intent": "Return a list of the words in the string , using `sep` as the delimiter string . If `maxsplit` is given , at most maxsplit splits are done , the rightmost ones .", "question_id": 9238}, {"snippet": "argparse.Namespace", "intent": "Simple class used by default by parse_args() to create an object holding attributes and return it.", "question_id": 73}, {"snippet": "sqlite3.register_adapter(type, callable)", "intent": "Registers a `callable` to convert the custom Python `type` type into one of SQLite \u2019 s supported types .", "question_id": 8800}, {"snippet": "ast.NodeVisitor", "intent": "A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.", "question_id": 159}, {"snippet": "pool.starmap_async(func, iterable, chunksize, callback, error_callback)", "intent": "A combination of starmap ( ) and map_async ( ) that iterates over `iterable` of iterables and calls `func` with the iterables unpacked . With arguments `chunksize`, `callback`, `error_callback`.", "question_id": 6352}, {"snippet": "types.SimpleNamespace", "intent": "A simple object subclass that provides attribute access to its namespace, as well as a meaningful repr.", "question_id": 11217}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}, {"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}, {"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}, {"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5685}, {"snippet": "CookieJar.set_cookie(cookie)", "intent": "Set a Cookie , without checking with policy to see whether or not it should be set . With arguments `cookie`.", "question_id": 4492}, {"snippet": "tarfile.TarFile(encoding=ENCODING)", "intent": "All following arguments are optional and can be accessed as instance attributes as well . The `encoding` and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled .", "question_id": 9921}, {"snippet": "WriteTransport.get_write_buffer_limits()", "intent": "Get the high and low watermarks for write flow control .", "question_id": 408}, {"snippet": "condition.wait()", "intent": "Wait until notified or until a `timeout` occurs .", "question_id": 10390}, {"snippet": "doc_test_runner.report_start(out, test, example)", "intent": "Report that the `test` runner is about to process the given `example` . `out` is the output function that was passed to DocTestRunner.run ( ) .", "question_id": 2869}, {"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}, {"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}, {"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}, {"snippet": "os.execlpe(file, arg0, arg1, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "question_id": 7012}, {"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}, {"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}, {"snippet": "policy.mangle_from_", "intent": "If True, lines starting with \u201cFrom \u201c in the body are escaped by putting a > in front of them.", "question_id": 3417}, {"snippet": "gc.freeze()", "intent": "Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections .", "question_id": 4184}, {"snippet": "Unpacker.unpack_array(unpack_item)", "intent": "Unpacks and returns a variable length list of homogeneous items . With arguments `unpack_item`.", "question_id": 12299}, {"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `func`.", "question_id": 5586}, {"snippet": "os.set_handle_inheritable(handle, inheritable)", "intent": "Set the \u201c `inheritable` \u201d flag of the specified `handle` .", "question_id": 6819}, {"snippet": "xmlrpc.server.CGIXMLRPCRequestHandler()", "intent": "Create a new instance to handle XML-RPC requests in a CGI environment .", "question_id": 12722}, {"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}, {"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}, {"snippet": "tarfile.PAX_FORMAT", "intent": "POSIX.1-2001 (pax) format.", "question_id": 9911}, {"snippet": "message.set_boundary(boundary)", "intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "question_id": 3021}, {"snippet": "mh_message.set_sequences(sequences)", "intent": "Set the list of `sequences` that include this message .", "question_id": 5835}, {"snippet": "codecs.CodecInfo(encode, decode, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`.", "question_id": 1206}, {"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}, {"snippet": "uuid.uuid4()", "intent": "Generate a random UUID .", "question_id": 11962}, {"snippet": "_thread.interrupt_main()", "intent": "Simulate the effect of a signal.SIGINT signal arriving in the main thread .", "question_id": 12945}, {"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}, {"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}, {"snippet": "mimetypes.common_types", "intent": "Dictionary mapping filename extensions to non-standard, but commonly found MIME types.", "question_id": 5955}, {"snippet": "IMAP4.uid(command)", "intent": "Execute `command` args with messages identified by UID , rather than message number .", "question_id": 4750}, {"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}, {"snippet": "str.count(sub)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9184}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}, {"snippet": "argparse.ArgumentParser(epilog=None)", "intent": "Create a new ArgumentParser object . With arguments `epilog`.", "question_id": 42}, {"snippet": "aifc.getcomptype()", "intent": "Return a bytes array of length 4 describing the type of compression used in the audio file .", "question_id": 15}, {"snippet": "Repr.maxset", "intent": "Limits on the number of entries represented for the named object type.", "question_id": 8059}, {"snippet": "bz2.BZ2Compressor(compresslevel=9)", "intent": "Create a new compressor object . `compresslevel` , if given , must be an integer between 1 and 9 .", "question_id": 897}, {"snippet": "socket.makefile(mode='r')", "intent": "Return a file object associated with the socket . These arguments are interpreted the same way as by the built-in open ( ) function , except the only supported `mode` values are ' r ' ( default ) , ' w ' and ' b ' .", "question_id": 8692}, {"snippet": "random.choices(population, weights=None, cum_weights=None, k=1)", "intent": "Return a `k` sized list of elements chosen from the `population` with replacement . If a `weights` sequence is specified , selections are made according to the relative weights . Alternatively , if a `cum_weights` sequence is given , the selections are made according to the cumulative weights ( perhaps computed using itertools.accumulate ( ) ) .", "question_id": 7902}, {"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}, {"snippet": "operator.neg(obj)", "intent": "Return `obj` negated ( -obj ) .", "question_id": 6552}, {"snippet": "time.strftime(format)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument .", "question_id": 10454}, {"snippet": "socket.send(bytes, flags)", "intent": "Send data to the socket . Returns the number of `bytes` sent . The optional `flags` argument has the same meaning as for recv ( ) above .", "question_id": 8717}, {"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "time.min", "intent": "The earliest representable time, time(0, 0, 0, 0).", "question_id": 2324}, {"snippet": "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)", "intent": "Handle an authentication request by getting a user/password pair , and re-trying the request . `authreq` should be the name of the header where the information about the realm is included in the request , `host` specifies the URL and path to authenticate for , `req` should be the ( failed ) Request object , and `headers` should be the error headers .", "question_id": 11865}, {"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}, {"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}, {"snippet": "shutil.copy(src, dst, follow_symlinks=True)", "intent": "Copies the file `src` to the file or directory `dst` . If `follow_symlinks` is false , and src is a symbolic link , dst will be created as a symbolic link .", "question_id": 8319}, {"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}, {"snippet": "warnings_recorder.run(test)", "intent": "Run `test` and return the result .", "question_id": 10296}, {"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}, {"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}, {"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}, {"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}, {"snippet": "Path.replace(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7309}, {"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}, {"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}, {"snippet": "array.fromlist(list)", "intent": "Append items from the `list` .", "question_id": 127}, {"snippet": "auto.code", "intent": "The exit status or error message that is passed to the constructor.", "question_id": 3670}, {"snippet": "smtpd.SMTPChannel(server, conn, addr)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below .", "question_id": 8427}, {"snippet": "wsgiref.util.setup_testing_defaults(environ)", "intent": "Update `environ` with trivial defaults for testing purposes .", "question_id": 12215}, {"snippet": "bytes(source, encoding, errors)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) . With arguments `errors`.", "question_id": 9257}, {"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}, {"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}, {"snippet": "plistlib.FMT_XML", "intent": "The XML format for plist files.", "question_id": 7584}, {"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}, {"snippet": "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order . With arguments `after_in_parent`, `after_in_child`.", "question_id": 7052}, {"snippet": "readline.get_completer_delims()", "intent": "Set or get the word delimiters for completion .", "question_id": 8047}, {"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}, {"snippet": "unittest.mock.NonCallableMock(**kwargs)", "intent": "A non-callable version of Mock . With arguments `**kwargs`.", "question_id": 11597}, {"snippet": "test_suite.run(result)", "intent": "Run the tests associated with this suite , collecting the `result` into the test result object passed as result .", "question_id": 11485}, {"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}, {"snippet": "memory_bio.read()", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9056}, {"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}, {"snippet": "complex(real, imag)", "intent": "Return a complex number with the value `real` + imag*1j or convert a string or number to a complex number . If `imag` is omitted , it defaults to zero and the constructor serves as a numeric conversion like int and float .", "question_id": 4000}, {"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}, {"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6047}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "OptionParser.print_usage(file=None)", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6645}, {"snippet": "zipapp.create_archive(source, target=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written :", "question_id": 12768}, {"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}, {"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}, {"snippet": "importlib.resources.contents(package)", "intent": "Return an iterable over the named items within the `package` .", "question_id": 4864}, {"snippet": "context.power(x, y)", "intent": "Return `x` to the power of `y` , reduced `modulo` modulo if given .", "question_id": 2561}, {"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}, {"snippet": "cmd.Cmd(stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1130}, {"snippet": "style.lookup(style, option, state=None)", "intent": "Returns the value specified for `option` in `style` . If `state` is specified , it is expected to be a sequence of one or more states .", "question_id": 10678}, {"snippet": "config_parser.getboolean(section, option)", "intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value .", "question_id": 1548}, {"snippet": "FTP.connect()", "intent": "Connect to the given `host` and `port` .", "question_id": 3904}, {"snippet": "base_rotating_handler.rotation_filename(default_name)", "intent": "Modify the filename of a log file when rotating . With arguments `default_name`.", "question_id": 5456}, {"snippet": "BaseException", "intent": "The base class for all built-in exceptions.", "question_id": 3628}, {"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . The `multithread` and `multiprocess` values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12240}, {"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}, {"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}, {"snippet": "test_case.assertRaises(exception, callable, *args, **kwds)", "intent": "Test that an `exception` is raised when `callable` is called with any positional or keyword arguments that are also passed to assertRaises ( ) . With arguments `*args`, `**kwds`.", "question_id": 11399}, {"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}, {"snippet": "pickle.DEFAULT_PROTOCOL", "intent": "An integer, the default protocol version used for pickling.", "question_id": 7362}, {"snippet": "queue_listener.dequeue(block)", "intent": "Dequeues a record and return it , optionally blocking . With arguments `block`.", "question_id": 5559}, {"snippet": "asyncio.DatagramTransport(BaseTransport)", "intent": "A transport for datagram ( UDP ) connections . With arguments `BaseTransport`.", "question_id": 394}, {"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}, {"snippet": "calendar.timegm(tuple)", "intent": "An unrelated but handy function that takes a time `tuple` such as returned by the gmtime ( ) function in the time module , and returns the corresponding Unix timestamp value , assuming an epoch of 1970 , and the POSIX encoding .", "question_id": 1021}, {"snippet": "null_handler.handle(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5438}, {"snippet": "os.startfile(path, operation)", "intent": "Start a file with its associated application . The `path` parameter is relative to the current directory . When `operation` is not specified or 'open ' , this acts like double-clicking the file in Windows Explorer , or giving the file name as an argument to the start command from the interactive command shell : the file is opened with whatever application ( if any ) its extension is associated .", "question_id": 7066}, {"snippet": "date.ctime()", "intent": "Return a string representing the date , for example date ( 2002 , 12 , 4 ) .ctime ( ) == 'Wed Dec 4 00:00:00 2002 ' .", "question_id": 2244}, {"snippet": "bdb.do_clear(arg)", "intent": "Handle how a breakpoint must be removed when it is a temporary one . With arguments `arg`.", "question_id": 784}, {"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}, {"snippet": "subprocess.call(args, stdin=None, shell=False)", "intent": "Run the command described by `args` . With arguments `stdin`, `shell`.", "question_id": 9668}, {"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}, {"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}, {"snippet": "doc_test_parser.get_doctest(string, globs, name, filename, lineno)", "intent": "Extract all doctest examples from the given `string` , and collect them into a DocTest object . `globs` , `name` , `filename` , and `lineno` are attributes for the new DocTest object .", "question_id": 2856}, {"snippet": "locale.currency(val, international=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `international` is true ( which is not the default ) , the international currency symbol is used .", "question_id": 5395}, {"snippet": "ordered_dict.move_to_end(key)", "intent": "Move an existing `key` to either end of an ordered dictionary .", "question_id": 1393}, {"snippet": "False", "intent": "The false value of the bool type.", "question_id": 1602}, {"snippet": "queue_listener.prepare(record)", "intent": "Prepare a `record` for handling .", "question_id": 5560}, {"snippet": "inspect.isasyncgenfunction(object)", "intent": "Return true if the `object` is an asynchronous generator function , for example :", "question_id": 4957}, {"snippet": "user_dict.data", "intent": "A real dictionary used to store the contents of the UserDict class.", "question_id": 1397}, {"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}, {"snippet": "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`, `tearDown`.", "question_id": 11477}, {"snippet": "test.support.import_fresh_module(name, blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10244}, {"snippet": "email.mime.base.MIMEBase(_maintype, _subtype, **_params)", "intent": "Module : email.mime.base `_maintype` is the Content-Type major type ( e.g . text or image ) , and `_subtype` is the Content-Type minor type ( e.g . With arguments `**_params`.", "question_id": 3313}, {"snippet": "inspect.getargspec(func)", "intent": "Get the names and default values of a Python function \u2019 s parameters . With arguments `func`.", "question_id": 5010}, {"snippet": "config_parser.read_dict(dictionary, source='<dict>')", "intent": "Load configuration from any object that provides a dict-like items ( ) method . If the used `dictionary` type preserves order , sections and their keys will be added in order . Optional argument `source` specifies a context-specific name of the dictionary passed .", "question_id": 1519}, {"snippet": "urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)", "intent": "Concrete class for urlsplit ( ) results containing bytes data . With arguments `scheme`, `netloc`, `path`, `query`, `fragment`.", "question_id": 11704}, {"snippet": "config_parser.readfp(fp, filename=None)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) . With arguments `filename`.", "question_id": 1567}, {"snippet": "str.splitlines(keepends)", "intent": "Return a list of the lines in the string , breaking at line boundaries . Line breaks are not included in the resulting list unless `keepends` is given and true .", "question_id": 9245}, {"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}, {"snippet": "ZipFile.read(name, pwd=None)", "intent": "Return the bytes of the file `name` in the archive . `pwd` is the password used for encrypted files and , if specified , it will override the default password set with setpassword ( ) .", "question_id": 12829}, {"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}, {"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}, {"snippet": "print(*objects)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4075}, {"snippet": "argparse.ArgumentParser(prog=None)", "intent": "Create a new ArgumentParser object . With arguments `prog`.", "question_id": 39}, {"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}, {"snippet": "socket.getfqdn(name)", "intent": "Return a fully qualified domain `name` for name .", "question_id": 8645}, {"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}, {"snippet": "chunk.seek(pos, whence=0)", "intent": "Set the chunk \u2019 s current position . The `whence` argument is optional and defaults to 0 ( absolute file positioning ) ; other values are 1 ( seek relative to the current position ) and 2 ( seek relative to the file \u2019 s end ) . With arguments `pos`.", "question_id": 1088}, {"snippet": "traceback.print_stack(f=None, limit=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10765}, {"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}, {"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}, {"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}, {"snippet": "_thread.error", "intent": "Raised on thread-specific errors.", "question_id": 12941}, {"snippet": "formatter.push_margin(margin)", "intent": "Increase the number of left `margin` indentations by one , associating the logical tag margin with the new indentation .", "question_id": 3830}, {"snippet": "joinable_queue.recv_bytes_into(buffer)", "intent": "Read into `buffer` a complete message of byte data sent from the other end of the connection and return the number of bytes in the message .", "question_id": 6242}, {"snippet": "html_diff.__init__(tabsize=8, charjunk=IS_CHARACTER_JUNK)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 . `linejunk` and `charjunk` are optional keyword arguments passed into ndiff ( ) ( used by HtmlDiff to generate the side by side HTML differences ) .", "question_id": 2605}, {"snippet": "ArgumentParser.format_usage()", "intent": "Return a string containing a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 107}, {"snippet": "group.addresses", "intent": "A possibly empty tuple of Address objects representing the addresses in the group.", "question_id": 3206}, {"snippet": "xmlrpc.server.SimpleXMLRPCServer(addr)", "intent": "Create a new server instance . The `addr` and requestHandler parameters are passed to the socketserver.TCPServer constructor .", "question_id": 12712}, {"snippet": "compileall.compile_dir(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . `invalidation_mode` should be a member of the py_compile.PycInvalidationMode enum and controls how the generated pycs are invalidated at runtime .", "question_id": 1418}, {"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}, {"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}, {"snippet": "deque.rotate()", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1368}, {"snippet": "gzip.GzipFile(mtime=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . The `mtime` argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing .", "question_id": 4287}, {"snippet": "importlib.machinery.ModuleSpec(name, loader, loader_state=None)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading . With arguments `loader_state`.", "question_id": 4914}, {"snippet": "locale.LC_MESSAGES", "intent": "Locale category for message display.", "question_id": 5408}, {"snippet": "timeit.timeit(stmt='pass', globals=None)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . The optional `globals` argument specifies a namespace in which to execute the code . With arguments `stmt`.", "question_id": 10485}, {"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}, {"snippet": "calendar.HTMLCalendar()", "intent": "This class can be used to generate HTML calendars .", "question_id": 956}, {"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}, {"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467}, {"snippet": "urllib.error.ContentTooShortError(msg, content)", "intent": "This exception is raised when the urlretrieve ( ) function detects that the amount of the downloaded data is less than the expected amount ( given by the Content-Length header ) . The `content` attribute stores the downloaded ( and supposedly truncated ) data . With arguments `msg`.", "question_id": 11664}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "turtle.onrelease(fun)", "intent": "Bind `fun` to mouse-button-release events on this turtle .", "question_id": 11023}, {"snippet": "tree_builder.start(tag, attrs)", "intent": "Opens a new element . `tag` is the element name . `attrs` is a dictionary containing element attributes .", "question_id": 12544}, {"snippet": "csv.DictReader(f, *args, **kwds, restkey=None, restval=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`, `restval`.", "question_id": 1700}, {"snippet": "future.result(timeout=None)", "intent": "Return the value returned by the call . If the call hasn \u2019 t yet completed then this method will wait up to `timeout` seconds .", "question_id": 1473}, {"snippet": "bz2_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 902}, {"snippet": "set.update(*others)", "intent": "Update the set , adding elements from all others . With arguments `*others`.", "question_id": 9454}, {"snippet": "cgitb.enable(context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1062}, {"snippet": "bytes()", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior .", "question_id": 3988}, {"snippet": "asyncio.get_event_loop_policy()", "intent": "Return the current process-wide policy .", "question_id": 372}, {"snippet": "difflib.restore(sequence, which)", "intent": "Return one of the two sequences that generated a delta . Given a `sequence` produced by Differ.compare ( ) or ndiff ( ) , extract lines originating from file 1 or 2 ( parameter `which` ) , stripping off line prefixes .", "question_id": 2646}, {"snippet": "random.getrandbits(k)", "intent": "Returns a Python integer with `k` random bits .", "question_id": 7889}, {"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}, {"snippet": "resource.RLIMIT_AS", "intent": "The maximum area (in bytes) of address space which may be taken by the process.", "question_id": 8086}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds)", "intent": "Run the `cmd` shell command . With arguments `**kwds`.", "question_id": 533}, {"snippet": "asyncio.wait_for(aw, timeout, loop=None)", "intent": "Wait for the `aw` awaitable to complete with a `timeout` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 606}, {"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}, {"snippet": "mime_types.read_windows_registry()", "intent": "Load MIME type information from the Windows registry .", "question_id": 5974}, {"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}, {"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}, {"snippet": "writer.new_alignment(align)", "intent": "Set the alignment style . The `align` value can be any object , but by convention is a string or None , where None indicates that the writer \u2019 s \u201c preferred \u201d alignment should be used .", "question_id": 3842}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "sqlite3.Row", "intent": "A Row instance serves as a highly optimized row_factory for Connection objects.", "question_id": 8854}, {"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}, {"snippet": "cursor.fetchall()", "intent": "Fetches all ( remaining ) rows of a query result , returning a list .", "question_id": 8847}, {"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}, {"snippet": "asyncio.DatagramTransport(BaseTransport)", "intent": "A transport for datagram ( UDP ) connections . With arguments `BaseTransport`.", "question_id": 394}, {"snippet": "platform.architecture(executable=sys.executable, bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7462}, {"snippet": "socket.ntohl(x)", "intent": "Convert 32-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8657}, {"snippet": "getpass.getuser()", "intent": "Return the \u201c login name \u201d of the user .", "question_id": 4209}, {"snippet": "event.clear()", "intent": "Reset the internal flag to false .", "question_id": 10409}, {"snippet": "urllib.request.UnknownHandler", "intent": "A catch-all class to handle unknown URLs.", "question_id": 11814}, {"snippet": "bytes(source, encoding)", "intent": "Return a new \u201c bytes \u201d object , which is an immutable sequence of integers in the range 0 < = x < 256. bytes is an immutable version of bytearray \u2013 it has the same non-mutating methods and the same indexing and slicing behavior . With arguments `source`, `encoding`.", "question_id": 3986}, {"snippet": "asyncio.start_server(client_connected_cb, host=None)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `host`.", "question_id": 474}, {"snippet": "turtle.ondrag(fun, btn=1)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `btn`.", "question_id": 11028}, {"snippet": "date.replace(year=self.year, month=self.month, day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`, `month`, `day`.", "question_id": 2236}, {"snippet": "wsgiref.handlers.read_environ()", "intent": "Transcode CGI variables from os.environ to PEP 3333 \u201c bytes in unicode \u201d strings , returning a new dictionary .", "question_id": 12270}, {"snippet": "Packer.pack_opaque(data)", "intent": "Packs a variable length opaque `data` string , similarly to pack_string ( ) .", "question_id": 12280}, {"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}, {"snippet": "Option.TYPES", "intent": "A tuple of type names; in your subclass, simply define a new tuple TYPES that builds on the standard one.", "question_id": 6649}, {"snippet": "mimetypes.types_map", "intent": "Dictionary mapping filename extensions to MIME types.", "question_id": 5954}, {"snippet": "codec_info.decode", "intent": "The stateless encoding and decoding functions.", "question_id": 1213}, {"snippet": "Document.createAttribute(name)", "intent": "Create and return an attribute node . With arguments `name`.", "question_id": 12350}, {"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}, {"snippet": "typing.List(list)", "intent": "Generic version of `list` .", "question_id": 11271}, {"snippet": "xmlparser.EntityDeclHandler(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)", "intent": "Called for all entity declarations . `is_parameter_entity` will be true if the entity is a parameter entity or false for general entities ( most applications only need to be concerned with general entities ) . For parameter and internal entities , `value` will be a string giving the declared contents of the entity ; this will be None for external entities . The `notationName` parameter will be None for parsed entities , and the name of the notation for unparsed entities . With arguments `entityName`, `base`, `systemId`, `publicId`.", "question_id": 7765}, {"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}, {"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}, {"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}, {"snippet": "os.popen(cmd, mode='r')", "intent": "Open a pipe to or from command `cmd` . The return value is an open file object connected to the pipe , which can be read or written depending on whether `mode` is ' r ' ( default ) or ' w ' .", "question_id": 7042}, {"snippet": "fractions.Fraction()", "intent": "The first version requires that `numerator` and `denominator` are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator .", "question_id": 3859}, {"snippet": "dict(mapping, **kwarg)", "intent": "Create a new dictionary . With arguments `mapping`, `**kwarg`.", "question_id": 4005}, {"snippet": "re.sub(pattern, repl, string)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` .", "question_id": 7951}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "property()", "intent": "Return a property attribute .", "question_id": 4085}, {"snippet": "json.load(fp, **kw)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5290}, {"snippet": "joinable_queue.send(obj)", "intent": "Send an object to the other end of the connection which should be read using recv ( ) . With arguments `obj`.", "question_id": 6230}, {"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}, {"snippet": "message.get_all(name)", "intent": "Return a list of all the values for the field named `name` .", "question_id": 2974}, {"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "question_id": 6327}, {"snippet": "calendar.monthrange(year, month)", "intent": "Returns weekday of first day of the `month` and number of days in month , for the specified `year` and month .", "question_id": 991}, {"snippet": "time.CLOCK_MONOTONIC", "intent": "Clock that cannot be set and represents monotonic time since some unspecified starting point.", "question_id": 10465}, {"snippet": "turtle.tracer(n=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings . If `n` is given , only each n-th regular screen update is really performed .", "question_id": 11059}, {"snippet": "dis.dis(x=None, file=None)", "intent": "Disassemble the `x` object . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2711}, {"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}, {"snippet": "base_http_request_handler.headers", "intent": "Holds an instance of the class specified by the MessageClass class variable.", "question_id": 4624}, {"snippet": "Pattern.pattern", "intent": "The pattern string from which the pattern object was compiled.", "question_id": 7994}, {"snippet": "profile.run(command)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . With arguments `command`.", "question_id": 7661}, {"snippet": "readline.append_history_file(nelements)", "intent": "Append the last `nelements` items of history to a file .", "question_id": 8026}, {"snippet": "asyncio.start_unix_server(client_connected_cb, backlog=100)", "intent": "Start a Unix socket server . With arguments `client_connected_cb`, `backlog`.", "question_id": 498}, {"snippet": "unittest.mock.Mock(**kwargs, name=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `name`.", "question_id": 11565}, {"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}, {"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}, {"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}, {"snippet": "loop.create_unix_connection(protocol_factory)", "intent": "Create a Unix connection . With arguments `protocol_factory`.", "question_id": 222}, {"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}, {"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}, {"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}, {"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}, {"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}, {"snippet": "IncrementalParser.close()", "intent": "Assume the end of the document .", "question_id": 12628}, {"snippet": "tokenize.untokenize(iterable)", "intent": "Converts tokens back into Python source code . The `iterable` must return sequences with at least two elements , the token type and the token string .", "question_id": 10702}, {"snippet": "HTTPResponse.msg", "intent": "A http.client.HTTPMessage instance containing the response headers.", "question_id": 4462}, {"snippet": "io.BufferedRandom(raw)", "intent": "A buffered interface to random access streams . The constructor creates a reader and writer for a seekable `raw` stream , given in the first argument .", "question_id": 5128}, {"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}, {"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}, {"snippet": "@test.support.cpython_only(test)", "intent": "Decorator for tests only applicable to CPython . With arguments `test`.", "question_id": 10221}, {"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}, {"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}, {"snippet": "POP3.retr(which)", "intent": "Retrieve whole message number `which` , and set its seen flag .", "question_id": 7611}, {"snippet": "xml.etree.ElementTree.register_namespace(prefix, uri)", "intent": "Registers a namespace `prefix` . `uri` is a namespace uri .", "question_id": 12450}, {"snippet": "time.asctime(t)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string of the following form : 'Sun Jun 20 23:21:05 1993 ' . If `t` is not provided , the current time as returned by localtime ( ) is used .", "question_id": 10429}, {"snippet": "user_list.data", "intent": "A real list object used to store the contents of the UserList class.", "question_id": 1400}, {"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}, {"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}, {"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}, {"snippet": "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream', _encoder=email.encoders.encode_base64, policy=compat32)", "intent": "Module : email.mime.application `_data` is a string containing the raw byte data . Optional `_subtype` specifies the MIME subtype and defaults to octet-stream . Optional `_encoder` is a callable ( i.e . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "question_id": 3333}, {"snippet": "socket_handler.send(packet)", "intent": "Send a pickled byte-string `packet` to the socket .", "question_id": 5488}, {"snippet": "epoll.modify(fd, eventmask)", "intent": "Modify a registered file descriptor . With arguments `fd`, `eventmask`.", "question_id": 8185}, {"snippet": "FileExistsError", "intent": "Raised when trying to create a file or directory which already exists.", "question_id": 3693}, {"snippet": "codecs.xmlcharrefreplace_errors(exception)", "intent": "Implements the 'xmlcharrefreplace ' error handling ( for encoding with text encodings only ) : the unencodable character is replaced by an appropriate XML character reference . With arguments `exception`.", "question_id": 1258}, {"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8417}, {"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604}, {"snippet": "Decompress.copy()", "intent": "Returns a copy of the decompression object .", "question_id": 12938}, {"snippet": "typing.Dict(dict, MutableMappingKT, VT)", "intent": "A generic version of `dict` . With arguments `MutableMappingKT`, `VT`.", "question_id": 11298}, {"snippet": "date.replace(day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2232}, {"snippet": "HTMLParser.handle_endtag(tag)", "intent": "This method is called to handle the end `tag` of an element ( e.g .", "question_id": 4357}, {"snippet": "importlib.import_module(name)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g .", "question_id": 4793}, {"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}, {"snippet": "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`, `disable_existing_loggers`.", "question_id": 5415}, {"snippet": "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' .", "question_id": 12660}, {"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}, {"snippet": "inspect.getmembers(object)", "intent": "Return all the members of an `object` in a list of ( name , value ) pairs sorted by name .", "question_id": 4946}, {"snippet": "logging.setLoggerClass(klass)", "intent": "Tells the logging system to use the class `klass` when instantiating a logger .", "question_id": 5651}, {"snippet": "i_pv4_network.is_link_local", "intent": "These attributes are true for the network as a whole if they are true for both the network address and the broadcast address.", "question_id": 5195}, {"snippet": "ipaddress.v4_int_to_packed(address)", "intent": "Represent an `address` as 4 packed bytes in network ( big-endian ) order .", "question_id": 5232}, {"snippet": "operator.iconcat(a, b)", "intent": "`a` = iconcat ( a , `b` ) is equivalent to a += b for a and b sequences .", "question_id": 6592}, {"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}, {"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}, {"snippet": "connection.enable_load_extension(enabled)", "intent": "This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries . With arguments `enabled`.", "question_id": 8823}, {"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}, {"snippet": "difflib.context_diff(a, b, tofile='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2630}, {"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}, {"snippet": "time.CLOCK_UPTIME", "intent": "Time whose absolute value is the time the system has been running and not suspended, providing accurate uptime measurement, both absolute and interval.", "question_id": 10470}, {"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}, {"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}, {"snippet": "turtle.shapetransform(t12=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 .", "question_id": 11010}, {"snippet": "test.support.SMALLEST", "intent": "Object that is less than anything (except itself).", "question_id": 10137}, {"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}, {"snippet": "patch.dict(in_dict, **kwargs, values=())", "intent": "Patch a dictionary , or dictionary like object , and restore the dictionary to its original state after the test . `in_dict` can be a dictionary or a mapping like container . `values` can be a dictionary of values to set in the dictionary . With arguments `**kwargs`.", "question_id": 11629}, {"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}, {"snippet": "turtle.filling()", "intent": "Return fillstate ( True if filling , False else ) .", "question_id": 10964}, {"snippet": "IMAP4.noop()", "intent": "Send NOOP to server .", "question_id": 4718}, {"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}, {"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}, {"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}, {"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}, {"snippet": "io.UnsupportedOperation", "intent": "An exception inheriting OSError and ValueError that is raised when an unsupported operation is called on a stream.", "question_id": 5062}, {"snippet": "Match.lastindex", "intent": "The integer index of the last matched capturing group, or None if no group was matched at all.", "question_id": 8011}, {"snippet": "Node.toxml()", "intent": "Return a string or byte string containing the XML represented by the DOM node .", "question_id": 12411}, {"snippet": "config_parser.items(section, raw=False)", "intent": "When `section` is not given , return a list of section_name , section_proxy pairs , including DEFAULTSECT . With arguments `raw`.", "question_id": 1557}, {"snippet": "maildir.flush()", "intent": "All changes to Maildir mailboxes are immediately applied , so this method does nothing .", "question_id": 5763}, {"snippet": "str.startswith(prefix, start, end)", "intent": "Return True if string starts with the `prefix` , otherwise return False . With optional `start` , test string beginning at that position . With optional `end` , stop comparing string at that position .", "question_id": 9247}, {"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391}, {"snippet": "i_pv4_address.is_unspecified", "intent": "True if the address is unspecified.", "question_id": 5183}, {"snippet": "errno.ENODEV", "intent": "No such device", "question_id": 3524}, {"snippet": "plistlib.dumps(value, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `skipkeys`.", "question_id": 7574}, {"snippet": "widget.get_children(item=None)", "intent": "Returns the list of children belonging to `item` .", "question_id": 10623}, {"snippet": "abstract_event_loop_policy.set_event_loop(loop)", "intent": "Set the event `loop` for the current context to loop .", "question_id": 376}, {"snippet": "HTTPResponse.getheaders()", "intent": "Return a list of ( header , value ) tuples .", "question_id": 4460}, {"snippet": "test.support.run_doctest(module, verbosity=None)", "intent": "Run doctest.testmod ( ) on the given `module` . If `verbosity` is None , doctest.testmod ( ) is run with verbosity set to verbose .", "question_id": 10159}, {"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}, {"snippet": "re.S", "intent": "Make the '.'", "question_id": 7933}, {"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932}, {"snippet": "io_base.readline()", "intent": "Read and return one line from the stream .", "question_id": 5070}, {"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}, {"snippet": "_thread.start_new_thread(function, args, kwargs)", "intent": "Start a new thread and return its identifier . The thread executes the `function` function with the argument list `args` ( which must be a tuple ) . The optional `kwargs` argument specifies a dictionary of keyword arguments .", "question_id": 12943}, {"snippet": "SSLContext.wrap_socket(sock, server_side=False, suppress_ragged_eofs=True)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket . The parameter `suppress_ragged_eofs` specifies how the SSLSocket.recv ( ) method should signal unexpected EOF from the other end of the connection .", "question_id": 9029}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "posix.environ", "intent": "A dictionary representing the string environment at the time the interpreter was started.", "question_id": 7622}, {"snippet": "bytearray.replace(old, new, count)", "intent": "Return a copy of the sequence with all occurrences of subsequence `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9309}, {"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}, {"snippet": "email.headerregistry.ParameterizedMIMEHeader", "intent": "MIME headers all start with the prefix \u2018Content-\u2018.", "question_id": 3167}, {"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}, {"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12785}, {"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}, {"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}, {"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}, {"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}, {"snippet": "datetime.resolution", "intent": "The smallest possible difference between non-equal datetime objects, timedelta(microseconds=1).", "question_id": 2271}, {"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}, {"snippet": "Option.callback_args", "intent": "Additional positional and keyword arguments to pass to callback after the four standard callback arguments.", "question_id": 6634}, {"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}, {"snippet": "array.typecode", "intent": "The typecode character used to create the array.", "question_id": 118}, {"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}, {"snippet": "shake.digest(length)", "intent": "Return the digest of the data passed to the update ( ) method so far . This is a bytes object of size `length` which may contain bytes in the whole range from 0 to 255 .", "question_id": 4308}, {"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}, {"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}, {"snippet": "SSLContext.set_ecdh_curve(curve_name)", "intent": "Set the curve name for Elliptic Curve-based Diffie-Hellman ( ECDH ) key exchange . The `curve_name` parameter should be a string describing a well-known elliptic curve , for example prime256v1 for a widely supported curve .", "question_id": 9021}, {"snippet": "typing.Deque(deque, MutableSequenceT)", "intent": "A generic version of collections.deque . With arguments `deque`, `MutableSequenceT`.", "question_id": 11268}, {"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}, {"snippet": "str(object=b'')", "intent": "Return a str version of `object` .", "question_id": 4116}, {"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}, {"snippet": "TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING)", "intent": "Create a string buffer from a TarInfo object . With arguments `format`, `encoding`.", "question_id": 9977}, {"snippet": "os.fwalk(onerror=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `onerror`.", "question_id": 6986}, {"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}, {"snippet": "header.encode(\\t', maxlinelen=None, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `maxlinelen` , if given , overrides the instance \u2019 s value for the maximum line length . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3136}, {"snippet": "socket.gethostbyname(hostname)", "intent": "Translate a host name to IPv4 address format . With arguments `hostname`.", "question_id": 8647}, {"snippet": "socket.HCI_TIME_STAMP", "intent": "For use with BTPROTO_HCI.", "question_id": 8611}, {"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'EmailMessage'>`.", "question_id": 3061}, {"snippet": "threading.Timer(interval, function)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10412}, {"snippet": "pprint.PrettyPrinter(stream=None)", "intent": "Construct a PrettyPrinter instance . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol \u2019 s write ( ) method .", "question_id": 7627}, {"snippet": "curses.typeahead(fd)", "intent": "Specify that the file descriptor `fd` be used for typeahead checking .", "question_id": 1991}, {"snippet": "asyncio.Protocol(BaseProtocol)", "intent": "The base class for implementing streaming protocols ( TCP , Unix sockets , etc ) . With arguments `BaseProtocol`.", "question_id": 427}, {"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}, {"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}, {"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}, {"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}, {"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}, {"snippet": "grp.getgrnam(name)", "intent": "Return the group database entry for the given group `name` .", "question_id": 4270}, {"snippet": "smtplib.SMTP_SSL(host='', port=0)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . If `host` is not specified , the local host is used . If `port` is zero , the standard SMTP-over-SSL port ( 465 ) is used .", "question_id": 8486}, {"snippet": "test_loader.loadTestsFromNames(names, module=None)", "intent": "Similar to loadTestsFromName ( ) , but takes a sequence of `names` rather than a single name . With arguments `module`.", "question_id": 11497}, {"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}, {"snippet": "text_io_base.errors", "intent": "The error setting of the decoder or encoder.", "question_id": 5134}, {"snippet": "kqueue.control(changelist, max_events)", "intent": "Low level interface to kevent With arguments `changelist`, `max_events`.", "question_id": 8202}, {"snippet": "zipimporter.load_module(fullname)", "intent": "Load the module specified by `fullname` .", "question_id": 12889}, {"snippet": "queue_listener.debug(msg, *args, **kwargs)", "intent": "Logs a message with level DEBUG on this logger . The `msg` is the message format string , and the args are the arguments which are merged into msg using the string formatting operator . With arguments `*args`, `**kwargs`.", "question_id": 5570}, {"snippet": "bisect.insort(a, x)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x .", "question_id": 872}, {"snippet": "auto.object", "intent": "The object the codec was attempting to encode or decode.", "question_id": 3676}, {"snippet": "auto.end", "intent": "The index after the last invalid data in object.", "question_id": 3678}, {"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}, {"snippet": "urllib.request.URLopener(**x509)", "intent": "Base class for opening and reading URLs . With arguments `**x509`.", "question_id": 11890}, {"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}, {"snippet": "shutil.copymode(src, dst)", "intent": "Copy the permission bits from `src` to `dst` .", "question_id": 8314}, {"snippet": "select.epoll(sizehint=-1, flags=0)", "intent": "( Only supported on Linux 2.5.44 and newer . ) `sizehint` informs epoll about the expected number of events to be registered . `flags` is deprecated and completely ignored .", "question_id": 8153}, {"snippet": "Telnet.write(buffer)", "intent": "Write a byte string to the socket , doubling any IAC characters . With arguments `buffer`.", "question_id": 10027}, {"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}, {"snippet": "test_case.assertIsInstance(obj, cls)", "intent": "Test that `obj` is ( or is not ) an instance of `cls` ( which can be a class or a tuple of classes , as supported by isinstance ( ) ) .", "question_id": 11395}, {"snippet": "Codec.encode(input)", "intent": "Encodes the object `input` and returns a tuple ( output object , length consumed ) .", "question_id": 1262}, {"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}, {"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}, {"snippet": "i_pv4_network.exploded", "intent": "A string representation of the network, with the mask in prefix notation.", "question_id": 5200}, {"snippet": "xml.dom.DomstringSizeErr", "intent": "Raised when a specified range of text does not fit into a string.", "question_id": 12381}, {"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}, {"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}, {"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}, {"snippet": "oss_audio_device.channels(nchannels)", "intent": "Set the number of output channels to `nchannels` .", "question_id": 7186}, {"snippet": "email.contentmanager.raw_data_manager", "intent": "This content manager provides only a minimum interface beyond that provided by Message itself:  it deals only with text, raw byte strings, and Message objects.", "question_id": 3036}, {"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042}, {"snippet": "logging.handlers.HTTPHandler(host, url, secure=False, context=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `secure` is true , a HTTPS connection will be used . The `context` parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection . With arguments `url`.", "question_id": 5550}, {"snippet": "math.asinh(x)", "intent": "Return the inverse hyperbolic sine of `x` .", "question_id": 5925}, {"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}, {"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}, {"snippet": "dircmp.right_only", "intent": "Files and subdirectories only in b.", "question_id": 3773}, {"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}, {"snippet": "html_calendar.formatmonth(theyear, themonth, withyear=True)", "intent": "Return a month \u2019 s calendar as an HTML table . If `withyear` is true the year will be included in the header , otherwise just the month name will be used . With arguments `theyear`, `themonth`.", "question_id": 959}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "types.ModuleType(name, doc=None)", "intent": "The type of modules . Constructor takes the `name` of the module to be created and optionally its docstring . With arguments `doc`.", "question_id": 11197}, {"snippet": "re.sub(pattern, repl, string, count=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer .", "question_id": 7952}, {"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}, {"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}, {"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}, {"snippet": "csv.excel_tab", "intent": "The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.", "question_id": 1712}, {"snippet": "@test.support.run_with_locale(catstr, *locales)", "intent": "A decorator for running a function in a different locale , correctly resetting it after it has finished . `catstr` is the locale category as a string ( for example `` LC_ALL '' ) . With arguments `*locales`.", "question_id": 10209}, {"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}, {"snippet": "buffering_handler.emit(record)", "intent": "Appends the `record` to the buffer .", "question_id": 5526}, {"snippet": "cgi.parse_qsl(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1043}, {"snippet": "decimal.logical_and(other)", "intent": "logical_and ( ) is a logical operation which takes two logical operands ( see Logical operands ) . With arguments `other`.", "question_id": 2435}, {"snippet": "IMAP4.select(readonly=False)", "intent": "Select a `mailbox` . If the `readonly` flag is set , modifications to the mailbox are not allowed .", "question_id": 4731}, {"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}, {"snippet": "errno.EALREADY", "intent": "Operation already in progress", "question_id": 3619}, {"snippet": "base64.a85decode(b, foldspaces=False, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 740}, {"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}, {"snippet": "locale.atof(string)", "intent": "Converts a `string` to a floating point number , following the LC_NUMERIC settings .", "question_id": 5402}, {"snippet": "multiprocessing.Queue(maxsize)", "intent": "Returns a process shared queue implemented using a pipe and a few locks/semaphores . With arguments `maxsize`.", "question_id": 6195}, {"snippet": "itertools.count(start=0, step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5249}, {"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}, {"snippet": "profile.run(command, filename=None, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`, `filename`.", "question_id": 7664}, {"snippet": "exit_stack.push(exit)", "intent": "Adds a context manager \u2019 s __exit__ ( ) method to the callback stack . With arguments `exit`.", "question_id": 1628}, {"snippet": "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`, `encoding`.", "question_id": 5451}, {"snippet": "stats.strip_dirs()", "intent": "This method for the Stats class removes all leading path information from file names .", "question_id": 7690}, {"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}, {"snippet": "errno.ENOPKG", "intent": "Package not installed", "question_id": 3570}, {"snippet": "msilib.add_tables(database, module)", "intent": "Add all table content from `module` to `database` .", "question_id": 6065}, {"snippet": "test_case.setUpClass()", "intent": "A class method called before tests in an individual class are run .", "question_id": 11367}, {"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}, {"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}, {"snippet": "deque.extend(iterable)", "intent": "Extend the right side of the deque by appending elements from the `iterable` argument .", "question_id": 1358}, {"snippet": "getattr(object, name)", "intent": "Return the value of the named attribute of `object` . `name` must be a string .", "question_id": 4026}, {"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}, {"snippet": "asyncio.BufferedProtocol(BaseProtocol)", "intent": "A base class for implementing streaming protocols with manual control of the receive buffer . With arguments `BaseProtocol`.", "question_id": 428}, {"snippet": "window.deleteln()", "intent": "Delete the line under the cursor .", "question_id": 2041}, {"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}, {"snippet": "PurePath.name", "intent": "A string representing the final path component, excluding the drive and root, if any:", "question_id": 7249}, {"snippet": "babyl.get_file(key)", "intent": "In Babyl mailboxes , the headers of a message are not stored contiguously with the body of the message . With arguments `key`.", "question_id": 5799}, {"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261}, {"snippet": "dict(iterable, **kwarg)", "intent": "Create a new dictionary . With arguments `iterable`, `**kwarg`.", "question_id": 4006}, {"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}, {"snippet": "cmath.polar(x)", "intent": "Return the representation of `x` in polar coordinates .", "question_id": 1094}, {"snippet": "stat.S_ISBLK(mode)", "intent": "Return non-zero if the `mode` is from a block special device file .", "question_id": 9063}, {"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}, {"snippet": "writer.new_styles(styles)", "intent": "Set additional `styles` .", "question_id": 3846}, {"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}, {"snippet": "timeit.timeit(setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions .", "question_id": 10478}, {"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}, {"snippet": "readline.add_history(line)", "intent": "Append `line` to the history buffer , as if it was the last line typed .", "question_id": 8034}, {"snippet": "style.theme_names()", "intent": "Returns a list of all known themes .", "question_id": 10691}, {"snippet": "dispatcher.create_socket(family=socket.AF_INET)", "intent": "This is identical to the creation of a normal socket , and will use the same options for creation . With arguments `family`.", "question_id": 664}, {"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}, {"snippet": "dispatcher.listen(backlog)", "intent": "Listen for connections made to the socket . The `backlog` argument specifies the maximum number of queued connections and should be at least 1 ; the maximum value is system-dependent ( usually 5 ) .", "question_id": 670}, {"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055}, {"snippet": "FileCookieJar.save(filename=None)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies .", "question_id": 4499}, {"snippet": "Popen.wait(timeout=None)", "intent": "Wait for child process to terminate . If the process does not terminate after `timeout` seconds , raise a TimeoutExpired exception .", "question_id": 9611}, {"snippet": "inspect.cleandoc(doc)", "intent": "Clean up indentation from docstrings that are indented to line up with blocks of code . With arguments `doc`.", "question_id": 4976}, {"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}, {"snippet": "mmap.rfind(sub, start, end)", "intent": "Returns the highest index in the object where the subsequence `sub` is found , such that sub is contained in the range [ `start` , `end` ] .", "question_id": 6014}, {"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}, {"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}, {"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}, {"snippet": "shlex.shlex(posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8276}, {"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}, {"snippet": "DatagramTransport.sendto(data, addr=None)", "intent": "Send the `data` bytes to the remote peer given by `addr` ( a transport-dependent target address ) .", "question_id": 417}, {"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}, {"snippet": "trace.Trace(timing=False)", "intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "question_id": 10715}, {"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}, {"snippet": "message.get(name)", "intent": "Return the value of the named header field . With arguments `name`.", "question_id": 2972}, {"snippet": "socket.recv_into(buffer)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8716}, {"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}, {"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}, {"snippet": "dispatcher.send(data)", "intent": "Send `data` to the remote end-point of the socket .", "question_id": 668}, {"snippet": "selectors.BaseSelector", "intent": "A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "question_id": 8214}, {"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}, {"snippet": "IMAP4.recent()", "intent": "Prompt server for an update .", "question_id": 4724}, {"snippet": "loop.sock_recv(sock, nbytes)", "intent": "Receive up to `nbytes` from `sock` .", "question_id": 276}, {"snippet": "tree_builder.data(data)", "intent": "Adds text to the current element . `data` is a string .", "question_id": 12542}, {"snippet": "zipimporter.get_filename(fullname)", "intent": "Return the value __file__ would be set to if the specified module was imported . With arguments `fullname`.", "question_id": 12886}, {"snippet": "shlex.shlex(posix=False)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . The `posix` argument defines the operational mode : when posix is not true ( default ) , the shlex instance will operate in compatibility mode .", "question_id": 8276}, {"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}, {"snippet": "instance.__class__", "intent": "The class to which a class instance belongs.", "question_id": 9500}, {"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}, {"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}, {"snippet": "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None)", "intent": "Module : email.mime.audio `_audiodata` is a string containing the raw audio data . Otherwise you can explicitly specify the audio subtype via the `_subtype` argument . With arguments `**_params`.", "question_id": 3335}, {"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}, {"snippet": "email.utils.formatdate(timeval=None, localtime=False, usegmt=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `timeval` if given is a floating point time value as accepted by time.gmtime ( ) and time.localtime ( ) , otherwise the current time is used . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account . Optional `usegmt` is a flag that when True , outputs a date string with the timezone as an ascii string GMT , rather than a numeric -0000 .", "question_id": 3475}, {"snippet": "urllib.request.pathname2url(path)", "intent": "Convert the pathname `path` from the local syntax for a path to the form used in the path component of a URL .", "question_id": 11765}, {"snippet": "locale.NOEXPR", "intent": "Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question.", "question_id": 5366}, {"snippet": "ssl.RAND_pseudo_bytes(num)", "intent": "Return ( bytes , is_cryptographic ) : bytes are `num` pseudo-random bytes , is_cryptographic is True if the bytes generated are cryptographically strong .", "question_id": 8886}, {"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}, {"snippet": "formatter.push_alignment(align)", "intent": "Push a new alignment setting onto the alignment stack . If the alignment value is changed from the previous setting , the writer \u2019 s new_alignment ( ) method is called with the `align` value .", "question_id": 3826}, {"snippet": "unittest.mock.Mock(**kwargs, unsafe=False)", "intent": "Create a new Mock object . With arguments `**kwargs`, `unsafe`.", "question_id": 11567}, {"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}, {"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}, {"snippet": "bisect.insort_right(a, x, lo=0)", "intent": "Similar to insort_left ( ) , but inserting `x` in `a` after any existing entries of x . With arguments `lo`.", "question_id": 869}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "time.fold", "intent": "In [0, 1].", "question_id": 2332}, {"snippet": "loop.sock_sendfile(sock, file)", "intent": "Send a `file` using high-performance os.sendfile if possible . `sock` must be a non-blocking socket.SOCK_STREAM socket .", "question_id": 281}, {"snippet": "dispatcher.connect(address)", "intent": "As with the normal socket object , `address` is a tuple with the first element the host to connect to , and the second the port number .", "question_id": 667}, {"snippet": "turtle.setpos(x, y=None)", "intent": "If `y` is None , `x` must be a pair of coordinates or a Vec2D ( e.g .", "question_id": 10915}, {"snippet": "ContentHandler.setDocumentLocator(locator)", "intent": "Called by the parser to give the application a `locator` for locating the origin of document events .", "question_id": 12570}, {"snippet": "os.execv(path, args)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7013}, {"snippet": "bdb.Bdb()", "intent": "The Bdb class acts as a generic Python debugger base class .", "question_id": 768}, {"snippet": "errno.EINVAL", "intent": "Invalid argument", "question_id": 3527}, {"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}, {"snippet": "ctypes.string_at(address)", "intent": "This function returns the C string starting at memory `address` address as a bytes object .", "question_id": 1834}, {"snippet": "lzma.compress(data, check=-1, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5712}, {"snippet": "sys.__displayhook__", "intent": "These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "question_id": 9783}, {"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}, {"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}, {"snippet": "Telnet.open(host, port=0)", "intent": "Connect to a `host` . The optional second argument is the `port` number , which defaults to the standard Telnet port ( 23 ) .", "question_id": 10021}, {"snippet": "calendar.calendar(year, w=2)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`.", "question_id": 1012}, {"snippet": "str(encoding='utf-8', errors='strict')", "intent": "Return a string version of `object` . Otherwise , the behavior of str ( ) depends on whether `encoding` or `errors` is given , as follows .", "question_id": 9176}, {"snippet": "Morsel.setdefault(key)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) .", "question_id": 4611}, {"snippet": "list.sort(key=None, reverse=False)", "intent": "This method sorts the list in place , using only < comparisons between items . `key` specifies a function of one argument that is used to extract a comparison key from each list element ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 9159}, {"snippet": "winsound.SND_LOOP", "intent": "Play the sound repeatedly.", "question_id": 12198}, {"snippet": "decimal.remainder_near(other, context=None)", "intent": "Return the remainder from dividing self by `other` . With arguments `context`.", "question_id": 2467}, {"snippet": "os.umask(mask)", "intent": "Set the current numeric umask and return the previous umask . With arguments `mask`.", "question_id": 6709}, {"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}, {"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}, {"snippet": "statistic_diff.size", "intent": "Total size of memory blocks in bytes in the new snapshot (int): 0 if the memory blocks have been released in the new snapshot.", "question_id": 10887}, {"snippet": "deque.rotate(n=1)", "intent": "Rotate the deque `n` steps to the right .", "question_id": 1369}, {"snippet": "curses.has_key(ch)", "intent": "Take a key value `ch` , and return True if the current terminal type recognizes a key with that value .", "question_id": 1943}, {"snippet": "json.dumps(obj, **kw, cls=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `cls`.", "question_id": 5285}, {"snippet": "dis.stack_effect(opcode)", "intent": "Compute the stack effect of `opcode` with argument `oparg` .", "question_id": 2732}, {"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}, {"snippet": "subprocess.CalledProcessError", "intent": "Subclass of SubprocessError, raised when a process run by check_call() or check_output() returns a non-zero exit status.", "question_id": 9593}, {"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}, {"snippet": "traceback.print_stack()", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive .", "question_id": 10761}, {"snippet": "ast._fields", "intent": "Each concrete class has an attribute _fields which gives the names of all child nodes.", "question_id": 142}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}, {"snippet": "HMAC.block_size", "intent": "The internal block size of the hash algorithm in bytes.", "question_id": 4339}, {"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}, {"snippet": "Element.getAttributeNode(attrname)", "intent": "Return the Attr node for the attribute named by `attrname` .", "question_id": 12360}, {"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}, {"snippet": "Telnet.read_sb_data()", "intent": "Return the data collected between a SB/SE pair ( suboption begin/end ) .", "question_id": 10017}, {"snippet": "tokenize.open(filename)", "intent": "Open a file in read only mode using the encoding detected by detect_encoding ( ) . With arguments `filename`.", "question_id": 10704}, {"snippet": "array.fromfile(f, n)", "intent": "Read `n` items ( as machine values ) from the file object `f` and append them to the end of the array .", "question_id": 126}, {"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}, {"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}, {"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}, {"snippet": "config_parser.read_file(f, source=None)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) . Optional argument `source` specifies the name of the file being read .", "question_id": 1515}, {"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}, {"snippet": "frozenset()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9434}, {"snippet": "resource.prlimit(pid, resource, limits)", "intent": "Combines setrlimit ( ) and getrlimit ( ) in one function and supports to get and set the resources `limits` of an arbitrary process . If `pid` is 0 , then the call applies to the current process . `resource` and limits have the same meaning as in setrlimit ( ) , except that limits is optional .", "question_id": 8073}, {"snippet": "bdb.reset()", "intent": "Set the botframe , stopframe , returnframe and quitting attributes with values ready to start debugging .", "question_id": 771}, {"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}, {"snippet": "Path.resolve(strict=False)", "intent": "Make the path absolute , resolving any symlinks . If the path doesn \u2019 t exist and `strict` is True , FileNotFoundError is raised .", "question_id": 7311}, {"snippet": "_thread.error", "intent": "Raised on thread-specific errors.", "question_id": 12941}, {"snippet": "NNTP.description(group)", "intent": "Get a description for a single `group` group .", "question_id": 6470}, {"snippet": "InteractiveConsole.raw_input(prompt=\"\")", "intent": "Write a `prompt` and read a line .", "question_id": 1191}, {"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}, {"snippet": "Element.getElementsByTagName(tagName)", "intent": "Same as equivalent method in the Document class . With arguments `tagName`.", "question_id": 12355}, {"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}, {"snippet": "urllib.parse.quote(string, safe='/', encoding=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11709}, {"snippet": "lazy_loader.factory(loader)", "intent": "A static method which returns a callable that creates a lazy `loader` .", "question_id": 4944}, {"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}, {"snippet": "secrets.token_urlsafe()", "intent": "Return a random URL-safe text string , containing `nbytes` random bytes .", "question_id": 8143}, {"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}, {"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}, {"snippet": "bytes(source, encoding)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "question_id": 9258}, {"snippet": "curses.use_env(flag)", "intent": "If used , this function should be called before initscr ( ) or newterm are called . When `flag` is False , the values of lines and columns specified in the terminfo database will be used , even if environment variables LINES and COLUMNS ( used by default ) are set , or if curses is running in a window ( in which case default behavior would be to use the window size if LINES and COLUMNS are not set ) .", "question_id": 1997}, {"snippet": "formatter.convert_field(value, conversion)", "intent": "Converts the `value` ( returned by get_field ( ) ) given a `conversion` type ( as in the tuple returned by the parse ( ) method ) .", "question_id": 9524}, {"snippet": "resource.RLIMIT_SWAP", "intent": "The maximum size (in bytes) of the swap space that may be reserved or used by all of this user id\u2019s processes.", "question_id": 8093}, {"snippet": "fancy_ur_lopener.prompt_user_passwd(host, realm)", "intent": "Return information needed to authenticate the user at the given `host` in the specified security `realm` .", "question_id": 11906}, {"snippet": "pkgutil.extend_path(path, name)", "intent": "Extend the search `path` for the modules which comprise a package . It also looks for *.pkg files beginning where * matches the `name` argument .", "question_id": 7436}, {"snippet": "random.betavariate(alpha, beta)", "intent": "Beta distribution . Conditions on the parameters are `alpha` > 0 and `beta` > 0 .", "question_id": 7909}, {"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}, {"snippet": "directory.add_file(file, src=None, language=None)", "intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component . If the `src` file is specified , it is interpreted relative to the current directory . Optionally , a `version` and a `language` can be specified for the entry in the File table .", "question_id": 6108}, {"snippet": "maildir_message.set_flags(flags)", "intent": "Set the `flags` specified by flags and unset all others .", "question_id": 5816}, {"snippet": "mailbox.NoSuchMailboxError", "intent": "Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.", "question_id": 5857}, {"snippet": "FTP.rename(fromname, toname)", "intent": "Rename file `fromname` on the server to `toname` .", "question_id": 3959}, {"snippet": "os.path.commonprefix(list)", "intent": "Return the longest path prefix ( taken character-by-character ) that is a prefix of all paths in `list` .", "question_id": 7145}, {"snippet": "curses.init_pair(pair_number, fg, bg)", "intent": "Change the definition of a color-pair . The value of `pair_number` must be between 1 and COLOR_PAIRS - 1 ( the 0 color pair is wired to white on black and can not be changed ) . The value of `fg` and `bg` arguments must be between 0 and COLORS .", "question_id": 1946}, {"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}, {"snippet": "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12225}, {"snippet": "TarFile.list(verbose=True)", "intent": "Print a table of contents to sys.stdout . If `verbose` is False , only the names of the `members` are printed .", "question_id": 9928}, {"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}, {"snippet": "unittest.mock.patch(target, **kwargs, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11611}, {"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}, {"snippet": "Wave_write.setsampwidth(n)", "intent": "Set the sample width to `n` bytes .", "question_id": 12066}, {"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6028}, {"snippet": "i_pv4_interface.network", "intent": "The network (IPv4Network) this interface belongs to.", "question_id": 5226}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}, {"snippet": "list(iterable)", "intent": "Lists may be constructed in several ways : The constructor builds a list whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9154}, {"snippet": "parser.parsestr(text, headersonly=False)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) . Optional `headersonly` is as with the parse ( ) method .", "question_id": 3391}, {"snippet": "mailbox.FormatError", "intent": "Raised when the data in a file cannot be parsed, such as when an MH instance attempts to read a corrupted .mh_sequences file.", "question_id": 5860}, {"snippet": "importlib.find_loader(name, path=None)", "intent": "Find the loader for a module , optionally within the specified `path` . If the module is in sys.modules , then sys.modules [ `name` ] .__loader__ is returned ( unless the loader would be None or is not set , in which case ValueError is raised ) .", "question_id": 4796}, {"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}, {"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}, {"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}, {"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}, {"snippet": "OptionParser.set_usage(usage)", "intent": "Set the `usage` string according to the rules described above for the usage constructor keyword argument .", "question_id": 6643}, {"snippet": "gettext.bind_textdomain_codeset(domain)", "intent": "Bind the `domain` to `codeset` , changing the encoding of byte strings returned by the lgettext ( ) , ldgettext ( ) , lngettext ( ) and ldngettext ( ) functions .", "question_id": 4212}, {"snippet": "ipaddress.collapse_addresses(addresses)", "intent": "Return an iterator of the collapsed IPv4Network or IPv6Network objects . `addresses` is an iterator of IPv4Network or IPv6Network objects .", "question_id": 5235}, {"snippet": "json.dumps(obj, **kw)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`.", "question_id": 5280}, {"snippet": "email.parser.Parser(_class=None)", "intent": "This class is parallel to BytesParser , but handles string input . With arguments `_class`.", "question_id": 3385}, {"snippet": "errno.EMFILE", "intent": "Too many open files", "question_id": 3529}, {"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}, {"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}, {"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}, {"snippet": "socketserver.ForkingTCPServer", "intent": "These classes are pre-defined using the mix-in classes.", "question_id": 8755}, {"snippet": "concurrent.futures.ThreadPoolExecutor(max_workers=None, initargs=())", "intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously . `initializer` is an optional callable that is called at the start of each worker thread ; `initargs` is a tuple of arguments passed to the initializer .", "question_id": 1454}, {"snippet": "turtle.pensize(width=None)", "intent": "Set the line thickness to `width` or return it .", "question_id": 10955}, {"snippet": "DatagramProtocol.datagram_received(data, addr)", "intent": "Called when a datagram is received . `data` is a bytes object containing the incoming data . `addr` is the address of the peer sending the data ; the exact format depends on the transport .", "question_id": 440}, {"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}, {"snippet": "base_manager.start(initializer)", "intent": "Start a subprocess to start the manager . If `initializer` is not None then the subprocess will call initializer ( *initargs ) when it starts .", "question_id": 6283}, {"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}, {"snippet": "delattr(object, name)", "intent": "This is a relative of setattr ( ) . The arguments are an `object` and a string . The string must be the `name` of one of the object \u2019 s attributes .", "question_id": 4003}, {"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}, {"snippet": "i_pv4_network.network_address", "intent": "The network address for the network.", "question_id": 5196}, {"snippet": "IMAP4.response(code)", "intent": "Return data for response `code` if received , or None .", "question_id": 4726}, {"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}, {"snippet": "logging.config.fileConfig(fname, disable_existing_loggers=True)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `disable_existing_loggers`.", "question_id": 5414}, {"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}, {"snippet": "binhex.binhex(input, output)", "intent": "Convert a binary file with filename `input` to binhex file `output` .", "question_id": 849}, {"snippet": "mailbox.__iter__()", "intent": "Return an iterator over representations of all messages if called as itervalues ( ) or __iter__ ( ) or return a list of such representations if called as values ( ) .", "question_id": 5732}, {"snippet": "text_calendar.pryear(theyear, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `m`.", "question_id": 950}, {"snippet": "message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3004}, {"snippet": "errno.ELIBBAD", "intent": "Accessing a corrupted shared library", "question_id": 3585}, {"snippet": "functools.reduce(function, iterable)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . With arguments `iterable`.", "question_id": 4154}, {"snippet": "HTTPConnection.request(method, url, headers={})", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . If `body` is specified , the specified data is sent after the `headers` are finished .", "question_id": 4429}, {"snippet": "tkinter.tix.PanedWindow", "intent": "The PanedWindow widget allows the user to interactively manipulate the sizes of several panes.", "question_id": 10574}, {"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}, {"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}, {"snippet": "base_http_request_handler.request_version", "intent": "Contains the version string from the request.", "question_id": 4623}, {"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}, {"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}, {"snippet": "epoll.fromfd(fd)", "intent": "Create an epoll object from a given file descriptor . With arguments `fd`.", "question_id": 8182}, {"snippet": "cgi.test()", "intent": "Robust test CGI script , usable as main program .", "question_id": 1052}, {"snippet": "Path.read_text(errors=None)", "intent": "Return the decoded contents of the pointed-to file as a string : With arguments `errors`.", "question_id": 7306}, {"snippet": "os.setxattr(path, attribute, value)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` .", "question_id": 7001}, {"snippet": "smtp_server.channel_class", "intent": "Override this in subclasses to use a custom SMTPChannel for managing SMTP clients.", "question_id": 8423}, {"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6037}, {"snippet": "widget.identify_region(x, y)", "intent": "Returns one of : With arguments `x`, `y`.", "question_id": 10637}, {"snippet": "test.support.rmtree(path)", "intent": "Call shutil.rmtree ( ) on `path` or call os.lstat ( ) and os.rmdir ( ) to remove a path and its contents .", "question_id": 10142}, {"snippet": "subprocess.check_call(args, stdin=None)", "intent": "Run command with arguments . With arguments `args`, `stdin`.", "question_id": 9670}, {"snippet": "widget.set(item, column=None, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10661}, {"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}, {"snippet": "test.support.check_free_after_iterating(test, iter, cls)", "intent": "Assert that `iter` is deallocated after iterating . With arguments `test`, `cls`.", "question_id": 10271}, {"snippet": "asyncio.Condition()", "intent": "A Condition object .", "question_id": 569}, {"snippet": "Wave_read.close()", "intent": "Close the stream if it was opened by wave , and make the instance unusable .", "question_id": 12050}, {"snippet": "turtle.getscreen()", "intent": "Return the TurtleScreen object the turtle is drawing on .", "question_id": 11037}, {"snippet": "threading.enumerate()", "intent": "Return a list of all Thread objects currently alive .", "question_id": 10344}, {"snippet": "tkinter.tix.ComboBox", "intent": "The ComboBox widget is similar to the combo box control in MS Windows.", "question_id": 10554}, {"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}, {"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}, {"snippet": "bytes.isalpha()", "intent": "Return true if all bytes in the sequence are alphabetic ASCII characters and the sequence is not empty , false otherwise .", "question_id": 9383}, {"snippet": "io.TextIOWrapper(buffer, errors=None)", "intent": "A buffered text stream over a BufferedIOBase binary stream . If `write_through` is True , calls to write ( ) are guaranteed not to be buffered : any data written on the TextIOWrapper object is immediately handled to its underlying binary `buffer` . `errors` is an optional string that specifies how encoding and decoding errors are to be handled .", "question_id": 5148}, {"snippet": "types.ClassMethodDescriptorType", "intent": "The type of unbound class methods of some built-in data types such as dict.__dict__['fromkeys'].", "question_id": 11195}, {"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}, {"snippet": "calendar.setfirstweekday(weekday)", "intent": "Sets the `weekday` ( 0 is Monday , 6 is Sunday ) to start each week .", "question_id": 985}, {"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}, {"snippet": "cmath.polar(x)", "intent": "Return the representation of `x` in polar coordinates .", "question_id": 1094}, {"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}, {"snippet": "gzip.open(filename, newline=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4277}, {"snippet": "sysconfig.parse_config_h(fp, vars)", "intent": "Parse a config.h-style file . `fp` is a file-like object pointing to the config.h-like file . With arguments `vars`.", "question_id": 9873}, {"snippet": "BaseCookie.output()", "intent": "Return a string representation suitable to be sent as HTTP headers .", "question_id": 4584}, {"snippet": "fileinput.input(files=None, inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `files`, `inplace`.", "question_id": 3789}, {"snippet": "shelve.BsdDbShelf(dict, protocol=None)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods . The optional `protocol` , `writeback` , and `keyencoding` parameters have the same interpretation as for the Shelf class .", "question_id": 8253}, {"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}, {"snippet": "ssl.enum_certificates(store_name)", "intent": "Retrieve certificates from Windows \u2019 system cert store . `store_name` may be one of CA , ROOT or MY .", "question_id": 8899}, {"snippet": "decimal.localcontext(ctx=None)", "intent": "Return a context manager that will set the current context for the active thread to a copy of `ctx` on entry to the with-statement and restore the previous context when exiting the with-statement .", "question_id": 2495}, {"snippet": "email.utils.parsedate_tz(date)", "intent": "Performs the same function as parsedate ( ) , but returns either None or a 10-tuple ; the first 9 elements make up a tuple that can be passed directly to time.mktime ( ) , and the tenth is the offset of the `date` \u2019 s timezone from UTC ( which is the official term for Greenwich Mean Time ) 1 .", "question_id": 3465}, {"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}, {"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}, {"snippet": "statistics.harmonic_mean(data)", "intent": "Return the harmonic mean of `data` , a sequence or iterator of real-valued numbers .", "question_id": 9126}, {"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}, {"snippet": "formatter.DumbWriter(maxcol=72)", "intent": "Simple writer class which writes output on the `file` object passed in as file or , if file is omitted , on standard output . The output is simply word-wrapped to the number of columns specified by `maxcol` .", "question_id": 3857}, {"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}, {"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}, {"snippet": "os.makedirs(name, mode=0o777)", "intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . With arguments `name`.", "question_id": 6867}, {"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}, {"snippet": "connection.backup(target, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8833}, {"snippet": "doctest.testfile(filename, report=True)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `report` prints a summary at the end when true , else prints nothing at the end .", "question_id": 2772}, {"snippet": "filecmp.cmp(f1, f2)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise .", "question_id": 3755}, {"snippet": "element.items()", "intent": "Returns the element attributes as a sequence of ( name , value ) pairs .", "question_id": 12486}, {"snippet": "formatter.AbstractFormatter(writer)", "intent": "The standard formatter . With arguments `writer`.", "question_id": 3840}, {"snippet": "plistlib.FMT_BINARY", "intent": "The binary format for plist files", "question_id": 7585}, {"snippet": "inspect.stack()", "intent": "Return a list of frame records for the caller \u2019 s stack .", "question_id": 5030}, {"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}, {"snippet": "codecs.CodecInfo(encode, decode, streamreader=None, name=None)", "intent": "Codec details when looking up the codec registry . The constructor arguments are stored in attributes of the same `name` : With arguments `encode`, `decode`, `streamreader`.", "question_id": 1210}, {"snippet": "smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None)", "intent": "Create a new SMTPServer object , which binds to local address `localaddr` . It will treat `remoteaddr` as an upstream SMTP relayer . `data_size_limit` specifies the maximum number of bytes that will be accepted in a DATA command . `map` is the socket map to use for connections ( an initially empty dictionary is a suitable value ) .", "question_id": 8417}, {"snippet": "inspect.ismethod(object)", "intent": "Return true if the `object` is a bound method written in Python .", "question_id": 4950}, {"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "locale.currency(val, grouping=False)", "intent": "Formats a number `val` according to the current LC_MONETARY settings . If `grouping` is true ( which is not the default ) , grouping is done with the value .", "question_id": 5394}, {"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}, {"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}, {"snippet": "signal.sigpending()", "intent": "Examine the set of signals that are pending for delivery to the calling thread ( i.e. , the signals which have been raised while blocked ) .", "question_id": 8398}, {"snippet": "curses.start_color()", "intent": "Must be called if the programmer wants to use colors , and before any other color manipulation routine is called .", "question_id": 1983}, {"snippet": "prototype(address)", "intent": "Returns a foreign function at the specified `address` which must be an integer .", "question_id": 1801}, {"snippet": "base_http_request_handler.path", "intent": "Contains the request path.", "question_id": 4622}, {"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}, {"snippet": "curses.setupterm()", "intent": "Initialize the terminal .", "question_id": 1979}, {"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "intent": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.", "question_id": 7793}, {"snippet": "doc_test_finder.find(obj, name)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests .", "question_id": 2853}, {"snippet": "shape.addcomponent(poly, fill)", "intent": "Example : With arguments `poly`, `fill`.", "question_id": 11165}, {"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}, {"snippet": "email.headerregistry.AddressHeader", "intent": "Address headers are one of the most complex structured header types.", "question_id": 3158}, {"snippet": "window.getkey(y)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`.", "question_id": 2056}, {"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}, {"snippet": "sndhdr.what(filename)", "intent": "Determines the type of sound data stored in the file `filename` using whathdr ( ) .", "question_id": 8549}, {"snippet": "typing.MutableMapping(MappingKT, VT)", "intent": "A generic version of collections.abc.MutableMapping . With arguments `MappingKT`, `VT`.", "question_id": 11259}, {"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}, {"snippet": "cgi.parse_qs(qs, keep_blank_values=False)", "intent": "This function is deprecated in this module . With arguments `qs`, `keep_blank_values`.", "question_id": 1040}, {"snippet": "task.print_stack(file=None)", "intent": "Print the stack or traceback for this Task . The `file` argument is an I/O stream to which the output is written ; by default output is written to sys.stderr .", "question_id": 638}, {"snippet": "Purpose.SERVER_AUTH", "intent": "Option for create_default_context() and SSLContext.load_default_certs().", "question_id": 8964}, {"snippet": "imp.acquire_lock()", "intent": "Acquire the interpreter \u2019 s global import lock for the current thread .", "question_id": 4772}, {"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}, {"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}, {"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}, {"snippet": "fcntl.lockf(fd, cmd, start=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3749}, {"snippet": "text_calendar.formatmonth(theyear, themonth, l=0)", "intent": "Return a month \u2019 s calendar in a multi-line string . If `l` is given , it specifies the number of lines that each week will use . With arguments `theyear`, `themonth`.", "question_id": 930}, {"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}, {"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}, {"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2664}, {"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}, {"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}, {"snippet": "cgitb.text(info)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string .", "question_id": 1069}, {"snippet": "wsgiref.util.application_uri(environ)", "intent": "Similar to request_uri ( ) , except that the PATH_INFO and QUERY_STRING variables are ignored . With arguments `environ`.", "question_id": 12213}, {"snippet": "chunk.Chunk(file, inclheader=False)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `inclheader` is true , the size given in the chunk header includes the size of the header .", "question_id": 1078}, {"snippet": "time.ctime(secs)", "intent": "Convert a time expressed in seconds since the epoch to a string representing local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10438}, {"snippet": "unittest.TextTestRunner(failfast=False)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `failfast`.", "question_id": 11537}, {"snippet": "future.set_result(result)", "intent": "Sets the `result` of the work associated with the Future to result .", "question_id": 1478}, {"snippet": "smtp_server.process_message(peer, mailfrom, rcpttos, data, **kwargs)", "intent": "Raise a NotImplementedError exception . `peer` is the remote host \u2019 s address , `mailfrom` is the envelope originator , `rcpttos` are the envelope recipients and `data` is a string containing the contents of the e-mail ( which should be in RFC 5321 format ) . Implementations of process_message should use the `**kwargs` signature to accept arbitrary keyword arguments , since future feature enhancements may add keys to the kwargs dictionary .", "question_id": 8422}, {"snippet": "HTMLParser.handle_starttag(tag, attrs)", "intent": "This method is called to handle the start of a `tag` ( e.g . The `attrs` argument is a list of ( name , value ) pairs containing the attributes found inside the tag \u2019 s < > brackets .", "question_id": 4356}, {"snippet": "connection.cursor()", "intent": "The cursor method accepts a single optional parameter `factory` .", "question_id": 8806}, {"snippet": "curses.pair_number(attr)", "intent": "Return the number of the color-pair set by the attribute value `attr` .", "question_id": 1967}, {"snippet": "test_case.debug()", "intent": "Run the test without collecting the result .", "question_id": 11374}, {"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}, {"snippet": "PurePath.parents", "intent": "An immutable sequence providing access to the logical ancestors of the path:", "question_id": 7247}, {"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10976}, {"snippet": "unittest.TestCase(methodName='runTest')", "intent": "Instances of the TestCase class represent the logical test units in the unittest universe . Each instance of TestCase will run a single base method : the method named `methodName` .", "question_id": 11364}, {"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}, {"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}, {"snippet": "pool.map_async(func, iterable, chunksize)", "intent": "A variant of the map ( ) method which returns a result object . With arguments `func`, `iterable`, `chunksize`.", "question_id": 6344}, {"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}, {"snippet": "json_encoder.iterencode(o)", "intent": "Encode the given object , `o` , and yield each string representation as available .", "question_id": 5334}, {"snippet": "tokenize.TokenError", "intent": "Raised when either a docstring or expression that may be split over several lines is not completed anywhere in the file, for example:", "question_id": 10705}, {"snippet": "queue_listener.propagate", "intent": "If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger.", "question_id": 5565}, {"snippet": "fraction.__round__(ndigits)", "intent": "The first version returns the nearest int to self , rounding half to even . The second version rounds self to the nearest multiple of Fraction ( 1 , 10**ndigits ) ( logically , if `ndigits` is negative ) , again rounding half toward even .", "question_id": 3876}, {"snippet": "bdb.dispatch_return(frame, arg)", "intent": "If the debugger should stop on this function return , invoke the user_return ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "question_id": 775}, {"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}, {"snippet": "decimal.Rounded", "intent": "Rounding occurred though possibly no information was lost.", "question_id": 2591}, {"snippet": "html_calendar.formatyearpage(theyear, css='calendar.css')", "intent": "Return a year \u2019 s calendar as a complete HTML page . `css` is the name for the cascading style sheet to be used . With arguments `theyear`.", "question_id": 964}, {"snippet": "path_finder.find_spec(fullname, target=None)", "intent": "Class method that attempts to find a spec for the module specified by `fullname` on sys.path or , if defined , on `path` . With arguments `target`.", "question_id": 4877}, {"snippet": "Morsel.setdefault(key, value=None)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) . With arguments `value`.", "question_id": 4612}, {"snippet": "message.__contains__(name)", "intent": "Return true if the message object has a field named `name` .", "question_id": 2965}, {"snippet": "sys.maxunicode", "intent": "An integer giving the value of the largest Unicode code point, i.e.", "question_id": 9824}, {"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}, {"snippet": "turtle.listen(ydummy=None)", "intent": "Set focus on TurtleScreen ( in order to collect key-events ) . With arguments `ydummy`.", "question_id": 11065}, {"snippet": "sys.prefix", "intent": "A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string '/usr/local'.", "question_id": 9831}, {"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}, {"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}, {"snippet": "multiprocessing.freeze_support()", "intent": "Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable .", "question_id": 6222}, {"snippet": "BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)", "intent": "nnn should be a three-digit HTTP error `code` . With arguments `req`, `fp`, `msg`, `hdrs`.", "question_id": 11847}, {"snippet": "socket.gethostbyname_ex(hostname)", "intent": "Translate a host name to IPv4 address format , extended interface . Return a triple ( `hostname` , aliaslist , ipaddrlist ) where hostname is the primary host name responding to the given ip_address , aliaslist is a ( possibly empty ) list of alternative host names for the same address , and ipaddrlist is a list of IPv4 addresses for the same interface on the same host ( often but not always a single address ) .", "question_id": 8648}, {"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}, {"snippet": "loop.time()", "intent": "Return the current time , as a float value , according to the event loop \u2019 s internal monotonic clock .", "question_id": 197}, {"snippet": "logging.captureWarnings(capture)", "intent": "This function is used to turn the `capture` of warnings by logging on and off .", "question_id": 5654}, {"snippet": "socket.close()", "intent": "Mark the socket closed .", "question_id": 8675}, {"snippet": "datetime.tzinfo", "intent": "The object passed as the tzinfo argument to the datetime constructor, or None if none was passed.", "question_id": 2279}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0))", "intent": "Class used to represent information about a member of an archive . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12783}, {"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715}, {"snippet": "deque.index(x, start, stop)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1360}, {"snippet": "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `encoding` 1 is the output encoding ( default is US-ASCII ) .", "question_id": 12462}, {"snippet": "os.pathsep", "intent": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "question_id": 7126}, {"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}, {"snippet": "config_parser.read_string(string)", "intent": "Parse configuration data from a `string` .", "question_id": 1516}, {"snippet": "inspect.getclosurevars(func)", "intent": "Get the mapping of external name references in a Python function or method `func` to their current values .", "question_id": 5020}, {"snippet": "xmlparser.ErrorCode", "intent": "Numeric code specifying the problem.", "question_id": 7749}, {"snippet": "DocXMLRPCServer.set_server_title(server_title)", "intent": "Set the title used in the generated HTML documentation . With arguments `server_title`.", "question_id": 12761}, {"snippet": "csvwriter.writerows(rows)", "intent": "Write all elements in `rows` ( an iterable of row objects as described above ) to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1736}, {"snippet": "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")", "intent": "Write text - the string representation of `arg` - at the current turtle position according to `align` ( \u201c left \u201d , \u201c center \u201d or right \u201d ) and with the given `font` . If `move` is true , the pen is moved to the bottom-right corner of the text . With arguments `8`, `\"normal\")`.", "question_id": 10973}, {"snippet": "socket.ntohs(x)", "intent": "Convert 16-bit positive integers from network to host byte order . With arguments `x`.", "question_id": 8658}, {"snippet": "control.mapping(event, attribute)", "intent": "Make an entry into the EventMapping table for this control . With arguments `event`, `attribute`.", "question_id": 6130}, {"snippet": "OptionParser.add_option(option)", "intent": "To define an `option` with only a short option string :", "question_id": 6623}, {"snippet": "random.paretovariate(alpha)", "intent": "Pareto distribution . `alpha` is the shape parameter .", "question_id": 7916}, {"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}, {"snippet": "UUID.version", "intent": "The UUID version number (1 through 5, meaningful only when the variant is RFC_4122).", "question_id": 11954}, {"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}, {"snippet": "cab.commit(database)", "intent": "Generate a CAB file , add it as a stream to the MSI file , put it into the Media table , and remove the generated file from the disk . With arguments `database`.", "question_id": 6090}, {"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}, {"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}, {"snippet": "mock.return_value", "intent": "Set this to configure the value returned by calling the mock:", "question_id": 11590}, {"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}, {"snippet": "text_wrapper.replace_whitespace", "intent": "(default: True) If true, after tab expansion but before wrapping, the wrap() method will replace each whitespace character with a single space.", "question_id": 10330}, {"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891}, {"snippet": "mailbox.mboxMessage()", "intent": "A `message` with mbox-specific behaviors .", "question_id": 5823}, {"snippet": "fcntl.ioctl(fd, request, arg=0)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . The parameter `arg` can be one of an integer , an object supporting the read-only buffer interface ( like bytes ) or an object supporting the read-write buffer interface ( like bytearray ) . With arguments `fd`.", "question_id": 3743}, {"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}, {"snippet": "window.touchline(start, count)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2126}, {"snippet": "asyncio.isfuture(obj)", "intent": "Return True if `obj` is either of :", "question_id": 354}, {"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}, {"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}, {"snippet": "tkinter.tix.DirSelectBox", "intent": "The DirSelectBox is similar to the standard Motif(TM) directory-selection box.", "question_id": 10566}, {"snippet": "calendar.calendar(year, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `m`.", "question_id": 1015}, {"snippet": "difflib.get_close_matches(word, possibilities)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) .", "question_id": 2638}, {"snippet": "non_callable_magic_mock.code", "intent": "An HTTP status code as defined in RFC 2616.", "question_id": 11661}, {"snippet": "curses.error", "intent": "Exception raised when a curses library function returns an error.", "question_id": 1919}, {"snippet": "type(name, bases, dict)", "intent": "With one argument , return the type of an object . The `name` string is the class name and becomes the __name__ attribute ; the `bases` tuple itemizes the base classes and becomes the __bases__ attribute ; and the `dict` dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute .", "question_id": 4131}, {"snippet": "webbrowser.open(url, autoraise=True)", "intent": "Display `url` using the default browser . If `autoraise` is True , the window is raised if possible ( note that under many window managers this will occur regardless of the setting of this variable ) .", "question_id": 12104}, {"snippet": "codecs.open(filename)", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1225}, {"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}, {"snippet": "uuid.NAMESPACE_URL", "intent": "When this namespace is specified, the name string is a URL.", "question_id": 11965}, {"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}, {"snippet": "lzma.LZMADecompressor(memlimit=None)", "intent": "Create a decompressor object , which can be used to decompress data incrementally . The `memlimit` argument specifies a limit ( in bytes ) on the amount of memory that the decompressor can use .", "question_id": 5692}, {"snippet": "os.get_handle_inheritable(handle)", "intent": "Get the \u201c inheritable \u201d flag of the specified `handle` ( a boolean ) .", "question_id": 6818}, {"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}, {"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}, {"snippet": "widget.insert(pos, child, **kw)", "intent": "Inserts a pane at the specified position . `pos` is either the string \u201c end \u201d , an integer index , or the name of a managed `child` . With arguments `**kw`.", "question_id": 10608}, {"snippet": "codecs.open(filename, mode='r')", "intent": "Open an encoded file using the given `mode` and return an instance of StreamReaderWriter , providing transparent encoding/decoding . With arguments `filename`.", "question_id": 1226}, {"snippet": "stat.ST_SIZE", "intent": "Size in bytes of a plain file; amount of data waiting on some special files.", "question_id": 9080}, {"snippet": "errno.EADDRINUSE", "intent": "Address already in use", "question_id": 3603}, {"snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5331}, {"snippet": "maildir_message.set_subdir(subdir)", "intent": "Set the subdirectory the message should be stored in . Parameter `subdir` must be either \u201c new \u201d or \u201c cur \u201d .", "question_id": 5814}, {"snippet": "email.mime.base.MIMEBase(_maintype, _subtype, **_params)", "intent": "Module : email.mime.base `_maintype` is the Content-Type major type ( e.g . text or image ) , and `_subtype` is the Content-Type minor type ( e.g . With arguments `**_params`.", "question_id": 3313}, {"snippet": "timeit.Timer(setup='pass', timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10505}, {"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}, {"snippet": "itertools.product(*iterables, repeat=1)", "intent": "Cartesian product of input iterables . To compute the product of an iterable with itself , specify the number of repetitions with the optional `repeat` keyword argument . With arguments `*iterables`.", "question_id": 5261}, {"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}, {"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}, {"snippet": "msilib.add_data(database, table, records)", "intent": "Add all `records` to the `table` named table in `database` .", "question_id": 6063}, {"snippet": "io_base.readlines(hint=-1)", "intent": "Read and return a list of lines from the stream . `hint` can be specified to control the number of lines read : no more lines will be read if the total size ( in bytes/characters ) of all lines so far exceeds hint .", "question_id": 5073}, {"snippet": "curses.setupterm()", "intent": "Initialize the terminal .", "question_id": 1979}, {"snippet": "locale.strxfrm(string)", "intent": "Transforms a `string` to one that can be used in locale-aware comparisons .", "question_id": 5383}, {"snippet": "os.spawnlp(mode, file)", "intent": "Execute the program path in a new process . If `mode` is P_NOWAIT , this function returns the process id of the new process ; if mode is P_WAIT , returns the process \u2019 s exit code if it exits normally , or -signal , where signal is the signal that killed the process . The variants which include a second \u201c p \u201d near the end ( spawnlp ( ) , spawnlpe ( ) , spawnvp ( ) , and spawnvpe ( ) ) will use the PATH environment variable to locate the program `file` .", "question_id": 7055}, {"snippet": "date.__format__(format)", "intent": "Same as date.strftime ( ) . This makes it possible to specify a `format` string for a date object in formatted string literals and when using str.format ( ) .", "question_id": 2246}, {"snippet": "mmap.flush(offset, size)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6005}, {"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}, {"snippet": "cmath.rect(r, phi)", "intent": "Return the complex number x with polar coordinates `r` and `phi` .", "question_id": 1095}, {"snippet": "timeit.timeit(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10477}, {"snippet": "lzma_decompressor.decompress(data, max_length=-1)", "intent": "Decompress `data` ( a bytes-like object ) , returning uncompressed data as bytes . If `max_length` is nonnegative , returns at most max_length bytes of decompressed data .", "question_id": 5699}, {"snippet": "DeprecationWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for other Python developers.", "question_id": 3703}, {"snippet": "HTTPDigestAuthHandler.http_error_401(req, fp, code, msg, hdrs)", "intent": "Retry the request with authentication information , if available . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11869}, {"snippet": "calendar.prcal(year, l=0, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`, `c`.", "question_id": 1009}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}, {"snippet": "@test.support.requires_mac_version(*min_version)", "intent": "Decorator for the minimum version when running test on Mac OS X . With arguments `*min_version`.", "question_id": 10213}, {"snippet": "tuple(iterable)", "intent": "Rather than being a function , tuple is actually an immutable sequence type , as documented in Tuples and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4128}, {"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}, {"snippet": "HTTPConnection.set_debuglevel(level)", "intent": "Set the debugging `level` .", "question_id": 4436}, {"snippet": "zipfile.ZipFile(file)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object .", "question_id": 12792}, {"snippet": "venv.create(env_dir)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument .", "question_id": 11989}, {"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}, {"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}, {"snippet": "InteractiveInterpreter.runcode(code)", "intent": "Execute a `code` object .", "question_id": 1179}, {"snippet": "test_result.stopTest(test)", "intent": "Called after the `test` case test has been executed , regardless of the outcome .", "question_id": 11521}, {"snippet": "xmlrpc.client.MultiCall(server)", "intent": "Create an object used to boxcar method calls . `server` is the eventual target of the call .", "question_id": 12697}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}, {"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}, {"snippet": "email.iterators._structure(msg, fp=None)", "intent": "Prints an indented representation of the content types of the message object structure . Optional `fp` is a file-like object to print the output to . With arguments `msg`.", "question_id": 3215}, {"snippet": "wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)", "intent": "Create an HTTP handler for the given `request` ( i.e . a socket ) , `client_address` ( a ( host , port ) tuple ) , and `server` ( WSGIServer instance ) .", "question_id": 12231}, {"snippet": "pool.apply_async(func, args, kwds, callback)", "intent": "A variant of the apply ( ) method which returns a result object . If `callback` is specified then it should be a callable which accepts a single argument . With arguments `func`, `args`, `kwds`.", "question_id": 6336}, {"snippet": "test.support.create_empty_file(filename)", "intent": "Create an empty file with `filename` .", "question_id": 10153}, {"snippet": "ipaddress.collapse_addresses(addresses)", "intent": "Return an iterator of the collapsed IPv4Network or IPv6Network objects . `addresses` is an iterator of IPv4Network or IPv6Network objects .", "question_id": 5235}, {"snippet": "time.resolution", "intent": "The smallest possible difference between non-equal time objects, timedelta(microseconds=1), although note that arithmetic on time objects is not supported.", "question_id": 2326}, {"snippet": "platform.java_ver('', ''), '', ''), release='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7486}, {"snippet": "statistics.median_grouped(data)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation .", "question_id": 9130}, {"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}, {"snippet": "struct.unpack_from(buffer)", "intent": "Identical to the unpack_from ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes , minus `offset` , must be at least size .", "question_id": 9562}, {"snippet": "platform.libc_ver(chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7541}, {"snippet": "decimal.ROUND_HALF_UP", "intent": "Round to nearest with ties going away from zero.", "question_id": 2582}, {"snippet": "tkinter.tix.Select", "intent": "The Select widget is a container of button subwidgets.", "question_id": 10561}, {"snippet": "HTTPResponse.closed", "intent": "Is True if the stream is closed.", "question_id": 4467}, {"snippet": "widget.set(item, value=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10660}, {"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}, {"snippet": "turtle.bgpic()", "intent": "Set background image or return name of current backgroundimage .", "question_id": 11041}, {"snippet": "stringprep.in_table_c4(code)", "intent": "Determine whether `code` is in tableC.4 ( Non-character code points ) .", "question_id": 9542}, {"snippet": "datetime.timedelta(days=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2205}, {"snippet": "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . If `encoding` 1 is given , the value overrides the encoding specified in the XML file .", "question_id": 12551}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315}, {"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}, {"snippet": "winreg.ConnectRegistry(computer_name, key)", "intent": "Establishes a connection to a predefined registry handle on another computer , and returns a handle object . `computer_name` is the name of the remote computer , of the form r '' \\\\computername '' . `key` is the predefined handle to connect to .", "question_id": 12121}, {"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}, {"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}, {"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}, {"snippet": "_func_ptr.argtypes", "intent": "Assign a tuple of ctypes types to specify the argument types that the function accepts.", "question_id": 1788}, {"snippet": "compileall.compile_path(quiet=0)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `quiet`.", "question_id": 1433}, {"snippet": "email_message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3270}, {"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}, {"snippet": "fnmatch.fnmatch(filename, pattern)", "intent": "Test whether the `filename` string matches the `pattern` string , returning True or False .", "question_id": 3813}, {"snippet": "window.addnstr(y, x, str, n)", "intent": "Paint at most `n` characters of the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2007}, {"snippet": "asyncio.gather(*aws, loop=None, return_exceptions=False)", "intent": "Run awaitable objects in the aws sequence concurrently . If `return_exceptions` is False ( default ) , the first raised exception is immediately propagated to the task that awaits on gather ( ) . With arguments `*aws`, `loop`.", "question_id": 602}, {"snippet": "SSLContext.wrap_bio(incoming, outgoing, session=None)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) . The `server_side` , `server_hostname` and `session` parameters have the same meaning as in SSLContext.wrap_socket ( ) .", "question_id": 9036}, {"snippet": "shutil.copy(src, dst, follow_symlinks=True)", "intent": "Copies the file `src` to the file or directory `dst` . If `follow_symlinks` is false , and src is a symbolic link , dst will be created as a symbolic link .", "question_id": 8319}, {"snippet": "platform.libc_ver(version='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7540}, {"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}, {"snippet": "Function.name", "intent": "The name of the function.", "question_id": 7712}, {"snippet": "base_server.server_activate()", "intent": "Called by the server \u2019 s constructor to activate the server .", "question_id": 8780}, {"snippet": "inspect.getframeinfo(frame, context=1)", "intent": "Get information about a `frame` or traceback object . With arguments `context`.", "question_id": 5024}, {"snippet": "uuid.uuid3(namespace, name)", "intent": "Generate a UUID based on the MD5 hash of a `namespace` identifier ( which is a UUID ) and a `name` ( which is a string ) .", "question_id": 11961}, {"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851}, {"snippet": "condition.wait_for(predicate, timeout=None)", "intent": "Wait until a condition evaluates to true . `predicate` should be a callable which result will be interpreted as a boolean value . A `timeout` may be provided giving the maximum time to wait .", "question_id": 10393}, {"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}, {"snippet": "mimetypes.guess_type(url)", "intent": "Guess the type of a file based on its filename or URL , given by `url` .", "question_id": 5939}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "tkinter.tix.DirSelectDialog", "intent": "The DirSelectDialog widget presents the directories in the file system in a dialog window.", "question_id": 10565}, {"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}, {"snippet": "email.utils.format_datetime(dt, usegmt=False)", "intent": "Like formatdate , but the input is a datetime instance . If it is an aware timezone with offset zero , then `usegmt` may be set to True , in which case the string GMT is used instead of the numeric timezone offset . With arguments `dt`.", "question_id": 3477}, {"snippet": "pyclbr.readmodule(module, path=None)", "intent": "Return a dictionary mapping module-level class names to class descriptors . Parameter `module` is a string with the name of the module to read ; it may be the name of a module within a package . If given , `path` is a sequence of directory paths prepended to sys.path , which is used to locate the module source code .", "question_id": 7707}, {"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}, {"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}, {"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}, {"snippet": "Option.choices", "intent": "For options of type \"choice\", the list of strings the user may choose from.", "question_id": 6632}, {"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}, {"snippet": "Database.OpenView(sql)", "intent": "Return a view object , by calling MSIDatabaseOpenView ( ) . `sql` is the SQL statement to execute .", "question_id": 6068}, {"snippet": "zipapp.create_archive(source, main=None)", "intent": "Create an application archive from `source` . The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12770}, {"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}, {"snippet": "test.support.TEST_DATA_DIR", "intent": "Set to the data directory within the test package.", "question_id": 10128}, {"snippet": "socket.getfqdn()", "intent": "Return a fully qualified domain `name` for name .", "question_id": 8646}, {"snippet": "gc.set_threshold(threshold0, threshold1)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection . If generation 0 has been examined more than `threshold1` times since generation 1 has been examined , then generation 1 is examined as well .", "question_id": 4177}, {"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}, {"snippet": "header.__str__()", "intent": "Returns an approximation of the Header as a string , using an unlimited line length .", "question_id": 3138}, {"snippet": "curses.panel.bottom_panel()", "intent": "Returns the bottom panel in the panel stack .", "question_id": 2141}, {"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}, {"snippet": "io.BufferedRWPair(reader, writer)", "intent": "A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable , the other writeable \u2013 into a single bidirectional endpoint . `reader` and `writer` are RawIOBase objects that are readable and writeable respectively .", "question_id": 5130}, {"snippet": "fractions.Fraction(float)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . The next two versions accept either a `float` or a decimal.Decimal instance , and return a Fraction instance with exactly the same value .", "question_id": 3864}, {"snippet": "set.issubset(other)", "intent": "Test whether every element in the set is in `other` .", "question_id": 9439}, {"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}, {"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}, {"snippet": "message.epilogue", "intent": "The epilogue attribute acts the same way as the preamble attribute, except that it contains text that appears between the last boundary and the end of the message.", "question_id": 3029}, {"snippet": "subprocess.check_output(args, stderr=None)", "intent": "Run command with arguments and return its output . With arguments `args`, `stderr`.", "question_id": 9681}, {"snippet": "writer.send_paragraph(blankline)", "intent": "Produce a paragraph separation of at least `blankline` blank lines , or the equivalent .", "question_id": 3848}, {"snippet": "stream_reader.readline(size)", "intent": "Read one line from the input stream and return the decoded data . `size` , if given , is passed as size argument to the stream \u2019 s read ( ) method .", "question_id": 1291}, {"snippet": "os.nice(increment)", "intent": "Add `increment` to the process \u2019 s \u201c niceness \u201d .", "question_id": 7039}, {"snippet": "Path.rename(target)", "intent": "Rename this file or directory to the given `target` .", "question_id": 7308}, {"snippet": "content_manager.get_content(msg, *args, **kw)", "intent": "Look up a handler function based on the mimetype of `msg` ( see next paragraph ) , call it , passing through all arguments , and return the result of the call . With arguments `*args`, `**kw`.", "question_id": 3032}, {"snippet": "set()", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9432}, {"snippet": "venv.EnvBuilder(system_site_packages=False, clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `system_site_packages`, `clear`.", "question_id": 11979}, {"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}, {"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}, {"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}, {"snippet": "tabnanny.check(file_or_dir)", "intent": "If `file_or_dir` is a directory and not a symbolic link , then recursively descend the directory tree named by file_or_dir , checking all .py files along the way .", "question_id": 9885}, {"snippet": "select.kqueue()", "intent": "( Only supported on BSD . )", "question_id": 8155}, {"snippet": "zlib.crc32(data, value)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` . If `value` is present , it is used as the starting value of the checksum ; otherwise , a default value of 0 is used .", "question_id": 12917}, {"snippet": "NNTP.login(user=None, password=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6458}, {"snippet": "stream_writer.write(data)", "intent": "Write `data` to the stream .", "question_id": 517}, {"snippet": "doc_test_parser.get_examples(string, name='<string>')", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects . The optional argument `name` is a name identifying this string , and is only used for error messages .", "question_id": 2858}, {"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004}, {"snippet": "platform.architecture(executable=sys.executable)", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information .", "question_id": 7459}, {"snippet": "warnings.filterwarnings(action, lineno=0)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "question_id": 12027}, {"snippet": "tarfile.ExtractError", "intent": "Is raised for non-fatal errors when using TarFile.extract(), but only if TarFile.errorlevel== 2.", "question_id": 9906}, {"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}, {"snippet": "widget.instate(statespec, *args, **kw)", "intent": "Test the widget \u2019 s state . If a `callback` is not specified , returns True if the widget state matches `statespec` and False otherwise . With arguments `*args`, `**kw`.", "question_id": 10593}, {"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}, {"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}, {"snippet": "watched_file_handler.reopenIfNeeded()", "intent": "Checks to see if the file has changed .", "question_id": 5448}, {"snippet": "urllib.request.ProxyBasicAuthHandler()", "intent": "Handle authentication with the proxy .", "question_id": 11793}, {"snippet": "os.fwalk(top='.', topdown=True)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `topdown`.", "question_id": 6989}, {"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}, {"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}, {"snippet": "config_parser.add_section(section)", "intent": "Add a `section` named section to the instance .", "question_id": 1508}, {"snippet": "traceback.clear_frames(tb)", "intent": "Clears the local variables of all the stack frames in a traceback `tb` by calling the clear ( ) method of each frame object .", "question_id": 10791}, {"snippet": "turtle.forward(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10903}, {"snippet": "zlib.crc32(data)", "intent": "Computes a CRC ( Cyclic Redundancy Check ) checksum of `data` .", "question_id": 12918}, {"snippet": "os.chown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6839}, {"snippet": "statistics.pvariance(data)", "intent": "Return the population variance of `data` , a non-empty iterable of real-valued numbers .", "question_id": 9135}, {"snippet": "xmlparser.ErrorCode", "intent": "Numeric code specifying the problem.", "question_id": 7749}, {"snippet": "config_parser.read_file(f)", "intent": "Read and parse configuration data from `f` which must be an iterable yielding Unicode strings ( for example files opened in text mode ) .", "question_id": 1514}, {"snippet": "SimpleQueue.put_nowait(item)", "intent": "Equivalent to put ( `item` ) , provided for compatibility with Queue.put_nowait ( ) .", "question_id": 7867}, {"snippet": "watched_file_handler.emit(record)", "intent": "Outputs the `record` to the file , but first calls reopenIfNeeded ( ) to reopen the file if it has changed .", "question_id": 5449}, {"snippet": "base64.b64encode(s)", "intent": "Encode the bytes-like object `s` using Base64 and return the encoded bytes .", "question_id": 708}, {"snippet": "NNTP.quit()", "intent": "Send a QUIT command and close the connection .", "question_id": 6448}, {"snippet": "generator.write(s)", "intent": "Write `s` to the write method of the outfp passed to the Generator \u2019 s constructor .", "question_id": 3105}, {"snippet": "bisect.insort_left(a, x, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 866}, {"snippet": "null_handler.emit(record)", "intent": "This method does nothing . With arguments `record`.", "question_id": 5437}, {"snippet": "FTP.dir()", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output .", "question_id": 3958}, {"snippet": "logging.config.fileConfig(fname, defaults=None)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`, `defaults`.", "question_id": 5413}, {"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}, {"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}, {"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}, {"snippet": "SSLSocket.version()", "intent": "Return the actual SSL protocol version negotiated by the connection as a string , or None is no secure connection is established .", "question_id": 8988}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "intent": "Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.", "question_id": 7793}, {"snippet": "argparse.ArgumentParser(epilog=None)", "intent": "Create a new ArgumentParser object . With arguments `epilog`.", "question_id": 42}, {"snippet": "turtle.ondrag(fun, add=None)", "intent": "Bind `fun` to mouse-move events on this turtle . With arguments `add`.", "question_id": 11029}, {"snippet": "logger_adapter.process(msg, kwargs)", "intent": "Modifies the message and/or keyword arguments passed to a logging call in order to insert contextual information . The return value is a ( `msg` , kwargs ) tuple which has the ( possibly modified ) versions of the arguments passed in . This implementation takes the object passed as extra to the constructor and adds it to `kwargs` using key \u2018 extra \u2019 .", "question_id": 5632}, {"snippet": "array.count(x)", "intent": "Return the number of occurrences of `x` in the array .", "question_id": 123}, {"snippet": "WindowsError", "intent": "Only available on Windows.", "question_id": 3684}, {"snippet": "inspect.getcallargs(func, *args, **kwds)", "intent": "Bind the args and kwds to the argument names of the Python function or method `func` , as if it was called with them . whenever func ( `*args` , `**kwds` ) would raise an exception because of incompatible signature , an exception of the same type and the same or similar message is raised .", "question_id": 5019}, {"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}, {"snippet": "os.getsid(pid)", "intent": "Call the system call getsid ( ) . With arguments `pid`.", "question_id": 6704}, {"snippet": "loop.set_exception_handler(handler)", "intent": "Set `handler` as the new event loop exception handler .", "question_id": 307}, {"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}, {"snippet": "os.get_exec_path(env=None)", "intent": "Returns the list of directories that will be searched for a named executable , similar to a shell , when launching a process . `env` , when specified , should be an environment variable dictionary to lookup the PATH in .", "question_id": 6673}, {"snippet": "winsound.SND_LOOP", "intent": "Play the sound repeatedly.", "question_id": 12198}, {"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}, {"snippet": "ctypes.WinError(descr=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `descr` is not specified , FormatError ( ) is called to get a textual description of the error .", "question_id": 1838}, {"snippet": "loop.subprocess_exec(protocol_factory, *args, **kwargs, stdout=subprocess.PIPE)", "intent": "Create a subprocess from one or more string arguments specified by args . The `protocol_factory` must be a callable returning a subclass of the asyncio.SubprocessProtocol class . With arguments `*args`, `**kwargs`, `stdout`.", "question_id": 315}, {"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}, {"snippet": "shelve.open(filename, flag='c', writeback=False)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database . The optional `flag` parameter has the same interpretation as the flag parameter of dbm.open ( ) . If the optional `writeback` parameter is set to True , all entries accessed are also cached in memory , and written back on sync ( ) and close ( ) ; this can make it handier to mutate mutable entries in the persistent dictionary , but , if many entries are accessed , it can consume vast amounts of memory for the cache , and it can make the close operation very slow since all accessed entries are written back ( there is no way to determine which accessed entries are mutable , nor which ones were actually mutated ) .", "question_id": 8239}, {"snippet": "socket.socket(family=AF_INET)", "intent": "Create a new socket using the given address `family` , socket `type` and protocol number .", "question_id": 8614}, {"snippet": "test_case.assertLogs(logger=None, level=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11414}, {"snippet": "element.tag", "intent": "A string identifying what kind of data this element represents (the element type, in other words).", "question_id": 12479}, {"snippet": "patch.object(target, attribute, **kwargs, new=DEFAULT)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11619}, {"snippet": "curses.ascii.isalnum(c)", "intent": "Checks for an ASCII alphanumeric character ; it is equivalent to isalpha ( `c` ) or isdigit ( c ) .", "question_id": 1899}, {"snippet": "ctypes.Union(*args, **kw)", "intent": "Abstract base class for unions in native byte order . With arguments `*args`, `**kw`.", "question_id": 1886}, {"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}, {"snippet": "oss_audio_device.reset()", "intent": "Immediately stop playing or recording and return the device to a state where it can accept commands .", "question_id": 7189}, {"snippet": "property(fset=None, doc=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value . And `doc` creates a docstring for the attribute .", "question_id": 4094}, {"snippet": "msilib.RadioButtonGroup(dlg, name, property)", "intent": "Create a radio button control named `name` . `property` is the installer property that gets set when a radio button is selected . With arguments `dlg`.", "question_id": 6132}, {"snippet": "os.mkdir(path, mode=0o777)", "intent": "Create a directory named `path` with numeric `mode` mode .", "question_id": 6863}, {"snippet": "time.localtime(secs)", "intent": "Like gmtime ( ) but converts to local time . If `secs` is not provided or None , the current time as returned by time ( ) is used .", "question_id": 10443}, {"snippet": "platform.platform(aliased=0, terse=0)", "intent": "Returns a single string identifying the underlying platform with as much useful information as possible . If `aliased` is true , the function will use aliases for various platforms that report system names which differ from their common names , for example SunOS will be reported as Solaris . Setting `terse` to true causes the function to return only the absolute minimum information needed to identify the platform .", "question_id": 7471}, {"snippet": "context.minus(x)", "intent": "Minus corresponds to the unary prefix minus operator in Python . With arguments `x`.", "question_id": 2553}, {"snippet": "calendar.HTMLCalendar(firstweekday=0)", "intent": "This class can be used to generate HTML calendars . With arguments `firstweekday`.", "question_id": 957}, {"snippet": "Telnet.read_until(expected, timeout=None)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10010}, {"snippet": "pstats.Stats(*filenames or profile, stream=sys.stdout)", "intent": "This class constructor creates an instance of a \u201c statistics object \u201d from a filename ( or list of filenames ) or from a Profile instance . Output will be printed to the `stream` specified by stream . With arguments `*filenames or profile`.", "question_id": 7689}, {"snippet": "asyncio.CancelledError", "intent": "The operation has been cancelled.", "question_id": 346}, {"snippet": "sys.exit()", "intent": "Exit from Python .", "question_id": 9789}, {"snippet": "venv.create(env_dir)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument .", "question_id": 11989}, {"snippet": "inspect.getouterframes(frame)", "intent": "Get a list of `frame` records for a frame and all outer frames .", "question_id": 5025}, {"snippet": "http.server.CGIHTTPRequestHandler(request, client_address, server)", "intent": "This class is used to serve either files or output of CGI scripts from the current directory and below . The do_GET ( ) and do_HEAD ( ) functions are modified to run CGI scripts and serve the output , instead of serving files , if the `request` leads to somewhere below the cgi_directories path . Only directory-based CGI are used \u2014 the other common `server` configuration is to treat special extensions as denoting CGI scripts . With arguments `client_address`.", "question_id": 4666}, {"snippet": "sysconfig.get_paths(scheme)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` .", "question_id": 9868}, {"snippet": "urllib.parse.unquote(string, encoding='utf-8')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11724}, {"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595}, {"snippet": "os.rename(src, dst, src_dir_fd=None)", "intent": "Rename the file or directory `src` to `dst` . This function can support specifying `src_dir_fd` and/or `dst_dir_fd` to supply paths relative to directory descriptors .", "question_id": 6893}, {"snippet": "time.strftime(format)", "intent": "Return a string representing the time , controlled by an explicit `format` string .", "question_id": 2347}, {"snippet": "help(object)", "intent": "Invoke the built-in help system . If the argument is any other kind of `object` , a help page on the object is generated .", "question_id": 4030}, {"snippet": "gettext.ngettext(singular, plural, n)", "intent": "Like gettext ( ) , but consider `plural` forms . If no translation is found , return `singular` if n is 1 ; return plural otherwise . If a translation is found , apply the plural formula to `n` , and return the resulting message ( some languages have more than two plural forms ) .", "question_id": 4218}, {"snippet": "bytearray.translate(table)", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9333}, {"snippet": "xml.etree.ElementTree.XML(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12469}, {"snippet": "subprocess.Popen(args, shell=False)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . See the `shell` and `executable` arguments for additional differences from the default behavior .", "question_id": 9607}, {"snippet": "InteractiveInterpreter.runsource(source, symbol=\"single\")", "intent": "Compile and run some `source` in the interpreter . Arguments are the same as for compile_command ( ) ; the default for `filename` is ' < input > ' , and for `symbol` is 'single ' .", "question_id": 1177}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "BaseHandler.unknown_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs with no specific registered handler to open it . With arguments `req`.", "question_id": 11845}, {"snippet": "urllib.parse.unquote(string)", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str .", "question_id": 11723}, {"snippet": "ctypes.WinError(code=None)", "intent": "Windows only : this function is probably the worst-named thing in ctypes . If `code` is not specified , GetLastError is called to determine the error code .", "question_id": 1837}, {"snippet": "pdb.Pdb(nosigint=False)", "intent": "Pdb is the debugger class . If you want Pdb not to touch the SIGINT handler , set `nosigint` to true .", "question_id": 7346}, {"snippet": "warnings.simplefilter(action, lineno=0)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`.", "question_id": 12035}, {"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907}, {"snippet": "json.JSONEncoder(skipkeys=False, ensure_ascii=True)", "intent": "Extensible JSON encoder for Python data structures . If `skipkeys` is false ( the default ) , then it is a TypeError to attempt encoding of keys that are not str , int , float or None . If `ensure_ascii` is true ( the default ) , the output is guaranteed to have all incoming non-ASCII characters escaped .", "question_id": 5331}, {"snippet": "errno.ESPIPE", "intent": "Illegal seek", "question_id": 3534}, {"snippet": "mailbox.mbox(path, create=True)", "intent": "A subclass of Mailbox for mailboxes in mbox format . If `create` is True , the mailbox is created if it does not exist . With arguments `path`.", "question_id": 5770}, {"snippet": "tkinter.Tk(baseName=None, className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `baseName`, `className`.", "question_id": 10525}, {"snippet": "shutil.get_terminal_size(lines), fallback=(columns)", "intent": "Get the size of the terminal window . If the terminal size can not be successfully queried , either because the system doesn \u2019 t support querying , or because we are not connected to a terminal , the value given in `fallback` parameter is used . With arguments `lines)`.", "question_id": 8372}, {"snippet": "urllib.request.HTTPPasswordMgr", "intent": "Keep a database of  (realm, uri) -> (user, password) mappings.", "question_id": 11786}, {"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}, {"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}, {"snippet": "errno.ENOTUNIQ", "intent": "Name not unique on network", "question_id": 3581}, {"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}, {"snippet": "grp.getgrall()", "intent": "Return a list of all available group entries , in arbitrary order .", "question_id": 4271}, {"snippet": "winreg.LoadKey(key, sub_key, file_name)", "intent": "Creates a subkey under the specified `key` and stores registration information from a specified file into that subkey . `sub_key` is a string that identifies the subkey to load . `file_name` is the name of the file to load registry data from .", "question_id": 12137}, {"snippet": "test_case.assertNotEqual(first, second)", "intent": "Test that `first` and `second` are not equal .", "question_id": 11377}, {"snippet": "pkgutil.ModuleInfo(module_finder, name, ispkg)", "intent": "A namedtuple that holds a brief summary of a module \u2019 s info . With arguments `module_finder`, `name`, `ispkg`.", "question_id": 7435}, {"snippet": "resource.RLIMIT_MSGQUEUE", "intent": "The number of bytes that can be allocated for POSIX message queues.", "question_id": 8087}, {"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}, {"snippet": "help()", "intent": "Invoke the built-in help system .", "question_id": 4031}, {"snippet": "tkinter.tix.ExFileSelectBox", "intent": "The ExFileSelectBox widget is usually embedded in a tixExFileSelectDialog widget.", "question_id": 10567}, {"snippet": "sys._getframe()", "intent": "Return a frame object from the call stack .", "question_id": 9806}, {"snippet": "email.message_from_string(s)", "intent": "Return a message object structure from a string . This is equivalent to Parser ( ) .parsestr ( `s` ) .", "question_id": 3404}, {"snippet": "tarfile.ENCODING", "intent": "The default character encoding: 'utf-8' on Windows, the value returned by sys.getfilesystemencoding() otherwise.", "question_id": 9908}, {"snippet": "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7402}, {"snippet": "turtle.circle(radius)", "intent": "Draw a circle with given `radius` .", "question_id": 10923}, {"snippet": "ErrorHandler.warning(exception)", "intent": "Called when the parser presents minor warning information to the application . Raising an `exception` in this method will cause parsing to end .", "question_id": 12588}, {"snippet": "xml.sax.SAXParseException(msg, exception, locator)", "intent": "Subclass of SAXException raised on parse errors . With arguments `msg`, `exception`, `locator`.", "question_id": 12599}, {"snippet": "stringprep.in_table_c5(code)", "intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "question_id": 9543}, {"snippet": "audioop.findmax(fragment, length)", "intent": "Search `fragment` for a slice of `length` length samples ( not bytes ! )", "question_id": 690}, {"snippet": "sunau.AUDIO_FILE_ENCODING_ADPCM_G721", "intent": "Additional known values of the encoding field from the AU header, but which are not supported by this module.", "question_id": 9703}, {"snippet": "multiprocessing.active_children()", "intent": "Return list of all live children of the current process .", "question_id": 6219}, {"snippet": "@dataclasses.dataclass(order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition .", "question_id": 2161}, {"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object .", "question_id": 12550}, {"snippet": "winreg.KEY_SET_VALUE", "intent": "Required to create, delete, or set a registry value.", "question_id": 12167}, {"snippet": "message.get_params()", "intent": "Return the message \u2019 s Content-Type parameters , as a list .", "question_id": 2983}, {"snippet": "generator.clone(fp)", "intent": "Return an independent clone of this Generator instance with the exact same options , and `fp` as the new outfp .", "question_id": 3104}, {"snippet": "ctypes.GetLastError()", "intent": "Windows only : Returns the last error code set by Windows in the calling thread .", "question_id": 1823}, {"snippet": "fileinput.lineno()", "intent": "Return the cumulative line number of the line that has just been read .", "question_id": 3794}, {"snippet": "IMAP4.error", "intent": "Exception raised on any errors.", "question_id": 4673}, {"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}, {"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}, {"snippet": "gc.DEBUG_UNCOLLECTABLE", "intent": "Print information of uncollectable objects found (objects which are not reachable but cannot be freed by the collector).", "question_id": 4191}, {"snippet": "winreg.KEY_NOTIFY", "intent": "Required to request change notifications for a registry key or for subkeys of a registry key.", "question_id": 12170}, {"snippet": "bytes(source, encoding)", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added : Only ASCII characters are permitted in bytes literals ( regardless of the declared `source` code `encoding` ) .", "question_id": 9258}, {"snippet": "widget.set(value)", "intent": "Sets the `value` of the combobox to value .", "question_id": 10600}, {"snippet": "datetime.time(hour=0, minute=0)", "intent": "All arguments are optional . With arguments `hour`, `minute`.", "question_id": 2321}, {"snippet": "asyncio.as_completed(aws, loop=None)", "intent": "Run awaitable objects in the `aws` set concurrently . With arguments `loop`.", "question_id": 616}, {"snippet": "doctest.DocFileSuite(*paths, setUp=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `setUp` specifies a set-up function for the test suite . With arguments `*paths`.", "question_id": 2799}, {"snippet": "len(d)", "intent": "Return the number of items in the dictionary `d` .", "question_id": 9471}, {"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}, {"snippet": "tkinter.tix.HList", "intent": "The HList widget can be used to display any data that have a hierarchical structure, for example, file system directory trees.", "question_id": 10570}, {"snippet": "ordered_dict.move_to_end(key, last=True)", "intent": "Move an existing `key` to either end of an ordered dictionary . The item is moved to the right end if `last` is true ( the default ) or to the beginning if last is false .", "question_id": 1394}, {"snippet": "str.rpartition(sep)", "intent": "Split the string at the last occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9234}, {"snippet": "sys.is_finalizing()", "intent": "Return True if the Python interpreter is shutting down , False otherwise .", "question_id": 9819}, {"snippet": "HTTPConnection.putrequest(method, url, skip_accept_encoding=False)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) . To disable automatic sending of Host : or Accept-Encoding : headers ( for example to accept additional content encodings ) , specify `skip_host` or `skip_accept_encoding` with non-False values .", "question_id": 4446}, {"snippet": "os.system(command)", "intent": "Execute the `command` ( a string ) in a subshell .", "question_id": 7068}, {"snippet": "platform.java_ver('', ''), '', ''), release='', vminfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7491}, {"snippet": "test_case.assertAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11420}, {"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}, {"snippet": "_c_data.from_buffer_copy(source, offset)", "intent": "This method creates a ctypes instance , copying the buffer from the `source` object buffer which must be readable . The optional `offset` parameter specifies an offset into the source buffer in bytes ; the default is zero .", "question_id": 1845}, {"snippet": "locale.LC_MONETARY", "intent": "Locale category for formatting of monetary values.", "question_id": 5407}, {"snippet": "stream_reader.readuntil(separator=b'\\n')", "intent": "Read data from the stream until `separator` is found .", "question_id": 509}, {"snippet": "raw_io_base.readall()", "intent": "Read and return all the bytes from the stream until EOF , using multiple calls to the stream if necessary .", "question_id": 5086}, {"snippet": "base64.a85decode(b, adobe=False)", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e .", "question_id": 738}, {"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}, {"snippet": "TarFile.extractfile(member)", "intent": "Extract a `member` from the archive as a file object .", "question_id": 9948}, {"snippet": "locale.nl_langinfo(option)", "intent": "Return some locale-specific information as a string . With arguments `option`.", "question_id": 5353}, {"snippet": "os.getgrouplist(user, group)", "intent": "Return list of `group` ids that `user` belongs to .", "question_id": 6677}, {"snippet": "ssl.RAND_status()", "intent": "Return True if the SSL pseudo-random number generator has been seeded with \u2018 enough \u2019 randomness , and False otherwise .", "question_id": 8887}, {"snippet": "IncrementalParser.feed(data)", "intent": "Process a chunk of `data` .", "question_id": 12627}, {"snippet": "ctypes.CDLL(name, mode=DEFAULT_MODE)", "intent": "Instances of this class represent loaded shared libraries . With arguments `name`, `mode`.", "question_id": 1741}, {"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}, {"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}, {"snippet": "gc.freeze()", "intent": "Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections .", "question_id": 4184}, {"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}, {"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}, {"snippet": "IMAP4.fetch(message_set, message_parts)", "intent": "Fetch ( parts of ) messages . `message_parts` should be a string of message part names enclosed within parentheses , eg : `` ( UID BODY [ TEXT ] ) '' . With arguments `message_set`.", "question_id": 4701}, {"snippet": "pickle.Pickler(file, protocol=None, fix_imports=True)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7393}, {"snippet": "ipaddress.v6_int_to_packed(address)", "intent": "Represent an `address` as 16 packed bytes in network ( big-endian ) order .", "question_id": 5233}, {"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}, {"snippet": "filecmp.dircmp(a, b)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3760}, {"snippet": "bdb.Breakpoint(self, file, line)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 754}, {"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}, {"snippet": "pool.apply_async(func, args)", "intent": "A variant of the apply ( ) method which returns a result object . With arguments `func`, `args`.", "question_id": 6338}, {"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}, {"snippet": "text_io_base.write(s)", "intent": "Write the string `s` to the stream and return the number of characters written .", "question_id": 5145}, {"snippet": "random.seed(a=None, version=2)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7886}, {"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}, {"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}, {"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}, {"snippet": "turtle.tracer(delay=None)", "intent": "Turn turtle animation on/off and set `delay` for update drawings .", "question_id": 11060}, {"snippet": "set()", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4103}, {"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}, {"snippet": "locale.format_string(format, val, grouping=False, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5387}, {"snippet": "directory.add_file(file, src=None)", "intent": "Add a `file` to the current component of the directory , starting a new one if there is no current component . If the `src` file is specified , it is interpreted relative to the current directory .", "question_id": 6104}, {"snippet": "patch.object(target, attribute, **kwargs, spec_set=None)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11622}, {"snippet": "modulefinder.ModuleFinder(path=None)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used .", "question_id": 6026}, {"snippet": "datetime.datetime", "intent": "A combination of a date and a time.", "question_id": 2200}, {"snippet": "sys._debugmallocstats()", "intent": "Print low-level information to stderr about the state of CPython \u2019 s memory allocator .", "question_id": 9777}, {"snippet": "functools.update_wrapper(wrapper, wrapped)", "intent": "Update a `wrapper` function to look like the `wrapped` function .", "question_id": 4156}, {"snippet": "platform.mac_ver('', ''), versioninfo=('')", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7511}, {"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}, {"snippet": "queue.get(block)", "intent": "Remove and return an item from the queue . If optional args `block` is True ( the default ) and `timeout` is None ( the default ) , block if necessary until an item is available .", "question_id": 6205}, {"snippet": "doc_test_parser.get_examples(string)", "intent": "Extract all doctest examples from the given `string` , and return them as a list of Example objects .", "question_id": 2857}, {"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}, {"snippet": "dataclasses.replace(instance, **changes)", "intent": "Creates a new object of the same type of `instance` , replacing fields with values from changes . With arguments `**changes`.", "question_id": 2193}, {"snippet": "concurrent.futures.ProcessPoolExecutor(mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1459}, {"snippet": "str(object='')", "intent": "Return a str version of `object` .", "question_id": 4114}, {"snippet": "email.parser.BytesParser(_class=None)", "intent": "Create a BytesParser instance . The `_class` and `policy` arguments have the same meaning and semantics as the _factory and policy arguments of BytesFeedParser .", "question_id": 3373}, {"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}, {"snippet": "os.killpg(pgid, sig)", "intent": "Send the signal `sig` to the process group `pgid` .", "question_id": 7038}, {"snippet": "os.sched_setaffinity(pid, mask)", "intent": "Restrict the process with PID `pid` ( or the current process if zero ) to a set of CPUs . `mask` is an iterable of integers representing the set of CPUs to which the process should be restricted .", "question_id": 7113}, {"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}, {"snippet": "HTTPResponse.read(amt)", "intent": "Reads and returns the response body , or up to the next `amt` bytes .", "question_id": 4455}, {"snippet": "py_compile.compile(file, dfile=None)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . If `dfile` is specified , it is used as the name of the source file in error messages when instead of file .", "question_id": 7823}, {"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}, {"snippet": "test.support.reap_children()", "intent": "Use this at the end of test_main whenever sub-processes are started .", "question_id": 10256}, {"snippet": "io.StringIO()", "intent": "An in-memory stream for text I/O .", "question_id": 5164}, {"snippet": "TarFile.extract(member)", "intent": "Extract a `member` from the archive to the current working directory , using its full name .", "question_id": 9940}, {"snippet": "__import__(name, locals=None, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4144}, {"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}, {"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}, {"snippet": "buffered_io_base.read1()", "intent": "Read and return up to `size` bytes , with at most one call to the underlying raw stream \u2019 s read ( ) ( or readinto ( ) ) method .", "question_id": 5095}, {"snippet": "binascii.b2a_qp(data, quotetabs=False, istext=True)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded . If the optional argument `istext` is present and true , newlines are not encoded but trailing whitespace will be encoded .", "question_id": 832}, {"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}, {"snippet": "class.__bases__", "intent": "The tuple of base classes of a class object.", "question_id": 9501}, {"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}, {"snippet": "formatter.end_paragraph(blanklines)", "intent": "Close any open paragraphs and insert at least `blanklines` before the next paragraph .", "question_id": 3819}, {"snippet": "fileinput.FileInput(files=None)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . With arguments `files`.", "question_id": 3801}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdout=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 525}, {"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891}, {"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}, {"snippet": "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID", "intent": "Constants for Linux host/guest communication.", "question_id": 8603}, {"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}, {"snippet": "cgitb.enable()", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook .", "question_id": 1059}, {"snippet": "curses.setupterm(term=None, fd=-1)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used . `fd` is the file descriptor to which any initialization sequences will be sent ; if not supplied or -1 , the file descriptor for sys.stdout will be used .", "question_id": 1982}, {"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}, {"snippet": "@abc.abstractclassmethod", "intent": "A subclass of the built-in classmethod(), indicating an abstract classmethod.", "question_id": 5}, {"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}, {"snippet": "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)", "intent": "This class implements the ContentHandler interface by writing SAX events back into an XML document . `out` should be a file-like object which will default to sys.stdout . `encoding` is the encoding of the output stream which defaults to 'iso-8859-1 ' . `short_empty_elements` controls the formatting of elements that contain no content : if False ( the default ) they are emitted as a pair of start/end tags , if set to True they are emitted as a single self-closed tag .", "question_id": 12665}, {"snippet": "policy.message_factory", "intent": "A factory function for constructing a new empty message object.", "question_id": 3418}, {"snippet": "doctest.Example(source, want, exc_msg=None, lineno=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`, `lineno`.", "question_id": 2829}, {"snippet": "loop.getaddrinfo(host, port, family=0, proto=0)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`, `family`, `proto`.", "question_id": 295}, {"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}, {"snippet": "IMAP4.abort", "intent": "IMAP4 server errors cause this exception to be raised.", "question_id": 4674}, {"snippet": "compileall.compile_dir(dir, quiet=0)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `quiet` is False or 0 ( the default ) , the filenames and other information are printed to standard out .", "question_id": 1414}, {"snippet": "zipfile.ZIP_STORED", "intent": "The numeric constant for an uncompressed archive member.", "question_id": 12788}, {"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}, {"snippet": "counter.update()", "intent": "Elements are counted from an iterable or added-in from another mapping ( or counter ) .", "question_id": 1349}, {"snippet": "webbrowser.open_new(url)", "intent": "Open `url` in a new window of the default browser , if possible , otherwise , open url in the only browser window .", "question_id": 12106}, {"snippet": "imp.reload(module)", "intent": "Reload a previously imported `module` .", "question_id": 4766}, {"snippet": "difflib.SequenceMatcher(a='', autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2678}, {"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}, {"snippet": "multiprocessing.pool.Pool(processes)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted .", "question_id": 6330}, {"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}, {"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}, {"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}, {"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}, {"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}, {"snippet": "enum.unique()", "intent": "Enum class decorator that ensures only one name is bound to any one value .", "question_id": 3503}, {"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247}, {"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . The type of socket opened depends on the `socktype` argument , which defaults to socket.SOCK_DGRAM and thus opens a UDP socket . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5499}, {"snippet": "codecs.StreamReader(stream)", "intent": "Constructor for a StreamReader instance . All `stream` readers must provide this constructor interface .", "question_id": 1284}, {"snippet": "maildir_message.get_subdir()", "intent": "Return either \u201c new \u201d ( if the message should be stored in the new subdirectory ) or \u201c cur \u201d ( if the message should be stored in the cur subdirectory ) .", "question_id": 5813}, {"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}, {"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}, {"snippet": "email.utils.formatdate(localtime=False)", "intent": "Returns a date string as per RFC 2822 , e.g . Optional `localtime` is a flag that when True , interprets timeval , and returns a date relative to the local timezone instead of UTC , properly taking daylight savings time into account .", "question_id": 3470}, {"snippet": "json.JSONDecoder(object_pairs_hook=None)", "intent": "Simple JSON decoder . `object_pairs_hook` , if specified will be called with the result of every JSON object decoded with an ordered list of pairs .", "question_id": 5316}, {"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}, {"snippet": "selectors.DefaultSelector", "intent": "The default selector class, using the most efficient implementation available on the current platform.", "question_id": 8225}, {"snippet": "getattr(object, name, default)", "intent": "Return the value of the named attribute of `object` . `name` must be a string . If the named attribute does not exist , `default` is returned if provided , otherwise AttributeError is raised .", "question_id": 4025}, {"snippet": "bz2.open(filename, compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 878}, {"snippet": "stat.S_IFLNK", "intent": "Symbolic link.", "question_id": 9085}, {"snippet": "logging.handlers.RotatingFileHandler(filename, mode='a')", "intent": "Returns a new instance of the RotatingFileHandler class . When backupCount is non-zero , the system will save old log files by appending the extensions \u2018 .1 \u2019 , \u2018 .2 \u2019 etc. , to the `filename` . If `mode` is not specified , ' a ' is used .", "question_id": 5459}, {"snippet": "email.parser.Parser(policy=policy.compat32)", "intent": "This class is parallel to BytesParser , but handles string input . With arguments `policy`.", "question_id": 3386}, {"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter . If `uri` is true , database is interpreted as a URI .", "question_id": 8797}, {"snippet": "Dialect.escapechar", "intent": "A one-character string used by the writer to escape the delimiter if quoting is set to QUOTE_NONE and the quotechar if doublequote is False.", "question_id": 1725}, {"snippet": "xml.dom.getDOMImplementation(features=())", "intent": "Return a suitable DOM implementation . The `features` list must be a sequence of ( feature , version ) pairs which are passed to the hasFeature ( ) method on available DOMImplementation objects .", "question_id": 12305}, {"snippet": "bdb.set_next(frame)", "intent": "Stop on the next line in or below the given `frame` .", "question_id": 786}, {"snippet": "symbol.is_imported()", "intent": "Return True if the symbol is created from an import statement .", "question_id": 9756}, {"snippet": "test.support.EnvironmentVarGuard", "intent": "Class used to temporarily set or unset environment variables.", "question_id": 10286}, {"snippet": "collections.namedtuple(typename, field_names, rename=False, defaults=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . `defaults` can be None or an iterable of default values .", "question_id": 1380}, {"snippet": "test_case.assertCountEqual(first, second, msg=None)", "intent": "Test that sequence `first` contains the same elements as `second` , regardless of their order . With arguments `msg`.", "question_id": 11446}, {"snippet": "decimal.FloatOperation", "intent": "Enable stricter semantics for mixing floats and Decimals.", "question_id": 2594}, {"snippet": "subprocess.call(args, stdout=None)", "intent": "Run the command described by `args` . Code needing to capture `stdout` or `stderr` should use run ( ) instead :", "question_id": 9661}, {"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}, {"snippet": "subprocess.Popen(args, close_fds=True)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `close_fds` is true , all file descriptors except 0 , 1 and 2 will be closed before the child process is executed .", "question_id": 9606}, {"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}, {"snippet": "gzip.GzipFile(filename=None)", "intent": "Constructor for the GzipFile class , which simulates most of the methods of a file object , with the exception of the truncate ( ) method . At least one of `fileobj` and `filename` must be given a non-trivial value .", "question_id": 4283}, {"snippet": "xmlparser.ElementDeclHandler(name, model)", "intent": "Called once for each element type declaration . `name` is the name of the element type , and `model` is a representation of the content model .", "question_id": 7758}, {"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, strict=True)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `strict`.", "question_id": 1576}, {"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}, {"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}, {"snippet": "sys.warnoptions", "intent": "This is an implementation detail of the warnings framework; do not modify this value.", "question_id": 9855}, {"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}, {"snippet": "chunk.skip()", "intent": "Skip to the end of the chunk .", "question_id": 1092}, {"snippet": "Path.open(mode='r', buffering=-1)", "intent": "Open the file pointed to by the path , like the built-in open ( ) function does : With arguments `mode`, `buffering`.", "question_id": 7298}, {"snippet": "dict(mapping, **kwarg)", "intent": "Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments . If a positional argument is given and it is a `mapping` object , a dictionary is created with the same key-value pairs as the mapping object . With arguments `**kwarg`.", "question_id": 9468}, {"snippet": "sqlite3.Cursor", "intent": "A Cursor instance has the following attributes and methods.", "question_id": 8839}, {"snippet": "errno.EACCES", "intent": "Permission denied", "question_id": 3518}, {"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}, {"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}, {"snippet": "os.RWF_NOWAIT", "intent": "Do not wait for data which is not immediately available.", "question_id": 6786}, {"snippet": "ConfigParser.BOOLEAN_STATES", "intent": "By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "question_id": 1493}, {"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}, {"snippet": "smtpd.PureProxy(localaddr, remoteaddr)", "intent": "Create a new pure proxy server . Everything will be relayed to `remoteaddr` . With arguments `localaddr`.", "question_id": 8425}, {"snippet": "source_file_loader.path", "intent": "The path to the source file.", "question_id": 4891}, {"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}, {"snippet": "curses.beep()", "intent": "Emit a short attention sound .", "question_id": 1921}, {"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}, {"snippet": "IMAP4.partial(message_num, message_part, start, length)", "intent": "Fetch truncated part of a message . With arguments `message_num`, `message_part`, `start`, `length`.", "question_id": 4720}, {"snippet": "widget.state()", "intent": "Modify or inquire widget state .", "question_id": 10595}, {"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}, {"snippet": "signature.replace()", "intent": "Create a new Signature instance based on the instance replace was invoked on .", "question_id": 4990}, {"snippet": "bdb.Breakpoint(self, file, line, temporary=0, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 759}, {"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}, {"snippet": "CookiePolicy.domain_return_ok(domain, request)", "intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "question_id": 4534}, {"snippet": "cursor.fetchmany()", "intent": "Fetches the next set of rows of a query result , returning a list .", "question_id": 8845}, {"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}, {"snippet": "View.Close()", "intent": "Close the view , through MsiViewClose ( ) .", "question_id": 6076}, {"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}, {"snippet": "InteractiveConsole.interact(banner=None, exitmsg=None)", "intent": "Closely emulate the interactive Python console . The optional `banner` argument specify the banner to print before the first interaction ; by default it prints a banner similar to the one printed by the standard Python interpreter , followed by the class name of the console object in parentheses ( so as not to confuse this with the real interpreter \u2013 since it \u2019 s so close ! The optional `exitmsg` argument specifies an exit message printed when exiting .", "question_id": 1187}, {"snippet": "window.chgat(y, x, num, attr)", "intent": "Set the attributes of `num` characters at the current cursor position , or at position ( `y` , `x` ) if supplied . With arguments `attr`.", "question_id": 2033}, {"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}, {"snippet": "test_case.assertAlmostEqual(first, second)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero .", "question_id": 11417}, {"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004}, {"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}, {"snippet": "asyncio.wait(aws)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` .", "question_id": 607}, {"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}, {"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}, {"snippet": "datetime.replace(second=self.second)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `second`.", "question_id": 2290}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY", "intent": "Expat was not able to allocate memory internally.", "question_id": 7797}, {"snippet": "logging.setLogRecordFactory(factory)", "intent": "Set a callable which is used to create a LogRecord . The `factory` has the following signature :", "question_id": 5652}, {"snippet": "FutureWarning", "intent": "Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.", "question_id": 3707}, {"snippet": "path_finder.find_spec(fullname, target=None)", "intent": "Class method that attempts to find a spec for the module specified by `fullname` on sys.path or , if defined , on `path` . With arguments `target`.", "question_id": 4877}, {"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}, {"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}, {"snippet": "ascii(object)", "intent": "As repr ( ) , return a string containing a printable representation of an `object` , but escape the non-ASCII characters in the string returned by repr ( ) using \\x , \\u or \\U escapes .", "question_id": 3976}, {"snippet": "re.match(pattern, string, flags=0)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7940}, {"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}, {"snippet": "mock.assert_called_once_with(*args, **kwargs)", "intent": "Assert that the mock was called exactly once and that that call was with the specified arguments . With arguments `*args`, `**kwargs`.", "question_id": 11573}, {"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996}, {"snippet": "lzma.LZMAFile(check=-1)", "intent": "Open an LZMA-compressed file in binary `mode` . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5670}, {"snippet": "socket.socketpair(family)", "intent": "Build a pair of connected socket objects using the given address `family` , socket `type` , and protocol number .", "question_id": 8625}, {"snippet": "base_handler.os_environ", "intent": "The default environment variables to be included in every request\u2019s WSGI environment.", "question_id": 12256}, {"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}, {"snippet": "Document.getElementsByTagName(tagName)", "intent": "Search for all descendants ( direct children , children \u2019 s children , etc . ) With arguments `tagName`.", "question_id": 12352}, {"snippet": "str.isalnum()", "intent": "Return true if all characters in the string are alphanumeric and there is at least one character , false otherwise .", "question_id": 9202}, {"snippet": "joinable_queue.poll()", "intent": "Return whether there is any data available to be read .", "question_id": 6235}, {"snippet": "SSLContext.wrap_socket(sock, server_side=False)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket .", "question_id": 9023}, {"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}, {"snippet": "Telnet.write(buffer)", "intent": "Write a byte string to the socket , doubling any IAC characters . With arguments `buffer`.", "question_id": 10027}, {"snippet": "http.client.HTTPConnection(host, timeout)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .", "question_id": 4366}, {"snippet": "xml.sax.handler.EntityResolver", "intent": "Basic interface for resolving entities.", "question_id": 12566}, {"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}, {"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations .", "question_id": 5417}, {"snippet": "date.toordinal()", "intent": "Return the proleptic Gregorian ordinal of the date , where January 1 of year 1 has ordinal 1 .", "question_id": 2238}, {"snippet": "zipfile.ZipFile(file, mode='r', compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12797}, {"snippet": "context_var.reset(token)", "intent": "Reset the context variable to the value it had before the ContextVar.set ( ) that created the `token` was used .", "question_id": 1643}, {"snippet": "filecmp.cmpfiles(dir1, dir2, common)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` .", "question_id": 3757}, {"snippet": "calendar.prcal(year, w=0, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `l`.", "question_id": 1006}, {"snippet": "turtle.radians()", "intent": "Set the angle measurement units to radians .", "question_id": 10947}, {"snippet": "message.values()", "intent": "Return a list of all the message \u2019 s field values .", "question_id": 2970}, {"snippet": "dict.fromkeys(iterable, value)", "intent": "Create a new dictionary with keys from `iterable` and values set to `value` .", "question_id": 9480}, {"snippet": "__import__(name, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4137}, {"snippet": "TarFile.list()", "intent": "Print a table of contents to sys.stdout .", "question_id": 9927}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`.", "question_id": 60}, {"snippet": "datetime.timedelta(minutes=0)", "intent": "All arguments are optional and default to 0 . With arguments `minutes`.", "question_id": 2209}, {"snippet": "SummaryInformation.GetProperty(field)", "intent": "Return a property of the summary , through MsiSummaryInfoGetProperty ( ) . `field` is the name of the property , and can be one of the constants PID_CODEPAGE , PID_TITLE , PID_SUBJECT , PID_AUTHOR , PID_KEYWORDS , PID_COMMENTS , PID_TEMPLATE , PID_LASTAUTHOR , PID_REVNUMBER , PID_LASTPRINTED , PID_CREATE_DTM , PID_LASTSAVE_DTM , PID_PAGECOUNT , PID_WORDCOUNT , PID_CHARCOUNT , PID_APPNAME , or PID_SECURITY .", "question_id": 6077}, {"snippet": "datetime.isoformat(sep='T')", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS The optional argument `sep` ( default 'T ' ) is a one-character separator , placed between the date and time portions of the result .", "question_id": 2307}, {"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}, {"snippet": "tkinter.tix.CheckList", "intent": "The CheckList widget displays a list of items to be selected by the user.", "question_id": 10571}, {"snippet": "signal.getitimer(which)", "intent": "Returns current value of a given interval timer specified by `which` .", "question_id": 8393}, {"snippet": "types.WrapperDescriptorType", "intent": "The type of methods of some built-in data types and base classes such as object.__init__() or object.__lt__().", "question_id": 11192}, {"snippet": "turtle.shapetransform(t12=None, t22=None)", "intent": "Set or return the current transformation matrix of the turtle shape . Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row `t11` , `t12` and second row `t21` , 22 . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "question_id": 11017}, {"snippet": "platform.popen(cmd)", "intent": "Portable popen ( ) interface . With arguments `cmd`.", "question_id": 7505}, {"snippet": "condition.wait()", "intent": "Wait until notified .", "question_id": 579}, {"snippet": "test_case.assertMultiLineEqual(first, second)", "intent": "Test that the multiline string `first` is equal to the string `second` .", "question_id": 11448}, {"snippet": "curses.panel.new_panel(win)", "intent": "Returns a panel object , associating it with the given window `win` .", "question_id": 2142}, {"snippet": "loop.sendfile(transport, file, count=None)", "intent": "Send a `file` over a `transport` . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 258}, {"snippet": "xml.etree.ElementTree.Element(tag, **extra)", "intent": "Element class . `tag` is the element name . With arguments `**extra`.", "question_id": 12477}, {"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}, {"snippet": "DefaultCookiePolicy.strict_ns_domain", "intent": "Flags indicating how strict to be with domain-matching rules for Netscape cookies.", "question_id": 4549}, {"snippet": "socket.detach()", "intent": "Put the socket object into closed state without actually closing the underlying file descriptor .", "question_id": 8678}, {"snippet": "email_message.add_header(_name, _value, **_params)", "intent": "Extended header setting . `_name` is the header field to add and `_value` is the primary value for the header . With arguments `**_params`.", "question_id": 3253}, {"snippet": "xmlrpc.client.dumps(params, methodresponse=None, allow_none=False)", "intent": "Convert `params` into an XML-RPC request . or into a response if `methodresponse` is true . Python \u2019 s None value can not be used in standard XML-RPC ; to allow using it via an extension , provide a true value for `allow_none` .", "question_id": 12707}, {"snippet": "str.replace(old, new, count)", "intent": "Return a copy of the string with all occurrences of substring `old` replaced by `new` . If the optional argument `count` is given , only the first count occurrences are replaced .", "question_id": 9224}, {"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}, {"snippet": "urllib.request.urlopen(url)", "intent": "Open the URL `url` , which can be either a string or a Request object .", "question_id": 11752}, {"snippet": "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)", "intent": "Similar to CGIHandler , but instead of using the sys and os modules , the CGI environment and I/O streams are specified explicitly . With arguments `stdin`, `stdout`, `stderr`, `environ`.", "question_id": 12238}, {"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}, {"snippet": "ArgumentParser.add_argument(name or flags..., action)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.", "question_id": 67}, {"snippet": "math.inf", "intent": "A floating-point positive infinity.", "question_id": 5937}, {"snippet": "message.set_param(param, value, header='Content-Type', replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . If `replace` is False ( the default ) the header is moved to the end of the list of headers . With arguments `param`.", "question_id": 3008}, {"snippet": "deque.index(x, start)", "intent": "Return the position of `x` in the deque ( at or after index `start` and before index `stop` ) .", "question_id": 1361}, {"snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11676}, {"snippet": "base_handler.log_exception(exc_info)", "intent": "Log the `exc_info` tuple in the server log .", "question_id": 12260}, {"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}, {"snippet": "trace.Trace(timing=False)", "intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "question_id": 10715}, {"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590}, {"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}, {"snippet": "re.split(pattern, string)", "intent": "Split `string` by the occurrences of `pattern` .", "question_id": 7943}, {"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}, {"snippet": "difflib.unified_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2653}, {"snippet": "oss_audio_device.close()", "intent": "Explicitly close the audio device .", "question_id": 7178}, {"snippet": "window.border(ls, rs)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`.", "question_id": 2025}, {"snippet": "asyncio.ensure_future(obj, loop=None)", "intent": "Return : If `obj` is neither of the above a TypeError is raised . With arguments `loop`.", "question_id": 356}, {"snippet": "cgi.parse_multipart(fp, pdict, encoding=\"utf-8\", errors=\"replace\")", "intent": "Parse input of type multipart/form-data ( for file uploads ) . Arguments are `fp` for the input file , `pdict` for a dictionary containing other parameters in the Content-Type header , and `encoding` , the request encoding . With arguments `errors`.", "question_id": 1050}, {"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}, {"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}, {"snippet": "datetime.timedelta", "intent": "A duration expressing the difference between two date, time, or datetime instances to microsecond resolution.", "question_id": 2201}, {"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}, {"snippet": "logging.info(msg, *args, **kwargs)", "intent": "Logs a message with level INFO on the root logger . With arguments `msg`, `*args`, `**kwargs`.", "question_id": 5638}, {"snippet": "subprocess.run(args, timeout=None)", "intent": "Run the command described by `args` . ( `timeout` , `input` , `check` , and `capture_output` are not . )", "question_id": 9575}, {"snippet": "gc.get_stats()", "intent": "Return a list of three per-generation dictionaries containing collection statistics since interpreter start .", "question_id": 4175}, {"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}, {"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971}, {"snippet": "EntityResolver.resolveEntity(publicId, systemId)", "intent": "Resolve the system identifier of an entity and return either the system identifier to read from as a string , or an InputSource to read from . The default implementation returns `systemId` . With arguments `publicId`.", "question_id": 12585}, {"snippet": "ur_lopener.retrieve(url, filename=None)", "intent": "Retrieves the contents of `url` and places it in `filename` .", "question_id": 11897}, {"snippet": "datetime.utctimetuple()", "intent": "If datetime instance d is naive , this is the same as d.timetuple ( ) except that tm_isdst is forced to 0 regardless of what d.dst ( ) returns .", "question_id": 2300}, {"snippet": "crypt.mksalt()", "intent": "Return a randomly generated salt of the specified `method` .", "question_id": 1676}, {"snippet": "resource.RLIMIT_NOFILE", "intent": "The maximum number of open file descriptors for the current process.", "question_id": 8082}, {"snippet": "context.logical_or(x, y)", "intent": "Applies the logical operation or between each operand \u2019 s digits . With arguments `x`, `y`.", "question_id": 2547}, {"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}, {"snippet": "urllib.request.HTTPCookieProcessor(cookiejar=None)", "intent": "A class to handle HTTP Cookies . With arguments `cookiejar`.", "question_id": 11783}, {"snippet": "loop.call_soon(callback, *args)", "intent": "Schedule a `callback` to be called with args arguments at the next iteration of the event loop . With arguments `*args`.", "question_id": 189}, {"snippet": "xmlparser.StartNamespaceDeclHandler(prefix, uri)", "intent": "Called when an element contains a namespace declaration . With arguments `prefix`, `uri`.", "question_id": 7767}, {"snippet": "window.leaveok(flag)", "intent": "If `flag` is True , cursor is left where it is on update , instead of being at \u201c cursor position. \u201d This reduces cursor movement where possible .", "question_id": 2092}, {"snippet": "contextlib.ExitStack", "intent": "A context manager that is designed to make it easy to programmatically combine other context managers and cleanup functions, especially those that are optional or otherwise driven by input data.", "question_id": 1626}, {"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}, {"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}, {"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}, {"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}, {"snippet": "urllib.request.HTTPSHandler(debuglevel=0)", "intent": "A class to handle opening of HTTPS URLs . With arguments `debuglevel`.", "question_id": 11803}, {"snippet": "pool.close()", "intent": "Prevents any more tasks from being submitted to the pool .", "question_id": 6356}, {"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}, {"snippet": "config_parser.read_string(string, source='<string>')", "intent": "Parse configuration data from a `string` . Optional argument `source` specifies a context-specific name of the string passed .", "question_id": 1517}, {"snippet": "base_selector.modify(fileobj, events)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8218}, {"snippet": "unittest.TextTestRunner(warnings=None)", "intent": "A basic test runner implementation that outputs results to a `stream` . Deprecation `warnings` caused by deprecated unittest methods are also special-cased and , when the warning filters are 'default ' or 'always ' , they will appear only once per-module , in order to avoid too many warning messages .", "question_id": 11540}, {"snippet": "urllib.request.urlopen(url, data=None, context=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed . If `context` is specified , it must be a ssl.SSLContext instance describing the various SSL options .", "question_id": 11761}, {"snippet": "pprint.pformat(object, depth=None)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7636}, {"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}, {"snippet": "socket.detach()", "intent": "Put the socket object into closed state without actually closing the underlying file descriptor .", "question_id": 8678}, {"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}, {"snippet": "doctest.DocFileSuite(*paths, tearDown=None)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `tearDown` specifies a tear-down function for the test suite . With arguments `*paths`.", "question_id": 2800}, {"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}, {"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}, {"snippet": "pathlib.PureWindowsPath(*pathsegments)", "intent": "A subclass of PurePath , this path flavour represents Windows filesystem paths : With arguments `*pathsegments`.", "question_id": 7242}, {"snippet": "plistlib.loads(data, fmt=None, use_builtin_types=True)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `use_builtin_types`.", "question_id": 7559}, {"snippet": "test.support.WarningsRecorder", "intent": "Class used to record warnings for unit tests.", "question_id": 10295}, {"snippet": "Class.lineno", "intent": "The line number in the file where the definition starts.", "question_id": 7719}, {"snippet": "bisect.bisect_left(a, x)", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order .", "question_id": 852}, {"snippet": "pprint.pformat(object, indent=1)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7634}, {"snippet": "test.support.check_no_resource_warning(testcase)", "intent": "Context manager to check that no ResourceWarning was raised . With arguments `testcase`.", "question_id": 10166}, {"snippet": "message.del_param(param)", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3009}, {"snippet": "turtle.setup()", "intent": "Set the size and position of the main window .", "question_id": 11117}, {"snippet": "ZipFile.namelist()", "intent": "Return a list of archive members by name .", "question_id": 12805}, {"snippet": "Match.expand(template)", "intent": "Return the string obtained by doing backslash substitution on the `template` string template , as done by the sub ( ) method .", "question_id": 7995}, {"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}, {"snippet": "cmath.tan(x)", "intent": "Return the tangent of `x` .", "question_id": 1106}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}, {"snippet": "window.inch(y)", "intent": "Return the character at the given position in the window . With arguments `y`.", "question_id": 2070}, {"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}, {"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}, {"snippet": "window.putwin(file)", "intent": "Write all data associated with the window into the provided `file` object .", "question_id": 2103}, {"snippet": "stringprep.in_table_c8(code)", "intent": "Determine whether `code` is in tableC.8 ( Change display properties or are deprecated ) .", "question_id": 9546}, {"snippet": "pprint.isreadable(object)", "intent": "Determine if the formatted representation of `object` is \u201c readable , \u201d or can be used to reconstruct the value using eval ( ) .", "question_id": 7653}, {"snippet": "asyncio.SafeChildWatcher", "intent": "This implementation avoids disrupting other code spawning processes by polling every process explicitly on a SIGCHLD signal.", "question_id": 388}, {"snippet": "ctypes.cast(obj, type)", "intent": "This function is similar to the cast operator in C. It returns a new instance of `type` which points to the same memory block as `obj` .", "question_id": 1812}, {"snippet": "linecache.clearcache()", "intent": "Clear the cache .", "question_id": 5345}, {"snippet": "errno.ELIBEXEC", "intent": "Cannot exec a shared library directly", "question_id": 3588}, {"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}, {"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`.", "question_id": 2020}, {"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}, {"snippet": "shutil.copytree(src, dst, symlinks=False, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8328}, {"snippet": "types.coroutine(gen_func)", "intent": "This function transforms a generator function into a coroutine function which returns a generator-based coroutine . If `gen_func` is a generator function , it will be modified in-place .", "question_id": 11228}, {"snippet": "binascii.b2a_qp(data, quotetabs=False)", "intent": "Convert binary `data` to a line ( s ) of ASCII characters in quoted-printable encoding . If the optional argument `quotetabs` is present and true , all tabs and spaces will be encoded .", "question_id": 829}, {"snippet": "unittest.mock.patch(target, **kwargs, new_callable=None)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11614}, {"snippet": "os.O_ASYNC", "intent": "The above constants are extensions and not present if they are not defined by the C library.", "question_id": 6763}, {"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927}, {"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}, {"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}, {"snippet": "decimal.DefaultContext", "intent": "This context is used by the Context constructor as a prototype for new contexts.", "question_id": 2498}, {"snippet": "lzma.compress(data, format=FORMAT_XZ)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5705}, {"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}, {"snippet": "trace.Trace(timing=False)", "intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "question_id": 10715}, {"snippet": "queue.maxsize", "intent": "Number of items allowed in the queue.", "question_id": 449}, {"snippet": "zipfile.ZipFile(file)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object .", "question_id": 12792}, {"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}, {"snippet": "calendar.LocaleTextCalendar(locale=None)", "intent": "This subclass of TextCalendar can be passed a `locale` name in the constructor and will return month and weekday names in the specified locale .", "question_id": 979}, {"snippet": "struct.pack(v1, v2)", "intent": "Identical to the pack ( ) function , using the compiled format . With arguments `v1`, `v2`.", "question_id": 9559}, {"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}, {"snippet": "math.floor(x)", "intent": "Return the floor of `x` , the largest integer less than or equal to x .", "question_id": 5889}, {"snippet": "symbol.is_local()", "intent": "Return True if the symbol is local to its block .", "question_id": 9760}, {"snippet": "directory.glob(pattern, exclude=None)", "intent": "Add a list of files to the current component as specified in the glob `pattern` . Individual files can be excluded in the `exclude` list .", "question_id": 6112}, {"snippet": "SIG*", "intent": "All the signal numbers are defined symbolically.", "question_id": 8375}, {"snippet": "gc.collect(generation=2)", "intent": "With no arguments , run a full collection . The optional argument `generation` may be an integer specifying which generation to collect ( from 0 to 2 ) .", "question_id": 4171}, {"snippet": "open(file, mode='r')", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened .", "question_id": 4063}, {"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}, {"snippet": "zip(*iterables)", "intent": "Make an iterator that aggregates elements from each of the iterables . With arguments `*iterables`.", "question_id": 4134}, {"snippet": "unittest.removeResult(result)", "intent": "Remove a registered `result` .", "question_id": 11557}, {"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}, {"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}, {"snippet": "connection.text_factory", "intent": "Using this attribute you can control what objects are returned for the TEXT data type.", "question_id": 8826}, {"snippet": "tarfile.ExtractError", "intent": "Is raised for non-fatal errors when using TarFile.extract(), but only if TarFile.errorlevel== 2.", "question_id": 9906}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "compileall.compile_path(skip_curdir=True, maxlevels=0)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . Note that unlike the other compile functions , `maxlevels` defaults to 0 .", "question_id": 1437}, {"snippet": "connection.load_extension(path)", "intent": "This routine loads a SQLite extension from a shared library . With arguments `path`.", "question_id": 8824}, {"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}, {"snippet": "unittest.main(testLoader=unittest.defaultTestLoader)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testLoader` argument has to be a TestLoader instance , and defaults to defaultTestLoader .", "question_id": 11550}, {"snippet": "inspect.stack()", "intent": "Return a list of frame records for the caller \u2019 s stack .", "question_id": 5030}, {"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}, {"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}, {"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}, {"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}, {"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}, {"snippet": "signal.siginterrupt(signalnum, flag)", "intent": "Change system call restart behaviour : if `flag` is False , system calls will be restarted when interrupted by signal `signalnum` , otherwise system calls will be interrupted .", "question_id": 8396}, {"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}, {"snippet": "Packer.get_buffer()", "intent": "Returns the current pack buffer as a string .", "question_id": 12273}, {"snippet": "queue.get_nowait()", "intent": "Equivalent to get ( False ) .", "question_id": 6207}, {"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}, {"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}, {"snippet": "example.indent", "intent": "The example\u2019s indentation in the containing string, i.e., the number of space characters that precede the example\u2019s first prompt.", "question_id": 2838}, {"snippet": "min(arg1, arg2, *args, key)", "intent": "Return the smallest item in an iterable or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . With arguments `arg1`, `arg2`, `*args`.", "question_id": 4056}, {"snippet": "joinable_queue.send_bytes(buffer, offset, size)", "intent": "Send byte data from a bytes-like object as a complete message . If `offset` is given then data is read from that position in `buffer` . If `size` is given then that many bytes will be read from buffer .", "question_id": 6236}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`.", "question_id": 62}, {"snippet": "SSLContext.wrap_bio(incoming, outgoing)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .", "question_id": 9033}, {"snippet": "tree_builder.doctype(name, pubid, system)", "intent": "Handles a doctype declaration . `name` is the doctype name . `pubid` is the public identifier . `system` is the system identifier .", "question_id": 12545}, {"snippet": "types.FunctionType", "intent": "The type of user-defined functions and functions created by lambda  expressions.", "question_id": 11183}, {"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}, {"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}, {"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}, {"snippet": "subprocess.check_call(args, timeout=None)", "intent": "Run command with arguments . The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than `timeout` directly through to that interface . With arguments `args`.", "question_id": 9675}, {"snippet": "warnings.simplefilter(action, lineno=0, append=False)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`, `lineno`, `append`.", "question_id": 12039}, {"snippet": "doctest.DocTestSuite(module=None, extraglobs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `extraglobs` specifies an extra set of global variables , which is merged into globs .", "question_id": 2815}, {"snippet": "unittest.mock.seal(mock)", "intent": "Seal will disable the automatic creation of mocks when accessing an attribute of the `mock` being sealed or any of its attributes that are already mocks recursively .", "question_id": 11657}, {"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}, {"snippet": "errno.EXDEV", "intent": "Cross-device link", "question_id": 3523}, {"snippet": "test.support.detect_api_mismatch(ref_api, other_api)", "intent": "Returns the set of attributes , functions or methods of `ref_api` not found on `other_api` , except for a defined list of items to be ignored in this check specified in `ignore` .", "question_id": 10267}, {"snippet": "http.client.HTTPConnection(host, port=None)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number .", "question_id": 4375}, {"snippet": "telnetlib.Telnet()", "intent": "Telnet represents a connection to a Telnet server .", "question_id": 10005}, {"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}, {"snippet": "shlex.split(s)", "intent": "Split the string `s` using shell-like syntax .", "question_id": 8268}, {"snippet": "winreg.OpenKey(key, sub_key, reserved=0)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "question_id": 12139}, {"snippet": "xmlparser.ExternalEntityParserCreate(context)", "intent": "Create a \u201c child \u201d parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser . The `context` parameter should be the string passed to the ExternalEntityRefHandler ( ) handler function , described below .", "question_id": 7739}, {"snippet": "curses.ascii.alt(c)", "intent": "Return the 8-bit character corresponding to the given ASCII character ( the character bit value is bitwise-ored with 0x80 ) . With arguments `c`.", "question_id": 1916}, {"snippet": "config_parser.has_section(section)", "intent": "Indicates whether the named `section` is present in the configuration .", "question_id": 1509}, {"snippet": "xml.etree.ElementTree.ElementTree(file=None)", "intent": "ElementTree wrapper class . The tree is initialized with the contents of the XML `file` if given .", "question_id": 12509}, {"snippet": "os.register_at_fork(before=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "question_id": 7046}, {"snippet": "socket.sendfile(file, offset=0, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8735}, {"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}, {"snippet": "open(file)", "intent": "Open `file` and return a corresponding file object .", "question_id": 4062}, {"snippet": "os.walk(top)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) .", "question_id": 6975}, {"snippet": "prototype(callable)", "intent": "Create a C `callable` function ( a callback function ) from a Python callable .", "question_id": 1802}, {"snippet": "DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)", "intent": "Handle an unparsed entity declaration event . With arguments `name`, `publicId`, `systemId`, `ndata`.", "question_id": 12584}, {"snippet": "os.fwalk(top='.', onerror=None)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `onerror`.", "question_id": 6990}, {"snippet": "datetime.fromtimestamp(timestamp, tz=None)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) . If optional argument `tz` is None or not specified , the timestamp is converted to the platform \u2019 s local date and time , and the returned datetime object is naive .", "question_id": 2262}, {"snippet": "aifc.getcompname()", "intent": "Return a bytes array convertible to a human-readable description of the type of compression used in the audio file .", "question_id": 16}, {"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}, {"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}, {"snippet": "difflib.get_close_matches(word, possibilities, n=3)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `n` ( default 3 ) is the maximum number of close matches to return ; n must be greater than 0 .", "question_id": 2639}, {"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}, {"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}, {"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}, {"snippet": "turtle.begin_fill()", "intent": "To be called just before drawing a shape to be filled .", "question_id": 10965}, {"snippet": "text_wrapper.tabsize", "intent": "(default: 8) If expand_tabs is true, then all tab characters in text will be expanded to zero or more spaces, depending on the current column and the given tab size.", "question_id": 10329}, {"snippet": "test.support.CleanImport(*module_names)", "intent": "A context manager to force import to return a new module reference . With arguments `*module_names`.", "question_id": 10290}, {"snippet": "doctest.DocTestSuite(tearDown=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional arguments `setUp` , `tearDown` , and optionflags are the same as for function DocFileSuite ( ) above .", "question_id": 2812}, {"snippet": "operator.truth(obj)", "intent": "Return True if `obj` is true , and False otherwise .", "question_id": 6527}, {"snippet": "HTTPConnection.close()", "intent": "Close the connection to the server .", "question_id": 4442}, {"snippet": "collections.namedtuple(typename, field_names, defaults=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . `defaults` can be None or an iterable of default values .", "question_id": 1378}, {"snippet": "doctest.DocTestRunner(optionflags=0)", "intent": "A processing class used to execute and verify the interactive examples in a DocTest . The optional keyword argument `optionflags` can be used to control how the test runner compares expected output to actual output , and how it displays failures .", "question_id": 2864}, {"snippet": "stat.S_IRWXU", "intent": "Mask for file owner permissions.", "question_id": 9097}, {"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}, {"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}, {"snippet": "signal.alarm(time)", "intent": "If `time` is non-zero , this function requests that a SIGALRM signal be sent to the process in time seconds .", "question_id": 8386}, {"snippet": "doc_test_runner.run(test)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2873}, {"snippet": "asyncio.Transport(WriteTransport, ReadTransport)", "intent": "Interface representing a bidirectional transport , such as a TCP connection . With arguments `WriteTransport`, `ReadTransport`.", "question_id": 393}, {"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}, {"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}, {"snippet": "mmap.flush(offset, size)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6005}, {"snippet": "patch.object(target, attribute, **kwargs, spec_set=None)", "intent": "patch the named member ( `attribute` ) on an object ( `target` ) with a mock object . Arguments `new` , `spec` , `create` , `spec_set` , `autospec` and `new_callable` have the same meaning as for patch ( ) . With arguments `**kwargs`.", "question_id": 11622}, {"snippet": "sys.set_coroutine_wrapper(wrapper)", "intent": "Allows intercepting creation of coroutine objects ( only ones that are created by an async def function ; generators decorated with types.coroutine ( ) or asyncio.coroutine ( ) will not be intercepted ) . The `wrapper` argument must be either :", "question_id": 9842}, {"snippet": "queue_listener.flush()", "intent": "Ensure all logging output has been flushed .", "question_id": 5604}, {"snippet": "thread.daemon", "intent": "A boolean value indicating whether this thread is a daemon thread (True) or not (False).", "question_id": 10371}, {"snippet": "bdb.set_break(filename, lineno, cond, funcname)", "intent": "Set a new breakpoint . If the `lineno` line doesn \u2019 t exist for the `filename` passed as argument , return an error message . With arguments `cond`, `funcname`.", "question_id": 793}, {"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}, {"snippet": "cursor.description", "intent": "This read-only attribute provides the column names of the last query.", "question_id": 8852}, {"snippet": "message.walk()", "intent": "The walk ( ) method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree , in depth-first traversal order .", "question_id": 3027}, {"snippet": "os.unlink(path, dir_fd=None)", "intent": "Remove ( delete ) the file `path` . With arguments `dir_fd`.", "question_id": 6958}, {"snippet": "patch.multiple(target, **kwargs, create=False)", "intent": "Perform multiple patches in a single call . Use DEFAULT as the value if you want patch.multiple ( ) to `create` mocks for you . With arguments `target`, `**kwargs`.", "question_id": 11634}, {"snippet": "asyncio.wait(aws, loop=None, return_when=ALL_COMPLETED)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 .", "question_id": 612}, {"snippet": "winreg.OpenKeyEx(key, sub_key, reserved=0)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `reserved` is a reserved integer , and must be zero .", "question_id": 12143}, {"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}, {"snippet": "Match.group(group1)", "intent": "Returns one or more subgroups of the match . Without arguments , `group1` defaults to zero ( the whole match is returned ) .", "question_id": 7996}, {"snippet": "ssl.create_default_context()", "intent": "Return a new SSLContext object with default settings for the given `purpose` .", "question_id": 8863}, {"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}, {"snippet": "xml.etree.ElementTree.Comment()", "intent": "Comment element factory .", "question_id": 12434}, {"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}, {"snippet": "os.sched_yield()", "intent": "Voluntarily relinquish the CPU .", "question_id": 7112}, {"snippet": "maildir.get_folder(folder)", "intent": "Return a Maildir instance representing the `folder` whose name is folder .", "question_id": 5759}, {"snippet": "email.parser.HeaderParser(_class=None)", "intent": "Exactly like Parser , except that headersonly defaults to True . With arguments `_class`.", "question_id": 3393}, {"snippet": "timer.autorange(callback=None)", "intent": "Automatically determine how many times to call timeit ( ) . If `callback` is given and is not None , it will be called after each trial with two arguments : callback ( number , time_taken ) .", "question_id": 10510}, {"snippet": "ArgumentParser.parse_args(args=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 70}, {"snippet": "unicodedata.name(chr)", "intent": "Returns the name assigned to the character `chr` as a string .", "question_id": 11342}, {"snippet": "test.support.check_syntax_error(testcase, statement)", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test .", "question_id": 10231}, {"snippet": "inspect.getinnerframes(traceback)", "intent": "Get a list of frame records for a `traceback` \u2019 s frame and all inner frames .", "question_id": 5027}, {"snippet": "@abc.abstractstaticmethod", "intent": "A subclass of the built-in staticmethod(), indicating an abstract staticmethod.", "question_id": 6}, {"snippet": "mailbox.items()", "intent": "Return an iterator over ( key , message ) pairs , where key is a key and message is a message representation , if called as iteritems ( ) or return a list of such pairs if called as items ( ) .", "question_id": 5735}, {"snippet": "element.iter(tag=None)", "intent": "Creates a tree iterator with the current element as the root . If `tag` is not None or '* ' , only elements whose tag equals tag are returned from the iterator .", "question_id": 12501}, {"snippet": "audioop.cross(fragment, width)", "intent": "Return the number of zero crossings in the `fragment` passed as an argument . With arguments `width`.", "question_id": 687}, {"snippet": "stat.UF_HIDDEN", "intent": "The file should not be displayed in a GUI (Mac OS X 10.5+).", "question_id": 9119}, {"snippet": "subprocess.STD_OUTPUT_HANDLE", "intent": "The standard output device.", "question_id": 9642}, {"snippet": "list(iterable)", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range . With arguments `iterable`.", "question_id": 4045}, {"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}, {"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}, {"snippet": "Record.GetFieldCount()", "intent": "Return the number of fields of the record , through MsiRecordGetFieldCount ( ) .", "question_id": 6081}, {"snippet": "os.strerror(code)", "intent": "Return the error message corresponding to the error `code` in code .", "question_id": 6707}, {"snippet": "threading.Timer(interval, function)", "intent": "Create a timer that will run `function` with arguments `args` and keyword arguments `kwargs` , after `interval` seconds have passed .", "question_id": 10412}, {"snippet": "readline.set_completion_display_matches_hook(function)", "intent": "Set or remove the completion display `function` .", "question_id": 8048}, {"snippet": "io_base.truncate()", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5078}, {"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}, {"snippet": "html_calendar.formatyearpage(theyear, width=3)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . With arguments `theyear`.", "question_id": 963}, {"snippet": "shutil.chown(path)", "intent": "Change owner `user` and/or `group` of the given `path` .", "question_id": 8341}, {"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}, {"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}, {"snippet": "class.__subclasses__()", "intent": "Each class keeps a list of weak references to its immediate subclasses .", "question_id": 9506}, {"snippet": "sqlite3.version", "intent": "The version number of this module, as a string.", "question_id": 8791}, {"snippet": "logging.FileHandler(filename, mode='a', delay=False)", "intent": "Returns a new instance of the FileHandler class . If `mode` is not specified , ' a ' is used . If `delay` is true , then file opening is deferred until the first call to emit ( ) . With arguments `filename`.", "question_id": 5431}, {"snippet": "test_loader.loadTestsFromName(name)", "intent": "Return a suite of all test cases given a string specifier . The specifier `name` is a \u201c dotted name \u201d that may resolve either to a `module` , a test case class , a test method within a test case class , a TestSuite instance , or a callable object which returns a TestCase or TestSuite instance .", "question_id": 11494}, {"snippet": "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)", "intent": "The parameters are as for FileHandler . With arguments `filename`, `mode`, `encoding`.", "question_id": 5451}, {"snippet": "CookieJar.clear()", "intent": "Clear some cookies .", "question_id": 4496}, {"snippet": "SystemExit", "intent": "This exception is raised by the sys.exit() function.", "question_id": 3669}, {"snippet": "turtle.onrelease(fun, add=None)", "intent": "Bind `fun` to mouse-button-release events on this turtle . With arguments `add`.", "question_id": 11025}, {"snippet": "config_parser.getfloat(section, option, fallback, raw=False)", "intent": "A convenience method which coerces the `option` in the specified `section` to a floating point number . See get ( ) for explanation of `raw` , `vars` and `fallback` .", "question_id": 1537}, {"snippet": "numbers.Complex", "intent": "Subclasses of this type describe complex numbers and include the operations that work on the built-in complex type.", "question_id": 6504}, {"snippet": "html_calendar.cssclass_noday", "intent": "The CSS class for a weekday occurring in the previous or coming month.", "question_id": 971}, {"snippet": "difflib.get_close_matches(word, possibilities, cutoff=0.6)", "intent": "Return a list of the best \u201c good enough \u201d matches . `word` is a sequence for which close matches are desired ( typically a string ) , and `possibilities` is a list of sequences against which to match word ( typically a list of strings ) . Optional argument `cutoff` ( default 0.6 ) is a float in the range [ 0 , 1 ] .", "question_id": 2640}, {"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391}, {"snippet": "timer.print_exc()", "intent": "Helper to print a traceback from the timed code .", "question_id": 10515}, {"snippet": "site.getsitepackages()", "intent": "Return a list containing all global site-packages directories .", "question_id": 8409}, {"snippet": "Morsel.js_output(attrs=None)", "intent": "Return an embeddable JavaScript snippet , which , if run on a browser which supports JavaScript , will act the same as if the HTTP header was sent . The meaning for `attrs` is the same as in output ( ) .", "question_id": 4606}, {"snippet": "winreg.OpenKeyEx(key, sub_key, access=KEY_READ)", "intent": "Opens the specified `key` , returning a handle object . `sub_key` is a string that identifies the sub_key to open . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12144}, {"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}, {"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}, {"snippet": "readline.parse_and_bind(string)", "intent": "Execute the init line provided in the `string` argument .", "question_id": 8015}, {"snippet": "opcode", "intent": "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections.", "question_id": 2734}, {"snippet": "pool.apply(func, args)", "intent": "Call `func` with arguments `args` and keyword arguments `kwds` .", "question_id": 6333}, {"snippet": "bytes_generator.flatten(msg, linesep=None)", "intent": "Print the textual representation of the message object structure rooted at `msg` to the output file specified when the BytesGenerator instance was created . If `linesep` is not None , use it as the separator character between all the lines of the flattened message .", "question_id": 3088}, {"snippet": "timedelta.max", "intent": "The most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999).", "question_id": 2215}, {"snippet": "ArgumentParser.add_subparsers(title, description, prog)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments . With arguments `prog`.", "question_id": 81}, {"snippet": "time.strptime(string, format)", "intent": "Parse a `string` representing a time according to a `format` .", "question_id": 10455}, {"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}, {"snippet": "Document.createTextNode(data)", "intent": "Create and return a text node containing the `data` passed as a parameter .", "question_id": 12347}, {"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}, {"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}, {"snippet": "struct.pack(format, v1, v2)", "intent": "Return a bytes object containing the values `v1` , `v2` , \u2026 packed according to the `format` string format .", "question_id": 9551}, {"snippet": "statistics.stdev(data)", "intent": "Return the sample standard deviation ( the square root of the sample variance ) . With arguments `data`.", "question_id": 9137}, {"snippet": "raw_io_base.readinto(b)", "intent": "Read bytes into a pre-allocated , writable bytes-like object `b` , and return the number of bytes read .", "question_id": 5087}, {"snippet": "OpenerDirector.open(url, data=None)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11838}, {"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}, {"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}, {"snippet": "TarFile.open()", "intent": "Alternative constructor .", "question_id": 9923}, {"snippet": "RuntimeError", "intent": "Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "question_id": 3662}, {"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}, {"snippet": "TLSVersion.MAXIMUM_SUPPORTED", "intent": "The minimum or maximum supported SSL or TLS version.", "question_id": 8968}, {"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}, {"snippet": "sys.version_info", "intent": "A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.", "question_id": 9854}, {"snippet": "TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING)", "intent": "Create a string buffer from a TarInfo object . With arguments `format`, `encoding`.", "question_id": 9977}, {"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12224}, {"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}, {"snippet": "warnings.simplefilter(action)", "intent": "Insert a simple entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12033}, {"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}, {"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}, {"snippet": "socket.sendfile(file, offset=0, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8735}, {"snippet": "codecs.encode(obj)", "intent": "Encodes `obj` using the codec registered for `encoding` .", "question_id": 1192}, {"snippet": "container.__iter__()", "intent": "Return an iterator object .", "question_id": 9151}, {"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}, {"snippet": "base_server.serve_forever(poll_interval=0.5)", "intent": "Handle requests until an explicit shutdown ( ) request . Poll for shutdown every `poll_interval` seconds .", "question_id": 8763}, {"snippet": "argparse.ArgumentParser(description=None)", "intent": "Create a new ArgumentParser object . Each parameter has its own more detailed `description` below , but in short they are :", "question_id": 41}, {"snippet": "types.DynamicClassAttribute(fset=None)", "intent": "Route attribute access on a class to __getattr__ . With arguments `fset`.", "question_id": 11220}, {"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}, {"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}, {"snippet": "filecmp.dircmp(a, b, ignore=None)", "intent": "Construct `a` new directory comparison object , to compare the directories a and b. `ignore` is a list of names to ignore , and defaults to filecmp.DEFAULT_IGNORES . With arguments `b`.", "question_id": 3761}, {"snippet": "WriteTransport.set_write_buffer_limits(high=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 410}, {"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}, {"snippet": "abstract_event_loop_policy.get_event_loop()", "intent": "Get the event loop for the current context .", "question_id": 375}, {"snippet": "os.access(path, mode, follow_symlinks=True)", "intent": "Use the real uid/gid to test for access to `path` . `mode` should be F_OK to test the existence of path , or it can be the inclusive OR of one or more of R_OK , W_OK , and X_OK to test permissions . With arguments `follow_symlinks`.", "question_id": 6823}, {"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}, {"snippet": "writer.new_font(font)", "intent": "Set the `font` style .", "question_id": 3843}, {"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}, {"snippet": "asyncio.Semaphore(value=1)", "intent": "A Semaphore object . The optional `value` argument gives the initial value for the internal counter ( 1 by default ) .", "question_id": 582}, {"snippet": "bz2.BZ2Decompressor", "intent": "Create a new decompressor object.", "question_id": 900}, {"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}, {"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}, {"snippet": "Telnet.read_lazy()", "intent": "Process and return data already in the queues ( lazy ) .", "question_id": 10015}, {"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}, {"snippet": "email.parser.Parser(_class=None)", "intent": "This class is parallel to BytesParser , but handles string input . With arguments `_class`.", "question_id": 3385}, {"snippet": "ossaudiodev.open(mode)", "intent": "Open an audio device and return an OSS audio device object . `mode` is one of ' r ' for read-only ( record ) access , ' w ' for write-only ( playback ) access and 'rw ' for both .", "question_id": 7174}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "message.as_bytes(unixfrom=False)", "intent": "Return the entire message flattened as a bytes object . When optional `unixfrom` is true , the envelope header is included in the returned string .", "question_id": 2948}, {"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}, {"snippet": "mailcap.findmatch(caps, key='view')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `key` is the name of the field desired , which represents the type of activity to be performed ; the default value is \u2018 view \u2019 , since in the most common case you simply want to view the body of the MIME-typed data . With arguments `caps`.", "question_id": 5870}, {"snippet": "widget.selection(items=None)", "intent": "If `selop` is not specified , returns selected `items` .", "question_id": 10652}, {"snippet": "bdb.set_trace()", "intent": "Start debugging with a Bdb instance from caller \u2019 s frame .", "question_id": 819}, {"snippet": "sunau.open(file, mode)", "intent": "If `file` is a string , open the file by that name , otherwise treat it as a seekable file-like object . `mode` can be any of", "question_id": 9691}, {"snippet": "SSLContext.load_cert_chain(certfile, keyfile=None)", "intent": "Load a private key and the corresponding certificate . The `certfile` string must be the path to a single file in PEM format containing the certificate as well as any number of CA certificates needed to establish the certificate \u2019 s authenticity . The `keyfile` string , if present , must point to a file containing the private key in .", "question_id": 8998}, {"snippet": "parameterized_mime_header.params", "intent": "A dictionary mapping parameter names to parameter values.", "question_id": 3168}, {"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}, {"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}, {"snippet": "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`.", "question_id": 6121}, {"snippet": "loop.call_at(when, callback, *args)", "intent": "Schedule `callback` to be called at the given absolute timestamp `when` ( an int or a float ) , using the same time reference as loop.time ( ) . With arguments `*args`.", "question_id": 195}, {"snippet": "test_case.assertRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11442}, {"snippet": "bdb.reset()", "intent": "Set the botframe , stopframe , returnframe and quitting attributes with values ready to start debugging .", "question_id": 771}, {"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}, {"snippet": "element.append(subelement)", "intent": "Adds the element `subelement` to the end of this element \u2019 s internal list of subelements .", "question_id": 12489}, {"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}, {"snippet": "any(iterable)", "intent": "Return True if any element of the `iterable` is true .", "question_id": 3975}, {"snippet": "importlib.machinery.SourcelessFileLoader(fullname, path)", "intent": "A concrete implementation of importlib.abc.FileLoader which can import bytecode files ( i.e . With arguments `fullname`, `path`.", "question_id": 4897}, {"snippet": "http.client.HTTPConnection(host, timeout)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . If the optional `timeout` parameter is given , blocking operations ( like connection attempts ) will timeout after that many seconds ( if it is not given , the global default timeout setting is used ) .", "question_id": 4366}, {"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}, {"snippet": "platform.java_ver('', ''), '', ''), vendor='', osinfo=('')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7494}, {"snippet": "msilib.Directory(database, cab, basedir, physical, logical, default, componentflags)", "intent": "Create a new directory in the Directory table . Files are added into the current component , and into the `cab` file . To create a directory , a base directory object needs to be specified ( can be None ) , the path to the `physical` directory , and a `logical` directory name . `default` specifies the DefaultDir slot in the directory table . `componentflags` specifies the default flags that new components get . With arguments `database`, `basedir`.", "question_id": 6091}, {"snippet": "OpenerDirector.open(url, timeout)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11835}, {"snippet": "deque.remove(value)", "intent": "Remove the first occurrence of `value` .", "question_id": 1366}, {"snippet": "@unittest.skip(reason)", "intent": "Unconditionally skip the decorated test . `reason` should describe why the test is being skipped .", "question_id": 11358}, {"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}, {"snippet": "sys.version", "intent": "A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.", "question_id": 9852}, {"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}, {"snippet": "sysconfig.get_paths(scheme, vars, expand)", "intent": "Return a dictionary containing all installation paths corresponding to an installation `scheme` . If `vars` is provided , it must be a dictionary of variables that will update the dictionary used to `expand` the paths .", "question_id": 9866}, {"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}, {"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}, {"snippet": "urllib.parse.quote_plus(string, encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . With arguments `encoding`.", "question_id": 11715}, {"snippet": "breakpoint.bpprint(out=None)", "intent": "Print the output of bpformat ( ) to the file `out` , or if it is None , to standard output .", "question_id": 767}, {"snippet": "dialog.checkbox(name, x, y, width, height, attributes, property, text, next_control)", "intent": "Add and return a CheckBox control . With arguments `name`, `x`, `y`, `width`, `height`, `attributes`, `property`, `text`, `next_control`.", "question_id": 6142}, {"snippet": "gc.freeze()", "intent": "Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections .", "question_id": 4184}, {"snippet": "email.headerregistry.AddressHeader", "intent": "Address headers are one of the most complex structured header types.", "question_id": 3158}, {"snippet": "config_parser.read(filenames, encoding=None)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed . With arguments `encoding`.", "question_id": 1513}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "code.interact(banner=None)", "intent": "Convenience function to run a read-eval-print loop . The interact ( ) method of the instance is then run with `banner` and `exitmsg` passed as the banner and exit message to use , if provided .", "question_id": 1162}, {"snippet": "uuid.RESERVED_MICROSOFT", "intent": "Reserved for Microsoft compatibility.", "question_id": 11970}, {"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}, {"snippet": "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`, `MIMEtype`.", "question_id": 5863}, {"snippet": "sequence_matcher.ratio()", "intent": "Return a measure of the sequences \u2019 similarity as a float in the range [ 0 , 1 ] .", "question_id": 2687}, {"snippet": "codecs.ignore_errors(exception)", "intent": "Implements the 'ignore ' error handling : malformed data is ignored and encoding or decoding is continued without further notice . With arguments `exception`.", "question_id": 1257}, {"snippet": "socket.fileno()", "intent": "Return the socket \u2019 s file descriptor ( a small integer ) , or -1 on failure .", "question_id": 8680}, {"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}, {"snippet": "stats.sort_stats(*keys)", "intent": "This method modifies the Stats object by sorting it according to the supplied criteria . With arguments `*keys`.", "question_id": 7693}, {"snippet": "HTTPConnection.putrequest(method, url, skip_accept_encoding=False)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) . To disable automatic sending of Host : or Accept-Encoding : headers ( for example to accept additional content encodings ) , specify `skip_host` or `skip_accept_encoding` with non-False values .", "question_id": 4446}, {"snippet": "ctypes.CFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1792}, {"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}, {"snippet": "ssl.RAND_add(bytes, entropy)", "intent": "Mix the given `bytes` into the SSL pseudo-random number generator . The parameter `entropy` ( a float ) is a lower bound on the entropy contained in string ( so you can always use 0.0 ) .", "question_id": 8889}, {"snippet": "dis.haslocal", "intent": "Sequence of bytecodes that access a local variable.", "question_id": 2750}, {"snippet": "zipfile.PyZipFile(file, mode='r', optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `mode`, `optimize`.", "question_id": 12853}, {"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}, {"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680}, {"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}, {"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}, {"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}, {"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}, {"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}, {"snippet": "BaseTransport.set_protocol(protocol)", "intent": "Set a new `protocol` .", "question_id": 400}, {"snippet": "ctypes.FormatError(code)", "intent": "Windows only : Returns a textual description of the error `code` code .", "question_id": 1821}, {"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}, {"snippet": "test_case.assertWarns(warning)", "intent": "Test that a `warning` is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns ( ) .", "question_id": 11406}, {"snippet": "ast.parse(source)", "intent": "Parse the `source` into an AST node .", "question_id": 145}, {"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}, {"snippet": "textwrap.fill(text, **kwargs, width=70)", "intent": "Wraps the single paragraph in `text` , and returns a single string containing the wrapped paragraph . With arguments `**kwargs`, `width`.", "question_id": 10321}, {"snippet": "termios.tcflush(fd, queue)", "intent": "Discard queued data on file descriptor `fd` . The `queue` selector specifies which queue : TCIFLUSH for the input queue , TCOFLUSH for the output queue , or TCIOFLUSH for both queues .", "question_id": 10106}, {"snippet": "winsound.MB_ICONHAND", "intent": "Play the SystemHand sound.", "question_id": 12207}, {"snippet": "x not in s", "intent": "Test x for non-membership in s.", "question_id": 9437}, {"snippet": "Queue.task_done()", "intent": "Indicate that a formerly enqueued task is complete .", "question_id": 7859}, {"snippet": "fileinput.input()", "intent": "Create an instance of the FileInput class .", "question_id": 3782}, {"snippet": "xdrlib.Unpacker(data)", "intent": "Unpacker is the complementary class which unpacks XDR `data` values from a string buffer .", "question_id": 12272}, {"snippet": "message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3010}, {"snippet": "range(stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `stop`.", "question_id": 4095}, {"snippet": "divmod(a, b)", "intent": "Take two ( non complex ) numbers as arguments and return `a` pair of numbers consisting of their quotient and remainder when using integer division . For integers , the result is the same as ( a // `b` , a % b ) .", "question_id": 4009}, {"snippet": "ftplib.FTP_TLS(host='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `host`.", "question_id": 3889}, {"snippet": "curses.ascii.unctrl(c)", "intent": "Return a string representation of the ASCII character c. If `c` is printable , this string is the character itself .", "question_id": 1917}, {"snippet": "cgi.print_form(form)", "intent": "Format a `form` in HTML .", "question_id": 1054}, {"snippet": "Repr.maxlevel", "intent": "Depth limit on the creation of recursive representations.", "question_id": 8055}, {"snippet": "Class.module", "intent": "The name of the module defining the class described.", "question_id": 7717}, {"snippet": "email_message.add_header(_name, _value, **_params)", "intent": "Extended header setting . `_name` is the header field to add and `_value` is the primary value for the header . With arguments `**_params`.", "question_id": 3253}, {"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}, {"snippet": "widget.focus()", "intent": "If `item` is specified , sets the focus item to item .", "question_id": 10630}, {"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}, {"snippet": "turtle.numinput(title, prompt, default=None)", "intent": "Pop up a dialog window for input of a number . `title` is the title of the dialog window , `prompt` is a text mostly describing what numerical information to input . `default` : default value , `minval` : minimum value for input , `maxval` : maximum value for input The number input must be in the range minval .. maxval if these are given .", "question_id": 11085}, {"snippet": "message.del_param(param, requote=True)", "intent": "Remove the given parameter completely from the Content-Type `header` . All values will be quoted as necessary unless `requote` is False ( the default is True ) . With arguments `param`.", "question_id": 3011}, {"snippet": "inspect.getgeneratorstate(generator)", "intent": "Get current state of a generator-iterator . With arguments `generator`.", "question_id": 5036}, {"snippet": "shlex.source", "intent": "This attribute is None by default.", "question_id": 8303}, {"snippet": "http.HTTPStatus", "intent": "A subclass of enum.IntEnum that defines a set of HTTP status codes, reason phrases and long descriptions written in English.", "question_id": 4613}, {"snippet": "ctypes.PyDLL(name, handle=None)", "intent": "Instances of this class behave like CDLL instances , except that the Python GIL is not released during the function call , and after the function execution the Python error flag is checked . With arguments `name`, `handle`.", "question_id": 1772}, {"snippet": "array.byteswap()", "intent": "\u201c Byteswap \u201d all items of the array .", "question_id": 122}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "unittest.main(verbosity=1)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . You can run tests with more detailed information by passing in the `verbosity` argument :", "question_id": 11552}, {"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}, {"snippet": "asyncio.PriorityQueue", "intent": "A variant of Queue; retrieves entries in priority order (lowest first).", "question_id": 459}, {"snippet": "print(*objects, end='\\n')", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . With arguments `*objects`.", "question_id": 4077}, {"snippet": "null_translations.install(names=None)", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ . If the `names` parameter is given , it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _ ( ) .", "question_id": 4259}, {"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}, {"snippet": "decimal.min_mag(other)", "intent": "Similar to the min ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2449}, {"snippet": "html.entities.html5", "intent": "A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "question_id": 4342}, {"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}, {"snippet": "asyncio.wait(aws, loop=None, timeout=None)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . The `loop` argument is deprecated and scheduled for removal in Python 3.10 . `timeout` ( a float or int ) , if specified , can be used to control the maximum number of seconds to wait before returning .", "question_id": 611}, {"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}, {"snippet": "tkinter.tix.FileSelectBox", "intent": "The FileSelectBox is similar to the standard Motif(TM) file-selection box.", "question_id": 10568}, {"snippet": "Repr.maxstring", "intent": "Limit on the number of characters in the representation of the string.", "question_id": 8064}, {"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}, {"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}, {"snippet": "signature.replace(parameters)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4989}, {"snippet": "turtle.delay(delay=None)", "intent": "Set or return the drawing `delay` in milliseconds .", "question_id": 11057}, {"snippet": "open(file, newline=None)", "intent": "Open `file` and return a corresponding file object . Refer to the documentation of the `newline` parameter for further details .", "question_id": 4067}, {"snippet": "sys.set_asyncgen_hooks(firstiter, finalizer)", "intent": "Accepts two optional keyword arguments which are callables that accept an asynchronous generator iterator as an argument . The `firstiter` callable will be called when an asynchronous generator is iterated for the first time . The `finalizer` will be called when an asynchronous generator is about to be garbage collected .", "question_id": 9840}, {"snippet": "platform.architecture(executable=sys.executable, bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7462}, {"snippet": "ctypes.resize(obj, size)", "intent": "This function resizes the internal memory buffer of `obj` , which must be an instance of a ctypes type . It is not possible to make the buffer smaller than the native `size` of the objects type , as given by sizeof ( type ( obj ) ) , but it is possible to enlarge the buffer .", "question_id": 1830}, {"snippet": "base_server.get_request()", "intent": "Must accept a request from the socket , and return a 2-tuple containing the new socket object to be used to communicate with the client , and the client \u2019 s address .", "question_id": 8776}, {"snippet": "bdb.get_stack(f, t)", "intent": "Get a list of records for a frame and all higher ( calling ) and lower frames , and the size of the higher part . With arguments `f`, `t`.", "question_id": 804}, {"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}, {"snippet": "bytes.translate(table, delete=b'')", "intent": "Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument `delete` are removed , and the remaining bytes have been mapped through the given translation `table` , which must be a bytes object of length 256 .", "question_id": 9332}, {"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}, {"snippet": "Request.remove_header(header)", "intent": "Remove named `header` from the request instance ( both from regular and unredirected headers ) .", "question_id": 11828}, {"snippet": "email_message.del_param(param, header='content-type')", "intent": "Remove the given parameter completely from the Content-Type `header` . With arguments `param`.", "question_id": 3271}, {"snippet": "SMTP.helo()", "intent": "Identify yourself to the SMTP server using HELO .", "question_id": 8515}, {"snippet": "test_case.addCleanup(function, *args, **kwargs)", "intent": "Add a `function` to be called after tearDown ( ) to cleanup resources used during the test . With arguments `*args`, `**kwargs`.", "question_id": 11471}, {"snippet": "i_pv4_address.version", "intent": "The appropriate version number: 4 for IPv4, 6 for IPv6.", "question_id": 5175}, {"snippet": "IMAP4.search(charset, criterion)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server . The IMAP protocol requires that at least one `criterion` be specified ; an exception will be raised when the server returns an error .", "question_id": 4727}, {"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}, {"snippet": "window.encoding", "intent": "Encoding used to encode method arguments (Unicode strings and characters).", "question_id": 2047}, {"snippet": "io_base.seek(offset, whence=SEEK_SET)", "intent": "Change the stream position to the given byte `offset` . offset is interpreted relative to the position indicated by `whence` .", "question_id": 5075}, {"snippet": "resource.RLIMIT_STACK", "intent": "The maximum size (in bytes) of the call stack for the current process.", "question_id": 8079}, {"snippet": "test_case.setUp()", "intent": "Method called to prepare the test fixture .", "question_id": 11365}, {"snippet": "urllib.parse.quote_from_bytes(bytes, safe='/')", "intent": "Like quote ( ) , but accepts a `bytes` object rather than a str , and does not perform string-to-bytes encoding . With arguments `safe`.", "question_id": 11722}, {"snippet": "weakref.ProxyTypes", "intent": "Sequence containing all the type objects for proxies.", "question_id": 12099}, {"snippet": "webbrowser.open(url, new=0)", "intent": "Display `url` using the default browser . If `new` is 0 , the url is opened in the same browser window if possible .", "question_id": 12103}, {"snippet": "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')", "intent": "This function operates exactly as TemporaryFile ( ) does , except that data is spooled in memory until the file size exceeds `max_size` , or until the file \u2019 s fileno ( ) method is called , at which point the contents are written to disk and operation proceeds as with TemporaryFile ( ) . The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object ( depending on whether binary or text `mode` was specified ) or a true file object , depending on whether rollover ( ) has been called .", "question_id": 10062}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}, {"snippet": "readline.set_auto_history(enabled)", "intent": "Enable or disable automatic calls to add_history ( ) when reading input via readline . The `enabled` argument should be a Boolean value that when true , enables auto history , and that when false , disables auto history .", "question_id": 8035}, {"snippet": "exec(object, globals, locals)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object . If only `globals` is provided , it must be a dictionary , which will be used for both the global and the local variables . If globals and `locals` are given , they are used for the global and local variables , respectively .", "question_id": 4015}, {"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}, {"snippet": "TarFile.getnames()", "intent": "Return the members as a list of their names .", "question_id": 9926}, {"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}, {"snippet": "stat.S_IRWXO", "intent": "Mask for permissions for others (not in group).", "question_id": 9105}, {"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}, {"snippet": "ArgumentParser.add_argument(name or flags..., action)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`.", "question_id": 67}, {"snippet": "sys._clear_type_cache()", "intent": "Clear the internal type cache .", "question_id": 9774}, {"snippet": "gettext.find(domain, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4224}, {"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}, {"snippet": "test_case.fail()", "intent": "Signals a test failure unconditionally , with `msg` or None for the error message .", "question_id": 11462}, {"snippet": "calendar.leapdays(y1, y2)", "intent": "Returns the number of leap years in the range from `y1` to `y2` ( exclusive ) , where y1 and y2 are years .", "question_id": 988}, {"snippet": "inspect.getattr_static(obj, attr)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`.", "question_id": 5034}, {"snippet": "ArgumentParser.add_mutually_exclusive_group(required=False)", "intent": "Create a mutually exclusive group . The add_mutually_exclusive_group ( ) method also accepts a `required` argument , to indicate that at least one of the mutually exclusive arguments is required :", "question_id": 100}, {"snippet": "errno.ENETDOWN", "intent": "Network is down", "question_id": 3605}, {"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}, {"snippet": "statistics.mode(data)", "intent": "Return the most common `data` point from discrete or nominal data .", "question_id": 9132}, {"snippet": "widget.tag_bind(tagname)", "intent": "Bind a `callback` for the given event `sequence` to the tag `tagname` .", "question_id": 10662}, {"snippet": "date.replace(year=self.year, day=self.day)", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified . With arguments `year`, `day`.", "question_id": 2234}, {"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}, {"snippet": "platform.machine()", "intent": "Returns the machine type , e.g .", "question_id": 7466}, {"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}, {"snippet": "curses.baudrate()", "intent": "Return the output speed of the terminal in bits per second .", "question_id": 1920}, {"snippet": "mock.attach_mock(mock, attribute)", "intent": "Attach a `mock` as an `attribute` of this one , replacing its name and parent .", "question_id": 11584}, {"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}, {"snippet": "condition.wait(timeout=None)", "intent": "Wait until notified or until a `timeout` occurs .", "question_id": 10391}, {"snippet": "SSLContext.get_ca_certs(binary_form=False)", "intent": "Get a list of loaded \u201c certification authority \u201d ( CA ) certificates . If the `binary_form` parameter is False each list entry is a dict like the output of SSLSocket.getpeercert ( ) .", "question_id": 9012}, {"snippet": "copyright", "intent": "Objects that when printed or called, print the text of copyright or credits, respectively.", "question_id": 1612}, {"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}, {"snippet": "set < other", "intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "question_id": 9441}, {"snippet": "bytes_generator.clone(fp)", "intent": "Return an independent clone of this BytesGenerator instance with the exact same option settings , and `fp` as the new outfp .", "question_id": 3090}, {"snippet": "simple_queue.put(item)", "intent": "Put `item` into the queue .", "question_id": 6214}, {"snippet": "mimetypes.init(files=None)", "intent": "Initialize the internal data structures . If given , `files` must be a sequence of file names which should be used to augment the default type map .", "question_id": 5946}, {"snippet": "ValueError", "intent": "Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.", "question_id": 3682}, {"snippet": "SMTP.starttls()", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode .", "question_id": 8526}, {"snippet": "urllib.request.FileHandler", "intent": "Open local files.", "question_id": 11810}, {"snippet": "IMAP4.shutdown()", "intent": "Close connection established in open .", "question_id": 4738}, {"snippet": "xml.etree.ElementTree.ElementTree(element=None)", "intent": "ElementTree wrapper class . This class represents an entire `element` hierarchy , and adds some extra support for serialization to and from standard XML .", "question_id": 12508}, {"snippet": "urllib.parse.quote_plus(string, safe='')", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` .", "question_id": 11714}, {"snippet": "zipimporter.load_module(fullname)", "intent": "Load the module specified by `fullname` .", "question_id": 12889}, {"snippet": "shelve.DbfilenameShelf(filename, flag='c', protocol=None)", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function . The optional `protocol` and `writeback` parameters have the same interpretation as for the Shelf class .", "question_id": 8264}, {"snippet": "inspect.getcoroutinestate(coroutine)", "intent": "Get current state of a `coroutine` object .", "question_id": 5037}, {"snippet": "StopIteration", "intent": "Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "question_id": 3663}, {"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}, {"snippet": "HTTPPasswordMgr.find_user_password(realm, authuri)", "intent": "Get user/password for given `realm` and URI , if any . With arguments `authuri`.", "question_id": 11858}, {"snippet": "readline.get_history_item(index)", "intent": "Return the current contents of history item at `index` .", "question_id": 8031}, {"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}, {"snippet": "bdb.runcall(func, *args, **kwds)", "intent": "Debug a single function call , and return its result . With arguments `func`, `*args`, `**kwds`.", "question_id": 816}, {"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}, {"snippet": "save_signals.match_value(self, k, dv, v)", "intent": "Try to match a single stored value ( `dv` ) with a supplied value ( `v` ) . With arguments `self`, `k`.", "question_id": 10294}, {"snippet": "task.current_task(loop=None)", "intent": "Return the currently running task or None . If `loop` is None , the get_event_loop ( ) function is used to get the current loop .", "question_id": 643}, {"snippet": "multiprocessing.set_start_method(method)", "intent": "Set the `method` which should be used to start child processes .", "question_id": 6229}, {"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}, {"snippet": "ZipFile.extractall(pwd=None)", "intent": "Extract all `members` from the archive to the current working directory . `pwd` is the password used for encrypted files .", "question_id": 12821}, {"snippet": "array._type_", "intent": "Specifies the type of each element in the array.", "question_id": 1895}, {"snippet": "pprint.isreadable(object)", "intent": "Determine if the formatted representation of `object` is \u201c readable , \u201d or can be used to reconstruct the value using eval ( ) .", "question_id": 7653}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD", "intent": "An operation was requested that requires DTD support to be compiled in, but Expat was configured without DTD support.", "question_id": 7808}, {"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}, {"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}, {"snippet": "urllib.parse.urljoin(base, url)", "intent": "Construct a full ( \u201c absolute \u201d ) URL by combining a \u201c `base` URL \u201d ( base ) with another URL ( `url` ) .", "question_id": 11695}, {"snippet": "array.frombytes(s)", "intent": "Appends items from the string , interpreting the string as an array of machine values ( as if it had been read from a file using the fromfile ( ) method ) . With arguments `s`.", "question_id": 125}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED", "intent": "An attempt to resume the parser was made when the parser had not been suspended.", "question_id": 7817}, {"snippet": "uuid.UUID(int=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11942}, {"snippet": "ArgumentParser.parse_args()", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` .", "question_id": 69}, {"snippet": "email_message.set_param(param, value, header='Content-Type')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3261}, {"snippet": "AttributeError", "intent": "Raised when an attribute reference (see Attribute references) or assignment fails.", "question_id": 3636}, {"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}, {"snippet": "argparse.FileType(bufsize=-1, encoding=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`, `encoding`.", "question_id": 93}, {"snippet": "urllib.request.UnknownHandler", "intent": "A catch-all class to handle unknown URLs.", "question_id": 11814}, {"snippet": "SSLContext.wrap_bio(incoming, outgoing)", "intent": "Wrap the BIO objects `incoming` and `outgoing` and return an instance of SSLContext.sslobject_class ( default SSLObject ) .", "question_id": 9033}, {"snippet": "asyncio.get_running_loop()", "intent": "Return the running event loop in the current OS thread .", "question_id": 178}, {"snippet": "binhex.hexbin(input, output)", "intent": "Decode a binhex file `input` . The resulting file is written to a file named `output` , unless the argument is None in which case the output filename is read from the binhex file .", "question_id": 850}, {"snippet": "imghdr.what(filename, h=None)", "intent": "Tests the image data contained in the file named by `filename` , and returns a string describing the image type . If optional `h` is provided , the filename is ignored and h is assumed to contain the byte stream to test .", "question_id": 4758}, {"snippet": "file_io.mode", "intent": "The mode as given in the constructor.", "question_id": 5107}, {"snippet": "inspect.getclasstree(classes)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists .", "question_id": 5008}, {"snippet": "shutil.get_archive_formats()", "intent": "Return a list of supported formats for archiving .", "question_id": 8358}, {"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}, {"snippet": "sys.version_info", "intent": "A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.", "question_id": 9854}, {"snippet": "functools.reduce(function, iterable, initializer)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . If the optional `initializer` is present , it is placed before the items of the sequence in the calculation , and serves as a default when the sequence is empty . With arguments `iterable`.", "question_id": 4153}, {"snippet": "curses.is_term_resized(nlines, ncols)", "intent": "Return True if resize_term ( ) would modify the window structure , False otherwise . With arguments `nlines`, `ncols`.", "question_id": 1948}, {"snippet": "turtle.onclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `btn`.", "question_id": 11020}, {"snippet": "audioop.findmax(fragment, length)", "intent": "Search `fragment` for a slice of `length` length samples ( not bytes ! )", "question_id": 690}, {"snippet": "window.timeout(delay)", "intent": "Set blocking or non-blocking read behavior for the window . If `delay` is negative , blocking read is used ( which will wait indefinitely for input ) .", "question_id": 2124}, {"snippet": "window.inch(y)", "intent": "Return the character at the given position in the window . With arguments `y`.", "question_id": 2070}, {"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}, {"snippet": "inspect.getmro(cls)", "intent": "Return a tuple of class `cls` \u2019 s base classes , including cls , in method resolution order .", "question_id": 5018}, {"snippet": "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `foldspaces` is a flag that specifies whether the \u2018 y \u2019 short sequence should be accepted as shorthand for 4 consecutive spaces ( ASCII 0x20 ) . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 741}, {"snippet": "context.compare_signal(x, y)", "intent": "Compares the values of the two operands numerically . With arguments `x`, `y`.", "question_id": 2521}, {"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}, {"snippet": "urllib.request.Request(url, method=None)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . For an HTTP POST request `method` , data should be a buffer in the standard application/x-www-form-urlencoded format .", "question_id": 11773}, {"snippet": "tempfile.TemporaryFile(mode='w+b', buffering=None)", "intent": "Return a file-like object that can be used as a temporary storage area . The `mode` parameter defaults to ' w+b ' so that the file created can be read and written without being closed . `buffering` , `encoding` and `newline` are interpreted as for open ( ) .", "question_id": 10041}, {"snippet": "WriteTransport.set_write_buffer_limits(high=None, low=None)", "intent": "Set the `high` and `low` watermarks for write flow control .", "question_id": 412}, {"snippet": "socket.sethostname(name)", "intent": "Set the machine \u2019 s hostname to `name` .", "question_id": 8669}, {"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}, {"snippet": "NNTP.login(user=None, password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6455}, {"snippet": "directory.start_component(feature=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . If no `feature` is given , the current feature is used .", "question_id": 6095}, {"snippet": "ctypes.Structure(*args, **kw)", "intent": "Abstract base class for structures in native byte order . With arguments `*args`, `**kw`.", "question_id": 1889}, {"snippet": "test.support.import_fresh_module(name, fresh=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10243}, {"snippet": "@functools.lru_cache(typed=False)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls . If `typed` is set to true , function arguments of different types will be cached separately .", "question_id": 4148}, {"snippet": "aifc.setnchannels(nchannels)", "intent": "Specify the number of channels in the audio file . With arguments `nchannels`.", "question_id": 27}, {"snippet": "memoryview.tobytes()", "intent": "Return the data in the buffer as a bytestring .", "question_id": 9413}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`.", "question_id": 66}, {"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}, {"snippet": "errno.ESRCH", "intent": "No such process", "question_id": 3508}, {"snippet": "Morsel.set(key, value, coded_value)", "intent": "Set the `key` , `value` and `coded_value` attributes .", "question_id": 4599}, {"snippet": "config_parser.getboolean(section, option)", "intent": "A convenience method which coerces the `option` in the specified `section` to a Boolean value .", "question_id": 1548}, {"snippet": "shape.addcomponent(poly, fill, outline=None)", "intent": "Example : With arguments `poly`, `fill`, `outline`.", "question_id": 11166}, {"snippet": "@contextlib.contextmanager", "intent": "This function is a decorator that can be used to define a factory function for with statement context managers, without needing to create a class or separate __enter__() and __exit__() methods.", "question_id": 1617}, {"snippet": "platform.architecture(bits='', linkage='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7464}, {"snippet": "ctypes.create_unicode_buffer(init_or_size)", "intent": "This function creates a mutable unicode character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a string which will be used to initialize the array items .", "question_id": 1815}, {"snippet": "MemoryError", "intent": "Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects).", "question_id": 3645}, {"snippet": "widget.enable_traversal()", "intent": "Enable keyboard traversal for a toplevel window containing this notebook .", "question_id": 10614}, {"snippet": "stats.print_callers(*restrictions)", "intent": "This method for the Stats class prints a list of all functions that called each function in the profiled database . With arguments `*restrictions`.", "question_id": 7696}, {"snippet": "Exception", "intent": "All built-in, non-system-exiting exceptions are derived from this class.", "question_id": 3631}, {"snippet": "xml.dom.InuseAttributeErr", "intent": "Raised when an attempt is made to insert an Attr node that is already present elsewhere in the document.", "question_id": 12384}, {"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}, {"snippet": "timer.timeit(number=1000000)", "intent": "Time `number` executions of the main statement .", "question_id": 10508}, {"snippet": "Morsel.update(values)", "intent": "Update the `values` in the Morsel dictionary with the values in the dictionary values .", "question_id": 4609}, {"snippet": "widget.column(column, **kw)", "intent": "Query or modify the options for the specified `column` . With arguments `**kw`.", "question_id": 10625}, {"snippet": "test_case.assertIs(first, second)", "intent": "Test that `first` and `second` evaluate ( or don \u2019 t evaluate ) to the same object .", "question_id": 11383}, {"snippet": "typing.FrozenSet(frozenset)", "intent": "A generic version of builtins.frozenset . With arguments `frozenset`.", "question_id": 11275}, {"snippet": "bdb.Breakpoint(self, file, line, temporary=0, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 759}, {"snippet": "context.min(x, y)", "intent": "Compares two values numerically and returns the minimum . With arguments `x`, `y`.", "question_id": 2551}, {"snippet": "os.getxattr(path, attribute)", "intent": "Return the value of the extended filesystem `attribute` attribute for `path` .", "question_id": 6993}, {"snippet": "email.headerregistry.Address(username='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3188}, {"snippet": "inspect_loader.source_to_code(data)", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e .", "question_id": 4829}, {"snippet": "mmap.flush(offset, size)", "intent": "Flushes changes made to the in-memory copy of a file back to disk . If `offset` and `size` are specified , only changes to the given range of bytes will be flushed to disk ; otherwise , the whole extent of the mapping is flushed .", "question_id": 6005}, {"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}, {"snippet": "dumbdbm.sync()", "intent": "Synchronize the on-disk directory and data files .", "question_id": 2389}, {"snippet": "base64.encode(input, output)", "intent": "Encode the contents of the binary `input` file and write the resulting base64 encoded data to the `output` file .", "question_id": 750}, {"snippet": "email.charset.add_alias(alias, canonical)", "intent": "Add a character set `alias` . `canonical` is the character set \u2019 s canonical name , e.g .", "question_id": 2934}, {"snippet": "urllib.request.URLopener(**x509)", "intent": "Base class for opening and reading URLs . With arguments `**x509`.", "question_id": 11890}, {"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}, {"snippet": "operator.iadd(a, b)", "intent": "`a` = iadd ( a , `b` ) is equivalent to a += b .", "question_id": 6588}, {"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}, {"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}, {"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}, {"snippet": "config_parser.get(section, option)", "intent": "Get an `option` value for the named `section` .", "question_id": 1524}, {"snippet": "readline.set_completer(function)", "intent": "Set or remove the completer `function` .", "question_id": 8040}, {"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}, {"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}, {"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}, {"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}, {"snippet": "tempfile.mkstemp(suffix=None, text=False)", "intent": "Creates a temporary file in the most secure manner possible . If `suffix` is not None , the file name will end with that suffix , otherwise there will be no suffix . If `text` is specified , it indicates whether to open the file in binary mode ( the default ) or text mode .", "question_id": 10078}, {"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}, {"snippet": "group.addresses", "intent": "A possibly empty tuple of Address objects representing the addresses in the group.", "question_id": 3206}, {"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}, {"snippet": "bytearray.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9280}, {"snippet": "html_diff.__init__(tabsize=8, wrapcolumn=None)", "intent": "Initializes instance of HtmlDiff . `tabsize` is an optional keyword argument to specify tab stop spacing and defaults to 8 . `wrapcolumn` is an optional keyword to specify column number where lines are broken and wrapped , defaults to None where lines are not wrapped .", "question_id": 2603}, {"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3948}, {"snippet": "math.degrees(x)", "intent": "Convert angle `x` from radians to degrees .", "question_id": 5922}, {"snippet": "str.rindex(sub, start, end)", "intent": "Like rfind ( ) but raises ValueError when the substring `sub` is not found . With arguments `start`, `end`.", "question_id": 9229}, {"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}, {"snippet": "async_chat.found_terminator()", "intent": "Called when the incoming data stream matches the termination condition set by set_terminator ( ) .", "question_id": 173}, {"snippet": "_thread.exit()", "intent": "Raise the SystemExit exception .", "question_id": 12946}, {"snippet": "html_calendar.formatyearpage(theyear, width=3, css='calendar.css', encoding=None)", "intent": "Return a year \u2019 s calendar as a complete HTML page . `width` ( defaulting to 3 ) specifies the number of months per row . `css` is the name for the cascading style sheet to be used . `encoding` specifies the encoding to be used for the output ( defaulting to the system default encoding ) . With arguments `theyear`.", "question_id": 969}, {"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}, {"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}, {"snippet": "CacheFTPHandler.setTimeout(t)", "intent": "Set timeout of connections to `t` seconds .", "question_id": 11876}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "future.set_result(result)", "intent": "Mark the Future as done and set its `result` .", "question_id": 362}, {"snippet": "BaseCookie.output(attrs=None, header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4588}, {"snippet": "POP3.uidl()", "intent": "Return message digest ( unique id ) list .", "question_id": 7617}, {"snippet": "finder.find_module(fullname, path=None)", "intent": "An abstract method for finding a loader for the specified module . With arguments `fullname`, `path`.", "question_id": 4801}, {"snippet": "xmlparser.StartElementHandler(name, attributes)", "intent": "Called for the start of every element . `name` is a string containing the element name , and `attributes` is the element attributes .", "question_id": 7760}, {"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}, {"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705}, {"snippet": "contextlib.redirect_stderr(new_target)", "intent": "Similar to redirect_stdout ( ) but redirecting sys.stderr to another file or file-like object . With arguments `new_target`.", "question_id": 1624}, {"snippet": "os.writev(fd, buffers)", "intent": "Write the contents of `buffers` to file descriptor `fd` .", "question_id": 6810}, {"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}, {"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}, {"snippet": "asyncore.loop(timeout)", "intent": "Enter a polling loop that terminates after `count` passes or all open channels have been closed . The `timeout` argument sets the timeout parameter for the appropriate select ( ) or poll ( ) call , measured in seconds ; the default is 30 seconds .", "question_id": 650}, {"snippet": "platform.popen(cmd)", "intent": "Portable popen ( ) interface . With arguments `cmd`.", "question_id": 7505}, {"snippet": "winsound.SND_ALIAS", "intent": "The sound parameter is a sound association name from the registry.", "question_id": 12197}, {"snippet": "HMAC.digest()", "intent": "Return the digest of the bytes passed to the update ( ) method so far .", "question_id": 4335}, {"snippet": "uuid.UUID(hex=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument . When a string of `hex` digits is given , curly braces , hyphens , and a URN prefix are all optional .", "question_id": 11938}, {"snippet": "locale.format_string(format, val, grouping=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `grouping` is true , also takes the grouping into account .", "question_id": 5385}, {"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}, {"snippet": "OptionParser.print_usage()", "intent": "Print the usage message for the current program ( self.usage ) to `file` ( default stdout ) .", "question_id": 6644}, {"snippet": "aifc.getmark(id)", "intent": "Return the tuple as described in getmarkers ( ) for the mark with the given `id` .", "question_id": 19}, {"snippet": "date.replace()", "intent": "Return a date with the same value , except for those parameters given new values by whichever keyword arguments are specified .", "question_id": 2229}, {"snippet": "heapq.merge(*iterables)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) .", "question_id": 4321}, {"snippet": "queue.cancel_join_thread()", "intent": "Prevent join_thread ( ) from blocking .", "question_id": 6210}, {"snippet": "doctest.DocTestFinder(verbose=False, recurse=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `recurse` is false , then DocTestFinder.find ( ) will only examine the given object , and not any contained objects .", "question_id": 2846}, {"snippet": "datetime.datetime(year, month, day, hour=0, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `hour`, `minute`.", "question_id": 2254}, {"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}, {"snippet": "lzma.open(filename, check=-1)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . In this case , the `check` and `preset` arguments should not be used .", "question_id": 5659}, {"snippet": "policy.header_source_parse(sourcelines)", "intent": "The email package calls this method with a list of strings , each string ending with the line separation characters found in the source being parsed . `sourcelines` may contain surrogateescaped binary data .", "question_id": 3423}, {"snippet": "asyncio.FastChildWatcher", "intent": "This implementation reaps every terminated processes by calling os.waitpid(-1) directly, possibly breaking other code spawning processes and waiting for their termination.", "question_id": 389}, {"snippet": "robot_file_parser.can_fetch(useragent, url)", "intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "question_id": 11912}, {"snippet": "zipfile.ZipFile(file, mode='r')", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file .", "question_id": 12793}, {"snippet": "element.findtext(match, namespaces=None)", "intent": "Finds text for the first subelement matching `match` . `namespaces` is an optional mapping from namespace prefix to full name .", "question_id": 12497}, {"snippet": "os.lstat(path, dir_fd=None)", "intent": "Perform the equivalent of an lstat ( ) system call on the given `path` . With arguments `dir_fd`.", "question_id": 6861}, {"snippet": "msvcrt.getwche()", "intent": "Wide char variant of getche ( ) , returning a Unicode value .", "question_id": 6159}, {"snippet": "dis.show_code(x, file=None)", "intent": "Print detailed code object information for the supplied function , method , source code string or code object to `file` ( or sys.stdout if file is not specified ) . This is a convenient shorthand for print ( code_info ( `x` ) , file=file ) , intended for interactive exploration at the interpreter prompt .", "question_id": 2706}, {"snippet": "list()", "intent": "Rather than being a function , list is actually a mutable sequence type , as documented in Lists and Sequence Types \u2014 list , tuple , range .", "question_id": 4046}, {"snippet": "loop.sock_accept(sock)", "intent": "Accept a connection . `sock` must be a non-blocking socket .", "question_id": 280}, {"snippet": "element.set(key, value)", "intent": "Set the attribute `key` on the element to `value` .", "question_id": 12488}, {"snippet": "ipaddress.summarize_address_range(first, last)", "intent": "Return an iterator of the summarized network range given the `first` and `last` IP addresses .", "question_id": 5234}, {"snippet": "base_selector.modify(fileobj, events, data=None)", "intent": "Change a registered file object \u2019 s monitored `events` or attached `data` . This is equivalent to BaseSelector.unregister ( `fileobj` ) ( ) followed by BaseSelector.register ( fileobj , events , data ) ( ) , except that it can be implemented more efficiently .", "question_id": 8219}, {"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}, {"snippet": "str.format(*args, **kwargs)", "intent": "Perform a string formatting operation . With arguments `*args`, `**kwargs`.", "question_id": 9197}, {"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}, {"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}, {"snippet": "base_rotating_handler.rotate(source, dest)", "intent": "When rotating , rotate the current log . The default implementation calls the \u2018 rotator \u2019 attribute of the handler , if it \u2019 s callable , passing the `source` and `dest` arguments to it .", "question_id": 5457}, {"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}, {"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}, {"snippet": "turtle.shapetransform(t22=None)", "intent": "Set or return the current transformation matrix of the turtle shape . The determinant t11 * `t22` - t12 * t21 must not be zero , otherwise an error is raised .", "question_id": 11012}, {"snippet": "reversed(seq)", "intent": "Return a reverse iterator . `seq` must be an object which has a __reversed__ ( ) method or supports the sequence protocol ( the __len__ ( ) method and the __getitem__ ( ) method with integer arguments starting at 0 ) .", "question_id": 4099}, {"snippet": "random.gauss(mu, sigma)", "intent": "Gaussian distribution . `mu` is the mean , and `sigma` is the standard deviation .", "question_id": 7912}, {"snippet": "os.fsencode(filename)", "intent": "Encode path-like `filename` to the filesystem encoding with 'surrogateescape ' error handler , or 'strict ' on Windows ; return bytes unchanged .", "question_id": 6663}, {"snippet": "plistlib.loads(data, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `dict_type`.", "question_id": 7558}, {"snippet": "raw_config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1590}, {"snippet": "xml.etree.ElementTree.XMLID(text, parser=None)", "intent": "Parses an XML section from a string constant , and also returns a dictionary which maps from element id : s to elements . `text` is a string containing XML data . `parser` is an optional parser instance .", "question_id": 12472}, {"snippet": "contextlib.AbstractContextManager", "intent": "An abstract base class for classes that implement object.__enter__() and object.__exit__().", "question_id": 1615}, {"snippet": "HTTPHandler.http_open(req)", "intent": "Send an HTTP request , which can be either GET or POST , depending on req.has_data ( ) . With arguments `req`.", "question_id": 11871}, {"snippet": "io.BytesIO()", "intent": "A stream implementation using an in-memory bytes buffer .", "question_id": 5110}, {"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}, {"snippet": "typing.List(list)", "intent": "Generic version of `list` .", "question_id": 11271}, {"snippet": "XMLReader.getFeature(featurename)", "intent": "Return the current setting for feature `featurename` .", "question_id": 12623}, {"snippet": "time.CLOCK_PROF", "intent": "High-resolution per-process timer from the CPU.", "question_id": 10468}, {"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}, {"snippet": "shlex.punctuation_chars", "intent": "A read-only property.", "question_id": 8308}, {"snippet": "HTTPResponse.readinto(b)", "intent": "Reads up to the next len ( `b` ) bytes of the response body into the buffer b .", "question_id": 4457}, {"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}, {"snippet": "hashlib.scrypt(password, salt, n, r, p, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4314}, {"snippet": "ipaddress.get_mixed_type_key(obj)", "intent": "Return a key suitable for sorting between networks and addresses . `obj` is either a network or address object .", "question_id": 5236}, {"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}, {"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}, {"snippet": "errno.ENOLINK", "intent": "Link has been severed", "question_id": 3572}, {"snippet": "sqlite3.sqlite_version", "intent": "The version number of the run-time SQLite library, as a string.", "question_id": 8793}, {"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}, {"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}, {"snippet": "SubprocessProtocol.pipe_data_received(fd, data)", "intent": "Called when the child process writes `data` into its stdout or stderr pipe . `fd` is the integer file descriptor of the pipe .", "question_id": 442}, {"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590}, {"snippet": "shutil.copystat(src, dst)", "intent": "Copy the permission bits , last access time , last modification time , and flags from `src` to `dst` .", "question_id": 8316}, {"snippet": "Node.cloneNode(deep)", "intent": "Clone this node . Setting `deep` means to clone all child nodes as well .", "question_id": 12335}, {"snippet": "os.makedirs(name, mode=0o777, exist_ok=False)", "intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . If `exist_ok` is False ( the default ) , an FileExistsError is raised if the target directory already exists . With arguments `name`.", "question_id": 6869}, {"snippet": "email.iterators._structure(msg, fp=None)", "intent": "Prints an indented representation of the content types of the message object structure . Optional `fp` is a file-like object to print the output to . With arguments `msg`.", "question_id": 3215}, {"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}, {"snippet": "slice(start, stop)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4107}, {"snippet": "plistlib.dump(value, fp, sort_keys=True, skipkeys=False)", "intent": "Write `value` to a plist file . When `sort_keys` is true ( the default ) the keys for dictionaries will be written to the plist in sorted order , otherwise they will be written in the iteration order of the dictionary . When `skipkeys` is false ( the default ) the function raises TypeError when a key of a dictionary is not a string , otherwise such keys are skipped . With arguments `fp`.", "question_id": 7569}, {"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}, {"snippet": "email.message_from_binary_file(fp, _class=None)", "intent": "Return a message object structure tree from an open binary file object . This is equivalent to BytesParser ( ) .parse ( `fp` ) . `_class` and `policy` are interpreted as with the BytesParser class constructor .", "question_id": 3401}, {"snippet": "subprocess.Popen(args, close_fds=True)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `close_fds` is true , all file descriptors except 0 , 1 and 2 will be closed before the child process is executed .", "question_id": 9606}, {"snippet": "ipaddress.ip_interface(address)", "intent": "Return an IPv4Interface or IPv6Interface object depending on the IP `address` passed as argument .", "question_id": 5173}, {"snippet": "zlib.compressobj(level=-1, wbits=MAX_WBITS)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . The `wbits` argument controls the size of the history buffer ( or the \u201c window size \u201d ) used when compressing data , and whether a header and trailer is included in the output .", "question_id": 12914}, {"snippet": "ctypes.CFUNCTYPE(restype, *argtypes)", "intent": "The returned function prototype creates functions that use the standard C calling convention . With arguments `restype`, `*argtypes`.", "question_id": 1792}, {"snippet": "open(file, mode='r', buffering=-1)", "intent": "Open `file` and return a corresponding file object . `mode` is an optional string that specifies the mode in which the file is opened . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4070}, {"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}, {"snippet": "trace.Trace(trace=1)", "intent": "Create an object to `trace` execution of a single statement or expression .", "question_id": 10708}, {"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}, {"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}, {"snippet": "email.headerregistry.ContentTypeHeader", "intent": "A ParameterizedMIMEHeader class that handles the Content-Type header.", "question_id": 3169}, {"snippet": "winreg.HKEY_DYN_DATA", "intent": "This key is not used in versions of Windows after 98.", "question_id": 12161}, {"snippet": "address_header.addresses", "intent": "A tuple of Address objects encoding all of the individual addresses from the header value.", "question_id": 3160}, {"snippet": "FTP.nlst(argument)", "intent": "Return a list of file names as returned by the NLST command . The optional `argument` is a directory to list ( default is the current server directory ) .", "question_id": 3955}, {"snippet": "statistics.pstdev(data)", "intent": "Return the population standard deviation ( the square root of the population variance ) . With arguments `data`.", "question_id": 9133}, {"snippet": "turtle.ycor()", "intent": "Return the turtle \u2019 s y coordinate .", "question_id": 10941}, {"snippet": "dataclasses.make_dataclass(cls_name, fields)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2183}, {"snippet": "webbrowser.register(name, constructor, preferred=False)", "intent": "Register the browser type `name` . If `instance` is not provided , or is None , `constructor` will be called without parameters to create an instance when needed . Setting `preferred` to True makes this browser a preferred result for a get ( ) call with no argument .", "question_id": 12112}, {"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}, {"snippet": "decimal.InvalidOperation", "intent": "An invalid operation was performed.", "question_id": 2589}, {"snippet": "IMAP4.expunge()", "intent": "Permanently remove deleted items from selected mailbox .", "question_id": 4700}, {"snippet": "os.setpgrp()", "intent": "Call the system call setpgrp ( ) or setpgrp ( 0 , 0 ) depending on which version is implemented ( if any ) .", "question_id": 6697}, {"snippet": "contextlib.ExitStack", "intent": "A context manager that is designed to make it easy to programmatically combine other context managers and cleanup functions, especially those that are optional or otherwise driven by input data.", "question_id": 1626}, {"snippet": "turtle.onkeypress(fun)", "intent": "Bind `fun` to key-press event of `key` if key is given , or to any key-press-event if no key is given .", "question_id": 11069}, {"snippet": "range(start, stop, step)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . If the `start` argument is omitted , it defaults to 0 . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` . If the `step` argument is omitted , it defaults to 1 .", "question_id": 9163}, {"snippet": "html.escape(s, quote=True)", "intent": "Convert the characters & , < and > in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the characters ( `` ) and ( ' ) are also translated ; this helps for inclusion in an HTML attribute value delimited by quotes , as in < a href= '' ... '' > .", "question_id": 4347}, {"snippet": "Match.span(group)", "intent": "For a match m , return the 2-tuple ( m.start ( `group` ) , m.end ( group ) ) .", "question_id": 8007}, {"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}, {"snippet": "difflib.SequenceMatcher(autojunk=True)", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional argument `autojunk` can be used to disable the automatic junk heuristic .", "question_id": 2673}, {"snippet": "chain_map.maps", "intent": "A user updateable list of mappings.", "question_id": 1336}, {"snippet": "exit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1610}, {"snippet": "tkinter.tix.Balloon", "intent": "A Balloon that pops up over a widget to provide help.", "question_id": 10552}, {"snippet": "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5419}, {"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}, {"snippet": "chr(i)", "intent": "Return the string representing a character whose Unicode code point is the integer `i` .", "question_id": 3990}, {"snippet": "Element.setAttributeNodeNS(newAttr)", "intent": "Add a new attribute node to the element , replacing an existing attribute if necessary if the namespaceURI and localName attributes match . If `newAttr` is already in use , InuseAttributeErr will be raised .", "question_id": 12368}, {"snippet": "unittest.mock.patch(target, **kwargs, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11611}, {"snippet": "turtle.Screen", "intent": "Subclass of TurtleScreen, with four methods added.", "question_id": 11162}, {"snippet": "Pattern.sub(repl, string, count=0)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`, `count`.", "question_id": 7988}, {"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}, {"snippet": "charset.input_codec", "intent": "The name of the Python codec used to convert the input_charset to Unicode.", "question_id": 2916}, {"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}, {"snippet": "test.support.match_test(test)", "intent": "Match `test` to patterns set in set_match_tests ( ) .", "question_id": 10155}, {"snippet": "element.findtext(match)", "intent": "Finds text for the first subelement matching `match` .", "question_id": 12495}, {"snippet": "json.loads(s, **kw, encoding=None)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . The other arguments have the same meaning as in load ( ) , except `encoding` which is ignored and deprecated . With arguments `**kw`.", "question_id": 5301}, {"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}, {"snippet": "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)", "intent": "Dump the tracebacks of all threads , after a `timeout` of timeout seconds , or every timeout seconds if `repeat` is True . ( Note _exit ( ) exits the process immediately , which means it doesn \u2019 t do any cleanup like flushing `file` buffers . ) If `exit` is True , call _exit ( ) with status=1 after dumping the tracebacks .", "question_id": 3729}, {"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}, {"snippet": "null_importer.find_module(fullname, path)", "intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`, `path`.", "question_id": 4781}, {"snippet": "ctypes.c_double", "intent": "Represents the C double datatype.", "question_id": 1858}, {"snippet": "curses.textpad.Textbox(win)", "intent": "Return a textbox widget object . The `win` argument should be a curses window object in which the textbox is to be contained .", "question_id": 2135}, {"snippet": "aifc.writeframesraw(data)", "intent": "Like writeframes ( ) , except that the header of the audio file is not updated . With arguments `data`.", "question_id": 36}, {"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}, {"snippet": "bz2.open(filename, mode='r', compresslevel=9)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 1 to 9 , as for the BZ2File constructor .", "question_id": 882}, {"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478}, {"snippet": "ArgumentParser.print_usage()", "intent": "Print a brief description of how the ArgumentParser should be invoked on the command line .", "question_id": 103}, {"snippet": "test_case.tearDown()", "intent": "Method called immediately after the test method has been called and the result recorded .", "question_id": 11366}, {"snippet": "SSLContext.wrap_socket(sock, server_hostname=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . On client connections , the optional parameter `server_hostname` specifies the hostname of the service which we are connecting to .", "question_id": 9026}, {"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}, {"snippet": "curses.unctrl(ch)", "intent": "Return a bytes object which is a printable representation of the character `ch` .", "question_id": 1992}, {"snippet": "sync_manager.dict()", "intent": "Create a shared dict object and return a proxy for it .", "question_id": 6313}, {"snippet": "gc.set_threshold(threshold0, threshold1)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection . If generation 0 has been examined more than `threshold1` times since generation 1 has been examined , then generation 1 is examined as well .", "question_id": 4177}, {"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}, {"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}, {"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}, {"snippet": "doctest.testfile(filename, module_relative=True)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `module_relative` specifies how the filename should be interpreted :", "question_id": 2767}, {"snippet": "csv.reader(csvfile, **fmtparams)", "intent": "Return a reader object which will iterate over lines in the given `csvfile` . With arguments `**fmtparams`.", "question_id": 1680}, {"snippet": "message.items()", "intent": "Return a list of 2-tuples containing all the message \u2019 s field headers and values .", "question_id": 2971}, {"snippet": "itertools.tee(iterable, n=2)", "intent": "Return `n` independent iterators from a single `iterable` .", "question_id": 5267}, {"snippet": "CookiePolicy.domain_return_ok(domain, request)", "intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "question_id": 4534}, {"snippet": "tracemalloc.Trace", "intent": "Trace of a memory block.", "question_id": 10890}, {"snippet": "IMAP4.debug", "intent": "Integer value to control debugging output.", "question_id": 4755}, {"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}, {"snippet": "async_chat.set_terminator(term)", "intent": "Sets the terminating condition to be recognized on the channel . `term` may be any of three types of value , corresponding to three different ways to handle incoming protocol data .", "question_id": 177}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdout=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 525}, {"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}, {"snippet": "curses.newpad(nlines, ncols)", "intent": "Create and return a pointer to a new pad data structure with the given number of lines and columns . With arguments `nlines`, `ncols`.", "question_id": 1957}, {"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}, {"snippet": "tkinter.tix.DirSelectBox", "intent": "The DirSelectBox is similar to the standard Motif(TM) directory-selection box.", "question_id": 10566}, {"snippet": "IMAP4.check()", "intent": "Checkpoint mailbox on server .", "question_id": 4693}, {"snippet": "io.BufferedReader(raw)", "intent": "A buffer providing higher-level access to a readable , sequential RawIOBase object . When reading data from this object , a larger amount of data may be requested from the underlying `raw` stream , and kept in an internal buffer .", "question_id": 5116}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stderr=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 526}, {"snippet": "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)", "intent": "Returns the current state of the is_authenticated flag for the given URI . With arguments `self`, `authuri`.", "question_id": 11864}, {"snippet": "doctest.DocTestSuite(globs=None)", "intent": "Convert doctest tests for a `module` to a unittest.TestSuite . Optional argument `globs` is a dictionary containing the initial global variables for the tests .", "question_id": 2808}, {"snippet": "ZipInfo.volume", "intent": "Volume number of file header.", "question_id": 12873}, {"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}, {"snippet": "FTP.connect(source_address=None)", "intent": "Connect to the given `host` and `port` . `source_address` is a 2-tuple ( host , port ) for the socket to bind to as its source address before connecting .", "question_id": 3908}, {"snippet": "asyncio.set_event_loop_policy(policy)", "intent": "Set the current process-wide `policy` to policy .", "question_id": 373}, {"snippet": "xmlparser.EndCdataSectionHandler()", "intent": "Called at the end of a CDATA section .", "question_id": 7771}, {"snippet": "difflib.unified_diff(a, b)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in unified diff format .", "question_id": 2647}, {"snippet": "mimetypes.read_mime_types(filename)", "intent": "Load the type map given in the file `filename` , if it exists .", "question_id": 5947}, {"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863}, {"snippet": "venv.create(env_dir, symlinks=False)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument . With arguments `symlinks`.", "question_id": 11992}, {"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}, {"snippet": "inspect.CO_OPTIMIZED", "intent": "The code object is optimized, using fast locals.", "question_id": 5040}, {"snippet": "time.strftime(format)", "intent": "Convert a tuple or struct_time representing a time as returned by gmtime ( ) or localtime ( ) to a string as specified by the `format` argument .", "question_id": 10454}, {"snippet": "test.support.TESTFN", "intent": "Set to a name that is safe to use as the name of a temporary file.", "question_id": 10115}, {"snippet": "json.JSONEncoder(separators=None)", "intent": "Extensible JSON encoder for Python data structures . If specified , `separators` should be an ( item_separator , key_separator ) tuple .", "question_id": 5329}, {"snippet": "None", "intent": "The sole value of the type NoneType.", "question_id": 1604}, {"snippet": "IMAP4.readline()", "intent": "Reads one line from the remote server .", "question_id": 4723}, {"snippet": "warnings.filterwarnings(action)", "intent": "Insert an entry into the list of warnings filter specifications . With arguments `action`.", "question_id": 12023}, {"snippet": "Path.write_text(data)", "intent": "Open the file pointed to in text mode , write `data` to it , and close the file :", "question_id": 7323}, {"snippet": "doctest.DocTestFinder(verbose=False, exclude_empty=True)", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `verbose` can be used to display the objects searched by the finder . If the optional argument `exclude_empty` is false , then DocTestFinder.find ( ) will include tests for objects with empty docstrings .", "question_id": 2847}, {"snippet": "ur_lopener.retrieve(url, reporthook=None)", "intent": "Retrieves the contents of `url` and places it in `filename` . If `reporthook` is given , it must be a function accepting three numeric parameters : A chunk number , the maximum size chunks are read in and the total size of the download ( -1 if unknown ) .", "question_id": 11898}, {"snippet": "path_entry_finder.find_spec(fullname)", "intent": "An abstract method for finding a spec for the specified module . With arguments `fullname`.", "question_id": 4808}, {"snippet": "d[key] = value", "intent": "Set d[key] to value.", "question_id": 9473}, {"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}, {"snippet": "xml.etree.ElementTree.fromstringlist(sequence, parser=None)", "intent": "Parses an XML document from a `sequence` of string fragments . `parser` is an optional parser instance .", "question_id": 12440}, {"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}, {"snippet": "difflib.context_diff(a, b, fromfile='', fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2636}, {"snippet": "DTDHandler.notationDecl(name, publicId, systemId)", "intent": "Handle a notation declaration event . With arguments `name`, `publicId`, `systemId`.", "question_id": 12583}, {"snippet": "IMAP4.create(mailbox)", "intent": "Create new `mailbox` named mailbox .", "question_id": 4696}, {"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}, {"snippet": "email.encoders.encode_base64(msg)", "intent": "Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64 . With arguments `msg`.", "question_id": 3070}, {"snippet": "mh.__delitem__(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5787}, {"snippet": "difflib.context_diff(a, b, fromfiledate='')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . Any or all of these may be specified using strings for `fromfile` , `tofile` , `fromfiledate` , and `tofiledate` .", "question_id": 2631}, {"snippet": "calendar.prcal(year, w=0, m=3)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `w`, `m`.", "question_id": 1008}, {"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11152}, {"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}, {"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}, {"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}, {"snippet": "Morsel.setdefault(key, value=None)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) . With arguments `value`.", "question_id": 4612}, {"snippet": "threading.BoundedSemaphore()", "intent": "Class implementing bounded semaphore objects .", "question_id": 10404}, {"snippet": "Path.touch(mode=0o666)", "intent": "Create a file at this given path . If `mode` is given , it is combined with the process \u2019 umask value to determine the file mode and access flags .", "question_id": 7318}, {"snippet": "xml.etree.ElementTree.Comment(text=None)", "intent": "Comment element factory . `text` is a string containing the comment string .", "question_id": 12435}, {"snippet": "test.support.swap_attr(obj, attr, new_val)", "intent": "Context manager to swap out an attribute with a new object . If `attr` doesn \u2019 t exist on `obj` , it will be created and then deleted at the end of the block . With arguments `new_val`.", "question_id": 10194}, {"snippet": "ArgumentParser.parse_args(args=None, namespace=None)", "intent": "Convert argument strings to objects and assign them as attributes of the `namespace` . With arguments `args`.", "question_id": 72}, {"snippet": "math.pi", "intent": "The mathematical constant \u03c0 = 3.141592\u2026, to available precision.", "question_id": 5934}, {"snippet": "i_pv4_interface.with_prefixlen", "intent": "A string representation of the interface with the mask in prefix notation.", "question_id": 5227}, {"snippet": "mock.call_args_list", "intent": "This is a list of all the calls made to the mock object in sequence (so the length of the list is the number of times it has been called).", "question_id": 11593}, {"snippet": "window.border(ls, rs, ts, bs, tl)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`.", "question_id": 2022}, {"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}, {"snippet": "test.support.import_module(name, required_on(), deprecated=False)", "intent": "This function imports and returns the named module . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`, `required_on()`.", "question_id": 10241}, {"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}, {"snippet": "ctypes.WinError()", "intent": "Windows only : this function is probably the worst-named thing in ctypes .", "question_id": 1836}, {"snippet": "message.set_boundary(boundary)", "intent": "Set the `boundary` parameter of the Content-Type header to boundary .", "question_id": 3021}, {"snippet": "SMTP.starttls(keyfile=None, certfile=None, context=None)", "intent": "Put the SMTP connection in TLS ( Transport Layer Security ) mode . If `keyfile` and `certfile` are provided , they are used to create an ssl.SSLContext . Optional `context` parameter is an ssl.SSLContext object ; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None .", "question_id": 8533}, {"snippet": "base_selector.get_map()", "intent": "Return a mapping of file objects to selector keys .", "question_id": 8224}, {"snippet": "NNTP.newnews(group, date)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) .", "question_id": 6463}, {"snippet": "prototype(vtbl_index, name, paramflags, iid)", "intent": "Returns a foreign function that will call a COM method . `vtbl_index` is the index into the virtual function table , a small non-negative integer . `name` is name of the COM method . `iid` is an optional pointer to the interface identifier which is used in extended error reporting . With arguments `paramflags`.", "question_id": 1805}, {"snippet": "formatter.add_label_data(format, counter)", "intent": "Insert a label which should be placed to the left of the current left margin . If the `format` value is a string , it is interpreted as a format specification for `counter` , which should be an integer .", "question_id": 3824}, {"snippet": "Database.GetSummaryInformation(count)", "intent": "Return a new summary information object , by calling MsiGetSummaryInformation ( ) . `count` is the maximum number of updated values .", "question_id": 6070}, {"snippet": "null_importer.find_module(fullname, path)", "intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`, `path`.", "question_id": 4781}, {"snippet": "modulefinder.ModuleFinder(debug=0)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `debug` sets the debugging level ; higher values make the class print debugging messages about what it \u2019 s doing .", "question_id": 6027}, {"snippet": "ArgumentParser.add_subparsers()", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit .", "question_id": 84}, {"snippet": "traceback.print_stack(f=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10762}, {"snippet": "Path.home()", "intent": "Return a new path object representing the user \u2019 s home directory ( as returned by os.path.expanduser ( ) with ~ construct ) :", "question_id": 7266}, {"snippet": "dis.findlabels(code)", "intent": "Detect all offsets in the `code` object code which are jump targets , and return a list of these offsets .", "question_id": 2730}, {"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}, {"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}, {"snippet": "socket.sendfile(file, offset=0)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . `offset` tells from where to start reading the file .", "question_id": 8733}, {"snippet": "memoryview.__eq__(exporter)", "intent": "A memoryview and a PEP 3118 `exporter` are equal if their shapes are equivalent and if all corresponding values are equal when the operands \u2019 respective format codes are interpreted using struct syntax .", "question_id": 9412}, {"snippet": "nntplib.NNTP(host, port=119, usenetrc=False)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6418}, {"snippet": "bdb.user_return(frame, return_value)", "intent": "This method is called from dispatch_return ( ) when stop_here ( ) yields True . With arguments `frame`, `return_value`.", "question_id": 782}, {"snippet": "ssl.get_server_certificate(addr)", "intent": "Given the address `addr` of an SSL-protected server , as a ( hostname , port-number ) pair , fetches the server \u2019 s certificate , and returns it as a PEM-encoded string .", "question_id": 8892}, {"snippet": "base_server.handle_error(request, client_address)", "intent": "This function is called if the handle ( ) method of a RequestHandlerClass instance raises an exception . With arguments `request`, `client_address`.", "question_id": 8777}, {"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}, {"snippet": "email_message.make_related(boundary=None)", "intent": "Convert a non-multipart message into a multipart/related message , moving any existing Content- headers and payload into a ( new ) first part of the multipart . If `boundary` is specified , use it as the boundary string in the multipart , otherwise leave the boundary to be automatically created when it is needed ( for example , when the message is serialized ) .", "question_id": 3295}, {"snippet": "telnetlib.Telnet(host=None)", "intent": "Telnet represents a connection to a Telnet server . Alternatively , the `host` name and optional `port` number can be passed to the constructor too , in which case the connection to the server will be established before the constructor returns .", "question_id": 10006}, {"snippet": "math.remainder(x, y)", "intent": "Return the IEEE 754-style remainder of `x` with respect to `y` .", "question_id": 5903}, {"snippet": "turtle.circle(radius, extent=None)", "intent": "Draw a circle with given `radius` . The center is radius units left of the turtle ; `extent` \u2013 an angle \u2013 determines which part of the circle is drawn .", "question_id": 10924}, {"snippet": "test_case.assertRaisesRegex(exception, regex)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` .", "question_id": 11403}, {"snippet": "IMAP4.recent()", "intent": "Prompt server for an update .", "question_id": 4724}, {"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}, {"snippet": "bdb.Breakpoint(self, file, line, funcname=None)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . If a `funcname` is defined , a breakpoint hit will be counted when the first line of that function is executed . With arguments `self`.", "question_id": 757}, {"snippet": "ast.increment_lineno(node, n=1)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file . With arguments `n`.", "question_id": 154}, {"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}, {"snippet": "zipfile.PyZipFile(file, optimize=-1)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `optimize`.", "question_id": 12850}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . Rotating happens based on the product of `when` and `interval` .", "question_id": 5478}, {"snippet": "robot_file_parser.crawl_delay(useragent)", "intent": "Returns the value of the Crawl-delay parameter from robots.txt for the `useragent` in question .", "question_id": 11915}, {"snippet": "inspect.CO_VARKEYWORDS", "intent": "The code object has a variable keyword parameter (**kwargs-like).", "question_id": 5043}, {"snippet": "InputSource.getByteStream()", "intent": "Get the byte stream for this input source .", "question_id": 12641}, {"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}, {"snippet": "colorsys.hsv_to_rgb(h, s, v)", "intent": "Convert the color from HSV coordinates to RGB coordinates . With arguments `h`, `s`, `v`.", "question_id": 1408}, {"snippet": "fraction.__floor__()", "intent": "Returns the greatest int < = self .", "question_id": 3873}, {"snippet": "doctest.DocFileSuite(*paths)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . With arguments `*paths`.", "question_id": 2796}, {"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}, {"snippet": "fileinput.isstdin()", "intent": "Returns true if the last line was read from sys.stdin , otherwise returns false .", "question_id": 3797}, {"snippet": "turtle.mainloop()", "intent": "Starts event loop - calling Tkinter \u2019 s mainloop function .", "question_id": 11081}, {"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}, {"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}, {"snippet": "mock.reset_mock(return_value=False)", "intent": "The reset_mock method resets all the call attributes on a mock object : In case you want to reset `return_value` or side_effect , then pass the corresponding parameter as True .", "question_id": 11579}, {"snippet": "subprocess.run(args, shell=False)", "intent": "Run the command described by `args` . With arguments `shell`.", "question_id": 9573}, {"snippet": "header.encode(\\t', splitchars=';, linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3135}, {"snippet": "__import__(name, fromlist=())", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . The `fromlist` gives the names of objects or submodules that should be imported from the module given by name .", "question_id": 4138}, {"snippet": "bdb.clear_all_breaks()", "intent": "Delete all existing breakpoints .", "question_id": 798}, {"snippet": "i_pv6_network.compare_networks(other)", "intent": "Refer to the corresponding attribute documentation in IPv4Network . With arguments `other`.", "question_id": 5222}, {"snippet": "test_result.unexpectedSuccesses", "intent": "A list containing TestCase instances that were marked as expected failures, but succeeded.", "question_id": 11512}, {"snippet": "Cmd.doc_header", "intent": "The header to issue if the help output has a section for documented commands.", "question_id": 1150}, {"snippet": "dir()", "intent": "Without arguments , return the list of names in the current local scope .", "question_id": 4008}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "intent": "Run the `cmd` shell command . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `**kwds`.", "question_id": 535}, {"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}, {"snippet": "ast.increment_lineno(node)", "intent": "Increment the line number of each `node` in the tree starting at node by n. This is useful to \u201c move code \u201d to a different location in a file .", "question_id": 153}, {"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}, {"snippet": "importlib.machinery.ModuleSpec(name, loader)", "intent": "A specification for a module \u2019 s import-system-related state . A string for the fully-qualified `name` of the module . The `loader` to use for loading .", "question_id": 4912}, {"snippet": "pdb.Pdb(skip=None)", "intent": "Pdb is the debugger class . The `skip` argument , if given , must be an iterable of glob-style module name patterns .", "question_id": 7345}, {"snippet": "ssl.MemoryBIO", "intent": "A memory buffer that can be used to pass data between Python and an SSL protocol instance.", "question_id": 9053}, {"snippet": "itertools.count()", "intent": "Make an iterator that returns evenly spaced values starting with number `start` .", "question_id": 5246}, {"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}, {"snippet": "statistics.median_grouped(data, interval=1)", "intent": "Return the median of grouped continuous `data` , calculated as the 50th percentile , using interpolation . Optional argument `interval` represents the class interval , and defaults to 1 .", "question_id": 9131}, {"snippet": "set.isdisjoint(other)", "intent": "Return True if the set has no elements in common with `other` .", "question_id": 9438}, {"snippet": "sync_manager.BoundedSemaphore(value)", "intent": "Create a shared threading.BoundedSemaphore object and return a proxy for it . With arguments `value`.", "question_id": 6299}, {"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}, {"snippet": "urllib.parse.quote(string, safe='/', errors=None)", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' . The optional `encoding` and `errors` parameters specify how to deal with non-ASCII characters , as accepted by the str.encode ( ) method .", "question_id": 11710}, {"snippet": "TarFile.list()", "intent": "Print a table of contents to sys.stdout .", "question_id": 9927}, {"snippet": "tkinter.ttk.Style", "intent": "This class is used to manipulate the style database.", "question_id": 10672}, {"snippet": "doctest.DocTestFinder(parser=DocTestParser())", "intent": "A processing class used to extract the DocTests that are relevant to a given object , from its docstring and the docstrings of its contained objects . The optional argument `parser` specifies the DocTestParser object ( or a drop-in replacement ) that is used to extract doctests from docstrings .", "question_id": 2842}, {"snippet": "tarfile.ExtractError", "intent": "Is raised for non-fatal errors when using TarFile.extract(), but only if TarFile.errorlevel== 2.", "question_id": 9906}, {"snippet": "uu.decode(in_file, out_file=None, quiet=False)", "intent": "This call decodes uuencoded file `in_file` placing the result on file `out_file` . Setting `quiet` to a true value silences this warning .", "question_id": 11930}, {"snippet": "crypt.crypt(word, salt=None)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface . The optional `salt` is either a string as returned from mksalt ( ) , one of the crypt.METHOD_* values ( though not all may be available on all platforms ) , or a full encrypted password including salt , as returned by this function .", "question_id": 1675}, {"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}, {"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}, {"snippet": "partial.keywords", "intent": "The keyword arguments that will be supplied when the partial object is called.", "question_id": 4166}, {"snippet": "BaseTransport.get_extra_info(name, default=None)", "intent": "Return information about the transport or underlying resources it uses . `name` is a string representing the piece of transport-specific information to get . `default` is the value to return if the information is not available , or if the transport does not support querying it with the given third-party event loop implementation or on the current platform .", "question_id": 399}, {"snippet": "context.copy_decimal(num)", "intent": "Return a copy of the Decimal instance `num` .", "question_id": 2512}, {"snippet": "ssl.SSLObject", "intent": "A reduced-scope variant of SSLSocket representing an SSL protocol instance that does not contain any network IO methods.", "question_id": 9052}, {"snippet": "ctypes.c_longdouble", "intent": "Represents the C long double datatype.", "question_id": 1859}, {"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}, {"snippet": "codeop.compile_command(source)", "intent": "Tries to compile `source` , which should be a string of Python code and return a code object if source is valid Python code .", "question_id": 1304}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, bases=(), namespace=None)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace .", "question_id": 2192}, {"snippet": "audioop.max(fragment, width)", "intent": "Return the maximum of the absolute value of all samples in a `fragment` . With arguments `width`.", "question_id": 696}, {"snippet": "context.remainder_near(x, y)", "intent": "Returns `x` - `y` * n , where n is the integer nearest the exact value of x / y ( if the result is 0 then its sign will be the sign of x ) .", "question_id": 2566}, {"snippet": "ipaddress.ip_network(address, strict=True)", "intent": "Return an IPv4Network or IPv6Network object depending on the IP `address` passed as argument . `strict` is passed to IPv4Network or IPv6Network constructor .", "question_id": 5172}, {"snippet": "memoryview(obj)", "intent": "Return a \u201c memory view \u201d object created from the given argument . With arguments `obj`.", "question_id": 4053}, {"snippet": "mh.get_sequences()", "intent": "Return a dictionary of sequence names mapped to key lists .", "question_id": 5783}, {"snippet": "mh_message.add_sequence(sequence)", "intent": "Add `sequence` to the list of sequences that include this message .", "question_id": 5836}, {"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}, {"snippet": "test_case.assertWarnsRegex(warning, regex)", "intent": "Like assertWarns ( ) but also tests that `regex` matches on the message of the triggered `warning` .", "question_id": 11409}, {"snippet": "codecs.ignore_errors(exception)", "intent": "Implements the 'ignore ' error handling : malformed data is ignored and encoding or decoding is continued without further notice . With arguments `exception`.", "question_id": 1257}, {"snippet": "auto.with_traceback(tb)", "intent": "This method sets `tb` as the new traceback for the exception and returns the exception object .", "question_id": 3630}, {"snippet": "null_translations.install()", "intent": "This method installs gettext ( ) into the built-in namespace , binding it to _ .", "question_id": 4258}, {"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this turtle . With arguments `add`.", "question_id": 11021}, {"snippet": "sys.getprofile()", "intent": "Get the profiler function as set by setprofile ( ) .", "question_id": 9807}, {"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}, {"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}, {"snippet": "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)", "intent": "Report that the given `example` raised an unexpected exception . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `exc_info` is a tuple containing information about the unexpected exception ( as returned by sys.exc_info ( ) ) .", "question_id": 2872}, {"snippet": "test.support.run_doctest(module)", "intent": "Run doctest.testmod ( ) on the given `module` .", "question_id": 10158}, {"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}, {"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}, {"snippet": "email_message.make_related(boundary=None)", "intent": "Convert a non-multipart message into a multipart/related message , moving any existing Content- headers and payload into a ( new ) first part of the multipart . If `boundary` is specified , use it as the boundary string in the multipart , otherwise leave the boundary to be automatically created when it is needed ( for example , when the message is serialized ) .", "question_id": 3295}, {"snippet": "window.border(ls, rs, ts, bs, tl, tr, bl, br)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`, `bl`, `br`.", "question_id": 2019}, {"snippet": "difflib.context_diff(a, b, lineterm='\\n')", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . For inputs that do not have trailing newlines , set the `lineterm` argument to `` '' so that the output will be uniformly newline free .", "question_id": 2634}, {"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}, {"snippet": "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)", "intent": "Update the `is_authenticated` flag for the given `uri` or list of URIs . With arguments `self`.", "question_id": 11862}, {"snippet": "os.walk(top, onerror=None)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . If optional argument `onerror` is specified , it should be a function ; it will be called with one argument , an OSError instance .", "question_id": 6977}, {"snippet": "IMAP4.authenticate(mechanism, authobject)", "intent": "Authenticate command \u2014 requires response processing . `mechanism` specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism . `authobject` must be a callable object :", "question_id": 4692}, {"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}, {"snippet": "time.replace(microsecond=self.microsecond)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `microsecond`.", "question_id": 2338}, {"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}, {"snippet": "shelve.Shelf(dict, writeback=False)", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . If the `writeback` parameter is True , the object will hold a cache of all entries accessed and write them back to the dict at sync and close times .", "question_id": 8246}, {"snippet": "test.support.script_helper.assert_python_ok(*args, **env_vars)", "intent": "Assert that running the interpreter with args and optional environment variables env_vars succeeds ( rc == 0 ) and return a ( return code , stdout , stderr ) tuple . With arguments `*args`, `**env_vars`.", "question_id": 10301}, {"snippet": "importlib.resources.open_text(package, resource)", "intent": "Open for text reading the `resource` within `package` .", "question_id": 4853}, {"snippet": "re.sub(pattern, repl, string, count=0, flags=0)", "intent": "Return the `string` obtained by replacing the leftmost non-overlapping occurrences of `pattern` in string by the replacement `repl` . The optional argument `count` is the maximum number of pattern occurrences to be replaced ; count must be a non-negative integer . With arguments `flags`.", "question_id": 7954}, {"snippet": "functools.cmp_to_key(func)", "intent": "Transform an old-style comparison function to a key function . With arguments `func`.", "question_id": 4145}, {"snippet": "window.scroll(lines=1)", "intent": "Scroll the screen or scrolling region upward by `lines` lines .", "question_id": 2110}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION", "intent": "A CDATA marked section was not closed.", "question_id": 7806}, {"snippet": "email.utils.mktime_tz(tuple)", "intent": "Turn a 10-tuple as returned by parsedate_tz ( ) into a UTC timestamp ( seconds since the Epoch ) . If the timezone item in the `tuple` is None , assume local time .", "question_id": 3467}, {"snippet": "message.get_params(failobj=None, unquote=True)", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` . If there is no '= ' sign in the parameter the value is the empty string , otherwise the value is as described in get_param ( ) and is unquoted if optional `unquote` is True ( the default ) .", "question_id": 2988}, {"snippet": "charset.header_encode_lines(string, maxlengths)", "intent": "Header-encode a `string` by converting it first to bytes . This is similar to header_encode ( ) except that the string is fit into maximum line lengths as given by the argument `maxlengths` , which must be an iterator : each element returned from this iterator will provide the next maximum line length .", "question_id": 2921}, {"snippet": "fileinput.input(mode='r')", "intent": "Create an instance of the FileInput class . With arguments `mode`.", "question_id": 3787}, {"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}, {"snippet": "SystemExit", "intent": "This exception is raised by the sys.exit() function.", "question_id": 3669}, {"snippet": "decimal.ROUND_HALF_DOWN", "intent": "Round to nearest with ties going towards zero.", "question_id": 2580}, {"snippet": "os.walk(top, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6978}, {"snippet": "base_http_request_handler.client_address", "intent": "Contains a tuple of the form (host, port) referring to the client\u2019s address.", "question_id": 4617}, {"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}, {"snippet": "audioop.findfit(fragment, reference)", "intent": "Try to match `reference` as well as possible to a portion of `fragment` ( which should be the longer fragment ) .", "question_id": 689}, {"snippet": "ast.iter_child_nodes(node)", "intent": "Yield all direct child nodes of `node` , that is , all fields that are nodes and all items of fields that are lists of nodes .", "question_id": 157}, {"snippet": "turtle.fd(distance)", "intent": "Move the turtle forward by the specified `distance` , in the direction the turtle is headed .", "question_id": 10904}, {"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}, {"snippet": "OptionParser.set_defaults(dest=value)", "intent": "Set default values for several option destinations at once . With arguments `dest`.", "question_id": 6648}, {"snippet": "gettext.install(domain)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "question_id": 4239}, {"snippet": "TypeError", "intent": "Raised when an operation or function is applied to an object of inappropriate type.", "question_id": 3671}, {"snippet": "SSLSocket.do_handshake()", "intent": "Perform the SSL setup handshake .", "question_id": 8976}, {"snippet": "mh.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return an MH instance representing it .", "question_id": 5781}, {"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}, {"snippet": "webbrowser.open_new_tab(url)", "intent": "Open `url` in a new page ( \u201c tab \u201d ) of the default browser , if possible , otherwise equivalent to open_new ( ) .", "question_id": 12107}, {"snippet": "property(doc=None)", "intent": "Return a property attribute . And `doc` creates a docstring for the attribute .", "question_id": 4089}, {"snippet": "uuid.UUID(fields=None)", "intent": "Create a UUID from either a string of 32 hexadecimal digits , a string of 16 `bytes` in big-endian order as the bytes argument , a string of 16 bytes in little-endian order as the `bytes_le` argument , a tuple of six integers ( 32-bit time_low , 16-bit time_mid , 16-bit time_hi_version , 8-bit clock_seq_hi_variant , 8-bit clock_seq_low , 48-bit node ) as the `fields` argument , or a single 128-bit integer as the `int` argument .", "question_id": 11941}, {"snippet": "mailcap.findmatch(caps, plist=)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `plist` can be a list containing named parameters ; the default value is simply an empty list . With arguments `caps`.", "question_id": 5872}, {"snippet": "unittest.TestSuite(tests=())", "intent": "This class represents an aggregation of individual test cases and test suites . If `tests` is given , it must be an iterable of individual test cases or other test suites that will be used to build the suite initially .", "question_id": 11482}, {"snippet": "pty.spawn(argv)", "intent": "Spawn a process , and connect its controlling terminal with the current process \u2019 s standard io . With arguments `argv`.", "question_id": 7702}, {"snippet": "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')", "intent": "Creates a StreamReaderWriter instance . `stream` must be a file-like object . `Reader` and `Writer` must be factory functions or classes providing the StreamReader and StreamWriter interface resp . With arguments `errors`.", "question_id": 1298}, {"snippet": "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)", "intent": "Create a new WSGI server listening on `host` and `port` , accepting connections for `app` . The return value is an instance of the supplied `server_class` , and will process requests using the specified `handler_class` .", "question_id": 12226}, {"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}, {"snippet": "curses.isendwin()", "intent": "Return True if endwin ( ) has been called ( that is , the curses library has been deinitialized ) .", "question_id": 1949}, {"snippet": "Record.SetString(field, value)", "intent": "Set `field` to `value` through MsiRecordSetString ( ) .", "question_id": 6084}, {"snippet": "window.setscrreg(top, bottom)", "intent": "Set the scrolling region from line `top` to line `bottom` .", "question_id": 2114}, {"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}, {"snippet": "mh.get_folder(folder)", "intent": "Return an MH instance representing the `folder` whose name is folder .", "question_id": 5780}, {"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}, {"snippet": "weakref.proxy(object, callback)", "intent": "Return a proxy to `object` which uses a weak reference . `callback` is the same as the parameter of the same name to the ref ( ) function .", "question_id": 12077}, {"snippet": "mh.__delitem__(key)", "intent": "These methods immediately delete the message . With arguments `key`.", "question_id": 5787}, {"snippet": "struct.Struct(format)", "intent": "Return a new Struct object which writes and reads binary data according to the `format` string format .", "question_id": 9558}, {"snippet": "completed_process.stdout", "intent": "Captured stdout from the child process.", "question_id": 9580}, {"snippet": "marshal.dump(value, file, version)", "intent": "Write the `value` on the open `file` . The `version` argument indicates the data format that dump should use ( see below ) .", "question_id": 5878}, {"snippet": "platform.libc_ver(executable=sys.executable, lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7542}, {"snippet": "xml.etree.ElementTree.iterparse(source, parser=None)", "intent": "Parses an XML section into an element tree incrementally , and reports what \u2019 s going on to the user . `source` is a filename or file object containing XML data . `parser` is an optional parser instance .", "question_id": 12444}, {"snippet": "content_manager.get_content(msg, *args, **kw)", "intent": "Look up a handler function based on the mimetype of `msg` ( see next paragraph ) , call it , passing through all arguments , and return the result of the call . With arguments `*args`, `**kw`.", "question_id": 3032}, {"snippet": "date.fromordinal(ordinal)", "intent": "Return the date corresponding to the proleptic Gregorian `ordinal` , where January 1 of year 1 has ordinal 1 .", "question_id": 2221}, {"snippet": "getopt.getopt(args)", "intent": "Parses command line options and parameter list . `args` is the argument list to be parsed , without the leading reference to the running program .", "question_id": 4196}, {"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}, {"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}, {"snippet": "stream_reader.read(n=-1)", "intent": "Read up to `n` bytes .", "question_id": 505}, {"snippet": "doc_test_finder.find(obj, name, module)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object .", "question_id": 2852}, {"snippet": "config_parser.remove_section(section)", "intent": "Remove the specified `section` from the configuration .", "question_id": 1564}, {"snippet": "compile(source, filename, mode)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) .", "question_id": 3992}, {"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}, {"snippet": "errno.EALREADY", "intent": "Operation already in progress", "question_id": 3619}, {"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}, {"snippet": "lzma.compress(data, format=FORMAT_XZ, preset=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5710}, {"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}, {"snippet": "stream_reader.read(size)", "intent": "Decodes data from the stream and returns the resulting object . The `size` argument indicates the approximate maximum number of encoded bytes or code points to read for decoding .", "question_id": 1288}, {"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}, {"snippet": "element_tree.find(match, namespaces=None)", "intent": "Same as Element.find ( ) , starting at the root of the tree . With arguments `match`, `namespaces`.", "question_id": 12513}, {"snippet": "Node.normalize()", "intent": "Join adjacent text nodes so that all stretches of text are stored as single Text instances .", "question_id": 12334}, {"snippet": "shlex.quotes", "intent": "Characters that will be considered string quotes.", "question_id": 8298}, {"snippet": "str.splitlines()", "intent": "Return a list of the lines in the string , breaking at line boundaries .", "question_id": 9246}, {"snippet": "snapshot.statistics(key_type: str, cumulative: bool=False)", "intent": "Get statistics as a sorted list of Statistic instances grouped by key_type : With arguments `key_type: str`, `cumulative: bool`.", "question_id": 10877}, {"snippet": "SSLContext.wrap_socket(sock, session=None)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) . `session` , see session .", "question_id": 9027}, {"snippet": "array.index(x)", "intent": "Return the smallest i such that i is the index of the first occurrence of `x` in the array .", "question_id": 130}, {"snippet": "http.client.HTTPSConnection(host, timeout)", "intent": "A subclass of HTTPConnection that uses SSL for communication with secure servers . With arguments `host`, `timeout`.", "question_id": 4382}, {"snippet": "locale.format_string(format, val)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator .", "question_id": 5384}, {"snippet": "NamedNodeMap.length", "intent": "The length of the attribute list.", "question_id": 12374}, {"snippet": "header_registry.__getitem__(name)", "intent": "Construct and return a class to handle creating a `name` header .", "question_id": 3184}, {"snippet": "mimetypes.add_type(type, ext, strict=True)", "intent": "Add a mapping from the MIME `type` type to the extension `ext` . When `strict` is True ( the default ) , the mapping will be added to the official MIME types , otherwise to the non-standard ones .", "question_id": 5949}, {"snippet": "email.charset.add_charset(charset, output_charset=None)", "intent": "Add character properties to the global registry . `charset` is the input character set , and must be the canonical name of a character set . Optional `output_charset` is the character set that the output should be in .", "question_id": 2929}, {"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}, {"snippet": "sniffer.has_header(sample)", "intent": "Analyze the `sample` text ( presumed to be in CSV format ) and return True if the first row appears to be a series of column headers .", "question_id": 1717}, {"snippet": "filter.all_frames", "intent": "If all_frames is True, all frames of the traceback are checked.", "question_id": 10866}, {"snippet": "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) . `dklen` is the length of the derived key .", "question_id": 4315}, {"snippet": "datetime.replace(day=self.day)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `day`.", "question_id": 2287}, {"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' .", "question_id": 3484}, {"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}, {"snippet": "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")", "intent": "Get channel binding data for current connection , as a bytes object . The `cb_type` parameter allow selection of the desired channel binding type .", "question_id": 8983}, {"snippet": "datetime.combine(date, time)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s .", "question_id": 2265}, {"snippet": "email.headerregistry.DateHeader", "intent": "RFC 5322 specifies a very specific format for dates within email headers.", "question_id": 3156}, {"snippet": "@functools.wraps(wrapped)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`.", "question_id": 4160}, {"snippet": "unittest.mock.Mock(**kwargs, return_value=DEFAULT)", "intent": "Create a new Mock object . With arguments `**kwargs`, `return_value`.", "question_id": 11563}, {"snippet": "XMLReader.parse(source)", "intent": "Process an input `source` , producing SAX events .", "question_id": 12613}, {"snippet": "threading.Barrier(parties)", "intent": "Create a barrier object for `parties` number of threads .", "question_id": 10417}, {"snippet": "curses.version", "intent": "A bytes object representing the current version of the module.", "question_id": 2133}, {"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}, {"snippet": "test.support.script_helper.kill_python(p)", "intent": "Run the given subprocess.Popen process until completion and return stdout . With arguments `p`.", "question_id": 10307}, {"snippet": "Pattern.sub(repl, string)", "intent": "Identical to the sub ( ) function , using the compiled pattern . With arguments `repl`, `string`.", "question_id": 7987}, {"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}, {"snippet": "errno.EBADFD", "intent": "File descriptor in bad state", "question_id": 3582}, {"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}, {"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}, {"snippet": "gzip.open(filename, mode='rb')", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4273}, {"snippet": "loop.remove_signal_handler(sig)", "intent": "Remove the handler for the `sig` signal .", "question_id": 304}, {"snippet": "nntplib.NNTP_SSL(host, timeout, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `user`.", "question_id": 6421}, {"snippet": "bdb.canonic(filename)", "intent": "Auxiliary method for getting a `filename` in a canonical form , that is , as a case-normalized ( on case-insensitive filesystems ) absolute path , stripped of surrounding angle brackets .", "question_id": 770}, {"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6799}, {"snippet": "chunk.Chunk(file)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object .", "question_id": 1075}, {"snippet": "urllib.request.url2pathname(path)", "intent": "Convert the `path` component path from a percent-encoded URL to the local syntax for a path .", "question_id": 11766}, {"snippet": "decimal.is_signed()", "intent": "Return True if the argument has a negative sign and False otherwise .", "question_id": 2424}, {"snippet": "os.makedirs(name)", "intent": "Recursive directory creation function . With arguments `name`.", "question_id": 6866}, {"snippet": "email.contentmanager.set_content(msg, <'EmailMessage'>, cid=None)", "intent": "Add `headers` and payload to `msg` : If `cid` is specified , add a Content-ID header with cid as its value . With arguments `<'EmailMessage'>`.", "question_id": 3063}, {"snippet": "maildir.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5761}, {"snippet": "bdb.runeval(expr)", "intent": "Debug an expression executed via the eval ( ) function . With arguments `expr`.", "question_id": 811}, {"snippet": "decimal.ROUND_HALF_UP", "intent": "Round to nearest with ties going away from zero.", "question_id": 2582}, {"snippet": "gettext.install(domain, codeset=None)", "intent": "This installs the function _ ( ) in Python \u2019 s builtins namespace , based on `domain` , `localedir` , and `codeset` which are passed to the function translation ( ) .", "question_id": 4241}, {"snippet": "OpenerDirector.open(url)", "intent": "Open the given `url` ( which can be a request object or a string ) , optionally passing the given `data` .", "question_id": 11837}, {"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}, {"snippet": "warnings.warn_explicit(message, category, filename, lineno)", "intent": "This is a low-level interface to the functionality of warn ( ) , passing in explicitly the `message` , `category` , `filename` and line number , and optionally the `module` name and the `registry` ( which should be the __warningregistry__ dictionary of the module ) . With arguments `lineno`.", "question_id": 12007}, {"snippet": "cursor.executescript(sql_script)", "intent": "This is a nonstandard convenience method for executing multiple SQL statements at once . `sql_script` can be an instance of str .", "question_id": 8843}, {"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}, {"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}, {"snippet": "maildir.get_file(key)", "intent": "Depending upon the host platform , it may not be possible to modify or remove the underlying message while the returned file remains open . With arguments `key`.", "question_id": 5767}, {"snippet": "pickle.dumps(obj, protocol=None)", "intent": "Return the pickled representation of the object `obj` as a bytes object , instead of writing it to a file . Arguments `protocol` and `fix_imports` have the same meaning as in dump ( ) .", "question_id": 7368}, {"snippet": "user_list.data", "intent": "A real list object used to store the contents of the UserList class.", "question_id": 1400}, {"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}, {"snippet": "difflib.IS_LINE_JUNK(line)", "intent": "Return true for ignorable lines . The `line` line is ignorable if line is blank or contains a single ' # ' , otherwise it is not ignorable .", "question_id": 2667}, {"snippet": "widget.next(item)", "intent": "Returns the identifier of `item` \u2019 s next sibling , or \u2018 \u2019 if item is the last child of its parent .", "question_id": 10645}, {"snippet": "email.utils.formatdate()", "intent": "Returns a date string as per RFC 2822 , e.g .", "question_id": 3468}, {"snippet": "FTP.connect(port=0)", "intent": "Connect to the given `host` and `port` .", "question_id": 3906}, {"snippet": "asyncio.as_completed(aws, timeout=None)", "intent": "Run awaitable objects in the `aws` set concurrently . Raises asyncio.TimeoutError if the `timeout` occurs before all Futures are done .", "question_id": 617}, {"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11119}, {"snippet": "setattr(object, name, value)", "intent": "This is the counterpart of getattr ( ) . The arguments are an `object` , a string and an arbitrary `value` . The string may `name` an existing attribute or a new attribute .", "question_id": 4104}, {"snippet": "compileall.compile_path(force=False)", "intent": "Byte-compile all the .py files found along sys.path . With arguments `force`.", "question_id": 1432}, {"snippet": "winreg.SetValue(key, sub_key, type, value)", "intent": "Associates a `value` with a specified `key` . `sub_key` is a string that names the subkey with which the value is associated . `type` is an integer that specifies the type of the data .", "question_id": 12150}, {"snippet": "audioop.byteswap(fragment, width)", "intent": "\u201c Byteswap \u201d all samples in a `fragment` and returns the modified fragment . With arguments `width`.", "question_id": 686}, {"snippet": "control.event(event, argument, ordering=None)", "intent": "Make an entry into the ControlEvent table for this control . With arguments `event`, `argument`, `ordering`.", "question_id": 6128}, {"snippet": "io_base.readlines()", "intent": "Read and return a list of lines from the stream .", "question_id": 5072}, {"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}, {"snippet": "Pattern.split(string, maxsplit=0)", "intent": "Identical to the split ( ) function , using the compiled pattern . With arguments `string`, `maxsplit`.", "question_id": 7980}, {"snippet": "unittest.mock.patch(target, **kwargs)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11608}, {"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}, {"snippet": "mime_types.read(filename)", "intent": "Load MIME information from a file named `filename` .", "question_id": 5970}, {"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}, {"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}, {"snippet": "ArgumentParser.add_mutually_exclusive_group()", "intent": "Create a mutually exclusive group .", "question_id": 99}, {"snippet": "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')", "intent": "Class used to represent information about a member of an archive . `filename` should be the full name of the archive member , and `date_time` should be a tuple containing six fields which describe the time of the last modification to the file ; the fields are described in section ZipInfo Objects . With arguments `1`, `1`, `0`, `0`, `0)`.", "question_id": 12784}, {"snippet": "TarInfo.fromtarfile(tarfile)", "intent": "Read the next member from the TarFile object `tarfile` and return it as a TarInfo object .", "question_id": 9972}, {"snippet": "ssl.match_hostname(cert, hostname)", "intent": "Verify that `cert` ( in decoded format as returned by SSLSocket.getpeercert ( ) ) matches the given `hostname` .", "question_id": 8890}, {"snippet": "sys.__stderr__", "intent": "These objects contain the original values of stdin, stderr and stdout at the start of the program.", "question_id": 9849}, {"snippet": "decimal.max_mag(other)", "intent": "Similar to the max ( ) method , but the comparison is done using the absolute values of the operands . With arguments `other`.", "question_id": 2445}, {"snippet": "defaultdict.__missing__(key)", "intent": "If the default_factory attribute is None , this raises a KeyError exception with the `key` as argument .", "question_id": 1374}, {"snippet": "Path.resolve()", "intent": "Make the path absolute , resolving any symlinks .", "question_id": 7310}, {"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}, {"snippet": "calendar.prcal(year, l=0)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `l`.", "question_id": 1003}, {"snippet": "itertools.accumulate(iterable)", "intent": "Make an iterator that returns accumulated sums , or accumulated results of other binary functions ( specified via the optional `func` argument ) . Elements of the input `iterable` may be any type that can be accepted as arguments to func .", "question_id": 5240}, {"snippet": "turtle.textinput(title, prompt)", "intent": "Pop up a dialog window for input of a string . Parameter `title` is the title of the dialog window , `prompt` is a text mostly describing what information to input .", "question_id": 11083}, {"snippet": "@dataclasses.dataclass(eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `eq`.", "question_id": 2160}, {"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}, {"snippet": "aifc.setpos(pos)", "intent": "Seek to the specified frame number . With arguments `pos`.", "question_id": 22}, {"snippet": "pkgutil.iter_modules()", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path .", "question_id": 7445}, {"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}, {"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, extra=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `extra`.", "question_id": 5587}, {"snippet": "Database.Close()", "intent": "Close the database object , through MsiCloseHandle ( ) .", "question_id": 6071}, {"snippet": "queue_handler.emit(record)", "intent": "Enqueues the result of preparing the LogRecord . This can result in the `record` silently being dropped ( if logging.raiseExceptions is False ) or a message printed to sys.stderr ( if logging.raiseExceptions is True ) .", "question_id": 5554}, {"snippet": "context.fma(x, y, z)", "intent": "Returns `x` multiplied by `y` , plus `z` .", "question_id": 2531}, {"snippet": "traceback.format_stack(f=None)", "intent": "A shorthand for format_list ( extract_stack ( `f` , `limit` ) ) .", "question_id": 10788}, {"snippet": "sum(iterable)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4124}, {"snippet": "@test.support.refcount_test(test)", "intent": "Decorator for tests which involve reference counting . The decorator does not run the `test` if it is not run by CPython .", "question_id": 10225}, {"snippet": "urllib.parse.quote_plus(string, safe='', encoding=None)", "intent": "Like quote ( ) , but also replace spaces by plus signs , as required for quoting HTML form values when building up a query `string` to go into a URL . Plus signs in the original string are escaped unless they are included in `safe` . With arguments `encoding`.", "question_id": 11717}, {"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}, {"snippet": "codecs.CodecInfo(encode, decode)", "intent": "Codec details when looking up the codec registry . With arguments `encode`, `decode`.", "question_id": 1201}, {"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}, {"snippet": "IndentationError", "intent": "Base class for syntax errors related to incorrect indentation.", "question_id": 3666}, {"snippet": "pkgutil.ImpLoader(fullname, file, filename, etc)", "intent": "Loader that wraps Python \u2019 s \u201c classic \u201d import algorithm . With arguments `fullname`, `file`, `filename`, `etc`.", "question_id": 7439}, {"snippet": "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)", "intent": "Returns a new instance of the SMTPHandler class . To specify a non-standard SMTP port , use the ( host , port ) tuple format for the `mailhost` argument . The `toaddrs` should be a list of strings . The instance is initialized with the from and to addresses and `subject` line of the email . With arguments `fromaddr`.", "question_id": 5515}, {"snippet": "email.utils.encode_rfc2231(s, language=None)", "intent": "Encode the string `s` according to RFC 2231 . Optional `charset` and `language` , if given is the character set name and language name to use .", "question_id": 3481}, {"snippet": "compileall.compile_dir(dir, maxlevels=10)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . The `maxlevels` parameter is used to limit the depth of the recursion ; it defaults to 10 .", "question_id": 1410}, {"snippet": "tarfile.GNU_FORMAT", "intent": "GNU tar format.", "question_id": 9910}, {"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}, {"snippet": "datetime.timedelta(microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2207}, {"snippet": "termios.tcsetattr(fd, when, attributes)", "intent": "Set the tty `attributes` for file descriptor `fd` from the attributes , which is a list like the one returned by tcgetattr ( ) . The `when` argument determines when the attributes are changed : TCSANOW to change immediately , TCSADRAIN to change after transmitting all queued output , or TCSAFLUSH to change after transmitting all queued output and discarding all queued input .", "question_id": 10103}, {"snippet": "header_registry.__getitem__(name)", "intent": "Construct and return a class to handle creating a `name` header .", "question_id": 3184}, {"snippet": "@dataclasses.dataclass(init=True, repr=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `repr`.", "question_id": 2164}, {"snippet": "ftplib.FTP_TLS(passwd='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . With arguments `passwd`.", "question_id": 3891}, {"snippet": "source_file_loader.load_module()", "intent": "Concrete implementation of importlib.abc.Loader.load_module ( ) where specifying the `name` of the module to load is optional .", "question_id": 4895}, {"snippet": "sax2_dom.getEvent()", "intent": "Return a tuple containing event and the current node as xml.dom.minidom.Document if event equals START_DOCUMENT , xml.dom.minidom.Element if event equals START_ELEMENT or END_ELEMENT or xml.dom.minidom.Text if event equals CHARACTERS .", "question_id": 12432}, {"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}, {"snippet": "hmac.new(key)", "intent": "Return a new hmac object . `key` is a bytes or bytearray object giving the secret key .", "question_id": 4329}, {"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}, {"snippet": "ArgumentParser.add_subparsers()", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit .", "question_id": 84}, {"snippet": "window.touchline(start, count, changed)", "intent": "Pretend `count` lines have been `changed` , starting with line `start` .", "question_id": 2125}, {"snippet": "test.support.import_fresh_module(name, blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10244}, {"snippet": "math.log1p(x)", "intent": "Return the natural logarithm of 1+x ( base e ) . The result is calculated in a way which is accurate for `x` near zero .", "question_id": 5909}, {"snippet": "socket.sendfile(file, count=None)", "intent": "Send a `file` until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 8734}, {"snippet": "license", "intent": "Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time).", "question_id": 1614}, {"snippet": "turtle.stamp()", "intent": "Stamp a copy of the turtle shape onto the canvas at the current turtle position .", "question_id": 10929}, {"snippet": "sys.setcheckinterval(interval)", "intent": "Set the interpreter \u2019 s \u201c check `interval` \u201d .", "question_id": 9834}, {"snippet": "tzinfo.utcoffset(dt)", "intent": "Return offset of local time from UTC , as a timedelta object that is positive east of UTC . With arguments `dt`.", "question_id": 2353}, {"snippet": "trace.Trace(count=1)", "intent": "Create an object to `trace` execution of a single statement or expression . `count` enables counting of line numbers .", "question_id": 10707}, {"snippet": "epoll.poll(timeout=-1)", "intent": "Wait for events . `timeout` in seconds ( float )", "question_id": 8188}, {"snippet": "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)", "intent": "Report that the given `example` raised an unexpected exception . `out` is the output function that was passed to DocTestRunner.run ( ) . `test` is the test containing example . `exc_info` is a tuple containing information about the unexpected exception ( as returned by sys.exc_info ( ) ) .", "question_id": 2872}, {"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5547}, {"snippet": "typing.Generator(IteratorT_co, GenericT_co)", "intent": "A generator can be annotated by the generic type Generator [ YieldType , SendType , ReturnType ] . With arguments `IteratorT_co`, `GenericT_co`.", "question_id": 11310}, {"snippet": "datagram_handler.makeSocket()", "intent": "The factory method of SocketHandler is here overridden to create a UDP socket ( socket.SOCK_DGRAM ) .", "question_id": 5492}, {"snippet": "importlib.__import__(name, globals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`.", "question_id": 4784}, {"snippet": "winreg.KEY_ENUMERATE_SUB_KEYS", "intent": "Required to enumerate the subkeys of a registry key.", "question_id": 12169}, {"snippet": "queue.get_nowait()", "intent": "Equivalent to get ( False ) .", "question_id": 6207}, {"snippet": "resource.RLIMIT_SWAP", "intent": "The maximum size (in bytes) of the swap space that may be reserved or used by all of this user id\u2019s processes.", "question_id": 8093}, {"snippet": "tixCommand.tix_getimage(self, name)", "intent": "Locates an image file of the `name` name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the tix_addbitmapdir ( ) method above ) . With arguments `self`.", "question_id": 10587}, {"snippet": "csv.DictReader(f, *args, **kwds, restkey=None, restval=None)", "intent": "Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional `fieldnames` parameter . If fieldnames is omitted , the values in the first row of file `f` will be used as the fieldnames . If a row has more fields than fieldnames , the remaining data is put in a list and stored with the fieldname specified by `restkey` ( which defaults to None ) . With arguments `*args`, `**kwds`, `restval`.", "question_id": 1700}, {"snippet": "csv.Sniffer", "intent": "The Sniffer class is used to deduce the format of a CSV file.", "question_id": 1714}, {"snippet": "struct.pack_into(buffer, offset, v1, v2)", "intent": "Identical to the pack_into ( ) function , using the compiled format . With arguments `buffer`, `offset`, `v1`, `v2`.", "question_id": 9560}, {"snippet": "dict.setdefault(key, default)", "intent": "If `key` is in the dictionary , return its value . If not , insert key with a value of `default` and return default .", "question_id": 9489}, {"snippet": "turtle.resizemode()", "intent": "Set resizemode to one of the values : \u201c auto \u201d , \u201c user \u201d , \u201c noresize \u201d .", "question_id": 10984}, {"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}, {"snippet": "compileall.compile_file(fullname, rx=None)", "intent": "Compile the file with path `fullname` . If `rx` is given , its search method is passed the full path name to the file being compiled , and if it returns a true value , the file is not compiled and True is returned .", "question_id": 1422}, {"snippet": "mime_types.readfp(fp, strict=True)", "intent": "Load MIME type information from an open file `fp` . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "question_id": 5973}, {"snippet": "inspect.getframeinfo(frame)", "intent": "Get information about a `frame` or traceback object .", "question_id": 5023}, {"snippet": "os.P_PGID", "intent": "These are the possible values for idtype in waitid().", "question_id": 7073}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_PUBLICID", "intent": "Characters were found in the public id that are not allowed.", "question_id": 7815}, {"snippet": "header.encode(\\t', linesep='\\n')", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . `linesep` specifies the characters used to separate the lines of the folded header . With arguments `\\t'`.", "question_id": 3133}, {"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}, {"snippet": "logging.handlers.TimedRotatingFileHandler(filename, utc=False)", "intent": "Returns a new instance of the TimedRotatingFileHandler class . On rotating it also sets the `filename` suffix . If the `utc` argument is true , times in UTC will be used ; otherwise local time is used .", "question_id": 5476}, {"snippet": "nntplib.NNTP(host, password=None)", "intent": "Return a new NNTP object , representing a connection to the NNTP server running on `host` host , listening at `port` port . If the optional `user` and `password` are provided , or if suitable credentials are present in /.netrc and the optional flag `usenetrc` is true , the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server .", "question_id": 6412}, {"snippet": "curses.resize_term(nlines, ncols)", "intent": "Backend function used by resizeterm ( ) , performing most of the work ; when resizing the windows , resize_term ( ) blank-fills the areas that are extended . With arguments `nlines`, `ncols`.", "question_id": 1975}, {"snippet": "gdbm.reorganize()", "intent": "If you have carried out a lot of deletions and would like to shrink the space used by the gdbm file , this routine will reorganize the database .", "question_id": 2376}, {"snippet": "keyword.iskeyword(s)", "intent": "Return true if `s` is a Python keyword .", "question_id": 5341}, {"snippet": "text_calendar.formatmonth(theyear, themonth)", "intent": "Return a month \u2019 s calendar in a multi-line string . With arguments `theyear`, `themonth`.", "question_id": 928}, {"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}, {"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}, {"snippet": "ctypes.util.find_library(name)", "intent": "Try to find a library and return a pathname . `name` is the library name without any prefix like lib , suffix like .so , .dylib or version number ( this is the form used for the posix linker option -l ) .", "question_id": 1739}, {"snippet": "FTP.login(user='anonymous')", "intent": "Log in as the given `user` .", "question_id": 3916}, {"snippet": "datetime.replace(hour=self.hour)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`.", "question_id": 2288}, {"snippet": "IMAP4.store(message_set, command, flag_list)", "intent": "Alters flag dispositions for messages in mailbox . `command` is specified by section 6.4.6 of RFC 2060 as being one of \u201c FLAGS \u201d , \u201c +FLAGS \u201d , or \u201c -FLAGS \u201d , optionally with a suffix of \u201c .SILENT \u201d . With arguments `message_set`, `flag_list`.", "question_id": 4745}, {"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . With arguments `**kwargs`.", "question_id": 11609}, {"snippet": "codecs.encode(obj, encoding='utf-8', errors='strict')", "intent": "Encodes `obj` using the codec registered for `encoding` . The default error handler is 'strict ' meaning that encoding `errors` raise ValueError ( or a more codec specific subclass , such as UnicodeEncodeError ) .", "question_id": 1195}, {"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}, {"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}, {"snippet": "stat_result.st_rsize", "intent": "Real size of the file.", "question_id": 6942}, {"snippet": "int()", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4037}, {"snippet": "pkgutil.walk_packages(path=None, prefix='')", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output .", "question_id": 7453}, {"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}, {"snippet": "exit_stack.enter_context(cm)", "intent": "Enters a new context manager and adds its __exit__ ( ) method to the callback stack . With arguments `cm`.", "question_id": 1627}, {"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}, {"snippet": "pool.starmap(func, iterable, chunksize)", "intent": "Like map ( ) except that the elements of the `iterable` are expected to be iterables that are unpacked as arguments . Hence an iterable of [ ( 1,2 ) , ( 3 , 4 ) ] results in [ `func` ( 1,2 ) , func ( 3,4 ) ] . With arguments `chunksize`.", "question_id": 6350}, {"snippet": "IMAP4.recent()", "intent": "Prompt server for an update .", "question_id": 4724}, {"snippet": "email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None)", "intent": "This iterates over all the subparts of `msg` , returning only those subparts that match the MIME type specified by `maintype` and `subtype` .", "question_id": 3213}, {"snippet": "itertools.accumulate(iterable, func)", "intent": "Make an iterator that returns accumulated sums , or accumulated results of other binary functions ( specified via the optional `func` argument ) . Elements of the input `iterable` may be any type that can be accepted as arguments to func .", "question_id": 5239}, {"snippet": "bdb.runeval(expr, locals=None)", "intent": "Debug an expression executed via the eval ( ) function . `globals` and `locals` have the same meaning as in run ( ) . With arguments `expr`.", "question_id": 813}, {"snippet": "EnvironmentVarGuard.set(envvar, value)", "intent": "Temporarily set the environment variable `envvar` to the `value` of value .", "question_id": 10287}, {"snippet": "POP3.utf8()", "intent": "Try to switch to UTF-8 mode .", "question_id": 7619}, {"snippet": "sysconfig.get_python_version()", "intent": "Return the MAJOR.MINOR Python version number as a string .", "question_id": 9870}, {"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}, {"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996}, {"snippet": "termios.tcsendbreak(fd, duration)", "intent": "Send a break on file descriptor `fd` . A zero `duration` sends a break for 0.25\u20130.5 seconds ; a nonzero duration has a system dependent meaning .", "question_id": 10104}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "platform.python_version_tuple()", "intent": "Returns the Python version as tuple ( major , minor , patchlevel ) of strings .", "question_id": 7479}, {"snippet": "asyncio.as_completed(aws)", "intent": "Run awaitable objects in the `aws` set concurrently .", "question_id": 615}, {"snippet": "ensurepip.bootstrap(root=None, upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3496}, {"snippet": "message.set_type(type, requote=True)", "intent": "Set the main `type` and subtype for the Content-Type `header` . If `requote` is False , this leaves the existing header \u2019 s quoting as is , otherwise the parameters will be quoted ( the default ) .", "question_id": 3015}, {"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}, {"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032}, {"snippet": "patch.stopall()", "intent": "Stop all active patches .", "question_id": 11642}, {"snippet": "warnings.simplefilter(action, category=Warning)", "intent": "Insert a simple entry into the list of warnings filter specifications . The meaning of the function parameters is as for filterwarnings ( ) , but regular expressions are not needed as the filter inserted always matches any message in any module as long as the `category` and line number match . With arguments `action`.", "question_id": 12034}, {"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . With arguments `initargs`.", "question_id": 6328}, {"snippet": "callable(result, func, arguments)", "intent": "`result` is what the foreign function returns , as specified by the restype attribute . `func` is the foreign function object itself , this allows reusing the same callable object to check or post process the results of several functions . `arguments` is a tuple containing the parameters originally passed to the function call , this allows specializing the behavior on the arguments used .", "question_id": 1790}, {"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}, {"snippet": "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS)", "intent": "This is a convenience function for invoking update_wrapper ( ) as a function decorator when defining a wrapper function . With arguments `wrapped`, `assigned`.", "question_id": 4161}, {"snippet": "tracemalloc.is_tracing()", "intent": "True if the tracemalloc module is tracing Python memory allocations , False otherwise .", "question_id": 10846}, {"snippet": "asyncio.open_connection(ssl=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `ssl`.", "question_id": 468}, {"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}, {"snippet": "platform.popen(cmd, bufsize=-1)", "intent": "Portable popen ( ) interface . With arguments `cmd`, `bufsize`.", "question_id": 7507}, {"snippet": "turtle.clearstamps(n=None)", "intent": "Delete all or first/last `n` of turtle \u2019 s stamps .", "question_id": 10932}, {"snippet": "babyl_message.set_labels(labels)", "intent": "Set the list of `labels` on the message to labels .", "question_id": 5841}, {"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}, {"snippet": "structure._pack_", "intent": "An optional small integer that allows overriding the alignment of structure fields in the instance.", "question_id": 1891}, {"snippet": "operator.itemgetter(item)", "intent": "Return a callable object that fetches `item` from its operand using the operand \u2019 s __getitem__ ( ) method .", "question_id": 6584}, {"snippet": "xml.dom.NamespaceErr", "intent": "If an attempt is made to change any object in a way that is not permitted with regard to the Namespaces in XML recommendation, this exception is raised.", "question_id": 12389}, {"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}, {"snippet": "msvcrt.setmode(fd, flags)", "intent": "Set the line-end translation mode for the file descriptor `fd` . To set it to text mode , `flags` should be os.O_TEXT ; for binary , it should be os.O_BINARY .", "question_id": 6152}, {"snippet": "compileall.compile_path(skip_curdir=True, maxlevels=0)", "intent": "Byte-compile all the .py files found along sys.path . If `skip_curdir` is true ( the default ) , the current directory is not included in the search . Note that unlike the other compile functions , `maxlevels` defaults to 0 .", "question_id": 1437}, {"snippet": "kevent.ident", "intent": "Value used to identify the event.", "question_id": 8203}, {"snippet": "bz2.open(filename)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 876}, {"snippet": "aifc.getmarkers()", "intent": "Return a list of markers in the audio file .", "question_id": 18}, {"snippet": "collections.namedtuple(typename, field_names, rename=False, module=None)", "intent": "Returns a new tuple subclass named `typename` . Instances of the subclass also have a helpful docstring ( with typename and `field_names` ) and a helpful __repr__ ( ) method which lists the tuple contents in a name=value format . If `rename` is true , invalid fieldnames are automatically replaced with positional names . If `module` is defined , the __module__ attribute of the named tuple is set to that value .", "question_id": 1381}, {"snippet": "dataclasses.make_dataclass(cls_name, fields, init=True)", "intent": "Creates a new dataclass with name `cls_name` , `fields` as defined in fields , base classes as given in `bases` , and initialized with a `namespace` as given in namespace . The values of `init` , `repr` , `eq` , `order` , `unsafe_hash` , and `frozen` have the same meaning as they do in dataclass ( ) .", "question_id": 2186}, {"snippet": "memory_handler.setTarget(target)", "intent": "Sets the `target` handler for this handler .", "question_id": 5539}, {"snippet": "json.loads(s, **kw)", "intent": "Deserialize `s` ( a str , bytes or bytearray instance containing a JSON document ) to a Python object using this conversion table . With arguments `**kw`.", "question_id": 5300}, {"snippet": "decimal.Context(capitals=None)", "intent": "Creates a new context . The `capitals` field is either 0 or 1 ( the default ) .", "question_id": 2504}, {"snippet": "turtle.shapesize()", "intent": "Return or set the pen \u2019 s attributes x/y-stretchfactors and/or `outline` .", "question_id": 10986}, {"snippet": "context.quantize(x, y)", "intent": "Returns a value equal to `x` ( rounded ) , having the exponent of `y` .", "question_id": 2563}, {"snippet": "timeit.timeit(stmt='pass', timer=<default timer>)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10483}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "snapshot.filter_traces(filters)", "intent": "Create a new Snapshot instance with a filtered traces sequence , `filters` is a list of DomainFilter and Filter instances .", "question_id": 10874}, {"snippet": "FTP_TLS.prot_c()", "intent": "Set up clear text data connection .", "question_id": 3972}, {"snippet": "os.makedirs(name, exist_ok=False)", "intent": "Recursive directory creation function . If `exist_ok` is False ( the default ) , an FileExistsError is raised if the target directory already exists . With arguments `name`.", "question_id": 6868}, {"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}, {"snippet": "codecs.register(search_function)", "intent": "Register a codec search function . With arguments `search_function`.", "question_id": 1224}, {"snippet": "gettext.translation(domain, languages=None)", "intent": "Return a *Translations instance based on the `domain` , `localedir` , and `languages` , which are first passed to find ( ) to get a list of the associated .mo file paths .", "question_id": 4231}, {"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}, {"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}, {"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}, {"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}, {"snippet": "context_var.name", "intent": "The name of the variable.", "question_id": 1639}, {"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}, {"snippet": "cgi.parse_qs(qs)", "intent": "This function is deprecated in this module . With arguments `qs`.", "question_id": 1039}, {"snippet": "smtplib.SMTPSenderRefused", "intent": "Sender address refused.", "question_id": 8501}, {"snippet": "message.__setitem__(name, val)", "intent": "Add a header to the message with field `name` name and value `val` .", "question_id": 2967}, {"snippet": "fileinput.input(files=None, bufsize=0)", "intent": "Create an instance of the FileInput class . With arguments `files`, `bufsize`.", "question_id": 3791}, {"snippet": "calendar.calendar(year, l=1, c=6)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `l`, `c`.", "question_id": 1019}, {"snippet": "unittest.TextTestRunner(stream=None, descriptions=True)", "intent": "A basic test runner implementation that outputs results to a `stream` . With arguments `descriptions`.", "question_id": 11542}, {"snippet": "urllib.parse.urlencode(query, encoding=None)", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . The safe , `encoding` , and `errors` parameters are passed down to quote_via ( the encoding and errors parameters are only passed when a query element is a str ) .", "question_id": 11735}, {"snippet": "re.VERBOSE", "intent": "This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments.", "question_id": 7936}, {"snippet": "test_case.assertNotRegex(text, regex, msg=None)", "intent": "Test that a `regex` search matches ( or does not match ) `text` . With arguments `msg`.", "question_id": 11444}, {"snippet": "os.supports_follow_symlinks", "intent": "A Set object indicating which functions in the os module permit use of their follow_symlinks parameter.", "question_id": 6950}, {"snippet": "winreg.HKEY_USERS", "intent": "Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.", "question_id": 12158}, {"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}, {"snippet": "decimal.adjusted()", "intent": "Return the adjusted exponent after shifting out the coefficient \u2019 s rightmost digits until only the lead digit remains : Decimal ( '321e+5 ' ) .adjusted ( ) returns seven .", "question_id": 2395}, {"snippet": "bisect.bisect_right(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 858}, {"snippet": "json.load(fp, **kw, cls=None, object_hook=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . To use a custom JSONDecoder subclass , specify it with the `cls` kwarg ; otherwise JSONDecoder is used . `object_hook` is an optional function that will be called with the result of any object literal decoded ( a dict ) . With arguments `**kw`.", "question_id": 5297}, {"snippet": "profile.create_stats()", "intent": "Stop collecting profiling data and record the results internally as the current profile .", "question_id": 7681}, {"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}, {"snippet": "xml.etree.ElementTree.iselement(element)", "intent": "Checks if an object appears to be a valid `element` object .", "question_id": 12441}, {"snippet": "tuple(iterable)", "intent": "Tuples may be constructed in a number of ways : The constructor builds a tuple whose items are the same and in the same order as `iterable` \u2019 s items .", "question_id": 9160}, {"snippet": "test_case.subTest(**params)", "intent": "Return a context manager which executes the enclosed code block as a subtest . With arguments `**params`.", "question_id": 11372}, {"snippet": "base64.a85encode(b, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 729}, {"snippet": "lzma.open(filename, format=None)", "intent": "Open an LZMA-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be either an actual file name ( given as a str , bytes or path-like object ) , in which case the named file is opened , or it can be an existing file object to read from or write to . When opening a file for reading , the `format` and `filters` arguments have the same meanings as for LZMADecompressor .", "question_id": 5658}, {"snippet": "zipfile.ZipFile(file, mode='r', compresslevel=None)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . The `compresslevel` parameter controls the compression level to use when writing files to the archive .", "question_id": 12799}, {"snippet": "NNTP.login(password=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6453}, {"snippet": "array._length_", "intent": "A positive integer specifying the number of elements in the array.", "question_id": 1894}, {"snippet": "turtle.bgpic(picname=None)", "intent": "Set background image or return name of current backgroundimage . If `picname` is a filename , set the corresponding image as background .", "question_id": 11042}, {"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}, {"snippet": "fractions.Fraction(decimal)", "intent": "The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator . where the optional sign may be either \u2018 + \u2019 or \u2018 - \u2018 and numerator and denominator ( if present ) are strings of `decimal` digits .", "question_id": 3865}, {"snippet": "robot_file_parser.set_url(url)", "intent": "Sets the URL referring to a robots.txt file . With arguments `url`.", "question_id": 11909}, {"snippet": "sys.meta_path", "intent": "A list of meta path finder objects that have their find_spec() methods called to see if one of the objects can find the module to be imported.", "question_id": 9825}, {"snippet": "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)", "intent": "Filter on traces of memory blocks . With arguments `inclusive: bool`, `filename_pattern: str`, `lineno: int`, `domain: int`.", "question_id": 10859}, {"snippet": "importlib.machinery.SourcelessFileLoader(fullname, path)", "intent": "A concrete implementation of importlib.abc.FileLoader which can import bytecode files ( i.e . With arguments `fullname`, `path`.", "question_id": 4897}, {"snippet": "connection.commit()", "intent": "This method commits the current transaction .", "question_id": 8808}, {"snippet": "operator.concat(a, b)", "intent": "Return `a` + `b` for a and b sequences .", "question_id": 6568}, {"snippet": "window.get_wch(y)", "intent": "Get a wide character . With arguments `y`.", "question_id": 2054}, {"snippet": "bytes.split(maxsplit=-1)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string . If `maxsplit` is given and non-negative , at most maxsplit splits are done ( thus , the list will have at most maxsplit+1 elements ) .", "question_id": 9365}, {"snippet": "text_calendar.formatyear(theyear, l=1, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 945}, {"snippet": "partial.args", "intent": "The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.", "question_id": 4165}, {"snippet": "curses.setupterm(term=None)", "intent": "Initialize the terminal . `term` is a string giving the terminal name , or None ; if omitted or None , the value of the TERM environment variable will be used .", "question_id": 1980}, {"snippet": "doctest.run_docstring_examples(f, globs, optionflags=0)", "intent": "Test examples associated with object `f` ; for example , f may be a string , a module , a function , or a class object . A shallow copy of dictionary argument `globs` is used for the execution context . Optional argument `optionflags` works as for function testfile ( ) above .", "question_id": 2790}, {"snippet": "weakref.finalize(obj, func, *args, **kwargs)", "intent": "Return a callable finalizer object which will be called when `obj` is garbage collected . Calling a live finalizer returns the result of evaluating `func` ( *arg , `**kwargs` ) , whereas calling a dead finalizer returns None . With arguments `*args`.", "question_id": 12090}, {"snippet": "PurePath.match(pattern)", "intent": "Match this path against the provided glob-style `pattern` .", "question_id": 7258}, {"snippet": "platform.mac_ver('', ''))", "intent": "Get Mac OS version information and return it as tuple ( `release` , `versioninfo` , `machine` ) with versioninfo being a tuple ( version , dev_stage , non_release_version ) . With arguments `''`, `'')`.", "question_id": 7509}, {"snippet": "os.sched_getscheduler(pid)", "intent": "Return the scheduling policy for the process with PID `pid` .", "question_id": 7108}, {"snippet": "SSLContext.get_ciphers()", "intent": "Get a list of enabled ciphers .", "question_id": 9013}, {"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}, {"snippet": "FileCookieJar.save(ignore_discard=False, ignore_expires=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded . `ignore_expires` : save even cookies that have expired", "question_id": 4504}, {"snippet": "socket.recv_into(buffer, nbytes)", "intent": "Receive up to `nbytes` bytes from the socket , storing the data into a `buffer` rather than creating a new bytestring .", "question_id": 8715}, {"snippet": "IMAP4.setacl(mailbox, who, what)", "intent": "Set an ACL for `mailbox` . With arguments `who`, `what`.", "question_id": 4734}, {"snippet": "ssl.create_default_context()", "intent": "Return a new SSLContext object with default settings for the given `purpose` .", "question_id": 8863}, {"snippet": "SubprocessTransport.get_pipe_transport(fd)", "intent": "Return the transport for the communication pipe corresponding to the integer file descriptor `fd` :", "question_id": 420}, {"snippet": "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)", "intent": "A process pool object which controls a pool of worker `processes` to which jobs can be submitted . If `initializer` is not None then each worker process will call initializer ( *initargs ) when it starts . `maxtasksperchild` is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process , to enable unused resources to be freed . With arguments `initargs`.", "question_id": 6327}, {"snippet": "ArgumentParser.add_mutually_exclusive_group()", "intent": "Create a mutually exclusive group .", "question_id": 99}, {"snippet": "dataclasses.asdict(instance, dict_factory=dict)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2180}, {"snippet": "os.link(src, dst)", "intent": "Create a hard link pointing to `src` named `dst` .", "question_id": 6850}, {"snippet": "operator.delitem(a, b)", "intent": "Remove the value of `a` at index `b` .", "question_id": 6573}, {"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}, {"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}, {"snippet": "ZipFile.open(name)", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object .", "question_id": 12806}, {"snippet": "HTTPConnection.request(method, url, encode_chunked=False)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` . The `encode_chunked` argument is only relevant if Transfer-Encoding is specified in headers .", "question_id": 4430}, {"snippet": "mimetypes.guess_extension(type, strict=True)", "intent": "Guess the extension for a file based on its MIME `type` , given by type . The optional `strict` argument has the same meaning as with the guess_type ( ) function .", "question_id": 5944}, {"snippet": "array.fromunicode(s)", "intent": "Extends this array with data from the given unicode string . With arguments `s`.", "question_id": 129}, {"snippet": "email_message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . If the value contains non-ASCII characters , the `charset` and `language` may be explicitly specified using the optional charset and language parameters . With arguments `param`.", "question_id": 3264}, {"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}, {"snippet": "queue_listener.setFormatter(fmt)", "intent": "Sets the Formatter for this handler to `fmt` .", "question_id": 5600}, {"snippet": "sys.prefix", "intent": "A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string '/usr/local'.", "question_id": 9831}, {"snippet": "filecmp.cmp(f1, f2, shallow=True)", "intent": "Compare the files named `f1` and `f2` , returning True if they seem equal , False otherwise . If `shallow` is true , files with identical os.stat ( ) signatures are taken to be equal .", "question_id": 3756}, {"snippet": "IMAP4.readonly", "intent": "This exception is raised when a writable mailbox has its status changed by the server.", "question_id": 4675}, {"snippet": "math.inf", "intent": "A floating-point positive infinity.", "question_id": 5937}, {"snippet": "codecs.StreamWriter(stream)", "intent": "Constructor for a StreamWriter instance . All `stream` writers must provide this constructor interface .", "question_id": 1279}, {"snippet": "set < other", "intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "question_id": 9441}, {"snippet": "bisect.insort_left(a, x, lo=0)", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 865}, {"snippet": "pprint.pformat(object, indent=1, width=80)", "intent": "Return the formatted representation of `object` as a string . `indent` , `width` , `depth` and `compact` will be passed to the PrettyPrinter constructor as formatting parameters .", "question_id": 7638}, {"snippet": "pickler.persistent_id(obj)", "intent": "Do nothing by default . If persistent_id ( ) returns None , `obj` is pickled as usual .", "question_id": 7395}, {"snippet": "ensurepip.bootstrap(root=None)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to .", "question_id": 3490}, {"snippet": "Option.help", "intent": "Help text to print for this option when listing all available options after the user supplies a help option (such as --help).", "question_id": 6636}, {"snippet": "len(s)", "intent": "Return the length ( the number of items ) of an object . With arguments `s`.", "question_id": 4044}, {"snippet": "Request.data", "intent": "The entity body for the request, or None if not specified.", "question_id": 11821}, {"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}, {"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}, {"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982}, {"snippet": "imaplib.Internaldate2tuple(datestr)", "intent": "Parse an IMAP4 INTERNALDATE string and return corresponding local time . With arguments `datestr`.", "question_id": 4687}, {"snippet": "os.EX_IOERR", "intent": "Exit code that means that an error occurred while doing I/O on some file.", "question_id": 7029}, {"snippet": "control.mapping(event, attribute)", "intent": "Make an entry into the EventMapping table for this control . With arguments `event`, `attribute`.", "question_id": 6130}, {"snippet": "i_pv4_interface.with_prefixlen", "intent": "A string representation of the interface with the mask in prefix notation.", "question_id": 5227}, {"snippet": "logging.config.fileConfig(fname)", "intent": "Reads the logging configuration from a configparser-format file . With arguments `fname`.", "question_id": 5412}, {"snippet": "inspect.trace(context=1)", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in . With arguments `context`.", "question_id": 5033}, {"snippet": "config_parser.write(fileobject)", "intent": "Write a representation of the configuration to the specified file object , which must be opened in text mode ( accepting strings ) . With arguments `fileobject`.", "question_id": 1561}, {"snippet": "@test.support.run_with_tz(tz)", "intent": "A decorator for running a function in a specific timezone , correctly resetting it after it has finished . With arguments `tz`.", "question_id": 10210}, {"snippet": "operator.attrgetter(*attrs)", "intent": "Return a callable object that fetches attr from its operand . With arguments `*attrs`.", "question_id": 6583}, {"snippet": "sorted(iterable, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `reverse` is a boolean value .", "question_id": 4110}, {"snippet": "test_case.assertIn(first, second)", "intent": "Test that `first` is ( or is not ) in `second` .", "question_id": 11391}, {"snippet": "contextvars.ContextVar(name, default)", "intent": "This class is used to declare a new Context Variable , e.g . The required `name` parameter is used for introspection and debug purposes . The optional keyword-only `default` parameter is returned by ContextVar.get ( ) when no value for the variable is found in the current context .", "question_id": 1637}, {"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}, {"snippet": "errno.ENOMEM", "intent": "Out of memory", "question_id": 3517}, {"snippet": "urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment)", "intent": "Concrete class for urlparse ( ) results containing str data . With arguments `scheme`, `netloc`, `path`, `params`, `query`, `fragment`.", "question_id": 11700}, {"snippet": "json.dumps(obj, **kw, ensure_ascii=True)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `ensure_ascii`.", "question_id": 5282}, {"snippet": "parser.issuite(st)", "intent": "This function mirrors isexpr ( ) in that it reports whether an ST object represents an 'exec ' form , commonly known as a \u201c suite. \u201d It is not safe to assume that this function is equivalent to not isexpr ( `st` ) , as additional syntactic fragments may be supported in the future .", "question_id": 7225}, {"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}, {"snippet": "plistlib.loads(data, fmt=None)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`.", "question_id": 7556}, {"snippet": "str.lower()", "intent": "Return a copy of the string with all the cased characters 4 converted to lowercase .", "question_id": 9217}, {"snippet": "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11726}, {"snippet": "email.policy.Compat32(**kw)", "intent": "This concrete Policy is the backward compatibility policy . With arguments `**kw`.", "question_id": 3444}, {"snippet": "window.addch(y, x, ch)", "intent": "Paint character `ch` at ( `y` , `x` ) with attributes `attr` , overwriting any character previously painter at that location .", "question_id": 2003}, {"snippet": "curses.delay_output(ms)", "intent": "Insert an `ms` millisecond pause in output .", "question_id": 1929}, {"snippet": "curses.setsyx(y, x)", "intent": "Set the virtual screen cursor to `y` , `x` .", "question_id": 1978}, {"snippet": "test.support.import_fresh_module(name, deprecated=False)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . Module and package deprecation messages are suppressed during this import if `deprecated` is True . With arguments `name`.", "question_id": 10245}, {"snippet": "test.support.import_fresh_module(name)", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . With arguments `name`.", "question_id": 10242}, {"snippet": "bool()", "intent": "Return a Boolean value , i.e .", "question_id": 3979}, {"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}, {"snippet": "min(iterable, key)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4055}, {"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}, {"snippet": "xml.sax.handler.EntityResolver", "intent": "Basic interface for resolving entities.", "question_id": 12566}, {"snippet": "zipimporter.archive", "intent": "The file name of the importer\u2019s associated ZIP file, without a possible subpath.", "question_id": 12890}, {"snippet": "decimal.Decimal(value=\"0\", context=None)", "intent": "Construct a new Decimal object based from `value` . The `context` precision does not affect how many digits are stored .", "question_id": 2394}, {"snippet": "str.isnumeric()", "intent": "Return true if all characters in the string are numeric characters , and there is at least one character , false otherwise .", "question_id": 9209}, {"snippet": "pdb.runeval(expression, globals=None)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control . With arguments `globals`.", "question_id": 7332}, {"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}, {"snippet": "bytes.rsplit()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9351}, {"snippet": "i_pv4_network.address_exclude(network)", "intent": "Computes the `network` definitions resulting from removing the given network from this one .", "question_id": 5207}, {"snippet": "SSLSocket.write(buf)", "intent": "Write `buf` to the SSL socket and return the number of bytes written .", "question_id": 8975}, {"snippet": "del d[key]", "intent": "Remove d[key] from d.  Raises a KeyError if key is not in the map.", "question_id": 9474}, {"snippet": "types.MethodType", "intent": "The type of methods of user-defined class instances.", "question_id": 11189}, {"snippet": "ur_lopener.open(fullurl)", "intent": "Open `fullurl` using the appropriate protocol .", "question_id": 11892}, {"snippet": "difflib.SequenceMatcher(a='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored .", "question_id": 2671}, {"snippet": "Dialect.doublequote", "intent": "Controls how instances of quotechar appearing inside a field should themselves be quoted.", "question_id": 1724}, {"snippet": "hashlib.scrypt(password, salt, n, r, p)", "intent": "The function provides scrypt password-based key derivation function as defined in RFC 7914 . `password` and `salt` must be bytes-like objects . `n` is the CPU/Memory cost factor , `r` the block size , `p` parallelization factor and `maxmem` limits memory ( OpenSSL 1.1.0 defaults to 32 MiB ) .", "question_id": 4312}, {"snippet": "_thread.get_ident()", "intent": "Return the \u2018 thread identifier \u2019 of the current thread .", "question_id": 12948}, {"snippet": "devpoll.modify(fd, eventmask)", "intent": "This method does an unregister ( ) followed by a register ( ) . With arguments `fd`, `eventmask`.", "question_id": 8174}, {"snippet": "Wave_read.rewind()", "intent": "Rewind the file pointer to the beginning of the audio stream .", "question_id": 12059}, {"snippet": "ipaddress.ip_address(address)", "intent": "Return an IPv4Address or IPv6Address object depending on the IP `address` passed as argument .", "question_id": 5170}, {"snippet": "window.inch(y)", "intent": "Return the character at the given position in the window . With arguments `y`.", "question_id": 2070}, {"snippet": "non_callable_magic_mock.reason", "intent": "This is usually a string explaining the reason for this error.", "question_id": 11662}, {"snippet": "UnboundLocalError", "intent": "Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "question_id": 3672}, {"snippet": "doctest.testfile(filename, report=True)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `report` prints a summary at the end when true , else prints nothing at the end .", "question_id": 2772}, {"snippet": "window.getkey(y, x)", "intent": "Get a character , returning a string instead of an integer , as getch ( ) does . With arguments `y`, `x`.", "question_id": 2055}, {"snippet": "writer.send_literal_data(data)", "intent": "Output character `data` which has already been formatted for display .", "question_id": 3851}, {"snippet": "IMAP4.close()", "intent": "Close currently selected mailbox .", "question_id": 4694}, {"snippet": "fraction.denominator", "intent": "Denominator of the Fraction in lowest term.", "question_id": 3868}, {"snippet": "random.randrange(start, stop, step)", "intent": "Return a randomly selected element from range ( `start` , `stop` , `step` ) .", "question_id": 7891}, {"snippet": "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)", "intent": "Redirect to the Location : or URI : URL . With arguments `req`, `fp`, `code`, `msg`, `hdrs`.", "question_id": 11851}, {"snippet": "queue_listener.addFilter(filter)", "intent": "Adds the specified `filter` filter to this logger .", "question_id": 5577}, {"snippet": "urllib.request.urlopen(url, data=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . `data` must be an object specifying additional data to be sent to the server , or None if no such data is needed .", "question_id": 11753}, {"snippet": "textbox.gather()", "intent": "Return the window contents as a string ; whether blanks in the window are included is affected by the stripspaces member .", "question_id": 2139}, {"snippet": "smtplib.SMTP_SSL(timeout)", "intent": "An SMTP_SSL instance behaves exactly the same as instances of SMTP . The optional arguments `local_hostname` , `timeout` and `source_address` have the same meaning as they do in the SMTP class .", "question_id": 8468}, {"snippet": "connection.backup(target, pages=0, sleep=0.250)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . By default , or when `pages` is either 0 or a negative integer , the entire database is copied in a single step ; otherwise the method performs a loop copying up to pages pages at a time . The `sleep` argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages , can be specified either as an integer or a floating point value .", "question_id": 8836}, {"snippet": "http.cookiejar.DefaultCookiePolicy(allowed_domains=None)", "intent": "Constructor arguments should be passed as keyword arguments only . `allowed_domains` if not None , this is a sequence of the only domains for which we accept and return cookies .", "question_id": 4478}, {"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}, {"snippet": "dict.get(key, default)", "intent": "Return the value for `key` if key is in the dictionary , else `default` .", "question_id": 9482}, {"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}, {"snippet": "test.support.import_fresh_module(name, fresh=(), blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10246}, {"snippet": "socket.sendto(bytes, flags, address)", "intent": "Send data to the socket . Return the number of `bytes` sent . The optional `flags` argument has the same meaning as for recv ( ) above . The socket should not be connected to a remote socket , since the destination socket is specified by `address` .", "question_id": 8722}, {"snippet": "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source)", "intent": "Create a zip package directory with a path of `zip_dir` and `zip_basename` containing an empty __init__ file and a file `script_basename` containing the `source` . With arguments `pkg_name`.", "question_id": 10314}, {"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}, {"snippet": "cmd.Cmd(completekey='tab')", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional argument `completekey` is the readline name of a completion key ; it defaults to Tab .", "question_id": 1128}, {"snippet": "arg", "intent": "numeric argument to operation (if any), otherwise None", "question_id": 2736}, {"snippet": "shutil.unregister_unpack_format(name)", "intent": "Unregister an unpack format . `name` is the name of the format .", "question_id": 8369}, {"snippet": "cmath.polar(x)", "intent": "Return the representation of `x` in polar coordinates .", "question_id": 1094}, {"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}, {"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}, {"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}, {"snippet": "os.path.join(path, *paths)", "intent": "Join one or more `path` components intelligently . The return value is the concatenation of path and any members of `*paths` with exactly one directory separator ( os.sep ) following each non-empty part except the last , meaning that the result will only end in a separator if the last part is empty .", "question_id": 7160}, {"snippet": "shelve.open(filename)", "intent": "Open a persistent dictionary . The `filename` specified is the base filename for the underlying database .", "question_id": 8234}, {"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}, {"snippet": "exec(object)", "intent": "This function supports dynamic execution of Python code . `object` must be either a string or a code object .", "question_id": 4017}, {"snippet": "smtplib.LMTP(source_address=None)", "intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client . The optional arguments `local_hostname` and `source_address` have the same meaning as they do in the SMTP class .", "question_id": 8492}, {"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}, {"snippet": "urllib.parse.unquote(string, errors='replace')", "intent": "Replace % xx escapes by their single-character equivalent . `string` must be a str . The optional `encoding` and `errors` parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method .", "question_id": 11725}, {"snippet": "text_calendar.formatyear(theyear, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 938}, {"snippet": "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3485}, {"snippet": "winsound.Beep(frequency, duration)", "intent": "Beep the PC \u2019 s speaker . The `frequency` parameter specifies frequency , in hertz , of the sound , and must be in the range 37 through 32,767 . The `duration` parameter specifies the number of milliseconds the sound should last .", "question_id": 12192}, {"snippet": "textwrap.indent(text, prefix)", "intent": "Add `prefix` to the beginning of selected lines in `text` .", "question_id": 10324}, {"snippet": "text_calendar.formatyear(theyear, w=2, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 942}, {"snippet": "test.support.MISSING_C_DOCSTRINGS", "intent": "Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS.", "question_id": 10132}, {"snippet": "TarInfo.tobuf(encoding=ENCODING)", "intent": "Create a string buffer from a TarInfo object . With arguments `encoding`.", "question_id": 9975}, {"snippet": "pdb.Pdb(readrc=True)", "intent": "Pdb is the debugger class . The `readrc` argument defaults to true and controls whether Pdb will load .pdbrc files from the filesystem .", "question_id": 7347}, {"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}, {"snippet": "audioop.findfit(fragment, reference)", "intent": "Try to match `reference` as well as possible to a portion of `fragment` ( which should be the longer fragment ) .", "question_id": 689}, {"snippet": "open(file, buffering=-1)", "intent": "Open `file` and return a corresponding file object . `buffering` is an optional integer used to set the buffering policy .", "question_id": 4064}, {"snippet": "ctypes.c_short", "intent": "Represents the C signed short datatype.", "question_id": 1868}, {"snippet": "smtplib.LMTP(port=LMTP_PORT, local_hostname=None)", "intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client . It \u2019 s common to use Unix sockets for LMTP , so our connect ( ) method must support that as well as a regular `host` : `port` server . The optional arguments `local_hostname` and `source_address` have the same meaning as they do in the SMTP class .", "question_id": 8496}, {"snippet": "shutil.register_unpack_format(name, extensions, function)", "intent": "Registers an unpack format . `name` is the name of the format and `extensions` is a list of extensions corresponding to the format , like .zip for Zip files . `function` is the callable that will be used to unpack archives .", "question_id": 8368}, {"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}, {"snippet": "maildir.add_folder(folder)", "intent": "Create a `folder` whose name is folder and return a Maildir instance representing it .", "question_id": 5760}, {"snippet": "text_calendar.pryear(theyear, c=6)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `c`.", "question_id": 949}, {"snippet": "turtle.dot(*color)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10927}, {"snippet": "resource.RLIMIT_NPROC", "intent": "The maximum number of processes the current process may create.", "question_id": 8081}, {"snippet": "signal.ItimerError", "intent": "Raised to signal an error from the underlying setitimer() or getitimer() implementation.", "question_id": 8385}, {"snippet": "unittest.FunctionTestCase(testFunc, setUp=None)", "intent": "This class implements the portion of the TestCase interface which allows the test runner to drive the test , but does not provide the methods which test code can use to check and report errors . With arguments `testFunc`, `setUp`.", "question_id": 11474}, {"snippet": "semaphore.acquire(blocking=True)", "intent": "Acquire a semaphore . When invoked with `blocking` set to false , do not block .", "question_id": 10400}, {"snippet": "bytes_generator.clone(fp)", "intent": "Return an independent clone of this BytesGenerator instance with the exact same option settings , and `fp` as the new outfp .", "question_id": 3090}, {"snippet": "socket.recvfrom(bufsize)", "intent": "Receive data from the socket . With arguments `bufsize`.", "question_id": 8704}, {"snippet": "mailbox.clear()", "intent": "Delete all messages from the mailbox .", "question_id": 5745}, {"snippet": "test_result.addSubTest(test, subtest, outcome)", "intent": "Called when a `subtest` finishes . `test` is the test case corresponding to the test method . If `outcome` is None , the subtest succeeded .", "question_id": 11530}, {"snippet": "wsgiref.handlers.read_environ()", "intent": "Transcode CGI variables from os.environ to PEP 3333 \u201c bytes in unicode \u201d strings , returning a new dictionary .", "question_id": 12270}, {"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}, {"snippet": "sqlite3.version_info", "intent": "The version number of this module, as a tuple of integers.", "question_id": 8792}, {"snippet": "argparse.ArgumentParser(epilog=None)", "intent": "Create a new ArgumentParser object . With arguments `epilog`.", "question_id": 42}, {"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247}, {"snippet": "DOMImplementation.hasFeature(feature, version)", "intent": "Return true if the `feature` identified by the pair of strings feature and `version` is implemented .", "question_id": 12311}, {"snippet": "cmath.nanj", "intent": "Complex number with zero real part and NaN imaginary part.", "question_id": 1126}, {"snippet": "os.sync()", "intent": "Force write of everything to disk .", "question_id": 6955}, {"snippet": "operator.add(a, b)", "intent": "Return `a` + `b` , for a and b numbers .", "question_id": 6532}, {"snippet": "parser.st2tuple(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python tuple representing the equivalent parse tree .", "question_id": 7218}, {"snippet": "email_message.get_body('html', 'plain'))", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . With arguments `'html'`, `'plain')`.", "question_id": 3286}, {"snippet": "pkgutil.walk_packages(path=None, prefix='', onerror=None)", "intent": "Yields ModuleInfo for all modules recursively on `path` , or , if path is None , all accessible modules . `prefix` is a string to output on the front of every module name on output . `onerror` is a function which gets called with one argument ( the name of the package which was being imported ) if any exception occurs while trying to import a package .", "question_id": 7456}, {"snippet": "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method . `sep` is used to join the headers together , and is by default the combination '\\r\\n ' ( CRLF ) .", "question_id": 4590}, {"snippet": "@dataclasses.dataclass(init=True, eq=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`, `eq`.", "question_id": 2165}, {"snippet": "key in d", "intent": "Return True if d has a key key, else False.", "question_id": 9475}, {"snippet": "mime_types.guess_type(url)", "intent": "Similar to the guess_type ( ) function , using the tables stored as part of the object . With arguments `url`.", "question_id": 5966}, {"snippet": "sync_manager.Event()", "intent": "Create a shared threading.Event object and return a proxy for it .", "question_id": 6303}, {"snippet": "datetime.replace(tzinfo=self.tzinfo)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `tzinfo`.", "question_id": 2292}, {"snippet": "widget.add(child, **kw)", "intent": "Adds a new tab to the notebook . With arguments `child`, `**kw`.", "question_id": 10603}, {"snippet": "http.cookies.CookieError", "intent": "Exception failing because of RFC 2109 invalidity: incorrect attributes, incorrect Set-Cookie header, etc.", "question_id": 4577}, {"snippet": "ZipFile.extract(member, path=None)", "intent": "Extract a `member` from the archive to the current working directory ; member must be its full name or a ZipInfo object . `path` specifies a different directory to extract to .", "question_id": 12815}, {"snippet": "sorted(iterable)", "intent": "Return a new sorted list from the items in `iterable` .", "question_id": 4108}, {"snippet": "types.resolve_bases(bases)", "intent": "Resolve MRO entries dynamically as specified by PEP 560 . This function looks for items in `bases` that are not instances of type , and returns a tuple where each such object that has an __mro_entries__ method is replaced with an unpacked result of calling this method .", "question_id": 11182}, {"snippet": "UserWarning", "intent": "Base class for warnings generated by user code.", "question_id": 3702}, {"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}, {"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}, {"snippet": "warnings.filterwarnings(action, message='')", "intent": "Insert an entry into the list of warnings filter specifications . This checks the types of the arguments , compiles the `message` and `module` regular expressions , and inserts them as a tuple in the list of warnings filters . With arguments `action`.", "question_id": 12024}, {"snippet": "random.triangular(low, high, mode)", "intent": "Return a random floating point number N such that `low` < = N < = `high` and with the specified `mode` between those bounds .", "question_id": 7908}, {"snippet": "snapshot.traces", "intent": "Traces of all memory blocks allocated by Python: sequence of Trace instances.", "question_id": 10879}, {"snippet": "BaseCookie.value_decode(val)", "intent": "Return a tuple ( real_value , coded_value ) from a string representation . With arguments `val`.", "question_id": 4582}, {"snippet": "os.fwalk(top='.', topdown=True)", "intent": "This behaves exactly like walk ( ) , except that it yields a 4-tuple ( dirpath , dirnames , filenames , dirfd ) , and it supports `dir_fd` . With arguments `top`, `topdown`.", "question_id": 6989}, {"snippet": "datetime.timedelta(weeks=0)", "intent": "All arguments are optional and default to 0 . With arguments `weeks`.", "question_id": 2211}, {"snippet": "SummaryInformation.SetProperty(field, value)", "intent": "Set a property through MsiSummaryInfoSetProperty ( ) . `field` can have the same values as in GetProperty ( ) , `value` is the new value of the property .", "question_id": 6079}, {"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}, {"snippet": "importlib.__import__(name, globals=None, locals=None)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `globals`, `locals`.", "question_id": 4788}, {"snippet": "Match.end()", "intent": "Return the indices of the start and end of the substring matched by `group` ; group defaults to zero ( meaning the whole matched substring ) .", "question_id": 8006}, {"snippet": "mapping_proxy_type.values()", "intent": "Return a new view of the underlying mapping \u2019 s values .", "question_id": 11216}, {"snippet": "colorsys.rgb_to_yiq(r, g, b)", "intent": "Convert the color from RGB coordinates to YIQ coordinates . With arguments `r`, `g`, `b`.", "question_id": 1403}, {"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}, {"snippet": "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=False)", "intent": "patch ( ) acts as a function decorator , class decorator or a context manager . Inside the body of the function or with statement , the `target` is patched with a `new` object . `new_callable` allows you to specify a different class , or callable object , that will be called to `create` the new object . With arguments `**kwargs`.", "question_id": 11616}, {"snippet": "weakref.ProxyType", "intent": "The type object for proxies of objects which are not callable.", "question_id": 12097}, {"snippet": "urllib.request.HTTPSHandler(context=None)", "intent": "A class to handle opening of HTTPS URLs . `context` and `check_hostname` have the same meaning as in http.client.HTTPSConnection .", "question_id": 11804}, {"snippet": "element.insert(index, subelement)", "intent": "Inserts `subelement` at the given position in this element . With arguments `index`.", "question_id": 12499}, {"snippet": "pdb.run(statement)", "intent": "Execute the `statement` ( given as a string or a code object ) under debugger control .", "question_id": 7327}, {"snippet": "SSLSocket.server_side", "intent": "A boolean which is True for server-side sockets and False for client-side sockets.", "question_id": 8991}, {"snippet": "os.path.normcase(path)", "intent": "Normalize the case of a pathname . On other operating systems , return the `path` unchanged .", "question_id": 7161}, {"snippet": "typing.Tuple", "intent": "Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "question_id": 11335}, {"snippet": "ArgumentParser.set_defaults(**kwargs)", "intent": "Most of the time , the attributes of the object returned by parse_args ( ) will be fully determined by inspecting the command-line arguments and the argument actions . With arguments `**kwargs`.", "question_id": 101}, {"snippet": "DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)", "intent": "Handle an unparsed entity declaration event . With arguments `name`, `publicId`, `systemId`, `ndata`.", "question_id": 12584}, {"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}, {"snippet": "unittest.mock.Mock(**kwargs, name=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `name`.", "question_id": 11565}, {"snippet": "encodings.idna.nameprep(label)", "intent": "Return the nameprepped version of `label` .", "question_id": 1301}, {"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}, {"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}, {"snippet": "zlib.compressobj(level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12908}, {"snippet": "timer.autorange()", "intent": "Automatically determine how many times to call timeit ( ) .", "question_id": 10509}, {"snippet": "ast.literal_eval(node_or_string)", "intent": "Safely evaluate an expression node or a string containing a Python literal or container display . With arguments `node_or_string`.", "question_id": 149}, {"snippet": "bytes_io.read1(size)", "intent": "In BytesIO , this is the same as read ( ) . With arguments `size`.", "question_id": 5113}, {"snippet": "text_wrapper.wrap(text)", "intent": "Wraps the single paragraph in `text` ( a string ) so every line is at most width characters long .", "question_id": 10339}, {"snippet": "bisect.insort_left(a, x, lo=0, hi=len(a))", "intent": "Insert `x` in `a` in sorted order . This is equivalent to a.insert ( bisect.bisect_left ( a , x , `lo` , `hi` ) , x ) assuming that a is already sorted .", "question_id": 867}, {"snippet": "decimal.quantize(exp)", "intent": "Return a value equal to the first operand after `rounding` and having the exponent of the second operand . With arguments `exp`.", "question_id": 2461}, {"snippet": "str.partition(sep)", "intent": "Split the string at the first occurrence of `sep` , and return a 3-tuple containing the part before the separator , the separator itself , and the part after the separator .", "question_id": 9223}, {"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}, {"snippet": "IMAP4.read(size)", "intent": "Reads `size` bytes from the remote server .", "question_id": 4722}, {"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}, {"snippet": "loop.connect_read_pipe(protocol_factory, pipe)", "intent": "Register the read end of `pipe` in the event loop . `protocol_factory` must be a callable returning an asyncio protocol implementation .", "question_id": 301}, {"snippet": "turtle.xcor()", "intent": "Return the turtle \u2019 s x coordinate .", "question_id": 10940}, {"snippet": "HTTPErrorProcessor.http_response(request, response)", "intent": "Process HTTP error responses . For 200 error codes , the `response` object is returned immediately . With arguments `request`.", "question_id": 11879}, {"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}, {"snippet": "scheduler.cancel(event)", "intent": "Remove the `event` from the queue .", "question_id": 8126}, {"snippet": "doc_test_runner.run(test, out=None)", "intent": "Run the examples in `test` ( a DocTest object ) , and display the results using the writer function `out` .", "question_id": 2875}, {"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}, {"snippet": "os.pipe()", "intent": "Create a pipe .", "question_id": 6773}, {"snippet": "bytes.rsplit(sep=None)", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9352}, {"snippet": "profile.Profile(timer=None, subcalls=True)", "intent": "This class is normally only used if more precise control over profiling is needed than what the cProfile.run ( ) function provides . A custom `timer` can be supplied for measuring how long code takes to run via the timer argument . With arguments `subcalls`.", "question_id": 7675}, {"snippet": "fnmatch.translate(pattern)", "intent": "Return the shell-style `pattern` converted to a regular expression for using with re.match ( ) .", "question_id": 3816}, {"snippet": "email_message.get_body('html', 'plain'), preferencelist=('related')", "intent": "Return the MIME part that is the best candidate to be the \u201c body \u201d of the message . `preferencelist` must be a sequence of strings from the set related , html , and plain , and indicates the order of preference for the content type of the part returned . With arguments `'html'`, `'plain')`.", "question_id": 3287}, {"snippet": "os.sendfile(out, in, offset, count)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` .", "question_id": 6794}, {"snippet": "subprocess.Popen(args, stdin=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9602}, {"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}, {"snippet": "queue_listener.__init__(level=NOTSET)", "intent": "Initializes the Handler instance by setting its `level` , setting the list of filters to the empty list and creating a lock ( using createLock ( ) ) for serializing access to an I/O mechanism .", "question_id": 5595}, {"snippet": "os.pwrite(fd, str, offset)", "intent": "Write the bytestring in `str` to file descriptor `fd` at position of `offset` , leaving the file offset unchanged .", "question_id": 6788}, {"snippet": "WriteTransport.write(data)", "intent": "Write some `data` bytes to the transport .", "question_id": 413}, {"snippet": "base_server.handle_timeout()", "intent": "This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received .", "question_id": 8778}, {"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}, {"snippet": "task.add_done_callback(callback)", "intent": "Add a `callback` to be run when the Task is done .", "question_id": 631}, {"snippet": "aifc.setcomptype(type, name)", "intent": "Specify the compression `type` . The `name` parameter should be a human-readable description of the compression type as a bytes array , the type parameter should be a bytes array of length 4 .", "question_id": 31}, {"snippet": "text_calendar.formatyear(theyear, w=2, l=1)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 941}, {"snippet": "signal.setitimer(which, seconds)", "intent": "Sets given `interval` timer ( one of signal.ITIMER_REAL , signal.ITIMER_VIRTUAL or signal.ITIMER_PROF ) specified by `which` to fire after `seconds` ( float is accepted , different from alarm ( ) ) and after that every interval seconds ( if interval is non-zero ) .", "question_id": 8391}, {"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}, {"snippet": "SubprocessTransport.send_signal(signal)", "intent": "Send the `signal` number to the subprocess , as in subprocess.Popen.send_signal ( ) .", "question_id": 423}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds)", "intent": "Create a subprocess . With arguments `program`, `*args`, `**kwds`.", "question_id": 523}, {"snippet": "os.register_at_fork(before=None)", "intent": "Register callables to be executed when a new child process is forked using os.fork ( ) or similar process cloning APIs . Functions registered for execution `before` forking are called in reverse registration order .", "question_id": 7046}, {"snippet": "audioop.lin2lin(fragment, width, newwidth)", "intent": "Convert samples between 1- , 2- , 3- and 4-byte formats . With arguments `fragment`, `width`, `newwidth`.", "question_id": 694}, {"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}, {"snippet": "bz2.open(filename, encoding=None)", "intent": "Open a bzip2-compressed file in binary or text `mode` , returning a file object . As with the constructor for BZ2File , the `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 879}, {"snippet": "platform.java_ver('', ''), '', ''), vendor='')", "intent": "Version interface for Jython . Returns a tuple ( `release` , `vendor` , `vminfo` , `osinfo` ) with vminfo being a tuple ( vm_name , vm_release , vm_vendor ) and osinfo being a tuple ( os_name , os_version , os_arch ) . With arguments `''`, `'')`, `''`, `'')`.", "question_id": 7487}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "email.utils.collapse_rfc2231_value(value)", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` .", "question_id": 3483}, {"snippet": "decimal.from_float(f)", "intent": "Classmethod that converts a float to a decimal number , exactly . With arguments `f`.", "question_id": 2414}, {"snippet": "message.as_string(unixfrom=False)", "intent": "Return the entire message flattened as a string . When optional `unixfrom` is true , the envelope header is included in the returned string .", "question_id": 2939}, {"snippet": "gzip.compress(data, compresslevel=9)", "intent": "Compress the `data` , returning a bytes object containing the compressed data . `compresslevel` has the same meaning as in the GzipFile constructor above .", "question_id": 4295}, {"snippet": "pickler.persistent_id(obj)", "intent": "Do nothing by default . If persistent_id ( ) returns None , `obj` is pickled as usual .", "question_id": 7395}, {"snippet": "subprocess.STARTF_USESHOWWINDOW", "intent": "Specifies that the STARTUPINFO.wShowWindow attribute contains additional information.", "question_id": 9646}, {"snippet": "dict(**kwarg)", "intent": "Create a new dictionary . With arguments `**kwarg`.", "question_id": 4004}, {"snippet": "platform.architecture(executable=sys.executable, bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7462}, {"snippet": "oss_audio_device.mode", "intent": "The I/O mode for the file, either \"r\", \"rw\", or \"w\".", "question_id": 7200}, {"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}, {"snippet": "widget.set(item, column=None)", "intent": "With one argument , returns a dictionary of column/value pairs for the specified `item` . With two arguments , returns the current `value` of the specified `column` .", "question_id": 10659}, {"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}, {"snippet": "widget.bbox(item, column=None)", "intent": "Returns the bounding box ( relative to the treeview widget \u2019 s window ) of the specified `item` in the form ( x , y , width , height ) . If `column` is specified , returns the bounding box of that cell .", "question_id": 10621}, {"snippet": "tkinter.tix.Form", "intent": "The Form geometry manager based on attachment rules for all Tk widgets.", "question_id": 10578}, {"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}, {"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}, {"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}, {"snippet": "modulefinder.ModuleFinder()", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script .", "question_id": 6025}, {"snippet": "str.index(sub)", "intent": "Like find ( ) , but raise ValueError when the substring is not found . With arguments `sub`.", "question_id": 9201}, {"snippet": "pickle.Unpickler(file, fix_imports=True)", "intent": "This takes a binary `file` for reading a pickle data stream . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7399}, {"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}, {"snippet": "test.support.check_warnings(*filters)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . With arguments `*filters`.", "question_id": 10164}, {"snippet": "decimal.ROUND_05UP", "intent": "Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.", "question_id": 2584}, {"snippet": "imaplib.IMAP4_SSL(keyfile=None)", "intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . `keyfile` and `certfile` are a legacy alternative to ssl_context - they can point to PEM-formatted private key and certificate chain files for the SSL connection .", "question_id": 4679}, {"snippet": "memory_bio.read(n=-1)", "intent": "Read up to `n` bytes from the memory buffer .", "question_id": 9057}, {"snippet": "pool.imap(func, iterable)", "intent": "A lazier version of map ( ) . With arguments `func`, `iterable`.", "question_id": 6347}, {"snippet": "unittest.mock.Mock(**kwargs, side_effect=None)", "intent": "Create a new Mock object . With arguments `**kwargs`, `side_effect`.", "question_id": 11562}, {"snippet": "os.walk(top, followlinks=False)", "intent": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up . For each directory in the tree rooted at directory `top` ( including top itself ) , it yields a 3-tuple ( dirpath , dirnames , filenames ) . Set `followlinks` to True to visit directories pointed to by symlinks , on systems that support them .", "question_id": 6978}, {"snippet": "urllib.request.Request(url)", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL .", "question_id": 11768}, {"snippet": "async_result.successful()", "intent": "Return whether the call completed without raising an exception .", "question_id": 6365}, {"snippet": "profile.runctx(command, globals, locals, sort=-1)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string . With arguments `sort`.", "question_id": 7667}, {"snippet": "binascii.a2b_qp(data, header=False)", "intent": "Convert a block of quoted-printable `data` back to binary and return the binary data . If the optional argument `header` is present and true , underscores will be decoded as spaces .", "question_id": 827}, {"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}, {"snippet": "traceback.print_exc(chain=True)", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10748}, {"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}, {"snippet": "xmlparser.NotStandaloneHandler()", "intent": "Called if the XML document hasn \u2019 t been declared as being a standalone document .", "question_id": 7774}, {"snippet": "null_importer.find_module(fullname, path)", "intent": "This method always returns None , indicating that the requested module could not be found . With arguments `fullname`, `path`.", "question_id": 4781}, {"snippet": "Path.lstat()", "intent": "Like Path.stat ( ) but , if the path points to a symbolic link , return the symbolic link \u2019 s information rather than its target \u2019 s .", "question_id": 7283}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "int.from_bytes(bytes, byteorder)", "intent": "Return the integer represented by the given array of `bytes` . The `byteorder` argument determines the byte order used to represent the integer .", "question_id": 9145}, {"snippet": "EnvironmentVarGuard.unset(envvar)", "intent": "Temporarily unset the environment variable `envvar` .", "question_id": 10288}, {"snippet": "resource.RLIMIT_AS", "intent": "The maximum area (in bytes) of address space which may be taken by the process.", "question_id": 8086}, {"snippet": "KeyError", "intent": "Raised when a mapping (dictionary) key is not found in the set of existing keys.", "question_id": 3643}, {"snippet": "traceback_exception.format()", "intent": "Returns a list of strings ready for printing .", "question_id": 10832}, {"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}, {"snippet": "profile.run(command, sort=-1)", "intent": "This function takes a single argument that can be passed to the exec ( ) function , and an optional file name . If the `sort` value is specified , it is passed to this Stats instance to control how the results are sorted . With arguments `command`.", "question_id": 7663}, {"snippet": "connection.interrupt()", "intent": "You can call this method from a different thread to abort any queries that might be executing on the connection .", "question_id": 8819}, {"snippet": "SSLContext.maximum_version", "intent": "A TLSVersion enum member representing the highest supported TLS version.", "question_id": 9044}, {"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}, {"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}, {"snippet": "locale.format(format, val, grouping=False, monetary=False)", "intent": "Please note that this function works like format_string ( ) but will only work for exactly one % char specifier . For whole `format` strings , use format_string ( ) . With arguments `val`, `grouping`, `monetary`.", "question_id": 5391}, {"snippet": "base_server.timeout", "intent": "Timeout duration, measured in seconds, or None if no timeout is desired.", "question_id": 8774}, {"snippet": "base64.a85encode(b, foldspaces=False, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 731}, {"snippet": "sys.stdin", "intent": "File objects used by the interpreter for standard input, output and errors:", "question_id": 9844}, {"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}, {"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429}, {"snippet": "message.set_type(type)", "intent": "Set the main `type` and subtype for the Content-Type `header` .", "question_id": 3013}, {"snippet": "text_wrapper.tabsize", "intent": "(default: 8) If expand_tabs is true, then all tab characters in text will be expanded to zero or more spaces, depending on the current column and the given tab size.", "question_id": 10329}, {"snippet": "logging.handlers.HTTPHandler(host, url)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . With arguments `url`.", "question_id": 5541}, {"snippet": "cmath.cos(x)", "intent": "Return the cosine of `x` .", "question_id": 1104}, {"snippet": "datetime.combine(date, time, tzinfo=self.tzinfo)", "intent": "Return a new datetime object whose `date` components are equal to the given date object \u2019 s , and whose `time` components are equal to the given time object \u2019 s . If the `tzinfo` argument is provided , its value is used to set the tzinfo attribute of the result , otherwise the tzinfo attribute of the time argument is used .", "question_id": 2266}, {"snippet": "urllib.request.HTTPPasswordMgr", "intent": "Keep a database of  (realm, uri) -> (user, password) mappings.", "question_id": 11786}, {"snippet": "itertools.count(step=1)", "intent": "Make an iterator that returns evenly spaced values starting with number `start` . When counting with floating point numbers , better accuracy can sometimes be achieved by substituting multiplicative code such as : ( start + `step` * i for i in count ( ) ) .", "question_id": 5248}, {"snippet": "oct(x)", "intent": "Convert an integer number to an octal string prefixed with \u201c 0o \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4061}, {"snippet": "window.getstr(y, x, n)", "intent": "Read a bytes object from the user , with primitive line editing capacity . With arguments `y`, `x`, `n`.", "question_id": 2062}, {"snippet": "test.support.strip_python_strerr(stderr)", "intent": "Strip the `stderr` of a Python process from potential debug output emitted by the interpreter .", "question_id": 10170}, {"snippet": "ctypes.create_string_buffer(init_or_size)", "intent": "This function creates a mutable character buffer . `init_or_size` must be an integer which specifies the `size` of the array , or a bytes object which will be used to initialize the array items .", "question_id": 1813}, {"snippet": "timeit.repeat(stmt='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions . With arguments `stmt`.", "question_id": 10487}, {"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}, {"snippet": "compileall.compile_dir(dir)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way .", "question_id": 1409}, {"snippet": "parser.compilest(st, filename='<syntax-tree>')", "intent": "The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec ( ) or eval ( ) functions . This function provides the interface to the compiler , passing the internal parse tree from `st` to the parser , using the source file name specified by the `filename` parameter .", "question_id": 7223}, {"snippet": "test.support.check_warnings(*filters, quiet=True)", "intent": "A convenience wrapper for warnings.catch_warnings ( ) that makes it easier to test that a warning was correctly raised . If one or more filters are provided , or if the optional keyword argument `quiet` is False , it checks to make sure the warnings are as expected : each specified filter must match at least one of the warnings raised by the enclosed code or the test fails , and if any warnings are raised that do not match any of the specified filters the test fails . With arguments `*filters`.", "question_id": 10165}, {"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}, {"snippet": "ctypes._FuncPtr", "intent": "Base class for C callable foreign functions.", "question_id": 1786}, {"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}, {"snippet": "socket.sendto(bytes, flags, address)", "intent": "Send data to the socket . Return the number of `bytes` sent . The optional `flags` argument has the same meaning as for recv ( ) above . The socket should not be connected to a remote socket , since the destination socket is specified by `address` .", "question_id": 8722}, {"snippet": "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)", "intent": "Register an object which is used to expose method names which have not been registered using register_function ( ) . If `instance` contains a _dispatch ( ) method , it is called with the requested method name and the parameters from the request . If the optional `allow_dotted_names` argument is true and the instance does not have a _dispatch ( ) method , then if the requested method name contains periods , each component of the method name is searched for individually , with the effect that a simple hierarchical search is performed .", "question_id": 12736}, {"snippet": "fraction.__ceil__()", "intent": "Returns the least int > = self .", "question_id": 3874}, {"snippet": "random.uniform(a, b)", "intent": "Return `a` random floating point number N such that a < = N < = `b` for a < = b and b < = N < = a for b < a .", "question_id": 7907}, {"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}, {"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}, {"snippet": "collections.abc.MappingView", "intent": "ABCs for mapping, items, keys, and values views.", "question_id": 1326}, {"snippet": "doctest.Example(source, want)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`.", "question_id": 2824}, {"snippet": "NNTP.login(user=None)", "intent": "Send AUTHINFO commands with the `user` name and `password` .", "question_id": 6452}, {"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION", "intent": "A CDATA marked section was not closed.", "question_id": 7806}, {"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}, {"snippet": "binascii.b2a_base64(data, newline=True)", "intent": "Convert binary `data` to a line of ASCII characters in base64 coding . The return value is the converted line , including a `newline` char if newline is true .", "question_id": 825}, {"snippet": "cab.append(full, file, logical)", "intent": "Add the `file` with the pathname `full` to the CAB file , under the name `logical` .", "question_id": 6089}, {"snippet": "operator.setitem(a, b, c)", "intent": "Set the value of `a` at index `b` to `c` .", "question_id": 6578}, {"snippet": "window.hline(y, x, ch, n)", "intent": "Display a horizontal line starting at ( `y` , `x` ) with length `n` consisting of the character `ch` .", "question_id": 2065}, {"snippet": "glob.iglob(pathname)", "intent": "Return an iterator which yields the same values as glob ( ) without actually storing them all simultaneously . With arguments `pathname`.", "question_id": 4266}, {"snippet": "str(object=b'', encoding='utf-8', errors='strict')", "intent": "Return a str version of `object` . With arguments `encoding`, `errors`.", "question_id": 4122}, {"snippet": "difflib.diff_bytes(dfunc, a, b, n=3)", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . All inputs except `n` must be bytes objects , not str .", "question_id": 2662}, {"snippet": "Ellipsis", "intent": "The same as the ellipsis literal \u201c...\u201d.", "question_id": 1606}, {"snippet": "window.attron(attr)", "intent": "Add attribute `attr` from the \u201c background \u201d set applied to all writes to the current window .", "question_id": 2013}, {"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}, {"snippet": "argparse.ArgumentParser(parents=)", "intent": "Create a new ArgumentParser object . With arguments `parents`.", "question_id": 43}, {"snippet": "platform.libc_ver()", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked .", "question_id": 7537}, {"snippet": "linecache.getline(filename, lineno)", "intent": "Get line `lineno` from file named `filename` .", "question_id": 5343}, {"snippet": "stats.print_callees(*restrictions)", "intent": "This method for the Stats class prints a list of all function that were called by the indicated function . With arguments `*restrictions`.", "question_id": 7697}, {"snippet": "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "intent": "Generates a string representation of an XML `element` , including all subelements . `short_empty_elements` has the same meaning as in ElementTree.write ( ) .", "question_id": 12456}, {"snippet": "mh_message.remove_sequence(sequence)", "intent": "Remove `sequence` from the list of sequences that include this message .", "question_id": 5837}, {"snippet": "str.rfind(sub, start, end)", "intent": "Return the highest index in the string where substring `sub` is found , such that sub is contained within s [ `start` : `end` ] .", "question_id": 9226}, {"snippet": "xml.etree.ElementTree.XMLParser(html=0, target=None)", "intent": "This class is the low-level building block of the module . The `html` argument was historically used for backwards compatibility and is now deprecated . It can be fed XML data incrementally with the feed ( ) method , and parsing events are translated to a push API - by invoking callbacks on the `target` object .", "question_id": 12550}, {"snippet": "window.addnstr(str, n, attr)", "intent": "Paint at most `n` characters of the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2004}, {"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}, {"snippet": "set.pop()", "intent": "Remove and return an arbitrary element from the set .", "question_id": 9465}, {"snippet": "zipfile.ZIP_DEFLATED", "intent": "The numeric constant for the usual ZIP compression method.", "question_id": 12789}, {"snippet": "typing.NewType(typ)", "intent": "A helper function to indicate a distinct types to a typechecker , see NewType . With arguments `typ`.", "question_id": 11322}, {"snippet": "msvcrt.ungetch(char)", "intent": "Cause the byte string `char` to be \u201c pushed back \u201d into the console buffer ; it will be the next character read by getch ( ) or getche ( ) .", "question_id": 6162}, {"snippet": "Repr.maxlevel", "intent": "Depth limit on the creation of recursive representations.", "question_id": 8055}, {"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}, {"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}, {"snippet": "time.time_ns()", "intent": "Similar to time ( ) but returns time as an integer number of nanoseconds since the epoch .", "question_id": 10461}, {"snippet": "ctypes.string_at(address)", "intent": "This function returns the C string starting at memory `address` address as a bytes object .", "question_id": 1834}, {"snippet": "curses.typeahead(fd)", "intent": "Specify that the file descriptor `fd` be used for typeahead checking .", "question_id": 1991}, {"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}, {"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}, {"snippet": "scheduler.enter(delay, priority, action, argument=(), kwargs={})", "intent": "Schedule an event for `delay` more time units . With arguments `priority`, `action`, `argument`, `kwargs`.", "question_id": 8125}, {"snippet": "sysconfig.get_makefile_filename()", "intent": "Return the path of Makefile .", "question_id": 9876}, {"snippet": "open(file, errors=None)", "intent": "Open `file` and return a corresponding file object . `errors` is an optional string that specifies how encoding and decoding errors are to be handled\u2014this can not be used in binary mode .", "question_id": 4066}, {"snippet": "concurrent.futures.ThreadPoolExecutor()", "intent": "An Executor subclass that uses a pool of at most `max_workers` threads to execute calls asynchronously .", "question_id": 1447}, {"snippet": "queue_listener.propagate", "intent": "If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger.", "question_id": 5565}, {"snippet": "open(file, closefd=True)", "intent": "Open `file` and return a corresponding file object . ( If a file descriptor is given , it is closed when the returned I/O object is closed , unless `closefd` is set to False . )", "question_id": 4068}, {"snippet": "datetime.datetime(year, month, day, minute=0)", "intent": "The `year` , `month` and `day` arguments are required . With arguments `minute`.", "question_id": 2249}, {"snippet": "parser.issuite(st)", "intent": "This function mirrors isexpr ( ) in that it reports whether an ST object represents an 'exec ' form , commonly known as a \u201c suite. \u201d It is not safe to assume that this function is equivalent to not isexpr ( `st` ) , as additional syntactic fragments may be supported in the future .", "question_id": 7225}, {"snippet": "ctypes.wstring_at(address)", "intent": "This function returns the wide character string starting at memory `address` address as a string .", "question_id": 1840}, {"snippet": "IMAP4.enable(capability)", "intent": "Enable `capability` ( see RFC 5161 ) .", "question_id": 4699}, {"snippet": "ordered_dict.popitem()", "intent": "The popitem ( ) method for ordered dictionaries returns and removes a ( key , value ) pair .", "question_id": 1391}, {"snippet": "gzip.open(filename)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to .", "question_id": 4272}, {"snippet": "logging.handlers.HTTPHandler(host, url, method='GET')", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . With arguments `url`.", "question_id": 5542}, {"snippet": "shlex.wordchars", "intent": "The string of characters that will accumulate into multi-character tokens.", "question_id": 8295}, {"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}, {"snippet": "multiprocessing.Process(group=None, name=None)", "intent": "Process objects represent activity that is run in a separate process . `group` should always be None ; it exists solely for compatibility with threading.Thread . `name` is the process name ( see name for more details ) .", "question_id": 6173}, {"snippet": "shelve.BsdDbShelf(dict)", "intent": "A subclass of Shelf which exposes first ( ) , next ( ) , previous ( ) , last ( ) and set_location ( ) which are available in the third-party bsddb module from pybsddb but not in other database modules . The `dict` object passed to the constructor must support those methods .", "question_id": 8252}, {"snippet": "spwd.getspnam(name)", "intent": "Return the shadow password database entry for the given user `name` .", "question_id": 8789}, {"snippet": "InteractiveInterpreter.showsyntaxerror(filename=None)", "intent": "Display the syntax error that just occurred . If `filename` is given , it is stuffed into the exception instead of the default filename provided by Python \u2019 s parser , because it always uses ' < string > ' when reading from a string .", "question_id": 1181}, {"snippet": "os.waitpid(pid, options)", "intent": "The details of this function differ on Unix and Windows . On Unix : Wait for completion of a child process given by process id `pid` , and return a tuple containing its process id and exit status indication ( encoded as for wait ( ) ) . The semantics of the call are affected by the value of the integer `options` , which should be 0 for normal operation .", "question_id": 7082}, {"snippet": "doctest.testfile(filename, name=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `name` gives the name of the test ; by default , or if None , os.path.basename ( filename ) is used .", "question_id": 2768}, {"snippet": "sync_manager.dict(mapping)", "intent": "Create a shared dict object and return a proxy for it . With arguments `mapping`.", "question_id": 6314}, {"snippet": "gc.disable()", "intent": "Disable automatic garbage collection .", "question_id": 4168}, {"snippet": "unicodedata.lookup(name)", "intent": "Look up character by `name` .", "question_id": 11340}, {"snippet": "IMAP4.setannotation(mailbox, entry)", "intent": "Set ANNOTATIONs for `mailbox` . With arguments `entry`.", "question_id": 4736}, {"snippet": "sys_log_handler.mapPriority(levelname)", "intent": "Maps a logging level name to a syslog priority name . With arguments `levelname`.", "question_id": 5505}, {"snippet": "text_calendar.pryear(theyear, w=2, m=3)", "intent": "Print the calendar for an entire year as returned by formatyear ( ) . With arguments `theyear`, `w`, `m`.", "question_id": 953}, {"snippet": "IMAP4.search(charset)", "intent": "Search mailbox for matching messages . `charset` may be None , in which case no CHARSET will be specified in the request to the server .", "question_id": 4728}, {"snippet": "widget.move(item, parent, index)", "intent": "Moves `item` to position `index` in `parent` \u2019 s list of children .", "question_id": 10644}, {"snippet": "configparser.RawConfigParser(':'), ';'), interpolation)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`.", "question_id": 1569}, {"snippet": "plistlib.load(fp, use_builtin_types=True, dict_type=dict)", "intent": "Read a plist file . `fp` should be a readable and binary file object . If `use_builtin_types` is true ( the default ) binary data will be returned as instances of bytes , otherwise it is returned as instances of Data . The `dict_type` is the type used for dictionaries that are read from the plist file .", "question_id": 7553}, {"snippet": "decimal.shift(other)", "intent": "Return the result of shifting the digits of the first operand by an amount specified by the second operand . With arguments `other`.", "question_id": 2474}, {"snippet": "IMAP4.delete(mailbox)", "intent": "Delete old `mailbox` named mailbox .", "question_id": 4697}, {"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}, {"snippet": "ZipInfo.CRC", "intent": "CRC-32 of the uncompressed file.", "question_id": 12877}, {"snippet": "slice(stop)", "intent": "Return a slice object representing the set of indices specified by range ( start , `stop` , step ) .", "question_id": 4105}, {"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}, {"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}, {"snippet": "decimal.logical_invert(context=None)", "intent": "logical_invert ( ) is a logical operation . With arguments `context`.", "question_id": 2438}, {"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The compression settings can be specified either as a `preset` compression level ( with the preset argument ) , or in detail as a custom filter chain ( with the `filters` argument ) .", "question_id": 5685}, {"snippet": "typing.Type(GenericCT_co)", "intent": "A variable annotated with C may accept a value of type C. In contrast , a variable annotated with Type [ C ] may accept values that are classes themselves \u2013 specifically , it will accept the class object of C. For example : With arguments `GenericCT_co`.", "question_id": 11231}, {"snippet": "shutil.copymode(src, dst, follow_symlinks=True)", "intent": "Copy the permission bits from `src` to `dst` . If `follow_symlinks` is false , and both src and dst are symbolic links , copymode ( ) will attempt to modify the mode of dst itself ( rather than the file it points to ) .", "question_id": 8315}, {"snippet": "window.delch(y)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2040}, {"snippet": "gc.freeze()", "intent": "Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections .", "question_id": 4184}, {"snippet": "xml.parsers.expat.errors.codes", "intent": "A dictionary mapping numeric error codes to their string descriptions.", "question_id": 7787}, {"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}, {"snippet": "curses.ungetmouse(id, x, y, z, bstate)", "intent": "Push a KEY_MOUSE event onto the input queue , associating the given state data with it . With arguments `id`, `x`, `y`, `z`, `bstate`.", "question_id": 1996}, {"snippet": "CacheFTPHandler.setMaxConns(m)", "intent": "Set maximum number of cached connections to `m` .", "question_id": 11877}, {"snippet": "NNTP.ihave(message_id, data)", "intent": "Send an IHAVE command . `message_id` is the id of the message to send to the server ( enclosed in ' < ' and ' > ' ) . The `data` parameter and the return value are the same as for post ( ) .", "question_id": 6493}, {"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}, {"snippet": "ftplib.FTP_TLS(user='')", "intent": "A FTP subclass which adds TLS support to FTP as described in RFC 4217 . Securing the data connection requires the `user` to explicitly ask for it by calling the prot_p ( ) method .", "question_id": 3890}, {"snippet": "os.setgroups(groups)", "intent": "Set the list of supplemental group ids associated with the current process to `groups` .", "question_id": 6696}, {"snippet": "locale.LC_COLLATE", "intent": "Locale category for sorting strings.", "question_id": 5405}, {"snippet": "dis.disco(code, lasti=-1, file=None)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2726}, {"snippet": "NotImplemented", "intent": "Special value which should be returned by the binary special methods (e.g.", "question_id": 1605}, {"snippet": "inspect.getargvalues(frame)", "intent": "Get information about arguments passed into a particular `frame` .", "question_id": 5012}, {"snippet": "doctest.Example(source, want, exc_msg=None, lineno=0)", "intent": "A single interactive example , consisting of a Python statement and its expected output . With arguments `source`, `want`, `exc_msg`, `lineno`.", "question_id": 2829}, {"snippet": "uuid.getnode()", "intent": "Get the hardware address as a 48-bit positive integer .", "question_id": 11956}, {"snippet": "HTTPConnection.putrequest(method, url)", "intent": "This should be the first call after the connection to the server has been made . It sends a line to the server consisting of the `method` string , the `url` string , and the HTTP version ( HTTP/1.1 ) .", "question_id": 4444}, {"snippet": "errno.EEXIST", "intent": "File exists", "question_id": 3522}, {"snippet": "cmath.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 1117}, {"snippet": "aifc.setmark(id, pos, name)", "intent": "Add a mark with the given `id` ( larger than 0 ) , and the given `name` at the given position . With arguments `pos`.", "question_id": 33}, {"snippet": "config_parser.get(section, option, vars=None)", "intent": "Get an `option` value for the named `section` . If `vars` is provided , it must be a dictionary .", "question_id": 1526}, {"snippet": "asyncio.Transport(WriteTransport, ReadTransport)", "intent": "Interface representing a bidirectional transport , such as a TCP connection . With arguments `WriteTransport`, `ReadTransport`.", "question_id": 393}, {"snippet": "logging.LoggerAdapter(logger, extra)", "intent": "Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object . With arguments `logger`, `extra`.", "question_id": 5631}, {"snippet": "bytes.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9303}, {"snippet": "Packer.pack_farray(n, array, pack_item)", "intent": "Packs a fixed length list ( `array` ) of homogeneous items . `n` is the length of the list ; it is not packed into the buffer , but a ValueError exception is raised if len ( array ) is not equal to n. As above , `pack_item` is the function used to pack each element .", "question_id": 12283}, {"snippet": "NNTP.xover(start, end)", "intent": "Send an XOVER command . `start` and `end` are article numbers delimiting the range of articles to select .", "question_id": 6499}, {"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}, {"snippet": "xml.sax.saxutils.XMLFilterBase(base)", "intent": "This class is designed to sit between an XMLReader and the client application \u2019 s event handlers . With arguments `base`.", "question_id": 12666}, {"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}, {"snippet": "message.get_payload(i=None)", "intent": "Return the current payload , which will be a list of Message objects when is_multipart ( ) is True , or a string when is_multipart ( ) is False . With optional argument `i` , get_payload ( ) will return the i-th element of the payload , counting from zero , if is_multipart ( ) is True .", "question_id": 2957}, {"snippet": "asyncio.start_server(client_connected_cb, backlog=100)", "intent": "Start a socket server . The `client_connected_cb` callback is called whenever a new client connection is established . With arguments `backlog`.", "question_id": 481}, {"snippet": "dict.keys()", "intent": "Return a new view of the dictionary \u2019 s keys .", "question_id": 9485}, {"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}, {"snippet": "stat.S_IRGRP", "intent": "Group has read permission.", "question_id": 9102}, {"snippet": "pprint.PrettyPrinter(compact=False)", "intent": "Construct a PrettyPrinter instance . If `compact` is false ( the default ) each item of a long sequence will be formatted on a separate line .", "question_id": 7628}, {"snippet": "filecmp.cmpfiles(dir1, dir2, common, shallow=True)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` . The `shallow` parameter has the same meaning and default value as for filecmp.cmp ( ) .", "question_id": 3758}, {"snippet": "quit()", "intent": "Objects that when printed , print a message like \u201c Use quit ( ) or Ctrl-D ( i.e .", "question_id": 1608}, {"snippet": "lzma.compress(data, format=FORMAT_XZ, check=-1)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5709}, {"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}, {"snippet": "Path.touch(mode=0o666, exist_ok=True)", "intent": "Create a file at this given path . If `mode` is given , it is combined with the process \u2019 umask value to determine the file mode and access flags . If the file already exists , the function succeeds if `exist_ok` is true ( and its modification time is updated to the current time ) , otherwise FileExistsError is raised .", "question_id": 7320}, {"snippet": "uuid.NAMESPACE_X500", "intent": "When this namespace is specified, the name string is an X.500 DN in DER or a text output format.", "question_id": 11967}, {"snippet": "loop.get_task_factory()", "intent": "Return a task factory or None if the default one is in use .", "question_id": 201}, {"snippet": "condition.notify()", "intent": "By default , wake up one thread waiting on this condition , if any .", "question_id": 10394}, {"snippet": "scheduler.enterabs(time, priority, action, argument=())", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8119}, {"snippet": "curses.keyname(k)", "intent": "Return the name of the key numbered `k` as a bytes object .", "question_id": 1950}, {"snippet": "Match.__getitem__(g)", "intent": "This is identical to m.group ( `g` ) .", "question_id": 7998}, {"snippet": "os.chown(path, uid, gid)", "intent": "Change the owner and group id of `path` to the numeric `uid` and `gid` .", "question_id": 6839}, {"snippet": "mh.remove_folder(folder)", "intent": "Delete the `folder` whose name is folder .", "question_id": 5782}, {"snippet": "BaseCookie.output(header='Set-Cookie:')", "intent": "Return a string representation suitable to be sent as HTTP headers . `attrs` and `header` are sent to each Morsel \u2019 s output ( ) method .", "question_id": 4586}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY)", "intent": "Deletes the specified `key` . `sub_key` is a string that must be a subkey of the key identified by the key parameter . `access` is an integer that specifies an access mask that describes the desired security access for the key .", "question_id": 12129}, {"snippet": "re.I", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7927}, {"snippet": "queue_listener.getChild(suffix)", "intent": "Returns a logger which is a descendant to this logger , as determined by the `suffix` .", "question_id": 5569}, {"snippet": "shutil.register_archive_format(name, function)", "intent": "Register an archiver for the format `name` . `function` is the callable that will be used to unpack archives .", "question_id": 8361}, {"snippet": "email.header.Header()", "intent": "Create a MIME-compliant header that can contain strings in different character sets .", "question_id": 3116}, {"snippet": "test_result.tb_locals", "intent": "If set to true then local variables will be shown in tracebacks.", "question_id": 11517}, {"snippet": "TarFile.extractall(numeric_owner=False)", "intent": "Extract all `members` from the archive to the current working directory or directory `path` . If `numeric_owner` is True , the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files .", "question_id": 9935}, {"snippet": "os.renames(old, new)", "intent": "Recursive directory or file renaming function . After the rename , directories corresponding to rightmost path segments of the `old` name will be pruned away using removedirs ( ) . Works like rename ( ) , except creation of any intermediate directories needed to make the `new` pathname good is attempted first .", "question_id": 6896}, {"snippet": "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)", "intent": "The same as RawValue ( ) except that depending on the value of `lock` a process-safe synchronization wrapper may be returned instead of a raw ctypes object . With arguments `typecode_or_type`, `*args`.", "question_id": 6274}, {"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}, {"snippet": "uu.Error", "intent": "Subclass of Exception, this can be raised by uu.decode() under various situations, such as described above, but also including a badly formatted header, or truncated input file.", "question_id": 11933}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`.", "question_id": 61}, {"snippet": "mailbox.mbox(path)", "intent": "A subclass of Mailbox for mailboxes in mbox format . With arguments `path`.", "question_id": 5768}, {"snippet": "trace.Trace(timing=False)", "intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "question_id": 10715}, {"snippet": "bytearray.maketrans(from, to)", "intent": "This static method returns a translation table usable for bytes.translate ( ) that will map each character in `from` into the character at the same position in `to` ; from and to must both be bytes-like objects and have the same length .", "question_id": 9304}, {"snippet": "Path.read_text()", "intent": "Return the decoded contents of the pointed-to file as a string :", "question_id": 7304}, {"snippet": "xmlrpc.server.DocXMLRPCServer(addr)", "intent": "Create a new server instance . With arguments `addr`.", "question_id": 12749}, {"snippet": "os.mknod(path)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6874}, {"snippet": "iter(context)", "intent": "Return an iterator over the variables stored in the `context` object .", "question_id": 1656}, {"snippet": "stringprep.in_table_c5(code)", "intent": "Determine whether `code` is in tableC.5 ( Surrogate codes ) .", "question_id": 9543}, {"snippet": "test_case.assertDictEqual(first, second)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`.", "question_id": 11460}, {"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}, {"snippet": "base64.b16decode(s, casefold=False)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `casefold` is a flag specifying whether a lowercase alphabet is acceptable as input .", "question_id": 725}, {"snippet": "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF", "intent": "A character reference referred to a character which is illegal in XML (for example, character 0, or \u2018&#0;\u2019).", "question_id": 7790}, {"snippet": "tracemalloc.start()", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators .", "question_id": 10847}, {"snippet": "oss_audio_device.post()", "intent": "Tell the driver that there is likely to be a pause in the output , making it possible for the device to handle the pause more intelligently .", "question_id": 7190}, {"snippet": "ssl.OP_NO_TICKET", "intent": "Prevent client side from requesting a session ticket.", "question_id": 8944}, {"snippet": "logging.Formatter(fmt=None, style='%')", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5615}, {"snippet": "dialog.bitmap(name, x, y, width, height, text)", "intent": "Add and return a Bitmap control . With arguments `name`, `x`, `y`, `width`, `height`, `text`.", "question_id": 6138}, {"snippet": "NamedNodeMap.item(index)", "intent": "Return an attribute with a particular `index` .", "question_id": 12375}, {"snippet": "os.waitid(idtype, id, options)", "intent": "Wait for the completion of one or more child processes . `idtype` can be P_PID , P_PGID or P_ALL . `id` specifies the pid to wait on . `options` is constructed from the ORing of one or more of WEXITED , WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT .", "question_id": 7071}, {"snippet": "queue_listener.removeFilter(filter)", "intent": "Removes the specified `filter` filter from this logger .", "question_id": 5578}, {"snippet": "loader.create_module(spec)", "intent": "A method that returns the module object to use when importing a module . With arguments `spec`.", "question_id": 4814}, {"snippet": "mh.get_file(key)", "intent": "Depending upon the host platform , it may not be possible to remove the underlying message while the returned file remains open . With arguments `key`.", "question_id": 5791}, {"snippet": "FileCookieJar.save(ignore_discard=False)", "intent": "Save cookies to a file . `ignore_discard` : save even cookies set to be discarded .", "question_id": 4500}, {"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}, {"snippet": "datetime.__str__()", "intent": "For a datetime instance d , str ( d ) is equivalent to d.isoformat ( ' ' ) .", "question_id": 2310}, {"snippet": "locale.getpreferredencoding()", "intent": "Return the encoding used for text data , according to user preferences .", "question_id": 5377}, {"snippet": "bisect.bisect(a, x, hi=len(a))", "intent": "Similar to bisect_left ( ) , but returns an insertion point which comes after ( to the right of ) any existing entries of `x` in `a` . The returned insertion point i partitions the array a into two halves so that all ( val < = x for val in a [ `lo` : i ] ) for the left side and all ( val > x for val in a [ i : `hi` ] ) for the right side .", "question_id": 862}, {"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}, {"snippet": "epoll.register(fd)", "intent": "Register a `fd` descriptor with the epoll object .", "question_id": 8184}, {"snippet": "tkinter.Tk(className='Tk')", "intent": "The Tk class is instantiated without arguments . With arguments `className`.", "question_id": 10520}, {"snippet": "email_message.get_content_maintype()", "intent": "Return the message \u2019 s main content type .", "question_id": 3256}, {"snippet": "@functools.lru_cache()", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4146}, {"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}, {"snippet": "InteractiveInterpreter.write(data)", "intent": "Write a string to the standard error stream ( sys.stderr ) . With arguments `data`.", "question_id": 1183}, {"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}, {"snippet": "resource.RLIMIT_MEMLOCK", "intent": "The maximum address space which may be locked in memory.", "question_id": 8084}, {"snippet": "sys.set_coroutine_origin_tracking_depth(depth)", "intent": "Allows enabling or disabling coroutine origin tracking . To enable , pass a `depth` value greater than zero ; this sets the number of frames whose information will be captured .", "question_id": 9841}, {"snippet": "SMTP.sendmail(from_addr, to_addrs, msg, mail_options=())", "intent": "Send mail . If SMTPUTF8 is included in mail_options , and the server supports it , `from_addr` and `to_addrs` may contain non-ASCII characters . `msg` may be a string containing characters in the ASCII range , or a byte string . The caller may pass a list of ESMTP options ( such as 8bitmime ) to be used in MAIL FROM commands as `mail_options` .", "question_id": 8535}, {"snippet": "readline.read_init_file(filename)", "intent": "Execute a readline initialization file . The default `filename` is the last filename used .", "question_id": 8016}, {"snippet": "platform.libc_ver(lib='')", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails .", "question_id": 7539}, {"snippet": "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations)", "intent": "The function provides PKCS # 5 password-based key derivation function 2 . The string `hash_name` is the desired name of the hash digest algorithm for HMAC , e.g . `password` and `salt` are interpreted as buffers of bytes . The number of `iterations` should be chosen based on the hash algorithm and computing power .", "question_id": 4310}, {"snippet": "NNTP.quit()", "intent": "Send a QUIT command and close the connection .", "question_id": 6448}, {"snippet": "bytes()", "intent": "Firstly , the syntax for bytes literals is largely the same as that for string literals , except that a b prefix is added :", "question_id": 9260}, {"snippet": "oss_mixer_device.get(control)", "intent": "Returns the volume of a given mixer `control` .", "question_id": 7206}, {"snippet": "shutil.copymode(src, dst, follow_symlinks=True)", "intent": "Copy the permission bits from `src` to `dst` . If `follow_symlinks` is false , and both src and dst are symbolic links , copymode ( ) will attempt to modify the mode of dst itself ( rather than the file it points to ) .", "question_id": 8315}, {"snippet": "turtle.setx(x)", "intent": "Set the turtle \u2019 s first coordinate to `x` , leave second coordinate unchanged .", "question_id": 10918}, {"snippet": "math.isclose(a, b, rel_tol=1e-09)", "intent": "Return True if the values `a` and `b` are close to each other and False otherwise . `rel_tol` is the relative tolerance \u2013 it is the maximum allowed difference between a and b , relative to the larger absolute value of a or b .", "question_id": 5895}, {"snippet": "os.getrandom(size, flags=0)", "intent": "Get up to `size` random bytes . The `flags` argument is a bit mask that can contain zero or more of the following values ORed together : os.GRND_RANDOM and GRND_NONBLOCK .", "question_id": 7138}, {"snippet": "str.join(iterable)", "intent": "Return a string which is the concatenation of the strings in `iterable` .", "question_id": 9214}, {"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}, {"snippet": "IMAP4.list(directory)", "intent": "List mailbox names in `directory` matching `pattern` .", "question_id": 4707}, {"snippet": "base_manager.connect()", "intent": "Connect a local manager object to a remote manager process :", "question_id": 6286}, {"snippet": "filecmp.cmpfiles(dir1, dir2, common, shallow=True)", "intent": "Compare the files in the two directories `dir1` and `dir2` whose names are given by `common` . The `shallow` parameter has the same meaning and default value as for filecmp.cmp ( ) .", "question_id": 3758}, {"snippet": "Request.add_header(key, val)", "intent": "Add another header to the request . Note that there can not be more than one header with the same name , and later calls will overwrite previous calls in case the `key` collides . With arguments `val`.", "question_id": 11825}, {"snippet": "SSLContext.wrap_socket(sock)", "intent": "Wrap an existing Python socket `sock` and return an instance of SSLContext.sslsocket_class ( default SSLSocket ) .", "question_id": 9022}, {"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}, {"snippet": "Morsel.setdefault(key, value=None)", "intent": "Raise an error if `key` is not a valid RFC 2109 attribute , otherwise behave the same as dict.setdefault ( ) . With arguments `value`.", "question_id": 4612}, {"snippet": "ArgumentParser.add_subparsers(title)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 83}, {"snippet": "style.layout(style, layoutspec=None)", "intent": "Define the widget layout for given `style` . If `layoutspec` is omitted , return the layout specification for given style .", "question_id": 10682}, {"snippet": "lzma.is_check_supported(check)", "intent": "Returns true if the given integrity `check` is supported on this system .", "question_id": 5722}, {"snippet": "timeit.Timer(setup='pass', timer=<timer function>)", "intent": "Class for timing execution speed of small code snippets . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10505}, {"snippet": "timer.repeat(repeat=5, number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) . With arguments `repeat`.", "question_id": 10514}, {"snippet": "asyncio.wait(aws, timeout=None)", "intent": "Run awaitable objects in the `aws` set concurrently and block until the condition specified by `return_when` . `timeout` ( a float or int ) , if specified , can be used to control the maximum number of seconds to wait before returning .", "question_id": 609}, {"snippet": "calendar.calendar(year, w=2, m=3)", "intent": "Returns a 3-column calendar for an entire `year` as a multi-line string using the formatyear ( ) of the TextCalendar class . With arguments `w`, `m`.", "question_id": 1018}, {"snippet": "datetime.timedelta(days=0, seconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2212}, {"snippet": "importlib.util.spec_from_file_location(name, location)", "intent": "A factory function for creating a ModuleSpec instance based on the path to a file . With arguments `name`, `location`.", "question_id": 4938}, {"snippet": "email.headerregistry.Address(username='', domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3194}, {"snippet": "asyncio.Queue(maxsize=0)", "intent": "A first in , first out ( FIFO ) queue . If `maxsize` is less than or equal to zero , the queue size is infinite .", "question_id": 446}, {"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}, {"snippet": "traceback.print_stack(f=None, limit=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start .", "question_id": 10765}, {"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}, {"snippet": "email.contentmanager.get_content(msg, errors='replace')", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . If the part is a text part and `errors` is specified , use it as the error handler when decoding the payload to unicode . With arguments `msg`.", "question_id": 3038}, {"snippet": "turtle.register_shape(name)", "intent": "There are three different ways to call this function : With arguments `name`.", "question_id": 11098}, {"snippet": "header_registry.map_to_type(self, name, cls)", "intent": "`name` is the name of the header to be mapped . `cls` is the specialized class to be used , along with base_class , to create the class used to instantiate headers that match name . With arguments `self`.", "question_id": 3183}, {"snippet": "winsound.SND_FILENAME", "intent": "The sound parameter is the name of a WAV file.", "question_id": 12196}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12452}, {"snippet": "decimal.Decimal(value=\"0\")", "intent": "Construct a new Decimal object based from `value` .", "question_id": 2392}, {"snippet": "POP3.stat()", "intent": "Get mailbox status .", "question_id": 7608}, {"snippet": "task.remove_done_callback(callback)", "intent": "Remove `callback` from the callbacks list .", "question_id": 633}, {"snippet": "urllib.request.Request(url, headers={})", "intent": "This class is an abstraction of a URL request . `url` should be a string containing a valid URL . If no Content-Length nor Transfer-Encoding header field has been provided , HTTPHandler will set these `headers` according to the type of data .", "question_id": 11770}, {"snippet": "struct.iter_unpack(buffer)", "intent": "Identical to the iter_unpack ( ) function , using the compiled format . The `buffer` \u2019 s size in bytes must be a multiple of size .", "question_id": 9564}, {"snippet": "i_pv4_network.compare_networks(other)", "intent": "Compare this network to `other` .", "question_id": 5218}, {"snippet": "inspect.getclasstree(classes, unique=False)", "intent": "Arrange the given list of `classes` into a hierarchy of nested lists . If the `unique` argument is true , exactly one entry appears in the returned structure for each class in the given list .", "question_id": 5009}, {"snippet": "threading.Thread(daemon=None)", "intent": "This constructor should always be called with keyword arguments . If not None , `daemon` explicitly sets whether the thread is daemonic .", "question_id": 10358}, {"snippet": "test.support.is_android", "intent": "True if the system is Android.", "question_id": 10112}, {"snippet": "test_case.assertEqual(first, second)", "intent": "Test that `first` and `second` are equal .", "question_id": 11375}, {"snippet": "difflib.HtmlDiff", "intent": "This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights.", "question_id": 2597}, {"snippet": "turtle.ontimer(fun, t=0)", "intent": "Install a timer that calls `fun` after `t` milliseconds .", "question_id": 11080}, {"snippet": "FTP.retrbinary(cmd, callback, blocksize=8192)", "intent": "Retrieve a file in binary transfer mode . `cmd` should be an appropriate RETR command : 'RETR filename ' . The `callback` function is called for each block of data received , with a single bytes argument giving the data block . The optional `blocksize` argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer ( which will also be the largest size of the data blocks passed to callback ) .", "question_id": 3927}, {"snippet": "array.pop(i)", "intent": "Removes the item with the index `i` from the array and returns it .", "question_id": 132}, {"snippet": "test.support.start_threads(threads)", "intent": "Context manager to start `threads` .", "question_id": 10198}, {"snippet": "cmath.log(x, base)", "intent": "Returns the logarithm of `x` to the given `base` .", "question_id": 1097}, {"snippet": "ReadTransport.resume_reading()", "intent": "Resume the receiving end .", "question_id": 404}, {"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}, {"snippet": "xml.dom.minidom.parseString(string, parser=None)", "intent": "Return a Document that represents the `string` . With arguments `parser`.", "question_id": 12401}, {"snippet": "format(value)", "intent": "Convert a `value` to a \u201c formatted \u201d representation , as controlled by `format_spec` .", "question_id": 4022}, {"snippet": "urllib.request.urlopen(url, timeout)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) .", "question_id": 11742}, {"snippet": "bdb.dispatch_call(frame, arg)", "intent": "If the debugger should stop on this function call , invoke the user_call ( ) method ( which should be overridden in subclasses ) . With arguments `frame`, `arg`.", "question_id": 774}, {"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}, {"snippet": "@functools.lru_cache(maxsize=128)", "intent": "Decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls .", "question_id": 4147}, {"snippet": "float(x)", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4019}, {"snippet": "event.clear()", "intent": "Clear ( unset ) the event .", "question_id": 567}, {"snippet": "secrets.SystemRandom", "intent": "A class for generating random numbers using the highest-quality sources provided by the operating system.", "question_id": 8131}, {"snippet": "Wave_read.getnchannels()", "intent": "Returns number of audio channels ( 1 for mono , 2 for stereo ) .", "question_id": 12051}, {"snippet": "loop.create_unix_server(protocol_factory, backlog=100)", "intent": "Similar to loop.create_server ( ) but works with the AF_UNIX socket family . With arguments `protocol_factory`, `backlog`.", "question_id": 245}, {"snippet": "stream_handler.emit(record)", "intent": "If a formatter is specified , it is used to format the `record` .", "question_id": 5423}, {"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}, {"snippet": "NNTP.newnews(group, date, file=None)", "intent": "Send a NEWNEWS command . Here , `group` is a group name or '* ' , and `date` has the same meaning as for newgroups ( ) . With arguments `file`.", "question_id": 6464}, {"snippet": "@asyncio.coroutine", "intent": "Decorator to mark generator-based coroutines.", "question_id": 644}, {"snippet": "ContentHandler.characters(content)", "intent": "Receive notification of character data . `content` may be a string or bytes instance ; the expat reader module always produces strings .", "question_id": 12579}, {"snippet": "FTP.mlsd()", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) .", "question_id": 3951}, {"snippet": "deque.appendleft(x)", "intent": "Add `x` to the left side of the deque .", "question_id": 1354}, {"snippet": "Telnet.read_until(expected)", "intent": "Read until a given byte string , `expected` , is encountered or until `timeout` seconds have passed .", "question_id": 10009}, {"snippet": "stream_writer.wait_closed()", "intent": "Wait until the stream is closed .", "question_id": 522}, {"snippet": "trace.Trace(timing=False)", "intent": "Create an object to `trace` execution of a single statement or expression . `timing` enables a timestamp relative to when tracing was started to be displayed .", "question_id": 10715}, {"snippet": "mailcap.findmatch(caps)", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . With arguments `caps`.", "question_id": 5869}, {"snippet": "oss_mixer_device.set(control, (left, right))", "intent": "Sets the volume for a given mixer `control` to ( left , right ) . With arguments `(left`, `right)`.", "question_id": 7207}, {"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}, {"snippet": "Option.ALWAYS_TYPED_ACTIONS", "intent": "Actions that always take a type (i.e.", "question_id": 6654}, {"snippet": "test.support.fd_count()", "intent": "Count the number of open file descriptors .", "question_id": 10154}, {"snippet": "textbox.gather()", "intent": "Return the window contents as a string ; whether blanks in the window are included is affected by the stripspaces member .", "question_id": 2139}, {"snippet": "element_tree.findtext(match)", "intent": "Same as Element.findtext ( ) , starting at the root of the tree . With arguments `match`.", "question_id": 12516}, {"snippet": "DefaultCookiePolicy.DomainLiberal", "intent": "Equivalent to 0 (ie.", "question_id": 4555}, {"snippet": "argparse.FileType(errors=None)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `errors`.", "question_id": 89}, {"snippet": "collections.abc.Collection", "intent": "ABC for sized iterable container classes.", "question_id": 1315}, {"snippet": "json.JSONDecoder()", "intent": "Simple JSON decoder .", "question_id": 5310}, {"snippet": "email.iterators.body_line_iterator(msg)", "intent": "This iterates over all the payloads in all the subparts of `msg` , returning the string payloads line-by-line .", "question_id": 3208}, {"snippet": "time.CLOCK_PROCESS_CPUTIME_ID", "intent": "High-resolution per-process timer from the CPU.", "question_id": 10467}, {"snippet": "http.client.HTTPConnection(host, port=None, blocksize=8192)", "intent": "An HTTPConnection instance represents one transaction with an HTTP server . It should be instantiated passing it a `host` and optional `port` number . The optional `blocksize` parameter sets the buffer size in bytes for sending a file-like message body .", "question_id": 4379}, {"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}, {"snippet": "fileinput.FileInput(files=None, inplace=False)", "intent": "Class FileInput is the implementation ; its methods filename ( ) , fileno ( ) , lineno ( ) , filelineno ( ) , isfirstline ( ) , isstdin ( ) , nextfile ( ) and close ( ) correspond to the functions of the same name in the module . You can not use `inplace` and openhook together . With arguments `files`.", "question_id": 3807}, {"snippet": "time.clock_getres(clk_id)", "intent": "Return the resolution ( precision ) of the specified clock `clk_id` .", "question_id": 10433}, {"snippet": "formatter.assert_line_data(flag=1)", "intent": "Inform the formatter that data has been added to the current paragraph out-of-band . The optional `flag` argument can be set to false if the writer manipulations produced a hard line break at the end of the output .", "question_id": 3837}, {"snippet": "json.JSONDecoder(strict=True)", "intent": "Simple JSON decoder . If `strict` is false ( True is the default ) , then control characters will be allowed inside strings .", "question_id": 5315}, {"snippet": "poll.register(fd)", "intent": "Register a file descriptor with the polling object . `fd` can be either an integer , or an object with a fileno ( ) method that returns an integer .", "question_id": 8192}, {"snippet": "datetime.fromtimestamp(timestamp)", "intent": "Return the local date and time corresponding to the POSIX `timestamp` , such as is returned by time.time ( ) .", "question_id": 2261}, {"snippet": "NNTP.stat()", "intent": "Send a STAT command , where `message_spec` is either a message id ( enclosed in ' < ' and ' > ' ) or an article number in the current group .", "question_id": 6476}, {"snippet": "io.BlockingIOError", "intent": "This is a compatibility alias for the builtin BlockingIOError exception.", "question_id": 5061}, {"snippet": "ArgumentParser.error(message)", "intent": "This method prints a usage `message` including the message to the standard error and terminates the program with a status code of 2 .", "question_id": 114}, {"snippet": "executor.map(func, *iterables, chunksize=1)", "intent": "Similar to map ( `func` , `*iterables` ) except : The ( approximate ) size of these chunks can be specified by setting `chunksize` to a positive integer .", "question_id": 1443}, {"snippet": "inspect.getgeneratorlocals(generator)", "intent": "Get the mapping of live local variables in `generator` to their current values .", "question_id": 5038}, {"snippet": "i_pv4_network.exploded", "intent": "A string representation of the network, with the mask in prefix notation.", "question_id": 5200}, {"snippet": "xmlparser.ParseFile(file)", "intent": "Parse XML data reading from the object `file` .", "question_id": 7734}, {"snippet": "bdb.Breakpoint(self, file, line, temporary=0)", "intent": "This class implements `temporary` breakpoints , ignore counts , disabling and ( re- ) enabling , and conditionals . Breakpoints are indexed by number through a list called bpbynumber and by ( `file` , `line` ) pairs through bplist . With arguments `self`.", "question_id": 755}, {"snippet": "widget.insert(parent, index, **kw)", "intent": "Creates a new item and returns the item identifier of the newly created item . `parent` is the item ID of the parent item , or the empty string to create a new top-level item . `index` is an integer , or the value \u201c end \u201d , specifying where in the list of parent \u2019 s children to insert the new item . With arguments `**kw`.", "question_id": 10640}, {"snippet": "argparse.ArgumentParser(usage=None)", "intent": "Create a new ArgumentParser object . With arguments `usage`.", "question_id": 50}, {"snippet": "POP3.rset()", "intent": "Remove any deletion marks for the mailbox .", "question_id": 7613}, {"snippet": "select.kevent(ident, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `data`.", "question_id": 8160}, {"snippet": "resource.getpagesize()", "intent": "Returns the number of bytes in a system page .", "question_id": 8096}, {"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}, {"snippet": "urllib.request.install_opener(opener)", "intent": "Install an OpenerDirector instance as the default global `opener` .", "question_id": 11762}, {"snippet": "breakpoint.enable()", "intent": "Mark the breakpoint as enabled .", "question_id": 763}, {"snippet": "asyncio.open_connection(port=None)", "intent": "Establish a network connection and return a pair of ( reader , writer ) objects . With arguments `port`.", "question_id": 465}, {"snippet": "oss_mixer_device.set_recsrc(bitmask)", "intent": "Call this function to specify a recording source . Returns a `bitmask` indicating the new recording source ( or sources ) if successful ; raises OSError if an invalid source was specified .", "question_id": 7209}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "colorsys.hls_to_rgb(h, l, s)", "intent": "Convert the color from HLS coordinates to RGB coordinates . With arguments `h`, `l`, `s`.", "question_id": 1406}, {"snippet": "window.border(ls)", "intent": "Draw a border around the edges of the window . With arguments `ls`.", "question_id": 2026}, {"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}, {"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}, {"snippet": "slice(start, stop, step)", "intent": "Return a slice object representing the set of indices specified by range ( `start` , `stop` , `step` ) .", "question_id": 4106}, {"snippet": "keyword.iskeyword(s)", "intent": "Return true if `s` is a Python keyword .", "question_id": 5341}, {"snippet": "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)", "intent": "Similar to BaseCGIHandler , but designed for use with HTTP origin servers . The supplied environment and streams are stored in the `stdin` , `stdout` , `stderr` , and `environ` attributes .", "question_id": 12242}, {"snippet": "CookieJar.add_cookie_header(request)", "intent": "Add correct Cookie header to `request` .", "question_id": 4487}, {"snippet": "compile(source, filename, mode, flags=0)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3993}, {"snippet": "decimal.exp(context=None)", "intent": "Return the value of the ( natural ) exponential function e**x at the given number . With arguments `context`.", "question_id": 2413}, {"snippet": "json.load(fp, **kw, parse_float=None)", "intent": "Deserialize `fp` ( a .read ( ) -supporting text file or binary file containing a JSON document ) to a Python object using this conversion table . `parse_float` , if specified , will be called with the string of every JSON float to be decoded . With arguments `**kw`.", "question_id": 5293}, {"snippet": "pkgutil.ImpImporter(dirname=None)", "intent": "PEP 302 Finder that wraps Python \u2019 s \u201c classic \u201d import algorithm . If `dirname` is a string , a PEP 302 finder is created that searches that directory .", "question_id": 7438}, {"snippet": "time.clock_getres(clk_id)", "intent": "Return the resolution ( precision ) of the specified clock `clk_id` .", "question_id": 10433}, {"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}, {"snippet": "dis.disassemble(code, lasti=-1)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided .", "question_id": 2720}, {"snippet": "errno.EFAULT", "intent": "Bad address", "question_id": 3519}, {"snippet": "secrets.randbits(k)", "intent": "Return an int with `k` random bits .", "question_id": 8134}, {"snippet": "base64.a85encode(b, wrapcol=0)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `wrapcol` controls whether the output should have newline ( b'\\n ' ) characters added to it .", "question_id": 728}, {"snippet": "asyncio.Future(loop=None)", "intent": "A Future represents an eventual result of an asynchronous operation . This way alternative event `loop` implementations can inject their own optimized implementations of a Future object .", "question_id": 360}, {"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}, {"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}, {"snippet": "frozenset(iterable)", "intent": "Return a new set or frozenset object whose elements are taken from `iterable` .", "question_id": 9433}, {"snippet": "FTP.storbinary(cmd, fp, callback=None)", "intent": "Store a file in binary transfer mode . `cmd` should be an appropriate STOR command : `` STOR filename '' . `fp` is a file object ( opened in binary mode ) which is read until EOF using its read ( ) method in blocks of size `blocksize` to provide the data to be stored . The blocksize argument defaults to 8192. `callback` is an optional single parameter callable that is called on each block of data after it is sent .", "question_id": 3935}, {"snippet": "winreg.REG_MULTI_SZ", "intent": "A sequence of null-terminated strings, terminated by two null characters.", "question_id": 12180}, {"snippet": "signal.pthread_sigmask(how, mask)", "intent": "Fetch and/or change the signal `mask` of the calling thread . The behavior of the call is dependent on the value of `how` , as follows .", "question_id": 8390}, {"snippet": "widget.start()", "intent": "Begin autoincrement mode : schedules a recurring timer event that calls Progressbar.step ( ) every `interval` milliseconds .", "question_id": 10615}, {"snippet": "PurePath.suffixes", "intent": "A list of the path\u2019s file extensions:", "question_id": 7251}, {"snippet": "fraction.from_decimal(dec)", "intent": "This class method constructs a Fraction representing the exact value of `dec` , which must be a decimal.Decimal instance .", "question_id": 3870}, {"snippet": "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)", "intent": "Run a Python subprocess with the given arguments . With arguments `*args`, `**kw`, `stdout`, `stderr`.", "question_id": 10306}, {"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}, {"snippet": "os.sendfile(out, in, offset, count, headers)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . The second case may be used on Mac OS X and FreeBSD where `headers` and `trailers` are arbitrary sequences of buffers that are written before and after the data from in is written .", "question_id": 6797}, {"snippet": "shelve.DbfilenameShelf(filename)", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object .", "question_id": 8260}, {"snippet": "IMAP4.starttls()", "intent": "Send a STARTTLS command .", "question_id": 4742}, {"snippet": "_thread.interrupt_main()", "intent": "Simulate the effect of a signal.SIGINT signal arriving in the main thread .", "question_id": 12945}, {"snippet": "quopri.decode(input, output)", "intent": "Decode the contents of the `input` file and write the resulting decoded binary data to the `output` file .", "question_id": 7873}, {"snippet": "test_case.assertWarns(warning, callable, *args, **kwds)", "intent": "Test that a `warning` is triggered when `callable` is called with any positional or keyword arguments that are also passed to assertWarns ( ) . With arguments `*args`, `**kwds`.", "question_id": 11405}, {"snippet": "i_pv4_network.subnets()", "intent": "The subnets that join to make the current network definition , depending on the argument values .", "question_id": 5208}, {"snippet": "SMTP.login(user, password)", "intent": "Log in on an SMTP server that requires authentication . The arguments are the username and the `password` to authenticate with . With arguments `user`.", "question_id": 8522}, {"snippet": "style.theme_create(themename, settings=None)", "intent": "Create a new theme . It is an error if `themename` already exists . If `settings` are present they are expected to have the same syntax used for theme_settings ( ) .", "question_id": 10688}, {"snippet": "tkinter.tix.LabelEntry", "intent": "The LabelEntry widget packages an entry widget and a label into one mega widget.", "question_id": 10556}, {"snippet": "logging.config.listen(verify=None)", "intent": "Starts up a socket server on the specified `port` , and listens for new configurations . The `verify` argument , if specified , should be a callable which should verify whether bytes received across the socket are valid and should be processed .", "question_id": 5418}, {"snippet": "doctest.DocFileSuite(*paths, optionflags=0)", "intent": "Convert doctest tests from one or more text files to a unittest.TestSuite . Optional argument `optionflags` specifies the default doctest options for the tests , created by or-ing together individual option flags . With arguments `*paths`.", "question_id": 2802}, {"snippet": "SummaryInformation.Persist()", "intent": "Write the modified properties to the summary information stream , using MsiSummaryInfoPersist ( ) .", "question_id": 6080}, {"snippet": "memoryview.suboffsets", "intent": "Used internally for PIL-style arrays.", "question_id": 9427}, {"snippet": "tempfile.NamedTemporaryFile(delete=True)", "intent": "This function operates exactly as TemporaryFile ( ) does , except that the file is guaranteed to have a visible name in the file system ( on Unix , the directory entry is not unlinked ) . If `delete` is true ( the default ) , the file is deleted as soon as it is closed .", "question_id": 10051}, {"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}, {"snippet": "turtle.tilt(angle)", "intent": "Rotate the turtleshape by `angle` from its current tilt-angle , but do not change the turtle \u2019 s heading ( direction of movement ) .", "question_id": 11004}, {"snippet": "atexit.register(func, *args, **kwargs)", "intent": "Register `func` as a function to be executed at termination . With arguments `*args`, `**kwargs`.", "question_id": 677}, {"snippet": "Cmd.completedefault(text, line, begidx, endidx)", "intent": "Method called to complete an input `line` when no command-specific complete_* ( ) method is available . With arguments `text`, `begidx`, `endidx`.", "question_id": 1140}, {"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}, {"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}, {"snippet": "__debug__", "intent": "This constant is true if Python was not started with an -O option.", "question_id": 1607}, {"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}, {"snippet": "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)", "intent": "Opens a connection to the SQLite `database` file database . The `timeout` parameter specifies how long the connection should wait for the lock to go away until raising an exception . The `detect_types` parameter and the using custom converters registered with the module-level register_converter ( ) function allow you to easily do that . For the `isolation_level` parameter , please see the isolation_level property of Connection objects . By default , `check_same_thread` is True and only the creating thread may use the connection . By default returns a Connection object , unless a custom `factory` is given . If you want to explicitly set the number of statements that are cached for the connection , you can set the `cached_statements` parameter .", "question_id": 8798}, {"snippet": "difflib.context_diff(a, b, n=3)", "intent": "Compare `a` and `b` ( lists of strings ) ; return a delta ( a generator generating the delta lines ) in context diff format . The number of context lines is set by `n` which defaults to three .", "question_id": 2633}, {"snippet": "test_case.output", "intent": "A list of str objects with the formatted output of matching messages.", "question_id": 11416}, {"snippet": "ssl.OP_NO_COMPRESSION", "intent": "Disable compression on the SSL channel.", "question_id": 8942}, {"snippet": "mmap.mmap(fileno, length)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object .", "question_id": 5980}, {"snippet": "null_translations.info()", "intent": "Return the \u201c protected \u201d _info variable , a dictionary containing the metadata found in the message catalog file .", "question_id": 4254}, {"snippet": "ST.compile(filename='<syntax-tree>')", "intent": "Same as compilest ( st , `filename` ) .", "question_id": 7229}, {"snippet": "set < other", "intent": "Test whether the set is a proper subset of other, that is, set <= other and set != other.", "question_id": 9441}, {"snippet": "code.compile_command(source, symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1173}, {"snippet": "widget.step(amount=None)", "intent": "Increments the progress bar \u2019 s value by `amount` .", "question_id": 10618}, {"snippet": "locale.YESEXPR", "intent": "Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.", "question_id": 5365}, {"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}, {"snippet": "@test.support.reap_threads(func)", "intent": "Decorator to ensure the threads are cleaned up even if the test fails . With arguments `func`.", "question_id": 10226}, {"snippet": "doctest.DocTest(examples, globs, name, filename, lineno, docstring)", "intent": "A collection of doctest `examples` that should be run in a single namespace . With arguments `globs`, `name`, `filename`, `lineno`, `docstring`.", "question_id": 2817}, {"snippet": "os.setxattr(path, attribute, value, follow_symlinks=True)", "intent": "Set the extended filesystem `attribute` attribute on `path` to `value` . With arguments `follow_symlinks`.", "question_id": 7003}, {"snippet": "bytes.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of subsequence `sub` in the range [ `start` , `end` ] .", "question_id": 9269}, {"snippet": "str.center(width)", "intent": "Return centered in a string of length `width` .", "question_id": 9181}, {"snippet": "zlib.compressobj()", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once .", "question_id": 12907}, {"snippet": "iter(proxy)", "intent": "Return an iterator over the keys of the underlying mapping . With arguments `proxy`.", "question_id": 11209}, {"snippet": "FileCookieJar.save()", "intent": "Save cookies to a file .", "question_id": 4498}, {"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}, {"snippet": "json.JSONDecoder(object_pairs_hook=None)", "intent": "Simple JSON decoder . `object_pairs_hook` , if specified will be called with the result of every JSON object decoded with an ordered list of pairs .", "question_id": 5316}, {"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `comment_prefixes`.", "question_id": 1574}, {"snippet": "loop.create_connection(protocol_factory, family=0)", "intent": "Open a streaming transport connection to a given address specified by `host` and `port` . `protocol_factory` must be a callable returning an asyncio protocol implementation . The socket `family` can be either AF_INET or AF_INET6 depending on host ( or the family argument , if provided ) .", "question_id": 206}, {"snippet": "pickle.loads(bytes_object, fix_imports=True, errors=\"strict\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7384}, {"snippet": "message.set_param(param, value, language='')", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , its `value` will be replaced with value . Optional `language` specifies the RFC 2231 language , defaulting to the empty string . With arguments `param`.", "question_id": 3003}, {"snippet": "fnmatch.filter(names, pattern)", "intent": "Return the subset of the list of `names` that match `pattern` .", "question_id": 3815}, {"snippet": "memoryview.strides", "intent": "A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array.", "question_id": 9426}, {"snippet": "token.ISNONTERMINAL(x)", "intent": "Return true for non-terminal token values . With arguments `x`.", "question_id": 10696}, {"snippet": "urllib.parse.DefragResultBytes(url, fragment)", "intent": "Concrete class for urldefrag ( ) results containing bytes data . With arguments `url`, `fragment`.", "question_id": 11702}, {"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}, {"snippet": "IMAP4.thread(threading_algorithm, charset)", "intent": "The thread command is a variant of search with threading semantics for the results . Thread has two arguments before the `search_criterion` argument ( s ) ; a `threading_algorithm` , and the searching `charset` .", "question_id": 4748}, {"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}, {"snippet": "window.notimeout(flag)", "intent": "If `flag` is True , escape sequences will not be timed out .", "question_id": 2097}, {"snippet": "socket.setdefaulttimeout(timeout)", "intent": "Set the default `timeout` in seconds ( float ) for new socket objects .", "question_id": 8668}, {"snippet": "time.replace(hour=self.hour, minute=self.minute)", "intent": "Return a time with the same value , except for those attributes given new values by whichever keyword arguments are specified . With arguments `hour`, `minute`.", "question_id": 2341}, {"snippet": "pkgutil.iter_modules(prefix='')", "intent": "Yields ModuleInfo for all submodules on `path` , or , if path is None , all top-level modules on sys.path . `prefix` is a string to output on the front of every module name on output .", "question_id": 7447}, {"snippet": "doctest.testfile(filename, package=None)", "intent": "All arguments except `filename` are optional , and should be specified in keyword form . Optional argument `package` is a Python package or the name of a Python package whose directory should be used as the base directory for a module-relative filename .", "question_id": 2769}, {"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}, {"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}, {"snippet": "test_case.assertTupleEqual(first, second, msg=None)", "intent": "Tests that two lists or tuples are equal . With arguments `first`, `second`, `msg`.", "question_id": 11457}, {"snippet": "parser.st2list(st)", "intent": "This function accepts an ST object from the caller in `st` and returns a Python list representing the equivalent parse tree .", "question_id": 7214}, {"snippet": "class.__mro__", "intent": "This attribute is a tuple of classes that are considered when looking for base classes during method resolution.", "question_id": 9504}, {"snippet": "typing.Sized", "intent": "An alias to collections.abc.Sized", "question_id": 11248}, {"snippet": "vars(object)", "intent": "Return the __dict__ attribute for a module , class , instance , or any other `object` with a __dict__ attribute .", "question_id": 4132}, {"snippet": "unicodedata.numeric(chr, default)", "intent": "Returns the numeric value assigned to the character `chr` as float . If no such value is defined , `default` is returned , or , if not given , ValueError is raised .", "question_id": 11347}, {"snippet": "pwd.getpwall()", "intent": "Return a list of all available password database entries , in arbitrary order .", "question_id": 7705}, {"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}, {"snippet": "BaseHandler.<protocol>_response(req, response)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to post-process responses of the given protocol . `req` will be a Request object . `response` will be an object implementing the same interface as the return value of urlopen ( ) .", "question_id": 11849}, {"snippet": "pickle.dump(obj, file, protocol=None, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7366}, {"snippet": "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "intent": "Run the `cmd` shell command . With arguments `**kwds`, `stdin`.", "question_id": 534}, {"snippet": "fileinput.input(inplace=False)", "intent": "Create an instance of the FileInput class . With arguments `inplace`.", "question_id": 3784}, {"snippet": "ctypes.POINTER(type)", "intent": "This factory function creates and returns a new ctypes pointer `type` .", "question_id": 1828}, {"snippet": "cgitb.enable(format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1063}, {"snippet": "codecs.lookup_error(name)", "intent": "Return the error handler previously registered under the `name` name .", "question_id": 1254}, {"snippet": "mime_types.read_windows_registry(strict=True)", "intent": "Load MIME type information from the Windows registry . If `strict` is True , information will be added to the list of standard types , else to the list of non-standard types .", "question_id": 5975}, {"snippet": "stat.S_IXOTH", "intent": "Others have execute permission.", "question_id": 9108}, {"snippet": "xml.parsers.expat.errors.messages", "intent": "A dictionary mapping string descriptions to their error codes.", "question_id": 7788}, {"snippet": "re.search(pattern, string)", "intent": "Scan through `string` looking for the first location where the regular expression `pattern` produces a match , and return a corresponding match object .", "question_id": 7937}, {"snippet": "subprocess.STD_INPUT_HANDLE", "intent": "The standard input device.", "question_id": 9641}, {"snippet": "sys.version_info", "intent": "A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.", "question_id": 9854}, {"snippet": "SMTP.connect()", "intent": "Connect to a `host` on a given `port` .", "question_id": 8511}, {"snippet": "controller.open(url, new=0)", "intent": "Display `url` using the browser handled by this controller . If `new` is 1 , a new browser window is opened if possible .", "question_id": 12115}, {"snippet": "x in s", "intent": "Test x for membership in s.", "question_id": 9436}, {"snippet": "IMAP4.select()", "intent": "Select a `mailbox` .", "question_id": 4729}, {"snippet": "bdb.break_here(frame)", "intent": "This method checks if there is a breakpoint in the filename and line belonging to `frame` or , at least , in the current function .", "question_id": 778}, {"snippet": "asyncio.gather(*aws)", "intent": "Run awaitable objects in the aws sequence concurrently . With arguments `*aws`.", "question_id": 599}, {"snippet": "compile(source, filename, mode, dont_inherit=False)", "intent": "Compile the `source` into a code or AST object . The `filename` argument should give the file from which the code was read ; pass some recognizable value if it wasn \u2019 t read from a file ( ' < string > ' is commonly used ) . The `mode` argument specifies what kind of code must be compiled ; it can be 'exec ' if source consists of a sequence of statements , 'eval ' if it consists of a single expression , or 'single ' if it consists of a single interactive statement ( in the latter case , expression statements that evaluate to something other than None will be printed ) . The optional arguments `flags` and `dont_inherit` control which future statements affect the compilation of source .", "question_id": 3994}, {"snippet": "multiprocessing.get_all_start_methods()", "intent": "Returns a list of the supported start methods , the first of which is the default .", "question_id": 6223}, {"snippet": "writer.new_margin(margin, level)", "intent": "Set the `margin` `level` to the integer level and the logical tag to margin .", "question_id": 3844}, {"snippet": "curses.panel.top_panel()", "intent": "Returns the top panel in the panel stack .", "question_id": 2143}, {"snippet": "message.set_payload(payload, charset=None)", "intent": "Set the entire message object \u2019 s `payload` to payload . Optional `charset` sets the message \u2019 s default character set ; see set_charset ( ) for details .", "question_id": 2961}, {"snippet": "errno.EXDEV", "intent": "Cross-device link", "question_id": 3523}, {"snippet": "crypt.crypt(word)", "intent": "`word` will usually be a user \u2019 s password as typed at a prompt or in a graphical interface .", "question_id": 1674}, {"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}, {"snippet": "DatagramProtocol.error_received(exc)", "intent": "Called when a previous send or receive operation raises an OSError . `exc` is the OSError instance .", "question_id": 441}, {"snippet": "ast.get_docstring(node, clean=True)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring . If `clean` is true , clean up the docstring \u2019 s indentation with inspect.cleandoc ( ) .", "question_id": 151}, {"snippet": "config_parser.get(section, option, fallback, vars=None)", "intent": "Get an `option` value for the named `section` . If the key is not found and `fallback` is provided , it is used as a fallback value . If `vars` is provided , it must be a dictionary .", "question_id": 1522}, {"snippet": "sys._enablelegacywindowsfsencoding()", "intent": "Changes the default filesystem encoding and errors mode to \u2018 mbcs \u2019 and \u2018 replace \u2019 respectively , for consistency with versions of Python prior to 3.6 .", "question_id": 9843}, {"snippet": "tempfile.TemporaryDirectory(prefix=None, dir=None)", "intent": "This function securely creates a temporary directory using the same rules as mkdtemp ( ) . With arguments `prefix`, `dir`.", "question_id": 10069}, {"snippet": "ArgumentParser.add_subparsers(title, description)", "intent": "Many programs split up their functionality into a number of sub-commands , for example , the svn program can invoke sub-commands like svn checkout , svn update , and svn commit . The add_subparsers ( ) method also supports `title` and `description` keyword arguments .", "question_id": 82}, {"snippet": "getpass.getpass(prompt='Password: ')", "intent": "Prompt the user for a password without echoing . The user is prompted using the string `prompt` , which defaults to 'Password : ' .", "question_id": 4205}, {"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}, {"snippet": "FileCookieJar.save(filename=None, ignore_expires=False)", "intent": "Save cookies to a file . `filename` is the name of file in which to save cookies . `ignore_expires` : save even cookies that have expired", "question_id": 4503}, {"snippet": "sorted(iterable, key=None)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) .", "question_id": 4109}, {"snippet": "zipapp.create_archive(source, interpreter=None)", "intent": "Create an application archive from `source` . The `interpreter` argument specifies the name of the Python interpreter with which the archive will be executed .", "question_id": 12769}, {"snippet": "object.__reduce_ex__(protocol)", "intent": "Alternatively , a __reduce_ex__ ( ) method may be defined . The only difference is this method should take a single integer argument , the `protocol` version .", "question_id": 7414}, {"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980}, {"snippet": "style.map(style, **kw)", "intent": "Query or sets dynamic values of the specified option ( s ) in `style` . With arguments `**kw`.", "question_id": 10675}, {"snippet": "window.delch(y, x)", "intent": "Delete any character at ( `y` , `x` ) .", "question_id": 2039}, {"snippet": "array.tofile(f)", "intent": "Write all items ( as machine values ) to the file object `f` .", "question_id": 137}, {"snippet": "mailcap.findmatch(caps, filename='/dev/null')", "intent": "Return a 2-tuple ; the first element is a string containing the command line to be executed ( which can be passed to os.system ( ) ) , and the second element is the mailcap entry for a given MIME type . `filename` is the filename to be substituted for % s in the command line ; the default value is '/dev/null ' which is almost certainly not what you want , so usually you \u2019 ll override it by specifying a filename . With arguments `caps`.", "question_id": 5871}, {"snippet": "NNTP.xpath(id)", "intent": "Return a pair ( resp , path ) , where path is the directory path to the article with message ID `id` .", "question_id": 6501}, {"snippet": "message.get_params(header='content-type')", "intent": "Return the message \u2019 s Content-Type parameters , as a list . Optional `failobj` is the object to return if there is no Content-Type `header` .", "question_id": 2985}, {"snippet": "calendar.itermonthdates(year, month)", "intent": "Return an iterator for the `month` month ( 1\u201312 ) in the `year` year .", "question_id": 912}, {"snippet": "zlib.compressobj(level=-1, strategy=Z_DEFAULT_STRATEGY)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `strategy` is used to tune the compression algorithm .", "question_id": 12916}, {"snippet": "urllib.parse.parse_qs(qs, max_num_fields=None)", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `max_num_fields` is the maximum number of fields to read . With arguments `qs`.", "question_id": 11674}, {"snippet": "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', policy=compat32)", "intent": "Module : email.mime.multipart Optional `_subtype` defaults to mixed , but can be used to specify the subtype of the message . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "question_id": 3323}, {"snippet": "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')", "intent": "When a header parameter is encoded in RFC 2231 format , Message.get_param may return a 3-tuple containing the character set , language , and `value` . Optional `errors` is passed to the errors argument of str \u2019 s encode ( ) method ; it defaults to 'replace ' . Optional `fallback_charset` specifies the character set to use if the one in the RFC 2231 header is not known by Python ; it defaults to 'us-ascii ' .", "question_id": 3486}, {"snippet": "os._exit(n)", "intent": "Exit the process with status `n` , without calling cleanup handlers , flushing stdio buffers , etc .", "question_id": 7017}, {"snippet": "string.capwords(s, sep=None)", "intent": "Split the argument into words using str.split ( ) , capitalize each word using str.capitalize ( ) , and join the capitalized words using str.join ( ) . If the optional second argument `sep` is absent or None , runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed , otherwise sep is used to split and join the words . With arguments `s`.", "question_id": 9530}, {"snippet": "shlex.whitespace_split", "intent": "If True, tokens will only be split in whitespaces.", "question_id": 8300}, {"snippet": "re.M", "intent": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "question_id": 7931}, {"snippet": "incremental_decoder.decode(object, final)", "intent": "Decodes `object` ( taking the current state of the decoder into account ) and returns the resulting decoded object . If this is the last call to decode ( ) `final` must be true ( the default is false ) .", "question_id": 1274}, {"snippet": "ZipFile.open(name, mode='r')", "intent": "Access a member of the archive as a binary file-like object . `name` can be either the name of a file within the archive or a ZipInfo object . The `mode` parameter , if included , must be ' r ' ( the default ) or ' w ' .", "question_id": 12807}, {"snippet": "test_loader.discover(start_dir, pattern='test*.py')", "intent": "Find all the test modules by recursing into subdirectories from the specified start directory , and return a TestSuite object containing them . `start_dir` can be a dotted module name as well as a directory . Only test files that match `pattern` will be loaded .", "question_id": 11500}, {"snippet": "signature.replace(parameters, return_annotation)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4988}, {"snippet": "fileinput.input(files=None, backup='')", "intent": "Create an instance of the FileInput class . With arguments `files`, `backup`.", "question_id": 3790}, {"snippet": "FTP_TLS.prot_p()", "intent": "Set up secure data connection .", "question_id": 3971}, {"snippet": "super()", "intent": "Return a proxy object that delegates method calls to a parent or sibling class of `type` .", "question_id": 4127}, {"snippet": "types.resolve_bases(bases)", "intent": "Resolve MRO entries dynamically as specified by PEP 560 . This function looks for items in `bases` that are not instances of type , and returns a tuple where each such object that has an __mro_entries__ method is replaced with an unpacked result of calling this method .", "question_id": 11182}, {"snippet": "property(fdel=None)", "intent": "Return a property attribute . `fdel` is a function for deleting an attribute value .", "question_id": 4088}, {"snippet": "smtpd.SMTPChannel(server, conn, addr, map=None)", "intent": "Create a new SMTPChannel object which manages the communication between the `server` and a single SMTP client . `conn` and `addr` are as per the instance variables described below . A dictionary can be specified in `map` to avoid using a global socket map .", "question_id": 8429}, {"snippet": "eval(expression, globals)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4013}, {"snippet": "encodings.idna.ToASCII(label)", "intent": "Convert a `label` to ASCII , as specified in RFC 3490 .", "question_id": 1302}, {"snippet": "coverage_results.write_results(summary=False)", "intent": "Write coverage results . Set `summary` to include in the output the coverage summary per module .", "question_id": 10727}, {"snippet": "pow(x, y, z)", "intent": "Return `x` to the power `y` ; if `z` is present , return x to the power y , modulo z ( computed more efficiently than pow ( x , y ) % z ) .", "question_id": 4073}, {"snippet": "modulefinder.ModuleFinder(path=None, replace_paths=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `path` can be a list of directories to search for modules ; if not specified , sys.path is used . `replace_paths` is a list of ( oldpath , newpath ) tuples that will be replaced in module paths .", "question_id": 6042}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "inspect.trace()", "intent": "Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in .", "question_id": 5032}, {"snippet": "doc_test_parser.parse(string)", "intent": "Divide the given `string` into examples and intervening text , and return them as a list of alternating Examples and strings .", "question_id": 2859}, {"snippet": "traceback.print_exc()", "intent": "This is a shorthand for print_exception ( *sys.exc_info ( ) , `limit` , `file` , `chain` ) .", "question_id": 10745}, {"snippet": "wsgiref.util.FileWrapper(filelike)", "intent": "A wrapper to convert a file-like object to an iterator . As the object is iterated over , the optional `blksize` parameter will be repeatedly passed to the `filelike` object \u2019 s read ( ) method to obtain bytestrings to yield .", "question_id": 12217}, {"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}, {"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}, {"snippet": "NNTP.quit()", "intent": "Send a QUIT command and close the connection .", "question_id": 6448}, {"snippet": "os.getpriority(which, who)", "intent": "Get program scheduling priority . The value `which` is one of PRIO_PROCESS , PRIO_PGRP , or PRIO_USER , and `who` is interpreted relative to which ( a process identifier for PRIO_PROCESS , process group identifier for PRIO_PGRP , and a user ID for PRIO_USER ) .", "question_id": 6684}, {"snippet": "zlib.compressobj(level=-1, method=DEFLATED)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `level` is the compression level \u2013 an integer from 0 to 9 or -1 . `method` is the compression algorithm .", "question_id": 12913}, {"snippet": "queue.qsize()", "intent": "Return the number of items in the queue .", "question_id": 457}, {"snippet": "text_calendar.formatyear(theyear, l=1, c=6)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 944}, {"snippet": "i_pv4_address.packed", "intent": "The binary representation of this address - a bytes object of the appropriate length (most significant octet first).", "question_id": 5178}, {"snippet": "OSError(arg)", "intent": "This exception is raised when a system function returns a system-related error , including I/O failures such as \u201c file not found \u201d or \u201c disk full \u201d ( not for illegal argument types or other incidental errors ) . With arguments `arg`.", "question_id": 3648}, {"snippet": "importlib.machinery.EXTENSION_SUFFIXES", "intent": "A list of strings representing the recognized file suffixes for extension modules.", "question_id": 4869}, {"snippet": "NNTP.xhdr(hdr, str)", "intent": "Send an XHDR command . The `hdr` argument is a header keyword , e.g . The `str` argument should have the form 'first-last ' where first and last are the first and last article numbers to search .", "question_id": 6497}, {"snippet": "oss_audio_device.speed(samplerate)", "intent": "Try to set the audio sampling rate to `samplerate` samples per second .", "question_id": 7187}, {"snippet": "datetime.time(hour=0, microsecond=0)", "intent": "All arguments are optional . With arguments `hour`, `microsecond`.", "question_id": 2323}, {"snippet": "multiprocessing.ProcessError", "intent": "The base class of all multiprocessing exceptions.", "question_id": 6189}, {"snippet": "ArgumentParser.add_argument(name or flags...)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`.", "question_id": 68}, {"snippet": "ssl.SSLSession", "intent": "Session object used by session.", "question_id": 9060}, {"snippet": "element_tree.write(file, method=\"xml\")", "intent": "Writes the element tree to a `file` , as XML . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12531}, {"snippet": "pickle.loads(bytes_object, fix_imports=True, errors=\"strict\")", "intent": "Return the reconstituted object hierarchy of the pickled representation `bytes_object` of an object . Optional keyword arguments are `fix_imports` , `encoding` and `errors` , which are used to control compatibility support for pickle stream generated by Python 2 .", "question_id": 7384}, {"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}, {"snippet": "connection.backup(target)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance .", "question_id": 8829}, {"snippet": "urllib.parse.parse_qs(qs, keep_blank_values=False, encoding='utf-8')", "intent": "Parse a query string given as a string argument ( data of type application/x-www-form-urlencoded ) . The optional argument `keep_blank_values` is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings . The optional `encoding` and errors parameters specify how to decode percent-encoded sequences into Unicode characters , as accepted by the bytes.decode ( ) method . With arguments `qs`.", "question_id": 11676}, {"snippet": "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)", "intent": "( Windows version ) Maps `length` bytes from the file specified by the file handle `fileno` , and creates a mmap object . With arguments `access`.", "question_id": 5982}, {"snippet": "importlib.resources.open_text(package, resource, encoding='utf-8')", "intent": "Open for text reading the `resource` within `package` . `encoding` and `errors` have the same meaning as with built-in open ( ) .", "question_id": 4854}, {"snippet": "DocumentType.entities", "intent": "This is a NamedNodeMap giving the definitions of external entities.", "question_id": 12342}, {"snippet": "winsound.PlaySound(sound, flags)", "intent": "Call the underlying PlaySound ( ) function from the Platform API . The `sound` parameter may be a filename , a system sound alias , audio data as a bytes-like object , or None . Its interpretation depends on the value of `flags` , which can be a bitwise ORed combination of the constants described below .", "question_id": 12193}, {"snippet": "locale.currency(val)", "intent": "Formats a number `val` according to the current LC_MONETARY settings .", "question_id": 5392}, {"snippet": "textwrap.shorten(text, width, **kwargs)", "intent": "Collapse and truncate the given `text` to fit in the given `width` . With arguments `**kwargs`.", "question_id": 10322}, {"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}, {"snippet": "xml.etree.ElementTree.register_namespace(prefix, uri)", "intent": "Registers a namespace `prefix` . `uri` is a namespace uri .", "question_id": 12450}, {"snippet": "importlib.machinery.all_suffixes()", "intent": "Returns a combined list of strings representing all file suffixes for modules recognized by the standard import machinery .", "question_id": 4870}, {"snippet": "base_server.shutdown()", "intent": "Tell the serve_forever ( ) loop to stop and wait until it does .", "question_id": 8765}, {"snippet": "widget.identify_column(x)", "intent": "Returns the data column identifier of the cell at position `x` .", "question_id": 10636}, {"snippet": "base64.b16decode(s)", "intent": "Decode the Base16 encoded bytes-like object or ASCII string `s` and return the decoded bytes .", "question_id": 724}, {"snippet": "bdb.clear_break(filename, lineno)", "intent": "Delete the breakpoints in `filename` and `lineno` .", "question_id": 795}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`, `type`, `choices`, `required`, `help`, `metavar`, `dest`.", "question_id": 58}, {"snippet": "incremental_encoder.encode(object)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object .", "question_id": 1268}, {"snippet": "text_calendar.formatyear(theyear, w=2)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`.", "question_id": 937}, {"snippet": "unittest.main(argv=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `defaultTest` argument is either the name of a single test or an iterable of test names to run if no test names are specified via `argv` .", "question_id": 11548}, {"snippet": "random.weibullvariate(alpha, beta)", "intent": "Weibull distribution . `alpha` is the scale parameter and `beta` is the shape parameter .", "question_id": 7917}, {"snippet": "process.kill()", "intent": "Kill the child .", "question_id": 552}, {"snippet": "text_calendar.formatyear(theyear, w=2, m=3)", "intent": "Return a m-column calendar for an entire year as a multi-line string . Optional parameters `w` , `l` , and `c` are for date column width , lines per week , and number of spaces between month columns , respectively . With arguments `theyear`, `m`.", "question_id": 943}, {"snippet": "signature.replace(parameters, return_annotation)", "intent": "Create a new Signature instance based on the instance replace was invoked on . It is possible to pass different `parameters` and/or `return_annotation` to override the corresponding properties of the base signature .", "question_id": 4988}, {"snippet": "wsgiref.headers.Headers(headers)", "intent": "Create a mapping-like object wrapping `headers` , which must be a list of header name/value tuples as described in PEP 3333 .", "question_id": 12219}, {"snippet": "os.execle(path, arg0, arg1, env)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . For execle ( ) , execlpe ( ) , execve ( ) , and execvpe ( ) ( note that these all end in \u201c e \u201d ) , the `env` parameter must be a mapping which is used to define the environment variables for the new process ( these are used instead of the current process \u2019 environment ) ; the functions execl ( ) , execlp ( ) , execv ( ) , and execvp ( ) all cause the new process to inherit the environment of the current process . With arguments `arg0`, `arg1`.", "question_id": 7010}, {"snippet": "test.support.record_original_stdout(stdout)", "intent": "Store the value from `stdout` .", "question_id": 10168}, {"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}, {"snippet": "turtle.RawTurtle(canvas)", "intent": "Create a turtle . With arguments `canvas`.", "question_id": 11158}, {"snippet": "HTTPConnection.request(method, url)", "intent": "This will send a request to the server using the HTTP request `method` method and the selector `url` .", "question_id": 4427}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}, {"snippet": "base_server.shutdown()", "intent": "Tell the serve_forever ( ) loop to stop and wait until it does .", "question_id": 8765}, {"snippet": "turtle.Vec2D(x, y)", "intent": "A two-dimensional vector class , used as a helper class for implementing turtle graphics . With arguments `x`, `y`.", "question_id": 11167}, {"snippet": "test.support.check_no_resource_warning(testcase)", "intent": "Context manager to check that no ResourceWarning was raised . With arguments `testcase`.", "question_id": 10166}, {"snippet": "datetime.resolution", "intent": "The smallest possible difference between non-equal datetime objects, timedelta(microseconds=1).", "question_id": 2271}, {"snippet": "fcntl.lockf(fd, cmd, len=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3748}, {"snippet": "importlib.util.find_spec(name)", "intent": "Find the spec for a module , optionally relative to the specified `package` `name` .", "question_id": 4928}, {"snippet": "bytes.split()", "intent": "Split the binary sequence into subsequences of the same type , using `sep` as the delimiter string .", "question_id": 9363}, {"snippet": "Attributes.getType(name)", "intent": "Returns the type of the attribute `name` , which is normally 'CDATA ' .", "question_id": 12646}, {"snippet": "gzip.open(filename, compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4274}, {"snippet": "turtle.Screen", "intent": "Subclass of TurtleScreen, with four methods added.", "question_id": 11162}, {"snippet": "coverage_results.write_results(show_missing=True, coverdir=None)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits . `coverdir` specifies the directory into which the coverage result files will be output .", "question_id": 10730}, {"snippet": "re.A", "intent": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "question_id": 7924}, {"snippet": "chunk.Chunk(file, align=True, bigendian=True)", "intent": "Class which represents a chunk . The `file` argument is expected to be a file-like object . If the optional argument `align` is true , chunks are assumed to be aligned on 2-byte boundaries . If the optional argument `bigendian` is false , the chunk size is assumed to be in little-endian order .", "question_id": 1079}, {"snippet": "somenamedtuple._replace(**kwargs)", "intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "question_id": 1386}, {"snippet": "Match.groups(default=None)", "intent": "Return a tuple containing all the subgroups of the match , from 1 up to however many groups are in the pattern . The `default` argument is used for groups that did not participate in the match ; it defaults to None .", "question_id": 8000}, {"snippet": "concurrent.futures.ProcessPoolExecutor(max_workers=None, mp_context=None)", "intent": "An Executor subclass that executes calls asynchronously using a pool of at most `max_workers` processes . `mp_context` can be a multiprocessing context or None .", "question_id": 1462}, {"snippet": "set(iterable)", "intent": "Return a new set object , optionally with elements taken from `iterable` .", "question_id": 4102}, {"snippet": "base64.a85decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `adobe` controls whether the input sequence is in Adobe Ascii85 format ( i.e . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 742}, {"snippet": "gzip.compress(data)", "intent": "Compress the `data` , returning a bytes object containing the compressed data .", "question_id": 4294}, {"snippet": "xml.etree.ElementTree.tostringlist(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12463}, {"snippet": "inspect.getcomments(object)", "intent": "Return in a single string any lines of comments immediately preceding the `object` \u2019 s source code ( for a class , function , or method ) , or at the top of the Python source file ( if the object is a module ) .", "question_id": 4970}, {"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}, {"snippet": "Repr.maxlong", "intent": "Maximum number of characters in the representation for an integer.", "question_id": 8063}, {"snippet": "concurrent.futures.thread.BrokenThreadPool", "intent": "Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing.", "question_id": 1489}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11112}, {"snippet": "IMAP4.socket()", "intent": "Returns socket instance used to connect to server .", "question_id": 4739}, {"snippet": "loop.run_in_executor(executor, func, *args)", "intent": "Arrange for `func` to be called in the specified `executor` . With arguments `*args`.", "question_id": 305}, {"snippet": "turtle.degrees(fullcircle=360.0)", "intent": "Set angle measurement units , i.e . With arguments `fullcircle`.", "question_id": 10946}, {"snippet": "Document.createTextNode(data)", "intent": "Create and return a text node containing the `data` passed as a parameter .", "question_id": 12347}, {"snippet": "msilib.Control(dlg, name)", "intent": "Base class of the dialog controls . `dlg` is the dialog object the control belongs to , and `name` is the control \u2019 s name .", "question_id": 6125}, {"snippet": "async_result.wait(timeout)", "intent": "Wait until the result is available or until `timeout` seconds pass .", "question_id": 6362}, {"snippet": "message.get_content_type()", "intent": "Return the message \u2019 s content type .", "question_id": 2978}, {"snippet": "inspect.Signature(parameters=None, return_annotation=Signature.empty)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection . The optional `return_annotation` argument , can be an arbitrary Python object , is the \u201c return \u201d annotation of the callable .", "question_id": 4982}, {"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}, {"snippet": "ContentHandler.ignorableWhitespace(whitespace)", "intent": "Receive notification of ignorable `whitespace` in element content .", "question_id": 12580}, {"snippet": "urllib.parse.urlencode(query, safe='')", "intent": "Convert a mapping object or a sequence of two-element tuples , which may contain str or bytes objects , to a percent-encoded ASCII text string . When a sequence of two-element tuples is used as the `query` argument , the first element of each tuple is a key and the second is a value . For maximum control of what is quoted , use quote and specify a value for `safe` .", "question_id": 11734}, {"snippet": "pdb.runeval(expression)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control .", "question_id": 7331}, {"snippet": "zlib.compress(data, level=-1)", "intent": "Compresses the bytes in `data` , returning a bytes object containing compressed data . `level` is an integer from 0 to 9 or -1 controlling the level of compression ; 1 ( Z_BEST_SPEED ) is fastest and produces the least compression , 9 ( Z_BEST_COMPRESSION ) is slowest and produces the most .", "question_id": 12896}, {"snippet": "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "intent": "Compare `a` and `b` ( lists of bytes objects ) using `dfunc` ; yield a sequence of delta lines ( also bytes ) in the format returned by dfunc . Works by losslessly converting all inputs ( except n ) to str , and calling dfunc ( a , b , `fromfile` , `tofile` , `fromfiledate` , `tofiledate` , n , `lineterm` ) .", "question_id": 2664}, {"snippet": "urllib.parse.quote(string, safe='/')", "intent": "Replace special characters in `string` using the % xx escape . The optional `safe` parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/ ' .", "question_id": 11706}, {"snippet": "Path.mkdir(exist_ok=False)", "intent": "Create a new directory at this given path . If `exist_ok` is false ( the default ) , FileExistsError is raised if the target directory already exists .", "question_id": 7287}, {"snippet": "logging.handlers.HTTPHandler(host, url)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . With arguments `url`.", "question_id": 5541}, {"snippet": "tkinter.tix.StdButtonBox", "intent": "The StdButtonBox widget is a group of standard buttons for Motif-like dialog boxes.", "question_id": 10562}, {"snippet": "dict.popitem()", "intent": "Remove and return a ( key , value ) pair from the dictionary .", "question_id": 9488}, {"snippet": "lzma.compress(data, format=FORMAT_XZ, filters=None)", "intent": "Compress `data` ( a bytes object ) , returning the compressed data as a bytes object . See LZMACompressor above for a description of the `format` , `check` , `preset` and `filters` arguments .", "question_id": 5711}, {"snippet": "ArgumentParser.add_argument_group(title=None)", "intent": "By default , ArgumentParser groups command-line arguments into \u201c positional arguments \u201d and \u201c optional arguments \u201d when displaying help messages . The add_argument_group ( ) method accepts `title` and `description` arguments which can be used to customize this display :", "question_id": 96}, {"snippet": "datetime.time(hour=0)", "intent": "All arguments are optional . With arguments `hour`.", "question_id": 2315}, {"snippet": "doctest.DONT_ACCEPT_BLANKLINE", "intent": "By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "question_id": 2753}, {"snippet": "calendar.month(theyear, themonth, w=0, l=0)", "intent": "Returns a month \u2019 s calendar in a multi-line string using the formatmonth ( ) of the TextCalendar class . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 1000}, {"snippet": "bisect.bisect_left(a, x, hi=len(a))", "intent": "Locate the insertion point for `x` in `a` to maintain sorted order . The parameters `lo` and `hi` may be used to specify a subset of the list which should be considered ; by default the entire list is used .", "question_id": 854}, {"snippet": "locale.format_string(format, val, monetary=False)", "intent": "Formats a number `val` according to the current LC_NUMERIC setting . The `format` follows the conventions of the % operator . If `monetary` is true , the conversion uses monetary thousands separator and grouping strings .", "question_id": 5386}, {"snippet": "header.encode(\\t', splitchars=';)", "intent": "Encode a message header into an RFC-compliant format , possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings . Optional `splitchars` is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping . With arguments `\\t'`.", "question_id": 3131}, {"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}, {"snippet": "@classmethod", "intent": "Transform a method into a class method.", "question_id": 3991}, {"snippet": "somenamedtuple._make(iterable)", "intent": "Class method that makes a new instance from an existing sequence or `iterable` .", "question_id": 1384}, {"snippet": "logging.handlers.NTEventLogHandler(appname, logtype='Application')", "intent": "Returns a new instance of the NTEventLogHandler class . The `appname` is used to define the application name as it appears in the event log . The `logtype` is one of 'Application ' , 'System ' or 'Security ' , and defaults to 'Application ' .", "question_id": 5508}, {"snippet": "windows_proactor_event_loop_policy.remove_child_handler(pid)", "intent": "Removes the handler for process with PID equal to `pid` .", "question_id": 385}, {"snippet": "charset.__eq__(other)", "intent": "This method allows you to compare two Charset instances for equality . With arguments `other`.", "question_id": 2924}, {"snippet": "curses.ascii.isspace(c)", "intent": "Checks for ASCII white-space characters ; space , line feed , carriage return , form feed , horizontal tab , vertical tab . With arguments `c`.", "question_id": 1909}, {"snippet": "Pattern.findall(string, pos, endpos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7981}, {"snippet": "DocCGIXMLRPCRequestHandler.set_server_title(server_title)", "intent": "Set the title used in the generated HTML documentation . With arguments `server_title`.", "question_id": 12764}, {"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4038}, {"snippet": "test_case.assertLogs(logger=None)", "intent": "A context manager to test that at least one message is logged on the `logger` or one of its children , with at least the given `level` .", "question_id": 11412}, {"snippet": "connection.backup(target, progress=None)", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . If `progress` is specified , it must either be None or a callable object that will be executed at each iteration with three integer arguments , respectively the status of the last iteration , the remaining number of pages still to be copied and the total number of pages .", "question_id": 8831}, {"snippet": "incremental_encoder.encode(object, final)", "intent": "Encodes `object` ( taking the current state of the encoder into account ) and returns the resulting encoded object . If this is the last call to encode ( ) `final` must be true ( the default is false ) .", "question_id": 1267}, {"snippet": "loop.sendfile(transport, file, offset=0)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file .", "question_id": 257}, {"snippet": "object.__setstate__(state)", "intent": "Upon unpickling , if the class defines __setstate__ ( ) , it is called with the unpickled `state` .", "question_id": 7412}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `width`, `height`.", "question_id": 11122}, {"snippet": "sequence_matcher.quick_ratio()", "intent": "Return an upper bound on ratio ( ) relatively quickly .", "question_id": 2688}, {"snippet": "formatter.pop_margin()", "intent": "Restore the previous margin .", "question_id": 3831}, {"snippet": "@dataclasses.dataclass(init=True, order=False)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . The `order` of the fields in all of the generated methods is the order in which they appear in the class definition . With arguments `init`.", "question_id": 2166}, {"snippet": "venv.create(env_dir)", "intent": "Create an EnvBuilder with the given keyword arguments , and call its create ( ) method with the `env_dir` argument .", "question_id": 11989}, {"snippet": "datetime.__format__(format)", "intent": "Same as datetime.strftime ( ) . This makes it possible to specify a `format` string for a datetime object in formatted string literals and when using str.format ( ) .", "question_id": 2313}, {"snippet": "re.X", "intent": "This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments.", "question_id": 7935}, {"snippet": "urllib.request.HTTPSHandler(debuglevel=0)", "intent": "A class to handle opening of HTTPS URLs . With arguments `debuglevel`.", "question_id": 11803}, {"snippet": "os.makedirs(name, mode=0o777)", "intent": "Recursive directory creation function . The `mode` parameter is passed to mkdir ( ) for creating the leaf directory ; see the mkdir ( ) description for how it is interpreted . With arguments `name`.", "question_id": 6867}, {"snippet": "subprocess.Popen(args, stdout=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . `stdin` , `stdout` and `stderr` specify the executed program \u2019 s standard input , standard output and standard error file handles , respectively .", "question_id": 9603}, {"snippet": "AU_write.setnchannels(n)", "intent": "Set the number of channels . With arguments `n`.", "question_id": 9721}, {"snippet": "os.getpgid(pid)", "intent": "Return the process group id of the process with process id `pid` .", "question_id": 6680}, {"snippet": "str.count(sub, start, end)", "intent": "Return the number of non-overlapping occurrences of substring `sub` in the range [ `start` , `end` ] .", "question_id": 9182}, {"snippet": "coverage_results.write_results(show_missing=True, summary=False)", "intent": "Write coverage results . Set `show_missing` to show lines that had no hits . Set `summary` to include in the output the coverage summary per module .", "question_id": 10729}, {"snippet": "logging.Formatter(fmt=None, datefmt=None, style='%')", "intent": "Returns a new instance of the Formatter class . If no `fmt` is specified , ' % ( message ) s ' is used . If no `datefmt` is specified , a format is used which is described in the formatTime ( ) documentation . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5617}, {"snippet": "msvcrt.putch(char)", "intent": "Print the byte string `char` to the console without buffering .", "question_id": 6160}, {"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}, {"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}, {"snippet": "gettext.find(domain, languages=None, all=False)", "intent": "This function implements the standard .mo file search algorithm . It takes a `domain` , identical to what textdomain ( ) takes . Optional `languages` is a list of strings , where each string is a language code . If `all` is given , it returns a list of all file names , in the order in which they appear in the languages list or the environment variables .", "question_id": 4227}, {"snippet": "CGIXMLRPCRequestHandler.handle_request()", "intent": "Handle an XML-RPC request .", "question_id": 12747}, {"snippet": "message.get_all(name, failobj=None)", "intent": "Return a list of all the values for the field named `name` . If there are no such named headers in the message , `failobj` is returned ( defaults to None ) .", "question_id": 2975}, {"snippet": "email.headerregistry.Address(domain='')", "intent": "The class used to represent an email address . As a convenience `addr_spec` can be specified instead of `username` and `domain` , in which case username and domain will be parsed from the addr_spec .", "question_id": 3189}, {"snippet": "email.utils.parsedate_to_datetime(date)", "intent": "The inverse of format_datetime ( ) . If the input `date` has a timezone of -0000 , the datetime will be a naive datetime , and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from .", "question_id": 3466}, {"snippet": "zipfile.ZipFile(file, mode='r', compression=ZIP_STORED)", "intent": "Open a ZIP `file` , where file can be a path to a file ( a string ) , a file-like object or a path-like object . The `mode` parameter should be ' r ' to read an existing file , ' w ' to truncate and write a new file , ' a ' to append to an existing file , or ' x ' to exclusively create and write a new file . `compression` is the ZIP compression method to use when writing the archive , and should be ZIP_STORED , ZIP_DEFLATED , ZIP_BZIP2 or ZIP_LZMA ; unrecognized values will cause NotImplementedError to be raised .", "question_id": 12797}, {"snippet": "text_io_base.seek(offset)", "intent": "Change the stream position to the given `offset` .", "question_id": 5142}, {"snippet": "__import__(name, level=0)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context . `level` specifies whether to use absolute or relative imports .", "question_id": 4139}, {"snippet": "logging.handlers.DatagramHandler(host, port)", "intent": "Returns a new instance of the DatagramHandler class intended to communicate with a remote machine whose address is given by `host` and `port` .", "question_id": 5490}, {"snippet": "stream_reader.readexactly(n)", "intent": "Read exactly `n` bytes .", "question_id": 507}, {"snippet": "colorsys.rgb_to_hsv(r, g, b)", "intent": "Convert the color from RGB coordinates to HSV coordinates . With arguments `r`, `g`, `b`.", "question_id": 1407}, {"snippet": "POP3.top(which, howmuch)", "intent": "Retrieves the message header plus `howmuch` lines of the message after the header of message number `which` .", "question_id": 7616}, {"snippet": "selectors.DefaultSelector", "intent": "The default selector class, using the most efficient implementation available on the current platform.", "question_id": 8225}, {"snippet": "xml.etree.ElementTree.dump(elem)", "intent": "Writes an element tree or element structure to sys.stdout . `elem` is an element tree or an individual element .", "question_id": 12436}, {"snippet": "test_case.assertRaisesRegex(exception, regex, msg=None)", "intent": "Like assertRaises ( ) but also tests that `regex` matches on the string representation of the raised `exception` . With arguments `msg`.", "question_id": 11404}, {"snippet": "str.expandtabs(tabsize=8)", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` characters ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9193}, {"snippet": "turtle.circle(radius, steps=None)", "intent": "Draw a circle with given `radius` . As the circle is approximated by an inscribed regular polygon , `steps` determines the number of steps to use .", "question_id": 10925}, {"snippet": "test_case.assertDictEqual(first, second)", "intent": "Test that two dictionaries are equal . With arguments `first`, `second`.", "question_id": 11460}, {"snippet": "winreg.EnumKey(key, index)", "intent": "Enumerates subkeys of an open registry `key` , returning a string . `index` is an integer that identifies the index of the key to retrieve .", "question_id": 12133}, {"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}, {"snippet": "gzip.open(filename, mode='rb', compresslevel=9)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . The `compresslevel` argument is an integer from 0 to 9 , as for the GzipFile constructor .", "question_id": 4278}, {"snippet": "contextlib.ExitStack", "intent": "A context manager that is designed to make it easy to programmatically combine other context managers and cleanup functions, especially those that are optional or otherwise driven by input data.", "question_id": 1626}, {"snippet": "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')", "intent": "Create an object which operates like a regular writer but maps dictionaries onto output rows . The `fieldnames` parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow ( ) method are written to file f. The optional `restval` parameter specifies the value to be written if the dictionary is missing a key in fieldnames . If the dictionary passed to the writerow ( ) method contains a key not found in fieldnames , the optional `extrasaction` parameter indicates what action to take . With arguments `f`, `*args`, `**kwds`.", "question_id": 1704}, {"snippet": "binary.data", "intent": "The binary data encapsulated by the Binary instance.", "question_id": 12686}, {"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4115}, {"snippet": "i_pv4_network.subnets()", "intent": "The subnets that join to make the current network definition , depending on the argument values .", "question_id": 5208}, {"snippet": "DOMImplementation.hasFeature(feature, version)", "intent": "Return true if the `feature` identified by the pair of strings feature and `version` is implemented .", "question_id": 12311}, {"snippet": "HMAC.update(msg)", "intent": "Update the hmac object with `msg` .", "question_id": 4334}, {"snippet": "widget.reattach(item, parent, index)", "intent": "An alias for Treeview.move ( ) . With arguments `item`, `parent`, `index`.", "question_id": 10648}, {"snippet": "base_manager.register(typeid, callable)", "intent": "A classmethod which can be used for registering a type or `callable` with the manager class . `typeid` is a \u201c type identifier \u201d which is used to identify a particular type of shared object .", "question_id": 6292}, {"snippet": "Packer.pack_fstring(n, s)", "intent": "Packs a fixed length string , s. `n` is the length of the string but it is not packed into the data buffer . With arguments `s`.", "question_id": 12277}, {"snippet": "stream_writer.wait_closed()", "intent": "Wait until the stream is closed .", "question_id": 522}, {"snippet": "IMAP4.login(user, password)", "intent": "Identify the client using a plaintext `password` . With arguments `user`.", "question_id": 4709}, {"snippet": "xmlparser.ProcessingInstructionHandler(target, data)", "intent": "Called for every processing instruction . With arguments `target`, `data`.", "question_id": 7762}, {"snippet": "pkgutil.get_data(package, resource)", "intent": "Get a `resource` from a `package` .", "question_id": 7457}, {"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}, {"snippet": "auto.reason", "intent": "A string describing the specific codec error.", "question_id": 3675}, {"snippet": "importlib.resources.read_text(package, resource)", "intent": "Read and return the contents of `resource` within `package` as a str .", "question_id": 4858}, {"snippet": "ctypes.set_last_error(value)", "intent": "Windows only : set the current `value` of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value .", "question_id": 1832}, {"snippet": "@dataclasses.dataclass(init=True)", "intent": "This function is a decorator that is used to add generated special methods to classes , as described below . With arguments `init`.", "question_id": 2158}, {"snippet": "frozenset(iterable)", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4023}, {"snippet": "completed_process.cmd", "intent": "Command that was used to spawn the child process.", "question_id": 9588}, {"snippet": "configparser.InterpolationError", "intent": "Base class for exceptions raised when problems occur performing string interpolation.", "question_id": 1596}, {"snippet": "loop.start_tls(transport, protocol, sslcontext)", "intent": "Upgrade an existing transport-based connection to TLS . Return a new `transport` instance , that the `protocol` must start using immediately after the await . With arguments `sslcontext`.", "question_id": 264}, {"snippet": "iter(object)", "intent": "Return an iterator `object` .", "question_id": 4043}, {"snippet": "tkinter.tix.ExFileSelectBox", "intent": "The ExFileSelectBox widget is usually embedded in a tixExFileSelectDialog widget.", "question_id": 10567}, {"snippet": "property(fset=None)", "intent": "Return a property attribute . `fset` is a function for setting an attribute value .", "question_id": 4087}, {"snippet": "shlex.shlex(instream=None)", "intent": "A shlex instance or subclass instance is a lexical analyzer object . If the `instream` argument is omitted or equal to sys.stdin , this second argument defaults to \u201c stdin \u201d .", "question_id": 8274}, {"snippet": "pprint.PrettyPrinter(indent=1, stream=None)", "intent": "Construct a PrettyPrinter instance . The amount of indentation added for each recursive level is specified by `indent` ; the default is one . An output `stream` may be set using the stream keyword ; the only method used on the stream object is the file protocol \u2019 s write ( ) method .", "question_id": 7631}, {"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}, {"snippet": "xml.etree.ElementTree.tostring(element)", "intent": "Generates a string representation of an XML `element` , including all subelements .", "question_id": 12453}, {"snippet": "window.addstr(y, x, str)", "intent": "Paint the character string `str` at ( `y` , `x` ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2011}, {"snippet": "turtle.dot(*color, size=None)", "intent": "Draw a circular dot with diameter `size` , using color . With arguments `*color`.", "question_id": 10928}, {"snippet": "cursor.lastrowid", "intent": "This read-only attribute provides the rowid of the last modified row.", "question_id": 8850}, {"snippet": "decimal.sqrt(context=None)", "intent": "Return the square root of the argument to full precision . With arguments `context`.", "question_id": 2477}, {"snippet": "modulefinder.ModuleFinder(excludes=)", "intent": "This class provides run_script ( ) and report ( ) methods to determine the set of modules imported by a script . `excludes` is a list of module names to exclude from the analysis .", "question_id": 6048}, {"snippet": "calendar.yeardatescalendar(year)", "intent": "Return the data for the specified `year` ready for formatting .", "question_id": 920}, {"snippet": "print(*objects, flush=False)", "intent": "Print objects to the text stream `file` , separated by `sep` and followed by `end` . sep , end , file and `flush` , if present , must be given as keyword arguments . With arguments `*objects`.", "question_id": 4079}, {"snippet": "os.pwritev(fd, buffers, offset)", "intent": "Write the `buffers` contents to file descriptor `fd` at a `offset` offset , leaving the file offset unchanged .", "question_id": 6789}, {"snippet": "doctest.UnexpectedException(test, example, exc_info)", "intent": "An exception raised by DocTestRunner to signal that a doctest `example` raised an unexpected exception . With arguments `test`, `exc_info`.", "question_id": 2906}, {"snippet": "enumerate(iterable)", "intent": "Return an enumerate object . `iterable` must be a sequence , an iterator , or some other object which supports iteration .", "question_id": 4010}, {"snippet": "socket.recv(bufsize)", "intent": "Receive data from the socket . The maximum amount of data to be received at once is specified by `bufsize` .", "question_id": 8702}, {"snippet": "radio_button_group.add(name, x, y, width, height, text)", "intent": "Add a radio button named `name` to the group , at the coordinates `x` , `y` , `width` , `height` , and with the label `text` .", "question_id": 6133}, {"snippet": "FTP.mlsd(path=\"\")", "intent": "List a directory in a standardized format by using MLSD command ( RFC 3659 ) . If `path` is omitted the current directory is assumed .", "question_id": 3952}, {"snippet": "base_server.socket_type", "intent": "The type of socket used by the server; socket.SOCK_STREAM and socket.SOCK_DGRAM are two common values.", "question_id": 8773}, {"snippet": "ftplib.FTP(user='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3880}, {"snippet": "int(x, base=10)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given . If x is not a number or if `base` is given , then x must be a string , bytes , or bytearray instance representing an integer literal in radix base .", "question_id": 4039}, {"snippet": "ctypes._CData", "intent": "This non-public class is the common base class of all ctypes data types.", "question_id": 1842}, {"snippet": "hmac.digest(key, msg, digest)", "intent": "Return `digest` of `msg` for given secret `key` and digest .", "question_id": 4333}, {"snippet": "math.ldexp(x, i)", "intent": "Return `x` * ( 2**i ) . With arguments `i`.", "question_id": 5901}, {"snippet": "CookiePolicy.domain_return_ok(domain, request)", "intent": "Return false if cookies should not be returned , given cookie `domain` . Note that domain_return_ok ( ) is called for every cookie domain , not just for the `request` domain .", "question_id": 4534}, {"snippet": "Record.GetString(field)", "intent": "Return the value of `field` as a string where possible .", "question_id": 6083}, {"snippet": "ensurepip.bootstrap(root=None, user=False)", "intent": "Bootstraps pip into the current or designated environment . `root` specifies an alternative root directory to install relative to . `user` indicates whether to use the user scheme rather than installing globally .", "question_id": 3497}, {"snippet": "socket.getnameinfo(sockaddr, flags)", "intent": "Translate a socket address `sockaddr` into a 2-tuple ( host , port ) . Depending on the settings of `flags` , the result can contain a fully-qualified domain name or numeric address representation in host .", "question_id": 8651}, {"snippet": "pickle.dump(obj, file, fix_imports=True)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . If `fix_imports` is true and protocol is less than 3 , pickle will try to map the new Python 3 names to the old module names used in Python 2 , so that the pickle data stream is readable with Python 2 .", "question_id": 7365}, {"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}, {"snippet": "list(d)", "intent": "Return a list of all the keys used in the dictionary `d` .", "question_id": 9470}, {"snippet": "multiprocessing.Condition(lock)", "intent": "A condition variable : an alias for threading.Condition . If `lock` is specified then it should be a Lock or RLock object from multiprocessing .", "question_id": 6248}, {"snippet": "unicodedata.normalize(form, unistr)", "intent": "Return the normal `form` form for the Unicode string `unistr` .", "question_id": 11355}, {"snippet": "importlib.__import__(name, level=0)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`, `level`.", "question_id": 4787}, {"snippet": "cgi.escape(s, quote=False)", "intent": "Convert the characters ' & ' , ' < ' and ' > ' in string `s` to HTML-safe sequences . If the optional flag `quote` is true , the quotation mark character ( `` ) is also translated ; this helps for inclusion in an HTML attribute value delimited by double quotes , as in < a href= '' ... '' > .", "question_id": 1058}, {"snippet": "imp.source_from_cache(path)", "intent": "Given the `path` to a PEP 3147 file name , return the associated source code file path .", "question_id": 4769}, {"snippet": "Path.lchmod(mode)", "intent": "Like Path.chmod ( ) but , if the path points to a symbolic link , the symbolic link \u2019 s `mode` is changed rather than its target \u2019 s .", "question_id": 7282}, {"snippet": "set | other | ...", "intent": "Return a new set with elements from the set and all others.", "question_id": 9446}, {"snippet": "turtle.Shape(type_, data)", "intent": "Data structure modeling shapes . The pair ( `type_` , `data` ) must follow this specification :", "question_id": 11164}, {"snippet": "str.isascii()", "intent": "Return true if the string is empty or all characters in the string are ASCII , false otherwise .", "question_id": 9204}, {"snippet": "codec_info.decode", "intent": "The stateless encoding and decoding functions.", "question_id": 1213}, {"snippet": "process.daemon", "intent": "The process\u2019s daemon flag, a Boolean value.", "question_id": 6181}, {"snippet": "turtle.write_docstringdict()", "intent": "Create and write docstring-dictionary to a Python script with the given `filename` .", "question_id": 11168}, {"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}, {"snippet": "str.encode(encoding=\"utf-8\")", "intent": "Return an encoded version of the string as a bytes object . Default `encoding` is 'utf-8 ' .", "question_id": 9186}, {"snippet": "oss_audio_device.setparameters(format, nchannels, samplerate, strict=False)", "intent": "Set the key audio sampling parameters\u2014sample `format` , number of channels , and sampling rate\u2014in one method call . format , `nchannels` , and `samplerate` should be as specified in the setfmt ( ) , channels ( ) , and speed ( ) methods . If `strict` is true , setparameters ( ) checks to see if each parameter was actually set to the requested value , and raises OSSAudioError if not .", "question_id": 7192}, {"snippet": "difflib.SequenceMatcher(a='', b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2677}, {"snippet": "epoll.modify(fd, eventmask)", "intent": "Modify a registered file descriptor . With arguments `fd`, `eventmask`.", "question_id": 8185}, {"snippet": "io_base.truncate(size=None)", "intent": "Resize the stream to the given `size` in bytes ( or the current position if size is not specified ) .", "question_id": 5079}, {"snippet": "test_case.assertRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11441}, {"snippet": "turtle.onscreenclick(fun, btn=1)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `btn`.", "question_id": 11076}, {"snippet": "mailcap.getcaps()", "intent": "Returns a dictionary mapping MIME types to a list of mailcap file entries .", "question_id": 5877}, {"snippet": "smtplib.LMTP(port=LMTP_PORT)", "intent": "The LMTP protocol , which is very similar to ESMTP , is heavily based on the standard SMTP client . It \u2019 s common to use Unix sockets for LMTP , so our connect ( ) method must support that as well as a regular `host` : `port` server .", "question_id": 8490}, {"snippet": "stringprep.in_table_d1(code)", "intent": "Determine whether `code` is in tableD.1 ( Characters with bidirectional property \u201c R \u201d or \u201c AL \u201d ) .", "question_id": 9548}, {"snippet": "msilib.Feature(db, id, title, desc, display, parent=None)", "intent": "Add a new record to the Feature table , using the values `id` , parent.id , `title` , `desc` , `display` , `level` , `directory` , and `attributes` . With arguments `db`, `parent`.", "question_id": 6116}, {"snippet": "turtle.setup(width=_CFG\"width\")", "intent": "Set the size and position of the main window . With arguments `width`.", "question_id": 11108}, {"snippet": "test_case.assertGreaterEqual(first, second)", "intent": "Test that `first` is respectively > , > = , < or < = than `second` depending on the method name .", "question_id": 11435}, {"snippet": "urllib.request.urlretrieve(url, filename=None, data=None)", "intent": "Copy a network object denoted by a URL to a local file . If the `url` uses the http : scheme identifier , the optional `data` argument may be given to specify a POST request ( normally the request type is GET ) . If the URL points to a local file , the object will not be copied unless `filename` is supplied .", "question_id": 11886}, {"snippet": "aifc.writeframes(data)", "intent": "Write `data` to the output file .", "question_id": 35}, {"snippet": "shutil.copytree(src, dst, symlinks=False, ignore=None)", "intent": "Recursively copy an entire directory tree rooted at `src` , returning the destination directory . The destination directory , named by `dst` , must not already exist ; it will be created as well as missing parent directories . If `symlinks` is true , symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows ; if false or omitted , the contents and metadata of the linked files are copied to the new tree . If `ignore` is given , it must be a callable that will receive as its arguments the directory being visited by copytree ( ) , and a list of its contents , as returned by os.listdir ( ) .", "question_id": 8328}, {"snippet": "HTTPResponse.reason", "intent": "Reason phrase returned by server.", "question_id": 4465}, {"snippet": "os.read(fd, n)", "intent": "Read at most `n` bytes from file descriptor `fd` .", "question_id": 6793}, {"snippet": "plistlib.dumps(value, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `skipkeys`.", "question_id": 7574}, {"snippet": "test.support.import_fresh_module(name, blocked=())", "intent": "This function imports and returns a `fresh` copy of the named Python module by removing the named module from sys.modules before doing the import . `blocked` is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError . With arguments `name`.", "question_id": 10244}, {"snippet": "code.compile_command(source, filename=\"<input>\", symbol=\"single\")", "intent": "This function is useful for programs that want to emulate Python \u2019 s interpreter main loop ( a.k.a . `source` is the source string ; `filename` is the optional filename from which source was read , defaulting to ' < input > ' ; and `symbol` is the optional grammar start symbol , which should be either 'single ' ( the default ) or 'eval ' .", "question_id": 1174}, {"snippet": "datetime.replace(minute=self.minute)", "intent": "Return a datetime with the same attributes , except for those attributes given new values by whichever keyword arguments are specified . With arguments `minute`.", "question_id": 2289}, {"snippet": "policy.message_factory", "intent": "A factory function for constructing a new empty message object.", "question_id": 3418}, {"snippet": "trace.size", "intent": "Size of the memory block in bytes (int).", "question_id": 10892}, {"snippet": "shelve.Shelf(dict, keyencoding='utf-8')", "intent": "A subclass of collections.abc.MutableMapping which stores pickled values in the `dict` object . The `keyencoding` parameter is the encoding used to encode keys before they are used with the underlying dict .", "question_id": 8247}, {"snippet": "TarFile.add(name, recursive=True)", "intent": "Add the file `name` to the archive . This can be avoided by setting `recursive` to False .", "question_id": 9951}, {"snippet": "ipaddress.v4_int_to_packed(address)", "intent": "Represent an `address` as 4 packed bytes in network ( big-endian ) order .", "question_id": 5232}, {"snippet": "fcntl.ioctl(fd, request)", "intent": "This function is identical to the fcntl ( ) function , except that the argument handling is even more complicated . The `request` parameter is limited to values that can fit in 32-bits . With arguments `fd`.", "question_id": 3742}, {"snippet": "imaplib.IMAP4_SSL(port=IMAP4_SSL_PORT)", "intent": "This is a subclass derived from IMAP4 that connects over an SSL encrypted socket ( to use this class you need a socket module that was compiled with SSL support ) . If `port` is omitted , the standard IMAP4-over-SSL port ( 993 ) is used .", "question_id": 4678}, {"snippet": "sequence_matcher.get_grouped_opcodes(n=3)", "intent": "Return a generator of groups with up to `n` lines of context .", "question_id": 2686}, {"snippet": "eval(expression)", "intent": "The arguments are a string and optional `globals` and `locals` . The `expression` argument is parsed and evaluated as a Python expression ( technically speaking , a condition list ) using the globals and locals dictionaries as global and local namespace .", "question_id": 4014}, {"snippet": "subprocess.check_output(args, shell=False)", "intent": "Run command with arguments and return its output . With arguments `args`, `shell`.", "question_id": 9682}, {"snippet": "colorsys.yiq_to_rgb(y, i, q)", "intent": "Convert the color from YIQ coordinates to RGB coordinates . With arguments `y`, `i`, `q`.", "question_id": 1404}, {"snippet": "Unpacker.unpack_farray(n, unpack_item)", "intent": "Unpacks and returns ( as a list ) a fixed length array of homogeneous items . `n` is number of list elements to expect in the buffer . As above , `unpack_item` is the function used to unpack each element .", "question_id": 12298}, {"snippet": "stats.dump_stats(filename)", "intent": "Save the data loaded into the Stats object to a file named `filename` .", "question_id": 7692}, {"snippet": "xml.dom.pulldom.parseString(string, parser=None)", "intent": "Return a DOMEventStream that represents the ( Unicode ) `string` . With arguments `parser`.", "question_id": 12430}, {"snippet": "concurrent.futures.as_completed(fs)", "intent": "Returns an iterator over the Future instances ( possibly created by different Executor instances ) given by `fs` that yields futures as they complete ( finished or cancelled futures ) .", "question_id": 1484}, {"snippet": "dataclasses.asdict(instance)", "intent": "Converts the dataclass `instance` to a dict ( by using the factory function `dict_factory` ) .", "question_id": 2179}, {"snippet": "profile.print_stats(sort=-1)", "intent": "Create a Stats object based on the current profile and print the results to stdout . With arguments `sort`.", "question_id": 7683}, {"snippet": "select.kevent(ident, filter=KQ_FILTER_READ, data=0)", "intent": "( Only supported on BSD . ) With arguments `ident`, `filter`, `data`.", "question_id": 8164}, {"snippet": "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If no `method` is specified , GET is used . If `secure` is true , a HTTPS connection will be used . With arguments `url`.", "question_id": 5546}, {"snippet": "functools.update_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "intent": "Update a `wrapper` function to look like the `wrapped` function . The optional arguments are tuples to specify which attributes of the original function are `assigned` directly to the matching attributes on the wrapper function and which attributes of the wrapper function are `updated` with the corresponding attributes from the original function .", "question_id": 4158}, {"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}, {"snippet": "imaplib.IMAP4_stream(command)", "intent": "This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing `command` to subprocess.Popen ( ) .", "question_id": 4686}, {"snippet": "inspect_loader.source_to_code(data, path='<string>')", "intent": "Create a code object from Python source . The `data` argument can be whatever the compile ( ) function supports ( i.e . The `path` argument should be the \u201c path \u201d to where the source code originated from , which can be an abstract concept ( e.g .", "question_id": 4830}, {"snippet": "TarInfo.mode", "intent": "Permission bits.", "question_id": 9984}, {"snippet": "CookieJar.extract_cookies(response, request)", "intent": "Extract cookies from HTTP `response` and store them in the CookieJar , where allowed by policy . The `request` object ( usually a urllib.request.Request instance ) must support the methods get_full_url ( ) , get_host ( ) , unverifiable ( ) , and origin_req_host attribute , as documented by urllib.request .", "question_id": 4488}, {"snippet": "context.create_decimal_from_float(f)", "intent": "Creates a new Decimal instance from a float `f` but rounding using self as the context .", "question_id": 2514}, {"snippet": "Unpacker.unpack_double()", "intent": "Unpacks a double-precision floating point number , similarly to unpack_float ( ) .", "question_id": 12291}, {"snippet": "ImportError", "intent": "Raised when the import statement has troubles trying to load a module.", "question_id": 3640}, {"snippet": "email.headerregistry.Address()", "intent": "The class used to represent an email address .", "question_id": 3186}, {"snippet": "window.border(ls, rs, ts, bs, tl, tr)", "intent": "Draw a border around the edges of the window . With arguments `ls`, `rs`, `ts`, `bs`, `tl`, `tr`.", "question_id": 2021}, {"snippet": "json.dumps(obj, **kw, indent=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `indent`.", "question_id": 5286}, {"snippet": "ftplib.FTP(passwd='')", "intent": "Return a new instance of the FTP class . When `user` is given , additionally the method call login ( user , `passwd` , `acct` ) is made ( where passwd and acct default to the empty string when not given ) .", "question_id": 3881}, {"snippet": "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)", "intent": "Legacy variant of the ConfigParser . It has `interpolation` disabled by default and allows for non-string section names , option names , and values via its unsafe add_section and set methods , as well as the legacy defaults= keyword argument handling . With arguments `':')`, `';')`, `inline_comment_prefixes`.", "question_id": 1575}, {"snippet": "contextlib.suppress(*exceptions)", "intent": "Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement . With arguments `*exceptions`.", "question_id": 1622}, {"snippet": "type(object)", "intent": "With one argument , return the type of an `object` .", "question_id": 4130}, {"snippet": "dis.disassemble(code, lasti=-1, file=None)", "intent": "Disassemble a `code` object , indicating the last instruction if `lasti` was provided . The disassembly is written as text to the supplied `file` argument if provided and to sys.stdout otherwise .", "question_id": 2722}, {"snippet": "loop.getaddrinfo(host, port)", "intent": "Asynchronous version of socket.getaddrinfo ( ) . With arguments `host`, `port`.", "question_id": 289}, {"snippet": "bytes.expandtabs(tabsize=8)", "intent": "Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces , depending on the current column and the given tab size . Tab positions occur every `tabsize` bytes ( default is 8 , giving tab positions at columns 0 , 8 , 16 and so on ) .", "question_id": 9378}, {"snippet": "set.isdisjoint(other)", "intent": "Return True if the set has no elements in common with `other` .", "question_id": 9438}, {"snippet": "gc.set_threshold(threshold0)", "intent": "Set the garbage collection thresholds ( the collection frequency ) . Setting `threshold0` to zero disables collection .", "question_id": 4178}, {"snippet": "smtplib.SMTP(source_address=None)", "intent": "An SMTP instance encapsulates an SMTP connection . The optional `source_address` parameter allows binding to some specific source address in a machine with multiple network interfaces , and/or to some specific source TCP port .", "question_id": 8462}, {"snippet": "directory.start_component(uuid=None)", "intent": "Add an entry to the Component table , and make this `component` the current component for this directory . With arguments `uuid`.", "question_id": 6098}, {"snippet": "timer.repeat(number=1000000)", "intent": "Call timeit ( ) a few times . The second argument specifies the `number` argument for timeit ( ) .", "question_id": 10513}, {"snippet": "connection.create_function(name, num_params, func)", "intent": "Creates a user-defined function that you can later use from within SQL statements under the function `name` name . `num_params` is the number of parameters the function accepts ( if num_params is -1 , the function may take any number of arguments ) , and `func` is a Python callable that is called as the SQL function .", "question_id": 8816}, {"snippet": "xml.etree.ElementTree.SubElement(parent, tag, **extra)", "intent": "Subelement factory . `parent` is the parent element . `tag` is the subelement name . With arguments `**extra`.", "question_id": 12451}, {"snippet": "condition.wait()", "intent": "Wait until notified or until a `timeout` occurs .", "question_id": 10390}, {"snippet": "os.execlp(file, arg0, arg1)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . Open `file` objects and descriptors are not flushed , so if there may be data buffered on these open files , you should flush them using sys.stdout.flush ( ) or os.fsync ( ) before calling an exec* function . With arguments `arg0`, `arg1`.", "question_id": 7011}, {"snippet": "widget.column(column, **kw, option=None)", "intent": "Query or modify the options for the specified `column` . If kw is not given , returns a dict of the column `option` values . With arguments `**kw`.", "question_id": 10626}, {"snippet": "bin(x)", "intent": "Convert an integer number to a binary string prefixed with \u201c 0b \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 3977}, {"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}, {"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`.", "question_id": 5585}, {"snippet": "max(iterable, key)", "intent": "Return the largest item in an `iterable` or the largest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) .", "question_id": 4050}, {"snippet": "curses.ascii.isalpha(c)", "intent": "Checks for an ASCII alphabetic character ; it is equivalent to isupper ( `c` ) or islower ( c ) .", "question_id": 1900}, {"snippet": "heapq.merge(*iterables, key=None, reverse=False)", "intent": "Merge multiple sorted inputs into a single sorted output ( for example , merge timestamped entries from multiple log files ) . Similar to sorted ( itertools.chain ( `*iterables` ) ) but returns an iterable , does not pull the data into memory all at once , and assumes that each of the input streams is already sorted ( smallest to largest ) . `key` specifies a key function of one argument that is used to extract a comparison key from each input element . `reverse` is a boolean value .", "question_id": 4324}, {"snippet": "style.theme_settings(themename, settings)", "intent": "Temporarily sets the current theme to `themename` , apply specified `settings` and then restore the previous theme .", "question_id": 10690}, {"snippet": "calendar.prcal(year, c=6)", "intent": "Prints the calendar for an entire `year` as returned by calendar ( ) . With arguments `c`.", "question_id": 1004}, {"snippet": "readline.read_history_file()", "intent": "Load a readline history file , and append it to the history list .", "question_id": 8022}, {"snippet": "ctypes.OleDLL(name, handle=None)", "intent": "Windows only : Instances of this class represent loaded shared libraries , functions in these libraries use the stdcall calling convention , and are assumed to return the windows specific HRESULT code . With arguments `name`, `handle`.", "question_id": 1752}, {"snippet": "argparse.FileType(bufsize=-1)", "intent": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument ( ) . With arguments `bufsize`.", "question_id": 87}, {"snippet": "msilib.CreateRecord(count)", "intent": "Return a new record object by calling MSICreateRecord ( ) . `count` is the number of fields of the record .", "question_id": 6061}, {"snippet": "xml.etree.ElementTree.Element(tag, **extra, attrib={})", "intent": "Element class . `tag` is the element name . `attrib` is an optional dictionary , containing element attributes . With arguments `**extra`.", "question_id": 12478}, {"snippet": "test_loader.testNamePatterns", "intent": "List of Unix shell-style wildcard test name patterns that test methods have to match to be included in test suites (see -v option).", "question_id": 11506}, {"snippet": "imp.load_module(name, file, pathname, description)", "intent": "Load a module that was previously found by find_module ( ) ( or by an otherwise conducted search yielding compatible results ) . The `name` argument indicates the full module name ( including the package name , if this is a submodule of a package ) . The `file` argument is an open file , and `pathname` is the corresponding file name ; these can be None and `` , respectively , when the module is a package or not being loaded from a file . The `description` argument is a tuple , as would be returned by get_suffixes ( ) , describing what kind of module must be loaded .", "question_id": 4764}, {"snippet": "asyncio.create_subprocess_exec(program, *args, **kwds, stdout=None)", "intent": "Create a subprocess . The `limit` argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr ( if subprocess.PIPE is passed to `stdout` and `stderr` arguments ) . With arguments `program`, `*args`, `**kwds`.", "question_id": 525}, {"snippet": "ContentHandler.endElement(name)", "intent": "Signals the end of an element in non-namespace mode . The `name` parameter contains the name of the element type , just as with the startElement ( ) event .", "question_id": 12576}, {"snippet": "content_manager.add_set_handler(typekey, handler)", "intent": "Record `handler` as the function to call when an object of a type matching `typekey` is passed to set_content ( ) .", "question_id": 3035}, {"snippet": "mbox.unlock()", "intent": "Three locking mechanisms are used\u2014dot locking and , if available , the flock ( ) and lockf ( ) system calls .", "question_id": 5774}, {"snippet": "plistlib.loads(data, fmt=None, dict_type=dict)", "intent": "Load a plist from a bytes object . With arguments `data`, `fmt`, `dict_type`.", "question_id": 7560}, {"snippet": "email_message.set_param(param, value, replace=False)", "intent": "Set a parameter in the Content-Type `header` . If the parameter already exists in the header , `replace` its `value` with value . With arguments `param`.", "question_id": 3265}, {"snippet": "window.insch(ch, attr)", "intent": "Paint character `ch` at ( y , x ) with attributes `attr` , moving the line from position x right by one character .", "question_id": 2071}, {"snippet": "robot_file_parser.modified()", "intent": "Sets the time the robots.txt file was last fetched to the current time .", "question_id": 11914}, {"snippet": "zipapp.create_archive(source, target=None, main=None)", "intent": "Create an application archive from `source` . The `target` argument determines where the resulting archive will be written : The `main` argument specifies the name of a callable which will be used as the main program for the archive .", "question_id": 12774}, {"snippet": "ssl.create_default_context(purpose=Purpose.SERVER_AUTH, capath=None)", "intent": "Return a new SSLContext object with default settings for the given `purpose` . `cafile` , `capath` , `cadata` represent optional CA certificates to trust for certificate verification , as in SSLContext.load_verify_locations ( ) .", "question_id": 8869}, {"snippet": "profile.runctx(command, globals, locals)", "intent": "This function is similar to run ( ) , with added arguments to supply the `globals` and `locals` dictionaries for the `command` string .", "question_id": 7665}, {"snippet": "asyncio.shield(aw, loop=None)", "intent": "Protect an awaitable object from being cancelled . If `aw` is a coroutine it is automatically scheduled as a Task . With arguments `loop`.", "question_id": 604}, {"snippet": "email.contentmanager.set_content(msg, <'str'>, disposition=None)", "intent": "Add `headers` and payload to `msg` : If `disposition` is set , use it as the value of the Content-Disposition header . With arguments `<'str'>`.", "question_id": 3042}, {"snippet": "loader.module_repr(module)", "intent": "A legacy method which when implemented calculates and returns the given `module` \u2019 s repr , as a string .", "question_id": 4817}, {"snippet": "random.seed(a=None)", "intent": "Initialize the random number generator . If `a` is omitted or None , the current system time is used .", "question_id": 7884}, {"snippet": "subprocess.Popen(args, cwd=None)", "intent": "Execute a child program in a new process . `args` should be a sequence of program arguments or else a single string . If `cwd` is not None , the function changes the working directory to cwd before executing the child .", "question_id": 9608}, {"snippet": "range(stop)", "intent": "The arguments to the range constructor must be integers ( either built-in int or any object that implements the __index__ special method ) . For a positive step , the contents of a range r are determined by the formula r [ i ] = start + step*i where i > = 0 and r [ i ] < `stop` .", "question_id": 9162}, {"snippet": "os.execv(path, args)", "intent": "These functions all execute a new program , replacing the current process ; they do not return . The other variants , execl ( ) , execle ( ) , execv ( ) , and execve ( ) , will not use the PATH variable to locate the executable ; `path` must contain an appropriate absolute or relative path . The \u201c v \u201d variants are good when the number of parameters is variable , with the arguments being passed in a list or tuple as the `args` parameter .", "question_id": 7013}, {"snippet": "re.IGNORECASE", "intent": "Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "question_id": 7928}, {"snippet": "charset.header_encode_lines(string, maxlengths)", "intent": "Header-encode a `string` by converting it first to bytes . This is similar to header_encode ( ) except that the string is fit into maximum line lengths as given by the argument `maxlengths` , which must be an iterator : each element returned from this iterator will provide the next maximum line length .", "question_id": 2921}, {"snippet": "plistlib.dumps(value, sort_keys=True)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`.", "question_id": 7573}, {"snippet": "curses.resizeterm(nlines, ncols)", "intent": "Resize the standard and current windows to the specified dimensions , and adjusts other bookkeeping data used by the curses library that record the window dimensions ( in particular the SIGWINCH handler ) . With arguments `nlines`, `ncols`.", "question_id": 1976}, {"snippet": "codecs.decode(obj, encoding='utf-8')", "intent": "Decodes `obj` using the codec registered for `encoding` .", "question_id": 1197}, {"snippet": "abs(x)", "intent": "Return the absolute value of a number . With arguments `x`.", "question_id": 3973}, {"snippet": "pdb.runeval(expression, globals=None)", "intent": "Evaluate the `expression` ( given as a string or a code object ) under debugger control . With arguments `globals`.", "question_id": 7332}, {"snippet": "CGIXMLRPCRequestHandler.register_function()", "intent": "Register a `function` that can respond to XML-RPC requests .", "question_id": 12740}, {"snippet": "len(dictview)", "intent": "Return the number of entries in the dictionary . With arguments `dictview`.", "question_id": 9494}, {"snippet": "window.addstr(str, attr)", "intent": "Paint the character string `str` at ( y , x ) with attributes `attr` , overwriting anything previously on the display .", "question_id": 2008}, {"snippet": "turtle.TurtleScreen(cv)", "intent": "Provides screen oriented methods like setbg ( ) etc . With arguments `cv`.", "question_id": 11161}, {"snippet": "cmath.pi", "intent": "The mathematical constant \u03c0, as a float.", "question_id": 1120}, {"snippet": "context.get(var)", "intent": "Return the value for `var` if var has the value in the context object .", "question_id": 1655}, {"snippet": "asyncio.new_event_loop()", "intent": "Create a new event loop object .", "question_id": 181}, {"snippet": "base64.a85encode(b, foldspaces=False, pad=False)", "intent": "Encode the bytes-like object `b` using Ascii85 and return the encoded bytes . `foldspaces` is an optional flag that uses the special short sequence \u2018 y \u2019 instead of 4 consecutive spaces ( ASCII 0x20 ) as supported by \u2018 btoa \u2019 . `pad` controls whether the input is padded to a multiple of 4 before encoding .", "question_id": 732}, {"snippet": "compileall.compile_path()", "intent": "Byte-compile all the .py files found along sys.path .", "question_id": 1429}, {"snippet": "binary.data", "intent": "The binary data encapsulated by the Binary instance.", "question_id": 12686}, {"snippet": "test.support.bind_port(sock, host=HOST)", "intent": "Bind the socket to a free port and return the port number . With arguments `sock`, `host`.", "question_id": 10259}, {"snippet": "logging.Formatter(style='%')", "intent": "Returns a new instance of the Formatter class . The `style` parameter can be one of \u2018 % \u2019 , \u2018 { \u2018 or \u2018 $ \u2019 and determines how the format string will be merged with its data : using one of % -formatting , str.format ( ) or string.Template .", "question_id": 5613}, {"snippet": "errno.ESTALE", "intent": "Stale NFS file handle", "question_id": 3621}, {"snippet": "parser.parsestr(text)", "intent": "Similar to the parse ( ) method , except it takes a string object instead of a file-like object . Calling this method on a string is equivalent to wrapping `text` in a StringIO instance first and calling parse ( ) .", "question_id": 3390}, {"snippet": "datetime.date(year, month, day)", "intent": "All arguments are required . With arguments `year`, `month`, `day`.", "question_id": 2218}, {"snippet": "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)", "intent": "Create a compressor object , which can be used to compress data incrementally . The `format` argument specifies what container format should be used . The `check` argument specifies the type of integrity check to include in the compressed data .", "question_id": 5683}, {"snippet": "shelve.DbfilenameShelf(filename, flag='c')", "intent": "A subclass of Shelf which accepts a `filename` instead of a dict-like object . The optional `flag` parameter has the same interpretation as for the open ( ) function .", "question_id": 8261}, {"snippet": "warnings.filterwarnings(action, append=False)", "intent": "Insert an entry into the list of warnings filter specifications . The entry is inserted at the front by default ; if `append` is true , it is inserted at the end . With arguments `action`.", "question_id": 12028}, {"snippet": "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)", "intent": "This is essentially a wrapper around the fcntl ( ) locking calls . `fd` is the file descriptor of the file to lock or unlock , and `cmd` is one of the following values : `len` is the number of bytes to lock , `start` is the byte offset at which the lock starts , relative to `whence` , and whence is as with io.IOBase.seek ( ) , specifically :", "question_id": 3754}, {"snippet": "gdbm.sync()", "intent": "When the database has been opened in fast mode , this method forces any unwritten data to be written to the disk .", "question_id": 2377}, {"snippet": "CookieJar.clear(domain, path)", "intent": "Clear some cookies . If given a single argument , only cookies belonging to that `domain` will be removed . If given two arguments , cookies belonging to the specified domain and URL `path` are removed .", "question_id": 4494}, {"snippet": "message.attach(payload)", "intent": "Add the given `payload` to the current payload , which must be None or a list of Message objects before the call .", "question_id": 2955}, {"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}, {"snippet": "collections.OrderedDict(items)", "intent": "Return an instance of a dict subclass that has methods specialized for rearranging dictionary order . With arguments `items`.", "question_id": 1389}, {"snippet": "context.quantize(x, y)", "intent": "Returns a value equal to `x` ( rounded ) , having the exponent of `y` .", "question_id": 2563}, {"snippet": "len(proxy)", "intent": "Return the number of variables set in the context object . With arguments `proxy`.", "question_id": 1657}, {"snippet": "Option.STORE_ACTIONS", "intent": "\u201cstore\u201d actions are additionally listed here.", "question_id": 6652}, {"snippet": "set.intersection_update(*others)", "intent": "Update the set , keeping only elements found in it and all others . With arguments `*others`.", "question_id": 9456}, {"snippet": "pdb.pm()", "intent": "Enter post-mortem debugging of the traceback found in sys.last_traceback .", "question_id": 7340}, {"snippet": "bdb.clear_bpbynumber(arg)", "intent": "Delete the breakpoint which has the index `arg` in the Breakpoint.bpbynumber .", "question_id": 796}, {"snippet": "range(start, stop)", "intent": "Rather than being a function , range is actually an immutable sequence type , as documented in Ranges and Sequence Types \u2014 list , tuple , range . With arguments `start`, `stop`.", "question_id": 4097}, {"snippet": "locale.ERA_D_T_FMT", "intent": "Get a format string for time.strftime() to represent date and time in a locale-specific era-based way.", "question_id": 5369}, {"snippet": "re.fullmatch(pattern, string, flags=0)", "intent": "If the whole `string` matches the regular expression `pattern` , return a corresponding match object . With arguments `flags`.", "question_id": 7942}, {"snippet": "str.expandtabs()", "intent": "Return a copy of the string where all tab characters are replaced by one or more spaces , depending on the current column and the given tab size .", "question_id": 9192}, {"snippet": "calendar.prmonth(theyear, themonth, w=0, l=0)", "intent": "Prints a month \u2019 s calendar as returned by month ( ) . With arguments `theyear`, `themonth`, `w`, `l`.", "question_id": 996}, {"snippet": "email.header.decode_header(header)", "intent": "Decode a message `header` value without converting the character set .", "question_id": 3141}, {"snippet": "fileinput.hook_compressed(filename, mode)", "intent": "Transparently opens files compressed with gzip and bzip2 ( recognized by the extensions '.gz ' and '.bz2 ' ) using the gzip and bz2 modules . If the `filename` extension is not '.gz ' or '.bz2 ' , the file is opened normally ( ie , using open ( ) without any decompression ) . With arguments `mode`.", "question_id": 3810}, {"snippet": "collections.ChainMap(*maps)", "intent": "A ChainMap groups multiple dicts or other mappings together to create a single , updateable view . With arguments `*maps`.", "question_id": 1335}, {"snippet": "var in context", "intent": "Return True if the context has a value for var set; return False otherwise.", "question_id": 1652}, {"snippet": "traceback.print_exception(etype, value, tb)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . With arguments `etype`, `value`.", "question_id": 10737}, {"snippet": "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT))", "intent": "Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose `address` is given by address in the form of a ( host , port ) tuple . With arguments `SYSLOG_UDP_PORT)`.", "question_id": 5494}, {"snippet": "decimal.to_eng_string()", "intent": "Convert to a string , using engineering notation if an exponent is needed .", "question_id": 2478}, {"snippet": "Popen.poll()", "intent": "Check if child process has terminated .", "question_id": 9609}, {"snippet": "zipfile.PyZipFile(file, compression=ZIP_STORED)", "intent": "Instances have one method in addition to those of ZipFile objects : With arguments `file`, `compression`.", "question_id": 12848}, {"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}, {"snippet": "mime_types.guess_extension(type)", "intent": "Similar to the guess_extension ( ) function , using the tables stored as part of the object . With arguments `type`.", "question_id": 5964}, {"snippet": "compileall.compile_dir(dir, ddir=None)", "intent": "Recursively descend the directory tree named by `dir` , compiling all .py files along the way . If `ddir` is given , it is prepended to the path to each file being compiled for use in compilation time tracebacks , and is also compiled in to the byte-code file , where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed .", "question_id": 1411}, {"snippet": "doc_test_finder.find(obj, name, module, globs)", "intent": "Return a list of the DocTests that are defined by `obj` \u2019 s docstring , or by any of its contained objects \u2019 docstrings . The optional argument `name` specifies the object \u2019 s name ; this name will be used to construct names for the returned DocTests . The optional parameter `module` is the module that contains the given object . The globals for each DocTest is formed by combining `globs` and `extraglobs` ( bindings in extraglobs override bindings in globs ) .", "question_id": 2851}, {"snippet": "xml.etree.ElementTree.fromstring(text)", "intent": "Parses an XML section from a string constant . `text` is a string containing XML data .", "question_id": 12437}, {"snippet": "bdb.run(cmd)", "intent": "Debug a statement executed via the exec ( ) function . With arguments `cmd`.", "question_id": 807}, {"snippet": "decimal.Context(prec=None)", "intent": "Creates a new context . `prec` is an integer in the range [ 1 , MAX_PREC ] that sets the precision for arithmetic operations in the context .", "question_id": 2500}, {"snippet": "socket.getaddrinfo(host, port, type=0, proto=0)", "intent": "Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service . `host` is a domain name , a string representation of an IPv4/v6 address or None . `port` is a string service name such as 'http ' , a numeric port number or None . The `family` , `type` and `proto` arguments can be optionally specified in order to narrow the list of addresses returned .", "question_id": 8643}, {"snippet": "opname", "intent": "human readable name for operation", "question_id": 2735}, {"snippet": "tracemalloc.start(nframe: int=1)", "intent": "Start tracing Python memory allocations : install hooks on Python memory allocators . With arguments `nframe: int`.", "question_id": 10848}, {"snippet": "POP3.user(username)", "intent": "Send user command , response should indicate that a password is required . With arguments `username`.", "question_id": 7604}, {"snippet": "min(iterable, key, default)", "intent": "Return the smallest item in an `iterable` or the smallest of two or more arguments . The `key` argument specifies a one-argument ordering function like that used for list.sort ( ) . The `default` argument specifies an object to return if the provided iterable is empty .", "question_id": 4054}, {"snippet": "formatter.AS_IS", "intent": "Value which can be used in the font specification passed to the push_font() method described below, or as the new value to any other push_property() method.", "question_id": 3817}, {"snippet": "bool(x)", "intent": "Return a Boolean value , i.e . `x` is converted using the standard truth testing procedure .", "question_id": 3978}, {"snippet": "multiprocessing.Process(daemon=None)", "intent": "Process objects represent activity that is run in a separate process . If provided , the keyword-only `daemon` argument sets the process daemon flag to True or False .", "question_id": 6171}, {"snippet": "config_parser.set(section, option, value)", "intent": "If the given `section` exists , set the given `option` to the specified `value` ; otherwise raise NoSectionError .", "question_id": 1560}, {"snippet": "key in proxy", "intent": "Return True if the underlying mapping has a key key, else False.", "question_id": 11207}, {"snippet": "cmath.phase(x)", "intent": "Return the phase of `x` ( also known as the argument of x ) , as a float .", "question_id": 1093}, {"snippet": "config_parser.readfp(fp)", "intent": "For existing code calling readfp ( ) with arguments which don \u2019 t support iteration , the following generator may be used as a wrapper around the file-like object : Instead of parser.readfp ( `fp` ) use parser.read_file ( readline_generator ( fp ) ) .", "question_id": 1566}, {"snippet": "re.findall(pattern, string, flags=0)", "intent": "Return all non-overlapping matches of `pattern` in `string` , as a list of strings . With arguments `flags`.", "question_id": 7948}, {"snippet": "timeit.Timer(stmt='pass', setup='pass')", "intent": "Class for timing execution speed of small code snippets . `stmt` and setup may also contain multiple statements separated by ; or newlines , as long as they don \u2019 t contain multi-line string literals . The constructor takes a statement to be timed , an additional statement used for `setup` , and a `timer` function .", "question_id": 10502}, {"snippet": "importlib.import_module(name, package=None)", "intent": "Import a module . The `name` argument specifies what module to import in absolute or relative terms ( e.g . If the name is specified in relative terms , then the `package` argument must be set to the name of the package which is to act as the anchor for resolving the package name ( e.g .", "question_id": 4794}, {"snippet": "socket.gaierror", "intent": "A subclass of OSError, this exception is raised for address-related errors by getaddrinfo() and getnameinfo().", "question_id": 8553}, {"snippet": "xml.parsers.expat.ErrorString(errno)", "intent": "Returns an explanatory string for a given error number `errno` .", "question_id": 7727}, {"snippet": "turtle.onclick(fun, add=None)", "intent": "Bind `fun` to mouse-click events on this screen . With arguments `add`.", "question_id": 11073}, {"snippet": "Pattern.findall(string, pos)", "intent": "Similar to the findall ( ) function , using the compiled pattern , but also accepts optional `pos` and `endpos` parameters that limit the search region like for search ( ) . With arguments `string`.", "question_id": 7982}, {"snippet": "ensurepip.bootstrap(upgrade=False)", "intent": "Bootstraps pip into the current or designated environment . `upgrade` indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version .", "question_id": 3491}, {"snippet": "IMAP4.logout()", "intent": "Shutdown connection to server .", "question_id": 4711}, {"snippet": "timer_handle.when()", "intent": "Return a scheduled callback time as float seconds .", "question_id": 333}, {"snippet": "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)", "intent": "Define how a single command-line argument should be parsed . With arguments `name or flags...`, `action`, `nargs`, `const`, `default`.", "question_id": 64}, {"snippet": "datetime.timedelta(days=0, microseconds=0)", "intent": "All arguments are optional and default to 0 . Only `days` , `seconds` and `microseconds` are stored internally .", "question_id": 2213}, {"snippet": "turtle.sety(y)", "intent": "Set the turtle \u2019 s second coordinate to `y` , leave first coordinate unchanged .", "question_id": 10919}, {"snippet": "FileCookieJar.load()", "intent": "Load cookies from a file .", "question_id": 4506}, {"snippet": "cgitb.text(info, context=5)", "intent": "This function handles the exception described by `info` ( a 3-tuple containing the result of sys.exc_info ( ) ) , formatting its traceback as text and returning the result as a string . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1070}, {"snippet": "nntplib.NNTP_SSL(host, timeout, user=None)", "intent": "Return a new NNTP_SSL object , representing an encrypted connection to the NNTP server running on `host` host , listening at `port` port . With arguments `timeout`, `user`.", "question_id": 6421}, {"snippet": "Telnet.open(host)", "intent": "Connect to a `host` .", "question_id": 10020}, {"snippet": "difflib.SequenceMatcher(isjunk=None, b='')", "intent": "Optional argument `isjunk` must be None ( the default ) or `a` one-argument function that takes a sequence element and returns true if and only if the element is \u201c junk \u201d and should be ignored . The optional arguments a and `b` are sequences to be compared ; both default to empty strings .", "question_id": 2675}, {"snippet": "zipapp.create_archive(source, compressed=False)", "intent": "Create an application archive from `source` . The optional `compressed` argument determines whether files are compressed .", "question_id": 12772}, {"snippet": "IncrementalParser.close()", "intent": "Assume the end of the document .", "question_id": 12628}, {"snippet": "array.reverse()", "intent": "Reverse the order of the items in the array .", "question_id": 135}, {"snippet": "io.FileIO(name, closefd=True)", "intent": "FileIO represents an OS-level file containing bytes data . The `name` can be one of two things : With arguments `closefd`.", "question_id": 5101}, {"snippet": "test_case.assertNotAlmostEqual(first, second, delta=None)", "intent": "Test that `first` and `second` are approximately ( or not approximately ) equal by computing the difference , rounding to the given number of decimal `places` ( default 7 ) , and comparing to zero . If `delta` is supplied instead of places then the difference between first and second must be less or equal to ( or greater than ) delta .", "question_id": 11428}, {"snippet": "SMTP.auth(mechanism, authobject)", "intent": "Issue an SMTP AUTH command for the specified authentication `mechanism` , and handle the challenge response via `authobject` .", "question_id": 8524}, {"snippet": "linecache.checkcache(filename=None)", "intent": "Check the cache for validity . If `filename` is omitted , it will check all the entries in the cache .", "question_id": 5347}, {"snippet": "bytes.decode(encoding=\"utf-8\")", "intent": "Return a string decoded from the given bytes . Default `encoding` is 'utf-8 ' .", "question_id": 9276}, {"snippet": "trace.Trace(infile=None)", "intent": "Create an object to `trace` execution of a single statement or expression . `infile` is the name of the file from which to read stored count information .", "question_id": 10713}, {"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}, {"snippet": "zlib.compressobj(zdict, level=-1)", "intent": "Returns a compression object , to be used for compressing data streams that won \u2019 t fit into memory at once . `zdict` is a predefined compression dictionary . `level` is the compression level \u2013 an integer from 0 to 9 or -1 .", "question_id": 12898}, {"snippet": "asyncio.Condition()", "intent": "A Condition object .", "question_id": 569}, {"snippet": "stringprep.in_table_c6(code)", "intent": "Determine whether `code` is in tableC.6 ( Inappropriate for plain text ) .", "question_id": 9544}, {"snippet": "cgitb.enable(display=1, logdir=None)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the argument `logdir` is present , the traceback reports are written to files .", "question_id": 1064}, {"snippet": "errno.EPERM", "intent": "Operation not permitted", "question_id": 3506}, {"snippet": "all(iterable)", "intent": "Return True if all elements of the `iterable` are true ( or if the iterable is empty ) .", "question_id": 3974}, {"snippet": "cgitb.enable(display=1, format=\"html\")", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . If the optional argument `format` is `` html '' , the output is formatted as HTML .", "question_id": 1066}, {"snippet": "xml.etree.ElementTree.tostring(element, method=\"xml\")", "intent": "Generates a string representation of an XML `element` , including all subelements . `method` is either `` xml '' , `` html '' or `` text '' ( default is `` xml '' ) .", "question_id": 12455}, {"snippet": "scheduler.enterabs(time, priority, action)", "intent": "Schedule a new event . The `time` `argument` should be a numeric type compatible with the return value of the timefunc function passed to the constructor . Events scheduled for the same time will be executed in the order of their `priority` . Executing the event means executing `action` ( *argument , **kwargs ) .", "question_id": 8118}, {"snippet": "test_case.assertNotRegex(text, regex)", "intent": "Test that a `regex` search matches ( or does not match ) `text` .", "question_id": 11443}, {"snippet": "os.mknod(path, device=0)", "intent": "Create a filesystem node ( file , `device` special file or named pipe ) named `path` .", "question_id": 6876}, {"snippet": "queue.put(item)", "intent": "Put an `item` into the queue .", "question_id": 455}, {"snippet": "msvcrt.kbhit()", "intent": "Return true if a keypress is waiting to be read .", "question_id": 6155}, {"snippet": "random.seed(version=2)", "intent": "Initialize the random number generator . With `version` 2 ( the default ) , a str , bytes , or bytearray object gets converted to an int and all of its bits are used .", "question_id": 7885}, {"snippet": "socket.SocketType", "intent": "This is a Python type object that represents the socket object type.", "question_id": 8633}, {"snippet": "mimetypes.MimeTypes(filenames=())", "intent": "This class represents a MIME-types database . The optional `filenames` parameter can be used to cause additional files to be loaded \u201c on top \u201d of the default database .", "question_id": 5957}, {"snippet": "unittest.main(exit=True)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . By default main calls sys.exit ( ) with an `exit` code indicating success or failure of the tests run .", "question_id": 11551}, {"snippet": "FTP.set_pasv(val)", "intent": "Enable \u201c passive \u201d mode if `val` is true , otherwise disable passive mode .", "question_id": 3932}, {"snippet": "errno.EIO", "intent": "I/O error", "question_id": 3510}, {"snippet": "window.enclose(y, x)", "intent": "Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window , returning True or False . With arguments `y`, `x`.", "question_id": 2046}, {"snippet": "inspect.getattr_static(obj, attr, default=None)", "intent": "Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ ( ) or __getattribute__ ( ) . With arguments `obj`, `attr`, `default`.", "question_id": 5035}, {"snippet": "ctypes.Array(*args)", "intent": "Abstract base class for arrays . With arguments `*args`.", "question_id": 1893}, {"snippet": "xml.etree.ElementInclude.default_loader(href, parse)", "intent": "Default loader . `href` is a URL . `parse` is for parse mode either \u201c xml \u201d or \u201c text \u201d .", "question_id": 12473}, {"snippet": "NNTP.login(user=None, password=None, usenetrc=True)", "intent": "Send AUTHINFO commands with the `user` name and `password` . If user and password are None and `usenetrc` is true , credentials from ~/.netrc will be used if possible .", "question_id": 6458}, {"snippet": "collections.UserString(seq)", "intent": "Class that simulates a string object . The instance \u2019 s contents are initially set to a copy of `seq` .", "question_id": 1401}, {"snippet": "time.clock_settime(clk_id, time: float)", "intent": "Set the time of the specified clock `clk_id` . With arguments `time: float`.", "question_id": 10436}, {"snippet": "array.append(x)", "intent": "Append a new item with value `x` to the end of the array .", "question_id": 120}, {"snippet": "unittest.main(testRunner=None)", "intent": "A command-line program that loads a set of tests from `module` and runs them ; this is primarily for making test modules conveniently executable . The `testRunner` argument can either be a test runner class or an already created instance of it .", "question_id": 11549}, {"snippet": "platform.architecture(bits='')", "intent": "Queries the given `executable` ( defaults to the Python interpreter binary ) for various architecture information . Returns a tuple ( `bits` , `linkage` ) which contain information about the bit architecture and the linkage format used for the executable .", "question_id": 7460}, {"snippet": "cmd.Cmd(stdin=None, stdout=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1133}, {"snippet": "breakpoint(*args, **kws)", "intent": "This function drops you into the debugger at the call site . With arguments `*args`, `**kws`.", "question_id": 3980}, {"snippet": "urllib.request.urlopen(url, timeout, capath=None)", "intent": "Open the URL `url` , which can be either a string or a Request object . The optional `timeout` parameter specifies a timeout in seconds for blocking operations like the connection attempt ( if not specified , the global default timeout setting will be used ) . The optional `cafile` and `capath` parameters specify a set of trusted CA certificates for HTTPS requests .", "question_id": 11745}, {"snippet": "date_header.datetime", "intent": "If the header value can be recognized as a valid date of one form or another, this attribute will contain a datetime instance representing that date.", "question_id": 3157}, {"snippet": "config_parser.read(filenames)", "intent": "Attempt to read and parse an iterable of `filenames` , returning a list of filenames which were successfully parsed .", "question_id": 1512}, {"snippet": "Pattern.flags", "intent": "The regex matching flags.", "question_id": 7991}, {"snippet": "HTTPPasswordMgr.add_password(realm, uri, user, passwd)", "intent": "`uri` can be either a single URI , or a sequence of URIs . `realm` , `user` and `passwd` must be strings .", "question_id": 11857}, {"snippet": "tracemalloc.Snapshot", "intent": "Snapshot of traces of memory blocks allocated by Python.", "question_id": 10870}, {"snippet": "io_base.writable()", "intent": "Return True if the stream supports writing .", "question_id": 5080}, {"snippet": "base_selector.register(fileobj, events)", "intent": "Register a file object for selection , monitoring it for I/O `events` . `fileobj` is the file object to monitor .", "question_id": 8215}, {"snippet": "py_compile.compile(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "intent": "Compile a source `file` to byte-code and write out the byte-code cache file . `invalidation_mode` should be a member of the PycInvalidationMode enum and controls how the generated bytecode cache is invalidated at runtime .", "question_id": 7826}, {"snippet": "widget.index(tab_id)", "intent": "Returns the numeric index of the tab specified by `tab_id` , or the total number of tabs if tab_id is the string \u201c end \u201d .", "question_id": 10607}, {"snippet": "str.rjust(width)", "intent": "Return the string right justified in a string of length `width` .", "question_id": 9233}, {"snippet": "fcntl.fcntl(fd, cmd)", "intent": "Perform the operation `cmd` on file descriptor `fd` ( file objects providing a fileno ( ) method are accepted as well ) .", "question_id": 3740}, {"snippet": "extension_file_loader.get_code(fullname)", "intent": "Returns None as extension modules lack a code object . With arguments `fullname`.", "question_id": 4909}, {"snippet": "aifc.setframerate(rate)", "intent": "Specify the sampling frequency in frames per second . With arguments `rate`.", "question_id": 29}, {"snippet": "date.__str__()", "intent": "For a date d , str ( d ) is equivalent to d.isoformat ( ) .", "question_id": 2243}, {"snippet": "xmlparser.SetBase(base)", "intent": "Sets the `base` to be used for resolving relative URIs in system identifiers in declarations .", "question_id": 7735}, {"snippet": "os.abort()", "intent": "Generate a SIGABRT signal to the current process .", "question_id": 7008}, {"snippet": "maildir_message.set_date(date)", "intent": "Set the delivery `date` of the message to date , a floating-point number representing seconds since the epoch .", "question_id": 5820}, {"snippet": "formatter.format_field(value, format_spec)", "intent": "format_field ( ) simply calls the global format ( ) built-in . With arguments `value`, `format_spec`.", "question_id": 9523}, {"snippet": "socket.recvfrom_into(buffer)", "intent": "Receive data from the socket , writing it into `buffer` instead of creating a new bytestring .", "question_id": 8713}, {"snippet": "key not in d", "intent": "Equivalent to not key in d.", "question_id": 9476}, {"snippet": "xmlrpc.client.ServerProxy(uri)", "intent": "A ServerProxy instance is an object that manages communication with a remote XML-RPC server . With arguments `uri`.", "question_id": 12669}, {"snippet": "pickle.Pickler(file, protocol=None)", "intent": "This takes a binary `file` for writing a pickle data stream . The optional `protocol` argument , an integer , tells the pickler to use the given protocol ; supported protocols are 0 to HIGHEST_PROTOCOL .", "question_id": 7391}, {"snippet": "BaseHandler.default_open(req)", "intent": "This method is not defined in BaseHandler , but subclasses should define it if they want to catch all URLs . With arguments `req`.", "question_id": 11843}, {"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}, {"snippet": "dispatcher.handle_accepted(sock, addr)", "intent": "Called on listening channels ( passive openers ) when a connection has been established with a new remote endpoint that has issued a connect ( ) call for the local endpoint . `sock` is a new socket object usable to send and receive data on the connection , and `addr` is the address bound to the socket on the other end of the connection .", "question_id": 660}, {"snippet": "sys.float_repr_style", "intent": "A string indicating how the repr() function behaves for floats.", "question_id": 9792}, {"snippet": "cmd.Cmd(stdin=None)", "intent": "A Cmd instance or subclass instance is a line-oriented interpreter framework . The optional arguments `stdin` and `stdout` specify the input and output file objects that the Cmd instance or subclass instance will use for input and output .", "question_id": 1129}, {"snippet": "base64.b64decode(s, altchars=None)", "intent": "Decode the Base64 encoded bytes-like object or ASCII string `s` and return the decoded bytes . Optional `altchars` must be a bytes-like object or ASCII string of at least length 2 ( additional characters are ignored ) which specifies the alternative alphabet used instead of the + and / characters .", "question_id": 711}, {"snippet": "oss_mixer_device.close()", "intent": "This method closes the open mixer device file .", "question_id": 7201}, {"snippet": "itertools.permutations(iterable)", "intent": "Return successive `r` length permutations of elements in the `iterable` .", "question_id": 5258}, {"snippet": "os.wait3(options)", "intent": "Similar to waitpid ( ) , except no process id argument is given and a 3-element tuple containing the child \u2019 s process id , exit status indication , and resource usage information is returned . With arguments `options`.", "question_id": 7083}, {"snippet": "os.makedev(major, minor)", "intent": "Compose a raw device number from the `major` and `minor` device numbers .", "question_id": 6884}, {"snippet": "loop.set_task_factory(factory)", "intent": "Set a task `factory` that will be used by loop.create_task ( ) .", "question_id": 200}, {"snippet": "FTP.dir()", "intent": "Produce a directory listing as returned by the LIST command , printing it to standard output .", "question_id": 3958}, {"snippet": "decimal.next_toward(other)", "intent": "If the two operands are unequal , return the number closest to the first operand in the direction of the second operand . With arguments `other`.", "question_id": 2455}, {"snippet": "imaplib.Int2AP(num)", "intent": "Converts an integer into a string representation using characters from the set [ A .. P ] . With arguments `num`.", "question_id": 4688}, {"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}, {"snippet": "ossaudiodev.OSSAudioError", "intent": "This exception is raised on certain errors.", "question_id": 7173}, {"snippet": "inspect.Signature(parameters=None)", "intent": "A Signature object represents the call signature of a function and its return annotation . For each parameter accepted by the function it stores a Parameter object in its `parameters` collection .", "question_id": 4980}, {"snippet": "next(iterator)", "intent": "Retrieve the next item from the `iterator` by calling its __next__ ( ) method .", "question_id": 4059}, {"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}, {"snippet": "unicodedata.decomposition(chr)", "intent": "Returns the character decomposition mapping assigned to the character `chr` as string .", "question_id": 11354}, {"snippet": "ast.get_docstring(node)", "intent": "Return the docstring of the given `node` ( which must be a FunctionDef , AsyncFunctionDef , ClassDef , or Module node ) , or None if it has no docstring .", "question_id": 150}, {"snippet": "bdb.user_line(frame)", "intent": "This method is called from dispatch_line ( ) when either stop_here ( ) or break_here ( ) yields True . With arguments `frame`.", "question_id": 781}, {"snippet": "doctest.script_from_examples(s)", "intent": "Convert text with examples to a script . Argument `s` is a string containing doctest examples .", "question_id": 2886}, {"snippet": "system_random.colno", "intent": "The column corresponding to pos (may be None).", "question_id": 7969}, {"snippet": "somenamedtuple._replace(**kwargs)", "intent": "Return a new instance of the named tuple replacing specified fields with new values : With arguments `**kwargs`.", "question_id": 1386}, {"snippet": "socket.gethostname()", "intent": "Return a string containing the hostname of the machine where the Python interpreter is currently executing .", "question_id": 8649}, {"snippet": "os.WCOREDUMP(status)", "intent": "Return True if a core dump was generated for the process , otherwise return False . With arguments `status`.", "question_id": 7088}, {"snippet": "int(x)", "intent": "Return an integer object constructed from a number or string `x` , or return 0 if no arguments are given .", "question_id": 4036}, {"snippet": "fileinput.input(backup='')", "intent": "Create an instance of the FileInput class . With arguments `backup`.", "question_id": 3785}, {"snippet": "uuid.uuid1()", "intent": "Generate a UUID from a host ID , sequence number , and the current time .", "question_id": 11957}, {"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}, {"snippet": "string.punctuation", "intent": "String of ASCII characters which are considered punctuation characters in the C locale.", "question_id": 9513}, {"snippet": "loop.sendfile(transport, file, offset=0, count=None)", "intent": "Send a `file` over a `transport` . `offset` tells from where to start reading the file . If specified , `count` is the total number of bytes to transmit as opposed to sending the file until EOF is reached .", "question_id": 260}, {"snippet": "ssl.HAS_SNI", "intent": "Whether the OpenSSL library has built-in support for the Server Name Indication extension (as defined in RFC 6066).", "question_id": 8948}, {"snippet": "test_loader.loadTestsFromTestCase(testCaseClass)", "intent": "Return a suite of all test cases contained in the TestCase-derived `testCaseClass` .", "question_id": 11491}, {"snippet": "HTTPConnection.putheader(header, argument)", "intent": "Send an RFC 822-style `header` to the server . It sends a line to the server consisting of the header , a colon and a space , and the first `argument` .", "question_id": 4448}, {"snippet": "epoll.poll(timeout=-1, maxevents=-1)", "intent": "Wait for events . `timeout` in seconds ( float ) With arguments `maxevents`.", "question_id": 8190}, {"snippet": "ctypes.c_int16", "intent": "Represents the C 16-bit signed int datatype.", "question_id": 1863}, {"snippet": "unicodedata.lookup(name)", "intent": "Look up character by `name` .", "question_id": 11340}, {"snippet": "dircmp.same_files", "intent": "Files which are identical in both a and b, using the class\u2019s file comparison operator.", "question_id": 3777}, {"snippet": "memoryview.cast(format, shape)", "intent": "Cast a memoryview to a new `format` or `shape` .", "question_id": 9417}, {"snippet": "code.interact(local=None)", "intent": "Convenience function to run a read-eval-print loop . If `local` is provided , it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop .", "question_id": 1164}, {"snippet": "TarFile.add(name, filter=None)", "intent": "Add the file `name` to the archive . If `filter` is given , it should be a function that takes a TarInfo object argument and returns the changed TarInfo object .", "question_id": 9952}, {"snippet": "datetime.time(minute=0)", "intent": "All arguments are optional . With arguments `minute`.", "question_id": 2316}, {"snippet": "array.insert(i, x)", "intent": "Insert a new item with value `x` in the array before position `i` .", "question_id": 131}, {"snippet": "Morsel.isReservedKey(K)", "intent": "Whether `K` is a member of the set of keys of a Morsel .", "question_id": 4600}, {"snippet": "readline.read_history_file(filename)", "intent": "Load a readline history file , and append it to the history list . The default `filename` is ~/.history .", "question_id": 8021}, {"snippet": "str.ljust(width, fillchar)", "intent": "Return the string left justified in a string of length `width` . Padding is done using the specified `fillchar` ( default is an ASCII space ) .", "question_id": 9215}, {"snippet": "ssl.OP_ENABLE_MIDDLEBOX_COMPAT", "intent": "Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make a TLS 1.3 connection look more like a TLS 1.2 connection.", "question_id": 8941}, {"snippet": "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)", "intent": "This is a factory method which can be overridden in subclasses to create specialized LogRecord instances . With arguments `name`, `level`, `fn`, `lno`, `msg`, `args`, `exc_info`, `func`.", "question_id": 5586}, {"snippet": "venv.EnvBuilder(clear=False)", "intent": "The EnvBuilder class accepts the following keyword arguments on instantiation : With arguments `clear`.", "question_id": 11974}, {"snippet": "id(object)", "intent": "Return the \u201c identity \u201d of an `object` .", "question_id": 4033}, {"snippet": "zlib.decompress(data)", "intent": "Decompresses the bytes in `data` , returning a bytes object containing the uncompressed data .", "question_id": 12919}, {"snippet": "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)", "intent": "Create and return a new database `name` , initialize it with `schema` , and set the properties `ProductName` , `ProductCode` , `ProductVersion` , and `Manufacturer` .", "question_id": 6062}, {"snippet": "platform.python_revision()", "intent": "Returns a string identifying the Python implementation SCM revision .", "question_id": 7477}, {"snippet": "json_encoder.colno", "intent": "The column corresponding to pos.", "question_id": 5340}, {"snippet": "time.tzname", "intent": "A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.", "question_id": 10475}, {"snippet": "importlib.machinery.FileFinder(path, *loader_details)", "intent": "A concrete implementation of importlib.abc.PathEntryFinder which caches results from the file system . The `path` argument is the directory for which the finder is in charge of searching . With arguments `*loader_details`.", "question_id": 4882}, {"snippet": "http.client.HTTPResponse(sock, method=None, url=None)", "intent": "Class whose instances are returned upon successful connection . With arguments `sock`, `method`, `url`.", "question_id": 4408}, {"snippet": "logging.handlers.HTTPHandler(host, url, credentials=None)", "intent": "Returns a new instance of the HTTPHandler class . The `host` can be of the form host : port , should you need to use a specific port number . If `credentials` is specified , it should be a 2-tuple consisting of userid and password , which will be placed in a HTTP \u2018 Authorization \u2019 header using Basic authentication . With arguments `url`.", "question_id": 5544}, {"snippet": "base64.decode(input, output)", "intent": "Decode the contents of the binary `input` file and write the resulting binary data to the `output` file .", "question_id": 747}, {"snippet": "re.escape(pattern)", "intent": "Escape special characters in `pattern` .", "question_id": 7959}, {"snippet": "wsgiref.util.guess_scheme(environ)", "intent": "Return a guess for whether wsgi.url_scheme should be \u201c http \u201d or \u201c https \u201d , by checking for a HTTPS environment variable in the `environ` dictionary .", "question_id": 12210}, {"snippet": "test.support.check_syntax_error(testcase, statement, errtext='')", "intent": "Test for syntax errors in `statement` by attempting to compile statement . `testcase` is the unittest instance for the test . `errtext` is the text of the error raised by SyntaxError .", "question_id": 10232}, {"snippet": "robot_file_parser.can_fetch(useragent, url)", "intent": "Returns True if the `useragent` is allowed to fetch the `url` according to the rules contained in the parsed robots.txt file .", "question_id": 11912}, {"snippet": "wsgiref.util.shift_path_info(environ)", "intent": "Shift a single name from PATH_INFO to SCRIPT_NAME and return the name . The `environ` dictionary is modified in-place ; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact .", "question_id": 12214}, {"snippet": "dis.findlabels(code)", "intent": "Detect all offsets in the `code` object code which are jump targets , and return a list of these offsets .", "question_id": 2730}, {"snippet": "mimetypes.guess_type(url, strict=True)", "intent": "Guess the type of a file based on its filename or URL , given by `url` . The optional `strict` argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA .", "question_id": 5940}, {"snippet": "__import__(name, globals=None, locals=None)", "intent": "This function is invoked by the import statement . The function imports the module `name` , potentially using the given `globals` and `locals` to determine how to interpret the name in a package context .", "question_id": 4140}, {"snippet": "turtle.setup(height=_CFG\"height\")", "intent": "Set the size and position of the main window . With arguments `height`.", "question_id": 11109}, {"snippet": "TarFile.extract(member, path=\"\")", "intent": "Extract a `member` from the archive to the current working directory , using its full name . You can specify a different directory using `path` .", "question_id": 9941}, {"snippet": "platform.libc_ver(lib='', chunksize=16384)", "intent": "Tries to determine the libc `version` against which the file `executable` ( defaults to the Python interpreter ) is linked . Returns a tuple of strings ( `lib` , version ) which default to the given parameters in case the lookup fails . The file is read and scanned in chunks of `chunksize` bytes .", "question_id": 7546}, {"snippet": "logging.handlers.QueueHandler(queue)", "intent": "Returns a new instance of the QueueHandler class . The instance is initialized with the `queue` to send messages to .", "question_id": 5553}, {"snippet": "timeit.repeat(repeat=5)", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its `repeat` ( ) method with the given repeat count and `number` executions .", "question_id": 10490}, {"snippet": "io_base.readlines()", "intent": "Read and return a list of lines from the stream .", "question_id": 5072}, {"snippet": "atexit.unregister(func)", "intent": "Remove `func` from the list of functions to be run at interpreter shutdown .", "question_id": 678}, {"snippet": "json.dumps(obj, **kw, indent=None)", "intent": "Serialize `obj` to a JSON formatted str using this conversion table . With arguments `**kw`, `indent`.", "question_id": 5286}, {"snippet": "email.contentmanager.get_content(msg)", "intent": "Return the payload of the part as either a string ( for text parts ) , an EmailMessage object ( for message/rfc822 parts ) , or a bytes object ( for all other non-multipart types ) . With arguments `msg`.", "question_id": 3037}, {"snippet": "xml.sax.saxutils.escape(data, entities={})", "intent": "Escape ' & ' , ' < ' , and ' > ' in a string of `data` . You can escape other strings of data by passing a dictionary as the optional `entities` parameter .", "question_id": 12653}, {"snippet": "connection.backup(target, name=\"main\")", "intent": "This method makes a backup of a SQLite database even while it \u2019 s being accessed by other clients , or concurrently by the same connection . The copy will be written into the mandatory argument `target` , that must be another Connection instance . The `name` argument specifies the database name that will be copied : it must be a string containing either `` main '' , the default , to indicate the main database , `` temp '' to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database .", "question_id": 8832}, {"snippet": "FTP.sendcmd(cmd)", "intent": "Send a simple command string to the server and return the response string . With arguments `cmd`.", "question_id": 3924}, {"snippet": "email.utils.decode_params(params)", "intent": "Decode parameters list according to RFC 2231. `params` is a sequence of 2-tuples containing elements of the form ( content-type , string-value ) .", "question_id": 3487}, {"snippet": "email.mime.image.MIMEImage(_imagedata, **_params, policy=compat32)", "intent": "Module : email.mime.image `_imagedata` is a string containing the raw image data . Optional `policy` argument defaults to compat32 . With arguments `**_params`.", "question_id": 3345}, {"snippet": "os.sendfile(out, in, offset, count, flags=0)", "intent": "Copy `count` bytes from file descriptor `in` to file descriptor `out` starting at `offset` . Cross-platform applications should not use headers , trailers and `flags` arguments .", "question_id": 6800}, {"snippet": "bdb.get_break(filename, lineno)", "intent": "Check if there is a breakpoint for `lineno` of `filename` .", "question_id": 800}, {"snippet": "itertools.filterfalse(predicate, iterable)", "intent": "Make an iterator that filters elements from `iterable` returning only those for which the `predicate` is False .", "question_id": 5252}, {"snippet": "text_calendar.prmonth(theyear, themonth)", "intent": "Print a month \u2019 s calendar as returned by formatmonth ( ) . With arguments `theyear`, `themonth`.", "question_id": 932}, {"snippet": "sorted(iterable, key=None, reverse=False)", "intent": "Return a new sorted list from the items in `iterable` . `key` specifies a function of one argument that is used to extract a comparison key from each element in iterable ( for example , key=str.lower ) . `reverse` is a boolean value .", "question_id": 4111}, {"snippet": "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')", "intent": "Decode the Ascii85 encoded bytes-like object or ASCII string `b` and return the decoded bytes . `ignorechars` should be a bytes-like object or ASCII string containing characters to ignore from the input .", "question_id": 739}, {"snippet": "test.support.disable_faulthandler()", "intent": "A context manager that replaces sys.stderr with sys.__stderr__ .", "question_id": 10191}, {"snippet": "windows_proactor_event_loop_policy.attach_loop(loop)", "intent": "Attach the watcher to an event `loop` .", "question_id": 386}, {"snippet": "zipimporter.get_data(pathname)", "intent": "Return the data associated with `pathname` .", "question_id": 12885}, {"snippet": "pickle.dump(obj, file, protocol=None)", "intent": "Write the pickled representation of the object `obj` to the open `file` object file . This is equivalent to Pickler ( file , `protocol` ) .dump ( obj ) .", "question_id": 7364}, {"snippet": "CookieJar.set_cookie_if_ok(cookie, request)", "intent": "Set a Cookie if policy says it \u2019 s OK to do so . With arguments `cookie`, `request`.", "question_id": 4491}, {"snippet": "datetime.time(minute=0)", "intent": "All arguments are optional . With arguments `minute`.", "question_id": 2316}, {"snippet": "copyreg.pickle(type, function)", "intent": "Declares that `function` should be used as a \u201c reduction \u201d function for objects of `type` type .", "question_id": 1666}, {"snippet": "@unittest.skipIf(condition, reason)", "intent": "Skip the decorated test if `condition` is true . With arguments `reason`.", "question_id": 11359}, {"snippet": "xml.dom.getDOMImplementation()", "intent": "Return a suitable DOM implementation .", "question_id": 12303}, {"snippet": "time.__format__(format)", "intent": "Same as time.strftime ( ) . This makes it possible to specify a `format` string for a time object in formatted string literals and when using str.format ( ) .", "question_id": 2348}, {"snippet": "str()", "intent": "Return a str version of `object` .", "question_id": 4113}, {"snippet": "functools.reduce(function, iterable, initializer)", "intent": "Apply `function` of two arguments cumulatively to the items of sequence , from left to right , so as to reduce the sequence to a single value . If the optional `initializer` is present , it is placed before the items of the sequence in the calculation , and serves as a default when the sequence is empty . With arguments `iterable`.", "question_id": 4153}, {"snippet": "cgitb.enable(display=1, context=5)", "intent": "This function causes the cgitb module to take over the interpreter \u2019 s default handling for exceptions by setting the value of sys.excepthook . The optional argument `display` defaults to 1 and can be set to 0 to suppress sending the traceback to the browser . The optional argument `context` is the number of lines of context to display around the current line of source code in the traceback ; this defaults to 5 .", "question_id": 1065}, {"snippet": "traceback.print_stack(f=None, file=None)", "intent": "Print up to `limit` stack trace entries ( starting from the invocation point ) if limit is positive . The optional `f` argument can be used to specify an alternate stack frame to start . The optional `file` argument has the same meaning as for print_tb ( ) .", "question_id": 10766}, {"snippet": "hashlib.new(name)", "intent": "Is a generic constructor that takes the string `name` of the desired algorithm as its first parameter .", "question_id": 4298}, {"snippet": "timeit.timeit(stmt='pass', setup='pass')", "intent": "Create a Timer instance with the given statement , `setup` code and `timer` function and run its timeit ( ) method with `number` executions . With arguments `stmt`.", "question_id": 10482}, {"snippet": "platform.win32_ver(version='')", "intent": "Get additional `version` information from the Windows Registry and return a tuple ( `release` , version , `csd` , `ptype` ) referring to OS release , version number , CSD level ( service pack ) and OS type ( multi/single processor ) .", "question_id": 7497}, {"snippet": "decimal.fma(other, third)", "intent": "Fused multiply-add . With arguments `other`, `third`.", "question_id": 2415}, {"snippet": "multiprocessing.SimpleQueue", "intent": "It is a simplified Queue type, very close to a locked Pipe.", "question_id": 6211}, {"snippet": "TarFile.gettarinfo(name=None, arcname=None)", "intent": "Create a TarInfo object from the result of os.stat ( ) or equivalent on an existing file . The file is either named by `name` , or specified as a file object `fileobj` with a file descriptor . If given , `arcname` specifies an alternative name for the file in the archive , otherwise , the name is taken from fileobj \u2019 s name attribute , or the name argument .", "question_id": 9963}, {"snippet": "pickletools.dis(pickle)", "intent": "Outputs a symbolic disassembly of the `pickle` to the file-like object `out` , defaulting to sys.stdout .", "question_id": 7415}, {"snippet": "plistlib.dumps(value, sort_keys=True, skipkeys=False)", "intent": "Return `value` as a plist-formatted bytes object . With arguments `sort_keys`, `skipkeys`.", "question_id": 7577}, {"snippet": "csvwriter.writerow(row)", "intent": "Write the `row` parameter to the writer \u2019 s file object , formatted according to the current dialect .", "question_id": 1735}, {"snippet": "sys.setrecursionlimit(limit)", "intent": "Set the maximum depth of the Python interpreter stack to `limit` .", "question_id": 9837}, {"snippet": "Option.const", "intent": "For actions that store a constant value, the constant value to store.", "question_id": 6631}, {"snippet": "gzip.open(filename, mode='rb', errors=None)", "intent": "Open a gzip-compressed file in binary or text `mode` , returning a file object . The `filename` argument can be an actual filename ( a str or bytes object ) , or an existing file object to read from or write to . In this case , the `encoding` , `errors` and `newline` arguments must not be provided .", "question_id": 4280}, {"snippet": "base_handler.run(app)", "intent": "Run the specified WSGI application , `app` .", "question_id": 12247}, {"snippet": "TarInfo.pax_headers", "intent": "A dictionary containing key-value pairs of an associated pax extended header.", "question_id": 9991}, {"snippet": "winreg.ExpandEnvironmentStrings(str)", "intent": "Expands environment variable placeholders % NAME % in strings like REG_EXPAND_SZ : With arguments `str`.", "question_id": 12135}, {"snippet": "datetime.isoformat()", "intent": "Return a string representing the date and time in ISO 8601 format , YYYY-MM-DDTHH : MM : SS.ffffff or , if microsecond is 0 , YYYY-MM-DDTHH : MM : SS", "question_id": 2306}, {"snippet": "DefaultCookiePolicy.strict_ns_set_initial_dollar", "intent": "Ignore cookies in Set-Cookie: headers that have names starting with '$'.", "question_id": 4550}, {"snippet": "sum(iterable, start)", "intent": "Sums `start` and the items of an `iterable` from left to right and returns the total .", "question_id": 4123}, {"snippet": "frozenset()", "intent": "Return a new frozenset object , optionally with elements taken from `iterable` .", "question_id": 4024}, {"snippet": "extension_file_loader.create_module(spec)", "intent": "Creates the module object from the given specification in accordance with PEP 489 . With arguments `spec`.", "question_id": 4906}, {"snippet": "turtle.distance(x, y=None)", "intent": "Return the distance from the turtle to ( `x` , `y` ) , the given vector , or the given other turtle , in turtle step units .", "question_id": 10944}, {"snippet": "hex(x)", "intent": "Convert an integer number to a lowercase hexadecimal string prefixed with \u201c 0x \u201d . If `x` is not a Python int object , it has to define an __index__ ( ) method that returns an integer .", "question_id": 4032}, {"snippet": "i_pv4_network.network_address", "intent": "The network address for the network.", "question_id": 5196}, {"snippet": "float()", "intent": "Return a floating point number constructed from a number or string `x` .", "question_id": 4020}, {"snippet": "traceback.print_exception(etype, value, tb, limit=None, file=None)", "intent": "Print exception information and stack trace entries from traceback object `tb` to `file` . The optional `limit` argument has the same meaning as for print_tb ( ) . With arguments `etype`, `value`.", "question_id": 10741}, {"snippet": "importlib.__import__(name)", "intent": "An implementation of the built-in __import__ ( ) function . With arguments `name`.", "question_id": 4783}, {"snippet": "re.match(pattern, string)", "intent": "If zero or more characters at the beginning of `string` match the regular expression `pattern` , return a corresponding match object .", "question_id": 7939}, {"snippet": "open(file, encoding=None)", "intent": "Open `file` and return a corresponding file object . In text mode , if `encoding` is not specified the encoding used is platform dependent : locale.getpreferredencoding ( False ) is called to get the current locale encoding .", "question_id": 4065}, {"snippet": "element.find(match)", "intent": "Finds the first subelement matching `match` .", "question_id": 12491}]