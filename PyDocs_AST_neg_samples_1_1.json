{"@abc.abstractclassmethod": [], "@abc.abstractmethod": [], "@abc.abstractproperty": [], "@abc.abstractstaticmethod": [], "@asyncio.coroutine": [], "@classmethod": [], "@contextlib.contextmanager": [], "@dataclasses.dataclass()": [], "@dataclasses.dataclass(eq=True)": [], "@dataclasses.dataclass(frozen=False)": [], "@dataclasses.dataclass(init=True)": [], "@dataclasses.dataclass(init=True, eq=True)": [], "@dataclasses.dataclass(init=True, order=False)": [], "@dataclasses.dataclass(init=True, repr=True)": [], "@dataclasses.dataclass(order=False)": [], "@dataclasses.dataclass(repr=True)": [], "@functools.lru_cache()": [], "@functools.lru_cache(maxsize=128)": [], "@functools.lru_cache(maxsize=128, typed=False)": [], "@functools.lru_cache(typed=False)": [], "@functools.singledispatch": [], "@functools.total_ordering": [], "@functools.wraps(wrapped)": [], "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS)": [], "@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)": [], "@functools.wraps(wrapped, updated=WRAPPER_UPDATES)": [], "@importlib.util.module_for_loader": [], "@importlib.util.set_loader": [], "@reprlib.recursive_repr()": [], "@reprlib.recursive_repr(fillvalue=\"...\")": [], "@staticmethod": [], "@test.support.anticipate_failure(condition)": [], "@test.support.bigmemtest(size, memuse)": [], "@test.support.bigmemtest(size, memuse, dry_run=True)": [], "@test.support.cpython_only(test)": [], "@test.support.impl_detail(**guards)": [], "@test.support.no_tracing(func)": [], "@test.support.reap_threads(func)": [], "@test.support.refcount_test(test)": [], "@test.support.requires_IEEE_754": [], "@test.support.requires_bz2": [], "@test.support.requires_docstrings": [], "@test.support.requires_freebsd_version(*min_version)": [], "@test.support.requires_gzip": [], "@test.support.requires_linux_version(*min_version)": [], "@test.support.requires_mac_version(*min_version)": [], "@test.support.requires_resource(resource)": [], "@test.support.requires_zlib": [], "@test.support.run_with_locale(catstr, *locales)": [], "@test.support.run_with_tz(tz)": [], "@test.support.skip_unless_bind_unix_socket": [], "@test.support.skip_unless_xattr": [], "@typing.no_type_check": [], "@typing.no_type_check_decorator": [], "@typing.overload": [], "@typing.type_check_only": [], "@unittest.expectedFailure": [], "@unittest.skip(reason)": [], "@unittest.skipIf(condition, reason)": [], "@unittest.skipUnless(condition, reason)": [], "ABDAY_1 ... ABDAY_7": [], "ABMON_1 ... ABMON_12": [], "AU_read.close()": ["close"], "AU_read.getcompname()": ["getcompname"], "AU_read.getframerate()": ["getframerate"], "AU_read.getmark(id)": ["getmark"], "AU_read.getnchannels()": ["getnchannels"], "AU_read.getnframes()": ["getnframes"], "AU_read.getparams()": ["getparams"], "AU_read.getsampwidth()": ["getsampwidth"], "AU_read.rewind()": ["rewind"], "AU_read.setpos(pos)": ["setpos"], "AU_read.tell()": ["tell"], "AU_write.close()": ["close"], "AU_write.setcomptype(type, name)": ["setcomptype"], "AU_write.setnchannels(n)": ["setnchannels"], "AU_write.setnframes(n)": ["setnframes"], "AU_write.setsampwidth(n)": ["setsampwidth"], "AU_write.tell()": ["tell"], "AU_write.writeframes(data)": ["writeframes"], "AU_write.writeframesraw(data)": ["writeframesraw"], "AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)": ["http_error_auth_reqed"], "AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)": ["http_error_auth_reqed"], "ArgumentParser.add_argument(name or flags...)": [], "ArgumentParser.add_argument(name or flags..., action)": [], "ArgumentParser.add_argument(name or flags..., action, nargs)": [], "ArgumentParser.add_argument(name or flags..., action, nargs, const)": [], "ArgumentParser.add_argument(name or flags..., action, nargs, const, default)": [], "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type)": [], "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices)": [], "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required)": [], "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help)": [], "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar)": [], "ArgumentParser.add_argument(name or flags..., action, nargs, const, default, type, choices, required, help, metavar, dest)": [], "ArgumentParser.add_argument_group()": ["add_argument_group"], "ArgumentParser.add_argument_group(description=None)": ["add_argument_group", "ArgumentParser.add_argument_group(description=None)"], "ArgumentParser.add_argument_group(title=None)": ["add_argument_group", "ArgumentParser.add_argument_group(title=None)"], "ArgumentParser.add_argument_group(title=None, description=None)": ["add_argument_group", "ArgumentParser.add_argument_group(title=None, description=None)"], "ArgumentParser.add_mutually_exclusive_group()": ["add_mutually_exclusive_group"], "ArgumentParser.add_mutually_exclusive_group(required=False)": ["add_mutually_exclusive_group", "ArgumentParser.add_mutually_exclusive_group(required=True)"], "ArgumentParser.add_subparsers()": ["add_subparsers"], "ArgumentParser.add_subparsers(title)": ["add_subparsers"], "ArgumentParser.add_subparsers(title, description)": ["add_subparsers"], "ArgumentParser.add_subparsers(title, description, prog)": ["add_subparsers"], "ArgumentParser.add_subparsers(title, description, prog, parser_class)": ["add_subparsers"], "ArgumentParser.add_subparsers(title, description, prog, parser_class, action)": ["add_subparsers"], "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest)": ["add_subparsers"], "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required)": ["add_subparsers"], "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help)": ["add_subparsers"], "ArgumentParser.add_subparsers(title, description, prog, parser_class, action, option_string, dest, required, help, metavar)": ["add_subparsers"], "ArgumentParser.convert_arg_line_to_args(arg_line)": ["convert_arg_line_to_args"], "ArgumentParser.error(message)": ["error"], "ArgumentParser.exit()": ["exit"], "ArgumentParser.exit(message=None)": ["exit", "ArgumentParser.exit(message=None)"], "ArgumentParser.exit(status=0)": ["exit", "ArgumentParser.exit(status='0')"], "ArgumentParser.exit(status=0, message=None)": ["exit", "ArgumentParser.exit(status=0, message=None)", "ArgumentParser.exit(status='0', message=None)"], "ArgumentParser.format_usage()": ["format_usage"], "ArgumentParser.get_default(dest)": ["get_default"], "ArgumentParser.parse_args()": ["parse_args"], "ArgumentParser.parse_args(args=None)": ["parse_args", "ArgumentParser.parse_args(args=None)"], "ArgumentParser.parse_args(args=None, namespace=None)": ["parse_args", "ArgumentParser.parse_args(args=None, namespace=None)"], "ArgumentParser.parse_args(namespace=None)": ["parse_args", "ArgumentParser.parse_args(namespace=None)"], "ArgumentParser.print_help()": ["print_help"], "ArgumentParser.print_usage()": ["print_usage"], "ArgumentParser.print_usage(file=None)": ["print_usage", "ArgumentParser.print_usage(file=None)"], "ArgumentParser.set_defaults(**kwargs)": ["set_defaults"], "ArithmeticError": ["ArithmeticError"], "AssertionError": ["AssertionError"], "Attr.localName": ["Attr.localName"], "Attr.prefix": ["Attr.prefix"], "Attr.value": ["Attr.value"], "AttributeError": ["AttributeError"], "Attributes.getType(name)": ["getType"], "Attributes.getValue(name)": ["getValue"], "AttributesNS.getNameByQName(name)": ["getNameByQName"], "AttributesNS.getValueByQName(name)": ["getValueByQName"], "BaseCookie.js_output()": ["js_output"], "BaseCookie.js_output(attrs=None)": ["js_output", "BaseCookie.js_output(attrs=None)"], "BaseCookie.load(rawdata)": ["load"], "BaseCookie.output()": ["output"], "BaseCookie.output(attrs=None)": ["output", "BaseCookie.output(attrs=None)"], "BaseCookie.output(attrs=None, header='Set-Cookie:')": ["output", "BaseCookie.output(attrs=None, header='Set-Cookie:')", "BaseCookie.output(attrs=None, header=11)"], "BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\\r\\n')": ["output", "BaseCookie.output(attrs=None, header='Set-Cookie:', sep='\\r\\n')", "BaseCookie.output(attrs=None, header=11, sep=2)"], "BaseCookie.output(attrs=None, sep='\\r\\n')": ["output", "BaseCookie.output(attrs=None, sep='\\r\\n')", "BaseCookie.output(attrs=None, sep=2.0)"], "BaseCookie.output(header='Set-Cookie:')": ["output", "BaseCookie.output(header=11.0)"], "BaseCookie.output(header='Set-Cookie:', sep='\\r\\n')": ["output", "BaseCookie.output(header=11.0, sep=2)"], "BaseCookie.output(sep='\\r\\n')": ["output", "BaseCookie.output(sep=2)"], "BaseCookie.value_decode(val)": ["value_decode"], "BaseCookie.value_encode(val)": ["value_encode"], "BaseException": ["BaseException"], "BaseHandler.<protocol>_open(req)": [], "BaseHandler.<protocol>_response(req, response)": [], "BaseHandler.add_parent(director)": ["add_parent"], "BaseHandler.close()": ["close"], "BaseHandler.default_open(req)": ["default_open"], "BaseHandler.http_error_<nnn>(req, fp, code, msg, hdrs)": ["(BaseHandler.http_error_ >= nnn <= (req, fp, code, msg, hdrs))"], "BaseHandler.http_error_default(req, fp, code, msg, hdrs)": ["http_error_default"], "BaseHandler.parent": ["BaseHandler.parent"], "BaseHandler.unknown_open(req)": ["unknown_open"], "BaseProtocol.connection_lost(exc)": ["connection_lost"], "BaseProtocol.connection_made(transport)": ["connection_made"], "BaseProtocol.pause_writing()": ["pause_writing"], "BaseTransport.close()": ["close"], "BaseTransport.get_extra_info(name)": ["get_extra_info"], "BaseTransport.get_extra_info(name, default=None)": ["get_extra_info", "BaseTransport.get_extra_info(name, default=None)"], "BaseTransport.is_closing()": ["is_closing"], "BaseTransport.set_protocol(protocol)": ["set_protocol"], "BlockingIOError": ["BlockingIOError"], "BrokenPipeError": ["BrokenPipeError"], "BufferError": ["BufferError"], "BufferedProtocol.buffer_updated(nbytes)": ["buffer_updated"], "BufferedProtocol.eof_received()": ["eof_received"], "BufferedProtocol.get_buffer(sizehint)": ["get_buffer"], "CAN_*": [], "CGIXMLRPCRequestHandler.handle_request()": ["handle_request"], "CGIXMLRPCRequestHandler.register_function()": ["register_function"], "CGIXMLRPCRequestHandler.register_function(function=None)": ["register_function", "CGIXMLRPCRequestHandler.register_function(function=None)"], "CGIXMLRPCRequestHandler.register_instance(instance)": ["register_instance"], "CGIXMLRPCRequestHandler.register_introspection_functions()": ["register_introspection_functions"], "CacheFTPHandler.setMaxConns(m)": ["setMaxConns"], "CacheFTPHandler.setTimeout(t)": ["setTimeout"], "ChildProcessError": ["ChildProcessError"], "Class.children": ["Class.children"], "Class.file": ["Class.file"], "Class.lineno": ["Class.lineno"], "Class.methods": ["Class.methods"], "Class.module": ["Class.module"], "Class.parent": ["Class.parent"], "Class.super": ["Class.super"], "Cmd.cmdloop()": ["cmdloop"], "Cmd.cmdloop(intro=None)": ["cmdloop", "Cmd.cmdloop(intro=None)"], "Cmd.cmdqueue": ["Cmd.cmdqueue"], "Cmd.completedefault(text, line, begidx, endidx)": ["completedefault"], "Cmd.default(line)": ["default"], "Cmd.doc_header": ["Cmd.doc_header"], "Cmd.emptyline()": ["emptyline"], "Cmd.intro": ["Cmd.intro"], "Cmd.onecmd(str)": ["onecmd"], "Cmd.postcmd(stop, line)": ["postcmd"], "Cmd.precmd(line)": ["precmd"], "Cmd.ruler": ["Cmd.ruler"], "Codec.decode(input)": ["decode"], "Codec.decode(input, errors)": ["decode"], "Codec.encode(input)": ["encode"], "Codec.encode(input, errors)": ["encode"], "Completer.complete(text, state)": ["complete"], "Compress.compress(data)": ["compress"], "ConfigParser.BOOLEAN_STATES": ["ConfigParser.BOOLEAN_STATES"], "ConfigParser.SECTCRE": ["ConfigParser.SECTCRE"], "ConfigParser.optionxform(option)": ["optionxform"], "ConnectionError": ["ConnectionError"], "ConnectionRefusedError": ["ConnectionRefusedError"], "ConnectionResetError": ["ConnectionResetError"], "ContentHandler.characters(content)": ["characters"], "ContentHandler.endElement(name)": ["endElement"], "ContentHandler.endPrefixMapping(prefix)": ["endPrefixMapping"], "ContentHandler.ignorableWhitespace(whitespace)": ["ignorableWhitespace"], "ContentHandler.processingInstruction(target, data)": ["processingInstruction"], "ContentHandler.setDocumentLocator(locator)": ["setDocumentLocator"], "ContentHandler.skippedEntity(name)": ["skippedEntity"], "ContentHandler.startDocument()": ["startDocument"], "ContentHandler.startElement(name, attrs)": ["startElement"], "ContentHandler.startElementNS(name, qname, attrs)": ["startElementNS"], "ContentHandler.startPrefixMapping(prefix, uri)": ["startPrefixMapping"], "Cookie.comment_url": ["Cookie.comment_url"], "Cookie.discard": ["Cookie.discard"], "Cookie.domain_initial_dot": ["Cookie.domain_initial_dot"], "Cookie.expires": ["Cookie.expires"], "Cookie.get_nonstandard_attr(name, default=None)": ["get_nonstandard_attr", "Cookie.get_nonstandard_attr(name, default=None)"], "Cookie.has_nonstandard_attr(name)": ["has_nonstandard_attr"], "Cookie.is_expired()": ["is_expired"], "Cookie.is_expired(now=None)": ["is_expired", "Cookie.is_expired(now=None)"], "Cookie.path": ["Cookie.path"], "Cookie.port": ["Cookie.port"], "Cookie.port_specified": ["Cookie.port_specified"], "Cookie.rfc2109": ["Cookie.rfc2109"], "Cookie.secure": ["Cookie.secure"], "Cookie.set_nonstandard_attr(name, value)": ["set_nonstandard_attr"], "Cookie.value": ["Cookie.value"], "CookieJar.add_cookie_header(request)": ["add_cookie_header"], "CookieJar.clear()": ["clear"], "CookieJar.clear(domain)": ["clear"], "CookieJar.clear(domain, path)": ["clear"], "CookieJar.clear(domain, path, name)": ["clear"], "CookieJar.clear_session_cookies()": ["clear_session_cookies"], "CookieJar.extract_cookies(response, request)": ["extract_cookies"], "CookieJar.make_cookies(response, request)": ["make_cookies"], "CookieJar.set_cookie(cookie)": ["set_cookie"], "CookieJar.set_cookie_if_ok(cookie, request)": ["set_cookie_if_ok"], "CookiePolicy.domain_return_ok(domain, request)": ["domain_return_ok"], "CookiePolicy.hide_cookie2": ["CookiePolicy.hide_cookie2"], "CookiePolicy.netscape": ["CookiePolicy.netscape"], "CookiePolicy.path_return_ok(path, request)": ["path_return_ok"], "CookiePolicy.return_ok(cookie, request)": ["return_ok"], "CookiePolicy.rfc2965": ["CookiePolicy.rfc2965"], "CookiePolicy.set_ok(cookie, request)": ["set_ok"], "DAY_1 ... DAY_7": [], "DOMImplementation.createDocumentType(qualifiedName, publicId, systemId)": ["createDocumentType"], "DOMImplementation.hasFeature(feature, version)": ["hasFeature"], "DTDHandler.notationDecl(name, publicId, systemId)": ["notationDecl"], "DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)": ["unparsedEntityDecl"], "DataHandler.data_open(req)": ["data_open"], "Database.Close()": ["Close"], "Database.Commit()": ["Commit"], "Database.GetSummaryInformation(count)": ["GetSummaryInformation"], "Database.OpenView(sql)": ["OpenView"], "DatagramProtocol.datagram_received(data, addr)": ["datagram_received"], "DatagramProtocol.error_received(exc)": ["error_received"], "DatagramTransport.abort()": ["abort"], "DatagramTransport.sendto(data)": ["sendto"], "DatagramTransport.sendto(data, addr=None)": ["sendto", "DatagramTransport.sendto(data, addr=None)"], "Decompress.copy()": ["copy"], "Decompress.decompress(data)": ["decompress"], "Decompress.decompress(data, max_length=0)": ["decompress", "Decompress.decompress(data, max_length='0')"], "Decompress.flush(length)": ["flush"], "Decompress.unused_data": ["Decompress.unused_data"], "DefaultCookiePolicy.DomainLiberal": ["DefaultCookiePolicy.DomainLiberal"], "DefaultCookiePolicy.DomainRFC2965Match": ["DefaultCookiePolicy.DomainRFC2965Match"], "DefaultCookiePolicy.DomainStrictNoDots": ["DefaultCookiePolicy.DomainStrictNoDots"], "DefaultCookiePolicy.DomainStrictNonDomain": ["DefaultCookiePolicy.DomainStrictNonDomain"], "DefaultCookiePolicy.allowed_domains()": ["allowed_domains"], "DefaultCookiePolicy.blocked_domains()": ["blocked_domains"], "DefaultCookiePolicy.is_blocked(domain)": ["is_blocked"], "DefaultCookiePolicy.is_not_allowed(domain)": ["is_not_allowed"], "DefaultCookiePolicy.rfc2109_as_netscape": ["DefaultCookiePolicy.rfc2109_as_netscape"], "DefaultCookiePolicy.set_blocked_domains(blocked_domains)": ["set_blocked_domains"], "DefaultCookiePolicy.strict_domain": ["DefaultCookiePolicy.strict_domain"], "DefaultCookiePolicy.strict_ns_domain": ["DefaultCookiePolicy.strict_ns_domain"], "DefaultCookiePolicy.strict_ns_set_initial_dollar": ["DefaultCookiePolicy.strict_ns_set_initial_dollar"], "DefaultCookiePolicy.strict_ns_set_path": ["DefaultCookiePolicy.strict_ns_set_path"], "DefaultCookiePolicy.strict_ns_unverifiable": ["DefaultCookiePolicy.strict_ns_unverifiable"], "DefaultCookiePolicy.strict_rfc2965_unverifiable": ["DefaultCookiePolicy.strict_rfc2965_unverifiable"], "DeprecationWarning": ["DeprecationWarning"], "Dialect.delimiter": ["Dialect.delimiter"], "Dialect.doublequote": ["Dialect.doublequote"], "Dialect.escapechar": ["Dialect.escapechar"], "Dialect.quotechar": ["Dialect.quotechar"], "Dialect.quoting": ["Dialect.quoting"], "Dialect.skipinitialspace": ["Dialect.skipinitialspace"], "Dialect.strict": ["Dialect.strict"], "DictWriter.writeheader()": ["writeheader"], "DocCGIXMLRPCRequestHandler.set_server_title(server_title)": ["set_server_title"], "DocTestFailure.example": ["DocTestFailure.example"], "DocTestFailure.got": ["DocTestFailure.got"], "DocTestFailure.test": ["DocTestFailure.test"], "DocXMLRPCServer.set_server_documentation(server_documentation)": ["set_server_documentation"], "DocXMLRPCServer.set_server_title(server_title)": ["set_server_title"], "Document.createAttribute(name)": ["createAttribute"], "Document.createAttributeNS(namespaceURI, qualifiedName)": ["createAttributeNS"], "Document.createElement(tagName)": ["createElement"], "Document.createElementNS(namespaceURI, tagName)": ["createElementNS"], "Document.createProcessingInstruction(target, data)": ["createProcessingInstruction"], "Document.createTextNode(data)": ["createTextNode"], "Document.documentElement": ["Document.documentElement"], "Document.getElementsByTagName(tagName)": ["getElementsByTagName"], "Document.getElementsByTagNameNS(namespaceURI, localName)": ["getElementsByTagNameNS"], "DocumentType.entities": ["DocumentType.entities"], "DocumentType.internalSubset": ["DocumentType.internalSubset"], "DocumentType.name": ["DocumentType.name"], "DocumentType.notations": ["DocumentType.notations"], "DocumentType.publicId": ["DocumentType.publicId"], "EOFError": ["EOFError"], "Element.getAttributeNode(attrname)": ["getAttributeNode"], "Element.getElementsByTagName(tagName)": ["getElementsByTagName"], "Element.getElementsByTagNameNS(namespaceURI, localName)": ["getElementsByTagNameNS"], "Element.hasAttributeNS(namespaceURI, localName)": ["hasAttributeNS"], "Element.removeAttribute(name)": ["removeAttribute"], "Element.removeAttributeNode(oldAttr)": ["removeAttributeNode"], "Element.setAttribute(name, value)": ["setAttribute"], "Element.setAttributeNode(newAttr)": ["setAttributeNode"], "Element.setAttributeNodeNS(newAttr)": ["setAttributeNodeNS"], "Ellipsis": ["Ellipsis"], "EntityResolver.resolveEntity(publicId, systemId)": ["resolveEntity"], "EnvironmentVarGuard.set(envvar, value)": ["set"], "EnvironmentVarGuard.unset(envvar)": ["unset"], "ErrorHandler.fatalError(exception)": ["fatalError"], "ErrorHandler.warning(exception)": ["warning"], "Exception": ["Exception"], "ExpatError.lineno": ["ExpatError.lineno"], "ExpatError.offset": ["ExpatError.offset"], "FTP.abort()": ["abort"], "FTP.close()": ["close"], "FTP.connect()": ["connect"], "FTP.connect(host='')": ["connect", "FTP.connect(host=0.0)"], "FTP.connect(host='', port=0)": ["connect", "FTP.connect(host=0.0, port='0')"], "FTP.connect(host='', source_address=None)": ["connect", "FTP.connect(host='', source_address=None)", "FTP.connect(host=0, source_address=None)"], "FTP.connect(host='', timeout=None)": ["connect", "FTP.connect(host='', timeout=None)", "FTP.connect(host=0, timeout=None)"], "FTP.connect(port=0)": ["connect", "FTP.connect(port='0')"], "FTP.connect(port=0, timeout=None)": ["connect", "FTP.connect(port=0, timeout=None)", "FTP.connect(port='0', timeout=None)"], "FTP.connect(source_address=None)": ["connect", "FTP.connect(source_address=None)"], "FTP.cwd(pathname)": ["cwd"], "FTP.delete(filename)": ["delete"], "FTP.dir()": ["dir"], "FTP.dir(argument)": ["dir"], "FTP.getwelcome()": ["getwelcome"], "FTP.login()": ["login"], "FTP.login(acct='')": ["login", "FTP.login(acct=0)"], "FTP.login(passwd='')": ["login", "FTP.login(passwd=0)"], "FTP.login(passwd='', acct='')": ["login", "FTP.login(passwd=0, acct=0)"], "FTP.login(user='anonymous')": ["login", "FTP.login(user=9)"], "FTP.login(user='anonymous', acct='')": ["login", "FTP.login(user=9, acct=0)"], "FTP.login(user='anonymous', passwd='')": ["login", "FTP.login(user=9, passwd=0)"], "FTP.login(user='anonymous', passwd='', acct='')": ["login", "FTP.login(user=9, passwd=0, acct=0)"], "FTP.mlsd()": ["mlsd"], "FTP.mlsd(facts=)": [], "FTP.mlsd(path=\"\")": ["mlsd", "FTP.mlsd(path=0.0)"], "FTP.mlsd(path=\"\", facts=)": [], "FTP.nlst(argument)": ["nlst"], "FTP.ntransfercmd(cmd)": ["ntransfercmd"], "FTP.ntransfercmd(cmd, rest=None)": ["ntransfercmd", "FTP.ntransfercmd(cmd, rest=None)"], "FTP.quit()": ["quit"], "FTP.rename(fromname, toname)": ["rename"], "FTP.retrbinary(cmd, callback)": ["retrbinary"], "FTP.retrbinary(cmd, callback, blocksize=8192)": ["retrbinary", "FTP.retrbinary(cmd, callback, blocksize='8192')"], "FTP.retrbinary(cmd, callback, rest=None)": ["retrbinary", "FTP.retrbinary(cmd, callback, rest=None)"], "FTP.retrlines(cmd)": ["retrlines"], "FTP.retrlines(cmd, callback=None)": ["retrlines", "FTP.retrlines(cmd, callback=None)"], "FTP.rmd(dirname)": ["rmd"], "FTP.sendcmd(cmd)": ["sendcmd"], "FTP.set_debuglevel(level)": ["set_debuglevel"], "FTP.set_pasv(val)": ["set_pasv"], "FTP.size(filename)": ["size"], "FTP.storbinary(cmd, fp)": ["storbinary"], "FTP.storbinary(cmd, fp, blocksize=8192)": ["storbinary", "FTP.storbinary(cmd, fp, blocksize='8192')"], "FTP.storbinary(cmd, fp, callback=None)": ["storbinary", "FTP.storbinary(cmd, fp, callback=None)"], "FTP.storbinary(cmd, fp, rest=None)": ["storbinary", "FTP.storbinary(cmd, fp, rest=None)"], "FTP.storlines(cmd, fp)": ["storlines"], "FTP.storlines(cmd, fp, callback=None)": ["storlines", "FTP.storlines(cmd, fp, callback=None)"], "FTP.transfercmd(cmd)": ["transfercmd"], "FTP.transfercmd(cmd, rest=None)": ["transfercmd", "FTP.transfercmd(cmd, rest=None)"], "FTP.voidcmd(cmd)": ["voidcmd"], "FTPHandler.ftp_open(req)": ["ftp_open"], "FTP_TLS.auth()": ["auth"], "FTP_TLS.ccc()": ["ccc"], "FTP_TLS.prot_c()": ["prot_c"], "FTP_TLS.prot_p()": ["prot_p"], "FTP_TLS.ssl_version": ["FTP_TLS.ssl_version"], "False": ["True"], "FieldStorage.getfirst(name)": ["getfirst"], "FieldStorage.getfirst(name, default=None)": ["getfirst", "FieldStorage.getfirst(name, default=None)"], "FieldStorage.getlist(name)": ["getlist"], "FileCookieJar.delayload": ["FileCookieJar.delayload"], "FileCookieJar.filename": ["FileCookieJar.filename"], "FileCookieJar.load()": ["load"], "FileCookieJar.load(filename=None)": ["load", "FileCookieJar.load(filename=None)"], "FileCookieJar.load(filename=None, ignore_discard=False)": ["load", "FileCookieJar.load(filename=None, ignore_discard=True)"], "FileCookieJar.load(ignore_discard=False)": ["load", "FileCookieJar.load(ignore_discard=True)"], "FileCookieJar.load(ignore_discard=False, ignore_expires=False)": ["load", "FileCookieJar.load(ignore_discard=True, ignore_expires=True)"], "FileCookieJar.revert()": ["revert"], "FileCookieJar.revert(filename=None)": ["revert", "FileCookieJar.revert(filename=None)"], "FileCookieJar.revert(filename=None, ignore_discard=False)": ["revert", "FileCookieJar.revert(filename=None, ignore_discard=True)"], "FileCookieJar.revert(ignore_discard=False)": ["revert", "FileCookieJar.revert(ignore_discard=True)"], "FileCookieJar.revert(ignore_discard=False, ignore_expires=False)": ["revert", "FileCookieJar.revert(ignore_discard=True, ignore_expires=True)"], "FileCookieJar.revert(ignore_expires=False)": ["revert", "FileCookieJar.revert(ignore_expires=True)"], "FileCookieJar.save()": ["save"], "FileCookieJar.save(filename=None)": ["save", "FileCookieJar.save(filename=None)"], "FileCookieJar.save(filename=None, ignore_discard=False)": ["save", "FileCookieJar.save(filename=None, ignore_discard=True)"], "FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)": ["save", "FileCookieJar.save(filename=None, ignore_discard=True, ignore_expires=True)"], "FileCookieJar.save(filename=None, ignore_expires=False)": ["save", "FileCookieJar.save(filename=None, ignore_expires=True)"], "FileCookieJar.save(ignore_discard=False)": ["save", "FileCookieJar.save(ignore_discard=True)"], "FileCookieJar.save(ignore_discard=False, ignore_expires=False)": ["save", "FileCookieJar.save(ignore_discard=True, ignore_expires=True)"], "FileCookieJar.save(ignore_expires=False)": ["save", "FileCookieJar.save(ignore_expires=True)"], "FileExistsError": ["FileExistsError"], "FileHandler.file_open(req)": ["file_open"], "Function.children": ["Function.children"], "Function.file": ["Function.file"], "Function.lineno": ["Function.lineno"], "Function.module": ["Function.module"], "Function.name": ["Function.name"], "Function.parent": ["Function.parent"], "FutureWarning": ["FutureWarning"], "GeneratorExit": ["GeneratorExit"], "HMAC.block_size": ["HMAC.block_size"], "HMAC.copy()": ["copy"], "HMAC.digest()": ["digest"], "HMAC.digest_size": ["HMAC.digest_size"], "HMAC.name": ["HMAC.name"], "HMAC.update(msg)": ["update"], "HTMLParser.close()": ["close"], "HTMLParser.feed(data)": ["feed"], "HTMLParser.get_starttag_text()": ["get_starttag_text"], "HTMLParser.handle_charref(name)": ["handle_charref"], "HTMLParser.handle_comment(data)": ["handle_comment"], "HTMLParser.handle_data(data)": ["handle_data"], "HTMLParser.handle_decl(decl)": ["handle_decl"], "HTMLParser.handle_endtag(tag)": ["handle_endtag"], "HTMLParser.handle_entityref(name)": ["handle_entityref"], "HTMLParser.handle_pi(data)": ["handle_pi"], "HTMLParser.handle_startendtag(tag, attrs)": ["handle_startendtag"], "HTMLParser.handle_starttag(tag, attrs)": ["handle_starttag"], "HTMLParser.reset()": ["reset"], "HTTPBasicAuthHandler.http_error_401(req, fp, code, msg, hdrs)": ["http_error_401"], "HTTPConnection.blocksize": ["HTTPConnection.blocksize"], "HTTPConnection.close()": ["close"], "HTTPConnection.connect()": ["connect"], "HTTPConnection.endheaders()": ["endheaders"], "HTTPConnection.endheaders(message_body=None)": ["endheaders", "HTTPConnection.endheaders(message_body=None)"], "HTTPConnection.getresponse()": ["getresponse"], "HTTPConnection.putheader(header)": ["putheader"], "HTTPConnection.putheader(header, argument)": ["putheader"], "HTTPConnection.putrequest(method, url)": ["putrequest"], "HTTPConnection.putrequest(method, url, skip_accept_encoding=False)": ["putrequest", "HTTPConnection.putrequest(method, url, skip_accept_encoding=True)"], "HTTPConnection.putrequest(method, url, skip_host=False)": ["putrequest", "HTTPConnection.putrequest(method, url, skip_host=True)"], "HTTPConnection.request(method, url)": ["request"], "HTTPConnection.request(method, url, body=None)": ["request", "HTTPConnection.request(method, url, body=None)"], "HTTPConnection.request(method, url, body=None, encode_chunked=False)": ["request", "HTTPConnection.request(method, url, body=None, encode_chunked=True)"], "HTTPConnection.request(method, url, body=None, headers={})": ["request", "HTTPConnection.request(method, url, body=None, headers={})"], "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=False)": ["request", "HTTPConnection.request(method, url, body=None, headers={}, encode_chunked=True)"], "HTTPConnection.request(method, url, encode_chunked=False)": ["request", "HTTPConnection.request(method, url, encode_chunked=True)"], "HTTPConnection.request(method, url, headers={})": ["request"], "HTTPConnection.request(method, url, headers={}, encode_chunked=False)": ["request", "HTTPConnection.request(method, url, headers={}, encode_chunked=True)"], "HTTPConnection.set_debuglevel(level)": ["set_debuglevel"], "HTTPConnection.set_tunnel(host, headers=None)": ["set_tunnel", "HTTPConnection.set_tunnel(host, headers=None)"], "HTTPConnection.set_tunnel(host, port=None, headers=None)": ["set_tunnel", "HTTPConnection.set_tunnel(host, port=None, headers=None)"], "HTTPCookieProcessor.cookiejar": ["HTTPCookieProcessor.cookiejar"], "HTTPDigestAuthHandler.http_error_401(req, fp, code, msg, hdrs)": ["http_error_401"], "HTTPErrorProcessor.http_response(request, response)": ["http_response"], "HTTPErrorProcessor.https_response(request, response)": ["https_response"], "HTTPHandler.http_open(req)": ["http_open"], "HTTPPasswordMgr.add_password(realm, uri, user, passwd)": ["add_password"], "HTTPPasswordMgr.find_user_password(realm, authuri)": ["find_user_password"], "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd)": ["add_password"], "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd, is_authenticated=False)": ["add_password", "HTTPPasswordMgrWithPriorAuth.add_password(realm, uri, user, passwd, is_authenticated=True)"], "HTTPPasswordMgrWithPriorAuth.is_authenticated(self, authuri)": ["is_authenticated"], "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri)": ["update_authenticated"], "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=False)": ["update_authenticated", "HTTPPasswordMgrWithPriorAuth.update_authenticated(self, uri, is_authenticated=True)"], "HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)": ["http_error_301"], "HTTPRedirectHandler.http_error_307(req, fp, code, msg, hdrs)": ["http_error_307"], "HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)": ["redirect_request"], "HTTPResponse.closed": ["HTTPResponse.closed"], "HTTPResponse.debuglevel": ["HTTPResponse.debuglevel"], "HTTPResponse.getheader(name)": ["getheader"], "HTTPResponse.getheaders()": ["getheaders"], "HTTPResponse.msg": ["HTTPResponse.msg"], "HTTPResponse.read()": ["read"], "HTTPResponse.read(amt)": ["read"], "HTTPResponse.readinto(b)": ["readinto"], "HTTPResponse.reason": ["HTTPResponse.reason"], "HTTPResponse.status": ["HTTPResponse.status"], "HTTPResponse.version": ["HTTPResponse.version"], "HTTPSHandler.https_open(req)": ["https_open"], "IMAP4.PROTOCOL_VERSION": ["IMAP4.PROTOCOL_VERSION"], "IMAP4.abort": ["IMAP4.abort"], "IMAP4.append(mailbox, flags, date_time, message)": ["append"], "IMAP4.authenticate(mechanism, authobject)": ["authenticate"], "IMAP4.check()": ["check"], "IMAP4.close()": ["close"], "IMAP4.copy(message_set, new_mailbox)": ["copy"], "IMAP4.create(mailbox)": ["create"], "IMAP4.debug": ["IMAP4.debug"], "IMAP4.delete(mailbox)": ["delete"], "IMAP4.deleteacl(mailbox, who)": ["deleteacl"], "IMAP4.enable(capability)": ["enable"], "IMAP4.error": ["IMAP4.error"], "IMAP4.expunge()": ["expunge"], "IMAP4.fetch(message_set, message_parts)": ["fetch"], "IMAP4.getannotation(mailbox, entry, attribute)": ["getannotation"], "IMAP4.getquota(root)": ["getquota"], "IMAP4.getquotaroot(mailbox)": ["getquotaroot"], "IMAP4.list()": ["list"], "IMAP4.list(directory)": ["list"], "IMAP4.list(directory, pattern)": ["list"], "IMAP4.login(user, password)": ["login"], "IMAP4.login_cram_md5(user, password)": ["login_cram_md5"], "IMAP4.logout()": ["logout"], "IMAP4.lsub()": ["lsub"], "IMAP4.lsub(directory='\"\"')": ["lsub", "IMAP4.lsub(directory=2.0)"], "IMAP4.myrights(mailbox)": ["myrights"], "IMAP4.namespace()": ["namespace"], "IMAP4.noop()": ["noop"], "IMAP4.open(host, port)": ["open"], "IMAP4.partial(message_num, message_part, start, length)": ["partial"], "IMAP4.proxyauth(user)": ["proxyauth"], "IMAP4.read(size)": ["read"], "IMAP4.readline()": ["readline"], "IMAP4.readonly": ["IMAP4.readonly"], "IMAP4.recent()": ["recent"], "IMAP4.rename(oldmailbox, newmailbox)": ["rename"], "IMAP4.response(code)": ["response"], "IMAP4.search(charset)": ["search"], "IMAP4.search(charset, criterion)": ["search"], "IMAP4.select()": ["select"], "IMAP4.select(mailbox='INBOX')": ["select", "IMAP4.select(mailbox=5)"], "IMAP4.select(mailbox='INBOX', readonly=False)": ["select", "IMAP4.select(mailbox='INBOX', readonly=True)", "IMAP4.select(mailbox=5, readonly=False)"], "IMAP4.select(readonly=False)": ["select", "IMAP4.select(readonly=True)"], "IMAP4.send(data)": ["send"], "IMAP4.setacl(mailbox, who, what)": ["setacl"], "IMAP4.setannotation(mailbox, entry)": ["setannotation"], "IMAP4.setannotation(mailbox, entry, attribute)": ["setannotation"], "IMAP4.setquota(root, limits)": ["setquota"], "IMAP4.shutdown()": ["shutdown"], "IMAP4.socket()": ["socket"], "IMAP4.sort(sort_criteria, charset)": ["sort"], "IMAP4.sort(sort_criteria, charset, search_criterion)": ["sort"], "IMAP4.starttls()": ["starttls"], "IMAP4.starttls(ssl_context=None)": ["starttls", "IMAP4.starttls(ssl_context=None)"], "IMAP4.status(mailbox, names)": ["status"], "IMAP4.store(message_set, command, flag_list)": ["store"], "IMAP4.subscribe(mailbox)": ["subscribe"], "IMAP4.thread(threading_algorithm, charset)": ["thread"], "IMAP4.thread(threading_algorithm, charset, search_criterion)": ["thread"], "IMAP4.uid(command)": ["uid"], "IMAP4.uid(command, arg)": ["uid"], "IMAP4.unsubscribe(mailbox)": ["unsubscribe"], "IMAP4.utf8_enabled": ["IMAP4.utf8_enabled"], "IMAP4.xatom()": ["xatom"], "IMAP4.xatom(name)": ["xatom"], "ImportError": ["ImportError"], "ImportWarning": ["ImportWarning"], "IncrementalParser.close()": ["close"], "IncrementalParser.feed(data)": ["feed"], "IncrementalParser.reset()": ["reset"], "IndentationError": ["IndentationError"], "IndexError": ["IndexError"], "InputSource.getByteStream()": ["getByteStream"], "InputSource.getCharacterStream()": ["getCharacterStream"], "InputSource.getEncoding()": ["getEncoding"], "InputSource.getPublicId()": ["getPublicId"], "InputSource.setCharacterStream(charfile)": ["setCharacterStream"], "InputSource.setEncoding(encoding)": ["setEncoding"], "InputSource.setPublicId(id)": ["setPublicId"], "InteractiveConsole.interact()": ["interact"], "InteractiveConsole.interact(banner=None)": ["interact", "InteractiveConsole.interact(banner=None)"], "InteractiveConsole.interact(banner=None, exitmsg=None)": ["interact", "InteractiveConsole.interact(banner=None, exitmsg=None)"], "InteractiveConsole.interact(exitmsg=None)": ["interact", "InteractiveConsole.interact(exitmsg=None)"], "InteractiveConsole.push(line)": ["push"], "InteractiveConsole.raw_input()": ["raw_input"], "InteractiveConsole.raw_input(prompt=\"\")": ["raw_input", "InteractiveConsole.raw_input(prompt=0)"], "InteractiveConsole.resetbuffer()": ["resetbuffer"], "InteractiveInterpreter.runcode(code)": ["runcode"], "InteractiveInterpreter.runsource(source)": ["runsource"], "InteractiveInterpreter.runsource(source, filename=\"<input>\")": ["runsource", "InteractiveInterpreter.runsource(source, filename=7)"], "InteractiveInterpreter.runsource(source, filename=\"<input>\", symbol=\"single\")": ["runsource", "InteractiveInterpreter.runsource(source, filename=7.0, symbol=6)"], "InteractiveInterpreter.runsource(source, symbol=\"single\")": ["runsource", "InteractiveInterpreter.runsource(source, symbol=6.0)"], "InteractiveInterpreter.showsyntaxerror()": ["showsyntaxerror"], "InteractiveInterpreter.showsyntaxerror(filename=None)": ["showsyntaxerror", "InteractiveInterpreter.showsyntaxerror(filename=None)"], "InteractiveInterpreter.showtraceback()": ["showtraceback"], "InteractiveInterpreter.write(data)": ["write"], "IsADirectoryError": ["IsADirectoryError"], "KeyError": ["KeyError"], "KeyboardInterrupt": ["KeyboardInterrupt"], "Locator.getColumnNumber()": ["getColumnNumber"], "Locator.getPublicId()": ["getPublicId"], "Locator.getSystemId()": ["getSystemId"], "LookupError": ["LookupError"], "MON_1 ... MON_12": [], "Match.__getitem__(g)": ["__getitem__"], "Match.end()": ["end"], "Match.end(group)": ["end"], "Match.endpos": ["Match.endpos"], "Match.expand(template)": ["expand"], "Match.group()": ["group"], "Match.group(group1)": ["group"], "Match.groupdict()": ["groupdict"], "Match.groupdict(default=None)": ["groupdict", "Match.groupdict(default=None)"], "Match.groups()": ["groups"], "Match.groups(default=None)": ["groups", "Match.groups(default=None)"], "Match.lastindex": ["Match.lastindex"], "Match.pos": ["Match.pos"], "Match.re": ["Match.re"], "Match.span()": ["span"], "Match.span(group)": ["span"], "Match.start(group)": ["start"], "Match.string": ["Match.string"], "MemoryError": ["MemoryError"], "ModuleNotFoundError": ["ModuleNotFoundError"], "Morsel.OutputString()": ["OutputString"], "Morsel.OutputString(attrs=None)": ["OutputString", "Morsel.OutputString(attrs=None)"], "Morsel.coded_value": ["Morsel.coded_value"], "Morsel.isReservedKey(K)": ["isReservedKey"], "Morsel.js_output(attrs=None)": ["js_output", "Morsel.js_output(attrs=None)"], "Morsel.key": ["Morsel.key"], "Morsel.output(attrs=None)": ["output", "Morsel.output(attrs=None)"], "Morsel.output(attrs=None, header='Set-Cookie:')": ["output", "Morsel.output(attrs=None, header='Set-Cookie:')", "Morsel.output(attrs=None, header=11)"], "Morsel.output(header='Set-Cookie:')": ["output", "Morsel.output(header=11)"], "Morsel.set(key, value, coded_value)": ["set"], "Morsel.setdefault(key)": ["setdefault"], "Morsel.setdefault(key, value=None)": ["setdefault", "Morsel.setdefault(key, value=None)"], "Morsel.update(values)": ["update"], "NNTP.article(message_spec=None, file=None)": ["article", "NNTP.article(message_spec=None, file=None)"], "NNTP.body()": ["body"], "NNTP.body(file=None)": ["body", "NNTP.body(file=None)"], "NNTP.body(message_spec=None, file=None)": ["body", "NNTP.body(message_spec=None, file=None)"], "NNTP.date()": ["date"], "NNTP.description(group)": ["description"], "NNTP.descriptions(grouppattern)": ["descriptions"], "NNTP.getcapabilities()": ["getcapabilities"], "NNTP.getwelcome()": ["getwelcome"], "NNTP.group(name)": ["group"], "NNTP.head()": ["head"], "NNTP.head(file=None)": ["head", "NNTP.head(file=None)"], "NNTP.head(message_spec=None, file=None)": ["head", "NNTP.head(message_spec=None, file=None)"], "NNTP.help()": ["help"], "NNTP.help(file=None)": ["help", "NNTP.help(file=None)"], "NNTP.ihave(message_id, data)": ["ihave"], "NNTP.last()": ["last"], "NNTP.list()": ["list"], "NNTP.list(file=None)": ["list", "NNTP.list(file=None)"], "NNTP.list(group_pattern=None)": ["list", "NNTP.list(group_pattern=None)"], "NNTP.list(group_pattern=None, file=None)": ["list", "NNTP.list(group_pattern=None, file=None)"], "NNTP.login()": ["login"], "NNTP.login(password=None)": ["login", "NNTP.login(password=None)"], "NNTP.login(usenetrc=True)": ["login", "NNTP.login(usenetrc=False)"], "NNTP.login(user=None)": ["login", "NNTP.login(user=None)"], "NNTP.login(user=None, password=None)": ["login", "NNTP.login(user=None, password=None)"], "NNTP.login(user=None, password=None, usenetrc=True)": ["login", "NNTP.login(user=None, password=None, usenetrc=False)"], "NNTP.login(user=None, usenetrc=True)": ["login", "NNTP.login(user=None, usenetrc=False)"], "NNTP.newgroups(date)": ["newgroups"], "NNTP.newgroups(date, file=None)": ["newgroups", "NNTP.newgroups(date, file=None)"], "NNTP.newnews(group, date)": ["newnews"], "NNTP.newnews(group, date, file=None)": ["newnews", "NNTP.newnews(group, date, file=None)"], "NNTP.next()": ["next"], "NNTP.nntp_version": ["NNTP.nntp_version"], "NNTP.over(message_spec)": ["over"], "NNTP.over(message_spec, file=None)": ["over", "NNTP.over(message_spec, file=None)"], "NNTP.post(data)": ["post"], "NNTP.quit()": ["quit"], "NNTP.set_debuglevel(level)": ["set_debuglevel"], "NNTP.starttls()": ["starttls"], "NNTP.starttls(context=None)": ["starttls", "NNTP.starttls(context=None)"], "NNTP.stat()": ["stat"], "NNTP.xhdr(hdr, str)": ["xhdr"], "NNTP.xhdr(hdr, str, file=None)": ["xhdr", "NNTP.xhdr(hdr, str, file=None)"], "NNTP.xover(start, end)": ["xover"], "NNTP.xover(start, end, file=None)": ["xover", "NNTP.xover(start, end, file=None)"], "NNTP.xpath(id)": ["xpath"], "NameError": ["NameError"], "NamedNodeMap.item(index)": ["item"], "NamedNodeMap.length": ["NamedNodeMap.length"], "Node.appendChild(newChild)": ["appendChild"], "Node.attributes": ["Node.attributes"], "Node.childNodes": ["Node.childNodes"], "Node.cloneNode(deep)": ["cloneNode"], "Node.firstChild": ["Node.firstChild"], "Node.hasAttributes()": ["hasAttributes"], "Node.hasChildNodes()": ["hasChildNodes"], "Node.isSameNode(other)": ["isSameNode"], "Node.localName": ["Node.localName"], "Node.nextSibling": ["Node.nextSibling"], "Node.nodeName": ["Node.nodeName"], "Node.nodeType": ["Node.nodeType"], "Node.normalize()": ["normalize"], "Node.prefix": ["Node.prefix"], "Node.removeChild(oldChild)": ["removeChild"], "Node.replaceChild(newChild, oldChild)": ["replaceChild"], "Node.toprettyxml()": ["toprettyxml"], "Node.toprettyxml(encoding=None)": ["toprettyxml", "Node.toprettyxml(encoding=None)"], "Node.toprettyxml(indent=\"\\t\")": ["toprettyxml", "Node.toprettyxml(indent=1)"], "Node.toprettyxml(indent=\"\\t\", encoding=None)": ["toprettyxml", "Node.toprettyxml(indent='\\t', encoding=None)", "Node.toprettyxml(indent=1, encoding=None)"], "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\")": ["toprettyxml", "Node.toprettyxml(indent=1.0, newl=1.0)"], "Node.toprettyxml(indent=\"\\t\", newl=\"\\n\", encoding=None)": ["toprettyxml", "Node.toprettyxml(indent='\\t', newl='\\n', encoding=None)", "Node.toprettyxml(indent=1.0, newl=1.0, encoding=None)"], "Node.toprettyxml(newl=\"\\n\")": ["toprettyxml", "Node.toprettyxml(newl=1.0)"], "Node.toprettyxml(newl=\"\\n\", encoding=None)": ["toprettyxml", "Node.toprettyxml(newl='\\n', encoding=None)", "Node.toprettyxml(newl=1, encoding=None)"], "Node.toxml()": ["toxml"], "Node.toxml(encoding=None)": ["toxml", "Node.toxml(encoding=None)"], "Node.unlink()": ["unlink"], "Node.writexml(writer)": ["writexml"], "Node.writexml(writer, indent=\"\")": ["writexml", "Node.writexml(writer, indent=0)"], "Node.writexml(writer, indent=\"\", addindent=\"\", newl=\"\")": ["writexml", "Node.writexml(writer, indent=0.0, addindent=0, newl=0)"], "Node.writexml(writer, newl=\"\")": ["writexml", "Node.writexml(writer, newl=0)"], "NodeList.item(i)": ["item"], "NodeList.length": ["NodeList.length"], "None": ["None"], "NotADirectoryError": ["NotADirectoryError"], "NotImplemented": ["NotImplemented"], "NotImplementedError": ["NotImplementedError"], "OSError()": ["OSError"], "OSError(arg)": ["OSError"], "OSError(errno, strerror)": ["OSError"], "OSError(errno, strerror, filename)": ["OSError"], "OSError(errno, strerror, filename, winerror)": ["OSError"], "OpenerDirector.add_handler(handler)": ["add_handler"], "OpenerDirector.error(proto, *args)": ["error"], "OpenerDirector.open(url)": ["open"], "OpenerDirector.open(url, data=None)": ["open", "OpenerDirector.open(url, data=None)"], "OpenerDirector.open(url, timeout)": ["open"], "OpenerDirector.open(url, timeout, data=None)": ["open", "OpenerDirector.open(url, timeout, data=None)"], "Option.ACTIONS": ["Option.ACTIONS"], "Option.ALWAYS_TYPED_ACTIONS": ["Option.ALWAYS_TYPED_ACTIONS"], "Option.STORE_ACTIONS": ["Option.STORE_ACTIONS"], "Option.TYPED_ACTIONS": ["Option.TYPED_ACTIONS"], "Option.TYPES": ["Option.TYPES"], "Option.TYPE_CHECKER": ["Option.TYPE_CHECKER"], "Option.action": ["Option.action"], "Option.callback": ["Option.callback"], "Option.callback_args": ["Option.callback_args"], "Option.callback_kwargs": ["Option.callback_kwargs"], "Option.choices": ["Option.choices"], "Option.const": ["Option.const"], "Option.default": ["Option.default"], "Option.dest": ["Option.dest"], "Option.help": ["Option.help"], "Option.nargs": ["Option.nargs"], "OptionParser.add_option(*opt_str)": ["add_option"], "OptionParser.add_option(*opt_str, attr=value)": ["add_option"], "OptionParser.add_option(option)": ["add_option"], "OptionParser.disable_interspersed_args()": ["disable_interspersed_args"], "OptionParser.enable_interspersed_args()": ["enable_interspersed_args"], "OptionParser.get_option(opt_str)": ["get_option"], "OptionParser.get_option_group(opt_str)": ["get_option_group"], "OptionParser.get_usage()": ["get_usage"], "OptionParser.get_version()": ["get_version"], "OptionParser.has_option(opt_str)": ["has_option"], "OptionParser.print_usage()": ["print_usage"], "OptionParser.print_usage(file=None)": ["print_usage", "OptionParser.print_usage(file=None)"], "OptionParser.print_version()": ["print_version"], "OptionParser.print_version(file=None)": ["print_version", "OptionParser.print_version(file=None)"], "OptionParser.remove_option(opt_str)": ["remove_option"], "OptionParser.set_defaults()": ["set_defaults"], "OptionParser.set_defaults(dest=value)": ["set_defaults"], "OptionParser.set_usage(usage)": ["set_usage"], "OverflowError": ["OverflowError"], "POP3.apop(user, secret)": ["apop"], "POP3.capa()": ["capa"], "POP3.dele(which)": ["dele"], "POP3.getwelcome()": ["getwelcome"], "POP3.list()": ["list"], "POP3.list(which)": ["list"], "POP3.noop()": ["noop"], "POP3.pass_(password)": ["pass_"], "POP3.quit()": ["quit"], "POP3.retr(which)": ["retr"], "POP3.rpop(user)": ["rpop"], "POP3.rset()": ["rset"], "POP3.stat()": ["stat"], "POP3.stls()": ["stls"], "POP3.top(which, howmuch)": ["top"], "POP3.uidl()": ["uidl"], "POP3.uidl(which=None)": ["uidl", "POP3.uidl(which=None)"], "POP3.user(username)": ["user"], "POP3.utf8()": ["utf8"], "Packer.get_buffer()": ["get_buffer"], "Packer.pack_array(list, pack_item)": ["pack_array"], "Packer.pack_bytes(bytes)": ["pack_bytes"], "Packer.pack_double(value)": ["pack_double"], "Packer.pack_farray(n, array, pack_item)": ["pack_farray"], "Packer.pack_fopaque(n, data)": ["pack_fopaque"], "Packer.pack_fstring(n, s)": ["pack_fstring"], "Packer.pack_list(list, pack_item)": ["pack_list"], "Packer.pack_opaque(data)": ["pack_opaque"], "Packer.pack_string(s)": ["pack_string"], "Packer.reset()": ["reset"], "Panel.above()": ["above"], "Panel.below()": ["below"], "Panel.bottom()": ["bottom"], "Panel.hidden()": ["hidden"], "Panel.hide()": ["hide"], "Panel.move(y, x)": ["move"], "Panel.replace(win)": ["replace"], "Panel.set_userptr(obj)": ["set_userptr"], "Panel.show()": ["show"], "Path.chmod(mode)": ["chmod"], "Path.exists()": ["exists"], "Path.glob(pattern)": ["glob"], "Path.home()": ["home"], "Path.is_block_device()": ["is_block_device"], "Path.is_char_device()": ["is_char_device"], "Path.is_dir()": ["is_dir"], "Path.is_fifo()": ["is_fifo"], "Path.is_file()": ["is_file"], "Path.iterdir()": ["iterdir"], "Path.lchmod(mode)": ["lchmod"], "Path.lstat()": ["lstat"], "Path.mkdir(exist_ok=False)": ["mkdir", "Path.mkdir(exist_ok=True)"], "Path.mkdir(parents=False)": ["mkdir", "Path.mkdir(parents=True)"], "Path.open()": ["open"], "Path.open(encoding=None)": ["open", "Path.open(encoding=None)"], "Path.open(mode='r')": ["open", "Path.open(mode=1)"], "Path.open(mode='r', buffering=-1)": ["open", "Path.open(mode=1, buffering=(- '1'))"], "Path.open(mode='r', encoding=None)": ["open", "Path.open(mode='r', encoding=None)", "Path.open(mode=1, encoding=None)"], "Path.open(newline=None)": ["open", "Path.open(newline=None)"], "Path.owner()": ["owner"], "Path.read_bytes()": ["read_bytes"], "Path.read_text()": ["read_text"], "Path.read_text(encoding=None)": ["read_text", "Path.read_text(encoding=None)"], "Path.read_text(errors=None)": ["read_text", "Path.read_text(errors=None)"], "Path.rename(target)": ["rename"], "Path.replace(target)": ["replace"], "Path.resolve()": ["resolve"], "Path.resolve(strict=False)": ["resolve", "Path.resolve(strict=True)"], "Path.rglob(pattern)": ["rglob"], "Path.rmdir()": ["rmdir"], "Path.samefile(other_path)": ["samefile"], "Path.stat()": ["stat"], "Path.symlink_to(target)": ["symlink_to"], "Path.symlink_to(target, target_is_directory=False)": ["symlink_to", "Path.symlink_to(target, target_is_directory=True)"], "Path.touch()": ["touch"], "Path.touch(exist_ok=True)": ["touch", "Path.touch(exist_ok=False)"], "Path.touch(mode=0o666)": ["touch", "Path.touch(mode='438')"], "Path.touch(mode=0o666, exist_ok=True)": ["touch", "Path.touch(mode=438, exist_ok=False)", "Path.touch(mode='438', exist_ok=True)"], "Path.unlink()": ["unlink"], "Path.write_bytes(data)": ["write_bytes"], "Path.write_text(data)": ["write_text"], "Path.write_text(data, encoding=None)": ["write_text", "Path.write_text(data, encoding=None)"], "Path.write_text(data, encoding=None, errors=None)": ["write_text", "Path.write_text(data, encoding=None, errors=None)"], "Pattern.findall(string)": ["findall"], "Pattern.findall(string, pos)": ["findall"], "Pattern.findall(string, pos, endpos)": ["findall"], "Pattern.finditer(string, pos)": ["finditer"], "Pattern.finditer(string, pos, endpos)": ["finditer"], "Pattern.flags": ["Pattern.flags"], "Pattern.fullmatch(string)": ["fullmatch"], "Pattern.fullmatch(string, pos)": ["fullmatch"], "Pattern.fullmatch(string, pos, endpos)": ["fullmatch"], "Pattern.groupindex": ["Pattern.groupindex"], "Pattern.groups": ["Pattern.groups"], "Pattern.match(string)": ["match"], "Pattern.match(string, pos)": ["match"], "Pattern.match(string, pos, endpos)": ["match"], "Pattern.pattern": ["Pattern.pattern"], "Pattern.search(string)": ["search"], "Pattern.search(string, pos)": ["search"], "Pattern.search(string, pos, endpos)": ["search"], "Pattern.split(string)": ["split"], "Pattern.split(string, maxsplit=0)": ["split", "Pattern.split(string, maxsplit='0')"], "Pattern.sub(repl, string)": ["sub"], "Pattern.sub(repl, string, count=0)": ["sub", "Pattern.sub(repl, string, count='0')"], "Pattern.subn(repl, string)": ["subn"], "Pattern.subn(repl, string, count=0)": ["subn", "Pattern.subn(repl, string, count='0')"], "PendingDeprecationWarning": ["PendingDeprecationWarning"], "PermissionError": ["PermissionError"], "Popen.args": ["Popen.args"], "Popen.communicate()": ["communicate"], "Popen.communicate(input=None)": ["communicate", "Popen.communicate(input=None)"], "Popen.communicate(input=None, timeout=None)": ["communicate", "Popen.communicate(input=None, timeout=None)"], "Popen.pid": ["Popen.pid"], "Popen.poll()": ["poll"], "Popen.send_signal(signal)": ["send_signal"], "Popen.stdin": ["Popen.stdin"], "Popen.terminate()": ["terminate"], "Popen.wait()": ["wait"], "Popen.wait(timeout=None)": ["wait", "Popen.wait(timeout=None)"], "PrettyPrinter.format(object, context, maxlevels, level)": ["format"], "PrettyPrinter.isreadable(object)": ["isreadable"], "PrettyPrinter.pprint(object)": ["pprint"], "ProcessingInstruction.data": ["ProcessingInstruction.data"], "ProcessingInstruction.target": ["ProcessingInstruction.target"], "Protocol.data_received(data)": ["data_received"], "Protocol.eof_received()": ["eof_received"], "ProxyBasicAuthHandler.http_error_407(req, fp, code, msg, hdrs)": ["http_error_407"], "PurePath.anchor": ["PurePath.anchor"], "PurePath.as_posix()": ["as_posix"], "PurePath.as_uri()": ["as_uri"], "PurePath.drive": ["PurePath.drive"], "PurePath.is_absolute()": ["is_absolute"], "PurePath.joinpath(*other)": ["joinpath"], "PurePath.match(pattern)": ["match"], "PurePath.name": ["PurePath.name"], "PurePath.parent": ["PurePath.parent"], "PurePath.parents": ["PurePath.parents"], "PurePath.parts": ["PurePath.parts"], "PurePath.relative_to(*other)": ["relative_to"], "PurePath.root": ["PurePath.root"], "PurePath.stem": ["PurePath.stem"], "PurePath.suffix": ["PurePath.suffix"], "PurePath.suffixes": ["PurePath.suffixes"], "PurePath.with_name(name)": ["with_name"], "PurePath.with_suffix(suffix)": ["with_suffix"], "Purpose.SERVER_AUTH": ["Purpose.SERVER_AUTH"], "PyDLL._handle": ["PyDLL._handle"], "PyDLL._name": ["PyDLL._name"], "Queue.get()": ["get"], "Queue.get(block=True)": ["get", "Queue.get(block=False)"], "Queue.get(block=True, timeout=None)": ["get", "Queue.get(block=False, timeout=None)"], "Queue.get(timeout=None)": ["get", "Queue.get(timeout=None)"], "Queue.get_nowait()": ["get_nowait"], "Queue.join()": ["join"], "Queue.put(item)": ["put"], "Queue.put(item, block=True)": ["put", "Queue.put(item, block=False)"], "Queue.put(item, block=True, timeout=None)": ["put", "Queue.put(item, block=False, timeout=None)"], "Queue.put_nowait(item)": ["put_nowait"], "Queue.qsize()": ["qsize"], "Queue.task_done()": ["task_done"], "ReadTransport.is_reading()": ["is_reading"], "ReadTransport.pause_reading()": ["pause_reading"], "ReadTransport.resume_reading()": ["resume_reading"], "Record.ClearData()": ["ClearData"], "Record.GetFieldCount()": ["GetFieldCount"], "Record.GetInteger(field)": ["GetInteger"], "Record.GetString(field)": ["GetString"], "Record.SetInteger(field, value)": ["SetInteger"], "Record.SetStream(field, value)": ["SetStream"], "Record.SetString(field, value)": ["SetString"], "RecursionError": ["RecursionError"], "ReferenceError": ["ReferenceError"], "Repr.maxdict": ["Repr.maxdict"], "Repr.maxfrozenset": ["Repr.maxfrozenset"], "Repr.maxlevel": ["Repr.maxlevel"], "Repr.maxlist": ["Repr.maxlist"], "Repr.maxlong": ["Repr.maxlong"], "Repr.maxother": ["Repr.maxother"], "Repr.maxset": ["Repr.maxset"], "Repr.maxstring": ["Repr.maxstring"], "Repr.repr1(obj, level)": ["repr1"], "Repr.repr_TYPE(obj, level)": ["repr_TYPE"], "Request.add_header(key, val)": ["add_header"], "Request.add_unredirected_header(key, header)": ["add_unredirected_header"], "Request.data": ["Request.data"], "Request.full_url": ["Request.full_url"], "Request.get_full_url()": ["get_full_url"], "Request.get_header(header_name, default=None)": ["get_header", "Request.get_header(header_name, default=None)"], "Request.get_method()": ["get_method"], "Request.has_header(header)": ["has_header"], "Request.header_items()": ["header_items"], "Request.host": ["Request.host"], "Request.method": ["Request.method"], "Request.origin_req_host": ["Request.origin_req_host"], "Request.remove_header(header)": ["remove_header"], "Request.set_proxy(host, type)": ["set_proxy"], "Request.type": ["Request.type"], "ResourceWarning": ["ResourceWarning"], "RuntimeError": ["RuntimeError"], "RuntimeWarning": ["RuntimeWarning"], "SIG*": [], "SMTP.auth(mechanism, authobject)": ["auth"], "SMTP.auth(mechanism, authobject, initial_response_ok=True)": ["auth", "SMTP.auth(mechanism, authobject, initial_response_ok=False)"], "SMTP.connect()": ["connect"], "SMTP.connect(host='localhost')": ["connect", "SMTP.connect(host=9.0)"], "SMTP.connect(host='localhost', port=0)": ["connect", "SMTP.connect(host=9.0, port='0')"], "SMTP.connect(port=0)": ["connect", "SMTP.connect(port='0')"], "SMTP.docmd(cmd)": ["docmd"], "SMTP.docmd(cmd, args='')": ["docmd", "SMTP.docmd(cmd, args=0)"], "SMTP.ehlo(name='')": ["ehlo", "SMTP.ehlo(name=0)"], "SMTP.has_extn(name)": ["has_extn"], "SMTP.helo()": ["helo"], "SMTP.login(user, password)": ["login"], "SMTP.login(user, password, initial_response_ok=True)": ["login", "SMTP.login(user, password, initial_response_ok=False)"], "SMTP.quit()": ["quit"], "SMTP.send_message(msg, rcpt_options=())": ["send_message"], "SMTP.sendmail(from_addr, to_addrs, msg)": ["sendmail"], "SMTP.sendmail(from_addr, to_addrs, msg, mail_options=())": ["sendmail"], "SMTP.set_debuglevel(level)": ["set_debuglevel"], "SMTP.starttls()": ["starttls"], "SMTP.starttls(certfile=None)": ["starttls", "SMTP.starttls(certfile=None)"], "SMTP.starttls(certfile=None, context=None)": ["starttls", "SMTP.starttls(certfile=None, context=None)"], "SMTP.starttls(keyfile=None)": ["starttls", "SMTP.starttls(keyfile=None)"], "SMTP.starttls(keyfile=None, certfile=None)": ["starttls", "SMTP.starttls(keyfile=None, certfile=None)"], "SMTP.starttls(keyfile=None, certfile=None, context=None)": ["starttls", "SMTP.starttls(keyfile=None, certfile=None, context=None)"], "SMTP.starttls(keyfile=None, context=None)": ["starttls", "SMTP.starttls(keyfile=None, context=None)"], "SMTP.verify(address)": ["verify"], "SO_VM*": [], "SSLContext.cert_store_stats()": ["cert_store_stats"], "SSLContext.get_ca_certs()": ["get_ca_certs"], "SSLContext.get_ca_certs(binary_form=False)": ["get_ca_certs", "SSLContext.get_ca_certs(binary_form=True)"], "SSLContext.get_ciphers()": ["get_ciphers"], "SSLContext.hostname_checks_common_name": ["SSLContext.hostname_checks_common_name"], "SSLContext.load_cert_chain(certfile, keyfile=None)": ["load_cert_chain", "SSLContext.load_cert_chain(certfile, keyfile=None)"], "SSLContext.load_default_certs()": ["load_default_certs"], "SSLContext.load_default_certs(purpose=Purpose.SERVER_AUTH)": ["load_default_certs"], "SSLContext.load_dh_params(dhfile)": ["load_dh_params"], "SSLContext.load_verify_locations()": ["load_verify_locations"], "SSLContext.load_verify_locations(cadata=None)": ["load_verify_locations", "SSLContext.load_verify_locations(cadata=None)"], "SSLContext.load_verify_locations(cafile=None, capath=None)": ["load_verify_locations", "SSLContext.load_verify_locations(cafile=None, capath=None)"], "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)": ["load_verify_locations", "SSLContext.load_verify_locations(cafile=None, capath=None, cadata=None)"], "SSLContext.maximum_version": ["SSLContext.maximum_version"], "SSLContext.options": ["SSLContext.options"], "SSLContext.post_handshake_auth": ["SSLContext.post_handshake_auth"], "SSLContext.protocol": ["SSLContext.protocol"], "SSLContext.session_stats()": ["session_stats"], "SSLContext.set_ciphers(ciphers)": ["set_ciphers"], "SSLContext.set_ecdh_curve(curve_name)": ["set_ecdh_curve"], "SSLContext.set_servername_callback(server_name_callback)": ["set_servername_callback"], "SSLContext.sni_callback": ["SSLContext.sni_callback"], "SSLContext.verify_flags": ["SSLContext.verify_flags"], "SSLContext.verify_mode": ["SSLContext.verify_mode"], "SSLContext.wrap_bio(incoming, outgoing)": ["wrap_bio"], "SSLContext.wrap_bio(incoming, outgoing, server_hostname=None, session=None)": ["wrap_bio", "SSLContext.wrap_bio(incoming, outgoing, server_hostname=None, session=None)"], "SSLContext.wrap_bio(incoming, outgoing, server_side=False, server_hostname=None, session=None)": ["wrap_bio", "SSLContext.wrap_bio(incoming, outgoing, server_side=True, server_hostname=None, session=None)"], "SSLContext.wrap_bio(incoming, outgoing, server_side=False, session=None)": ["wrap_bio", "SSLContext.wrap_bio(incoming, outgoing, server_side=True, session=None)"], "SSLContext.wrap_bio(incoming, outgoing, session=None)": ["wrap_bio", "SSLContext.wrap_bio(incoming, outgoing, session=None)"], "SSLContext.wrap_socket(sock)": ["wrap_socket"], "SSLContext.wrap_socket(sock, do_handshake_on_connect=True)": ["wrap_socket", "SSLContext.wrap_socket(sock, do_handshake_on_connect=False)"], "SSLContext.wrap_socket(sock, server_hostname=None)": ["wrap_socket", "SSLContext.wrap_socket(sock, server_hostname=None)"], "SSLContext.wrap_socket(sock, server_side=False)": ["wrap_socket", "SSLContext.wrap_socket(sock, server_side=True)"], "SSLContext.wrap_socket(sock, server_side=False, do_handshake_on_connect=True)": ["wrap_socket", "SSLContext.wrap_socket(sock, server_side=True, do_handshake_on_connect=False)"], "SSLContext.wrap_socket(sock, server_side=False, server_hostname=None)": ["wrap_socket", "SSLContext.wrap_socket(sock, server_side=True, server_hostname=None)"], "SSLContext.wrap_socket(sock, server_side=False, session=None)": ["wrap_socket", "SSLContext.wrap_socket(sock, server_side=True, session=None)"], "SSLContext.wrap_socket(sock, server_side=False, suppress_ragged_eofs=True)": ["wrap_socket", "SSLContext.wrap_socket(sock, server_side=True, suppress_ragged_eofs=False)"], "SSLContext.wrap_socket(sock, session=None)": ["wrap_socket", "SSLContext.wrap_socket(sock, session=None)"], "SSLContext.wrap_socket(sock, suppress_ragged_eofs=True)": ["wrap_socket", "SSLContext.wrap_socket(sock, suppress_ragged_eofs=False)"], "SSLSocket.compression()": ["compression"], "SSLSocket.do_handshake()": ["do_handshake"], "SSLSocket.get_channel_binding()": ["get_channel_binding"], "SSLSocket.get_channel_binding(cb_type=\"tls-unique\")": ["get_channel_binding", "SSLSocket.get_channel_binding(cb_type=10)"], "SSLSocket.getpeercert()": ["getpeercert"], "SSLSocket.getpeercert(binary_form=False)": ["getpeercert", "SSLSocket.getpeercert(binary_form=True)"], "SSLSocket.read()": ["read"], "SSLSocket.read(len=1024)": ["read", "SSLSocket.read(len='1024')"], "SSLSocket.read(len=1024, buffer=None)": ["read", "SSLSocket.read(len=1024, buffer=None)", "SSLSocket.read(len='1024', buffer=None)"], "SSLSocket.server_hostname": ["SSLSocket.server_hostname"], "SSLSocket.server_side": ["SSLSocket.server_side"], "SSLSocket.shared_ciphers()": ["shared_ciphers"], "SSLSocket.verify_client_post_handshake()": ["verify_client_post_handshake"], "SSLSocket.version()": ["version"], "SSLSocket.write(buf)": ["write"], "ST.compile(filename='<syntax-tree>')": ["compile", "ST.compile(filename=13)"], "ScrolledText.frame": ["ScrolledText.frame"], "ScrolledText.vbar": ["ScrolledText.vbar"], "ServerProxy.system.listMethods()": ["listMethods"], "ServerProxy.system.methodSignature(name)": ["methodSignature"], "Shelf.close()": ["close"], "Shelf.sync()": ["sync"], "SimpleQueue.get()": ["get"], "SimpleQueue.get(block=True)": ["get", "SimpleQueue.get(block=False)"], "SimpleQueue.get_nowait()": ["get_nowait"], "SimpleQueue.put(item)": ["put"], "SimpleQueue.put(item, block=True)": ["put", "SimpleQueue.put(item, block=False)"], "SimpleQueue.put_nowait(item)": ["put_nowait"], "SimpleQueue.qsize()": ["qsize"], "SimpleXMLRPCRequestHandler.rpc_paths": ["SimpleXMLRPCRequestHandler.rpc_paths"], "SimpleXMLRPCServer.register_function()": ["register_function"], "SimpleXMLRPCServer.register_function(function=None)": ["register_function", "SimpleXMLRPCServer.register_function(function=None)"], "SimpleXMLRPCServer.register_instance(instance)": ["register_instance"], "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=False)": ["register_instance", "SimpleXMLRPCServer.register_instance(instance, allow_dotted_names=True)"], "SimpleXMLRPCServer.register_introspection_functions()": ["register_introspection_functions"], "SimpleXMLRPCServer.register_multicall_functions()": ["register_multicall_functions"], "StopIteration": ["StopIteration"], "SubprocessProtocol.pipe_connection_lost(fd, exc)": ["pipe_connection_lost"], "SubprocessProtocol.pipe_data_received(fd, data)": ["pipe_data_received"], "SubprocessProtocol.process_exited()": ["process_exited"], "SubprocessTransport.close()": ["close"], "SubprocessTransport.get_pid()": ["get_pid"], "SubprocessTransport.get_pipe_transport(fd)": ["get_pipe_transport"], "SubprocessTransport.get_returncode()": ["get_returncode"], "SubprocessTransport.kill()": ["kill"], "SubprocessTransport.send_signal(signal)": ["send_signal"], "SubprocessTransport.terminate()": ["terminate"], "SummaryInformation.GetProperty(field)": ["GetProperty"], "SummaryInformation.GetPropertyCount()": ["GetPropertyCount"], "SummaryInformation.Persist()": ["Persist"], "SummaryInformation.SetProperty(field, value)": ["SetProperty"], "SyntaxError": ["SyntaxError"], "SyntaxWarning": ["SyntaxWarning"], "SystemError": ["SystemError"], "SystemExit": ["SystemExit"], "TIPC_*": [], "TLSVersion.MAXIMUM_SUPPORTED": ["TLSVersion.MAXIMUM_SUPPORTED"], "TLSVersion.TLSv1_3": ["TLSVersion.TLSv1_3"], "TabError": ["TabError"], "TarFile.add(name)": ["add"], "TarFile.add(name, arcname=None)": ["add", "TarFile.add(name, arcname=None)"], "TarFile.add(name, arcname=None, filter=None)": ["add", "TarFile.add(name, arcname=None, filter=None)"], "TarFile.add(name, arcname=None, recursive=True)": ["add", "TarFile.add(name, arcname=None, recursive=False)"], "TarFile.add(name, filter=None)": ["add", "TarFile.add(name, filter=None)"], "TarFile.add(name, recursive=True)": ["add", "TarFile.add(name, recursive=False)"], "TarFile.add(name, recursive=True, filter=None)": ["add", "TarFile.add(name, recursive=False, filter=None)"], "TarFile.addfile(tarinfo)": ["addfile"], "TarFile.addfile(tarinfo, fileobj=None)": ["addfile", "TarFile.addfile(tarinfo, fileobj=None)"], "TarFile.close()": ["close"], "TarFile.extract(member)": ["extract"], "TarFile.extract(member, numeric_owner=False)": ["extract", "TarFile.extract(member, numeric_owner=True)"], "TarFile.extract(member, path=\"\")": ["extract", "TarFile.extract(member, path=0)"], "TarFile.extract(member, path=\"\", numeric_owner=False)": ["extract", "TarFile.extract(member, path='', numeric_owner=True)", "TarFile.extract(member, path=0, numeric_owner=False)"], "TarFile.extract(member, path=\"\", set_attrs=True)": ["extract", "TarFile.extract(member, path='', set_attrs=False)", "TarFile.extract(member, path=0, set_attrs=True)"], "TarFile.extract(member, path=\"\", set_attrs=True, numeric_owner=False)": ["extract", "TarFile.extract(member, path='', set_attrs=False, numeric_owner=True)", "TarFile.extract(member, path=0.0, set_attrs=True, numeric_owner=False)"], "TarFile.extract(member, set_attrs=True)": ["extract", "TarFile.extract(member, set_attrs=False)"], "TarFile.extract(member, set_attrs=True, numeric_owner=False)": ["extract", "TarFile.extract(member, set_attrs=False, numeric_owner=True)"], "TarFile.extractall()": ["extractall"], "TarFile.extractall(members=None)": ["extractall", "TarFile.extractall(members=None)"], "TarFile.extractall(numeric_owner=False)": ["extractall", "TarFile.extractall(numeric_owner=True)"], "TarFile.extractall(path=\".\")": ["extractall", "TarFile.extractall(path=1.0)"], "TarFile.extractall(path=\".\", members=None)": ["extractall", "TarFile.extractall(path='.', members=None)", "TarFile.extractall(path=1.0, members=None)"], "TarFile.extractall(path=\".\", members=None, numeric_owner=False)": ["extractall", "TarFile.extractall(path='.', members=None, numeric_owner=True)", "TarFile.extractall(path=1.0, members=None, numeric_owner=False)"], "TarFile.extractall(path=\".\", numeric_owner=False)": ["extractall", "TarFile.extractall(path='.', numeric_owner=True)", "TarFile.extractall(path=1, numeric_owner=False)"], "TarFile.extractfile(member)": ["extractfile"], "TarFile.getmembers()": ["getmembers"], "TarFile.getnames()": ["getnames"], "TarFile.gettarinfo()": ["gettarinfo"], "TarFile.gettarinfo(arcname=None, fileobj=None)": ["gettarinfo", "TarFile.gettarinfo(arcname=None, fileobj=None)"], "TarFile.gettarinfo(fileobj=None)": ["gettarinfo", "TarFile.gettarinfo(fileobj=None)"], "TarFile.gettarinfo(name=None)": ["gettarinfo", "TarFile.gettarinfo(name=None)"], "TarFile.gettarinfo(name=None, arcname=None)": ["gettarinfo", "TarFile.gettarinfo(name=None, arcname=None)"], "TarFile.gettarinfo(name=None, arcname=None, fileobj=None)": ["gettarinfo", "TarFile.gettarinfo(name=None, arcname=None, fileobj=None)"], "TarFile.gettarinfo(name=None, fileobj=None)": ["gettarinfo", "TarFile.gettarinfo(name=None, fileobj=None)"], "TarFile.list()": ["list"], "TarFile.list(members=None)": ["list", "TarFile.list(members=None)"], "TarFile.list(verbose=True)": ["list", "TarFile.list(verbose=False)"], "TarFile.list(verbose=True, members=None)": ["list", "TarFile.list(verbose=False, members=None)"], "TarFile.open()": ["open"], "TarFile.pax_headers": ["TarFile.pax_headers"], "TarInfo.frombuf(buf, encoding, errors)": ["frombuf"], "TarInfo.fromtarfile(tarfile)": ["fromtarfile"], "TarInfo.gid": ["TarInfo.gid"], "TarInfo.gname": ["TarInfo.gname"], "TarInfo.isblk()": ["isblk"], "TarInfo.ischr()": ["ischr"], "TarInfo.isfile()": ["isfile"], "TarInfo.issym()": ["issym"], "TarInfo.linkname": ["TarInfo.linkname"], "TarInfo.mode": ["TarInfo.mode"], "TarInfo.mtime": ["TarInfo.mtime"], "TarInfo.pax_headers": ["TarInfo.pax_headers"], "TarInfo.size": ["TarInfo.size"], "TarInfo.tobuf()": ["tobuf"], "TarInfo.tobuf(encoding=ENCODING)": ["tobuf"], "TarInfo.tobuf(errors='surrogateescape')": ["tobuf", "TarInfo.tobuf(errors=15.0)"], "TarInfo.tobuf(format=DEFAULT_FORMAT)": ["tobuf"], "TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING)": ["tobuf"], "TarInfo.uid": ["TarInfo.uid"], "Telnet.close()": ["close"], "Telnet.expect(list)": ["expect"], "Telnet.expect(list, timeout=None)": ["expect", "Telnet.expect(list, timeout=None)"], "Telnet.interact()": ["interact"], "Telnet.msg(msg, *args)": ["msg"], "Telnet.mt_interact()": ["mt_interact"], "Telnet.open(host)": ["open"], "Telnet.open(host, port=0)": ["open", "Telnet.open(host, port='0')"], "Telnet.open(host, timeout)": ["open"], "Telnet.read_all()": ["read_all"], "Telnet.read_lazy()": ["read_lazy"], "Telnet.read_sb_data()": ["read_sb_data"], "Telnet.read_some()": ["read_some"], "Telnet.read_until(expected)": ["read_until"], "Telnet.read_until(expected, timeout=None)": ["read_until", "Telnet.read_until(expected, timeout=None)"], "Telnet.read_very_eager()": ["read_very_eager"], "Telnet.read_very_lazy()": ["read_very_lazy"], "Telnet.set_debuglevel(debuglevel)": ["set_debuglevel"], "Telnet.set_option_negotiation_callback(callback)": ["set_option_negotiation_callback"], "Telnet.write(buffer)": ["write"], "Template.append(cmd, kind)": ["append"], "Template.clone()": ["clone"], "Template.copy(infile, outfile)": ["copy"], "Template.open(file, mode)": ["open"], "Template.prepend(cmd, kind)": ["prepend"], "Template.reset()": ["reset"], "Text.data": ["Text.data"], "TimeoutError": ["TimeoutError"], "Token.MISSING": ["Token.MISSING"], "Token.old_value": ["Token.old_value"], "Token.var": ["Token.var"], "True": ["False"], "TypeError": ["TypeError"], "UUID.bytes": ["UUID.bytes"], "UUID.bytes_le": ["UUID.bytes_le"], "UUID.fields": ["UUID.fields"], "UUID.hex": ["UUID.hex"], "UUID.int": ["UUID.int"], "UUID.is_safe": ["UUID.is_safe"], "UUID.urn": ["UUID.urn"], "UUID.variant": ["UUID.variant"], "UUID.version": ["UUID.version"], "UnboundLocalError": ["UnboundLocalError"], "UnexpectedException.example": ["UnexpectedException.example"], "UnexpectedException.test": ["UnexpectedException.test"], "UnicodeDecodeError": ["UnicodeDecodeError"], "UnicodeEncodeError": ["UnicodeEncodeError"], "UnicodeError": ["UnicodeError"], "UnicodeTranslateError": ["UnicodeTranslateError"], "UnknownHandler.unknown_open()": ["unknown_open"], "Unpacker.done()": ["done"], "Unpacker.get_buffer()": ["get_buffer"], "Unpacker.get_position()": ["get_position"], "Unpacker.set_position(position)": ["set_position"], "Unpacker.unpack_array(unpack_item)": ["unpack_array"], "Unpacker.unpack_bytes()": ["unpack_bytes"], "Unpacker.unpack_double()": ["unpack_double"], "Unpacker.unpack_farray(n, unpack_item)": ["unpack_farray"], "Unpacker.unpack_float()": ["unpack_float"], "Unpacker.unpack_fopaque(n)": ["unpack_fopaque"], "Unpacker.unpack_fstring(n)": ["unpack_fstring"], "Unpacker.unpack_list(unpack_item)": ["unpack_list"], "Unpacker.unpack_opaque()": ["unpack_opaque"], "Unpacker.unpack_string()": ["unpack_string"], "UserWarning": ["UserWarning"], "VMADDR*": [], "ValueError": ["ValueError"], "View.Close()": ["Close"], "View.Execute(params)": ["Execute"], "View.GetColumnInfo(kind)": ["GetColumnInfo"], "View.Modify(kind, data)": ["Modify"], "Warning": ["Warning"], "Wave_read.close()": ["close"], "Wave_read.getframerate()": ["getframerate"], "Wave_read.getmark(id)": ["getmark"], "Wave_read.getnchannels()": ["getnchannels"], "Wave_read.getnframes()": ["getnframes"], "Wave_read.getparams()": ["getparams"], "Wave_read.getsampwidth()": ["getsampwidth"], "Wave_read.readframes(n)": ["readframes"], "Wave_read.rewind()": ["rewind"], "Wave_read.tell()": ["tell"], "Wave_write.close()": ["close"], "Wave_write.setcomptype(type, name)": ["setcomptype"], "Wave_write.setframerate(n)": ["setframerate"], "Wave_write.setnchannels(n)": ["setnchannels"], "Wave_write.setnframes(n)": ["setnframes"], "Wave_write.setsampwidth(n)": ["setsampwidth"], "Wave_write.tell()": ["tell"], "Wave_write.writeframes(data)": ["writeframes"], "Wave_write.writeframesraw(data)": ["writeframesraw"], "WeakValueDictionary.valuerefs()": ["valuerefs"], "Widget.tk.createfilehandler(file, mask, func)": ["createfilehandler"], "WindowsError": ["WindowsError"], "WriteTransport.abort()": ["abort"], "WriteTransport.get_write_buffer_limits()": ["get_write_buffer_limits"], "WriteTransport.set_write_buffer_limits(high=None)": ["set_write_buffer_limits", "WriteTransport.set_write_buffer_limits(high=None)"], "WriteTransport.set_write_buffer_limits(high=None, low=None)": ["set_write_buffer_limits", "WriteTransport.set_write_buffer_limits(high=None, low=None)"], "WriteTransport.set_write_buffer_limits(low=None)": ["set_write_buffer_limits", "WriteTransport.set_write_buffer_limits(low=None)"], "WriteTransport.write(data)": ["write"], "WriteTransport.write_eof()": ["write_eof"], "XMLReader.getFeature(featurename)": ["getFeature"], "XMLReader.getProperty(propertyname)": ["getProperty"], "XMLReader.parse(source)": ["parse"], "XMLReader.setContentHandler(handler)": ["setContentHandler"], "XMLReader.setDTDHandler(handler)": ["setDTDHandler"], "XMLReader.setLocale(locale)": ["setLocale"], "ZeroDivisionError": ["ZeroDivisionError"], "ZipFile.close()": ["close"], "ZipFile.comment": ["ZipFile.comment"], "ZipFile.debug": ["ZipFile.debug"], "ZipFile.extract(member)": ["extract"], "ZipFile.extract(member, path=None)": ["extract", "ZipFile.extract(member, path=None)"], "ZipFile.extract(member, path=None, pwd=None)": ["extract", "ZipFile.extract(member, path=None, pwd=None)"], "ZipFile.extract(member, pwd=None)": ["extract", "ZipFile.extract(member, pwd=None)"], "ZipFile.extractall()": ["extractall"], "ZipFile.extractall(members=None)": ["extractall", "ZipFile.extractall(members=None)"], "ZipFile.extractall(members=None, pwd=None)": ["extractall", "ZipFile.extractall(members=None, pwd=None)"], "ZipFile.extractall(path=None)": ["extractall", "ZipFile.extractall(path=None)"], "ZipFile.extractall(path=None, members=None)": ["extractall", "ZipFile.extractall(path=None, members=None)"], "ZipFile.extractall(path=None, members=None, pwd=None)": ["extractall", "ZipFile.extractall(path=None, members=None, pwd=None)"], "ZipFile.extractall(path=None, pwd=None)": ["extractall", "ZipFile.extractall(path=None, pwd=None)"], "ZipFile.extractall(pwd=None)": ["extractall", "ZipFile.extractall(pwd=None)"], "ZipFile.filename": ["ZipFile.filename"], "ZipFile.infolist()": ["infolist"], "ZipFile.namelist()": ["namelist"], "ZipFile.open(name)": ["open"], "ZipFile.open(name, force_zip64=False)": ["open", "ZipFile.open(name, force_zip64=True)"], "ZipFile.open(name, mode='r')": ["open", "ZipFile.open(name, mode=1.0)"], "ZipFile.open(name, mode='r', pwd=None)": ["open", "ZipFile.open(name, mode='r', pwd=None)", "ZipFile.open(name, mode=1.0, pwd=None)"], "ZipFile.open(name, pwd=None)": ["open", "ZipFile.open(name, pwd=None)"], "ZipFile.open(name, pwd=None, force_zip64=False)": ["open", "ZipFile.open(name, pwd=None, force_zip64=True)"], "ZipFile.printdir()": ["printdir"], "ZipFile.read(name, pwd=None)": ["read", "ZipFile.read(name, pwd=None)"], "ZipFile.setpassword(pwd)": ["setpassword"], "ZipFile.testzip()": ["testzip"], "ZipFile.write(filename)": ["write"], "ZipFile.write(filename, arcname=None)": ["write", "ZipFile.write(filename, arcname=None)"], "ZipFile.writestr(zinfo_or_arcname, data)": ["writestr"], "ZipFile.writestr(zinfo_or_arcname, data, compresslevel=None)": ["writestr", "ZipFile.writestr(zinfo_or_arcname, data, compresslevel=None)"], "ZipInfo.CRC": ["ZipInfo.CRC"], "ZipInfo.comment": ["ZipInfo.comment"], "ZipInfo.compress_size": ["ZipInfo.compress_size"], "ZipInfo.create_system": ["ZipInfo.create_system"], "ZipInfo.date_time": ["ZipInfo.date_time"], "ZipInfo.external_attr": ["ZipInfo.external_attr"], "ZipInfo.extra": ["ZipInfo.extra"], "ZipInfo.extract_version": ["ZipInfo.extract_version"], "ZipInfo.file_size": ["ZipInfo.file_size"], "ZipInfo.flag_bits": ["ZipInfo.flag_bits"], "ZipInfo.from_file(filename)": ["from_file"], "ZipInfo.from_file(filename, arcname=None)": ["from_file", "ZipInfo.from_file(filename, arcname=None)"], "ZipInfo.internal_attr": ["ZipInfo.internal_attr"], "ZipInfo.volume": ["ZipInfo.volume"], "__debug__": ["__debug__"], "__import__(name)": ["__import__", "import_module(name)", "imread(name)", "print_list(name)", "_get_compressor(name)", "_run_pip(name)", "mat(name)", "capwords(name)", "isposinf(name)", "print_tb(name)", "get_cmap(name)", "poll(name)", "bmat(name)", "goto(name)", "_parse_datetime(name)"], "__import__(name, fromlist=())": ["__import__", "import_module(name, fromlist=())", "imread(name, fromlist=())", "print_list(name, fromlist=())", "_get_compressor(name, fromlist=())", "_run_pip(name, fromlist=())", "mat(name, fromlist=())", "capwords(name, fromlist=())", "isposinf(name, fromlist=())", "print_tb(name, fromlist=())", "get_cmap(name, fromlist=())", "poll(name, fromlist=())", "bmat(name, fromlist=())", "goto(name, fromlist=())", "_parse_datetime(name, fromlist=())"], "__import__(name, globals=None)": ["__import__", "__import__(name, globals=None)", "import_module(name, globals=None)", "imread(name, globals=None)", "print_list(name, globals=None)", "_get_compressor(name, globals=None)", "_run_pip(name, globals=None)", "mat(name, globals=None)", "capwords(name, globals=None)", "isposinf(name, globals=None)", "print_tb(name, globals=None)", "get_cmap(name, globals=None)", "poll(name, globals=None)", "bmat(name, globals=None)", "goto(name, globals=None)"], "__import__(name, globals=None, fromlist=())": ["__import__", "__import__(name, globals=None, fromlist=())", "import_module(name, globals=None, fromlist=())", "imread(name, globals=None, fromlist=())", "print_list(name, globals=None, fromlist=())", "_get_compressor(name, globals=None, fromlist=())", "_run_pip(name, globals=None, fromlist=())", "mat(name, globals=None, fromlist=())", "capwords(name, globals=None, fromlist=())", "isposinf(name, globals=None, fromlist=())", "print_tb(name, globals=None, fromlist=())", "get_cmap(name, globals=None, fromlist=())", "poll(name, globals=None, fromlist=())", "bmat(name, globals=None, fromlist=())", "goto(name, globals=None, fromlist=())"], "__import__(name, globals=None, level=0)": ["__import__", "__import__(name, globals=None, level=0)", "__import__(name, globals=None, level='0')", "import_module(name, globals=None, level=0)", "imread(name, globals=None, level=0)", "print_list(name, globals=None, level=0)", "_get_compressor(name, globals=None, level=0)", "_run_pip(name, globals=None, level=0)", "mat(name, globals=None, level=0)", "capwords(name, globals=None, level=0)", "isposinf(name, globals=None, level=0)", "print_tb(name, globals=None, level=0)", "get_cmap(name, globals=None, level=0)", "poll(name, globals=None, level=0)", "bmat(name, globals=None, level=0)"], "__import__(name, globals=None, locals=None)": ["__import__", "__import__(name, globals=None, locals=None)", "import_module(name, globals=None, locals=None)", "imread(name, globals=None, locals=None)", "print_list(name, globals=None, locals=None)", "_get_compressor(name, globals=None, locals=None)", "_run_pip(name, globals=None, locals=None)", "mat(name, globals=None, locals=None)", "capwords(name, globals=None, locals=None)", "isposinf(name, globals=None, locals=None)", "print_tb(name, globals=None, locals=None)", "get_cmap(name, globals=None, locals=None)", "poll(name, globals=None, locals=None)", "bmat(name, globals=None, locals=None)", "goto(name, globals=None, locals=None)"], "__import__(name, level=0)": ["__import__", "__import__(name, level='0')", "import_module(name, level=0)", "imread(name, level=0)", "print_list(name, level=0)", "_get_compressor(name, level=0)", "_run_pip(name, level=0)", "mat(name, level=0)", "capwords(name, level=0)", "isposinf(name, level=0)", "print_tb(name, level=0)", "get_cmap(name, level=0)", "poll(name, level=0)", "bmat(name, level=0)", "goto(name, level=0)"], "__import__(name, locals=None)": ["__import__", "__import__(name, locals=None)", "import_module(name, locals=None)", "imread(name, locals=None)", "print_list(name, locals=None)", "_get_compressor(name, locals=None)", "_run_pip(name, locals=None)", "mat(name, locals=None)", "capwords(name, locals=None)", "isposinf(name, locals=None)", "print_tb(name, locals=None)", "get_cmap(name, locals=None)", "poll(name, locals=None)", "bmat(name, locals=None)", "goto(name, locals=None)"], "__import__(name, locals=None, fromlist=())": ["__import__", "__import__(name, locals=None, fromlist=())", "import_module(name, locals=None, fromlist=())", "imread(name, locals=None, fromlist=())", "print_list(name, locals=None, fromlist=())", "_get_compressor(name, locals=None, fromlist=())", "_run_pip(name, locals=None, fromlist=())", "mat(name, locals=None, fromlist=())", "capwords(name, locals=None, fromlist=())", "isposinf(name, locals=None, fromlist=())", "print_tb(name, locals=None, fromlist=())", "get_cmap(name, locals=None, fromlist=())", "poll(name, locals=None, fromlist=())", "bmat(name, locals=None, fromlist=())", "goto(name, locals=None, fromlist=())"], "__import__(name, locals=None, level=0)": ["__import__", "__import__(name, locals=None, level=0)", "__import__(name, locals=None, level='0')", "import_module(name, locals=None, level=0)", "imread(name, locals=None, level=0)", "print_list(name, locals=None, level=0)", "_get_compressor(name, locals=None, level=0)", "_run_pip(name, locals=None, level=0)", "mat(name, locals=None, level=0)", "capwords(name, locals=None, level=0)", "isposinf(name, locals=None, level=0)", "print_tb(name, locals=None, level=0)", "get_cmap(name, locals=None, level=0)", "poll(name, locals=None, level=0)", "bmat(name, locals=None, level=0)"], "_c_data._b_base_": ["_c_data._b_base_"], "_c_data._b_needsfree_": ["_c_data._b_needsfree_"], "_c_data._objects": ["_c_data._objects"], "_c_data.from_address(address)": ["from_address"], "_c_data.from_buffer(source)": ["from_buffer"], "_c_data.from_buffer_copy(source)": ["from_buffer_copy"], "_c_data.from_buffer_copy(source, offset)": ["from_buffer_copy"], "_c_data.from_param(obj)": ["from_param"], "_c_data.in_dll(library, name)": ["in_dll"], "_func_ptr.argtypes": ["_func_ptr.argtypes"], "_func_ptr.errcheck": ["_func_ptr.errcheck"], "_func_ptr.restype": ["_func_ptr.restype"], "_pointer.contents": ["_pointer.contents"], "_thread.LockType": ["_thread.LockType"], "_thread.TIMEOUT_MAX": ["_thread.TIMEOUT_MAX"], "_thread.error": ["_thread.error"], "_thread.exit()": ["exit", "_thread._exit()", "_thread.exists()", "_thread._exists()", "_thread.text()", "_thread.lexists()", "_thread.textinput()", "_thread.WIFEXITED()", "_thread.print_exc()", "_thread._export()", "_thread.hexbin()", "_thread.legfit()", "_thread.export()", "_thread.legint()", "_thread.timeit()"], "_thread.get_ident()": ["get_ident", "_thread._get_indent()", "_thread._get_gid()", "_thread._get_uid()", "_thread.get_info()", "_thread.reindent()", "_thread.get_include()", "_thread.getenv()", "_thread.get_qcontent()", "_thread.get_token()", "_thread._indent()", "_thread.get_ttext()", "_thread.getpen()", "_thread.dedent()", "_thread.indent()"], "_thread.interrupt_main()": ["interrupt_main", "_thread._interp_limit()", "_thread.siginterrupt()", "_thread._min_int()", "_thread.bindtextdomain()", "_thread.invert_permutation()", "_thread.interp()", "_thread.ISNONTERMINAL()", "_thread.textdomain()", "_thread._inet_paton()", "_thread.ISTERMINAL()", "_thread.interactive()", "_thread.iter_unpack()", "_thread.interpolate()", "_thread._mean_dispatcher()"], "_thread.stack_size()": ["stack_size", "_thread.print_stack()", "_thread.set_trace()", "_thread.extract_stack()", "_thread.format_stack()", "_thread.getsitepackages()", "_thread.pensize()", "_thread.current_task()", "_thread.interact()", "_thread.getTimeSeriesData()", "_thread.get_rank()", "_thread.test()", "_thread.token_hex()", "_thread.shapesize()", "_thread.all_tasks()"], "_thread.start_new_thread(function, args)": ["start_new_thread", "_thread.safeimport(function, args)", "_thread.set_numexpr_threads(function, args)", "_thread.current_thread(function, args)", "_thread.main_thread(function, args)", "_thread.update_bn_stats(function, args)", "_thread.read_feather(function, args)", "_thread.read_parquet(function, args)", "_thread.read_int4(function, args)", "_thread.get_unstructured(function, args)", "_thread.quant_type_to_str(function, args)", "_thread.run_coroutine_threadsafe(function, args)", "_thread.set_threshold(function, args)", "_thread.currentThread(function, args)", "_thread._convert_other(function, args)"], "_thread.start_new_thread(function, args, kwargs)": ["start_new_thread", "_thread.safeimport(function, args, kwargs)", "_thread.set_numexpr_threads(function, args, kwargs)", "_thread.current_thread(function, args, kwargs)", "_thread.main_thread(function, args, kwargs)", "_thread.update_bn_stats(function, args, kwargs)", "_thread.read_feather(function, args, kwargs)", "_thread.read_parquet(function, args, kwargs)", "_thread.read_int4(function, args, kwargs)", "_thread.get_unstructured(function, args, kwargs)", "_thread.quant_type_to_str(function, args, kwargs)", "_thread.run_coroutine_threadsafe(function, args, kwargs)", "_thread.set_threshold(function, args, kwargs)", "_thread.currentThread(function, args, kwargs)", "_thread._convert_other(function, args, kwargs)"], "abc.ABC": ["abc.ABC"], "abc.ABCMeta": ["abc.ABCMeta"], "abc_meta.__subclasshook__(subclass)": ["__subclasshook__"], "abc_meta.register(subclass)": ["register"], "abs(x)": ["abs", "__abs__(x)", "_abs(x)", "barbs(x)", "isabs(x)", "_tables(x)", "abspath(x)", "asbytes(x)", "cast(x)", "_cast(x)", "_acos(x)", "axes(x)", "axis(x)", "label(x)", "loads(x)"], "abstract_event_loop.consumed": ["abstract_event_loop.consumed"], "abstract_event_loop.expected": ["abstract_event_loop.expected"], "abstract_event_loop.partial": ["abstract_event_loop.partial"], "abstract_event_loop_policy.get_child_watcher()": ["get_child_watcher"], "abstract_event_loop_policy.get_event_loop()": ["get_event_loop"], "abstract_event_loop_policy.set_child_watcher(watcher)": ["set_child_watcher"], "abstract_event_loop_policy.set_event_loop(loop)": ["set_event_loop"], "ac_in_buffer_size": ["ac_in_buffer_size"], "ac_out_buffer_size": ["ac_out_buffer_size"], "address.addr_spec": ["address.addr_spec"], "address.username": ["address.username"], "address_header.addresses": ["address_header.addresses"], "address_header.groups": ["address_header.groups"], "aifc.aifc()": ["aifc"], "aifc.aiff()": ["aiff"], "aifc.close()": ["close"], "aifc.getcompname()": ["getcompname"], "aifc.getcomptype()": ["getcomptype"], "aifc.getframerate()": ["getframerate"], "aifc.getmark(id)": ["getmark"], "aifc.getmarkers()": ["getmarkers"], "aifc.getnchannels()": ["getnchannels"], "aifc.getnframes()": ["getnframes"], "aifc.getparams()": ["getparams"], "aifc.getsampwidth()": ["getsampwidth"], "aifc.open(file)": ["open", "aifc._open(file)", "aifc.open_latin1(file)", "aifc.popen(file)", "aifc.bltn_open(file)", "aifc.OpenWrapper(file)", "aifc._builtin_open(file)", "aifc.urlopen(file)", "aifc.pie(file)", "aifc._run_code(file)", "aifc.compress(file)", "aifc._popen(file)", "aifc.byte_compile(file)", "aifc.boxplot(file)", "aifc.pen(file)"], "aifc.open(file, mode=None)": ["open", "aifc.open(file, mode=None)", "aifc._open(file, mode=None)", "aifc.open_latin1(file, mode=None)", "aifc.popen(file, mode=None)", "aifc.bltn_open(file, mode=None)", "aifc.OpenWrapper(file, mode=None)", "aifc._builtin_open(file, mode=None)", "aifc.urlopen(file, mode=None)", "aifc.pie(file, mode=None)", "aifc._run_code(file, mode=None)", "aifc.compress(file, mode=None)", "aifc._popen(file, mode=None)", "aifc.byte_compile(file, mode=None)", "aifc.boxplot(file, mode=None)"], "aifc.readframes(nframes)": ["readframes"], "aifc.setcomptype(type, name)": ["setcomptype"], "aifc.setframerate(rate)": ["setframerate"], "aifc.setmark(id, pos, name)": ["setmark"], "aifc.setnchannels(nchannels)": ["setnchannels"], "aifc.setparams(nchannels, sampwidth, framerate, comptype, compname)": ["setparams"], "aifc.setpos(pos)": ["setpos"], "aifc.setsampwidth(width)": ["setsampwidth"], "aifc.tell()": ["tell"], "aifc.writeframes(data)": ["writeframes"], "aifc.writeframesraw(data)": ["writeframesraw"], "all(iterable)": ["all", "poll(iterable)", "poll3(iterable)", "poll2(iterable)", "filled(iterable)", "mksalt(iterable)", "_backfill_2d(iterable)", "_all(iterable)", "runeval(iterable)", "test_parallel(iterable)", "call(iterable)", "calculate_gain(iterable)", "any(iterable)", "XML(iterable)", "mat(iterable)"], "any(iterable)": ["any", "main(iterable)", "asanyarray(iterable)", "vander(iterable)", "argmin(iterable)", "nanmin(iterable)", "nanmax(iterable)", "asarray(iterable)", "_any(iterable)", "amin(iterable)", "distance(iterable)", "identity(iterable)", "variance(iterable)", "run_path(iterable)", "_nan_mask(iterable)"], "arg": ["arg"], "argparse.ArgumentParser(description=None)": ["ArgumentParser", "argparse.ArgumentParser(description=None)"], "argparse.ArgumentParser(epilog=None)": ["ArgumentParser", "argparse.ArgumentParser(epilog=None)"], "argparse.ArgumentParser(parents=)": [], "argparse.ArgumentParser(prog=None)": ["ArgumentParser", "argparse.ArgumentParser(prog=None)"], "argparse.ArgumentParser(usage=None)": ["ArgumentParser", "argparse.ArgumentParser(usage=None)"], "argparse.FileType()": ["FileType"], "argparse.FileType(bufsize=-1)": ["FileType", "argparse.FileType(bufsize=(- '1'))"], "argparse.FileType(bufsize=-1, encoding=None)": ["FileType", "argparse.FileType(bufsize=(- 1), encoding=None)", "argparse.FileType(bufsize=(- '1'), encoding=None)"], "argparse.FileType(bufsize=-1, errors=None)": ["FileType", "argparse.FileType(bufsize=(- 1), errors=None)", "argparse.FileType(bufsize=(- '1'), errors=None)"], "argparse.FileType(errors=None)": ["FileType", "argparse.FileType(errors=None)"], "argparse.FileType(mode='r')": ["FileType", "argparse.FileType(mode=1)"], "argparse.FileType(mode='r', bufsize=-1)": ["FileType", "argparse.FileType(mode=1, bufsize=(- '1'))"], "argparse.FileType(mode='r', encoding=None)": ["FileType", "argparse.FileType(mode='r', encoding=None)", "argparse.FileType(mode=1.0, encoding=None)"], "argparse.Namespace": ["argparse.Namespace"], "argrepr": ["argrepr"], "argval": ["argval"], "array._length_": ["array._length_"], "array._type_": ["array._type_"], "array.append(x)": ["append"], "array.array(typecode)": ["array", "array.as_array(typecode)", "array.asanyarray(typecode)", "array.asarray(typecode)", "array.read_feather(typecode)", "array.variance(typecode)", "array.warn(typecode)", "array._warn(typecode)", "array.nanargmax(typecode)", "array.pvariance(typecode)", "array.fromarrays(typecode)", "array._asfarray_dispatcher(typecode)", "array.rmdir(typecode)", "array.crypt(typecode)", "array.parse(typecode)"], "array.array(typecode, initializer)": ["array", "array.as_array(typecode, initializer)", "array.asanyarray(typecode, initializer)", "array.asarray(typecode, initializer)", "array.read_feather(typecode, initializer)", "array.variance(typecode, initializer)", "array.warn(typecode, initializer)", "array._warn(typecode, initializer)", "array.nanargmax(typecode, initializer)", "array.pvariance(typecode, initializer)", "array.fromarrays(typecode, initializer)", "array._asfarray_dispatcher(typecode, initializer)", "array.rmdir(typecode, initializer)", "array.crypt(typecode, initializer)", "array.parse(typecode, initializer)"], "array.buffer_info()": ["buffer_info"], "array.byteswap()": ["byteswap"], "array.count(x)": ["count", "array.count_nonzero(x)", "array.run(x)", "array.convert_jit(x)", "array.dot(x)", "array.utf_8_decode(x)", "array.utf_7_decode(x)", "array.copytree(x)", "array.copy(x)", "array.utf_16_decode(x)", "array.concat_compat(x)", "array.utf_16_encode(x)", "array.utf_32_decode(x)", "array.utf_32_encode(x)", "array._convert_other(x)"], "array.extend(iterable)": ["extend"], "array.frombytes(s)": ["frombytes"], "array.fromfile(f, n)": ["fromfile"], "array.fromlist(list)": ["fromlist"], "array.fromunicode(s)": ["fromunicode"], "array.index(x)": ["index", "array.rindex(x)", "array.indices(x)", "array.find(x)", "array.finditer(x)", "array.rfind(x)", "array.vander(x)", "array.findall(x)", "array.mask_indices(x)", "array.pinv(x)", "array.namedtuple(x)", "array.mknod(x)", "array._namedtuple(x)", "array.render_doc(x)", "array.debug(x)"], "array.insert(i, x)": ["insert"], "array.itemsize": ["array.itemsize"], "array.pop()": ["pop"], "array.pop(i)": ["pop"], "array.remove(x)": ["remove"], "array.reverse()": ["reverse"], "array.tobytes()": ["tobytes"], "array.tofile(f)": ["tofile"], "array.tolist()": ["tolist"], "array.tounicode()": ["tounicode"], "array.typecode": ["array.typecode"], "array.typecodes": ["array.typecodes"], "ascii(object)": ["ascii", "sci(object)", "_abc_init(object)", "basis(object)", "ascii_decode(object)", "ascii_encode(object)", "skipIf(object)", "skipif(object)", "arcsin(object)", "_as_int(object)", "script(object)", "asdict(object)", "waitid(object)", "_script(object)", "addsitedir(object)"], "ast.AST": ["ast.AST"], "ast.NodeTransformer": ["ast.NodeTransformer"], "ast.NodeVisitor": ["ast.NodeVisitor"], "ast._fields": ["ast._fields"], "ast.copy_location(new_node, old_node)": ["copy_location", "ast.location_tag(new_node, old_node)", "ast._copyto(new_node, old_node)", "ast.concat_compat(new_node, old_node)", "ast.py_scanstring(new_node, old_node)", "ast.latin_1_decode(new_node, old_node)", "ast.latin_1_encode(new_node, old_node)", "ast.copystat(new_node, old_node)", "ast.position(new_node, old_node)", "ast.plotting(new_node, old_node)", "ast.lagcompanion(new_node, old_node)", "ast.plain(new_node, old_node)", "ast.legcompanion(new_node, old_node)", "ast.spec_from_file_location(new_node, old_node)", "ast._setoption(new_node, old_node)"], "ast.dump(node)": ["dump", "ast._dump(node)", "ast.dumps(node)", "ast._dumps(node)", "ast.dup(node)", "ast.dup2(node)", "ast._get_dump(node)", "ast.up(node)", "ast.DupFd(node)", "ast._xml_dumps(node)", "ast.WCOREDUMP(node)", "ast._sum_(node)", "ast._sum(node)", "ast.sum(node)", "ast.cmp(node)"], "ast.dump(node, annotate_fields=True)": ["dump", "ast.dump(node, annotate_fields=False)", "ast._dump(node, annotate_fields=True)", "ast.dumps(node, annotate_fields=True)", "ast._dumps(node, annotate_fields=True)", "ast.dup(node, annotate_fields=True)", "ast.dup2(node, annotate_fields=True)", "ast._get_dump(node, annotate_fields=True)", "ast.up(node, annotate_fields=True)", "ast.DupFd(node, annotate_fields=True)", "ast._xml_dumps(node, annotate_fields=True)", "ast.WCOREDUMP(node, annotate_fields=True)", "ast._sum_(node, annotate_fields=True)", "ast._sum(node, annotate_fields=True)", "ast.sum(node, annotate_fields=True)"], "ast.dump(node, annotate_fields=True, include_attributes=False)": ["dump", "ast.dump(node, annotate_fields=False, include_attributes=True)", "ast._dump(node, annotate_fields=True, include_attributes=False)", "ast.dumps(node, annotate_fields=True, include_attributes=False)", "ast._dumps(node, annotate_fields=True, include_attributes=False)", "ast.dup(node, annotate_fields=True, include_attributes=False)", "ast.dup2(node, annotate_fields=True, include_attributes=False)", "ast._get_dump(node, annotate_fields=True, include_attributes=False)", "ast.up(node, annotate_fields=True, include_attributes=False)", "ast.DupFd(node, annotate_fields=True, include_attributes=False)", "ast._xml_dumps(node, annotate_fields=True, include_attributes=False)", "ast.WCOREDUMP(node, annotate_fields=True, include_attributes=False)", "ast._sum_(node, annotate_fields=True, include_attributes=False)", "ast._sum(node, annotate_fields=True, include_attributes=False)", "ast.sum(node, annotate_fields=True, include_attributes=False)"], "ast.dump(node, include_attributes=False)": ["dump", "ast.dump(node, include_attributes=True)", "ast._dump(node, include_attributes=False)", "ast.dumps(node, include_attributes=False)", "ast._dumps(node, include_attributes=False)", "ast.dup(node, include_attributes=False)", "ast.dup2(node, include_attributes=False)", "ast._get_dump(node, include_attributes=False)", "ast.up(node, include_attributes=False)", "ast.DupFd(node, include_attributes=False)", "ast._xml_dumps(node, include_attributes=False)", "ast.WCOREDUMP(node, include_attributes=False)", "ast._sum_(node, include_attributes=False)", "ast._sum(node, include_attributes=False)", "ast.sum(node, include_attributes=False)"], "ast.fix_missing_locations(node)": ["fix_missing_locations", "ast._create_missing_idx(node)", "ast.location_tag(node)", "ast.set_string_function(node)", "ast.spec_from_file_location(node)", "ast._missing_arguments(node)", "ast.convert_missing_indexer(node)", "ast._is_exception(node)", "ast._get_restore_location(node)", "ast._signature_is_builtin(node)", "ast.format_string(node)", "ast.default_restore_location(node)", "ast.copy_location(node)", "ast._signature_is_functionlike(node)", "ast.validate_map_location(node)"], "ast.get_docstring(node)": ["get_docstring", "ast.get_data(node)", "ast.read_stringnl(node)", "ast.DocFileTest(node)", "ast.get_fill_func(node)", "ast.set_string_function(node)", "ast._describe_option(node)", "ast.guess_extension(node)", "ast.hermint(node)", "ast.rundocs(node)", "ast.polyint(node)", "ast.infer_concrete_type_builder(node)", "ast.chebint(node)", "ast.na_value_for_dtype(node)", "ast.fork_rng(node)"], "ast.get_docstring(node, clean=True)": ["get_docstring", "ast.get_docstring(node, clean=False)", "ast.get_data(node, clean=True)", "ast.read_stringnl(node, clean=True)", "ast.DocFileTest(node, clean=True)", "ast.get_fill_func(node, clean=True)", "ast.set_string_function(node, clean=True)", "ast._describe_option(node, clean=True)", "ast.guess_extension(node, clean=True)", "ast.hermint(node, clean=True)", "ast.rundocs(node, clean=True)", "ast.polyint(node, clean=True)", "ast.infer_concrete_type_builder(node, clean=True)", "ast.chebint(node, clean=True)", "ast.na_value_for_dtype(node, clean=True)"], "ast.increment_lineno(node)": ["increment_lineno", "ast.onscreenclick(node)", "ast._return_inverse(node)", "ast.infer_concrete_type_builder(node)", "ast.get_module_concrete_type(node)", "ast.remove_tree(node)", "ast._lu_no_infos(node)", "ast.getframeinfo(node)", "ast.hermeint(node)", "ast.read_stringnl(node)", "ast._return_counts(node)", "ast.set_string_function(node)", "ast.onrelease(node)", "ast.median_grouped(node)", "ast._lock_file(node)"], "ast.increment_lineno(node, n=1)": ["increment_lineno", "ast.increment_lineno(node, n='1')", "ast.onscreenclick(node, n=1)", "ast._return_inverse(node, n=1)", "ast.infer_concrete_type_builder(node, n=1)", "ast.get_module_concrete_type(node, n=1)", "ast.remove_tree(node, n=1)", "ast._lu_no_infos(node, n=1)", "ast.getframeinfo(node, n=1)", "ast.hermeint(node, n=1)", "ast.read_stringnl(node, n=1)", "ast._return_counts(node, n=1)", "ast.set_string_function(node, n=1)", "ast.onrelease(node, n=1)", "ast.median_grouped(node, n=1)"], "ast.iter_child_nodes(node)": ["iter_child_nodes", "ast._filter_nodes(node)", "ast._iter_file_finder_modules(node)", "ast.iter_modules(node)", "ast.unicode_internal_encode(node)", "ast.unicode_internal_decode(node)", "ast.iterencode(node)", "ast.prepare_child(node)", "ast.filter_name(node)", "ast.iter_importer_modules(node)", "ast.iter_fields(node)", "ast._ones_dispatcher(node)", "ast.ascii_encode(node)", "ast._iter_tensors(node)", "ast.new_compiler(node)"], "ast.iter_fields(node)": ["iter_fields", "ast._field_init(node)", "ast.finditer(node)", "ast._iter_filter(node)", "ast.filter(node)", "ast._filter(node)", "ast.fields(node)", "ast._get_field(node)", "ast.write_file(node)", "ast.iter_importers(node)", "ast.has_nested_fields(node)", "ast._release_waiter(node)", "ast.field(node)", "ast.DocFileSuite(node)", "ast._find_tensors(node)"], "ast.literal_eval(node_or_string)": ["literal_eval", "ast._eval_type(node_or_string)", "ast.iter_fields(node_or_string)", "ast.get_domain_literal(node_or_string)", "ast.iterable(node_or_string)", "ast._get_literal_prefix(node_or_string)", "ast.evaluate(node_or_string)", "ast.allequal(node_or_string)", "ast._evaluate(node_or_string)", "ast.fuse_linear_bn_eval(node_or_string)", "ast._eval_poly(node_or_string)", "ast.safe_eval(node_or_string)", "ast.greater_equal(node_or_string)", "ast._open_terminal(node_or_string)", "ast.easter(node_or_string)"], "ast.parse(source)": ["parse", "ast._parse(source)", "ast._parser(source)", "ast.sparse(source)", "ast.sparse_(source)", "ast.pause(source)", "ast.parse_qs(source)", "ast.du_parse(source)", "ast.parse150(source)", "ast.parse257(source)", "ast.urlparse(source)", "ast.parse227(source)", "ast._preparse(source)", "ast.parse229(source)", "ast.parse_url(source)"], "ast.parse(source, filename='<unknown>')": ["parse", "ast.parse(source, filename=9)", "ast._parse(source, filename='<unknown>')", "ast._parser(source, filename='<unknown>')", "ast.sparse(source, filename='<unknown>')", "ast.sparse_(source, filename='<unknown>')", "ast.pause(source, filename='<unknown>')", "ast.parse_qs(source, filename='<unknown>')", "ast.du_parse(source, filename='<unknown>')", "ast.parse150(source, filename='<unknown>')", "ast.parse257(source, filename='<unknown>')", "ast.urlparse(source, filename='<unknown>')", "ast.parse227(source, filename='<unknown>')", "ast._preparse(source, filename='<unknown>')", "ast.parse229(source, filename='<unknown>')"], "ast.parse(source, filename='<unknown>', mode='exec')": ["parse", "ast.parse(source, filename=9, mode=4)", "ast._parse(source, filename='<unknown>', mode='exec')", "ast._parser(source, filename='<unknown>', mode='exec')", "ast.sparse(source, filename='<unknown>', mode='exec')", "ast.sparse_(source, filename='<unknown>', mode='exec')", "ast.pause(source, filename='<unknown>', mode='exec')", "ast.parse_qs(source, filename='<unknown>', mode='exec')", "ast.du_parse(source, filename='<unknown>', mode='exec')", "ast.parse150(source, filename='<unknown>', mode='exec')", "ast.parse257(source, filename='<unknown>', mode='exec')", "ast.urlparse(source, filename='<unknown>', mode='exec')", "ast.parse227(source, filename='<unknown>', mode='exec')", "ast._preparse(source, filename='<unknown>', mode='exec')", "ast.parse229(source, filename='<unknown>', mode='exec')"], "ast.parse(source, mode='exec')": ["parse", "ast.parse(source, mode=4.0)", "ast._parse(source, mode='exec')", "ast._parser(source, mode='exec')", "ast.sparse(source, mode='exec')", "ast.sparse_(source, mode='exec')", "ast.pause(source, mode='exec')", "ast.parse_qs(source, mode='exec')", "ast.du_parse(source, mode='exec')", "ast.parse150(source, mode='exec')", "ast.parse257(source, mode='exec')", "ast.urlparse(source, mode='exec')", "ast.parse227(source, mode='exec')", "ast._preparse(source, mode='exec')", "ast.parse229(source, mode='exec')"], "ast.walk(node)": ["walk", "ast._fwalk(node)", "ast.fwalk(node)", "ast.walk_tb(node)", "ast._walk_dir(node)", "ast.walktree(node)", "ast.walk_stack(node)", "ast._all(node)", "ast.all(node)", "ast.back(node)", "ast.Lock(node)", "ast.eval(node)", "ast.what(node)", "ast.take(node)", "ast.alen(node)"], "async_chat.close_when_done()": ["close_when_done"], "async_chat.collect_incoming_data(data)": ["collect_incoming_data"], "async_chat.discard_buffers()": ["discard_buffers"], "async_chat.found_terminator()": ["found_terminator"], "async_chat.get_terminator()": ["get_terminator"], "async_chat.push(data)": ["push"], "async_chat.push_with_producer(producer)": ["push_with_producer"], "async_chat.set_terminator(term)": ["set_terminator"], "async_exit_stack.aclose()": ["aclose"], "async_exit_stack.enter_async_context(cm)": ["enter_async_context"], "async_exit_stack.push_async_callback(callback, *args, **kwds)": ["push_async_callback"], "async_exit_stack.push_async_exit(exit)": ["push_async_exit"], "async_result.get()": ["get"], "async_result.get(timeout)": ["get"], "async_result.ready()": ["ready"], "async_result.successful()": ["successful"], "async_result.wait()": ["wait"], "async_result.wait(timeout)": ["wait"], "asyncio.AbstractEventLoop": ["asyncio.AbstractEventLoop"], "asyncio.AbstractEventLoopPolicy": ["asyncio.AbstractEventLoopPolicy"], "asyncio.BaseProtocol": ["asyncio.BaseProtocol"], "asyncio.BoundedSemaphore()": ["BoundedSemaphore"], "asyncio.BoundedSemaphore(loop=None)": ["BoundedSemaphore", "asyncio.BoundedSemaphore(loop=None)"], "asyncio.BoundedSemaphore(value=1)": ["BoundedSemaphore", "asyncio.BoundedSemaphore(value='1')"], "asyncio.BufferedProtocol(BaseProtocol)": ["BufferedProtocol"], "asyncio.CancelledError": ["asyncio.CancelledError"], "asyncio.Condition()": ["Condition"], "asyncio.Condition(lock=None)": ["Condition", "asyncio.Condition(lock=None)"], "asyncio.Condition(loop=None)": ["Condition", "asyncio.Condition(loop=None)"], "asyncio.DatagramTransport(BaseTransport)": ["DatagramTransport"], "asyncio.DefaultEventLoopPolicy": ["asyncio.DefaultEventLoopPolicy"], "asyncio.Event()": ["Event"], "asyncio.Event(loop=None)": ["Event", "asyncio.Event(loop=None)"], "asyncio.FastChildWatcher": ["asyncio.FastChildWatcher"], "asyncio.Future()": ["Future"], "asyncio.Future(loop=None)": ["Future", "asyncio.Future(loop=None)"], "asyncio.IncompleteReadError": ["asyncio.IncompleteReadError"], "asyncio.InvalidStateError": ["asyncio.InvalidStateError"], "asyncio.LifoQueue": ["asyncio.LifoQueue"], "asyncio.LimitOverrunError": ["asyncio.LimitOverrunError"], "asyncio.Lock()": ["Lock"], "asyncio.Lock(loop=None)": ["Lock", "asyncio.Lock(loop=None)"], "asyncio.PriorityQueue": ["asyncio.PriorityQueue"], "asyncio.ProactorEventLoop": ["asyncio.ProactorEventLoop"], "asyncio.Protocol(BaseProtocol)": ["Protocol"], "asyncio.Queue()": ["Queue"], "asyncio.Queue(loop=None)": ["Queue", "asyncio.Queue(loop=None)"], "asyncio.Queue(maxsize=0)": ["Queue", "asyncio.Queue(maxsize='0')"], "asyncio.Queue(maxsize=0, loop=None)": ["Queue", "asyncio.Queue(maxsize=0, loop=None)", "asyncio.Queue(maxsize='0', loop=None)"], "asyncio.QueueFull": ["asyncio.QueueFull"], "asyncio.ReadTransport(BaseTransport)": ["ReadTransport"], "asyncio.SafeChildWatcher": ["asyncio.SafeChildWatcher"], "asyncio.SelectorEventLoop": ["asyncio.SelectorEventLoop"], "asyncio.Semaphore()": ["Semaphore"], "asyncio.Semaphore(loop=None)": ["Semaphore", "asyncio.Semaphore(loop=None)"], "asyncio.Semaphore(value=1)": ["Semaphore", "asyncio.Semaphore(value='1')"], "asyncio.Semaphore(value=1, loop=None)": ["Semaphore", "asyncio.Semaphore(value=1, loop=None)", "asyncio.Semaphore(value='1', loop=None)"], "asyncio.SendfileNotAvailableError": ["asyncio.SendfileNotAvailableError"], "asyncio.Server": ["asyncio.Server"], "asyncio.StreamReader": ["asyncio.StreamReader"], "asyncio.StreamWriter": ["asyncio.StreamWriter"], "asyncio.SubprocessProtocol(BaseProtocol)": ["SubprocessProtocol"], "asyncio.SubprocessTransport(BaseTransport)": ["SubprocessTransport"], "asyncio.Task(coro)": ["Task"], "asyncio.Task(coro, loop=None)": ["Task", "asyncio.Task(coro, loop=None)"], "asyncio.TimeoutError": ["asyncio.TimeoutError"], "asyncio.Transport(WriteTransport, ReadTransport)": ["Transport"], "asyncio.WriteTransport(BaseTransport)": ["WriteTransport"], "asyncio.all_tasks(loop=None)": ["all_tasks", "asyncio.all_tasks(loop=None)", "asyncio._all_tasks_compat(loop=None)", "asyncio.close_all(loop=None)", "asyncio.dataclass(loop=None)", "asyncio.format_stack(loop=None)", "asyncio.current_task(loop=None)", "asyncio.askyesno(loop=None)", "asyncio.extract_stack(loop=None)", "asyncio.stack_size(loop=None)", "asyncio.makeFloatSeries(loop=None)", "asyncio.yticks(loop=None)", "asyncio.xticks(loop=None)", "asyncio.askquestion(loop=None)", "asyncio.clearstamps(loop=None)"], "asyncio.as_completed(aws)": ["as_completed", "asyncio.compile(aws)", "asyncio.compile_file(aws)", "asyncio.new_compiler(aws)", "asyncio.as_strided(aws)", "asyncio.compress_nd(aws)", "asyncio.can_connect(aws)", "asyncio.ascii_decode(aws)", "asyncio.get_default_compiler(aws)", "asyncio.mask_rowcols(aws)", "asyncio.ParserCreate(aws)", "asyncio.upsample(aws)", "asyncio.upsample_nearest(aws)", "asyncio.ascii_encode(aws)", "asyncio.reduce_add_coalesced(aws)"], "asyncio.as_completed(aws, loop=None)": ["as_completed", "asyncio.as_completed(aws, loop=None)", "asyncio.compile(aws, loop=None)", "asyncio.compile_file(aws, loop=None)", "asyncio.new_compiler(aws, loop=None)", "asyncio.as_strided(aws, loop=None)", "asyncio.compress_nd(aws, loop=None)", "asyncio.can_connect(aws, loop=None)", "asyncio.ascii_decode(aws, loop=None)", "asyncio.get_default_compiler(aws, loop=None)", "asyncio.mask_rowcols(aws, loop=None)", "asyncio.ParserCreate(aws, loop=None)", "asyncio.upsample(aws, loop=None)", "asyncio.upsample_nearest(aws, loop=None)", "asyncio.ascii_encode(aws, loop=None)"], "asyncio.as_completed(aws, loop=None, timeout=None)": ["as_completed", "asyncio.as_completed(aws, loop=None, timeout=None)", "asyncio.compile(aws, loop=None, timeout=None)", "asyncio.compile_file(aws, loop=None, timeout=None)", "asyncio.new_compiler(aws, loop=None, timeout=None)", "asyncio.as_strided(aws, loop=None, timeout=None)", "asyncio.compress_nd(aws, loop=None, timeout=None)", "asyncio.can_connect(aws, loop=None, timeout=None)", "asyncio.ascii_decode(aws, loop=None, timeout=None)", "asyncio.get_default_compiler(aws, loop=None, timeout=None)", "asyncio.mask_rowcols(aws, loop=None, timeout=None)", "asyncio.ParserCreate(aws, loop=None, timeout=None)", "asyncio.upsample(aws, loop=None, timeout=None)", "asyncio.upsample_nearest(aws, loop=None, timeout=None)", "asyncio.ascii_encode(aws, loop=None, timeout=None)"], "asyncio.as_completed(aws, timeout=None)": ["as_completed", "asyncio.as_completed(aws, timeout=None)", "asyncio.compile(aws, timeout=None)", "asyncio.compile_file(aws, timeout=None)", "asyncio.new_compiler(aws, timeout=None)", "asyncio.as_strided(aws, timeout=None)", "asyncio.compress_nd(aws, timeout=None)", "asyncio.can_connect(aws, timeout=None)", "asyncio.ascii_decode(aws, timeout=None)", "asyncio.get_default_compiler(aws, timeout=None)", "asyncio.mask_rowcols(aws, timeout=None)", "asyncio.ParserCreate(aws, timeout=None)", "asyncio.upsample(aws, timeout=None)", "asyncio.upsample_nearest(aws, timeout=None)", "asyncio.ascii_encode(aws, timeout=None)"], "asyncio.create_subprocess_exec(program, *args, **kwds)": ["create_subprocess_exec", "asyncio.create_subprocess_shell(program, *args, **kwds)", "asyncio._correlate_dispatcher(program, *args, **kwds)", "asyncio.cache_from_source(program, *args, **kwds)", "asyncio.get_server_certificate(program, *args, **kwds)", "asyncio.subplots_adjust(program, *args, **kwds)", "asyncio.decorate_methods(program, *args, **kwds)", "asyncio._center_dispatcher(program, *args, **kwds)", "asyncio.typed_subpart_iterator(program, *args, **kwds)", "asyncio.charmap_decode(program, *args, **kwds)", "asyncio._create_default_https_context(program, *args, **kwds)", "asyncio.charmap_encode(program, *args, **kwds)", "asyncio.decompress(program, *args, **kwds)", "asyncio._ones_like_dispatcher(program, *args, **kwds)", "asyncio._geomspace_dispatcher(program, *args, **kwds)"], "asyncio.create_subprocess_exec(program, *args, **kwds, limit=None)": ["create_subprocess_exec", "asyncio.create_subprocess_exec(program, *args, **kwds, limit=None)", "asyncio.create_subprocess_shell(program, *args, **kwds, limit=None)", "asyncio._correlate_dispatcher(program, *args, **kwds, limit=None)", "asyncio.cache_from_source(program, *args, **kwds, limit=None)", "asyncio.get_server_certificate(program, *args, **kwds, limit=None)", "asyncio.subplots_adjust(program, *args, **kwds, limit=None)", "asyncio.decorate_methods(program, *args, **kwds, limit=None)", "asyncio._center_dispatcher(program, *args, **kwds, limit=None)", "asyncio.typed_subpart_iterator(program, *args, **kwds, limit=None)", "asyncio.charmap_decode(program, *args, **kwds, limit=None)", "asyncio._create_default_https_context(program, *args, **kwds, limit=None)", "asyncio.charmap_encode(program, *args, **kwds, limit=None)", "asyncio.decompress(program, *args, **kwds, limit=None)", "asyncio._ones_like_dispatcher(program, *args, **kwds, limit=None)"], "asyncio.create_subprocess_exec(program, *args, **kwds, loop=None)": ["create_subprocess_exec", "asyncio.create_subprocess_exec(program, *args, **kwds, loop=None)", "asyncio.create_subprocess_shell(program, *args, **kwds, loop=None)", "asyncio._correlate_dispatcher(program, *args, **kwds, loop=None)", "asyncio.cache_from_source(program, *args, **kwds, loop=None)", "asyncio.get_server_certificate(program, *args, **kwds, loop=None)", "asyncio.subplots_adjust(program, *args, **kwds, loop=None)", "asyncio.decorate_methods(program, *args, **kwds, loop=None)", "asyncio._center_dispatcher(program, *args, **kwds, loop=None)", "asyncio.typed_subpart_iterator(program, *args, **kwds, loop=None)", "asyncio.charmap_decode(program, *args, **kwds, loop=None)", "asyncio._create_default_https_context(program, *args, **kwds, loop=None)", "asyncio.charmap_encode(program, *args, **kwds, loop=None)", "asyncio.decompress(program, *args, **kwds, loop=None)", "asyncio._ones_like_dispatcher(program, *args, **kwds, loop=None)"], "asyncio.create_subprocess_exec(program, *args, **kwds, stderr=None)": ["create_subprocess_exec", "asyncio.create_subprocess_exec(program, *args, **kwds, stderr=None)", "asyncio.create_subprocess_shell(program, *args, **kwds, stderr=None)", "asyncio._correlate_dispatcher(program, *args, **kwds, stderr=None)", "asyncio.cache_from_source(program, *args, **kwds, stderr=None)", "asyncio.get_server_certificate(program, *args, **kwds, stderr=None)", "asyncio.subplots_adjust(program, *args, **kwds, stderr=None)", "asyncio.decorate_methods(program, *args, **kwds, stderr=None)", "asyncio._center_dispatcher(program, *args, **kwds, stderr=None)", "asyncio.typed_subpart_iterator(program, *args, **kwds, stderr=None)", "asyncio.charmap_decode(program, *args, **kwds, stderr=None)", "asyncio._create_default_https_context(program, *args, **kwds, stderr=None)", "asyncio.charmap_encode(program, *args, **kwds, stderr=None)", "asyncio.decompress(program, *args, **kwds, stderr=None)", "asyncio._ones_like_dispatcher(program, *args, **kwds, stderr=None)"], "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)": ["create_subprocess_exec", "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None)", "asyncio.create_subprocess_shell(program, *args, **kwds, stdin=None)", "asyncio._correlate_dispatcher(program, *args, **kwds, stdin=None)", "asyncio.cache_from_source(program, *args, **kwds, stdin=None)", "asyncio.get_server_certificate(program, *args, **kwds, stdin=None)", "asyncio.subplots_adjust(program, *args, **kwds, stdin=None)", "asyncio.decorate_methods(program, *args, **kwds, stdin=None)", "asyncio._center_dispatcher(program, *args, **kwds, stdin=None)", "asyncio.typed_subpart_iterator(program, *args, **kwds, stdin=None)", "asyncio.charmap_decode(program, *args, **kwds, stdin=None)", "asyncio._create_default_https_context(program, *args, **kwds, stdin=None)", "asyncio.charmap_encode(program, *args, **kwds, stdin=None)", "asyncio.decompress(program, *args, **kwds, stdin=None)", "asyncio._ones_like_dispatcher(program, *args, **kwds, stdin=None)"], "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, limit=None)": ["create_subprocess_exec", "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, limit=None)", "asyncio.create_subprocess_shell(program, *args, **kwds, stdin=None, limit=None)", "asyncio._correlate_dispatcher(program, *args, **kwds, stdin=None, limit=None)", "asyncio.cache_from_source(program, *args, **kwds, stdin=None, limit=None)", "asyncio.get_server_certificate(program, *args, **kwds, stdin=None, limit=None)", "asyncio.subplots_adjust(program, *args, **kwds, stdin=None, limit=None)", "asyncio.decorate_methods(program, *args, **kwds, stdin=None, limit=None)", "asyncio._center_dispatcher(program, *args, **kwds, stdin=None, limit=None)", "asyncio.typed_subpart_iterator(program, *args, **kwds, stdin=None, limit=None)", "asyncio.charmap_decode(program, *args, **kwds, stdin=None, limit=None)", "asyncio._create_default_https_context(program, *args, **kwds, stdin=None, limit=None)", "asyncio.charmap_encode(program, *args, **kwds, stdin=None, limit=None)", "asyncio.decompress(program, *args, **kwds, stdin=None, limit=None)", "asyncio._ones_like_dispatcher(program, *args, **kwds, stdin=None, limit=None)"], "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, loop=None)": ["create_subprocess_exec", "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, loop=None)", "asyncio.create_subprocess_shell(program, *args, **kwds, stdin=None, loop=None)", "asyncio._correlate_dispatcher(program, *args, **kwds, stdin=None, loop=None)", "asyncio.cache_from_source(program, *args, **kwds, stdin=None, loop=None)", "asyncio.get_server_certificate(program, *args, **kwds, stdin=None, loop=None)", "asyncio.subplots_adjust(program, *args, **kwds, stdin=None, loop=None)", "asyncio.decorate_methods(program, *args, **kwds, stdin=None, loop=None)", "asyncio._center_dispatcher(program, *args, **kwds, stdin=None, loop=None)", "asyncio.typed_subpart_iterator(program, *args, **kwds, stdin=None, loop=None)", "asyncio.charmap_decode(program, *args, **kwds, stdin=None, loop=None)", "asyncio._create_default_https_context(program, *args, **kwds, stdin=None, loop=None)", "asyncio.charmap_encode(program, *args, **kwds, stdin=None, loop=None)", "asyncio.decompress(program, *args, **kwds, stdin=None, loop=None)", "asyncio._ones_like_dispatcher(program, *args, **kwds, stdin=None, loop=None)"], "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, stderr=None)": ["create_subprocess_exec", "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, stderr=None)", "asyncio.create_subprocess_shell(program, *args, **kwds, stdin=None, stderr=None)", "asyncio._correlate_dispatcher(program, *args, **kwds, stdin=None, stderr=None)", "asyncio.cache_from_source(program, *args, **kwds, stdin=None, stderr=None)", "asyncio.get_server_certificate(program, *args, **kwds, stdin=None, stderr=None)", "asyncio.subplots_adjust(program, *args, **kwds, stdin=None, stderr=None)", "asyncio.decorate_methods(program, *args, **kwds, stdin=None, stderr=None)", "asyncio._center_dispatcher(program, *args, **kwds, stdin=None, stderr=None)", "asyncio.typed_subpart_iterator(program, *args, **kwds, stdin=None, stderr=None)", "asyncio.charmap_decode(program, *args, **kwds, stdin=None, stderr=None)", "asyncio._create_default_https_context(program, *args, **kwds, stdin=None, stderr=None)", "asyncio.charmap_encode(program, *args, **kwds, stdin=None, stderr=None)", "asyncio.decompress(program, *args, **kwds, stdin=None, stderr=None)", "asyncio._ones_like_dispatcher(program, *args, **kwds, stdin=None, stderr=None)"], "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, stdout=None)": ["create_subprocess_exec", "asyncio.create_subprocess_exec(program, *args, **kwds, stdin=None, stdout=None)", "asyncio.create_subprocess_shell(program, *args, **kwds, stdin=None, stdout=None)", "asyncio._correlate_dispatcher(program, *args, **kwds, stdin=None, stdout=None)", "asyncio.cache_from_source(program, *args, **kwds, stdin=None, stdout=None)", "asyncio.get_server_certificate(program, *args, **kwds, stdin=None, stdout=None)", "asyncio.subplots_adjust(program, *args, **kwds, stdin=None, stdout=None)", "asyncio.decorate_methods(program, *args, **kwds, stdin=None, stdout=None)", "asyncio._center_dispatcher(program, *args, **kwds, stdin=None, stdout=None)", "asyncio.typed_subpart_iterator(program, *args, **kwds, stdin=None, stdout=None)", "asyncio.charmap_decode(program, *args, **kwds, stdin=None, stdout=None)", "asyncio._create_default_https_context(program, *args, **kwds, stdin=None, stdout=None)", "asyncio.charmap_encode(program, *args, **kwds, stdin=None, stdout=None)", "asyncio.decompress(program, *args, **kwds, stdin=None, stdout=None)", "asyncio._ones_like_dispatcher(program, *args, **kwds, stdin=None, stdout=None)"], "asyncio.create_subprocess_exec(program, *args, **kwds, stdout=None)": ["create_subprocess_exec", "asyncio.create_subprocess_exec(program, *args, **kwds, stdout=None)", "asyncio.create_subprocess_shell(program, *args, **kwds, stdout=None)", "asyncio._correlate_dispatcher(program, *args, **kwds, stdout=None)", "asyncio.cache_from_source(program, *args, **kwds, stdout=None)", "asyncio.get_server_certificate(program, *args, **kwds, stdout=None)", "asyncio.subplots_adjust(program, *args, **kwds, stdout=None)", "asyncio.decorate_methods(program, *args, **kwds, stdout=None)", "asyncio._center_dispatcher(program, *args, **kwds, stdout=None)", "asyncio.typed_subpart_iterator(program, *args, **kwds, stdout=None)", "asyncio.charmap_decode(program, *args, **kwds, stdout=None)", "asyncio._create_default_https_context(program, *args, **kwds, stdout=None)", "asyncio.charmap_encode(program, *args, **kwds, stdout=None)", "asyncio.decompress(program, *args, **kwds, stdout=None)", "asyncio._ones_like_dispatcher(program, *args, **kwds, stdout=None)"], "asyncio.create_subprocess_shell(cmd, **kwds)": ["create_subprocess_shell", "asyncio.cache_from_source(cmd, **kwds)", "asyncio.register_shape(cmd, **kwds)", "asyncio._parse_format_specifier(cmd, **kwds)", "asyncio._create_default_https_context(cmd, **kwds)", "asyncio.get_source_lines_and_file(cmd, **kwds)", "asyncio.compress_rowcols(cmd, **kwds)", "asyncio.create_unicode_buffer(cmd, **kwds)", "asyncio.create_subprocess_exec(cmd, **kwds)", "asyncio.create_dynamic(cmd, **kwds)", "asyncio._parse_datetime(cmd, **kwds)", "asyncio._all_dispatcher(cmd, **kwds)", "asyncio._ones_dispatcher(cmd, **kwds)", "asyncio._transpose_dispatcher(cmd, **kwds)", "asyncio._namespaces(cmd, **kwds)"], "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)": ["create_subprocess_shell", "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None)", "asyncio.cache_from_source(cmd, **kwds, stdin=None)", "asyncio.register_shape(cmd, **kwds, stdin=None)", "asyncio._parse_format_specifier(cmd, **kwds, stdin=None)", "asyncio._create_default_https_context(cmd, **kwds, stdin=None)", "asyncio.get_source_lines_and_file(cmd, **kwds, stdin=None)", "asyncio.compress_rowcols(cmd, **kwds, stdin=None)", "asyncio.create_unicode_buffer(cmd, **kwds, stdin=None)", "asyncio.create_subprocess_exec(cmd, **kwds, stdin=None)", "asyncio.create_dynamic(cmd, **kwds, stdin=None)", "asyncio._parse_datetime(cmd, **kwds, stdin=None)", "asyncio._all_dispatcher(cmd, **kwds, stdin=None)", "asyncio._ones_dispatcher(cmd, **kwds, stdin=None)", "asyncio._transpose_dispatcher(cmd, **kwds, stdin=None)"], "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, loop=None)": ["create_subprocess_shell", "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, loop=None)", "asyncio.cache_from_source(cmd, **kwds, stdin=None, loop=None)", "asyncio.register_shape(cmd, **kwds, stdin=None, loop=None)", "asyncio._parse_format_specifier(cmd, **kwds, stdin=None, loop=None)", "asyncio._create_default_https_context(cmd, **kwds, stdin=None, loop=None)", "asyncio.get_source_lines_and_file(cmd, **kwds, stdin=None, loop=None)", "asyncio.compress_rowcols(cmd, **kwds, stdin=None, loop=None)", "asyncio.create_unicode_buffer(cmd, **kwds, stdin=None, loop=None)", "asyncio.create_subprocess_exec(cmd, **kwds, stdin=None, loop=None)", "asyncio.create_dynamic(cmd, **kwds, stdin=None, loop=None)", "asyncio._parse_datetime(cmd, **kwds, stdin=None, loop=None)", "asyncio._all_dispatcher(cmd, **kwds, stdin=None, loop=None)", "asyncio._ones_dispatcher(cmd, **kwds, stdin=None, loop=None)", "asyncio._transpose_dispatcher(cmd, **kwds, stdin=None, loop=None)"], "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stderr=None)": ["create_subprocess_shell", "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stderr=None)", "asyncio.cache_from_source(cmd, **kwds, stdin=None, stderr=None)", "asyncio.register_shape(cmd, **kwds, stdin=None, stderr=None)", "asyncio._parse_format_specifier(cmd, **kwds, stdin=None, stderr=None)", "asyncio._create_default_https_context(cmd, **kwds, stdin=None, stderr=None)", "asyncio.get_source_lines_and_file(cmd, **kwds, stdin=None, stderr=None)", "asyncio.compress_rowcols(cmd, **kwds, stdin=None, stderr=None)", "asyncio.create_unicode_buffer(cmd, **kwds, stdin=None, stderr=None)", "asyncio.create_subprocess_exec(cmd, **kwds, stdin=None, stderr=None)", "asyncio.create_dynamic(cmd, **kwds, stdin=None, stderr=None)", "asyncio._parse_datetime(cmd, **kwds, stdin=None, stderr=None)", "asyncio._all_dispatcher(cmd, **kwds, stdin=None, stderr=None)", "asyncio._ones_dispatcher(cmd, **kwds, stdin=None, stderr=None)", "asyncio._transpose_dispatcher(cmd, **kwds, stdin=None, stderr=None)"], "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stdout=None)": ["create_subprocess_shell", "asyncio.create_subprocess_shell(cmd, **kwds, stdin=None, stdout=None)", "asyncio.cache_from_source(cmd, **kwds, stdin=None, stdout=None)", "asyncio.register_shape(cmd, **kwds, stdin=None, stdout=None)", "asyncio._parse_format_specifier(cmd, **kwds, stdin=None, stdout=None)", "asyncio._create_default_https_context(cmd, **kwds, stdin=None, stdout=None)", "asyncio.get_source_lines_and_file(cmd, **kwds, stdin=None, stdout=None)", "asyncio.compress_rowcols(cmd, **kwds, stdin=None, stdout=None)", "asyncio.create_unicode_buffer(cmd, **kwds, stdin=None, stdout=None)", "asyncio.create_subprocess_exec(cmd, **kwds, stdin=None, stdout=None)", "asyncio.create_dynamic(cmd, **kwds, stdin=None, stdout=None)", "asyncio._parse_datetime(cmd, **kwds, stdin=None, stdout=None)", "asyncio._all_dispatcher(cmd, **kwds, stdin=None, stdout=None)", "asyncio._ones_dispatcher(cmd, **kwds, stdin=None, stdout=None)", "asyncio._transpose_dispatcher(cmd, **kwds, stdin=None, stdout=None)"], "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)": ["create_subprocess_shell", "asyncio.create_subprocess_shell(cmd, **kwds, stdout=None)", "asyncio.cache_from_source(cmd, **kwds, stdout=None)", "asyncio.register_shape(cmd, **kwds, stdout=None)", "asyncio._parse_format_specifier(cmd, **kwds, stdout=None)", "asyncio._create_default_https_context(cmd, **kwds, stdout=None)", "asyncio.get_source_lines_and_file(cmd, **kwds, stdout=None)", "asyncio.compress_rowcols(cmd, **kwds, stdout=None)", "asyncio.create_unicode_buffer(cmd, **kwds, stdout=None)", "asyncio.create_subprocess_exec(cmd, **kwds, stdout=None)", "asyncio.create_dynamic(cmd, **kwds, stdout=None)", "asyncio._parse_datetime(cmd, **kwds, stdout=None)", "asyncio._all_dispatcher(cmd, **kwds, stdout=None)", "asyncio._ones_dispatcher(cmd, **kwds, stdout=None)", "asyncio._transpose_dispatcher(cmd, **kwds, stdout=None)"], "asyncio.current_task()": ["current_task", "asyncio.print_stack()", "asyncio.set_numexpr_threads()", "asyncio.format_stack()", "asyncio._all_tasks_compat()", "asyncio.get_rank()", "asyncio.extract_stack()", "asyncio.set_trace()", "asyncio.all_tasks()", "asyncio.screensize()", "asyncio._make_date_converter()", "asyncio.stack_size()", "asyncio.get_backend()", "asyncio.clearstamps()", "asyncio.get_locales()"], "asyncio.current_task(loop=None)": ["current_task", "asyncio.current_task(loop=None)", "asyncio.print_stack(loop=None)", "asyncio.set_numexpr_threads(loop=None)", "asyncio.format_stack(loop=None)", "asyncio._all_tasks_compat(loop=None)", "asyncio.get_rank(loop=None)", "asyncio.extract_stack(loop=None)", "asyncio.set_trace(loop=None)", "asyncio.all_tasks(loop=None)", "asyncio.screensize(loop=None)", "asyncio._make_date_converter(loop=None)", "asyncio.stack_size(loop=None)", "asyncio.get_backend(loop=None)", "asyncio.clearstamps(loop=None)"], "asyncio.ensure_future(obj)": ["ensure_future", "asyncio.wrap_future(obj)", "asyncio.as_completed(obj)", "asyncio.open_unix_connection(obj)", "asyncio.shield(obj)", "asyncio.gather(obj)", "asyncio._structure(obj)", "asyncio.wait(obj)", "asyncio.generate_range(obj)", "asyncio.ensure_index_from_sequences(obj)", "asyncio.urlretrieve(obj)", "asyncio.require(obj)", "asyncio.use_numexpr(obj)", "asyncio.utf_8_encode(obj)", "asyncio.start_server(obj)"], "asyncio.ensure_future(obj, loop=None)": ["ensure_future", "asyncio.ensure_future(obj, loop=None)", "asyncio.wrap_future(obj, loop=None)", "asyncio.as_completed(obj, loop=None)", "asyncio.open_unix_connection(obj, loop=None)", "asyncio.shield(obj, loop=None)", "asyncio.gather(obj, loop=None)", "asyncio._structure(obj, loop=None)", "asyncio.wait(obj, loop=None)", "asyncio.generate_range(obj, loop=None)", "asyncio.ensure_index_from_sequences(obj, loop=None)", "asyncio.urlretrieve(obj, loop=None)", "asyncio.require(obj, loop=None)", "asyncio.use_numexpr(obj, loop=None)", "asyncio.utf_8_encode(obj, loop=None)"], "asyncio.gather(*aws)": ["gather", "asyncio.gather_object(*aws)", "asyncio.scatter(*aws)", "asyncio._dispatcher(*aws)", "asyncio._diag_dispatcher(*aws)", "asyncio._angle_dispatcher(*aws)", "asyncio._qr_dispatcher(*aws)", "asyncio.getenv(*aws)", "asyncio.vander(*aws)", "asyncio.getmembers(*aws)", "asyncio.addsitedir(*aws)", "asyncio.tracer(*aws)", "asyncio._flip_dispatcher(*aws)", "asyncio._size_dispatcher(*aws)", "asyncio._cond_dispatcher(*aws)"], "asyncio.gather(*aws, loop=None)": ["gather", "asyncio.gather(*aws, loop=None)", "asyncio.gather_object(*aws, loop=None)", "asyncio.scatter(*aws, loop=None)", "asyncio._dispatcher(*aws, loop=None)", "asyncio._diag_dispatcher(*aws, loop=None)", "asyncio._angle_dispatcher(*aws, loop=None)", "asyncio._qr_dispatcher(*aws, loop=None)", "asyncio.getenv(*aws, loop=None)", "asyncio.vander(*aws, loop=None)", "asyncio.getmembers(*aws, loop=None)", "asyncio.addsitedir(*aws, loop=None)", "asyncio.tracer(*aws, loop=None)", "asyncio._flip_dispatcher(*aws, loop=None)", "asyncio._size_dispatcher(*aws, loop=None)"], "asyncio.gather(*aws, loop=None, return_exceptions=False)": ["gather", "asyncio.gather(*aws, loop=None, return_exceptions=True)", "asyncio.gather_object(*aws, loop=None, return_exceptions=False)", "asyncio.scatter(*aws, loop=None, return_exceptions=False)", "asyncio._dispatcher(*aws, loop=None, return_exceptions=False)", "asyncio._diag_dispatcher(*aws, loop=None, return_exceptions=False)", "asyncio._angle_dispatcher(*aws, loop=None, return_exceptions=False)", "asyncio._qr_dispatcher(*aws, loop=None, return_exceptions=False)", "asyncio.getenv(*aws, loop=None, return_exceptions=False)", "asyncio.vander(*aws, loop=None, return_exceptions=False)", "asyncio.getmembers(*aws, loop=None, return_exceptions=False)", "asyncio.addsitedir(*aws, loop=None, return_exceptions=False)", "asyncio.tracer(*aws, loop=None, return_exceptions=False)", "asyncio._flip_dispatcher(*aws, loop=None, return_exceptions=False)", "asyncio._size_dispatcher(*aws, loop=None, return_exceptions=False)"], "asyncio.gather(*aws, return_exceptions=False)": ["gather", "asyncio.gather(*aws, return_exceptions=True)", "asyncio.gather_object(*aws, return_exceptions=False)", "asyncio.scatter(*aws, return_exceptions=False)", "asyncio._dispatcher(*aws, return_exceptions=False)", "asyncio._diag_dispatcher(*aws, return_exceptions=False)", "asyncio._angle_dispatcher(*aws, return_exceptions=False)", "asyncio._qr_dispatcher(*aws, return_exceptions=False)", "asyncio.getenv(*aws, return_exceptions=False)", "asyncio.vander(*aws, return_exceptions=False)", "asyncio.getmembers(*aws, return_exceptions=False)", "asyncio.addsitedir(*aws, return_exceptions=False)", "asyncio.tracer(*aws, return_exceptions=False)", "asyncio._flip_dispatcher(*aws, return_exceptions=False)", "asyncio._size_dispatcher(*aws, return_exceptions=False)"], "asyncio.get_event_loop()": ["get_event_loop", "asyncio._c_get_event_loop()", "asyncio._py_get_event_loop()", "asyncio.get_event_loop_policy()", "asyncio._get_loop()", "asyncio.new_event_loop()", "asyncio.set_event_loop()", "asyncio._init_event_loop_policy()", "asyncio.get_long_be()", "asyncio.get_qp_ctext()", "asyncio.eventplot()", "asyncio._get_plot_backend()", "asyncio.get_exec_path()", "asyncio.rebuild_event()", "asyncio._get_default_group()"], "asyncio.get_event_loop_policy()": ["get_event_loop_policy", "asyncio._py_get_event_loop()", "asyncio._init_event_loop_policy()", "asyncio.set_event_loop_policy()", "asyncio.get_event_loop()", "asyncio._c_get_event_loop()", "asyncio.new_event_loop()", "asyncio.set_event_loop()", "asyncio.getproxies_environment()", "asyncio._c__get_running_loop()", "asyncio._c_get_running_loop()", "asyncio._py__get_running_loop()", "asyncio.get_poly()", "asyncio._get_loop()", "asyncio._py_get_running_loop()"], "asyncio.get_running_loop()": ["get_running_loop", "asyncio._get_running_loop()", "asyncio._c__get_running_loop()", "asyncio._c_get_running_loop()", "asyncio._py__get_running_loop()", "asyncio._py_get_running_loop()", "asyncio._c__set_running_loop()", "asyncio._set_running_loop()", "asyncio._py__set_running_loop()", "asyncio._get_loop()", "asyncio.get_spawning_popen()", "asyncio.get_origin()", "asyncio._get_option()", "asyncio.get_quoted_string()", "asyncio.new_event_loop()"], "asyncio.iscoroutine(obj)": ["iscoroutine", "asyncio.isroutine(obj)", "asyncio.coroutine(obj)", "asyncio.iscoroutinefunction(obj)", "asyncio._format_coroutine(obj)", "asyncio.isfirstline(obj)", "asyncio.getcoroutinestate(obj)", "asyncio.getcoroutinelocals(obj)", "asyncio.WIFCONTINUED(obj)", "asyncio.is_scripting(obj)", "asyncio.isbuiltin(obj)", "asyncio.isfortran(obj)", "asyncio._outer_dispatcher(obj)", "asyncio.iscode(obj)", "asyncio.isfunction(obj)"], "asyncio.iscoroutinefunction(func)": ["iscoroutinefunction", "asyncio.iscoroutine(func)", "asyncio.isfunction(func)", "asyncio.isasyncgenfunction(func)", "asyncio.fromfunction(func)", "asyncio.isroutine(func)", "asyncio.coroutine(func)", "asyncio._format_coroutine(func)", "asyncio.isgeneratorfunction(func)", "asyncio._asof_function(func)", "asyncio._exit_function(func)", "asyncio._fromfunction_dispatcher(func)", "asyncio.find_function(func)", "asyncio._warn_unawaited_coroutine(func)", "asyncio._get_format_function(func)"], "asyncio.isfuture(obj)": ["isfuture", "asyncio.is_future(obj)", "asyncio._structure(obj)", "asyncio._chain_future(obj)", "asyncio.isframe(obj)", "asyncio.ensure_future(obj)", "asyncio.wrap_future(obj)", "asyncio._isfinite(obj)", "asyncio.is_tuple(obj)", "asyncio.signature(obj)", "asyncio.isroutine(obj)", "asyncio.gisfinite(obj)", "asyncio.isfortran(obj)", "asyncio.isfile(obj)", "asyncio.isreal(obj)"], "asyncio.new_event_loop()": ["new_event_loop", "asyncio.set_event_loop()", "asyncio.get_event_loop()", "asyncio._py_get_event_loop()", "asyncio.set_event_loop_policy()", "asyncio._c_get_event_loop()", "asyncio._get_loop()", "asyncio.get_event_loop_policy()", "asyncio.eventplot()", "asyncio._init_event_loop_policy()", "asyncio._test_selector_event()", "asyncio._get_running_loop()", "asyncio.get_running_loop()", "asyncio.new_method()", "asyncio.load_newobj_ex()"], "asyncio.open_connection()": ["open_connection", "asyncio.validate_map_location()", "asyncio.rc_context()", "asyncio.get_worker_info()", "asyncio.getnode()", "asyncio.token_hex()", "asyncio.colormode()", "asyncio.destroy_process_group()", "asyncio._assert_no_warnings_context()", "asyncio.makeObjectSeries()", "asyncio._get_plot_backend()", "asyncio.token_bytes()", "asyncio.get_backend()", "asyncio._assert_no_gc_cycles_context()", "asyncio.localcontext()"], "asyncio.open_connection(family=0)": ["open_connection", "asyncio.open_connection(family='0')", "asyncio.validate_map_location(family=0)", "asyncio.rc_context(family=0)", "asyncio.get_worker_info(family=0)", "asyncio.getnode(family=0)", "asyncio.token_hex(family=0)", "asyncio.colormode(family=0)", "asyncio.destroy_process_group(family=0)", "asyncio._assert_no_warnings_context(family=0)", "asyncio.makeObjectSeries(family=0)", "asyncio._get_plot_backend(family=0)", "asyncio.token_bytes(family=0)", "asyncio.get_backend(family=0)", "asyncio._assert_no_gc_cycles_context(family=0)"], "asyncio.open_connection(limit=None)": ["open_connection", "asyncio.open_connection(limit=None)", "asyncio.validate_map_location(limit=None)", "asyncio.rc_context(limit=None)", "asyncio.get_worker_info(limit=None)", "asyncio.getnode(limit=None)", "asyncio.token_hex(limit=None)", "asyncio.colormode(limit=None)", "asyncio.destroy_process_group(limit=None)", "asyncio._assert_no_warnings_context(limit=None)", "asyncio.makeObjectSeries(limit=None)", "asyncio._get_plot_backend(limit=None)", "asyncio.token_bytes(limit=None)", "asyncio.get_backend(limit=None)", "asyncio._assert_no_gc_cycles_context(limit=None)"], "asyncio.open_connection(loop=None)": ["open_connection", "asyncio.open_connection(loop=None)", "asyncio.validate_map_location(loop=None)", "asyncio.rc_context(loop=None)", "asyncio.get_worker_info(loop=None)", "asyncio.getnode(loop=None)", "asyncio.token_hex(loop=None)", "asyncio.colormode(loop=None)", "asyncio.destroy_process_group(loop=None)", "asyncio._assert_no_warnings_context(loop=None)", "asyncio.makeObjectSeries(loop=None)", "asyncio._get_plot_backend(loop=None)", "asyncio.token_bytes(loop=None)", "asyncio.get_backend(loop=None)", "asyncio._assert_no_gc_cycles_context(loop=None)"], "asyncio.open_connection(port=None)": ["open_connection", "asyncio.open_connection(port=None)", "asyncio.validate_map_location(port=None)", "asyncio.rc_context(port=None)", "asyncio.get_worker_info(port=None)", "asyncio.getnode(port=None)", "asyncio.token_hex(port=None)", "asyncio.colormode(port=None)", "asyncio.destroy_process_group(port=None)", "asyncio._assert_no_warnings_context(port=None)", "asyncio.makeObjectSeries(port=None)", "asyncio._get_plot_backend(port=None)", "asyncio.token_bytes(port=None)", "asyncio.get_backend(port=None)", "asyncio._assert_no_gc_cycles_context(port=None)"], "asyncio.open_connection(sock=None)": ["open_connection", "asyncio.open_connection(sock=None)", "asyncio.validate_map_location(sock=None)", "asyncio.rc_context(sock=None)", "asyncio.get_worker_info(sock=None)", "asyncio.getnode(sock=None)", "asyncio.token_hex(sock=None)", "asyncio.colormode(sock=None)", "asyncio.destroy_process_group(sock=None)", "asyncio._assert_no_warnings_context(sock=None)", "asyncio.makeObjectSeries(sock=None)", "asyncio._get_plot_backend(sock=None)", "asyncio.token_bytes(sock=None)", "asyncio.get_backend(sock=None)", "asyncio._assert_no_gc_cycles_context(sock=None)"], "asyncio.open_connection(ssl=None)": ["open_connection", "asyncio.open_connection(ssl=None)", "asyncio.validate_map_location(ssl=None)", "asyncio.rc_context(ssl=None)", "asyncio.get_worker_info(ssl=None)", "asyncio.getnode(ssl=None)", "asyncio.token_hex(ssl=None)", "asyncio.colormode(ssl=None)", "asyncio.destroy_process_group(ssl=None)", "asyncio._assert_no_warnings_context(ssl=None)", "asyncio.makeObjectSeries(ssl=None)", "asyncio._get_plot_backend(ssl=None)", "asyncio.token_bytes(ssl=None)", "asyncio.get_backend(ssl=None)", "asyncio._assert_no_gc_cycles_context(ssl=None)"], "asyncio.open_unix_connection(limit=None)": ["open_unix_connection", "asyncio.open_unix_connection(limit=None)", "asyncio.validate_map_location(limit=None)", "asyncio._assert_no_warnings_context(limit=None)", "asyncio.get_worker_info(limit=None)", "asyncio.localcontext(limit=None)", "asyncio._assert_no_gc_cycles_context(limit=None)", "asyncio.getnode(limit=None)", "asyncio.token_urlsafe(limit=None)", "asyncio._run_finalizers(limit=None)", "asyncio.destroy_process_group(limit=None)", "asyncio.token_hex(limit=None)", "asyncio.colormode(limit=None)", "asyncio.makeStringSeries(limit=None)", "asyncio.makeObjectSeries(limit=None)"], "asyncio.open_unix_connection(loop=None)": ["open_unix_connection", "asyncio.open_unix_connection(loop=None)", "asyncio.validate_map_location(loop=None)", "asyncio._assert_no_warnings_context(loop=None)", "asyncio.get_worker_info(loop=None)", "asyncio.localcontext(loop=None)", "asyncio._assert_no_gc_cycles_context(loop=None)", "asyncio.getnode(loop=None)", "asyncio.token_urlsafe(loop=None)", "asyncio._run_finalizers(loop=None)", "asyncio.destroy_process_group(loop=None)", "asyncio.token_hex(loop=None)", "asyncio.colormode(loop=None)", "asyncio.makeStringSeries(loop=None)", "asyncio.makeObjectSeries(loop=None)"], "asyncio.open_unix_connection(path=None, loop=None)": ["open_unix_connection", "asyncio.open_unix_connection(path=None, loop=None)", "asyncio.validate_map_location(path=None, loop=None)", "asyncio._assert_no_warnings_context(path=None, loop=None)", "asyncio.get_worker_info(path=None, loop=None)", "asyncio.localcontext(path=None, loop=None)", "asyncio._assert_no_gc_cycles_context(path=None, loop=None)", "asyncio.getnode(path=None, loop=None)", "asyncio.token_urlsafe(path=None, loop=None)", "asyncio._run_finalizers(path=None, loop=None)", "asyncio.destroy_process_group(path=None, loop=None)", "asyncio.token_hex(path=None, loop=None)", "asyncio.colormode(path=None, loop=None)", "asyncio.makeStringSeries(path=None, loop=None)", "asyncio.makeObjectSeries(path=None, loop=None)"], "asyncio.open_unix_connection(sock=None)": ["open_unix_connection", "asyncio.open_unix_connection(sock=None)", "asyncio.validate_map_location(sock=None)", "asyncio._assert_no_warnings_context(sock=None)", "asyncio.get_worker_info(sock=None)", "asyncio.localcontext(sock=None)", "asyncio._assert_no_gc_cycles_context(sock=None)", "asyncio.getnode(sock=None)", "asyncio.token_urlsafe(sock=None)", "asyncio._run_finalizers(sock=None)", "asyncio.destroy_process_group(sock=None)", "asyncio.token_hex(sock=None)", "asyncio.colormode(sock=None)", "asyncio.makeStringSeries(sock=None)", "asyncio.makeObjectSeries(sock=None)"], "asyncio.open_unix_connection(ssl=None)": ["open_unix_connection", "asyncio.open_unix_connection(ssl=None)", "asyncio.validate_map_location(ssl=None)", "asyncio._assert_no_warnings_context(ssl=None)", "asyncio.get_worker_info(ssl=None)", "asyncio.localcontext(ssl=None)", "asyncio._assert_no_gc_cycles_context(ssl=None)", "asyncio.getnode(ssl=None)", "asyncio.token_urlsafe(ssl=None)", "asyncio._run_finalizers(ssl=None)", "asyncio.destroy_process_group(ssl=None)", "asyncio.token_hex(ssl=None)", "asyncio.colormode(ssl=None)", "asyncio.makeStringSeries(ssl=None)", "asyncio.makeObjectSeries(ssl=None)"], "asyncio.run(coro, debug=False)": ["run", "asyncio.run(coro, debug=True)", "asyncio.round(coro, debug=False)", "asyncio.round_(coro, debug=False)", "asyncio.around(coro, debug=False)", "asyncio.triu(coro, debug=False)", "asyncio._group(coro, debug=False)", "asyncio.unique(coro, debug=False)", "asyncio._unique1d(coro, debug=False)", "asyncio.urlencode(coro, debug=False)", "asyncio.lru_cache(coro, debug=False)", "asyncio._sum_(coro, debug=False)", "asyncio._sum(coro, debug=False)", "asyncio._isna_array(coro, debug=False)", "asyncio._construction_repr(coro, debug=False)"], "asyncio.run_coroutine_threadsafe(coro, loop)": ["run_coroutine_threadsafe", "asyncio._warn_unawaited_coroutine(coro, loop)", "asyncio._format_coroutine(coro, loop)", "asyncio.getcoroutinestate(coro, loop)", "asyncio.current_thread(coro, loop)", "asyncio.iscoroutinefunction(coro, loop)", "asyncio.start_new_thread(coro, loop)", "asyncio._consecutive_return_inverse_true(coro, loop)", "asyncio.coroutine(coro, loop)", "asyncio.currentThread(coro, loop)", "asyncio._rmtree_unsafe(coro, loop)", "asyncio.raise_on_incompatible(coro, loop)", "asyncio._count_reduce_items(coro, loop)", "asyncio._grouping_intervals(coro, loop)", "asyncio.getcoroutinelocals(coro, loop)"], "asyncio.set_child_watcher(watcher)": ["set_child_watcher", "asyncio.get_child_watcher(watcher)", "asyncio.get_close_matches(watcher)", "asyncio._choose_dispatcher(watcher)", "asyncio.sched_setscheduler(watcher)", "asyncio._clip_dispatcher(watcher)", "asyncio._cond_dispatcher(watcher)", "asyncio._code_dispatcher(watcher)", "asyncio._allclose_dispatcher(watcher)", "asyncio.get_file_path(watcher)", "asyncio.prepare_child(watcher)", "asyncio._delete_dispatcher(watcher)", "asyncio._center_dispatcher(watcher)", "asyncio._dispatcher(watcher)", "asyncio._atleast_1d_dispatcher(watcher)"], "asyncio.set_event_loop(loop)": ["set_event_loop", "asyncio.new_event_loop(loop)", "asyncio.set_event_loop_policy(loop)", "asyncio.get_event_loop(loop)", "asyncio._py_get_event_loop(loop)", "asyncio.eventplot(loop)", "asyncio._test_selector_event(loop)", "asyncio._c_get_event_loop(loop)", "asyncio._get_loop(loop)", "asyncio.get_event_loop_policy(loop)", "asyncio._set_sentinel(loop)", "asyncio.set_loglevel(loop)", "asyncio._init_event_loop_policy(loop)", "asyncio.get_group_list(loop)", "asyncio.get_hook_stubs(loop)"], "asyncio.set_event_loop_policy(policy)": ["set_event_loop_policy", "asyncio.get_event_loop_policy(policy)", "asyncio.set_event_loop(policy)", "asyncio._init_event_loop_policy(policy)", "asyncio.new_event_loop(policy)", "asyncio._py_get_event_loop(policy)", "asyncio.get_event_loop(policy)", "asyncio.get_group_list(policy)", "asyncio._c__set_running_loop(policy)", "asyncio._py__get_running_loop(policy)", "asyncio._py__set_running_loop(policy)", "asyncio._py_get_running_loop(policy)", "asyncio._test_selector_event(policy)", "asyncio._set_running_loop(policy)", "asyncio._set_python_exit_flag(policy)"], "asyncio.shield(aw)": ["shield", "asyncio.as_completed(aw)", "asyncio.gather(aw)", "asyncio.ensure_future(aw)", "asyncio.wait(aw)", "asyncio.open_unix_connection(aw)", "asyncio.wrap_future(aw)", "asyncio.size(aw)", "asyncio._size(aw)", "asyncio.shapesize(aw)", "asyncio.filled(aw)", "asyncio.imread(aw)", "asyncio._field_accessor(aw)", "asyncio.as_strided(aw)", "asyncio.addsitedir(aw)"], "asyncio.shield(aw, loop=None)": ["shield", "asyncio.shield(aw, loop=None)", "asyncio.as_completed(aw, loop=None)", "asyncio.gather(aw, loop=None)", "asyncio.ensure_future(aw, loop=None)", "asyncio.wait(aw, loop=None)", "asyncio.open_unix_connection(aw, loop=None)", "asyncio.wrap_future(aw, loop=None)", "asyncio.size(aw, loop=None)", "asyncio._size(aw, loop=None)", "asyncio.shapesize(aw, loop=None)", "asyncio.filled(aw, loop=None)", "asyncio.imread(aw, loop=None)", "asyncio._field_accessor(aw, loop=None)", "asyncio.as_strided(aw, loop=None)"], "asyncio.sleep(delay)": ["sleep", "asyncio.setpos(delay)", "asyncio.squeeze(delay)", "asyncio.as_completed(delay)", "asyncio.size(delay)", "asyncio._size(delay)", "asyncio.flip(delay)", "asyncio.setlocale(delay)", "asyncio.strip(delay)", "asyncio.getabsfile(delay)", "asyncio.stdev(delay)", "asyncio.parse(delay)", "asyncio.splitlines(delay)", "asyncio.setposition(delay)", "asyncio.getenv(delay)"], "asyncio.sleep(delay, loop=None)": ["sleep", "asyncio.sleep(delay, loop=None)", "asyncio.setpos(delay, loop=None)", "asyncio.squeeze(delay, loop=None)", "asyncio.as_completed(delay, loop=None)", "asyncio.size(delay, loop=None)", "asyncio._size(delay, loop=None)", "asyncio.flip(delay, loop=None)", "asyncio.setlocale(delay, loop=None)", "asyncio.strip(delay, loop=None)", "asyncio.getabsfile(delay, loop=None)", "asyncio.stdev(delay, loop=None)", "asyncio.parse(delay, loop=None)", "asyncio.splitlines(delay, loop=None)", "asyncio.setposition(delay, loop=None)"], "asyncio.sleep(delay, result=None, loop=None)": ["sleep", "asyncio.sleep(delay, result=None, loop=None)", "asyncio.setpos(delay, result=None, loop=None)", "asyncio.squeeze(delay, result=None, loop=None)", "asyncio.as_completed(delay, result=None, loop=None)", "asyncio.size(delay, result=None, loop=None)", "asyncio._size(delay, result=None, loop=None)", "asyncio.flip(delay, result=None, loop=None)", "asyncio.setlocale(delay, result=None, loop=None)", "asyncio.strip(delay, result=None, loop=None)", "asyncio.getabsfile(delay, result=None, loop=None)", "asyncio.stdev(delay, result=None, loop=None)", "asyncio.parse(delay, result=None, loop=None)", "asyncio.splitlines(delay, result=None, loop=None)", "asyncio.setposition(delay, result=None, loop=None)"], "asyncio.start_server(client_connected_cb)": ["start_server", "asyncio._strip_dispatcher(client_connected_cb)", "asyncio.ParserCreate(client_connected_cb)", "asyncio._stack_dispatcher(client_connected_cb)", "asyncio.stack_effect(client_connected_cb)", "asyncio._stat(client_connected_cb)", "asyncio.extract_stack(client_connected_cb)", "asyncio.ensure_future(client_connected_cb)", "asyncio.lstat(client_connected_cb)", "asyncio.register_shape(client_connected_cb)", "asyncio._asfarray_dispatcher(client_connected_cb)", "asyncio._assert_warns_context(client_connected_cb)", "asyncio.xpath_tokenizer(client_connected_cb)", "asyncio.rstrip(client_connected_cb)", "asyncio.create_string_buffer(client_connected_cb)"], "asyncio.start_server(client_connected_cb, backlog=100)": ["start_server", "asyncio.start_server(client_connected_cb, backlog='100')", "asyncio._strip_dispatcher(client_connected_cb, backlog=100)", "asyncio.ParserCreate(client_connected_cb, backlog=100)", "asyncio._stack_dispatcher(client_connected_cb, backlog=100)", "asyncio.stack_effect(client_connected_cb, backlog=100)", "asyncio._stat(client_connected_cb, backlog=100)", "asyncio.extract_stack(client_connected_cb, backlog=100)", "asyncio.ensure_future(client_connected_cb, backlog=100)", "asyncio.lstat(client_connected_cb, backlog=100)", "asyncio.register_shape(client_connected_cb, backlog=100)", "asyncio._asfarray_dispatcher(client_connected_cb, backlog=100)", "asyncio._assert_warns_context(client_connected_cb, backlog=100)", "asyncio.xpath_tokenizer(client_connected_cb, backlog=100)", "asyncio.rstrip(client_connected_cb, backlog=100)"], "asyncio.start_server(client_connected_cb, host=None)": ["start_server", "asyncio.start_server(client_connected_cb, host=None)", "asyncio._strip_dispatcher(client_connected_cb, host=None)", "asyncio.ParserCreate(client_connected_cb, host=None)", "asyncio._stack_dispatcher(client_connected_cb, host=None)", "asyncio.stack_effect(client_connected_cb, host=None)", "asyncio._stat(client_connected_cb, host=None)", "asyncio.extract_stack(client_connected_cb, host=None)", "asyncio.ensure_future(client_connected_cb, host=None)", "asyncio.lstat(client_connected_cb, host=None)", "asyncio.register_shape(client_connected_cb, host=None)", "asyncio._asfarray_dispatcher(client_connected_cb, host=None)", "asyncio._assert_warns_context(client_connected_cb, host=None)", "asyncio.xpath_tokenizer(client_connected_cb, host=None)", "asyncio.rstrip(client_connected_cb, host=None)"], "asyncio.start_server(client_connected_cb, limit=None)": ["start_server", "asyncio.start_server(client_connected_cb, limit=None)", "asyncio._strip_dispatcher(client_connected_cb, limit=None)", "asyncio.ParserCreate(client_connected_cb, limit=None)", "asyncio._stack_dispatcher(client_connected_cb, limit=None)", "asyncio.stack_effect(client_connected_cb, limit=None)", "asyncio._stat(client_connected_cb, limit=None)", "asyncio.extract_stack(client_connected_cb, limit=None)", "asyncio.ensure_future(client_connected_cb, limit=None)", "asyncio.lstat(client_connected_cb, limit=None)", "asyncio.register_shape(client_connected_cb, limit=None)", "asyncio._asfarray_dispatcher(client_connected_cb, limit=None)", "asyncio._assert_warns_context(client_connected_cb, limit=None)", "asyncio.xpath_tokenizer(client_connected_cb, limit=None)", "asyncio.rstrip(client_connected_cb, limit=None)"], "asyncio.start_server(client_connected_cb, port=None)": ["start_server", "asyncio.start_server(client_connected_cb, port=None)", "asyncio._strip_dispatcher(client_connected_cb, port=None)", "asyncio.ParserCreate(client_connected_cb, port=None)", "asyncio._stack_dispatcher(client_connected_cb, port=None)", "asyncio.stack_effect(client_connected_cb, port=None)", "asyncio._stat(client_connected_cb, port=None)", "asyncio.extract_stack(client_connected_cb, port=None)", "asyncio.ensure_future(client_connected_cb, port=None)", "asyncio.lstat(client_connected_cb, port=None)", "asyncio.register_shape(client_connected_cb, port=None)", "asyncio._asfarray_dispatcher(client_connected_cb, port=None)", "asyncio._assert_warns_context(client_connected_cb, port=None)", "asyncio.xpath_tokenizer(client_connected_cb, port=None)", "asyncio.rstrip(client_connected_cb, port=None)"], "asyncio.start_server(client_connected_cb, ssl=None)": ["start_server", "asyncio.start_server(client_connected_cb, ssl=None)", "asyncio._strip_dispatcher(client_connected_cb, ssl=None)", "asyncio.ParserCreate(client_connected_cb, ssl=None)", "asyncio._stack_dispatcher(client_connected_cb, ssl=None)", "asyncio.stack_effect(client_connected_cb, ssl=None)", "asyncio._stat(client_connected_cb, ssl=None)", "asyncio.extract_stack(client_connected_cb, ssl=None)", "asyncio.ensure_future(client_connected_cb, ssl=None)", "asyncio.lstat(client_connected_cb, ssl=None)", "asyncio.register_shape(client_connected_cb, ssl=None)", "asyncio._asfarray_dispatcher(client_connected_cb, ssl=None)", "asyncio._assert_warns_context(client_connected_cb, ssl=None)", "asyncio.xpath_tokenizer(client_connected_cb, ssl=None)", "asyncio.rstrip(client_connected_cb, ssl=None)"], "asyncio.start_unix_server(client_connected_cb, backlog=100)": ["start_unix_server", "asyncio.start_unix_server(client_connected_cb, backlog='100')", "asyncio.unix_getpass(client_connected_cb, backlog=100)", "asyncio._strip_dispatcher(client_connected_cb, backlog=100)", "asyncio.raw_unicode_escape_decode(client_connected_cb, backlog=100)", "asyncio.raw_unicode_escape_encode(client_connected_cb, backlog=100)", "asyncio.unicode_escape_decode(client_connected_cb, backlog=100)", "asyncio.create_unicode_buffer(client_connected_cb, backlog=100)", "asyncio.unicode_escape_encode(client_connected_cb, backlog=100)", "asyncio.create_dynamic(client_connected_cb, backlog=100)", "asyncio.unicode_internal_encode(client_connected_cb, backlog=100)", "asyncio.unicode_internal_decode(client_connected_cb, backlog=100)", "asyncio.makeStringIndex(client_connected_cb, backlog=100)", "asyncio._assert_warns_context(client_connected_cb, backlog=100)", "asyncio.rstrip(client_connected_cb, backlog=100)"], "asyncio.start_unix_server(client_connected_cb, ssl=None)": ["start_unix_server", "asyncio.start_unix_server(client_connected_cb, ssl=None)", "asyncio.unix_getpass(client_connected_cb, ssl=None)", "asyncio._strip_dispatcher(client_connected_cb, ssl=None)", "asyncio.raw_unicode_escape_decode(client_connected_cb, ssl=None)", "asyncio.raw_unicode_escape_encode(client_connected_cb, ssl=None)", "asyncio.unicode_escape_decode(client_connected_cb, ssl=None)", "asyncio.create_unicode_buffer(client_connected_cb, ssl=None)", "asyncio.unicode_escape_encode(client_connected_cb, ssl=None)", "asyncio.create_dynamic(client_connected_cb, ssl=None)", "asyncio.unicode_internal_encode(client_connected_cb, ssl=None)", "asyncio.unicode_internal_decode(client_connected_cb, ssl=None)", "asyncio.makeStringIndex(client_connected_cb, ssl=None)", "asyncio._assert_warns_context(client_connected_cb, ssl=None)", "asyncio.rstrip(client_connected_cb, ssl=None)"], "asyncio.subprocess.DEVNULL": ["asyncio.subprocess.DEVNULL"], "asyncio.subprocess.PIPE": ["asyncio.subprocess.PIPE"], "asyncio.subprocess.Process": ["asyncio.subprocess.Process"], "asyncio.wait(aws)": ["wait", "asyncio._wait(aws)", "asyncio.wait4(aws)", "asyncio.wait3(aws)", "asyncio._wrapit(aws)", "asyncio.waitid(aws)", "asyncio.what(aws)", "asyncio.sigwait(aws)", "asyncio.waitpid(aws)", "asyncio.write(aws)", "asyncio.width(aws)", "asyncio.at(aws)", "asyncio.wait_for(aws)", "asyncio._wait_all(aws)", "asyncio.pwrite(aws)"], "asyncio.wait(aws, loop=None)": ["wait", "asyncio.wait(aws, loop=None)", "asyncio._wait(aws, loop=None)", "asyncio.wait4(aws, loop=None)", "asyncio.wait3(aws, loop=None)", "asyncio._wrapit(aws, loop=None)", "asyncio.waitid(aws, loop=None)", "asyncio.what(aws, loop=None)", "asyncio.sigwait(aws, loop=None)", "asyncio.waitpid(aws, loop=None)", "asyncio.write(aws, loop=None)", "asyncio.width(aws, loop=None)", "asyncio.at(aws, loop=None)", "asyncio.wait_for(aws, loop=None)", "asyncio._wait_all(aws, loop=None)"], "asyncio.wait(aws, loop=None, return_when=ALL_COMPLETED)": ["wait", "asyncio.wait(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio._wait(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio.wait4(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio.wait3(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio._wrapit(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio.waitid(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio.what(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio.sigwait(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio.waitpid(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio.write(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio.width(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio.at(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio.wait_for(aws, loop=None, return_when=ALL_COMPLETED)", "asyncio._wait_all(aws, loop=None, return_when=ALL_COMPLETED)"], "asyncio.wait(aws, loop=None, timeout=None)": ["wait", "asyncio.wait(aws, loop=None, timeout=None)", "asyncio._wait(aws, loop=None, timeout=None)", "asyncio.wait4(aws, loop=None, timeout=None)", "asyncio.wait3(aws, loop=None, timeout=None)", "asyncio._wrapit(aws, loop=None, timeout=None)", "asyncio.waitid(aws, loop=None, timeout=None)", "asyncio.what(aws, loop=None, timeout=None)", "asyncio.sigwait(aws, loop=None, timeout=None)", "asyncio.waitpid(aws, loop=None, timeout=None)", "asyncio.write(aws, loop=None, timeout=None)", "asyncio.width(aws, loop=None, timeout=None)", "asyncio.at(aws, loop=None, timeout=None)", "asyncio.wait_for(aws, loop=None, timeout=None)", "asyncio._wait_all(aws, loop=None, timeout=None)"], "asyncio.wait(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)": ["wait", "asyncio.wait(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio._wait(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio.wait4(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio.wait3(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio._wrapit(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio.waitid(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio.what(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio.sigwait(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio.waitpid(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio.write(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio.width(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio.at(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio.wait_for(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)", "asyncio._wait_all(aws, loop=None, timeout=None, return_when=ALL_COMPLETED)"], "asyncio.wait(aws, timeout=None)": ["wait", "asyncio.wait(aws, timeout=None)", "asyncio._wait(aws, timeout=None)", "asyncio.wait4(aws, timeout=None)", "asyncio.wait3(aws, timeout=None)", "asyncio._wrapit(aws, timeout=None)", "asyncio.waitid(aws, timeout=None)", "asyncio.what(aws, timeout=None)", "asyncio.sigwait(aws, timeout=None)", "asyncio.waitpid(aws, timeout=None)", "asyncio.write(aws, timeout=None)", "asyncio.width(aws, timeout=None)", "asyncio.at(aws, timeout=None)", "asyncio.wait_for(aws, timeout=None)", "asyncio._wait_all(aws, timeout=None)"], "asyncio.wait_for(aw, timeout)": ["wait_for", "asyncio.start_unix_server(aw, timeout)", "asyncio.wait(aw, timeout)", "asyncio.open_connection(aw, timeout)", "asyncio.hist_frame(aw, timeout)", "asyncio.format_time(aw, timeout)", "asyncio._iter_filter(aw, timeout)", "asyncio.write_array(aw, timeout)", "asyncio.gradient(aw, timeout)", "asyncio.sleep(aw, timeout)", "asyncio.register_at_fork(aw, timeout)", "asyncio.sort(aw, timeout)", "asyncio.formatargspec(aw, timeout)", "asyncio.fwalk(aw, timeout)", "asyncio._full_with_like(aw, timeout)"], "asyncio.wait_for(aw, timeout, loop=None)": ["wait_for", "asyncio.wait_for(aw, timeout, loop=None)", "asyncio.start_unix_server(aw, timeout, loop=None)", "asyncio.wait(aw, timeout, loop=None)", "asyncio.open_connection(aw, timeout, loop=None)", "asyncio.hist_frame(aw, timeout, loop=None)", "asyncio.format_time(aw, timeout, loop=None)", "asyncio._iter_filter(aw, timeout, loop=None)", "asyncio.write_array(aw, timeout, loop=None)", "asyncio.gradient(aw, timeout, loop=None)", "asyncio.sleep(aw, timeout, loop=None)", "asyncio.register_at_fork(aw, timeout, loop=None)", "asyncio.sort(aw, timeout, loop=None)", "asyncio.formatargspec(aw, timeout, loop=None)", "asyncio.fwalk(aw, timeout, loop=None)"], "asyncio.wrap_future(future)": ["wrap_future", "asyncio.ensure_future(future)", "asyncio.gather(future)", "asyncio.wait(future)", "asyncio.open_unix_connection(future)", "asyncio.as_completed(future)", "asyncio.shield(future)", "asyncio.unwrap(future)", "asyncio.wrap_socket(future)", "asyncio.read_feather(future)", "asyncio._view_wrapper(future)", "asyncio.trapz(future)", "asyncio._structure(future)", "asyncio._unwrap_dispatcher(future)", "asyncio._raw_input(future)"], "asyncio.wrap_future(future, loop=None)": ["wrap_future", "asyncio.wrap_future(future, loop=None)", "asyncio.ensure_future(future, loop=None)", "asyncio.gather(future, loop=None)", "asyncio.wait(future, loop=None)", "asyncio.open_unix_connection(future, loop=None)", "asyncio.as_completed(future, loop=None)", "asyncio.shield(future, loop=None)", "asyncio.unwrap(future, loop=None)", "asyncio.wrap_socket(future, loop=None)", "asyncio.read_feather(future, loop=None)", "asyncio._view_wrapper(future, loop=None)", "asyncio.trapz(future, loop=None)", "asyncio._structure(future, loop=None)", "asyncio._unwrap_dispatcher(future, loop=None)"], "asyncore.dispatcher": ["asyncore.dispatcher"], "asyncore.dispatcher_with_send": ["asyncore.dispatcher_with_send"], "asyncore.loop()": ["loop", "asyncore.lookup()", "asyncore.spy()", "asyncore.decompress()", "asyncore.load()", "asyncore.glob()", "asyncore._clip()", "asyncore._group()", "asyncore.loads()", "asyncore.iglob()", "asyncore.prepare()", "asyncore.locate()", "asyncore._genops()", "asyncore.pcolor()", "asyncore.get_python_lib()"], "asyncore.loop(timeout)": ["loop", "asyncore.lookup(timeout)", "asyncore.spy(timeout)", "asyncore.decompress(timeout)", "asyncore.load(timeout)", "asyncore.glob(timeout)", "asyncore._clip(timeout)", "asyncore._group(timeout)", "asyncore.loads(timeout)", "asyncore.iglob(timeout)", "asyncore.prepare(timeout)", "asyncore.locate(timeout)", "asyncore._genops(timeout)", "asyncore.pcolor(timeout)", "asyncore.get_python_lib(timeout)"], "asyncore.loop(timeout, use_poll)": ["loop", "asyncore.lookup(timeout, use_poll)", "asyncore.spy(timeout, use_poll)", "asyncore.decompress(timeout, use_poll)", "asyncore.load(timeout, use_poll)", "asyncore.glob(timeout, use_poll)", "asyncore._clip(timeout, use_poll)", "asyncore._group(timeout, use_poll)", "asyncore.loads(timeout, use_poll)", "asyncore.iglob(timeout, use_poll)", "asyncore.prepare(timeout, use_poll)", "asyncore.locate(timeout, use_poll)", "asyncore._genops(timeout, use_poll)", "asyncore.pcolor(timeout, use_poll)", "asyncore.get_python_lib(timeout, use_poll)"], "asyncore.loop(timeout, use_poll, map)": ["loop", "asyncore.lookup(timeout, use_poll, map)", "asyncore.spy(timeout, use_poll, map)", "asyncore.decompress(timeout, use_poll, map)", "asyncore.load(timeout, use_poll, map)", "asyncore.glob(timeout, use_poll, map)", "asyncore._clip(timeout, use_poll, map)", "asyncore._group(timeout, use_poll, map)", "asyncore.loads(timeout, use_poll, map)", "asyncore.iglob(timeout, use_poll, map)", "asyncore.prepare(timeout, use_poll, map)", "asyncore.locate(timeout, use_poll, map)", "asyncore._genops(timeout, use_poll, map)", "asyncore.pcolor(timeout, use_poll, map)", "asyncore.get_python_lib(timeout, use_poll, map)"], "asyncore.loop(timeout, use_poll, map, count)": ["loop", "asyncore.lookup(timeout, use_poll, map, count)", "asyncore.spy(timeout, use_poll, map, count)", "asyncore.decompress(timeout, use_poll, map, count)", "asyncore.load(timeout, use_poll, map, count)", "asyncore.glob(timeout, use_poll, map, count)", "asyncore._clip(timeout, use_poll, map, count)", "asyncore._group(timeout, use_poll, map, count)", "asyncore.loads(timeout, use_poll, map, count)", "asyncore.iglob(timeout, use_poll, map, count)", "asyncore.prepare(timeout, use_poll, map, count)", "asyncore.locate(timeout, use_poll, map, count)", "asyncore._genops(timeout, use_poll, map, count)", "asyncore.pcolor(timeout, use_poll, map, count)", "asyncore.get_python_lib(timeout, use_poll, map, count)"], "atexit.register(func, *args, **kwargs)": ["register"], "atexit.unregister(func)": ["unregister"], "audioop.add(fragment1, fragment2, width)": ["add"], "audioop.alaw2lin(fragment, width)": ["alaw2lin"], "audioop.avg(fragment, width)": ["avg"], "audioop.avgpp(fragment, width)": ["avgpp"], "audioop.bias(fragment, width, bias)": ["bias"], "audioop.byteswap(fragment, width)": ["byteswap"], "audioop.cross(fragment, width)": ["cross"], "audioop.error": ["audioop.error"], "audioop.findfactor(fragment, reference)": ["findfactor"], "audioop.findfit(fragment, reference)": ["findfit"], "audioop.findmax(fragment, length)": ["findmax"], "audioop.getsample(fragment, width, index)": ["getsample"], "audioop.lin2adpcm(fragment, width, state)": ["lin2adpcm"], "audioop.lin2alaw(fragment, width)": ["lin2alaw"], "audioop.lin2lin(fragment, width, newwidth)": ["lin2lin"], "audioop.max(fragment, width)": ["max"], "audioop.maxpp(fragment, width)": ["maxpp"], "audioop.minmax(fragment, width)": ["minmax"], "audioop.mul(fragment, width, factor)": ["mul"], "audioop.ratecv(fragment, width, nchannels, inrate, outrate, state)": ["ratecv"], "audioop.reverse(fragment, width)": ["reverse"], "audioop.rms(fragment, width)": ["rms"], "audioop.tomono(fragment, width, lfactor, rfactor)": ["tomono"], "audioop.tostereo(fragment, width, lfactor, rfactor)": ["tostereo"], "audioop.ulaw2lin(fragment, width)": ["ulaw2lin"], "auto.args": ["auto.args"], "auto.code": ["auto.code"], "auto.end": ["auto.end"], "auto.errno": ["auto.errno"], "auto.filename": ["auto.filename"], "auto.filename2": ["auto.filename2"], "auto.object": ["auto.object"], "auto.reason": ["auto.reason"], "auto.start": ["auto.start"], "auto.winerror": ["auto.winerror"], "auto.with_traceback(tb)": ["with_traceback"], "babyl.get_file(key)": ["get_file"], "babyl.get_labels()": ["get_labels"], "babyl_message.add_label(label)": ["add_label"], "babyl_message.get_labels()": ["get_labels"], "babyl_message.remove_label(label)": ["remove_label"], "babyl_message.set_labels(labels)": ["set_labels"], "babyl_message.set_visible(visible)": ["set_visible"], "babyl_message.update_visible()": ["update_visible"], "barrier.abort()": ["abort"], "barrier.broken": ["barrier.broken"], "barrier.n_waiting": ["barrier.n_waiting"], "barrier.parties": ["barrier.parties"], "barrier.wait()": ["wait"], "barrier.wait(timeout=None)": ["wait", "barrier.wait(timeout=None)"], "base64.a85decode(b, adobe=False)": ["a85decode", "base64.a85decode(b, adobe=True)", "base64.a85encode(b, adobe=False)", "base64.b85encode(b, adobe=False)", "base64.b16decode(b, adobe=False)", "base64.decodestring(b, adobe=False)", "base64.decode(b, adobe=False)", "base64.encodestring(b, adobe=False)", "base64._encodestring(b, adobe=False)", "base64.pad_sequence(b, adobe=False)", "base64.close_all(b, adobe=False)", "base64.utf_8_decode(b, adobe=False)", "base64.b64decode(b, adobe=False)", "base64.b32decode(b, adobe=False)", "base64.b85decode(b, adobe=False)"], "base64.a85decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\v')": ["a85decode", "base64.a85decode(b, adobe=True, ignorechars=b' \\t\\n\\r\\x0b')", "base64.a85encode(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b85encode(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b16decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.decodestring(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.encodestring(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64._encodestring(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.pad_sequence(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.close_all(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.utf_8_decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b64decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b32decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b85decode(b, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')"], "base64.a85decode(b, foldspaces=False)": ["a85decode", "base64.a85decode(b, foldspaces=True)", "base64.a85encode(b, foldspaces=False)", "base64.b85encode(b, foldspaces=False)", "base64.b16decode(b, foldspaces=False)", "base64.decodestring(b, foldspaces=False)", "base64.decode(b, foldspaces=False)", "base64.encodestring(b, foldspaces=False)", "base64._encodestring(b, foldspaces=False)", "base64.pad_sequence(b, foldspaces=False)", "base64.close_all(b, foldspaces=False)", "base64.utf_8_decode(b, foldspaces=False)", "base64.b64decode(b, foldspaces=False)", "base64.b32decode(b, foldspaces=False)", "base64.b85decode(b, foldspaces=False)"], "base64.a85decode(b, foldspaces=False, adobe=False)": ["a85decode", "base64.a85decode(b, foldspaces=True, adobe=True)", "base64.a85encode(b, foldspaces=False, adobe=False)", "base64.b85encode(b, foldspaces=False, adobe=False)", "base64.b16decode(b, foldspaces=False, adobe=False)", "base64.decodestring(b, foldspaces=False, adobe=False)", "base64.decode(b, foldspaces=False, adobe=False)", "base64.encodestring(b, foldspaces=False, adobe=False)", "base64._encodestring(b, foldspaces=False, adobe=False)", "base64.pad_sequence(b, foldspaces=False, adobe=False)", "base64.close_all(b, foldspaces=False, adobe=False)", "base64.utf_8_decode(b, foldspaces=False, adobe=False)", "base64.b64decode(b, foldspaces=False, adobe=False)", "base64.b32decode(b, foldspaces=False, adobe=False)", "base64.b85decode(b, foldspaces=False, adobe=False)"], "base64.a85decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v')": ["a85decode", "base64.a85decode(b, foldspaces=True, adobe=True, ignorechars=b' \\t\\n\\r\\x0b')", "base64.a85encode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b85encode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b16decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.decodestring(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.encodestring(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64._encodestring(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.pad_sequence(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.close_all(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.utf_8_decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b64decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b32decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b85decode(b, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\x0b')"], "base64.a85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\v')": ["a85decode", "base64.a85decode(b, foldspaces=True, ignorechars=b' \\t\\n\\r\\x0b')", "base64.a85encode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b85encode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b16decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.decodestring(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.encodestring(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64._encodestring(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.pad_sequence(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.close_all(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.utf_8_decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b64decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b32decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b85decode(b, foldspaces=False, ignorechars=b' \\t\\n\\r\\x0b')"], "base64.a85decode(b, ignorechars=b' \\t\\n\\r\\v')": ["a85decode", "base64.a85encode(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b85encode(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b16decode(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.decodestring(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.decode(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.encodestring(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64._encodestring(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.pad_sequence(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.close_all(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.utf_8_decode(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b64decode(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b32decode(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.b85decode(b, ignorechars=b' \\t\\n\\r\\x0b')", "base64.resolve(b, ignorechars=b' \\t\\n\\r\\x0b')"], "base64.a85encode(b, foldspaces=False)": ["a85encode", "base64.a85encode(b, foldspaces=True)", "base64.a85decode(b, foldspaces=False)", "base64.b85encode(b, foldspaces=False)", "base64._85encode(b, foldspaces=False)", "base64.encodestring(b, foldspaces=False)", "base64._encodestring(b, foldspaces=False)", "base64.b16decode(b, foldspaces=False)", "base64.decodestring(b, foldspaces=False)", "base64.pad_sequence(b, foldspaces=False)", "base64.encode(b, foldspaces=False)", "base64.close_all(b, foldspaces=False)", "base64.angle(b, foldspaces=False)", "base64._can_coerce_all(b, foldspaces=False)", "base64.decode(b, foldspaces=False)"], "base64.a85encode(b, foldspaces=False, adobe=False)": ["a85encode", "base64.a85encode(b, foldspaces=True, adobe=True)", "base64.a85decode(b, foldspaces=False, adobe=False)", "base64.b85encode(b, foldspaces=False, adobe=False)", "base64._85encode(b, foldspaces=False, adobe=False)", "base64.encodestring(b, foldspaces=False, adobe=False)", "base64._encodestring(b, foldspaces=False, adobe=False)", "base64.b16decode(b, foldspaces=False, adobe=False)", "base64.decodestring(b, foldspaces=False, adobe=False)", "base64.pad_sequence(b, foldspaces=False, adobe=False)", "base64.encode(b, foldspaces=False, adobe=False)", "base64.close_all(b, foldspaces=False, adobe=False)", "base64.angle(b, foldspaces=False, adobe=False)", "base64._can_coerce_all(b, foldspaces=False, adobe=False)", "base64.decode(b, foldspaces=False, adobe=False)"], "base64.a85encode(b, foldspaces=False, pad=False)": ["a85encode", "base64.a85encode(b, foldspaces=True, pad=True)", "base64.a85decode(b, foldspaces=False, pad=False)", "base64.b85encode(b, foldspaces=False, pad=False)", "base64._85encode(b, foldspaces=False, pad=False)", "base64.encodestring(b, foldspaces=False, pad=False)", "base64._encodestring(b, foldspaces=False, pad=False)", "base64.b16decode(b, foldspaces=False, pad=False)", "base64.decodestring(b, foldspaces=False, pad=False)", "base64.pad_sequence(b, foldspaces=False, pad=False)", "base64.encode(b, foldspaces=False, pad=False)", "base64.close_all(b, foldspaces=False, pad=False)", "base64.angle(b, foldspaces=False, pad=False)", "base64._can_coerce_all(b, foldspaces=False, pad=False)", "base64.decode(b, foldspaces=False, pad=False)"], "base64.a85encode(b, foldspaces=False, wrapcol=0)": ["a85encode", "base64.a85encode(b, foldspaces=True, wrapcol=0)", "base64.a85encode(b, foldspaces=False, wrapcol='0')", "base64.a85decode(b, foldspaces=False, wrapcol=0)", "base64.b85encode(b, foldspaces=False, wrapcol=0)", "base64._85encode(b, foldspaces=False, wrapcol=0)", "base64.encodestring(b, foldspaces=False, wrapcol=0)", "base64._encodestring(b, foldspaces=False, wrapcol=0)", "base64.b16decode(b, foldspaces=False, wrapcol=0)", "base64.decodestring(b, foldspaces=False, wrapcol=0)", "base64.pad_sequence(b, foldspaces=False, wrapcol=0)", "base64.encode(b, foldspaces=False, wrapcol=0)", "base64.close_all(b, foldspaces=False, wrapcol=0)", "base64.angle(b, foldspaces=False, wrapcol=0)", "base64._can_coerce_all(b, foldspaces=False, wrapcol=0)"], "base64.a85encode(b, pad=False)": ["a85encode", "base64.a85encode(b, pad=True)", "base64.a85decode(b, pad=False)", "base64.b85encode(b, pad=False)", "base64._85encode(b, pad=False)", "base64.encodestring(b, pad=False)", "base64._encodestring(b, pad=False)", "base64.b16decode(b, pad=False)", "base64.decodestring(b, pad=False)", "base64.pad_sequence(b, pad=False)", "base64.encode(b, pad=False)", "base64.close_all(b, pad=False)", "base64.angle(b, pad=False)", "base64._can_coerce_all(b, pad=False)", "base64.decode(b, pad=False)"], "base64.a85encode(b, wrapcol=0)": ["a85encode", "base64.a85encode(b, wrapcol='0')", "base64.a85decode(b, wrapcol=0)", "base64.b85encode(b, wrapcol=0)", "base64._85encode(b, wrapcol=0)", "base64.encodestring(b, wrapcol=0)", "base64._encodestring(b, wrapcol=0)", "base64.b16decode(b, wrapcol=0)", "base64.decodestring(b, wrapcol=0)", "base64.pad_sequence(b, wrapcol=0)", "base64.encode(b, wrapcol=0)", "base64.close_all(b, wrapcol=0)", "base64.angle(b, wrapcol=0)", "base64._can_coerce_all(b, wrapcol=0)", "base64.decode(b, wrapcol=0)"], "base64.a85encode(b, wrapcol=0, pad=False)": ["a85encode", "base64.a85encode(b, wrapcol=0, pad=True)", "base64.a85encode(b, wrapcol='0', pad=False)", "base64.a85decode(b, wrapcol=0, pad=False)", "base64.b85encode(b, wrapcol=0, pad=False)", "base64._85encode(b, wrapcol=0, pad=False)", "base64.encodestring(b, wrapcol=0, pad=False)", "base64._encodestring(b, wrapcol=0, pad=False)", "base64.b16decode(b, wrapcol=0, pad=False)", "base64.decodestring(b, wrapcol=0, pad=False)", "base64.pad_sequence(b, wrapcol=0, pad=False)", "base64.encode(b, wrapcol=0, pad=False)", "base64.close_all(b, wrapcol=0, pad=False)", "base64.angle(b, wrapcol=0, pad=False)", "base64._can_coerce_all(b, wrapcol=0, pad=False)"], "base64.b16decode(s)": ["b16decode", "base64.b32decode(s)", "base64.a85decode(s)", "base64.b85encode(s)", "base64.decodestring(s)", "base64.urlencode(s)", "base64.a85encode(s)", "base64.decompress(s)", "base64.encodestring(s)", "base64.byte_compile(s)", "base64._encodestring(s)", "base64._remove_nan_1d(s)", "base64.resolve(s)", "base64.compile(s)", "base64.pad_sequence(s)"], "base64.b16decode(s, casefold=False)": ["b16decode", "base64.b16decode(s, casefold=True)", "base64.b32decode(s, casefold=False)", "base64.a85decode(s, casefold=False)", "base64.b85encode(s, casefold=False)", "base64.decodestring(s, casefold=False)", "base64.urlencode(s, casefold=False)", "base64.a85encode(s, casefold=False)", "base64.decompress(s, casefold=False)", "base64.encodestring(s, casefold=False)", "base64.byte_compile(s, casefold=False)", "base64._encodestring(s, casefold=False)", "base64._remove_nan_1d(s, casefold=False)", "base64.resolve(s, casefold=False)", "base64.compile(s, casefold=False)"], "base64.b32decode(s)": ["b32decode", "base64.b16decode(s)", "base64.b85encode(s)", "base64.decodestring(s)", "base64.decompress(s)", "base64.resolve(s)", "base64.compile(s)", "base64.body_line_iterator(s)", "base64._remove_nan_1d(s)", "base64.trimcoef(s)", "base64.close_all(s)", "base64.debug_src(s)", "base64.broadcast_object_list(s)", "base64._concat_datetime(s)", "base64._log_modified_bessel_fn(s)"], "base64.b32decode(s, casefold=False)": ["b32decode", "base64.b32decode(s, casefold=True)", "base64.b16decode(s, casefold=False)", "base64.b85encode(s, casefold=False)", "base64.decodestring(s, casefold=False)", "base64.decompress(s, casefold=False)", "base64.resolve(s, casefold=False)", "base64.compile(s, casefold=False)", "base64.body_line_iterator(s, casefold=False)", "base64._remove_nan_1d(s, casefold=False)", "base64.trimcoef(s, casefold=False)", "base64.close_all(s, casefold=False)", "base64.debug_src(s, casefold=False)", "base64.broadcast_object_list(s, casefold=False)", "base64._concat_datetime(s, casefold=False)"], "base64.b32decode(s, casefold=False, map01=None)": ["b32decode", "base64.b32decode(s, casefold=True, map01=None)", "base64.b16decode(s, casefold=False, map01=None)", "base64.b85encode(s, casefold=False, map01=None)", "base64.decodestring(s, casefold=False, map01=None)", "base64.decompress(s, casefold=False, map01=None)", "base64.resolve(s, casefold=False, map01=None)", "base64.compile(s, casefold=False, map01=None)", "base64.body_line_iterator(s, casefold=False, map01=None)", "base64._remove_nan_1d(s, casefold=False, map01=None)", "base64.trimcoef(s, casefold=False, map01=None)", "base64.close_all(s, casefold=False, map01=None)", "base64.debug_src(s, casefold=False, map01=None)", "base64.broadcast_object_list(s, casefold=False, map01=None)", "base64._concat_datetime(s, casefold=False, map01=None)"], "base64.b32encode(s)": ["b32encode", "base64.b32decode(s)", "base64._bencode(s)", "base64.encode_b(s)", "base64._encode(s)", "base64.encode(s)", "base64.b16encode(s)", "base64.b64encode(s)", "base64.b85encode(s)", "base64._qencode(s)", "base64.utf_32_encode(s)", "base64.encode_q(s)", "base64.fsencode(s)", "base64._85encode(s)", "base64.decode_b(s)"], "base64.b64decode(s)": ["b64decode", "base64.b64encode(s)", "base64.encode(s)", "base64.utf_16_decode(s)", "base64._decode_line(s)", "base64.ascii_decode(s)", "base64.utf_8_decode(s)", "base64.utf_7_decode(s)", "base64.utf_16_ex_decode(s)", "base64.utf_16_be_decode(s)", "base64.utf_16_le_decode(s)", "base64.utf_32_be_decode(s)", "base64.escape_decode(s)", "base64.utf_16_encode(s)", "base64.utf_32_decode(s)"], "base64.b64decode(s, altchars=None)": ["b64decode", "base64.b64decode(s, altchars=None)", "base64.b64encode(s, altchars=None)", "base64.encode(s, altchars=None)", "base64.utf_16_decode(s, altchars=None)", "base64._decode_line(s, altchars=None)", "base64.ascii_decode(s, altchars=None)", "base64.utf_8_decode(s, altchars=None)", "base64.utf_7_decode(s, altchars=None)", "base64.utf_16_ex_decode(s, altchars=None)", "base64.utf_16_be_decode(s, altchars=None)", "base64.utf_16_le_decode(s, altchars=None)", "base64.utf_32_be_decode(s, altchars=None)", "base64.escape_decode(s, altchars=None)", "base64.utf_16_encode(s, altchars=None)"], "base64.b64decode(s, altchars=None, validate=False)": ["b64decode", "base64.b64decode(s, altchars=None, validate=True)", "base64.b64encode(s, altchars=None, validate=False)", "base64.encode(s, altchars=None, validate=False)", "base64.utf_16_decode(s, altchars=None, validate=False)", "base64._decode_line(s, altchars=None, validate=False)", "base64.ascii_decode(s, altchars=None, validate=False)", "base64.utf_8_decode(s, altchars=None, validate=False)", "base64.utf_7_decode(s, altchars=None, validate=False)", "base64.utf_16_ex_decode(s, altchars=None, validate=False)", "base64.utf_16_be_decode(s, altchars=None, validate=False)", "base64.utf_16_le_decode(s, altchars=None, validate=False)", "base64.utf_32_be_decode(s, altchars=None, validate=False)", "base64.escape_decode(s, altchars=None, validate=False)", "base64.utf_16_encode(s, altchars=None, validate=False)"], "base64.b64decode(s, validate=False)": ["b64decode", "base64.b64decode(s, validate=True)", "base64.b64encode(s, validate=False)", "base64.encode(s, validate=False)", "base64.utf_16_decode(s, validate=False)", "base64._decode_line(s, validate=False)", "base64.ascii_decode(s, validate=False)", "base64.utf_8_decode(s, validate=False)", "base64.utf_7_decode(s, validate=False)", "base64.utf_16_ex_decode(s, validate=False)", "base64.utf_16_be_decode(s, validate=False)", "base64.utf_16_le_decode(s, validate=False)", "base64.utf_32_be_decode(s, validate=False)", "base64.escape_decode(s, validate=False)", "base64.utf_16_encode(s, validate=False)"], "base64.b64encode(s)": ["b64encode", "base64.b64decode(s)", "base64.encode(s)", "base64.decode(s)", "base64.utf_16_encode(s)", "base64.utf_8_encode(s)", "base64.ascii_encode(s)", "base64.hook_encoded(s)", "base64.utf_7_encode(s)", "base64.utf_32_be_encode(s)", "base64.utf_16_le_encode(s)", "base64.utf_16_be_encode(s)", "base64.escape_encode(s)", "base64.utf_16_decode(s)", "base64.utf_32_encode(s)"], "base64.b64encode(s, altchars=None)": ["b64encode", "base64.b64encode(s, altchars=None)", "base64.b64decode(s, altchars=None)", "base64.encode(s, altchars=None)", "base64.decode(s, altchars=None)", "base64.utf_16_encode(s, altchars=None)", "base64.utf_8_encode(s, altchars=None)", "base64.ascii_encode(s, altchars=None)", "base64.hook_encoded(s, altchars=None)", "base64.utf_7_encode(s, altchars=None)", "base64.utf_32_be_encode(s, altchars=None)", "base64.utf_16_le_encode(s, altchars=None)", "base64.utf_16_be_encode(s, altchars=None)", "base64.escape_encode(s, altchars=None)", "base64.utf_16_decode(s, altchars=None)"], "base64.b85decode(b)": ["b85decode", "base64.a85decode(b)", "base64.b85encode(b)", "base64._85encode(b)", "base64.decode_b(b)", "base64.decode(b)", "base64.a85encode(b)", "base64.b64decode(b)", "base64.b16decode(b)", "base64.b32decode(b)", "base64._bencode(b)", "base64.encode_b(b)", "base64.fsdecode(b)", "base64.decode_q(b)", "base64.body_decode(b)"], "base64.b85encode(b)": ["b85encode", "base64.a85encode(b)", "base64.a85decode(b)", "base64.urlencode(b)", "base64.b16decode(b)", "base64.b32decode(b)", "base64.encodestring(b)", "base64._encodestring(b)", "base64.decodestring(b)", "base64.byte_compile(b)", "base64.decompress(b)", "base64.fuse_conv_bn_jit(b)", "base64._genops(b)", "base64._log_modified_bessel_fn(b)", "base64.resolve(b)"], "base64.b85encode(b, pad=False)": ["b85encode", "base64.b85encode(b, pad=True)", "base64.a85encode(b, pad=False)", "base64.a85decode(b, pad=False)", "base64.urlencode(b, pad=False)", "base64.b16decode(b, pad=False)", "base64.b32decode(b, pad=False)", "base64.encodestring(b, pad=False)", "base64._encodestring(b, pad=False)", "base64.decodestring(b, pad=False)", "base64.byte_compile(b, pad=False)", "base64.decompress(b, pad=False)", "base64.fuse_conv_bn_jit(b, pad=False)", "base64._genops(b, pad=False)", "base64._log_modified_bessel_fn(b, pad=False)"], "base64.decode(input, output)": ["decode", "base64.encode(input, output)", "base64._decode_line(input, output)", "base64.ascii_decode(input, output)", "base64.b64encode(input, output)", "base64.escape_decode(input, output)", "base64.charmap_decode(input, output)", "base64.latin_1_decode(input, output)", "base64.cond(input, output)", "base64.utf_8_encode(input, output)", "base64.ascii_encode(input, output)", "base64.hook_encoded(input, output)", "base64.utf_7_encode(input, output)", "base64.escape_encode(input, output)", "base64.show_code(input, output)"], "base64.decodestring(s)": ["decodestring", "base64.encodestring(s)", "base64._encodestring(s)", "base64.tril_indices(s)", "base64.triu_indices(s)", "base64._declstringlit_match(s)", "base64.b16decode(s)", "base64.b32decode(s)", "base64.a85decode(s)", "base64.decompress(s)", "base64.chebtrim(s)", "base64.urlencode(s)", "base64.a85encode(s)", "base64.hermetrim(s)", "base64.triu_indices_from(s)"], "base64.encode(input, output)": ["encode", "base64.decode(input, output)", "base64.b64encode(input, output)", "base64.utf_8_encode(input, output)", "base64.ascii_encode(input, output)", "base64.hook_encoded(input, output)", "base64.utf_7_encode(input, output)", "base64.escape_encode(input, output)", "base64.charmap_encode(input, output)", "base64.encode_rfc2231(input, output)", "base64.latin_1_encode(input, output)", "base64.cond(input, output)", "base64._decode_line(input, output)", "base64.ascii_decode(input, output)", "base64.utf_32_be_encode(input, output)"], "base64.encodebytes(s)": ["encodebytes", "base64.decodebytes(s)", "base64._encode(s)", "base64.encode(s)", "base64._encode_result(s)", "base64.escape_encode(s)", "base64._qencode(s)", "base64._bencode(s)", "base64.EncodedFile(s)", "base64._randombytes(s)", "base64.encode_b(s)", "base64.encode_q(s)", "base64.fsencode(s)", "base64._85encode(s)", "base64.utf_8_encode(s)"], "base64.encodestring(s)": ["encodestring", "base64._encodestring(s)", "base64.decodestring(s)", "base64.a85encode(s)", "base64.b85encode(s)", "base64.chebtrim(s)", "base64.b16decode(s)", "base64.hermetrim(s)", "base64.triu_indices_from(s)", "base64.tril_indices_from(s)", "base64._construction_repr(s)", "base64.a85decode(s)", "base64.body_line_iterator(s)", "base64._get_option(s)", "base64._genops(s)"], "base64.standard_b64decode(s)": ["standard_b64decode", "base64.standard_b64encode(s)", "base64.urlsafe_b64decode(s)", "base64.b64decode(s)", "base64.decode_header(s)", "base64.header_decode(s)", "base64.urlsafe_b64encode(s)", "base64._evaluate_standard(s)", "base64._standard_normal(s)", "base64.decodestring(s)", "base64.b16decode(s)", "base64.b64encode(s)", "base64.header_encode(s)", "base64.decode_source(s)", "base64.utf_16_decode(s)"], "base64.standard_b64encode(s)": ["standard_b64encode", "base64.standard_b64decode(s)", "base64.urlsafe_b64encode(s)", "base64.b64encode(s)", "base64._standard_normal(s)", "base64.header_encode(s)", "base64.urlsafe_b64decode(s)", "base64._evaluate_standard(s)", "base64.encodestring(s)", "base64._encodestring(s)", "base64.get_encoded_word(s)", "base64.b64decode(s)", "base64.b16encode(s)", "base64._encode_result(s)", "base64.decode_header(s)"], "base64.urlsafe_b64decode(s)": ["urlsafe_b64decode", "base64.urlsafe_b64encode(s)", "base64.b64decode(s)", "base64.standard_b64decode(s)", "base64.token_urlsafe(s)", "base64.decode_source(s)", "base64.utf_16_decode(s)", "base64.escape_decode(s)", "base64.ensure_decoded(s)", "base64._ensure_decoded(s)", "base64._decode_line(s)", "base64.standard_b64encode(s)", "base64.utf_8_decode(s)", "base64.b16decode(s)", "base64.utf_7_decode(s)"], "base64.urlsafe_b64encode(s)": ["urlsafe_b64encode", "base64.urlsafe_b64decode(s)", "base64.standard_b64encode(s)", "base64.b64encode(s)", "base64.token_urlsafe(s)", "base64.escape_encode(s)", "base64.utf_16_encode(s)", "base64.readbuffer_encode(s)", "base64._use_unicode(s)", "base64.standard_b64decode(s)", "base64.utf_8_encode(s)", "base64.b64decode(s)", "base64.b16encode(s)", "base64.utf_7_encode(s)", "base64.utf_32_be_encode(s)"], "base_handler._flush()": ["_flush"], "base_handler._write(data)": ["_write"], "base_handler.add_cgi_vars()": ["add_cgi_vars"], "base_handler.error_body": ["base_handler.error_body"], "base_handler.error_headers": ["base_handler.error_headers"], "base_handler.error_output(environ, start_response)": ["error_output"], "base_handler.error_status": ["base_handler.error_status"], "base_handler.get_scheme()": ["get_scheme"], "base_handler.get_stderr()": ["get_stderr"], "base_handler.get_stdin()": ["get_stdin"], "base_handler.log_exception(exc_info)": ["log_exception"], "base_handler.origin_server": ["base_handler.origin_server"], "base_handler.os_environ": ["base_handler.os_environ"], "base_handler.run(app)": ["run"], "base_handler.sendfile()": ["sendfile"], "base_handler.server_software": ["base_handler.server_software"], "base_handler.setup_environ()": ["setup_environ"], "base_handler.traceback_limit": ["base_handler.traceback_limit"], "base_handler.wsgi_multiprocess": ["base_handler.wsgi_multiprocess"], "base_handler.wsgi_run_once": ["base_handler.wsgi_run_once"], "base_header.defects": ["base_header.defects"], "base_header.fold(policy)": ["fold"], "base_header.max_count": ["base_header.max_count"], "base_header.name": ["base_header.name"], "base_http_request_handler.MessageClass": ["base_http_request_handler.MessageClass"], "base_http_request_handler.address_string()": ["address_string"], "base_http_request_handler.client_address": ["base_http_request_handler.client_address"], "base_http_request_handler.close_connection": ["base_http_request_handler.close_connection"], "base_http_request_handler.command": ["base_http_request_handler.command"], "base_http_request_handler.date_time_string()": ["date_time_string"], "base_http_request_handler.date_time_string(timestamp=None)": ["date_time_string", "base_http_request_handler.date_time_string(timestamp=None)"], "base_http_request_handler.end_headers()": ["end_headers"], "base_http_request_handler.error_content_type": ["base_http_request_handler.error_content_type"], "base_http_request_handler.error_message_format": ["base_http_request_handler.error_message_format"], "base_http_request_handler.flush_headers()": ["flush_headers"], "base_http_request_handler.handle()": ["handle"], "base_http_request_handler.handle_expect_100()": ["handle_expect_100"], "base_http_request_handler.handle_one_request()": ["handle_one_request"], "base_http_request_handler.headers": ["base_http_request_handler.headers"], "base_http_request_handler.log_date_time_string()": ["log_date_time_string"], "base_http_request_handler.log_message(format)": ["log_message"], "base_http_request_handler.log_request()": ["log_request"], "base_http_request_handler.log_request(code='-')": ["log_request", "base_http_request_handler.log_request(code=1)"], "base_http_request_handler.log_request(code='-', size='-')": ["log_request", "base_http_request_handler.log_request(code=1.0, size=1)"], "base_http_request_handler.log_request(size='-')": ["log_request", "base_http_request_handler.log_request(size=1)"], "base_http_request_handler.path": ["base_http_request_handler.path"], "base_http_request_handler.protocol_version": ["base_http_request_handler.protocol_version"], "base_http_request_handler.request_version": ["base_http_request_handler.request_version"], "base_http_request_handler.responses": ["base_http_request_handler.responses"], "base_http_request_handler.rfile": ["base_http_request_handler.rfile"], "base_http_request_handler.send_error(code)": ["send_error"], "base_http_request_handler.send_error(code, message=None)": ["send_error", "base_http_request_handler.send_error(code, message=None)"], "base_http_request_handler.send_header(keyword, value)": ["send_header"], "base_http_request_handler.send_response(code)": ["send_response"], "base_http_request_handler.send_response(code, message=None)": ["send_response", "base_http_request_handler.send_response(code, message=None)"], "base_http_request_handler.send_response_only(code)": ["send_response_only"], "base_http_request_handler.send_response_only(code, message=None)": ["send_response_only", "base_http_request_handler.send_response_only(code, message=None)"], "base_http_request_handler.sys_version": ["base_http_request_handler.sys_version"], "base_http_request_handler.wfile": ["base_http_request_handler.wfile"], "base_manager.connect()": ["connect"], "base_manager.register(typeid, callable)": ["register"], "base_manager.register(typeid, callable, proxytype)": ["register"], "base_manager.register(typeid, callable, proxytype, exposed, method_to_typeid, create_method)": ["register"], "base_manager.shutdown()": ["shutdown"], "base_manager.start()": ["start"], "base_manager.start(initializer)": ["start"], "base_manager.start(initializer, initargs)": ["start"], "base_proxy.__repr__()": ["__repr__"], "base_proxy._callmethod(methodname)": ["_callmethod"], "base_proxy._callmethod(methodname, args)": ["_callmethod"], "base_proxy._getvalue()": ["_getvalue"], "base_request_handler.finish()": ["finish"], "base_request_handler.handle()": ["handle"], "base_request_handler.setup()": ["setup"], "base_rotating_handler.namer": ["base_rotating_handler.namer"], "base_rotating_handler.rotate(source, dest)": ["rotate"], "base_rotating_handler.rotation_filename(default_name)": ["rotation_filename"], "base_rotating_handler.rotator": ["base_rotating_handler.rotator"], "base_selector.close()": ["close"], "base_selector.get_key(fileobj)": ["get_key"], "base_selector.get_map()": ["get_map"], "base_selector.modify(fileobj, events)": ["modify"], "base_selector.modify(fileobj, events, data=None)": ["modify", "base_selector.modify(fileobj, events, data=None)"], "base_selector.register(fileobj, events)": ["register"], "base_selector.register(fileobj, events, data=None)": ["register", "base_selector.register(fileobj, events, data=None)"], "base_selector.select()": ["select"], "base_selector.select(timeout=None)": ["select", "base_selector.select(timeout=None)"], "base_selector.unregister(fileobj)": ["unregister"], "base_server.RequestHandlerClass": ["base_server.RequestHandlerClass"], "base_server.allow_reuse_address": ["base_server.allow_reuse_address"], "base_server.finish_request(request, client_address)": ["finish_request"], "base_server.get_request()": ["get_request"], "base_server.handle_error(request, client_address)": ["handle_error"], "base_server.handle_request()": ["handle_request"], "base_server.handle_timeout()": ["handle_timeout"], "base_server.process_request(request, client_address)": ["process_request"], "base_server.serve_forever()": ["serve_forever"], "base_server.serve_forever(poll_interval=0.5)": ["serve_forever", "base_server.serve_forever(poll_interval='0.5')"], "base_server.server_activate()": ["server_activate"], "base_server.server_address": ["base_server.server_address"], "base_server.server_close()": ["server_close"], "base_server.service_actions()": ["service_actions"], "base_server.shutdown()": ["shutdown"], "base_server.socket": ["base_server.socket"], "base_server.socket_type": ["base_server.socket_type"], "base_server.timeout": ["base_server.timeout"], "base_server.verify_request(request, client_address)": ["verify_request"], "bdb.Bdb()": ["Bdb"], "bdb.Bdb(skip=None)": ["Bdb", "bdb.Bdb(skip=None)"], "bdb.Breakpoint(self, file, line)": ["Breakpoint"], "bdb.Breakpoint(self, file, line, cond=None)": ["Breakpoint", "bdb.Breakpoint(self, file, line, cond=None)"], "bdb.Breakpoint(self, file, line, cond=None, funcname=None)": ["Breakpoint", "bdb.Breakpoint(self, file, line, cond=None, funcname=None)"], "bdb.Breakpoint(self, file, line, funcname=None)": ["Breakpoint", "bdb.Breakpoint(self, file, line, funcname=None)"], "bdb.Breakpoint(self, file, line, temporary=0)": ["Breakpoint", "bdb.Breakpoint(self, file, line, temporary='0')"], "bdb.Breakpoint(self, file, line, temporary=0, cond=None)": ["Breakpoint", "bdb.Breakpoint(self, file, line, temporary=0, cond=None)", "bdb.Breakpoint(self, file, line, temporary='0', cond=None)"], "bdb.Breakpoint(self, file, line, temporary=0, cond=None, funcname=None)": ["Breakpoint", "bdb.Breakpoint(self, file, line, temporary=0, cond=None, funcname=None)", "bdb.Breakpoint(self, file, line, temporary='0', cond=None, funcname=None)"], "bdb.Breakpoint(self, file, line, temporary=0, funcname=None)": ["Breakpoint", "bdb.Breakpoint(self, file, line, temporary=0, funcname=None)", "bdb.Breakpoint(self, file, line, temporary='0', funcname=None)"], "bdb.break_anywhere(frame)": ["break_anywhere"], "bdb.break_here(frame)": ["break_here"], "bdb.canonic(filename)": ["canonic"], "bdb.checkfuncname(b, frame)": ["checkfuncname", "bdb._check_name(b, frame)", "bdb.checkcache(b, frame)", "bdb.check_fn(b, frame)", "bdb._check_mode(b, frame)", "bdb.check_file(b, frame)", "bdb.check_ndim(b, frame)", "bdb.container_checker(b, frame)", "bdb._check_instance(b, frame)", "bdb._check_no_signature(b, frame)", "bdb._check_trace(b, frame)", "bdb._checknetloc(b, frame)", "bdb._check_class(b, frame)", "bdb.header_check(b, frame)", "bdb._check_cubins(b, frame)"], "bdb.clear_all_breaks()": ["clear_all_breaks"], "bdb.clear_all_file_breaks(filename)": ["clear_all_file_breaks"], "bdb.clear_bpbynumber(arg)": ["clear_bpbynumber"], "bdb.clear_break(filename, lineno)": ["clear_break"], "bdb.dispatch_call(frame, arg)": ["dispatch_call"], "bdb.dispatch_exception(frame, arg)": ["dispatch_exception"], "bdb.dispatch_line(frame)": ["dispatch_line"], "bdb.dispatch_return(frame, arg)": ["dispatch_return"], "bdb.do_clear(arg)": ["do_clear"], "bdb.effective(file, line, frame)": ["effective", "bdb.execve(file, line, frame)", "bdb.execvpe(file, line, frame)", "bdb.execute(file, line, frame)", "bdb._execvpe(file, line, frame)", "bdb.interactive(file, line, frame)", "bdb.getctime(file, line, frame)", "bdb.execv(file, line, frame)", "bdb.stack_effect(file, line, frame)", "bdb.deprecate(file, line, frame)", "bdb.isinteractive(file, line, frame)", "bdb.execvp(file, line, frame)", "bdb.percentile(file, line, frame)", "bdb.execle(file, line, frame)", "bdb.deprecated(file, line, frame)"], "bdb.format_stack_entry(frame_lineno)": ["format_stack_entry"], "bdb.format_stack_entry(frame_lineno, lprefix=': ')": ["format_stack_entry", "bdb.format_stack_entry(frame_lineno, lprefix=2.0)"], "bdb.get_bpbynumber(arg)": ["get_bpbynumber"], "bdb.get_break(filename, lineno)": ["get_break"], "bdb.get_breaks(filename, lineno)": ["get_breaks"], "bdb.get_file_breaks(filename)": ["get_file_breaks"], "bdb.get_stack(f, t)": ["get_stack"], "bdb.reset()": ["reset"], "bdb.run(cmd)": ["run"], "bdb.run(cmd, globals=None, locals=None)": ["run", "bdb.run(cmd, globals=None, locals=None)"], "bdb.run(cmd, locals=None)": ["run", "bdb.run(cmd, locals=None)"], "bdb.runcall(func, *args, **kwds)": ["runcall"], "bdb.runctx(cmd, globals, locals)": ["runctx"], "bdb.runeval(expr)": ["runeval"], "bdb.runeval(expr, globals=None)": ["runeval", "bdb.runeval(expr, globals=None)"], "bdb.runeval(expr, globals=None, locals=None)": ["runeval", "bdb.runeval(expr, globals=None, locals=None)"], "bdb.runeval(expr, locals=None)": ["runeval", "bdb.runeval(expr, locals=None)"], "bdb.set_break(filename, lineno, cond, funcname)": ["set_break"], "bdb.set_break(filename, lineno, cond, funcname, temporary=0)": ["set_break", "bdb.set_break(filename, lineno, cond, funcname, temporary='0')"], "bdb.set_next(frame)": ["set_next"], "bdb.set_quit()": ["set_quit"], "bdb.set_return(frame)": ["set_return"], "bdb.set_step()": ["set_step"], "bdb.set_trace()": ["set_trace", "bdb.settrace()", "bdb._get_traces()", "bdb.trace()", "bdb._check_trace()", "bdb.clear_traces()", "bdb.trace_module()", "bdb.setraw()", "bdb._get_trace_graph()", "bdb.tracer()", "bdb.set_threshold()", "bdb._trace_dispatcher()", "bdb.assert_raises()", "bdb._get_stream()", "bdb.is_tracing()"], "bdb.set_trace(frame)": ["set_trace", "bdb.settrace(frame)", "bdb._get_traces(frame)", "bdb.trace(frame)", "bdb._check_trace(frame)", "bdb.clear_traces(frame)", "bdb.trace_module(frame)", "bdb.setraw(frame)", "bdb._get_trace_graph(frame)", "bdb.tracer(frame)", "bdb.set_threshold(frame)", "bdb._trace_dispatcher(frame)", "bdb.assert_raises(frame)", "bdb._get_stream(frame)", "bdb.is_tracing(frame)"], "bdb.stop_here(frame)": ["stop_here"], "bdb.trace_dispatch(frame, event, arg)": ["trace_dispatch"], "bdb.user_call(frame, argument_list)": ["user_call"], "bdb.user_line(frame)": ["user_line"], "bdb.user_return(frame, return_value)": ["user_return"], "bin(x)": ["bin", "bind(x)", "_in(x)", "__inv__(x)", "_sin(x)", "itn(x)", "binhex(x)", "hexbin(x)", "ion(x)", "inv(x)", "min(x)", "bitname(x)", "chebint(x)", "__iand__(x)", "_amin(x)"], "binary.data": ["binary.data"], "binary.decode(bytes)": ["decode"], "binary.encode(out)": ["encode"], "binascii.a2b_base64(string)": ["a2b_base64"], "binascii.a2b_hqx(string)": ["a2b_hqx"], "binascii.a2b_qp(data)": ["a2b_qp"], "binascii.a2b_qp(data, header=False)": ["a2b_qp", "binascii.a2b_qp(data, header=True)"], "binascii.a2b_uu(string)": ["a2b_uu"], "binascii.b2a_base64(data)": ["b2a_base64"], "binascii.b2a_base64(data, newline=True)": ["b2a_base64", "binascii.b2a_base64(data, newline=False)"], "binascii.b2a_hex(data)": ["b2a_hex"], "binascii.b2a_hqx(data)": ["b2a_hqx"], "binascii.b2a_qp(data)": ["b2a_qp"], "binascii.b2a_qp(data, header=False)": ["b2a_qp", "binascii.b2a_qp(data, header=True)"], "binascii.b2a_qp(data, istext=True)": ["b2a_qp", "binascii.b2a_qp(data, istext=False)"], "binascii.b2a_qp(data, istext=True, header=False)": ["b2a_qp", "binascii.b2a_qp(data, istext=False, header=True)"], "binascii.b2a_qp(data, quotetabs=False)": ["b2a_qp", "binascii.b2a_qp(data, quotetabs=True)"], "binascii.b2a_qp(data, quotetabs=False, header=False)": ["b2a_qp", "binascii.b2a_qp(data, quotetabs=True, header=True)"], "binascii.b2a_qp(data, quotetabs=False, istext=True)": ["b2a_qp", "binascii.b2a_qp(data, quotetabs=True, istext=False)"], "binascii.b2a_qp(data, quotetabs=False, istext=True, header=False)": ["b2a_qp", "binascii.b2a_qp(data, quotetabs=True, istext=False, header=True)"], "binascii.b2a_uu(data)": ["b2a_uu"], "binascii.b2a_uu(data, backtick=False)": ["b2a_uu", "binascii.b2a_uu(data, backtick=True)"], "binascii.crc32(data)": ["crc32"], "binascii.crc32(data, value)": ["crc32"], "binascii.crc_hqx(data, value)": ["crc_hqx"], "binhex.Error": ["binhex.Error"], "binhex.binhex(input, output)": ["binhex", "binhex.index(input, output)", "binhex.unhex(input, output)", "binhex.__index__(input, output)", "binhex.ishex(input, output)", "binhex.rindex(input, output)", "binhex.bitname(input, output)", "binhex.indexOf(input, output)", "binhex.opindex(input, output)", "binhex.bone(input, output)", "binhex._iexp(input, output)", "binhex.bind(input, output)", "binhex.chebline(input, output)", "binhex.findtext(input, output)", "binhex.inner(input, output)"], "binhex.hexbin(input, output)": ["hexbin", "binhex.getline(input, output)", "binhex.iterfind(input, output)", "binhex.find(input, output)", "binhex.shapesize(input, output)", "binhex._pinv_dispatcher(input, output)", "binhex.which(input, output)", "binhex.chown(input, output)", "binhex.argmin(input, output)", "binhex._polyint_dispatcher(input, output)", "binhex.encode(input, output)", "binhex.Client(input, output)", "binhex.indent(input, output)", "binhex.table_exists(input, output)", "binhex.debug_script(input, output)"], "bisect.bisect(a, x)": ["bisect"], "bisect.bisect(a, x, hi=len(a))": ["bisect", "bisect.bisect(a, x, hi=alen(a))", "bisect.bisect(a, x, hi=le(a))", "bisect.bisect(a, x, hi=__le__(a))", "bisect.bisect(a, x, hi=len_q(a))", "bisect.bisect(a, x, hi=len_b(a))", "bisect.bisect(a, x, hi=fileno(a))", "bisect.bisect(a, x, hi=lineno(a))", "bisect.bisect(a, x, hi=legend(a))", "bisect.bisect(a, x, hi=Client(a))", "bisect.bisect(a, x, hi=listen(a))", "bisect.bisect(a, x, hi=legint(a))", "bisect.bisect(a, x, hi=pen(a))", "bisect.bisect(a, x, hi=str_len(a))", "bisect.bisect(a, x, hi=_cleanup(a))"], "bisect.bisect(a, x, lo=0)": ["bisect", "bisect.bisect(a, x, lo='0')"], "bisect.bisect(a, x, lo=0, hi=len(a))": ["bisect", "bisect.bisect(a, x, lo='0', hi=len(a))", "bisect.bisect(a, x, lo=0, hi=alen(a))", "bisect.bisect(a, x, lo=0, hi=le(a))", "bisect.bisect(a, x, lo=0, hi=__le__(a))", "bisect.bisect(a, x, lo=0, hi=len_q(a))", "bisect.bisect(a, x, lo=0, hi=len_b(a))", "bisect.bisect(a, x, lo=0, hi=fileno(a))", "bisect.bisect(a, x, lo=0, hi=lineno(a))", "bisect.bisect(a, x, lo=0, hi=legend(a))", "bisect.bisect(a, x, lo=0, hi=Client(a))", "bisect.bisect(a, x, lo=0, hi=listen(a))", "bisect.bisect(a, x, lo=0, hi=legint(a))", "bisect.bisect(a, x, lo=0, hi=pen(a))", "bisect.bisect(a, x, lo=0, hi=str_len(a))"], "bisect.bisect_left(a, x)": ["bisect_left"], "bisect.bisect_left(a, x, hi=len(a))": ["bisect_left", "bisect.bisect_left(a, x, hi=alen(a))", "bisect.bisect_left(a, x, hi=le(a))", "bisect.bisect_left(a, x, hi=__le__(a))", "bisect.bisect_left(a, x, hi=len_q(a))", "bisect.bisect_left(a, x, hi=len_b(a))", "bisect.bisect_left(a, x, hi=fileno(a))", "bisect.bisect_left(a, x, hi=lineno(a))", "bisect.bisect_left(a, x, hi=legend(a))", "bisect.bisect_left(a, x, hi=Client(a))", "bisect.bisect_left(a, x, hi=listen(a))", "bisect.bisect_left(a, x, hi=legint(a))", "bisect.bisect_left(a, x, hi=pen(a))", "bisect.bisect_left(a, x, hi=str_len(a))", "bisect.bisect_left(a, x, hi=_cleanup(a))"], "bisect.bisect_left(a, x, lo=0)": ["bisect_left", "bisect.bisect_left(a, x, lo='0')"], "bisect.bisect_left(a, x, lo=0, hi=len(a))": ["bisect_left", "bisect.bisect_left(a, x, lo='0', hi=len(a))", "bisect.bisect_left(a, x, lo=0, hi=alen(a))", "bisect.bisect_left(a, x, lo=0, hi=le(a))", "bisect.bisect_left(a, x, lo=0, hi=__le__(a))", "bisect.bisect_left(a, x, lo=0, hi=len_q(a))", "bisect.bisect_left(a, x, lo=0, hi=len_b(a))", "bisect.bisect_left(a, x, lo=0, hi=fileno(a))", "bisect.bisect_left(a, x, lo=0, hi=lineno(a))", "bisect.bisect_left(a, x, lo=0, hi=legend(a))", "bisect.bisect_left(a, x, lo=0, hi=Client(a))", "bisect.bisect_left(a, x, lo=0, hi=listen(a))", "bisect.bisect_left(a, x, lo=0, hi=legint(a))", "bisect.bisect_left(a, x, lo=0, hi=pen(a))", "bisect.bisect_left(a, x, lo=0, hi=str_len(a))"], "bisect.bisect_right(a, x)": ["bisect_right"], "bisect.bisect_right(a, x, hi=len(a))": ["bisect_right", "bisect.bisect_right(a, x, hi=alen(a))", "bisect.bisect_right(a, x, hi=le(a))", "bisect.bisect_right(a, x, hi=__le__(a))", "bisect.bisect_right(a, x, hi=len_q(a))", "bisect.bisect_right(a, x, hi=len_b(a))", "bisect.bisect_right(a, x, hi=fileno(a))", "bisect.bisect_right(a, x, hi=lineno(a))", "bisect.bisect_right(a, x, hi=legend(a))", "bisect.bisect_right(a, x, hi=Client(a))", "bisect.bisect_right(a, x, hi=listen(a))", "bisect.bisect_right(a, x, hi=legint(a))", "bisect.bisect_right(a, x, hi=pen(a))", "bisect.bisect_right(a, x, hi=str_len(a))", "bisect.bisect_right(a, x, hi=_cleanup(a))"], "bisect.bisect_right(a, x, lo=0)": ["bisect_right", "bisect.bisect_right(a, x, lo='0')"], "bisect.bisect_right(a, x, lo=0, hi=len(a))": ["bisect_right", "bisect.bisect_right(a, x, lo='0', hi=len(a))", "bisect.bisect_right(a, x, lo=0, hi=alen(a))", "bisect.bisect_right(a, x, lo=0, hi=le(a))", "bisect.bisect_right(a, x, lo=0, hi=__le__(a))", "bisect.bisect_right(a, x, lo=0, hi=len_q(a))", "bisect.bisect_right(a, x, lo=0, hi=len_b(a))", "bisect.bisect_right(a, x, lo=0, hi=fileno(a))", "bisect.bisect_right(a, x, lo=0, hi=lineno(a))", "bisect.bisect_right(a, x, lo=0, hi=legend(a))", "bisect.bisect_right(a, x, lo=0, hi=Client(a))", "bisect.bisect_right(a, x, lo=0, hi=listen(a))", "bisect.bisect_right(a, x, lo=0, hi=legint(a))", "bisect.bisect_right(a, x, lo=0, hi=pen(a))", "bisect.bisect_right(a, x, lo=0, hi=str_len(a))"], "bisect.insort(a, x)": ["insort"], "bisect.insort_left(a, x)": ["insort_left"], "bisect.insort_left(a, x, hi=len(a))": ["insort_left", "bisect.insort_left(a, x, hi=alen(a))", "bisect.insort_left(a, x, hi=le(a))", "bisect.insort_left(a, x, hi=__le__(a))", "bisect.insort_left(a, x, hi=len_q(a))", "bisect.insort_left(a, x, hi=len_b(a))", "bisect.insort_left(a, x, hi=fileno(a))", "bisect.insort_left(a, x, hi=lineno(a))", "bisect.insort_left(a, x, hi=legend(a))", "bisect.insort_left(a, x, hi=Client(a))", "bisect.insort_left(a, x, hi=listen(a))", "bisect.insort_left(a, x, hi=legint(a))", "bisect.insort_left(a, x, hi=pen(a))", "bisect.insort_left(a, x, hi=str_len(a))", "bisect.insort_left(a, x, hi=_cleanup(a))"], "bisect.insort_left(a, x, lo=0)": ["insort_left", "bisect.insort_left(a, x, lo='0')"], "bisect.insort_left(a, x, lo=0, hi=len(a))": ["insort_left", "bisect.insort_left(a, x, lo='0', hi=len(a))", "bisect.insort_left(a, x, lo=0, hi=alen(a))", "bisect.insort_left(a, x, lo=0, hi=le(a))", "bisect.insort_left(a, x, lo=0, hi=__le__(a))", "bisect.insort_left(a, x, lo=0, hi=len_q(a))", "bisect.insort_left(a, x, lo=0, hi=len_b(a))", "bisect.insort_left(a, x, lo=0, hi=fileno(a))", "bisect.insort_left(a, x, lo=0, hi=lineno(a))", "bisect.insort_left(a, x, lo=0, hi=legend(a))", "bisect.insort_left(a, x, lo=0, hi=Client(a))", "bisect.insort_left(a, x, lo=0, hi=listen(a))", "bisect.insort_left(a, x, lo=0, hi=legint(a))", "bisect.insort_left(a, x, lo=0, hi=pen(a))", "bisect.insort_left(a, x, lo=0, hi=str_len(a))"], "bisect.insort_right(a, x)": ["insort_right"], "bisect.insort_right(a, x, hi=len(a))": ["insort_right", "bisect.insort_right(a, x, hi=alen(a))", "bisect.insort_right(a, x, hi=le(a))", "bisect.insort_right(a, x, hi=__le__(a))", "bisect.insort_right(a, x, hi=len_q(a))", "bisect.insort_right(a, x, hi=len_b(a))", "bisect.insort_right(a, x, hi=fileno(a))", "bisect.insort_right(a, x, hi=lineno(a))", "bisect.insort_right(a, x, hi=legend(a))", "bisect.insort_right(a, x, hi=Client(a))", "bisect.insort_right(a, x, hi=listen(a))", "bisect.insort_right(a, x, hi=legint(a))", "bisect.insort_right(a, x, hi=pen(a))", "bisect.insort_right(a, x, hi=str_len(a))", "bisect.insort_right(a, x, hi=_cleanup(a))"], "bisect.insort_right(a, x, lo=0)": ["insort_right", "bisect.insort_right(a, x, lo='0')"], "bisect.insort_right(a, x, lo=0, hi=len(a))": ["insort_right", "bisect.insort_right(a, x, lo='0', hi=len(a))", "bisect.insort_right(a, x, lo=0, hi=alen(a))", "bisect.insort_right(a, x, lo=0, hi=le(a))", "bisect.insort_right(a, x, lo=0, hi=__le__(a))", "bisect.insort_right(a, x, lo=0, hi=len_q(a))", "bisect.insort_right(a, x, lo=0, hi=len_b(a))", "bisect.insort_right(a, x, lo=0, hi=fileno(a))", "bisect.insort_right(a, x, lo=0, hi=lineno(a))", "bisect.insort_right(a, x, lo=0, hi=legend(a))", "bisect.insort_right(a, x, lo=0, hi=Client(a))", "bisect.insort_right(a, x, lo=0, hi=listen(a))", "bisect.insort_right(a, x, lo=0, hi=legint(a))", "bisect.insort_right(a, x, lo=0, hi=pen(a))", "bisect.insort_right(a, x, lo=0, hi=str_len(a))"], "bool()": ["bool", "cool()", "is_bool()", "str2bool()", "randbool()", "strtobool()", "foo()", "box()", "getboolean()", "boxplot()", "bgcolor()", "poll()", "_noop()", "goto()", "bone()"], "bool(x)": ["bool", "cool(x)", "is_bool(x)", "str2bool(x)", "randbool(x)", "strtobool(x)", "foo(x)", "box(x)", "getboolean(x)", "boxplot(x)", "bgcolor(x)", "poll(x)", "_noop(x)", "goto(x)", "bone(x)"], "bound_arguments.apply_defaults()": ["apply_defaults"], "bound_arguments.args": ["bound_arguments.args"], "bound_arguments.arguments": ["bound_arguments.arguments"], "bound_arguments.kwargs": ["bound_arguments.kwargs"], "breakpoint(*args, **kws)": ["breakpoint", "readPlist(*args, **kws)", "_wrapit(*args, **kws)", "read_uint2(*args, **kws)", "read_uint1(*args, **kws)", "read_uint8(*args, **kws)", "streamplot(*args, **kws)", "read_uint4(*args, **kws)", "polyint(*args, **kws)", "gradient(*args, **kws)", "hermeint(*args, **kws)", "reindent(*args, **kws)", "realpath(*args, **kws)", "errprint(*args, **kws)", "init_backend(*args, **kws)"], "breakpoint.bpformat()": ["bpformat"], "breakpoint.bpprint()": ["bpprint"], "breakpoint.bpprint(out=None)": ["bpprint", "breakpoint.bpprint(out=None)"], "breakpoint.deleteMe()": ["deleteMe"], "breakpoint.disable()": ["disable"], "breakpoint.enable()": ["enable"], "buffered_io_base.read(size=-1)": ["read", "buffered_io_base.read(size=(- '1'))"], "buffered_io_base.read1()": ["read1"], "buffered_io_base.read1(size)": ["read1"], "buffered_io_base.readinto(b)": ["readinto"], "buffered_io_base.readinto1(b)": ["readinto1"], "buffered_io_base.write(b)": ["write"], "buffered_reader.peek()": ["peek"], "buffered_reader.read()": ["read"], "buffered_reader.read1()": ["read1"], "buffered_reader.read1(size)": ["read1"], "buffered_writer.flush()": ["flush"], "buffering_handler.emit(record)": ["emit"], "buffering_handler.flush()": ["flush"], "bytearray()": ["bytearray", "array()", "ARRAY()", "_makearray()", "_ctype_ndarray()", "asanyarray()", "_read_bytes()", "RAND_bytes()", "isarray()", "asarray()", "read_bytes4()", "read_bytes8()", "_formatArray()", "read_bytes1()", "pd_array()"], "bytearray(source)": ["bytearray", "array(source)", "ARRAY(source)", "_makearray(source)", "_ctype_ndarray(source)", "asanyarray(source)", "_read_bytes(source)", "RAND_bytes(source)", "isarray(source)", "asarray(source)", "read_bytes4(source)", "read_bytes8(source)", "_formatArray(source)", "read_bytes1(source)", "pd_array(source)"], "bytearray(source, encoding)": ["bytearray", "array(source, encoding)", "ARRAY(source, encoding)", "_makearray(source, encoding)", "_ctype_ndarray(source, encoding)", "asanyarray(source, encoding)", "_read_bytes(source, encoding)", "RAND_bytes(source, encoding)", "isarray(source, encoding)", "asarray(source, encoding)", "read_bytes4(source, encoding)", "read_bytes8(source, encoding)", "_formatArray(source, encoding)", "read_bytes1(source, encoding)", "pd_array(source, encoding)"], "bytearray(source, encoding, errors)": ["bytearray", "array(source, encoding, errors)", "ARRAY(source, encoding, errors)", "_makearray(source, encoding, errors)", "_ctype_ndarray(source, encoding, errors)", "asanyarray(source, encoding, errors)", "_read_bytes(source, encoding, errors)", "RAND_bytes(source, encoding, errors)", "isarray(source, encoding, errors)", "asarray(source, encoding, errors)", "read_bytes4(source, encoding, errors)", "read_bytes8(source, encoding, errors)", "_formatArray(source, encoding, errors)", "read_bytes1(source, encoding, errors)", "pd_array(source, encoding, errors)"], "bytearray.center(width)": ["center"], "bytearray.center(width, fillbyte)": ["center"], "bytearray.count(sub, start)": ["count"], "bytearray.count(sub, start, end)": ["count"], "bytearray.decode(encoding=\"utf-8\")": ["decode", "bytearray.decode(encoding=5.0)"], "bytearray.decode(encoding=\"utf-8\", errors=\"strict\")": ["decode", "bytearray.decode(encoding=5.0, errors=6)"], "bytearray.decode(errors=\"strict\")": ["decode", "bytearray.decode(errors=6.0)"], "bytearray.endswith(suffix)": ["endswith"], "bytearray.expandtabs()": ["expandtabs"], "bytearray.expandtabs(tabsize=8)": ["expandtabs", "bytearray.expandtabs(tabsize='8')"], "bytearray.fromhex(string)": ["fromhex"], "bytearray.hex()": ["hex"], "bytearray.index(sub)": ["index"], "bytearray.index(sub, start, end)": ["index"], "bytearray.isalnum()": ["isalnum"], "bytearray.isalpha()": ["isalpha"], "bytearray.isascii()": ["isascii"], "bytearray.islower()": ["islower"], "bytearray.isupper()": ["isupper"], "bytearray.ljust(width)": ["ljust"], "bytearray.lower()": ["lower"], "bytearray.lstrip(chars)": ["lstrip"], "bytearray.maketrans(from, to)": [], "bytearray.partition(sep)": ["partition"], "bytearray.replace(old, new)": ["replace"], "bytearray.replace(old, new, count)": ["replace"], "bytearray.rindex(sub)": ["rindex"], "bytearray.rjust(width)": ["rjust"], "bytearray.rpartition(sep)": ["rpartition"], "bytearray.rsplit()": ["rsplit"], "bytearray.rsplit(maxsplit=-1)": ["rsplit", "bytearray.rsplit(maxsplit=(- '1'))"], "bytearray.rsplit(sep=None)": ["rsplit", "bytearray.rsplit(sep=None)"], "bytearray.rsplit(sep=None, maxsplit=-1)": ["rsplit", "bytearray.rsplit(sep=None, maxsplit=(- 1))", "bytearray.rsplit(sep=None, maxsplit=(- '1'))"], "bytearray.split(maxsplit=-1)": ["split", "bytearray.split(maxsplit=(- '1'))"], "bytearray.split(sep=None, maxsplit=-1)": ["split", "bytearray.split(sep=None, maxsplit=(- 1))", "bytearray.split(sep=None, maxsplit=(- '1'))"], "bytearray.splitlines()": ["splitlines"], "bytearray.splitlines(keepends=False)": ["splitlines", "bytearray.splitlines(keepends=True)"], "bytearray.strip()": ["strip"], "bytearray.translate(table)": ["translate"], "bytearray.translate(table, delete=b'')": ["translate"], "bytearray.zfill(width)": ["zfill"], "bytecode.from_traceback(tb)": ["from_traceback"], "bytecode.info()": ["info"], "bytes()": ["bytes", "asbytes()", "to_bytes()", "bye()", "_pad_bytes()", "_test()", "_read_bytes()", "diff_bytes()", "test()", "RAND_bytes()", "read_bytes4()", "read_bytes8()", "token_bytes()", "test_bmp()", "_randombytes()"], "bytes(source)": ["bytes", "asbytes(source)", "to_bytes(source)", "bye(source)", "_pad_bytes(source)", "_test(source)", "_read_bytes(source)", "diff_bytes(source)", "test(source)", "RAND_bytes(source)", "read_bytes4(source)", "read_bytes8(source)", "token_bytes(source)", "test_bmp(source)", "_randombytes(source)"], "bytes(source, encoding)": ["bytes", "asbytes(source, encoding)", "to_bytes(source, encoding)", "bye(source, encoding)", "_pad_bytes(source, encoding)", "_test(source, encoding)", "_read_bytes(source, encoding)", "diff_bytes(source, encoding)", "test(source, encoding)", "RAND_bytes(source, encoding)", "read_bytes4(source, encoding)", "read_bytes8(source, encoding)", "token_bytes(source, encoding)", "test_bmp(source, encoding)", "_randombytes(source, encoding)"], "bytes(source, encoding, errors)": ["bytes", "asbytes(source, encoding, errors)", "to_bytes(source, encoding, errors)", "bye(source, encoding, errors)", "_pad_bytes(source, encoding, errors)", "_test(source, encoding, errors)", "_read_bytes(source, encoding, errors)", "diff_bytes(source, encoding, errors)", "test(source, encoding, errors)", "RAND_bytes(source, encoding, errors)", "read_bytes4(source, encoding, errors)", "read_bytes8(source, encoding, errors)", "token_bytes(source, encoding, errors)", "test_bmp(source, encoding, errors)", "_randombytes(source, encoding, errors)"], "bytes.center(width)": ["center"], "bytes.center(width, fillbyte)": ["center"], "bytes.count(sub)": ["count"], "bytes.count(sub, start)": ["count"], "bytes.count(sub, start, end)": ["count"], "bytes.decode(encoding=\"utf-8\")": ["decode", "bytes.decode(encoding=5)"], "bytes.decode(encoding=\"utf-8\", errors=\"strict\")": ["decode", "bytes.decode(encoding=5.0, errors=6.0)"], "bytes.decode(errors=\"strict\")": ["decode", "bytes.decode(errors=6.0)"], "bytes.endswith(suffix, start)": ["endswith"], "bytes.expandtabs(tabsize=8)": ["expandtabs", "bytes.expandtabs(tabsize='8')"], "bytes.find(sub)": ["find"], "bytes.find(sub, start)": ["find"], "bytes.find(sub, start, end)": ["find"], "bytes.fromhex(string)": ["fromhex"], "bytes.hex()": ["hex"], "bytes.index(sub)": ["index"], "bytes.index(sub, start)": ["index"], "bytes.isalnum()": ["isalnum"], "bytes.isalpha()": ["isalpha"], "bytes.isascii()": ["isascii"], "bytes.isdigit()": ["isdigit"], "bytes.islower()": ["islower"], "bytes.isspace()": ["isspace"], "bytes.istitle()": ["istitle"], "bytes.isupper()": ["isupper"], "bytes.lower()": ["lower"], "bytes.lstrip()": ["lstrip"], "bytes.lstrip(chars)": ["lstrip"], "bytes.maketrans(from, to)": [], "bytes.partition(sep)": ["partition"], "bytes.replace(old, new)": ["replace"], "bytes.replace(old, new, count)": ["replace"], "bytes.rfind(sub, start)": ["rfind"], "bytes.rfind(sub, start, end)": ["rfind"], "bytes.rindex(sub)": ["rindex"], "bytes.rindex(sub, start, end)": ["rindex"], "bytes.rjust(width)": ["rjust"], "bytes.rpartition(sep)": ["rpartition"], "bytes.rsplit()": ["rsplit"], "bytes.rsplit(maxsplit=-1)": ["rsplit", "bytes.rsplit(maxsplit=(- '1'))"], "bytes.rsplit(sep=None)": ["rsplit", "bytes.rsplit(sep=None)"], "bytes.rsplit(sep=None, maxsplit=-1)": ["rsplit", "bytes.rsplit(sep=None, maxsplit=(- 1))", "bytes.rsplit(sep=None, maxsplit=(- '1'))"], "bytes.split()": ["split"], "bytes.split(maxsplit=-1)": ["split", "bytes.split(maxsplit=(- '1'))"], "bytes.split(sep=None, maxsplit=-1)": ["split", "bytes.split(sep=None, maxsplit=(- 1))", "bytes.split(sep=None, maxsplit=(- '1'))"], "bytes.splitlines()": ["splitlines"], "bytes.splitlines(keepends=False)": ["splitlines", "bytes.splitlines(keepends=True)"], "bytes.translate(table)": ["translate"], "bytes.translate(table, delete=b'')": ["translate"], "bytes.upper()": ["upper"], "bytes.zfill(width)": ["zfill"], "bytes_feed_parser.close()": ["close"], "bytes_feed_parser.feed(data)": ["feed"], "bytes_generator.clone(fp)": ["clone"], "bytes_generator.flatten(msg)": ["flatten"], "bytes_generator.flatten(msg, linesep=None)": ["flatten", "bytes_generator.flatten(msg, linesep=None)"], "bytes_generator.write(s)": ["write"], "bytes_io.getbuffer()": ["getbuffer"], "bytes_io.getvalue()": ["getvalue"], "bytes_io.read1()": ["read1"], "bytes_io.read1(size)": ["read1"], "bytes_io.readinto1(b)": ["readinto1"], "bytes_parser.parse(fp)": ["parse"], "bytes_parser.parse(fp, headersonly=False)": ["parse", "bytes_parser.parse(fp, headersonly=True)"], "bytes_parser.parsebytes(bytes)": ["parsebytes"], "bytes_parser.parsebytes(bytes, headersonly=False)": ["parsebytes", "bytes_parser.parsebytes(bytes, headersonly=True)"], "bz2.BZ2Compressor()": ["BZ2Compressor"], "bz2.BZ2Compressor(compresslevel=9)": ["BZ2Compressor", "bz2.BZ2Compressor(compresslevel='9')"], "bz2.BZ2Decompressor": ["bz2.BZ2Decompressor"], "bz2.BZ2File(filename)": ["BZ2File"], "bz2.BZ2File(filename, buffering=None)": ["BZ2File", "bz2.BZ2File(filename, buffering=None)"], "bz2.BZ2File(filename, buffering=None, compresslevel=9)": ["BZ2File", "bz2.BZ2File(filename, buffering=None, compresslevel=9)", "bz2.BZ2File(filename, buffering=None, compresslevel='9')"], "bz2.BZ2File(filename, compresslevel=9)": ["BZ2File", "bz2.BZ2File(filename, compresslevel='9')"], "bz2.BZ2File(filename, mode='r')": ["BZ2File", "bz2.BZ2File(filename, mode=1.0)"], "bz2.BZ2File(filename, mode='r', buffering=None)": ["BZ2File", "bz2.BZ2File(filename, mode='r', buffering=None)", "bz2.BZ2File(filename, mode=1, buffering=None)"], "bz2.BZ2File(filename, mode='r', buffering=None, compresslevel=9)": ["BZ2File", "bz2.BZ2File(filename, mode='r', buffering=None, compresslevel=9)", "bz2.BZ2File(filename, mode=1.0, buffering=None, compresslevel='9')"], "bz2.BZ2File(filename, mode='r', compresslevel=9)": ["BZ2File", "bz2.BZ2File(filename, mode=1.0, compresslevel='9')"], "bz2.compress(data)": ["compress", "bz2.decompress(data)", "bz2._compress_dispatcher(data)", "bz2.pcolormesh(data)", "bz2.fromrecords(data)", "bz2.cumprod(data)", "bz2.as_completed(data)", "bz2.load_compiled(data)", "bz2.onrelease(data)", "bz2.parse(data)", "bz2.screensize(data)", "bz2._nested_map(data)", "bz2.fromarrays(data)", "bz2.nancumprod(data)", "bz2.rmtree(data)"], "bz2.compress(data, compresslevel=9)": ["compress", "bz2.compress(data, compresslevel='9')", "bz2.decompress(data, compresslevel=9)", "bz2._compress_dispatcher(data, compresslevel=9)", "bz2.pcolormesh(data, compresslevel=9)", "bz2.fromrecords(data, compresslevel=9)", "bz2.cumprod(data, compresslevel=9)", "bz2.as_completed(data, compresslevel=9)", "bz2.load_compiled(data, compresslevel=9)", "bz2.onrelease(data, compresslevel=9)", "bz2.parse(data, compresslevel=9)", "bz2.screensize(data, compresslevel=9)", "bz2._nested_map(data, compresslevel=9)", "bz2.fromarrays(data, compresslevel=9)", "bz2.nancumprod(data, compresslevel=9)"], "bz2.decompress(data)": ["decompress", "bz2.re_compile(data)", "bz2.compile(data)", "bz2.compress(data)", "bz2.decodestring(data)", "bz2.b16decode(data)", "bz2.b32decode(data)", "bz2._genops(data)", "bz2.prepare(data)", "bz2._unparse_datetime(data)", "bz2.template(data)", "bz2.safe_repr(data)", "bz2.b85encode(data)", "bz2.parse(data)", "bz2.rmtree(data)"], "bz2.open(filename)": ["open", "bz2._open(filename)", "bz2.open_latin1(filename)", "bz2.popen(filename)", "bz2.bltn_open(filename)", "bz2.OpenWrapper(filename)", "bz2._builtin_open(filename)", "bz2.urlopen(filename)", "bz2.pie(filename)", "bz2._run_code(filename)", "bz2.compress(filename)", "bz2._popen(filename)", "bz2.byte_compile(filename)", "bz2.boxplot(filename)", "bz2.pen(filename)"], "bz2.open(filename, compresslevel=9)": ["open", "bz2.open(filename, compresslevel='9')", "bz2._open(filename, compresslevel=9)", "bz2.open_latin1(filename, compresslevel=9)", "bz2.popen(filename, compresslevel=9)", "bz2.bltn_open(filename, compresslevel=9)", "bz2.OpenWrapper(filename, compresslevel=9)", "bz2._builtin_open(filename, compresslevel=9)", "bz2.urlopen(filename, compresslevel=9)", "bz2.pie(filename, compresslevel=9)", "bz2._run_code(filename, compresslevel=9)", "bz2.compress(filename, compresslevel=9)", "bz2._popen(filename, compresslevel=9)", "bz2.byte_compile(filename, compresslevel=9)", "bz2.boxplot(filename, compresslevel=9)"], "bz2.open(filename, encoding=None)": ["open", "bz2.open(filename, encoding=None)", "bz2._open(filename, encoding=None)", "bz2.open_latin1(filename, encoding=None)", "bz2.popen(filename, encoding=None)", "bz2.bltn_open(filename, encoding=None)", "bz2.OpenWrapper(filename, encoding=None)", "bz2._builtin_open(filename, encoding=None)", "bz2.urlopen(filename, encoding=None)", "bz2.pie(filename, encoding=None)", "bz2._run_code(filename, encoding=None)", "bz2.compress(filename, encoding=None)", "bz2._popen(filename, encoding=None)", "bz2.byte_compile(filename, encoding=None)", "bz2.boxplot(filename, encoding=None)"], "bz2.open(filename, errors=None)": ["open", "bz2.open(filename, errors=None)", "bz2._open(filename, errors=None)", "bz2.open_latin1(filename, errors=None)", "bz2.popen(filename, errors=None)", "bz2.bltn_open(filename, errors=None)", "bz2.OpenWrapper(filename, errors=None)", "bz2._builtin_open(filename, errors=None)", "bz2.urlopen(filename, errors=None)", "bz2.pie(filename, errors=None)", "bz2._run_code(filename, errors=None)", "bz2.compress(filename, errors=None)", "bz2._popen(filename, errors=None)", "bz2.byte_compile(filename, errors=None)", "bz2.boxplot(filename, errors=None)"], "bz2.open(filename, mode='r')": ["open", "bz2.open(filename, mode=1)", "bz2._open(filename, mode='r')", "bz2.open_latin1(filename, mode='r')", "bz2.popen(filename, mode='r')", "bz2.bltn_open(filename, mode='r')", "bz2.OpenWrapper(filename, mode='r')", "bz2._builtin_open(filename, mode='r')", "bz2.urlopen(filename, mode='r')", "bz2.pie(filename, mode='r')", "bz2._run_code(filename, mode='r')", "bz2.compress(filename, mode='r')", "bz2._popen(filename, mode='r')", "bz2.byte_compile(filename, mode='r')", "bz2.boxplot(filename, mode='r')"], "bz2.open(filename, mode='r', compresslevel=9)": ["open", "bz2.open(filename, mode=1, compresslevel='9')", "bz2._open(filename, mode='r', compresslevel=9)", "bz2.open_latin1(filename, mode='r', compresslevel=9)", "bz2.popen(filename, mode='r', compresslevel=9)", "bz2.bltn_open(filename, mode='r', compresslevel=9)", "bz2.OpenWrapper(filename, mode='r', compresslevel=9)", "bz2._builtin_open(filename, mode='r', compresslevel=9)", "bz2.urlopen(filename, mode='r', compresslevel=9)", "bz2.pie(filename, mode='r', compresslevel=9)", "bz2._run_code(filename, mode='r', compresslevel=9)", "bz2.compress(filename, mode='r', compresslevel=9)", "bz2._popen(filename, mode='r', compresslevel=9)", "bz2.byte_compile(filename, mode='r', compresslevel=9)", "bz2.boxplot(filename, mode='r', compresslevel=9)"], "bz2.open(filename, mode='r', encoding=None)": ["open", "bz2.open(filename, mode='r', encoding=None)", "bz2.open(filename, mode=1.0, encoding=None)", "bz2._open(filename, mode='r', encoding=None)", "bz2.open_latin1(filename, mode='r', encoding=None)", "bz2.popen(filename, mode='r', encoding=None)", "bz2.bltn_open(filename, mode='r', encoding=None)", "bz2.OpenWrapper(filename, mode='r', encoding=None)", "bz2._builtin_open(filename, mode='r', encoding=None)", "bz2.urlopen(filename, mode='r', encoding=None)", "bz2.pie(filename, mode='r', encoding=None)", "bz2._run_code(filename, mode='r', encoding=None)", "bz2.compress(filename, mode='r', encoding=None)", "bz2._popen(filename, mode='r', encoding=None)", "bz2.byte_compile(filename, mode='r', encoding=None)"], "bz2.open(filename, mode='r', newline=None)": ["open", "bz2.open(filename, mode='r', newline=None)", "bz2.open(filename, mode=1.0, newline=None)", "bz2._open(filename, mode='r', newline=None)", "bz2.open_latin1(filename, mode='r', newline=None)", "bz2.popen(filename, mode='r', newline=None)", "bz2.bltn_open(filename, mode='r', newline=None)", "bz2.OpenWrapper(filename, mode='r', newline=None)", "bz2._builtin_open(filename, mode='r', newline=None)", "bz2.urlopen(filename, mode='r', newline=None)", "bz2.pie(filename, mode='r', newline=None)", "bz2._run_code(filename, mode='r', newline=None)", "bz2.compress(filename, mode='r', newline=None)", "bz2._popen(filename, mode='r', newline=None)", "bz2.byte_compile(filename, mode='r', newline=None)"], "bz2.open(filename, newline=None)": ["open", "bz2.open(filename, newline=None)", "bz2._open(filename, newline=None)", "bz2.open_latin1(filename, newline=None)", "bz2.popen(filename, newline=None)", "bz2.bltn_open(filename, newline=None)", "bz2.OpenWrapper(filename, newline=None)", "bz2._builtin_open(filename, newline=None)", "bz2.urlopen(filename, newline=None)", "bz2.pie(filename, newline=None)", "bz2._run_code(filename, newline=None)", "bz2.compress(filename, newline=None)", "bz2._popen(filename, newline=None)", "bz2.byte_compile(filename, newline=None)", "bz2.boxplot(filename, newline=None)"], "bz2_compressor.compress(data)": ["compress"], "bz2_compressor.flush()": ["flush"], "bz2_decompressor.decompress(data)": ["decompress"], "bz2_decompressor.decompress(data, max_length=-1)": ["decompress", "bz2_decompressor.decompress(data, max_length=(- '1'))"], "bz2_decompressor.unused_data": ["bz2_decompressor.unused_data"], "bz2_file.peek()": ["peek"], "bz2_file.peek(n)": ["peek"], "cab.append(full, file, logical)": ["append"], "cab.commit(database)": ["commit"], "calendar.Calendar()": ["Calendar"], "calendar.Calendar(firstweekday=0)": ["Calendar", "calendar.Calendar(firstweekday='0')"], "calendar.HTMLCalendar()": ["HTMLCalendar"], "calendar.HTMLCalendar(firstweekday=0)": ["HTMLCalendar", "calendar.HTMLCalendar(firstweekday='0')"], "calendar.LocaleHTMLCalendar(firstweekday=0, locale=None)": ["LocaleHTMLCalendar", "calendar.LocaleHTMLCalendar(firstweekday=0, locale=None)", "calendar.LocaleHTMLCalendar(firstweekday='0', locale=None)"], "calendar.LocaleHTMLCalendar(locale=None)": ["LocaleHTMLCalendar", "calendar.LocaleHTMLCalendar(locale=None)"], "calendar.LocaleTextCalendar()": ["LocaleTextCalendar"], "calendar.LocaleTextCalendar(firstweekday=0, locale=None)": ["LocaleTextCalendar", "calendar.LocaleTextCalendar(firstweekday=0, locale=None)", "calendar.LocaleTextCalendar(firstweekday='0', locale=None)"], "calendar.LocaleTextCalendar(locale=None)": ["LocaleTextCalendar", "calendar.LocaleTextCalendar(locale=None)"], "calendar.TextCalendar()": ["TextCalendar"], "calendar.TextCalendar(firstweekday=0)": ["TextCalendar", "calendar.TextCalendar(firstweekday='0')"], "calendar.calendar(year, c=6)": ["calendar", "calendar.calendar(year, c='6')"], "calendar.calendar(year, l=1)": ["calendar", "calendar.calendar(year, l='1')"], "calendar.calendar(year, l=1, c=6)": ["calendar", "calendar.calendar(year, l='1', c='6')"], "calendar.calendar(year, l=1, m=3)": ["calendar", "calendar.calendar(year, l='1', m='3')"], "calendar.calendar(year, m=3)": ["calendar", "calendar.calendar(year, m='3')"], "calendar.calendar(year, w=2)": ["calendar", "calendar.calendar(year, w='2')"], "calendar.calendar(year, w=2, c=6)": ["calendar", "calendar.calendar(year, w='2', c='6')"], "calendar.calendar(year, w=2, l=1)": ["calendar", "calendar.calendar(year, w='2', l='1')"], "calendar.calendar(year, w=2, m=3)": ["calendar", "calendar.calendar(year, w='2', m='3')"], "calendar.day_abbr": ["calendar.day_abbr"], "calendar.day_name": ["calendar.day_name"], "calendar.firstweekday()": ["firstweekday"], "calendar.isleap(year)": ["isleap", "calendar.sleep(year)", "calendar._sleep(year)", "calendar.isfile(year)", "calendar.isreal(year)", "calendar.__sleep0(year)", "calendar._cleanup(year)", "calendar.islower(year)", "calendar.isalpha(year)", "calendar.disable(year)", "calendar.isclass(year)", "calendar.istitle(year)", "calendar.isclose(year)", "calendar.disp(year)", "calendar.tile(year)"], "calendar.itermonthdates(year, month)": ["itermonthdates"], "calendar.itermonthdays(year, month)": ["itermonthdays"], "calendar.itermonthdays2(year, month)": ["itermonthdays2"], "calendar.itermonthdays3(year, month)": ["itermonthdays3"], "calendar.itermonthdays4(year, month)": ["itermonthdays4"], "calendar.iterweekdays()": ["iterweekdays"], "calendar.leapdays(y1, y2)": ["leapdays", "calendar.loads(y1, y2)", "calendar._loads(y1, y2)", "calendar.legadd(y1, y2)", "calendar._py_leave_task(y1, y2)", "calendar.isleap(y1, y2)", "calendar._leave_task(y1, y2)", "calendar.expandtabs(y1, y2)", "calendar.expandvars(y1, y2)", "calendar._cleanup(y1, y2)", "calendar.clearstamps(y1, y2)", "calendar.release(y1, y2)", "calendar._expand_vars(y1, y2)", "calendar.weekday(y1, y2)", "calendar.radians(y1, y2)"], "calendar.month(theyear, themonth, l=0)": ["month", "calendar.month(theyear, themonth, l='0')"], "calendar.month(theyear, themonth, w=0)": ["month", "calendar.month(theyear, themonth, w='0')"], "calendar.month(theyear, themonth, w=0, l=0)": ["month", "calendar.month(theyear, themonth, w='0', l='0')"], "calendar.month_abbr": ["calendar.month_abbr"], "calendar.month_name": ["calendar.month_name"], "calendar.monthcalendar(year, month)": ["monthcalendar"], "calendar.monthdays2calendar(year, month)": ["monthdays2calendar"], "calendar.monthdayscalendar(year, month)": ["monthdayscalendar"], "calendar.monthrange(year, month)": ["monthrange", "calendar.monthlen(year, month)", "calendar.nange(year, month)", "calendar.range(year, month)", "calendar.range_pop(year, month)", "calendar.ondrag(year, month)", "calendar._no_tracing(year, month)", "calendar.closerange(year, month)", "calendar.range_push(year, month)", "calendar._modname(year, month)", "calendar.contextmanager(year, month)", "calendar.generate_range(year, month)", "calendar.main_thread(year, month)", "calendar.transjugate(year, month)", "calendar.__contains__(year, month)"], "calendar.prcal(year)": ["prcal"], "calendar.prcal(year, c=6)": ["prcal", "calendar.prcal(year, c='6')"], "calendar.prcal(year, l=0)": ["prcal", "calendar.prcal(year, l='0')"], "calendar.prcal(year, l=0, c=6)": ["prcal", "calendar.prcal(year, l='0', c='6')"], "calendar.prcal(year, l=0, m=3)": ["prcal", "calendar.prcal(year, l='0', m='3')"], "calendar.prcal(year, m=3)": ["prcal", "calendar.prcal(year, m='3')"], "calendar.prcal(year, w=0)": ["prcal", "calendar.prcal(year, w='0')"], "calendar.prcal(year, w=0, c=6)": ["prcal", "calendar.prcal(year, w='0', c='6')"], "calendar.prcal(year, w=0, l=0)": ["prcal", "calendar.prcal(year, w='0', l='0')"], "calendar.prcal(year, w=0, m=3)": ["prcal", "calendar.prcal(year, w='0', m='3')"], "calendar.prmonth(theyear, themonth)": ["prmonth"], "calendar.prmonth(theyear, themonth, l=0)": ["prmonth", "calendar.prmonth(theyear, themonth, l='0')"], "calendar.prmonth(theyear, themonth, w=0)": ["prmonth", "calendar.prmonth(theyear, themonth, w='0')"], "calendar.prmonth(theyear, themonth, w=0, l=0)": ["prmonth", "calendar.prmonth(theyear, themonth, w='0', l='0')"], "calendar.setfirstweekday(weekday)": ["setfirstweekday", "calendar.weekday(weekday)", "calendar.setitem(weekday)", "calendar.__setitem__(weekday)", "calendar.isfirstline(weekday)", "calendar.setpriority(weekday)", "calendar.setreuid(weekday)", "calendar.setregid(weekday)", "calendar.searchsorted(weekday)", "calendar.assert_is_sorted(weekday)", "calendar._get_registered_option(weekday)", "calendar.setcbreak(weekday)", "calendar.setresuid(weekday)", "calendar.getSeriesData(weekday)", "calendar.getTimeSeriesData(weekday)"], "calendar.timegm(tuple)": ["timegm", "calendar._time(tuple)", "calendar.utime(tuple)", "calendar.times(tuple)", "calendar.timeit(tuple)", "calendar.trimseq(tuple)", "calendar.ontimer(tuple)", "calendar.to_time(tuple)", "calendar.__getitem__(tuple)", "calendar.setitem(tuple)", "calendar.getitem(tuple)", "calendar.__setitem__(tuple)", "calendar.tile(tuple)", "calendar.imag(tuple)", "calendar.stem(tuple)"], "calendar.weekday(year, month, day)": ["weekday", "calendar.setfirstweekday(year, month, day)", "calendar.leapdays(year, month, day)", "calendar.delay(year, month, day)", "calendar.lseek(year, month, day)", "calendar._where(year, month, day)", "calendar.speed(year, month, day)", "calendar.WIFEXITED(year, month, day)", "calendar.where(year, month, day)", "calendar._EndRecData(year, month, day)", "calendar.easy_dtype(year, month, day)", "calendar.median_low(year, month, day)", "calendar.median(year, month, day)", "calendar.legend(year, month, day)", "calendar.repeat(year, month, day)"], "calendar.weekheader(n)": ["weekheader"], "calendar.yeardatescalendar(year)": ["yeardatescalendar"], "calendar.yeardatescalendar(year, width=3)": ["yeardatescalendar", "calendar.yeardatescalendar(year, width='3')"], "calendar.yeardays2calendar(year)": ["yeardays2calendar"], "calendar.yeardays2calendar(year, width=3)": ["yeardays2calendar", "calendar.yeardays2calendar(year, width='3')"], "calendar.yeardayscalendar(year)": ["yeardayscalendar"], "calendar.yeardayscalendar(year, width=3)": ["yeardayscalendar", "calendar.yeardayscalendar(year, width='3')"], "call.call_list()": ["call_list"], "callable(object)": ["callable", "is_callable(object)", "clabel(object)", "call(object)", "get_callable_name(object)", "apply_if_callable(object)", "label(object)", "variable(object)", "allequal(object)", "table(object)", "allclose(object)", "is_available(object)", "has_table(object)", "_lazy_call(object)", "close_all(object)"], "callable(result, func, arguments)": ["callable", "is_callable(result, func, arguments)", "clabel(result, func, arguments)", "call(result, func, arguments)", "get_callable_name(result, func, arguments)", "apply_if_callable(result, func, arguments)", "label(result, func, arguments)", "variable(result, func, arguments)", "allequal(result, func, arguments)", "table(result, func, arguments)", "allclose(result, func, arguments)", "is_available(result, func, arguments)", "has_table(result, func, arguments)", "_lazy_call(result, func, arguments)", "close_all(result, func, arguments)"], "cgi.escape(s)": ["escape", "cgi.guess_type(s)", "cgi.get_locales(s)", "cgi.measure(s)", "cgi.compress(s)", "cgi.testfile(s)", "cgi.signature(s)", "cgi.onrelease(s)", "cgi._format_exc(s)", "cgi.format_exc(s)", "cgi._describe_option(s)", "cgi.socketpair(s)", "cgi.spawn(s)", "cgi.getframeinfo(s)", "cgi.browse(s)"], "cgi.escape(s, quote=False)": ["escape", "cgi.escape(s, quote=True)", "cgi.guess_type(s, quote=False)", "cgi.get_locales(s, quote=False)", "cgi.measure(s, quote=False)", "cgi.compress(s, quote=False)", "cgi.testfile(s, quote=False)", "cgi.signature(s, quote=False)", "cgi.onrelease(s, quote=False)", "cgi._format_exc(s, quote=False)", "cgi.format_exc(s, quote=False)", "cgi._describe_option(s, quote=False)", "cgi.socketpair(s, quote=False)", "cgi.spawn(s, quote=False)", "cgi.getframeinfo(s, quote=False)"], "cgi.parse()": ["parse", "cgi._parse()", "cgi._parser()", "cgi.sparse()", "cgi.sparse_()", "cgi.pause()", "cgi.parse_qs()", "cgi.du_parse()", "cgi.parse150()", "cgi.parse257()", "cgi.urlparse()", "cgi.parse227()", "cgi._preparse()", "cgi.parse229()", "cgi.parse_url()"], "cgi.parse(environ=os.environ)": ["parse", "cgi._parse(environ=os.environ)", "cgi._parser(environ=os.environ)", "cgi.sparse(environ=os.environ)", "cgi.sparse_(environ=os.environ)", "cgi.pause(environ=os.environ)", "cgi.parse_qs(environ=os.environ)", "cgi.du_parse(environ=os.environ)", "cgi.parse150(environ=os.environ)", "cgi.parse257(environ=os.environ)", "cgi.urlparse(environ=os.environ)", "cgi.parse227(environ=os.environ)", "cgi._preparse(environ=os.environ)", "cgi.parse229(environ=os.environ)", "cgi.parse_url(environ=os.environ)"], "cgi.parse(fp=None)": ["parse", "cgi.parse(fp=None)", "cgi._parse(fp=None)", "cgi._parser(fp=None)", "cgi.sparse(fp=None)", "cgi.sparse_(fp=None)", "cgi.pause(fp=None)", "cgi.parse_qs(fp=None)", "cgi.du_parse(fp=None)", "cgi.parse150(fp=None)", "cgi.parse257(fp=None)", "cgi.urlparse(fp=None)", "cgi.parse227(fp=None)", "cgi._preparse(fp=None)", "cgi.parse229(fp=None)"], "cgi.parse(fp=None, environ=os.environ)": ["parse", "cgi.parse(fp=None, environ=os.environ)", "cgi._parse(fp=None, environ=os.environ)", "cgi._parser(fp=None, environ=os.environ)", "cgi.sparse(fp=None, environ=os.environ)", "cgi.sparse_(fp=None, environ=os.environ)", "cgi.pause(fp=None, environ=os.environ)", "cgi.parse_qs(fp=None, environ=os.environ)", "cgi.du_parse(fp=None, environ=os.environ)", "cgi.parse150(fp=None, environ=os.environ)", "cgi.parse257(fp=None, environ=os.environ)", "cgi.urlparse(fp=None, environ=os.environ)", "cgi.parse227(fp=None, environ=os.environ)", "cgi._preparse(fp=None, environ=os.environ)", "cgi.parse229(fp=None, environ=os.environ)"], "cgi.parse(keep_blank_values=False)": ["parse", "cgi.parse(keep_blank_values=True)", "cgi._parse(keep_blank_values=False)", "cgi._parser(keep_blank_values=False)", "cgi.sparse(keep_blank_values=False)", "cgi.sparse_(keep_blank_values=False)", "cgi.pause(keep_blank_values=False)", "cgi.parse_qs(keep_blank_values=False)", "cgi.du_parse(keep_blank_values=False)", "cgi.parse150(keep_blank_values=False)", "cgi.parse257(keep_blank_values=False)", "cgi.urlparse(keep_blank_values=False)", "cgi.parse227(keep_blank_values=False)", "cgi._preparse(keep_blank_values=False)", "cgi.parse229(keep_blank_values=False)"], "cgi.parse_header(string)": ["parse_header", "cgi.parse_headers(string)", "cgi.make_header(string)", "cgi.du_parse(string)", "cgi._make_sparse(string)", "cgi.make_sparse(string)", "cgi._wrap_header(string)", "cgi.generic_parser(string)", "cgi.newer_pairwise(string)", "cgi.pop_header_name(string)", "cgi.noheaders(string)", "cgi.iterparse(string)", "cgi._check_parser(string)", "cgi.parse_content_type_header(string)", "cgi._parse_localename(string)"], "cgi.parse_multipart(fp, pdict)": ["parse_multipart", "cgi._parser_dispatch(fp, pdict)", "cgi._parse_int(fp, pdict)", "cgi.parse_mime_parameters(fp, pdict)", "cgi._kl_pareto_pareto(fp, pdict)", "cgi._make_sparse(fp, pdict)", "cgi.prepare_parent(fp, pdict)", "cgi.make_sparse(fp, pdict)", "cgi._parse_flags(fp, pdict)", "cgi.du_parse(fp, pdict)", "cgi._parse_einsum_input(fp, pdict)", "cgi.urlparse(fp, pdict)", "cgi.parse_http_list(fp, pdict)", "cgi.parse_keqv_list(fp, pdict)", "cgi.reduce_multigpu(fp, pdict)"], "cgi.parse_multipart(fp, pdict, encoding=\"utf-8\")": ["parse_multipart", "cgi.parse_multipart(fp, pdict, encoding=5.0)", "cgi._parser_dispatch(fp, pdict, encoding='utf-8')", "cgi._parse_int(fp, pdict, encoding='utf-8')", "cgi.parse_mime_parameters(fp, pdict, encoding='utf-8')", "cgi._kl_pareto_pareto(fp, pdict, encoding='utf-8')", "cgi._make_sparse(fp, pdict, encoding='utf-8')", "cgi.prepare_parent(fp, pdict, encoding='utf-8')", "cgi.make_sparse(fp, pdict, encoding='utf-8')", "cgi._parse_flags(fp, pdict, encoding='utf-8')", "cgi.du_parse(fp, pdict, encoding='utf-8')", "cgi._parse_einsum_input(fp, pdict, encoding='utf-8')", "cgi.urlparse(fp, pdict, encoding='utf-8')", "cgi.parse_http_list(fp, pdict, encoding='utf-8')", "cgi.parse_keqv_list(fp, pdict, encoding='utf-8')"], "cgi.parse_multipart(fp, pdict, encoding=\"utf-8\", errors=\"replace\")": ["parse_multipart", "cgi.parse_multipart(fp, pdict, encoding=5.0, errors=7)", "cgi._parser_dispatch(fp, pdict, encoding='utf-8', errors='replace')", "cgi._parse_int(fp, pdict, encoding='utf-8', errors='replace')", "cgi.parse_mime_parameters(fp, pdict, encoding='utf-8', errors='replace')", "cgi._kl_pareto_pareto(fp, pdict, encoding='utf-8', errors='replace')", "cgi._make_sparse(fp, pdict, encoding='utf-8', errors='replace')", "cgi.prepare_parent(fp, pdict, encoding='utf-8', errors='replace')", "cgi.make_sparse(fp, pdict, encoding='utf-8', errors='replace')", "cgi._parse_flags(fp, pdict, encoding='utf-8', errors='replace')", "cgi.du_parse(fp, pdict, encoding='utf-8', errors='replace')", "cgi._parse_einsum_input(fp, pdict, encoding='utf-8', errors='replace')", "cgi.urlparse(fp, pdict, encoding='utf-8', errors='replace')", "cgi.parse_http_list(fp, pdict, encoding='utf-8', errors='replace')", "cgi.parse_keqv_list(fp, pdict, encoding='utf-8', errors='replace')"], "cgi.parse_multipart(fp, pdict, errors=\"replace\")": ["parse_multipart", "cgi.parse_multipart(fp, pdict, errors=7.0)", "cgi._parser_dispatch(fp, pdict, errors='replace')", "cgi._parse_int(fp, pdict, errors='replace')", "cgi.parse_mime_parameters(fp, pdict, errors='replace')", "cgi._kl_pareto_pareto(fp, pdict, errors='replace')", "cgi._make_sparse(fp, pdict, errors='replace')", "cgi.prepare_parent(fp, pdict, errors='replace')", "cgi.make_sparse(fp, pdict, errors='replace')", "cgi._parse_flags(fp, pdict, errors='replace')", "cgi.du_parse(fp, pdict, errors='replace')", "cgi._parse_einsum_input(fp, pdict, errors='replace')", "cgi.urlparse(fp, pdict, errors='replace')", "cgi.parse_http_list(fp, pdict, errors='replace')", "cgi.parse_keqv_list(fp, pdict, errors='replace')"], "cgi.parse_qs(qs)": ["parse_qs", "cgi.parse_qsl(qs)", "cgi.pad_sequence(qs)", "cgi.safe_repr(qs)", "cgi._isna_array(qs)", "cgi.a2b_qp(qs)", "cgi.broadcast_arrays(qs)", "cgi._unparse_datetime(qs)", "cgi.resolve(qs)", "cgi._wsp_splitter(qs)", "cgi.platform(qs)", "cgi.template(qs)", "cgi.cast_scalar_indexer(qs)", "cgi.close_all(qs)", "cgi.logits_to_probs(qs)"], "cgi.parse_qs(qs, keep_blank_values=False)": ["parse_qs", "cgi.parse_qs(qs, keep_blank_values=True)", "cgi.parse_qsl(qs, keep_blank_values=False)", "cgi.pad_sequence(qs, keep_blank_values=False)", "cgi.safe_repr(qs, keep_blank_values=False)", "cgi._isna_array(qs, keep_blank_values=False)", "cgi.a2b_qp(qs, keep_blank_values=False)", "cgi.broadcast_arrays(qs, keep_blank_values=False)", "cgi._unparse_datetime(qs, keep_blank_values=False)", "cgi.resolve(qs, keep_blank_values=False)", "cgi._wsp_splitter(qs, keep_blank_values=False)", "cgi.platform(qs, keep_blank_values=False)", "cgi.template(qs, keep_blank_values=False)", "cgi.cast_scalar_indexer(qs, keep_blank_values=False)", "cgi.close_all(qs, keep_blank_values=False)"], "cgi.parse_qsl(qs)": ["parse_qsl", "cgi.parse_qs(qs)", "cgi.resolve(qs)", "cgi.pad_sequence(qs)", "cgi.lru_cache(qs)", "cgi.safe_repr(qs)", "cgi.cast_scalar_indexer(qs)", "cgi._isna_array(qs)", "cgi.broadcast_arrays(qs)", "cgi._unparse_datetime(qs)", "cgi.a2b_qp(qs)", "cgi._wsp_splitter(qs)", "cgi.flatten_dtype(qs)", "cgi.platform(qs)", "cgi.template(qs)"], "cgi.print_directory()": ["print_directory", "cgi._print_dict()", "cgi._ensure_directory()", "cgi.print_exception()", "cgi.print_exc()", "cgi.print_form()", "cgi.print_list()", "cgi.print_line()", "cgi.pin_memory()", "cgi.print_environ()", "cgi._swap_direction()", "cgi.errprint()", "cgi.print_arguments()", "cgi._deprecate_as_int()", "cgi._deepcopy_dict()"], "cgi.print_environ()": ["print_environ", "cgi.test()", "cgi.print_environ_usage()", "cgi.print_exception()", "cgi.print_line()", "cgi.errprint()", "cgi.print_directory()", "cgi.print_exc()", "cgi.getproxies_environment()", "cgi.print_form()", "cgi._print_dict()", "cgi.print_list()", "cgi._non_printable_finder()", "cgi.init_frozen()", "cgi.not_none()"], "cgi.print_environ_usage()": ["print_environ_usage", "cgi.print_environ()", "cgi._safe_print()", "cgi._non_printable_finder()", "cgi.getproxies_environment()", "cgi._parse_input_dimensions()", "cgi.print_exception()", "cgi._unstack_extension_series()", "cgi.prepare_multiprocessing_environment()", "cgi.print_line()", "cgi.parse_nvprof_trace()", "cgi.grok_environment_error()", "cgi._parse_einsum_input()", "cgi.sched_get_priority_min()", "cgi._set_jit_function_cache()"], "cgi.print_form(form)": ["print_form", "cgi.format_string(form)", "cgi.fork_rng(form)", "cgi.repr_format(form)", "cgi._format_pipe(form)", "cgi.wait_for(form)", "cgi._from_string(form)", "cgi.format_list(form)", "cgi._format_sign(form)", "cgi.errprint(form)", "cgi.print_directory(form)", "cgi.formatstring(form)", "cgi.print_arguments(form)", "cgi._norm_version(form)", "cgi._print_locale(form)"], "cgi.test()": ["test", "cgi.testmod()", "cgi.get()", "cgi.token_bytes()", "cgi.post_mortem()", "cgi.interact()", "cgi.DocTestSuite()", "cgi.axes()", "cgi.bootstrap()", "cgi._bootstrap()", "cgi.distb()", "cgi.table()", "cgi.textdomain()", "cgi.rc_context()", "cgi.turtlesize()"], "cgihttp_request_handler.cgi_directories": ["cgihttp_request_handler.cgi_directories"], "cgihttp_request_handler.do_POST()": ["do_POST"], "cgitb.enable()": ["enable", "cgitb.nanle()", "cgitb.table()", "cgitb.iterable()", "cgitb._tables()", "cgitb.rename()", "cgitb.traceable()", "cgitb.getabsfile()", "cgitb._getname()", "cgitb.read_table()", "cgitb.isreadable()", "cgitb.disable()", "cgitb.renames()", "cgitb._newname()", "cgitb.eval()"], "cgitb.enable(context=5)": ["enable", "cgitb.enable(context='5')", "cgitb.nanle(context=5)", "cgitb.table(context=5)", "cgitb.iterable(context=5)", "cgitb._tables(context=5)", "cgitb.rename(context=5)", "cgitb.traceable(context=5)", "cgitb.getabsfile(context=5)", "cgitb._getname(context=5)", "cgitb.read_table(context=5)", "cgitb.isreadable(context=5)", "cgitb.disable(context=5)", "cgitb.renames(context=5)", "cgitb._newname(context=5)"], "cgitb.enable(display=1)": ["enable", "cgitb.enable(display='1')", "cgitb.nanle(display=1)", "cgitb.table(display=1)", "cgitb.iterable(display=1)", "cgitb._tables(display=1)", "cgitb.rename(display=1)", "cgitb.traceable(display=1)", "cgitb.getabsfile(display=1)", "cgitb._getname(display=1)", "cgitb.read_table(display=1)", "cgitb.isreadable(display=1)", "cgitb.disable(display=1)", "cgitb.renames(display=1)", "cgitb._newname(display=1)"], "cgitb.enable(display=1, context=5)": ["enable", "cgitb.enable(display='1', context='5')", "cgitb.nanle(display=1, context=5)", "cgitb.table(display=1, context=5)", "cgitb.iterable(display=1, context=5)", "cgitb._tables(display=1, context=5)", "cgitb.rename(display=1, context=5)", "cgitb.traceable(display=1, context=5)", "cgitb.getabsfile(display=1, context=5)", "cgitb._getname(display=1, context=5)", "cgitb.read_table(display=1, context=5)", "cgitb.isreadable(display=1, context=5)", "cgitb.disable(display=1, context=5)", "cgitb.renames(display=1, context=5)", "cgitb._newname(display=1, context=5)"], "cgitb.enable(display=1, format=\"html\")": ["enable", "cgitb.enable(display='1', format=4.0)", "cgitb.nanle(display=1, format='html')", "cgitb.table(display=1, format='html')", "cgitb.iterable(display=1, format='html')", "cgitb._tables(display=1, format='html')", "cgitb.rename(display=1, format='html')", "cgitb.traceable(display=1, format='html')", "cgitb.getabsfile(display=1, format='html')", "cgitb._getname(display=1, format='html')", "cgitb.read_table(display=1, format='html')", "cgitb.isreadable(display=1, format='html')", "cgitb.disable(display=1, format='html')", "cgitb.renames(display=1, format='html')", "cgitb._newname(display=1, format='html')"], "cgitb.enable(display=1, logdir=None)": ["enable", "cgitb.enable(display=1, logdir=None)", "cgitb.enable(display='1', logdir=None)", "cgitb.nanle(display=1, logdir=None)", "cgitb.table(display=1, logdir=None)", "cgitb.iterable(display=1, logdir=None)", "cgitb._tables(display=1, logdir=None)", "cgitb.rename(display=1, logdir=None)", "cgitb.traceable(display=1, logdir=None)", "cgitb.getabsfile(display=1, logdir=None)", "cgitb._getname(display=1, logdir=None)", "cgitb.read_table(display=1, logdir=None)", "cgitb.isreadable(display=1, logdir=None)", "cgitb.disable(display=1, logdir=None)", "cgitb.renames(display=1, logdir=None)"], "cgitb.enable(format=\"html\")": ["enable", "cgitb.enable(format=4.0)", "cgitb.nanle(format='html')", "cgitb.table(format='html')", "cgitb.iterable(format='html')", "cgitb._tables(format='html')", "cgitb.rename(format='html')", "cgitb.traceable(format='html')", "cgitb.getabsfile(format='html')", "cgitb._getname(format='html')", "cgitb.read_table(format='html')", "cgitb.isreadable(format='html')", "cgitb.disable(format='html')", "cgitb.renames(format='html')", "cgitb._newname(format='html')"], "cgitb.enable(logdir=None)": ["enable", "cgitb.enable(logdir=None)", "cgitb.nanle(logdir=None)", "cgitb.table(logdir=None)", "cgitb.iterable(logdir=None)", "cgitb._tables(logdir=None)", "cgitb.rename(logdir=None)", "cgitb.traceable(logdir=None)", "cgitb.getabsfile(logdir=None)", "cgitb._getname(logdir=None)", "cgitb.read_table(logdir=None)", "cgitb.isreadable(logdir=None)", "cgitb.disable(logdir=None)", "cgitb.renames(logdir=None)", "cgitb._newname(logdir=None)"], "cgitb.enable(logdir=None, context=5)": ["enable", "cgitb.enable(logdir=None, context=5)", "cgitb.enable(logdir=None, context='5')", "cgitb.nanle(logdir=None, context=5)", "cgitb.table(logdir=None, context=5)", "cgitb.iterable(logdir=None, context=5)", "cgitb._tables(logdir=None, context=5)", "cgitb.rename(logdir=None, context=5)", "cgitb.traceable(logdir=None, context=5)", "cgitb.getabsfile(logdir=None, context=5)", "cgitb._getname(logdir=None, context=5)", "cgitb.read_table(logdir=None, context=5)", "cgitb.isreadable(logdir=None, context=5)", "cgitb.disable(logdir=None, context=5)", "cgitb.renames(logdir=None, context=5)"], "cgitb.enable(logdir=None, format=\"html\")": ["enable", "cgitb.enable(logdir=None, format='html')", "cgitb.enable(logdir=None, format=4.0)", "cgitb.nanle(logdir=None, format='html')", "cgitb.table(logdir=None, format='html')", "cgitb.iterable(logdir=None, format='html')", "cgitb._tables(logdir=None, format='html')", "cgitb.rename(logdir=None, format='html')", "cgitb.traceable(logdir=None, format='html')", "cgitb.getabsfile(logdir=None, format='html')", "cgitb._getname(logdir=None, format='html')", "cgitb.read_table(logdir=None, format='html')", "cgitb.isreadable(logdir=None, format='html')", "cgitb.disable(logdir=None, format='html')", "cgitb.renames(logdir=None, format='html')"], "cgitb.handler()": ["handler"], "cgitb.handler(info=None)": ["handler", "cgitb.handler(info=None)"], "cgitb.html(info)": ["html", "cgitb.text(info)", "cgitb.ht(info)", "cgitb.__matmul__(info)", "cgitb.matmul(info)", "cgitb.mul(info)", "cgitb.hot(info)", "cgitb.__mul__(info)", "cgitb.XML(info)", "cgitb.Tcl(info)", "cgitb.__imatmul__(info)", "cgitb.hermmul(info)", "cgitb.hermval(info)", "cgitb.imatmul(info)", "cgitb.chebmul(info)"], "cgitb.html(info, context=5)": ["html", "cgitb.html(info, context='5')", "cgitb.text(info, context=5)", "cgitb.ht(info, context=5)", "cgitb.__matmul__(info, context=5)", "cgitb.matmul(info, context=5)", "cgitb.mul(info, context=5)", "cgitb.hot(info, context=5)", "cgitb.__mul__(info, context=5)", "cgitb.XML(info, context=5)", "cgitb.Tcl(info, context=5)", "cgitb.__imatmul__(info, context=5)", "cgitb.hermmul(info, context=5)", "cgitb.hermval(info, context=5)", "cgitb.imatmul(info, context=5)"], "cgitb.text(info)": ["text", "cgitb.figtext(info)", "cgitb.findtext(info)", "cgitb.loadtxt(info)", "cgitb.testmod(info)", "cgitb.execute(info)", "cgitb.take(info)", "cgitb.interact(info)", "cgitb.testfile(info)", "cgitb.stem(info)", "cgitb.tensordot(info)", "cgitb.plot_date(info)", "cgitb.setup(info)", "cgitb.index(info)", "cgitb.utime(info)"], "cgitb.text(info, context=5)": ["text", "cgitb.text(info, context='5')", "cgitb.figtext(info, context=5)", "cgitb.findtext(info, context=5)", "cgitb.loadtxt(info, context=5)", "cgitb.testmod(info, context=5)", "cgitb.execute(info, context=5)", "cgitb.take(info, context=5)", "cgitb.interact(info, context=5)", "cgitb.testfile(info, context=5)", "cgitb.stem(info, context=5)", "cgitb.tensordot(info, context=5)", "cgitb.plot_date(info, context=5)", "cgitb.setup(info, context=5)", "cgitb.index(info, context=5)"], "chain.from_iterable(iterable)": ["from_iterable"], "chain_map.maps": ["chain_map.maps"], "chain_map.new_child()": ["new_child"], "chain_map.new_child(m=None)": ["new_child", "chain_map.new_child(m=None)"], "chain_map.parents": ["chain_map.parents"], "charset.__eq__(other)": ["__eq__"], "charset.__ne__(other)": ["__ne__"], "charset.__str__()": ["__str__"], "charset.body_encode(string)": ["body_encode"], "charset.body_encoding": ["charset.body_encoding"], "charset.header_encode(string)": ["header_encode"], "charset.header_encode_lines(string, maxlengths)": ["header_encode_lines"], "charset.header_encoding": ["charset.header_encoding"], "charset.input_charset": ["charset.input_charset"], "charset.input_codec": ["charset.input_codec"], "charset.output_charset": ["charset.output_charset"], "charset.output_codec": ["charset.output_codec"], "chr(i)": ["chr", "chdir(i)", "fchdir(i)", "cohere(i)", "chroot(i)", "chebder(i)", "xcor(i)", "cram(i)", "ycor(i)", "chebtrim(i)", "_covhelper(i)", "_patch(i)", "clear(i)", "xcorr(i)", "lru_cache(i)"], "chunk.Chunk(file)": ["Chunk"], "chunk.Chunk(file, align=True)": ["Chunk", "chunk.Chunk(file, align=False)"], "chunk.Chunk(file, align=True, bigendian=True)": ["Chunk", "chunk.Chunk(file, align=False, bigendian=False)"], "chunk.Chunk(file, align=True, bigendian=True, inclheader=False)": ["Chunk", "chunk.Chunk(file, align=False, bigendian=False, inclheader=True)"], "chunk.Chunk(file, bigendian=True)": ["Chunk", "chunk.Chunk(file, bigendian=False)"], "chunk.Chunk(file, inclheader=False)": ["Chunk", "chunk.Chunk(file, inclheader=True)"], "chunk.close()": ["close"], "chunk.getname()": ["getname"], "chunk.getsize()": ["getsize"], "chunk.read()": ["read"], "chunk.read(size=-1)": ["read", "chunk.read(size=(- '1'))"], "chunk.seek(pos)": ["seek"], "chunk.seek(pos, whence=0)": ["seek", "chunk.seek(pos, whence='0')"], "chunk.skip()": ["skip"], "chunk.tell()": ["tell"], "class.__bases__": [], "class.__mro__": [], "class.__subclasses__()": [], "class.get_methods()": [], "class.mro()": [], "cmath.acosh(x)": ["acosh"], "cmath.asin(x)": ["asin"], "cmath.asinh(x)": ["asinh"], "cmath.atanh(x)": ["atanh"], "cmath.cos(x)": ["cos"], "cmath.exp(x)": ["exp"], "cmath.inf": ["cmath.inf"], "cmath.infj": ["cmath.infj"], "cmath.isclose(a, b)": ["isclose"], "cmath.isclose(a, b, abs_tol=0.0)": ["isclose", "cmath.isclose(a, b, abs_tol='0.0')"], "cmath.isclose(a, b, rel_tol=1e-09)": ["isclose", "cmath.isclose(a, b, rel_tol='1e-09')"], "cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)": ["isclose", "cmath.isclose(a, b, rel_tol='1e-09', abs_tol='0.0')"], "cmath.isinf(x)": ["isinf"], "cmath.isnan(x)": ["isnan"], "cmath.log(x, base)": ["log"], "cmath.log10(x)": ["log10"], "cmath.nan": ["cmath.nan"], "cmath.nanj": ["cmath.nanj"], "cmath.phase(x)": ["phase"], "cmath.pi": ["cmath.pi"], "cmath.polar(x)": ["polar"], "cmath.rect(r, phi)": ["rect"], "cmath.sqrt(x)": ["sqrt"], "cmath.tan(x)": ["tan"], "cmath.tau": ["cmath.tau"], "cmd.Cmd()": ["Cmd"], "cmd.Cmd(completekey='tab')": ["Cmd", "cmd.Cmd(completekey=3.0)"], "cmd.Cmd(completekey='tab', stdin=None)": ["Cmd", "cmd.Cmd(completekey='tab', stdin=None)", "cmd.Cmd(completekey=3.0, stdin=None)"], "cmd.Cmd(completekey='tab', stdout=None)": ["Cmd", "cmd.Cmd(completekey='tab', stdout=None)", "cmd.Cmd(completekey=3.0, stdout=None)"], "cmd.Cmd(stdin=None)": ["Cmd", "cmd.Cmd(stdin=None)"], "cmd.Cmd(stdin=None, stdout=None)": ["Cmd", "cmd.Cmd(stdin=None, stdout=None)"], "cmd.Cmd(stdout=None)": ["Cmd", "cmd.Cmd(stdout=None)"], "code.InteractiveConsole()": ["InteractiveConsole"], "code.InteractiveConsole(filename=\"<console>\")": ["InteractiveConsole", "code.InteractiveConsole(filename=9)"], "code.InteractiveConsole(locals=None)": ["InteractiveConsole", "code.InteractiveConsole(locals=None)"], "code.InteractiveConsole(locals=None, filename=\"<console>\")": ["InteractiveConsole", "code.InteractiveConsole(locals=None, filename='<console>')", "code.InteractiveConsole(locals=None, filename=9.0)"], "code.InteractiveInterpreter()": ["InteractiveInterpreter"], "code.InteractiveInterpreter(locals=None)": ["InteractiveInterpreter", "code.InteractiveInterpreter(locals=None)"], "code.compile_command(source)": ["compile_command", "code._compile_bytecode(source)", "code.can_compile_class(source)", "code._compile_charset(source)", "code.compile(source)", "code._compile(source)", "code.get_plot_commands(source)", "code.tile_compat(source)", "code.common_type(source)", "code._copy_file_contents(source)", "code._comment_line(source)", "code.as_completed(source)", "code.byte_compile(source)", "code.find_common_type(source)", "code._tocomplex(source)"], "code.compile_command(source, filename=\"<input>\")": ["compile_command", "code.compile_command(source, filename=7)", "code._compile_bytecode(source, filename='<input>')", "code.can_compile_class(source, filename='<input>')", "code._compile_charset(source, filename='<input>')", "code.compile(source, filename='<input>')", "code._compile(source, filename='<input>')", "code.get_plot_commands(source, filename='<input>')", "code.tile_compat(source, filename='<input>')", "code.common_type(source, filename='<input>')", "code._copy_file_contents(source, filename='<input>')", "code._comment_line(source, filename='<input>')", "code.as_completed(source, filename='<input>')", "code.byte_compile(source, filename='<input>')", "code.find_common_type(source, filename='<input>')"], "code.compile_command(source, filename=\"<input>\", symbol=\"single\")": ["compile_command", "code.compile_command(source, filename=7.0, symbol=6.0)", "code._compile_bytecode(source, filename='<input>', symbol='single')", "code.can_compile_class(source, filename='<input>', symbol='single')", "code._compile_charset(source, filename='<input>', symbol='single')", "code.compile(source, filename='<input>', symbol='single')", "code._compile(source, filename='<input>', symbol='single')", "code.get_plot_commands(source, filename='<input>', symbol='single')", "code.tile_compat(source, filename='<input>', symbol='single')", "code.common_type(source, filename='<input>', symbol='single')", "code._copy_file_contents(source, filename='<input>', symbol='single')", "code._comment_line(source, filename='<input>', symbol='single')", "code.as_completed(source, filename='<input>', symbol='single')", "code.byte_compile(source, filename='<input>', symbol='single')", "code.find_common_type(source, filename='<input>', symbol='single')"], "code.compile_command(source, symbol=\"single\")": ["compile_command", "code.compile_command(source, symbol=6.0)", "code._compile_bytecode(source, symbol='single')", "code.can_compile_class(source, symbol='single')", "code._compile_charset(source, symbol='single')", "code.compile(source, symbol='single')", "code._compile(source, symbol='single')", "code.get_plot_commands(source, symbol='single')", "code.tile_compat(source, symbol='single')", "code.common_type(source, symbol='single')", "code._copy_file_contents(source, symbol='single')", "code._comment_line(source, symbol='single')", "code.as_completed(source, symbol='single')", "code.byte_compile(source, symbol='single')", "code.find_common_type(source, symbol='single')"], "code.interact()": ["interact", "code.ndpointer()", "code.tracer()", "code.rc_context()", "code.shearfactor()", "code.print_stack()", "code.init()", "code.test()", "code.extract_stack()", "code.getPeriodData()", "code.set_trace()", "code.stack_size()", "code.getsitepackages()", "code.seterr()", "code.listen()"], "code.interact(banner=None)": ["interact", "code.interact(banner=None)", "code.ndpointer(banner=None)", "code.tracer(banner=None)", "code.rc_context(banner=None)", "code.shearfactor(banner=None)", "code.print_stack(banner=None)", "code.init(banner=None)", "code.test(banner=None)", "code.extract_stack(banner=None)", "code.getPeriodData(banner=None)", "code.set_trace(banner=None)", "code.stack_size(banner=None)", "code.getsitepackages(banner=None)", "code.seterr(banner=None)"], "code.interact(banner=None, local=None)": ["interact", "code.interact(banner=None, local=None)", "code.ndpointer(banner=None, local=None)", "code.tracer(banner=None, local=None)", "code.rc_context(banner=None, local=None)", "code.shearfactor(banner=None, local=None)", "code.print_stack(banner=None, local=None)", "code.init(banner=None, local=None)", "code.test(banner=None, local=None)", "code.extract_stack(banner=None, local=None)", "code.getPeriodData(banner=None, local=None)", "code.set_trace(banner=None, local=None)", "code.stack_size(banner=None, local=None)", "code.getsitepackages(banner=None, local=None)", "code.seterr(banner=None, local=None)"], "code.interact(banner=None, readfunc=None)": ["interact", "code.interact(banner=None, readfunc=None)", "code.ndpointer(banner=None, readfunc=None)", "code.tracer(banner=None, readfunc=None)", "code.rc_context(banner=None, readfunc=None)", "code.shearfactor(banner=None, readfunc=None)", "code.print_stack(banner=None, readfunc=None)", "code.init(banner=None, readfunc=None)", "code.test(banner=None, readfunc=None)", "code.extract_stack(banner=None, readfunc=None)", "code.getPeriodData(banner=None, readfunc=None)", "code.set_trace(banner=None, readfunc=None)", "code.stack_size(banner=None, readfunc=None)", "code.getsitepackages(banner=None, readfunc=None)", "code.seterr(banner=None, readfunc=None)"], "code.interact(local=None)": ["interact", "code.interact(local=None)", "code.ndpointer(local=None)", "code.tracer(local=None)", "code.rc_context(local=None)", "code.shearfactor(local=None)", "code.print_stack(local=None)", "code.init(local=None)", "code.test(local=None)", "code.extract_stack(local=None)", "code.getPeriodData(local=None)", "code.set_trace(local=None)", "code.stack_size(local=None)", "code.getsitepackages(local=None)", "code.seterr(local=None)"], "code.interact(readfunc=None)": ["interact", "code.interact(readfunc=None)", "code.ndpointer(readfunc=None)", "code.tracer(readfunc=None)", "code.rc_context(readfunc=None)", "code.shearfactor(readfunc=None)", "code.print_stack(readfunc=None)", "code.init(readfunc=None)", "code.test(readfunc=None)", "code.extract_stack(readfunc=None)", "code.getPeriodData(readfunc=None)", "code.set_trace(readfunc=None)", "code.stack_size(readfunc=None)", "code.getsitepackages(readfunc=None)", "code.seterr(readfunc=None)"], "code.interact(readfunc=None, exitmsg=None)": ["interact", "code.interact(readfunc=None, exitmsg=None)", "code.ndpointer(readfunc=None, exitmsg=None)", "code.tracer(readfunc=None, exitmsg=None)", "code.rc_context(readfunc=None, exitmsg=None)", "code.shearfactor(readfunc=None, exitmsg=None)", "code.print_stack(readfunc=None, exitmsg=None)", "code.init(readfunc=None, exitmsg=None)", "code.test(readfunc=None, exitmsg=None)", "code.extract_stack(readfunc=None, exitmsg=None)", "code.getPeriodData(readfunc=None, exitmsg=None)", "code.set_trace(readfunc=None, exitmsg=None)", "code.stack_size(readfunc=None, exitmsg=None)", "code.getsitepackages(readfunc=None, exitmsg=None)", "code.seterr(readfunc=None, exitmsg=None)"], "code.interact(readfunc=None, local=None)": ["interact", "code.interact(readfunc=None, local=None)", "code.ndpointer(readfunc=None, local=None)", "code.tracer(readfunc=None, local=None)", "code.rc_context(readfunc=None, local=None)", "code.shearfactor(readfunc=None, local=None)", "code.print_stack(readfunc=None, local=None)", "code.init(readfunc=None, local=None)", "code.test(readfunc=None, local=None)", "code.extract_stack(readfunc=None, local=None)", "code.getPeriodData(readfunc=None, local=None)", "code.set_trace(readfunc=None, local=None)", "code.stack_size(readfunc=None, local=None)", "code.getsitepackages(readfunc=None, local=None)", "code.seterr(readfunc=None, local=None)"], "codec_info.decode": ["codec_info.decode"], "codec_info.encode": ["codec_info.encode"], "codec_info.incrementaldecoder": ["codec_info.incrementaldecoder"], "codec_info.name": ["codec_info.name"], "codecs.BOM": ["codecs.BOM"], "codecs.BOM_BE": ["codecs.BOM_BE"], "codecs.BOM_LE": ["codecs.BOM_LE"], "codecs.BOM_UTF16": ["codecs.BOM_UTF16"], "codecs.BOM_UTF8": ["codecs.BOM_UTF8"], "codecs.CodecInfo(encode, decode)": ["CodecInfo"], "codecs.CodecInfo(encode, decode, incrementaldecoder=None)": ["CodecInfo", "codecs.CodecInfo(encode, decode, incrementaldecoder=None)"], "codecs.CodecInfo(encode, decode, incrementalencoder=None)": ["CodecInfo", "codecs.CodecInfo(encode, decode, incrementalencoder=None)"], "codecs.CodecInfo(encode, decode, name=None)": ["CodecInfo", "codecs.CodecInfo(encode, decode, name=None)"], "codecs.CodecInfo(encode, decode, streamreader=None)": ["CodecInfo", "codecs.CodecInfo(encode, decode, streamreader=None)"], "codecs.CodecInfo(encode, decode, streamreader=None, incrementaldecoder=None)": ["CodecInfo", "codecs.CodecInfo(encode, decode, streamreader=None, incrementaldecoder=None)"], "codecs.CodecInfo(encode, decode, streamreader=None, name=None)": ["CodecInfo", "codecs.CodecInfo(encode, decode, streamreader=None, name=None)"], "codecs.CodecInfo(encode, decode, streamreader=None, streamwriter=None)": ["CodecInfo", "codecs.CodecInfo(encode, decode, streamreader=None, streamwriter=None)"], "codecs.CodecInfo(encode, decode, streamwriter=None)": ["CodecInfo", "codecs.CodecInfo(encode, decode, streamwriter=None)"], "codecs.EncodedFile(file, data_encoding)": ["EncodedFile", "codecs.encode(file, data_encoding)", "codecs.decode(file, data_encoding)", "codecs.encode_rfc2231(file, data_encoding)", "codecs._code_dispatcher(file, data_encoding)", "codecs.b32decode(file, data_encoding)", "codecs._handle_date_column(file, data_encoding)", "codecs._readmodule(file, data_encoding)", "codecs.charmap_encode(file, data_encoding)", "codecs.delete(file, data_encoding)", "codecs.circle(file, data_encoding)", "codecs.tensorsolve(file, data_encoding)", "codecs.tril_indices(file, data_encoding)", "codecs._center_dispatcher(file, data_encoding)", "codecs._append_dispatcher(file, data_encoding)"], "codecs.EncodedFile(file, data_encoding, file_encoding=None)": ["EncodedFile", "codecs.EncodedFile(file, data_encoding, file_encoding=None)", "codecs.encode(file, data_encoding, file_encoding=None)", "codecs.decode(file, data_encoding, file_encoding=None)", "codecs.encode_rfc2231(file, data_encoding, file_encoding=None)", "codecs._code_dispatcher(file, data_encoding, file_encoding=None)", "codecs.b32decode(file, data_encoding, file_encoding=None)", "codecs._handle_date_column(file, data_encoding, file_encoding=None)", "codecs._readmodule(file, data_encoding, file_encoding=None)", "codecs.charmap_encode(file, data_encoding, file_encoding=None)", "codecs.delete(file, data_encoding, file_encoding=None)", "codecs.circle(file, data_encoding, file_encoding=None)", "codecs.tensorsolve(file, data_encoding, file_encoding=None)", "codecs.tril_indices(file, data_encoding, file_encoding=None)", "codecs._center_dispatcher(file, data_encoding, file_encoding=None)"], "codecs.IncrementalDecoder()": ["IncrementalDecoder"], "codecs.IncrementalDecoder(errors='strict')": ["IncrementalDecoder", "codecs.IncrementalDecoder(errors=6)"], "codecs.IncrementalEncoder(errors='strict')": ["IncrementalEncoder", "codecs.IncrementalEncoder(errors=6)"], "codecs.StreamReader(stream)": ["StreamReader"], "codecs.StreamReaderWriter(stream, Reader, Writer)": ["StreamReaderWriter"], "codecs.StreamReaderWriter(stream, Reader, Writer, errors='strict')": ["StreamReaderWriter", "codecs.StreamReaderWriter(stream, Reader, Writer, errors=6.0)"], "codecs.StreamRecoder(stream, encode, decode, Reader, Writer)": ["StreamRecoder"], "codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict')": ["StreamRecoder", "codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors=6)"], "codecs.StreamWriter(stream)": ["StreamWriter"], "codecs.StreamWriter(stream, errors='strict')": ["StreamWriter", "codecs.StreamWriter(stream, errors=6)"], "codecs.backslashreplace_errors(exception)": ["backslashreplace_errors"], "codecs.decode(obj)": ["decode", "codecs.encode(obj)", "codecs._decode_line(obj)", "codecs.ascii_decode(obj)", "codecs.b64encode(obj)", "codecs.escape_decode(obj)", "codecs.charmap_decode(obj)", "codecs.latin_1_decode(obj)", "codecs.cond(obj)", "codecs.utf_8_encode(obj)", "codecs.ascii_encode(obj)", "codecs.hook_encoded(obj)", "codecs.utf_7_encode(obj)", "codecs.escape_encode(obj)", "codecs.show_code(obj)"], "codecs.decode(obj, encoding='utf-8')": ["decode", "codecs.decode(obj, encoding=5)", "codecs.encode(obj, encoding='utf-8')", "codecs._decode_line(obj, encoding='utf-8')", "codecs.ascii_decode(obj, encoding='utf-8')", "codecs.b64encode(obj, encoding='utf-8')", "codecs.escape_decode(obj, encoding='utf-8')", "codecs.charmap_decode(obj, encoding='utf-8')", "codecs.latin_1_decode(obj, encoding='utf-8')", "codecs.cond(obj, encoding='utf-8')", "codecs.utf_8_encode(obj, encoding='utf-8')", "codecs.ascii_encode(obj, encoding='utf-8')", "codecs.hook_encoded(obj, encoding='utf-8')", "codecs.utf_7_encode(obj, encoding='utf-8')", "codecs.escape_encode(obj, encoding='utf-8')"], "codecs.decode(obj, encoding='utf-8', errors='strict')": ["decode", "codecs.decode(obj, encoding=5.0, errors=6.0)", "codecs.encode(obj, encoding='utf-8', errors='strict')", "codecs._decode_line(obj, encoding='utf-8', errors='strict')", "codecs.ascii_decode(obj, encoding='utf-8', errors='strict')", "codecs.b64encode(obj, encoding='utf-8', errors='strict')", "codecs.escape_decode(obj, encoding='utf-8', errors='strict')", "codecs.charmap_decode(obj, encoding='utf-8', errors='strict')", "codecs.latin_1_decode(obj, encoding='utf-8', errors='strict')", "codecs.cond(obj, encoding='utf-8', errors='strict')", "codecs.utf_8_encode(obj, encoding='utf-8', errors='strict')", "codecs.ascii_encode(obj, encoding='utf-8', errors='strict')", "codecs.hook_encoded(obj, encoding='utf-8', errors='strict')", "codecs.utf_7_encode(obj, encoding='utf-8', errors='strict')", "codecs.escape_encode(obj, encoding='utf-8', errors='strict')"], "codecs.encode(obj)": ["encode", "codecs.decode(obj)", "codecs.b64encode(obj)", "codecs.utf_8_encode(obj)", "codecs.ascii_encode(obj)", "codecs.hook_encoded(obj)", "codecs.utf_7_encode(obj)", "codecs.escape_encode(obj)", "codecs.charmap_encode(obj)", "codecs.encode_rfc2231(obj)", "codecs.latin_1_encode(obj)", "codecs.cond(obj)", "codecs._decode_line(obj)", "codecs.ascii_decode(obj)", "codecs.utf_32_be_encode(obj)"], "codecs.encode(obj, encoding='utf-8')": ["encode", "codecs.encode(obj, encoding=5)", "codecs.decode(obj, encoding='utf-8')", "codecs.b64encode(obj, encoding='utf-8')", "codecs.utf_8_encode(obj, encoding='utf-8')", "codecs.ascii_encode(obj, encoding='utf-8')", "codecs.hook_encoded(obj, encoding='utf-8')", "codecs.utf_7_encode(obj, encoding='utf-8')", "codecs.escape_encode(obj, encoding='utf-8')", "codecs.charmap_encode(obj, encoding='utf-8')", "codecs.encode_rfc2231(obj, encoding='utf-8')", "codecs.latin_1_encode(obj, encoding='utf-8')", "codecs.cond(obj, encoding='utf-8')", "codecs._decode_line(obj, encoding='utf-8')", "codecs.ascii_decode(obj, encoding='utf-8')"], "codecs.encode(obj, encoding='utf-8', errors='strict')": ["encode", "codecs.encode(obj, encoding=5.0, errors=6.0)", "codecs.decode(obj, encoding='utf-8', errors='strict')", "codecs.b64encode(obj, encoding='utf-8', errors='strict')", "codecs.utf_8_encode(obj, encoding='utf-8', errors='strict')", "codecs.ascii_encode(obj, encoding='utf-8', errors='strict')", "codecs.hook_encoded(obj, encoding='utf-8', errors='strict')", "codecs.utf_7_encode(obj, encoding='utf-8', errors='strict')", "codecs.escape_encode(obj, encoding='utf-8', errors='strict')", "codecs.charmap_encode(obj, encoding='utf-8', errors='strict')", "codecs.encode_rfc2231(obj, encoding='utf-8', errors='strict')", "codecs.latin_1_encode(obj, encoding='utf-8', errors='strict')", "codecs.cond(obj, encoding='utf-8', errors='strict')", "codecs._decode_line(obj, encoding='utf-8', errors='strict')", "codecs.ascii_decode(obj, encoding='utf-8', errors='strict')"], "codecs.encode(obj, errors='strict')": ["encode", "codecs.encode(obj, errors=6)", "codecs.decode(obj, errors='strict')", "codecs.b64encode(obj, errors='strict')", "codecs.utf_8_encode(obj, errors='strict')", "codecs.ascii_encode(obj, errors='strict')", "codecs.hook_encoded(obj, errors='strict')", "codecs.utf_7_encode(obj, errors='strict')", "codecs.escape_encode(obj, errors='strict')", "codecs.charmap_encode(obj, errors='strict')", "codecs.encode_rfc2231(obj, errors='strict')", "codecs.latin_1_encode(obj, errors='strict')", "codecs.cond(obj, errors='strict')", "codecs._decode_line(obj, errors='strict')", "codecs.ascii_decode(obj, errors='strict')"], "codecs.getdecoder(encoding)": ["getdecoder", "codecs.getencoder(encoding)", "codecs.decode(encoding)", "codecs.getreader(encoding)", "codecs.getnode(encoding)", "codecs.get_loader(encoding)", "codecs.iterdecode(encoding)", "codecs.fsdecode(encoding)", "codecs._decode_args(encoding)", "codecs.decode_q(encoding)", "codecs.decode_b(encoding)", "codecs.getincrementaldecoder(encoding)", "codecs.decodestring(encoding)", "codecs.getLogger(encoding)", "codecs.b64decode(encoding)"], "codecs.getencoder(encoding)": ["getencoder", "codecs.getdecoder(encoding)", "codecs.getnode(encoding)", "codecs._encode(encoding)", "codecs.encode(encoding)", "codecs.getreader(encoding)", "codecs._qencode(encoding)", "codecs._bencode(encoding)", "codecs.get_loader(encoding)", "codecs.iterencode(encoding)", "codecs._ip_getnode(encoding)", "codecs._get_unicode_name(encoding)", "codecs._random_getnode(encoding)", "codecs.encode_b(encoding)", "codecs.get_include(encoding)"], "codecs.ignore_errors(exception)": ["ignore_errors"], "codecs.iterdecode(iterator, encoding, **kwargs)": ["iterdecode", "codecs.iterencode(iterator, encoding, **kwargs)", "codecs.decode(iterator, encoding, **kwargs)", "codecs._decode_args(iterator, encoding, **kwargs)", "codecs.encode(iterator, encoding, **kwargs)", "codecs._encode_result(iterator, encoding, **kwargs)", "codecs._make_iterencode(iterator, encoding, **kwargs)", "codecs.getdecoder(iterator, encoding, **kwargs)", "codecs.intersect1d(iterator, encoding, **kwargs)", "codecs.fsdecode(iterator, encoding, **kwargs)", "codecs.mintypecode(iterator, encoding, **kwargs)", "codecs.decode_q(iterator, encoding, **kwargs)", "codecs.decode_b(iterator, encoding, **kwargs)", "codecs.ascii_decode(iterator, encoding, **kwargs)", "codecs._filter_nodes(iterator, encoding, **kwargs)"], "codecs.iterencode(iterator, encoding, **kwargs)": ["iterencode", "codecs.iterdecode(iterator, encoding, **kwargs)", "codecs.encode(iterator, encoding, **kwargs)", "codecs.decode(iterator, encoding, **kwargs)", "codecs._decode_args(iterator, encoding, **kwargs)", "codecs._encode_result(iterator, encoding, **kwargs)", "codecs._make_iterencode(iterator, encoding, **kwargs)", "codecs._encode(iterator, encoding, **kwargs)", "codecs.urlencode(iterator, encoding, **kwargs)", "codecs._filter_nodes(iterator, encoding, **kwargs)", "codecs._qencode(iterator, encoding, **kwargs)", "codecs._bencode(iterator, encoding, **kwargs)", "codecs.getencoder(iterator, encoding, **kwargs)", "codecs.encode_b(iterator, encoding, **kwargs)", "codecs.encode_q(iterator, encoding, **kwargs)"], "codecs.lookup(encoding)": ["lookup", "codecs.loop(encoding)", "codecs.lookup_error(encoding)", "codecs.lookfor(encoding)", "codecs.Lock(encoding)", "codecs._noop(encoding)", "codecs._block_setup(encoding)", "codecs._get_loop(encoding)", "codecs.mainloop(encoding)", "codecs.lockf(encoding)", "codecs.group(encoding)", "codecs.block(encoding)", "codecs._group(encoding)", "codecs._block(encoding)", "codecs.RLock(encoding)"], "codecs.lookup_error(name)": ["lookup_error", "codecs.lookup(name)", "codecs._construct_lookups(name)", "codecs._get_loop(name)", "codecs._error(name)", "codecs.error(name)", "codecs._ignore_error(name)", "codecs.hermfromroots(name)", "codecs.hermefromroots(name)", "codecs._tkerror(name)", "codecs.encode_noop(name)", "codecs._op_maker(name)", "codecs.strerror(name)", "codecs.hook_encoded(name)", "codecs.legfromroots(name)"], "codecs.namereplace_errors(exception)": ["namereplace_errors"], "codecs.open(filename)": ["open", "codecs._open(filename)", "codecs.open_latin1(filename)", "codecs.popen(filename)", "codecs.bltn_open(filename)", "codecs.OpenWrapper(filename)", "codecs._builtin_open(filename)", "codecs.urlopen(filename)", "codecs.pie(filename)", "codecs._run_code(filename)", "codecs.compress(filename)", "codecs._popen(filename)", "codecs.byte_compile(filename)", "codecs.boxplot(filename)", "codecs.pen(filename)"], "codecs.open(filename, buffering=1)": ["open", "codecs.open(filename, buffering='1')", "codecs._open(filename, buffering=1)", "codecs.open_latin1(filename, buffering=1)", "codecs.popen(filename, buffering=1)", "codecs.bltn_open(filename, buffering=1)", "codecs.OpenWrapper(filename, buffering=1)", "codecs._builtin_open(filename, buffering=1)", "codecs.urlopen(filename, buffering=1)", "codecs.pie(filename, buffering=1)", "codecs._run_code(filename, buffering=1)", "codecs.compress(filename, buffering=1)", "codecs._popen(filename, buffering=1)", "codecs.byte_compile(filename, buffering=1)", "codecs.boxplot(filename, buffering=1)"], "codecs.open(filename, mode='r')": ["open", "codecs.open(filename, mode=1)", "codecs._open(filename, mode='r')", "codecs.open_latin1(filename, mode='r')", "codecs.popen(filename, mode='r')", "codecs.bltn_open(filename, mode='r')", "codecs.OpenWrapper(filename, mode='r')", "codecs._builtin_open(filename, mode='r')", "codecs.urlopen(filename, mode='r')", "codecs.pie(filename, mode='r')", "codecs._run_code(filename, mode='r')", "codecs.compress(filename, mode='r')", "codecs._popen(filename, mode='r')", "codecs.byte_compile(filename, mode='r')", "codecs.boxplot(filename, mode='r')"], "codecs.open(filename, mode='r', buffering=1)": ["open", "codecs.open(filename, mode=1, buffering='1')", "codecs._open(filename, mode='r', buffering=1)", "codecs.open_latin1(filename, mode='r', buffering=1)", "codecs.popen(filename, mode='r', buffering=1)", "codecs.bltn_open(filename, mode='r', buffering=1)", "codecs.OpenWrapper(filename, mode='r', buffering=1)", "codecs._builtin_open(filename, mode='r', buffering=1)", "codecs.urlopen(filename, mode='r', buffering=1)", "codecs.pie(filename, mode='r', buffering=1)", "codecs._run_code(filename, mode='r', buffering=1)", "codecs.compress(filename, mode='r', buffering=1)", "codecs._popen(filename, mode='r', buffering=1)", "codecs.byte_compile(filename, mode='r', buffering=1)", "codecs.boxplot(filename, mode='r', buffering=1)"], "codecs.open(filename, mode='r', errors='strict')": ["open", "codecs.open(filename, mode=1, errors=6)", "codecs._open(filename, mode='r', errors='strict')", "codecs.open_latin1(filename, mode='r', errors='strict')", "codecs.popen(filename, mode='r', errors='strict')", "codecs.bltn_open(filename, mode='r', errors='strict')", "codecs.OpenWrapper(filename, mode='r', errors='strict')", "codecs._builtin_open(filename, mode='r', errors='strict')", "codecs.urlopen(filename, mode='r', errors='strict')", "codecs.pie(filename, mode='r', errors='strict')", "codecs._run_code(filename, mode='r', errors='strict')", "codecs.compress(filename, mode='r', errors='strict')", "codecs._popen(filename, mode='r', errors='strict')", "codecs.byte_compile(filename, mode='r', errors='strict')", "codecs.boxplot(filename, mode='r', errors='strict')"], "codecs.register(search_function)": ["register", "codecs._register(search_function)", "codecs.deregister(search_function)", "codecs.register_kl(search_function)", "codecs._abc_register(search_function)", "codecs._register_type(search_function)", "codecs._register_task(search_function)", "codecs.register_cmap(search_function)", "codecs.register_shape(search_function)", "codecs.registerResult(search_function)", "codecs.register_error(search_function)", "codecs._register_types(search_function)", "codecs.easter(search_function)", "codecs._c_register_task(search_function)", "codecs._unregister_task(search_function)"], "codecs.replace_errors(exception)": ["replace_errors"], "codecs.strict_errors(exception)": ["strict_errors"], "codecs.xmlcharrefreplace_errors(exception)": ["xmlcharrefreplace_errors"], "codeop.CommandCompiler": ["codeop.CommandCompiler"], "codeop.Compile": ["codeop.Compile"], "codeop.compile_command(source)": ["compile_command", "codeop._compile_bytecode(source)", "codeop.can_compile_class(source)", "codeop._compile_charset(source)", "codeop.compile(source)", "codeop._compile(source)", "codeop.get_plot_commands(source)", "codeop.tile_compat(source)", "codeop.common_type(source)", "codeop._copy_file_contents(source)", "codeop._comment_line(source)", "codeop.as_completed(source)", "codeop.byte_compile(source)", "codeop.find_common_type(source)", "codeop._tocomplex(source)"], "codeop.compile_command(source, filename=\"<input>\")": ["compile_command", "codeop.compile_command(source, filename=7.0)", "codeop._compile_bytecode(source, filename='<input>')", "codeop.can_compile_class(source, filename='<input>')", "codeop._compile_charset(source, filename='<input>')", "codeop.compile(source, filename='<input>')", "codeop._compile(source, filename='<input>')", "codeop.get_plot_commands(source, filename='<input>')", "codeop.tile_compat(source, filename='<input>')", "codeop.common_type(source, filename='<input>')", "codeop._copy_file_contents(source, filename='<input>')", "codeop._comment_line(source, filename='<input>')", "codeop.as_completed(source, filename='<input>')", "codeop.byte_compile(source, filename='<input>')", "codeop.find_common_type(source, filename='<input>')"], "codeop.compile_command(source, filename=\"<input>\", symbol=\"single\")": ["compile_command", "codeop.compile_command(source, filename=7.0, symbol=6)", "codeop._compile_bytecode(source, filename='<input>', symbol='single')", "codeop.can_compile_class(source, filename='<input>', symbol='single')", "codeop._compile_charset(source, filename='<input>', symbol='single')", "codeop.compile(source, filename='<input>', symbol='single')", "codeop._compile(source, filename='<input>', symbol='single')", "codeop.get_plot_commands(source, filename='<input>', symbol='single')", "codeop.tile_compat(source, filename='<input>', symbol='single')", "codeop.common_type(source, filename='<input>', symbol='single')", "codeop._copy_file_contents(source, filename='<input>', symbol='single')", "codeop._comment_line(source, filename='<input>', symbol='single')", "codeop.as_completed(source, filename='<input>', symbol='single')", "codeop.byte_compile(source, filename='<input>', symbol='single')", "codeop.find_common_type(source, filename='<input>', symbol='single')"], "codeop.compile_command(source, symbol=\"single\")": ["compile_command", "codeop.compile_command(source, symbol=6.0)", "codeop._compile_bytecode(source, symbol='single')", "codeop.can_compile_class(source, symbol='single')", "codeop._compile_charset(source, symbol='single')", "codeop.compile(source, symbol='single')", "codeop._compile(source, symbol='single')", "codeop.get_plot_commands(source, symbol='single')", "codeop.tile_compat(source, symbol='single')", "codeop.common_type(source, symbol='single')", "codeop._copy_file_contents(source, symbol='single')", "codeop._comment_line(source, symbol='single')", "codeop.as_completed(source, symbol='single')", "codeop.byte_compile(source, symbol='single')", "codeop.find_common_type(source, symbol='single')"], "collections.ChainMap(*maps)": ["ChainMap"], "collections.Counter()": ["Counter"], "collections.Counter(iterable-or-mapping)": [], "collections.OrderedDict()": ["OrderedDict"], "collections.OrderedDict(items)": ["OrderedDict"], "collections.UserDict()": ["UserDict"], "collections.UserDict(initialdata)": ["UserDict"], "collections.UserList()": ["UserList"], "collections.UserList(list)": ["UserList"], "collections.UserString(seq)": ["UserString"], "collections.abc.AsyncGenerator": ["collections.abc.AsyncGenerator"], "collections.abc.AsyncIterator": ["collections.abc.AsyncIterator"], "collections.abc.Awaitable": ["collections.abc.Awaitable"], "collections.abc.ByteString": ["collections.abc.ByteString"], "collections.abc.Collection": ["collections.abc.Collection"], "collections.abc.Coroutine": ["collections.abc.Coroutine"], "collections.abc.KeysView": ["collections.abc.KeysView"], "collections.abc.MappingView": ["collections.abc.MappingView"], "collections.abc.MutableSequence": ["collections.abc.MutableSequence"], "collections.abc.Sequence": ["collections.abc.Sequence"], "collections.abc.Set": ["collections.abc.Set"], "collections.abc.ValuesView": ["collections.abc.ValuesView"], "collections.deque()": ["deque"], "collections.deque(iterable)": ["deque"], "collections.deque(iterable, maxlen)": ["deque"], "collections.namedtuple(typename, field_names)": ["namedtuple", "collections._namedtuple(typename, field_names)", "collections.all_reduce(typename, field_names)", "collections.NamedTemporaryFile(typename, field_names)", "collections.finditer(typename, field_names)", "collections._init_module_attrs(typename, field_names)", "collections.dump(typename, field_names)", "collections._normalize(typename, field_names)", "collections.interpolate_2d(typename, field_names)", "collections.replicate(typename, field_names)", "collections.prepare_dynamic_jit(typename, field_names)", "collections.merge(typename, field_names)", "collections.index(typename, field_names)", "collections.nan_to_num(typename, field_names)", "collections.formatdate(typename, field_names)"], "collections.namedtuple(typename, field_names, defaults=None)": ["namedtuple", "collections.namedtuple(typename, field_names, defaults=None)", "collections._namedtuple(typename, field_names, defaults=None)", "collections.all_reduce(typename, field_names, defaults=None)", "collections.NamedTemporaryFile(typename, field_names, defaults=None)", "collections.finditer(typename, field_names, defaults=None)", "collections._init_module_attrs(typename, field_names, defaults=None)", "collections.dump(typename, field_names, defaults=None)", "collections._normalize(typename, field_names, defaults=None)", "collections.interpolate_2d(typename, field_names, defaults=None)", "collections.replicate(typename, field_names, defaults=None)", "collections.prepare_dynamic_jit(typename, field_names, defaults=None)", "collections.merge(typename, field_names, defaults=None)", "collections.index(typename, field_names, defaults=None)", "collections.nan_to_num(typename, field_names, defaults=None)"], "collections.namedtuple(typename, field_names, module=None)": ["namedtuple", "collections.namedtuple(typename, field_names, module=None)", "collections._namedtuple(typename, field_names, module=None)", "collections.all_reduce(typename, field_names, module=None)", "collections.NamedTemporaryFile(typename, field_names, module=None)", "collections.finditer(typename, field_names, module=None)", "collections._init_module_attrs(typename, field_names, module=None)", "collections.dump(typename, field_names, module=None)", "collections._normalize(typename, field_names, module=None)", "collections.interpolate_2d(typename, field_names, module=None)", "collections.replicate(typename, field_names, module=None)", "collections.prepare_dynamic_jit(typename, field_names, module=None)", "collections.merge(typename, field_names, module=None)", "collections.index(typename, field_names, module=None)", "collections.nan_to_num(typename, field_names, module=None)"], "collections.namedtuple(typename, field_names, rename=False)": ["namedtuple", "collections.namedtuple(typename, field_names, rename=True)", "collections._namedtuple(typename, field_names, rename=False)", "collections.all_reduce(typename, field_names, rename=False)", "collections.NamedTemporaryFile(typename, field_names, rename=False)", "collections.finditer(typename, field_names, rename=False)", "collections._init_module_attrs(typename, field_names, rename=False)", "collections.dump(typename, field_names, rename=False)", "collections._normalize(typename, field_names, rename=False)", "collections.interpolate_2d(typename, field_names, rename=False)", "collections.replicate(typename, field_names, rename=False)", "collections.prepare_dynamic_jit(typename, field_names, rename=False)", "collections.merge(typename, field_names, rename=False)", "collections.index(typename, field_names, rename=False)", "collections.nan_to_num(typename, field_names, rename=False)"], "collections.namedtuple(typename, field_names, rename=False, defaults=None)": ["namedtuple", "collections.namedtuple(typename, field_names, rename=True, defaults=None)", "collections._namedtuple(typename, field_names, rename=False, defaults=None)", "collections.all_reduce(typename, field_names, rename=False, defaults=None)", "collections.NamedTemporaryFile(typename, field_names, rename=False, defaults=None)", "collections.finditer(typename, field_names, rename=False, defaults=None)", "collections._init_module_attrs(typename, field_names, rename=False, defaults=None)", "collections.dump(typename, field_names, rename=False, defaults=None)", "collections._normalize(typename, field_names, rename=False, defaults=None)", "collections.interpolate_2d(typename, field_names, rename=False, defaults=None)", "collections.replicate(typename, field_names, rename=False, defaults=None)", "collections.prepare_dynamic_jit(typename, field_names, rename=False, defaults=None)", "collections.merge(typename, field_names, rename=False, defaults=None)", "collections.index(typename, field_names, rename=False, defaults=None)", "collections.nan_to_num(typename, field_names, rename=False, defaults=None)"], "collections.namedtuple(typename, field_names, rename=False, module=None)": ["namedtuple", "collections.namedtuple(typename, field_names, rename=True, module=None)", "collections._namedtuple(typename, field_names, rename=False, module=None)", "collections.all_reduce(typename, field_names, rename=False, module=None)", "collections.NamedTemporaryFile(typename, field_names, rename=False, module=None)", "collections.finditer(typename, field_names, rename=False, module=None)", "collections._init_module_attrs(typename, field_names, rename=False, module=None)", "collections.dump(typename, field_names, rename=False, module=None)", "collections._normalize(typename, field_names, rename=False, module=None)", "collections.interpolate_2d(typename, field_names, rename=False, module=None)", "collections.replicate(typename, field_names, rename=False, module=None)", "collections.prepare_dynamic_jit(typename, field_names, rename=False, module=None)", "collections.merge(typename, field_names, rename=False, module=None)", "collections.index(typename, field_names, rename=False, module=None)", "collections.nan_to_num(typename, field_names, rename=False, module=None)"], "colorsys.hls_to_rgb(h, l, s)": ["hls_to_rgb", "colorsys.rgb_to_hls(h, l, s)", "colorsys.hsv_to_rgb(h, l, s)", "colorsys.rgb_to_hsv(h, l, s)", "colorsys.logits_to_probs(h, l, s)", "colorsys.probs_to_logits(h, l, s)", "colorsys.yiq_to_rgb(h, l, s)", "colorsys.rgb_to_yiq(h, l, s)", "colorsys.test_rgb(h, l, s)", "colorsys._adjust_to_origin(h, l, s)", "colorsys.is_per_tensor(h, l, s)", "colorsys.log_to_stderr(h, l, s)", "colorsys._vector_str(h, l, s)", "colorsys._has_surrogates(h, l, s)", "colorsys._tensor_str(h, l, s)"], "colorsys.hsv_to_rgb(h, s, v)": ["hsv_to_rgb", "colorsys.rgb_to_hsv(h, s, v)", "colorsys.hls_to_rgb(h, s, v)", "colorsys.rgb_to_hls(h, s, v)", "colorsys.yiq_to_rgb(h, s, v)", "colorsys.rgb_to_yiq(h, s, v)", "colorsys.logits_to_probs(h, s, v)", "colorsys.probs_to_logits(h, s, v)", "colorsys.test_rgb(h, s, v)", "colorsys._adjust_to_origin(h, s, v)", "colorsys.is_per_tensor(h, s, v)", "colorsys._vector_str(h, s, v)", "colorsys._has_surrogates(h, s, v)", "colorsys._tensor_str(h, s, v)", "colorsys.to_feather(h, s, v)"], "colorsys.rgb_to_hls(r, g, b)": ["rgb_to_hls", "colorsys.hls_to_rgb(r, g, b)", "colorsys.hsv_to_rgb(r, g, b)", "colorsys.rgb_to_hsv(r, g, b)", "colorsys.logits_to_probs(r, g, b)", "colorsys.probs_to_logits(r, g, b)", "colorsys.yiq_to_rgb(r, g, b)", "colorsys.rgb_to_yiq(r, g, b)", "colorsys.test_rgb(r, g, b)", "colorsys._adjust_to_origin(r, g, b)", "colorsys.is_per_tensor(r, g, b)", "colorsys.log_to_stderr(r, g, b)", "colorsys._vector_str(r, g, b)", "colorsys._has_surrogates(r, g, b)", "colorsys._tensor_str(r, g, b)"], "colorsys.rgb_to_hsv(r, g, b)": ["rgb_to_hsv", "colorsys.hsv_to_rgb(r, g, b)", "colorsys.hls_to_rgb(r, g, b)", "colorsys.rgb_to_hls(r, g, b)", "colorsys.yiq_to_rgb(r, g, b)", "colorsys.rgb_to_yiq(r, g, b)", "colorsys.logits_to_probs(r, g, b)", "colorsys.probs_to_logits(r, g, b)", "colorsys.test_rgb(r, g, b)", "colorsys._adjust_to_origin(r, g, b)", "colorsys.is_per_tensor(r, g, b)", "colorsys._vector_str(r, g, b)", "colorsys._has_surrogates(r, g, b)", "colorsys._tensor_str(r, g, b)", "colorsys.to_feather(r, g, b)"], "colorsys.rgb_to_yiq(r, g, b)": ["rgb_to_yiq", "colorsys.yiq_to_rgb(r, g, b)", "colorsys.hls_to_rgb(r, g, b)", "colorsys.hsv_to_rgb(r, g, b)", "colorsys.rgb_to_hsv(r, g, b)", "colorsys.rgb_to_hls(r, g, b)", "colorsys.test_rgb(r, g, b)", "colorsys._nt_quote_args(r, g, b)", "colorsys._ip_getnode(r, g, b)", "colorsys.mgr_to_mgr(r, g, b)", "colorsys._coerce_to_type(r, g, b)", "colorsys.ann_to_type(r, g, b)", "colorsys.right_shift(r, g, b)", "colorsys._get_gid(r, g, b)", "colorsys._get_uid(r, g, b)"], "colorsys.yiq_to_rgb(y, i, q)": ["yiq_to_rgb", "colorsys.rgb_to_yiq(y, i, q)", "colorsys.hls_to_rgb(y, i, q)", "colorsys.hsv_to_rgb(y, i, q)", "colorsys.rgb_to_hsv(y, i, q)", "colorsys.rgb_to_hls(y, i, q)", "colorsys.test_rgb(y, i, q)", "colorsys._nt_quote_args(y, i, q)", "colorsys._ip_getnode(y, i, q)", "colorsys.mgr_to_mgr(y, i, q)", "colorsys._coerce_to_type(y, i, q)", "colorsys.ann_to_type(y, i, q)", "colorsys.right_shift(y, i, q)", "colorsys._get_gid(y, i, q)", "colorsys._get_uid(y, i, q)"], "compat32.fold(name, value)": ["fold"], "compat32.fold_binary(name, value)": ["fold_binary"], "compat32.header_source_parse(sourcelines)": ["header_source_parse"], "compile(source, filename, mode)": ["compile", "as_completed(source, filename, mode)", "circle(source, filename, mode)", "compress_nd(source, filename, mode)", "open(source, filename, mode)", "get_cmap(source, filename, mode)", "get_default_compiler(source, filename, mode)", "_get_compressor(source, filename, mode)", "fromfile(source, filename, mode)", "splitlines(source, filename, mode)", "filled(source, filename, mode)", "openfp(source, filename, mode)", "escape(source, filename, mode)", "encode(source, filename, mode)", "Client(source, filename, mode)"], "compile(source, filename, mode, dont_inherit=False)": ["compile", "compile(source, filename, mode, dont_inherit=True)", "as_completed(source, filename, mode, dont_inherit=False)", "circle(source, filename, mode, dont_inherit=False)", "compress_nd(source, filename, mode, dont_inherit=False)", "open(source, filename, mode, dont_inherit=False)", "get_cmap(source, filename, mode, dont_inherit=False)", "get_default_compiler(source, filename, mode, dont_inherit=False)", "_get_compressor(source, filename, mode, dont_inherit=False)", "fromfile(source, filename, mode, dont_inherit=False)", "splitlines(source, filename, mode, dont_inherit=False)", "filled(source, filename, mode, dont_inherit=False)", "openfp(source, filename, mode, dont_inherit=False)", "escape(source, filename, mode, dont_inherit=False)", "encode(source, filename, mode, dont_inherit=False)"], "compile(source, filename, mode, dont_inherit=False, optimize=-1)": ["compile", "compile(source, filename, mode, dont_inherit=True, optimize=(- 1))", "compile(source, filename, mode, dont_inherit=False, optimize=(- '1'))", "as_completed(source, filename, mode, dont_inherit=False, optimize=(- 1))", "circle(source, filename, mode, dont_inherit=False, optimize=(- 1))", "compress_nd(source, filename, mode, dont_inherit=False, optimize=(- 1))", "open(source, filename, mode, dont_inherit=False, optimize=(- 1))", "get_cmap(source, filename, mode, dont_inherit=False, optimize=(- 1))", "get_default_compiler(source, filename, mode, dont_inherit=False, optimize=(- 1))", "_get_compressor(source, filename, mode, dont_inherit=False, optimize=(- 1))", "fromfile(source, filename, mode, dont_inherit=False, optimize=(- 1))", "splitlines(source, filename, mode, dont_inherit=False, optimize=(- 1))", "filled(source, filename, mode, dont_inherit=False, optimize=(- 1))", "openfp(source, filename, mode, dont_inherit=False, optimize=(- 1))", "escape(source, filename, mode, dont_inherit=False, optimize=(- 1))"], "compile(source, filename, mode, flags=0)": ["compile", "compile(source, filename, mode, flags='0')", "as_completed(source, filename, mode, flags=0)", "circle(source, filename, mode, flags=0)", "compress_nd(source, filename, mode, flags=0)", "open(source, filename, mode, flags=0)", "get_cmap(source, filename, mode, flags=0)", "get_default_compiler(source, filename, mode, flags=0)", "_get_compressor(source, filename, mode, flags=0)", "fromfile(source, filename, mode, flags=0)", "splitlines(source, filename, mode, flags=0)", "filled(source, filename, mode, flags=0)", "openfp(source, filename, mode, flags=0)", "escape(source, filename, mode, flags=0)", "encode(source, filename, mode, flags=0)"], "compile(source, filename, mode, flags=0, dont_inherit=False)": ["compile", "compile(source, filename, mode, flags=0, dont_inherit=True)", "compile(source, filename, mode, flags='0', dont_inherit=False)", "as_completed(source, filename, mode, flags=0, dont_inherit=False)", "circle(source, filename, mode, flags=0, dont_inherit=False)", "compress_nd(source, filename, mode, flags=0, dont_inherit=False)", "open(source, filename, mode, flags=0, dont_inherit=False)", "get_cmap(source, filename, mode, flags=0, dont_inherit=False)", "get_default_compiler(source, filename, mode, flags=0, dont_inherit=False)", "_get_compressor(source, filename, mode, flags=0, dont_inherit=False)", "fromfile(source, filename, mode, flags=0, dont_inherit=False)", "splitlines(source, filename, mode, flags=0, dont_inherit=False)", "filled(source, filename, mode, flags=0, dont_inherit=False)", "openfp(source, filename, mode, flags=0, dont_inherit=False)", "escape(source, filename, mode, flags=0, dont_inherit=False)"], "compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)": ["compile", "compile(source, filename, mode, flags=0, dont_inherit=True, optimize=(- 1))", "compile(source, filename, mode, flags='0', dont_inherit=False, optimize=(- '1'))", "as_completed(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "circle(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "compress_nd(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "open(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "get_cmap(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "get_default_compiler(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "_get_compressor(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "fromfile(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "splitlines(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "filled(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "openfp(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))", "escape(source, filename, mode, flags=0, dont_inherit=False, optimize=(- 1))"], "compile(source, filename, mode, flags=0, optimize=-1)": ["compile", "compile(source, filename, mode, flags='0', optimize=(- '1'))", "as_completed(source, filename, mode, flags=0, optimize=(- 1))", "circle(source, filename, mode, flags=0, optimize=(- 1))", "compress_nd(source, filename, mode, flags=0, optimize=(- 1))", "open(source, filename, mode, flags=0, optimize=(- 1))", "get_cmap(source, filename, mode, flags=0, optimize=(- 1))", "get_default_compiler(source, filename, mode, flags=0, optimize=(- 1))", "_get_compressor(source, filename, mode, flags=0, optimize=(- 1))", "fromfile(source, filename, mode, flags=0, optimize=(- 1))", "splitlines(source, filename, mode, flags=0, optimize=(- 1))", "filled(source, filename, mode, flags=0, optimize=(- 1))", "openfp(source, filename, mode, flags=0, optimize=(- 1))", "escape(source, filename, mode, flags=0, optimize=(- 1))", "encode(source, filename, mode, flags=0, optimize=(- 1))"], "compile(source, filename, mode, optimize=-1)": ["compile", "compile(source, filename, mode, optimize=(- '1'))", "as_completed(source, filename, mode, optimize=(- 1))", "circle(source, filename, mode, optimize=(- 1))", "compress_nd(source, filename, mode, optimize=(- 1))", "open(source, filename, mode, optimize=(- 1))", "get_cmap(source, filename, mode, optimize=(- 1))", "get_default_compiler(source, filename, mode, optimize=(- 1))", "_get_compressor(source, filename, mode, optimize=(- 1))", "fromfile(source, filename, mode, optimize=(- 1))", "splitlines(source, filename, mode, optimize=(- 1))", "filled(source, filename, mode, optimize=(- 1))", "openfp(source, filename, mode, optimize=(- 1))", "escape(source, filename, mode, optimize=(- 1))", "encode(source, filename, mode, optimize=(- 1))"], "compileall.compile_dir(dir)": ["compile_dir", "compileall.load_compiled(dir)", "compileall.compile(dir)", "compileall.run_module(dir)", "compileall._median(dir)", "compileall.as_completed(dir)", "compileall._nanmedian(dir)", "compileall.open(dir)", "compileall.all_gather_coalesced(dir)", "compileall.all_reduce_coalesced(dir)", "compileall.read_pickle(dir)", "compileall.copyfileobj(dir)", "compileall._max_pool3d(dir)", "compileall._max_pool1d(dir)", "compileall._max_pool2d(dir)"], "compileall.compile_dir(dir, ddir=None)": ["compile_dir", "compileall.compile_dir(dir, ddir=None)", "compileall.load_compiled(dir, ddir=None)", "compileall.compile(dir, ddir=None)", "compileall.run_module(dir, ddir=None)", "compileall._median(dir, ddir=None)", "compileall.as_completed(dir, ddir=None)", "compileall._nanmedian(dir, ddir=None)", "compileall.open(dir, ddir=None)", "compileall.all_gather_coalesced(dir, ddir=None)", "compileall.all_reduce_coalesced(dir, ddir=None)", "compileall.read_pickle(dir, ddir=None)", "compileall.copyfileobj(dir, ddir=None)", "compileall._max_pool3d(dir, ddir=None)", "compileall._max_pool1d(dir, ddir=None)"], "compileall.compile_dir(dir, force=False)": ["compile_dir", "compileall.compile_dir(dir, force=True)", "compileall.load_compiled(dir, force=False)", "compileall.compile(dir, force=False)", "compileall.run_module(dir, force=False)", "compileall._median(dir, force=False)", "compileall.as_completed(dir, force=False)", "compileall._nanmedian(dir, force=False)", "compileall.open(dir, force=False)", "compileall.all_gather_coalesced(dir, force=False)", "compileall.all_reduce_coalesced(dir, force=False)", "compileall.read_pickle(dir, force=False)", "compileall.copyfileobj(dir, force=False)", "compileall._max_pool3d(dir, force=False)", "compileall._max_pool1d(dir, force=False)"], "compileall.compile_dir(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)": ["compile_dir", "compileall.load_compiled(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.compile(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.run_module(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall._median(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.as_completed(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall._nanmedian(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.open(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.all_gather_coalesced(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.all_reduce_coalesced(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.read_pickle(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.copyfileobj(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall._max_pool3d(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall._max_pool1d(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall._max_pool2d(dir, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)"], "compileall.compile_dir(dir, legacy=False)": ["compile_dir", "compileall.compile_dir(dir, legacy=True)", "compileall.load_compiled(dir, legacy=False)", "compileall.compile(dir, legacy=False)", "compileall.run_module(dir, legacy=False)", "compileall._median(dir, legacy=False)", "compileall.as_completed(dir, legacy=False)", "compileall._nanmedian(dir, legacy=False)", "compileall.open(dir, legacy=False)", "compileall.all_gather_coalesced(dir, legacy=False)", "compileall.all_reduce_coalesced(dir, legacy=False)", "compileall.read_pickle(dir, legacy=False)", "compileall.copyfileobj(dir, legacy=False)", "compileall._max_pool3d(dir, legacy=False)", "compileall._max_pool1d(dir, legacy=False)"], "compileall.compile_dir(dir, maxlevels=10)": ["compile_dir", "compileall.compile_dir(dir, maxlevels='10')", "compileall.load_compiled(dir, maxlevels=10)", "compileall.compile(dir, maxlevels=10)", "compileall.run_module(dir, maxlevels=10)", "compileall._median(dir, maxlevels=10)", "compileall.as_completed(dir, maxlevels=10)", "compileall._nanmedian(dir, maxlevels=10)", "compileall.open(dir, maxlevels=10)", "compileall.all_gather_coalesced(dir, maxlevels=10)", "compileall.all_reduce_coalesced(dir, maxlevels=10)", "compileall.read_pickle(dir, maxlevels=10)", "compileall.copyfileobj(dir, maxlevels=10)", "compileall._max_pool3d(dir, maxlevels=10)", "compileall._max_pool1d(dir, maxlevels=10)"], "compileall.compile_dir(dir, optimize=-1)": ["compile_dir", "compileall.compile_dir(dir, optimize=(- '1'))", "compileall.load_compiled(dir, optimize=(- 1))", "compileall.compile(dir, optimize=(- 1))", "compileall.run_module(dir, optimize=(- 1))", "compileall._median(dir, optimize=(- 1))", "compileall.as_completed(dir, optimize=(- 1))", "compileall._nanmedian(dir, optimize=(- 1))", "compileall.open(dir, optimize=(- 1))", "compileall.all_gather_coalesced(dir, optimize=(- 1))", "compileall.all_reduce_coalesced(dir, optimize=(- 1))", "compileall.read_pickle(dir, optimize=(- 1))", "compileall.copyfileobj(dir, optimize=(- 1))", "compileall._max_pool3d(dir, optimize=(- 1))", "compileall._max_pool1d(dir, optimize=(- 1))"], "compileall.compile_dir(dir, quiet=0)": ["compile_dir", "compileall.compile_dir(dir, quiet='0')", "compileall.load_compiled(dir, quiet=0)", "compileall.compile(dir, quiet=0)", "compileall.run_module(dir, quiet=0)", "compileall._median(dir, quiet=0)", "compileall.as_completed(dir, quiet=0)", "compileall._nanmedian(dir, quiet=0)", "compileall.open(dir, quiet=0)", "compileall.all_gather_coalesced(dir, quiet=0)", "compileall.all_reduce_coalesced(dir, quiet=0)", "compileall.read_pickle(dir, quiet=0)", "compileall.copyfileobj(dir, quiet=0)", "compileall._max_pool3d(dir, quiet=0)", "compileall._max_pool1d(dir, quiet=0)"], "compileall.compile_dir(dir, rx=None)": ["compile_dir", "compileall.compile_dir(dir, rx=None)", "compileall.load_compiled(dir, rx=None)", "compileall.compile(dir, rx=None)", "compileall.run_module(dir, rx=None)", "compileall._median(dir, rx=None)", "compileall.as_completed(dir, rx=None)", "compileall._nanmedian(dir, rx=None)", "compileall.open(dir, rx=None)", "compileall.all_gather_coalesced(dir, rx=None)", "compileall.all_reduce_coalesced(dir, rx=None)", "compileall.read_pickle(dir, rx=None)", "compileall.copyfileobj(dir, rx=None)", "compileall._max_pool3d(dir, rx=None)", "compileall._max_pool1d(dir, rx=None)"], "compileall.compile_dir(dir, workers=1)": ["compile_dir", "compileall.compile_dir(dir, workers='1')", "compileall.load_compiled(dir, workers=1)", "compileall.compile(dir, workers=1)", "compileall.run_module(dir, workers=1)", "compileall._median(dir, workers=1)", "compileall.as_completed(dir, workers=1)", "compileall._nanmedian(dir, workers=1)", "compileall.open(dir, workers=1)", "compileall.all_gather_coalesced(dir, workers=1)", "compileall.all_reduce_coalesced(dir, workers=1)", "compileall.read_pickle(dir, workers=1)", "compileall.copyfileobj(dir, workers=1)", "compileall._max_pool3d(dir, workers=1)", "compileall._max_pool1d(dir, workers=1)"], "compileall.compile_file(fullname)": ["compile_file", "compileall.get_default_compiler(fullname)", "compileall.as_completed(fullname)", "compileall._get_compressor(fullname)", "compileall._decode_line(fullname)", "compileall.compress_nd(fullname)", "compileall.compress_rowcols(fullname)", "compileall.new_compiler(fullname)", "compileall.get_cmap(fullname)", "compileall.register_cmap(fullname)", "compileall._parse_format_specifier(fullname)", "compileall._field_accessor(fullname)", "compileall.parse_makefile(fullname)", "compileall._parse_makefile(fullname)", "compileall.getabsfile(fullname)"], "compileall.compile_file(fullname, force=False)": ["compile_file", "compileall.compile_file(fullname, force=True)", "compileall.get_default_compiler(fullname, force=False)", "compileall.as_completed(fullname, force=False)", "compileall._get_compressor(fullname, force=False)", "compileall._decode_line(fullname, force=False)", "compileall.compress_nd(fullname, force=False)", "compileall.compress_rowcols(fullname, force=False)", "compileall.new_compiler(fullname, force=False)", "compileall.get_cmap(fullname, force=False)", "compileall.register_cmap(fullname, force=False)", "compileall._parse_format_specifier(fullname, force=False)", "compileall._field_accessor(fullname, force=False)", "compileall.parse_makefile(fullname, force=False)", "compileall._parse_makefile(fullname, force=False)"], "compileall.compile_file(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)": ["compile_file", "compileall.get_default_compiler(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.as_completed(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall._get_compressor(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall._decode_line(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.compress_nd(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.compress_rowcols(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.new_compiler(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.get_cmap(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.register_cmap(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall._parse_format_specifier(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall._field_accessor(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.parse_makefile(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall._parse_makefile(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)", "compileall.getabsfile(fullname, invalidation_mode=py_compile.PycInvalidationMode.TIMESTAMP)"], "compileall.compile_file(fullname, legacy=False)": ["compile_file", "compileall.compile_file(fullname, legacy=True)", "compileall.get_default_compiler(fullname, legacy=False)", "compileall.as_completed(fullname, legacy=False)", "compileall._get_compressor(fullname, legacy=False)", "compileall._decode_line(fullname, legacy=False)", "compileall.compress_nd(fullname, legacy=False)", "compileall.compress_rowcols(fullname, legacy=False)", "compileall.new_compiler(fullname, legacy=False)", "compileall.get_cmap(fullname, legacy=False)", "compileall.register_cmap(fullname, legacy=False)", "compileall._parse_format_specifier(fullname, legacy=False)", "compileall._field_accessor(fullname, legacy=False)", "compileall.parse_makefile(fullname, legacy=False)", "compileall._parse_makefile(fullname, legacy=False)"], "compileall.compile_file(fullname, optimize=-1)": ["compile_file", "compileall.compile_file(fullname, optimize=(- '1'))", "compileall.get_default_compiler(fullname, optimize=(- 1))", "compileall.as_completed(fullname, optimize=(- 1))", "compileall._get_compressor(fullname, optimize=(- 1))", "compileall._decode_line(fullname, optimize=(- 1))", "compileall.compress_nd(fullname, optimize=(- 1))", "compileall.compress_rowcols(fullname, optimize=(- 1))", "compileall.new_compiler(fullname, optimize=(- 1))", "compileall.get_cmap(fullname, optimize=(- 1))", "compileall.register_cmap(fullname, optimize=(- 1))", "compileall._parse_format_specifier(fullname, optimize=(- 1))", "compileall._field_accessor(fullname, optimize=(- 1))", "compileall.parse_makefile(fullname, optimize=(- 1))", "compileall._parse_makefile(fullname, optimize=(- 1))"], "compileall.compile_file(fullname, rx=None)": ["compile_file", "compileall.compile_file(fullname, rx=None)", "compileall.get_default_compiler(fullname, rx=None)", "compileall.as_completed(fullname, rx=None)", "compileall._get_compressor(fullname, rx=None)", "compileall._decode_line(fullname, rx=None)", "compileall.compress_nd(fullname, rx=None)", "compileall.compress_rowcols(fullname, rx=None)", "compileall.new_compiler(fullname, rx=None)", "compileall.get_cmap(fullname, rx=None)", "compileall.register_cmap(fullname, rx=None)", "compileall._parse_format_specifier(fullname, rx=None)", "compileall._field_accessor(fullname, rx=None)", "compileall.parse_makefile(fullname, rx=None)", "compileall._parse_makefile(fullname, rx=None)"], "compileall.compile_path()": ["compile_path", "compileall.Pipe()", "compileall.deprecated()", "compileall.validate_ascending()", "compileall.set_use_numexpr()", "compileall.setastest()", "compileall.new_compiler()", "compileall._create_interpreter_name_lookup_fn()", "compileall.compile()", "compileall.start()", "compileall.trace()", "compileall.re_compile()", "compileall.concat_compat()", "compileall.getpreferredencoding()", "compileall._convert_other()"], "compileall.compile_path(force=False)": ["compile_path", "compileall.compile_path(force=True)", "compileall.Pipe(force=False)", "compileall.deprecated(force=False)", "compileall.validate_ascending(force=False)", "compileall.set_use_numexpr(force=False)", "compileall.setastest(force=False)", "compileall.new_compiler(force=False)", "compileall._create_interpreter_name_lookup_fn(force=False)", "compileall.compile(force=False)", "compileall.start(force=False)", "compileall.trace(force=False)", "compileall.re_compile(force=False)", "compileall.concat_compat(force=False)", "compileall.getpreferredencoding(force=False)"], "compileall.compile_path(legacy=False)": ["compile_path", "compileall.compile_path(legacy=True)", "compileall.Pipe(legacy=False)", "compileall.deprecated(legacy=False)", "compileall.validate_ascending(legacy=False)", "compileall.set_use_numexpr(legacy=False)", "compileall.setastest(legacy=False)", "compileall.new_compiler(legacy=False)", "compileall._create_interpreter_name_lookup_fn(legacy=False)", "compileall.compile(legacy=False)", "compileall.start(legacy=False)", "compileall.trace(legacy=False)", "compileall.re_compile(legacy=False)", "compileall.concat_compat(legacy=False)", "compileall.getpreferredencoding(legacy=False)"], "compileall.compile_path(maxlevels=0)": ["compile_path", "compileall.compile_path(maxlevels='0')", "compileall.Pipe(maxlevels=0)", "compileall.deprecated(maxlevels=0)", "compileall.validate_ascending(maxlevels=0)", "compileall.set_use_numexpr(maxlevels=0)", "compileall.setastest(maxlevels=0)", "compileall.new_compiler(maxlevels=0)", "compileall._create_interpreter_name_lookup_fn(maxlevels=0)", "compileall.compile(maxlevels=0)", "compileall.start(maxlevels=0)", "compileall.trace(maxlevels=0)", "compileall.re_compile(maxlevels=0)", "compileall.concat_compat(maxlevels=0)", "compileall.getpreferredencoding(maxlevels=0)"], "compileall.compile_path(optimize=-1)": ["compile_path", "compileall.compile_path(optimize=(- '1'))", "compileall.Pipe(optimize=(- 1))", "compileall.deprecated(optimize=(- 1))", "compileall.validate_ascending(optimize=(- 1))", "compileall.set_use_numexpr(optimize=(- 1))", "compileall.setastest(optimize=(- 1))", "compileall.new_compiler(optimize=(- 1))", "compileall._create_interpreter_name_lookup_fn(optimize=(- 1))", "compileall.compile(optimize=(- 1))", "compileall.start(optimize=(- 1))", "compileall.trace(optimize=(- 1))", "compileall.re_compile(optimize=(- 1))", "compileall.concat_compat(optimize=(- 1))", "compileall.getpreferredencoding(optimize=(- 1))"], "compileall.compile_path(quiet=0)": ["compile_path", "compileall.compile_path(quiet='0')", "compileall.Pipe(quiet=0)", "compileall.deprecated(quiet=0)", "compileall.validate_ascending(quiet=0)", "compileall.set_use_numexpr(quiet=0)", "compileall.setastest(quiet=0)", "compileall.new_compiler(quiet=0)", "compileall._create_interpreter_name_lookup_fn(quiet=0)", "compileall.compile(quiet=0)", "compileall.start(quiet=0)", "compileall.trace(quiet=0)", "compileall.re_compile(quiet=0)", "compileall.concat_compat(quiet=0)", "compileall.getpreferredencoding(quiet=0)"], "compileall.compile_path(skip_curdir=True)": ["compile_path", "compileall.compile_path(skip_curdir=False)", "compileall.Pipe(skip_curdir=True)", "compileall.deprecated(skip_curdir=True)", "compileall.validate_ascending(skip_curdir=True)", "compileall.set_use_numexpr(skip_curdir=True)", "compileall.setastest(skip_curdir=True)", "compileall.new_compiler(skip_curdir=True)", "compileall._create_interpreter_name_lookup_fn(skip_curdir=True)", "compileall.compile(skip_curdir=True)", "compileall.start(skip_curdir=True)", "compileall.trace(skip_curdir=True)", "compileall.re_compile(skip_curdir=True)", "compileall.concat_compat(skip_curdir=True)", "compileall.getpreferredencoding(skip_curdir=True)"], "compileall.compile_path(skip_curdir=True, force=False)": ["compile_path", "compileall.compile_path(skip_curdir=False, force=True)", "compileall.Pipe(skip_curdir=True, force=False)", "compileall.deprecated(skip_curdir=True, force=False)", "compileall.validate_ascending(skip_curdir=True, force=False)", "compileall.set_use_numexpr(skip_curdir=True, force=False)", "compileall.setastest(skip_curdir=True, force=False)", "compileall.new_compiler(skip_curdir=True, force=False)", "compileall._create_interpreter_name_lookup_fn(skip_curdir=True, force=False)", "compileall.compile(skip_curdir=True, force=False)", "compileall.start(skip_curdir=True, force=False)", "compileall.trace(skip_curdir=True, force=False)", "compileall.re_compile(skip_curdir=True, force=False)", "compileall.concat_compat(skip_curdir=True, force=False)", "compileall.getpreferredencoding(skip_curdir=True, force=False)"], "compileall.compile_path(skip_curdir=True, maxlevels=0)": ["compile_path", "compileall.compile_path(skip_curdir=False, maxlevels=0)", "compileall.compile_path(skip_curdir=True, maxlevels='0')", "compileall.Pipe(skip_curdir=True, maxlevels=0)", "compileall.deprecated(skip_curdir=True, maxlevels=0)", "compileall.validate_ascending(skip_curdir=True, maxlevels=0)", "compileall.set_use_numexpr(skip_curdir=True, maxlevels=0)", "compileall.setastest(skip_curdir=True, maxlevels=0)", "compileall.new_compiler(skip_curdir=True, maxlevels=0)", "compileall._create_interpreter_name_lookup_fn(skip_curdir=True, maxlevels=0)", "compileall.compile(skip_curdir=True, maxlevels=0)", "compileall.start(skip_curdir=True, maxlevels=0)", "compileall.trace(skip_curdir=True, maxlevels=0)", "compileall.re_compile(skip_curdir=True, maxlevels=0)", "compileall.concat_compat(skip_curdir=True, maxlevels=0)"], "completed_process.args": ["completed_process.args"], "completed_process.cmd": ["completed_process.cmd"], "completed_process.returncode": ["completed_process.returncode"], "completed_process.stderr": ["completed_process.stderr"], "completed_process.stdout": ["completed_process.stdout"], "complex()": ["complex", "iscomplex()", "_tocomplex()", "compile()", "_compile()", "_complexType()", "_sort_complex()", "iscomplexobj()", "sort_complex()", "re_compile()", "_compose()", "isComplexType()", "complex_types()", "_handle_complex()", "pickle_complex()"], "complex(real)": ["complex", "iscomplex(real)", "_tocomplex(real)", "compile(real)", "_compile(real)", "_complexType(real)", "_sort_complex(real)", "iscomplexobj(real)", "sort_complex(real)", "re_compile(real)", "_compose(real)", "isComplexType(real)", "complex_types(real)", "_handle_complex(real)", "pickle_complex(real)"], "complex(real, imag)": ["complex", "iscomplex(real, imag)", "_tocomplex(real, imag)", "compile(real, imag)", "_compile(real, imag)", "_complexType(real, imag)", "_sort_complex(real, imag)", "iscomplexobj(real, imag)", "sort_complex(real, imag)", "re_compile(real, imag)", "_compose(real, imag)", "isComplexType(real, imag)", "complex_types(real, imag)", "_handle_complex(real, imag)", "pickle_complex(real, imag)"], "concurrent.futures.BrokenExecutor": ["concurrent.futures.BrokenExecutor"], "concurrent.futures.CancelledError": ["concurrent.futures.CancelledError"], "concurrent.futures.Executor": ["concurrent.futures.Executor"], "concurrent.futures.Future": ["concurrent.futures.Future"], "concurrent.futures.ProcessPoolExecutor()": ["ProcessPoolExecutor"], "concurrent.futures.ProcessPoolExecutor(initializer=None)": ["ProcessPoolExecutor", "concurrent.futures.ProcessPoolExecutor(initializer=None)"], "concurrent.futures.ProcessPoolExecutor(max_workers=None, mp_context=None)": ["ProcessPoolExecutor", "concurrent.futures.ProcessPoolExecutor(max_workers=None, mp_context=None)"], "concurrent.futures.ProcessPoolExecutor(mp_context=None)": ["ProcessPoolExecutor", "concurrent.futures.ProcessPoolExecutor(mp_context=None)"], "concurrent.futures.ProcessPoolExecutor(mp_context=None, initargs=())": ["ProcessPoolExecutor", "concurrent.futures.ProcessPoolExecutor(mp_context=None, initargs=())"], "concurrent.futures.ProcessPoolExecutor(mp_context=None, initializer=None)": ["ProcessPoolExecutor", "concurrent.futures.ProcessPoolExecutor(mp_context=None, initializer=None)"], "concurrent.futures.ThreadPoolExecutor()": ["ThreadPoolExecutor"], "concurrent.futures.ThreadPoolExecutor(initializer=None)": ["ThreadPoolExecutor", "concurrent.futures.ThreadPoolExecutor(initializer=None)"], "concurrent.futures.ThreadPoolExecutor(max_workers=None)": ["ThreadPoolExecutor", "concurrent.futures.ThreadPoolExecutor(max_workers=None)"], "concurrent.futures.ThreadPoolExecutor(max_workers=None, initargs=())": ["ThreadPoolExecutor", "concurrent.futures.ThreadPoolExecutor(max_workers=None, initargs=())"], "concurrent.futures.ThreadPoolExecutor(max_workers=None, initializer=None)": ["ThreadPoolExecutor", "concurrent.futures.ThreadPoolExecutor(max_workers=None, initializer=None)"], "concurrent.futures.ThreadPoolExecutor(max_workers=None, thread_name_prefix='')": ["ThreadPoolExecutor", "concurrent.futures.ThreadPoolExecutor(max_workers=None, thread_name_prefix='')", "concurrent.futures.ThreadPoolExecutor(max_workers=None, thread_name_prefix=0.0)"], "concurrent.futures.ThreadPoolExecutor(thread_name_prefix='')": ["ThreadPoolExecutor", "concurrent.futures.ThreadPoolExecutor(thread_name_prefix=0.0)"], "concurrent.futures.as_completed(fs)": ["as_completed", "concurrent.futures.compile(fs)", "concurrent.futures.compile_file(fs)", "concurrent.futures.new_compiler(fs)", "concurrent.futures.as_strided(fs)", "concurrent.futures.compress_nd(fs)", "concurrent.futures.can_connect(fs)", "concurrent.futures.ascii_decode(fs)", "concurrent.futures.get_default_compiler(fs)", "concurrent.futures.mask_rowcols(fs)", "concurrent.futures.ParserCreate(fs)", "concurrent.futures.upsample(fs)", "concurrent.futures.upsample_nearest(fs)", "concurrent.futures.ascii_encode(fs)", "concurrent.futures.reduce_add_coalesced(fs)"], "concurrent.futures.as_completed(fs, timeout=None)": ["as_completed", "concurrent.futures.as_completed(fs, timeout=None)", "concurrent.futures.compile(fs, timeout=None)", "concurrent.futures.compile_file(fs, timeout=None)", "concurrent.futures.new_compiler(fs, timeout=None)", "concurrent.futures.as_strided(fs, timeout=None)", "concurrent.futures.compress_nd(fs, timeout=None)", "concurrent.futures.can_connect(fs, timeout=None)", "concurrent.futures.ascii_decode(fs, timeout=None)", "concurrent.futures.get_default_compiler(fs, timeout=None)", "concurrent.futures.mask_rowcols(fs, timeout=None)", "concurrent.futures.ParserCreate(fs, timeout=None)", "concurrent.futures.upsample(fs, timeout=None)", "concurrent.futures.upsample_nearest(fs, timeout=None)", "concurrent.futures.ascii_encode(fs, timeout=None)"], "concurrent.futures.process.BrokenProcessPool": ["concurrent.futures.process.BrokenProcessPool"], "concurrent.futures.thread.BrokenThreadPool": ["concurrent.futures.thread.BrokenThreadPool"], "concurrent.futures.wait(fs)": ["wait", "concurrent.futures._wait(fs)", "concurrent.futures.wait4(fs)", "concurrent.futures.wait3(fs)", "concurrent.futures._wrapit(fs)", "concurrent.futures.waitid(fs)", "concurrent.futures.what(fs)", "concurrent.futures.sigwait(fs)", "concurrent.futures.waitpid(fs)", "concurrent.futures.write(fs)", "concurrent.futures.width(fs)", "concurrent.futures.at(fs)", "concurrent.futures.wait_for(fs)", "concurrent.futures._wait_all(fs)", "concurrent.futures.pwrite(fs)"], "concurrent.futures.wait(fs, return_when=ALL_COMPLETED)": ["wait", "concurrent.futures._wait(fs, return_when=ALL_COMPLETED)", "concurrent.futures.wait4(fs, return_when=ALL_COMPLETED)", "concurrent.futures.wait3(fs, return_when=ALL_COMPLETED)", "concurrent.futures._wrapit(fs, return_when=ALL_COMPLETED)", "concurrent.futures.waitid(fs, return_when=ALL_COMPLETED)", "concurrent.futures.what(fs, return_when=ALL_COMPLETED)", "concurrent.futures.sigwait(fs, return_when=ALL_COMPLETED)", "concurrent.futures.waitpid(fs, return_when=ALL_COMPLETED)", "concurrent.futures.write(fs, return_when=ALL_COMPLETED)", "concurrent.futures.width(fs, return_when=ALL_COMPLETED)", "concurrent.futures.at(fs, return_when=ALL_COMPLETED)", "concurrent.futures.wait_for(fs, return_when=ALL_COMPLETED)", "concurrent.futures._wait_all(fs, return_when=ALL_COMPLETED)", "concurrent.futures.pwrite(fs, return_when=ALL_COMPLETED)"], "concurrent.futures.wait(fs, timeout=None)": ["wait", "concurrent.futures.wait(fs, timeout=None)", "concurrent.futures._wait(fs, timeout=None)", "concurrent.futures.wait4(fs, timeout=None)", "concurrent.futures.wait3(fs, timeout=None)", "concurrent.futures._wrapit(fs, timeout=None)", "concurrent.futures.waitid(fs, timeout=None)", "concurrent.futures.what(fs, timeout=None)", "concurrent.futures.sigwait(fs, timeout=None)", "concurrent.futures.waitpid(fs, timeout=None)", "concurrent.futures.write(fs, timeout=None)", "concurrent.futures.width(fs, timeout=None)", "concurrent.futures.at(fs, timeout=None)", "concurrent.futures.wait_for(fs, timeout=None)", "concurrent.futures._wait_all(fs, timeout=None)"], "concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)": ["wait", "concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures._wait(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures.wait4(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures.wait3(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures._wrapit(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures.waitid(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures.what(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures.sigwait(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures.waitpid(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures.write(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures.width(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures.at(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures.wait_for(fs, timeout=None, return_when=ALL_COMPLETED)", "concurrent.futures._wait_all(fs, timeout=None, return_when=ALL_COMPLETED)"], "condition.notify()": ["notify"], "condition.notify(n=1)": ["notify", "condition.notify(n='1')"], "condition.notify_all()": ["notify_all"], "condition.wait()": ["wait"], "condition.wait(timeout=None)": ["wait", "condition.wait(timeout=None)"], "condition.wait_for(predicate)": ["wait_for"], "condition.wait_for(predicate, timeout=None)": ["wait_for", "condition.wait_for(predicate, timeout=None)"], "config_parser.add_section(section)": ["add_section"], "config_parser.defaults()": ["defaults"], "config_parser.get(section, option)": ["get"], "config_parser.get(section, option, fallback)": ["get"], "config_parser.get(section, option, fallback, raw=False, vars=None)": ["get", "config_parser.get(section, option, fallback, raw=True, vars=None)"], "config_parser.get(section, option, fallback, vars=None)": ["get", "config_parser.get(section, option, fallback, vars=None)"], "config_parser.get(section, option, raw=False)": ["get", "config_parser.get(section, option, raw=True)"], "config_parser.get(section, option, raw=False, vars=None)": ["get", "config_parser.get(section, option, raw=True, vars=None)"], "config_parser.get(section, option, vars=None)": ["get", "config_parser.get(section, option, vars=None)"], "config_parser.getboolean(section, option)": ["getboolean"], "config_parser.getboolean(section, option, fallback)": ["getboolean"], "config_parser.getboolean(section, option, fallback, raw=False)": ["getboolean", "config_parser.getboolean(section, option, fallback, raw=True)"], "config_parser.getboolean(section, option, fallback, vars=None)": ["getboolean", "config_parser.getboolean(section, option, fallback, vars=None)"], "config_parser.getboolean(section, option, raw=False)": ["getboolean", "config_parser.getboolean(section, option, raw=True)"], "config_parser.getfloat(section, option)": ["getfloat"], "config_parser.getfloat(section, option, fallback)": ["getfloat"], "config_parser.getfloat(section, option, fallback, raw=False)": ["getfloat", "config_parser.getfloat(section, option, fallback, raw=True)"], "config_parser.getint(section, option, fallback)": ["getint"], "config_parser.getint(section, option, fallback, raw=False)": ["getint", "config_parser.getint(section, option, fallback, raw=True)"], "config_parser.getint(section, option, fallback, raw=False, vars=None)": ["getint", "config_parser.getint(section, option, fallback, raw=True, vars=None)"], "config_parser.getint(section, option, fallback, vars=None)": ["getint", "config_parser.getint(section, option, fallback, vars=None)"], "config_parser.getint(section, option, raw=False)": ["getint", "config_parser.getint(section, option, raw=True)"], "config_parser.has_option(section, option)": ["has_option"], "config_parser.has_section(section)": ["has_section"], "config_parser.items()": ["items"], "config_parser.items(raw=False)": ["items", "config_parser.items(raw=True)"], "config_parser.items(section)": ["items"], "config_parser.items(section, raw=False)": ["items", "config_parser.items(section, raw=True)"], "config_parser.items(vars=None)": ["items", "config_parser.items(vars=None)"], "config_parser.options(section)": ["options"], "config_parser.optionxform(option)": ["optionxform"], "config_parser.read(filenames)": ["read"], "config_parser.read(filenames, encoding=None)": ["read", "config_parser.read(filenames, encoding=None)"], "config_parser.read_dict(dictionary)": ["read_dict"], "config_parser.read_dict(dictionary, source='<dict>')": ["read_dict", "config_parser.read_dict(dictionary, source=6.0)"], "config_parser.read_file(f)": ["read_file"], "config_parser.read_file(f, source=None)": ["read_file", "config_parser.read_file(f, source=None)"], "config_parser.read_string(string)": ["read_string"], "config_parser.read_string(string, source='<string>')": ["read_string", "config_parser.read_string(string, source=8)"], "config_parser.readfp(fp)": ["readfp"], "config_parser.readfp(fp, filename=None)": ["readfp", "config_parser.readfp(fp, filename=None)"], "config_parser.remove_section(section)": ["remove_section"], "config_parser.sections()": ["sections"], "config_parser.set(section, option, value)": ["set"], "config_parser.write(fileobject)": ["write"], "config_parser.write(fileobject, space_around_delimiters=True)": ["write", "config_parser.write(fileobject, space_around_delimiters=False)"], "configparser.BasicInterpolation": ["configparser.BasicInterpolation"], "configparser.ConfigParser(':'), ';'))": [], "configparser.ConfigParser(':'), ';'), allow_no_value=False)": [], "configparser.ConfigParser(':'), ';'), comment_prefixes=('#')": [], "configparser.ConfigParser(':'), ';'), default_section=configparser.DEFAULTSECT)": [], "configparser.ConfigParser(':'), ';'), defaults=None)": [], "configparser.ConfigParser(':'), ';'), delimiters=('=')": [], "configparser.ConfigParser(':'), ';'), dict_type=collections.OrderedDict)": [], "configparser.ConfigParser(':'), ';'), inline_comment_prefixes=None)": [], "configparser.ConfigParser(':'), ';'), strict=True)": [], "configparser.DuplicateOptionError": ["configparser.DuplicateOptionError"], "configparser.Error": ["configparser.Error"], "configparser.ExtendedInterpolation": ["configparser.ExtendedInterpolation"], "configparser.InterpolationDepthError": ["configparser.InterpolationDepthError"], "configparser.InterpolationError": ["configparser.InterpolationError"], "configparser.InterpolationMissingOptionError": ["configparser.InterpolationMissingOptionError"], "configparser.InterpolationSyntaxError": ["configparser.InterpolationSyntaxError"], "configparser.MAX_INTERPOLATION_DEPTH": ["configparser.MAX_INTERPOLATION_DEPTH"], "configparser.NoSectionError": ["configparser.NoSectionError"], "configparser.ParsingError": ["configparser.ParsingError"], "configparser.RawConfigParser(':'), ';'))": [], "configparser.RawConfigParser(':'), ';'), allow_no_value=False)": [], "configparser.RawConfigParser(':'), ';'), defaults=None)": [], "configparser.RawConfigParser(':'), ';'), delimiters=('=')": [], "configparser.RawConfigParser(':'), ';'), interpolation)": [], "configparser.RawConfigParser(':'), ';'), interpolation, comment_prefixes=('#')": [], "configparser.RawConfigParser(':'), ';'), interpolation, defaults=None)": [], "configparser.RawConfigParser(':'), ';'), interpolation, delimiters=('=')": [], "configparser.RawConfigParser(':'), ';'), interpolation, dict_type=collections.OrderedDict)": [], "configparser.RawConfigParser(':'), ';'), interpolation, empty_lines_in_values=True)": [], "configparser.RawConfigParser(':'), ';'), interpolation, inline_comment_prefixes=None)": [], "configparser.RawConfigParser(':'), ';'), interpolation, strict=True)": [], "configparser.RawConfigParser(':'), ';'), strict=True)": [], "connection.backup(target)": ["backup"], "connection.backup(target, name=\"main\")": ["backup", "connection.backup(target, name=4)"], "connection.backup(target, pages=0)": ["backup", "connection.backup(target, pages='0')"], "connection.backup(target, pages=0, name=\"main\")": ["backup", "connection.backup(target, pages='0', name=4.0)"], "connection.backup(target, pages=0, progress=None)": ["backup", "connection.backup(target, pages=0, progress=None)", "connection.backup(target, pages='0', progress=None)"], "connection.backup(target, pages=0, sleep=0.250)": ["backup", "connection.backup(target, pages='0', sleep='0.25')"], "connection.backup(target, progress=None)": ["backup", "connection.backup(target, progress=None)"], "connection.backup(target, progress=None, name=\"main\")": ["backup", "connection.backup(target, progress=None, name='main')", "connection.backup(target, progress=None, name=4)"], "connection.backup(target, progress=None, sleep=0.250)": ["backup", "connection.backup(target, progress=None, sleep=0.25)", "connection.backup(target, progress=None, sleep='0.25')"], "connection.backup(target, sleep=0.250)": ["backup", "connection.backup(target, sleep='0.25')"], "connection.close()": ["close"], "connection.commit()": ["commit"], "connection.create_aggregate(name, num_params, aggregate_class)": ["create_aggregate"], "connection.create_collation(name, callable)": ["create_collation"], "connection.create_function(name, num_params, func)": ["create_function"], "connection.cursor()": ["cursor"], "connection.cursor(factory=Cursor)": ["cursor"], "connection.enable_load_extension(enabled)": ["enable_load_extension"], "connection.execute(sql)": ["execute"], "connection.execute(sql, parameters)": ["execute"], "connection.executemany(sql)": ["executemany"], "connection.executemany(sql, parameters)": ["executemany"], "connection.executescript(sql_script)": ["executescript"], "connection.in_transaction": ["connection.in_transaction"], "connection.interrupt()": ["interrupt"], "connection.isolation_level": ["connection.isolation_level"], "connection.iterdump()": ["iterdump"], "connection.load_extension(path)": ["load_extension"], "connection.rollback()": ["rollback"], "connection.row_factory": ["connection.row_factory"], "connection.set_authorizer(authorizer_callback)": ["set_authorizer"], "connection.set_progress_handler(handler, n)": ["set_progress_handler"], "connection.set_trace_callback(trace_callback)": ["set_trace_callback"], "connection.text_factory": ["connection.text_factory"], "connection.total_changes": ["connection.total_changes"], "container.__iter__()": ["__iter__"], "content_disposition_header.content-disposition": ["content_disposition_header.content-disposition"], "content_manager.add_get_handler(key, handler)": ["add_get_handler"], "content_manager.add_set_handler(typekey, handler)": ["add_set_handler"], "content_manager.get_content(msg, *args, **kw)": ["get_content"], "content_manager.set_content(msg, obj, *args, **kw)": ["set_content"], "content_transfer_encoding.cte": ["content_transfer_encoding.cte"], "context.Etop()": ["Etop"], "context.abs(x)": ["abs"], "context.add(x, y)": ["add"], "context.clear_traps()": ["clear_traps"], "context.compare(x, y)": ["compare"], "context.compare_signal(x, y)": ["compare_signal"], "context.compare_total(x, y)": ["compare_total"], "context.compare_total_mag(x, y)": ["compare_total_mag"], "context.copy()": ["copy"], "context.copy_abs(x)": ["copy_abs"], "context.copy_decimal(num)": ["copy_decimal"], "context.copy_sign(x, y)": ["copy_sign"], "context.create_decimal(num)": ["create_decimal"], "context.create_decimal_from_float(f)": ["create_decimal_from_float"], "context.divide_int(x, y)": ["divide_int"], "context.divmod(x, y)": ["divmod"], "context.fma(x, y, z)": ["fma"], "context.get(var)": ["get"], "context.get(var, default)": ["get"], "context.is_infinite(x)": ["is_infinite"], "context.is_normal(x)": ["is_normal"], "context.is_qnan(x)": ["is_qnan"], "context.is_signed(x)": ["is_signed"], "context.is_snan(x)": ["is_snan"], "context.is_zero(x)": ["is_zero"], "context.items()": ["items"], "context.keys()": ["keys"], "context.ln(x)": ["ln"], "context.log10(x)": ["log10"], "context.logical_and(x, y)": ["logical_and"], "context.logical_invert(x)": ["logical_invert"], "context.logical_or(x, y)": ["logical_or"], "context.logical_xor(x, y)": ["logical_xor"], "context.max(x, y)": ["max"], "context.max_mag(x, y)": ["max_mag"], "context.min(x, y)": ["min"], "context.min_mag(x, y)": ["min_mag"], "context.minus(x)": ["minus"], "context.multiply(x, y)": ["multiply"], "context.next_minus(x)": ["next_minus"], "context.next_plus(x)": ["next_plus"], "context.next_toward(x, y)": ["next_toward"], "context.normalize(x)": ["normalize"], "context.plus(x)": ["plus"], "context.power(x, y)": ["power"], "context.power(x, y, modulo=None)": ["power", "context.power(x, y, modulo=None)"], "context.quantize(x, y)": ["quantize"], "context.radix()": ["radix"], "context.remainder(x, y)": ["remainder"], "context.remainder_near(x, y)": ["remainder_near"], "context.rotate(x, y)": ["rotate"], "context.same_quantum(x, y)": ["same_quantum"], "context.scaleb(x, y)": ["scaleb"], "context.sqrt(x)": ["sqrt"], "context.subtract(x, y)": ["subtract"], "context.to_eng_string(x)": ["to_eng_string"], "context.to_integral_exact(x)": ["to_integral_exact"], "context.to_sci_string(x)": ["to_sci_string"], "context.values()": ["values"], "context[var]": ["context[var]"], "context_var.get()": ["get"], "context_var.get(default)": ["get"], "context_var.name": ["context_var.name"], "context_var.reset(token)": ["reset"], "context_var.set(value)": ["set"], "contextlib.AbstractAsyncContextManager": ["contextlib.AbstractAsyncContextManager"], "contextlib.AbstractContextManager": ["contextlib.AbstractContextManager"], "contextlib.AsyncExitStack": ["contextlib.AsyncExitStack"], "contextlib.ContextDecorator": ["contextlib.ContextDecorator"], "contextlib.ExitStack": ["contextlib.ExitStack"], "contextlib.closing(thing)": ["closing"], "contextlib.nullcontext()": ["nullcontext"], "contextlib.nullcontext(enter_result=None)": ["nullcontext", "contextlib.nullcontext(enter_result=None)"], "contextlib.redirect_stderr(new_target)": ["redirect_stderr"], "contextlib.redirect_stdout(new_target)": ["redirect_stdout"], "contextlib.suppress(*exceptions)": ["suppress"], "contextmanager.__enter__()": ["__enter__"], "contextvars.Context": ["contextvars.Context"], "contextvars.ContextVar(name)": ["ContextVar"], "contextvars.ContextVar(name, default)": ["ContextVar"], "contextvars.copy_context()": ["copy_context", "contextvars.rc_context()", "contextvars._copy_file_contents()", "contextvars.cpu_count()", "contextvars.context_diff()", "contextvars.getcontext()", "contextvars._flop_count()", "contextvars.setcontext()", "contextvars._get_const_info()", "contextvars.assert_copy()", "contextvars._convert_grouper()", "contextvars.open_connection()", "contextvars.localcontext()", "contextvars._copy_archive()", "contextvars.convert_path()"], "control.condition(action, condition)": ["condition"], "control.event(event, argument)": ["event"], "control.event(event, argument, condition=1)": ["event", "control.event(event, argument, condition='1')"], "control.event(event, argument, condition=1, ordering=None)": ["event", "control.event(event, argument, condition=1, ordering=None)", "control.event(event, argument, condition='1', ordering=None)"], "control.event(event, argument, ordering=None)": ["event", "control.event(event, argument, ordering=None)"], "control.mapping(event, attribute)": ["mapping"], "controller.open(url)": ["open"], "controller.open(url, autoraise=True)": ["open", "controller.open(url, autoraise=False)"], "controller.open(url, new=0)": ["open", "controller.open(url, new='0')"], "controller.open(url, new=0, autoraise=True)": ["open", "controller.open(url, new=0, autoraise=False)", "controller.open(url, new='0', autoraise=True)"], "controller.open_new(url)": ["open_new"], "controller.open_new_tab(url)": ["open_new_tab"], "copy.copy(x)": ["copy", "copy.copytree(x)", "copy._copy(x)", "copy.count(x)", "copy.script(x)", "copy.decode(x)", "copy.copy2(x)", "copy.compile_file(x)", "copy.new_compiler(x)", "copy.byte_compile(x)", "copy.compile_path(x)", "copy.convert(x)", "copy.concat_compat(x)", "copy.currency(x)", "copy.jacobian(x)"], "copy.deepcopy(x)": ["deepcopy", "copy.escape_encode(x)", "copy.escape_decode(x)", "copy.setpos(x)", "copy.escape(x)", "copy.encode(x)", "copy._decode_line(x)", "copy.unicode_escape_decode(x)", "copy.unicode_escape_encode(x)", "copy.ascii_decode(x)", "copy._polyder_dispatcher(x)", "copy.get_python_inc(x)", "copy.raw_unicode_escape_decode(x)", "copy.latin_1_decode(x)", "copy._parse_datetime(x)"], "copy.deepcopy(x, memo)": ["deepcopy", "copy.escape_encode(x, memo)", "copy.escape_decode(x, memo)", "copy.setpos(x, memo)", "copy.escape(x, memo)", "copy.encode(x, memo)", "copy._decode_line(x, memo)", "copy.unicode_escape_decode(x, memo)", "copy.unicode_escape_encode(x, memo)", "copy.ascii_decode(x, memo)", "copy._polyder_dispatcher(x, memo)", "copy.get_python_inc(x, memo)", "copy.raw_unicode_escape_decode(x, memo)", "copy.latin_1_decode(x, memo)", "copy._parse_datetime(x, memo)"], "copy.error": ["copy.error"], "copyreg.constructor(object)": ["constructor", "copyreg._reconstructor(object)", "copyreg._reconstruct(object)", "copyreg._construction_repr(object)", "copyreg.construction_error(object)", "copyreg._mareconstruct(object)", "copyreg._construct_lookups(object)", "copyreg._structure(object)", "copyreg._vector_str(object)", "copyreg.contour(object)", "copyreg.confstr(object)", "copyreg.__get_builtin_constructor(object)", "copyreg._DType_reconstruct(object)", "copyreg._ufunc_reconstruct(object)", "copyreg.contourf(object)"], "copyreg.pickle(type, function)": ["pickle", "copyreg.read_pickle(type, function)", "copyreg.circle(type, function)", "copyreg.pie(type, function)", "copyreg.compile(type, function)", "copyreg.title(type, function)", "copyreg._pad_simple(type, function)", "copyreg.percentile(type, function)", "copyreg.Client(type, function)", "copyreg.pcolormesh(type, function)", "copyreg.pcolor(type, function)", "copyreg.compile_dir(type, function)", "copyreg.copyfileobj(type, function)", "copyreg.print_stack(type, function)", "copyreg.onclick(type, function)"], "copyreg.pickle(type, function, constructor=None)": ["pickle", "copyreg.pickle(type, function, constructor=None)", "copyreg.read_pickle(type, function, constructor=None)", "copyreg.circle(type, function, constructor=None)", "copyreg.pie(type, function, constructor=None)", "copyreg.compile(type, function, constructor=None)", "copyreg.title(type, function, constructor=None)", "copyreg._pad_simple(type, function, constructor=None)", "copyreg.percentile(type, function, constructor=None)", "copyreg.Client(type, function, constructor=None)", "copyreg.pcolormesh(type, function, constructor=None)", "copyreg.pcolor(type, function, constructor=None)", "copyreg.compile_dir(type, function, constructor=None)", "copyreg.copyfileobj(type, function, constructor=None)", "copyreg.print_stack(type, function, constructor=None)"], "copyright": ["copyright"], "counter.elements()": ["elements"], "counter.fromkeys(iterable)": ["fromkeys"], "counter.most_common()": ["most_common"], "counter.most_common(n)": ["most_common"], "counter.subtract()": ["subtract"], "counter.subtract(iterable-or-mapping)": [], "counter.update()": ["update"], "counter.update(iterable-or-mapping)": [], "coverage_results.update(other)": ["update"], "coverage_results.write_results()": ["write_results"], "coverage_results.write_results(coverdir=None)": ["write_results", "coverage_results.write_results(coverdir=None)"], "coverage_results.write_results(show_missing=True)": ["write_results", "coverage_results.write_results(show_missing=False)"], "coverage_results.write_results(show_missing=True, coverdir=None)": ["write_results", "coverage_results.write_results(show_missing=False, coverdir=None)"], "coverage_results.write_results(show_missing=True, summary=False)": ["write_results", "coverage_results.write_results(show_missing=False, summary=True)"], "coverage_results.write_results(show_missing=True, summary=False, coverdir=None)": ["write_results", "coverage_results.write_results(show_missing=False, summary=True, coverdir=None)"], "coverage_results.write_results(summary=False)": ["write_results", "coverage_results.write_results(summary=True)"], "coverage_results.write_results(summary=False, coverdir=None)": ["write_results", "coverage_results.write_results(summary=True, coverdir=None)"], "credits": ["credits"], "crypt.METHOD_BLOWFISH": ["crypt.METHOD_BLOWFISH"], "crypt.METHOD_CRYPT": ["crypt.METHOD_CRYPT"], "crypt.METHOD_MD5": ["crypt.METHOD_MD5"], "crypt.METHOD_SHA256": ["crypt.METHOD_SHA256"], "crypt.METHOD_SHA512": ["crypt.METHOD_SHA512"], "crypt.crypt(word)": ["crypt", "crypt.scrypt(word)", "crypt.script(word)", "crypt.rsplit(word)", "crypt._ptp(word)", "crypt.ptp(word)", "crypt.relpath(word)", "crypt.convert(word)", "crypt.get_cmap(word)", "crypt.rfft(word)", "crypt._type(word)", "crypt._clip(word)", "crypt.array_str(word)", "crypt.print_exc(word)", "crypt._ptp_dispatcher(word)"], "crypt.crypt(word, salt=None)": ["crypt", "crypt.crypt(word, salt=None)", "crypt.scrypt(word, salt=None)", "crypt.script(word, salt=None)", "crypt.rsplit(word, salt=None)", "crypt._ptp(word, salt=None)", "crypt.ptp(word, salt=None)", "crypt.relpath(word, salt=None)", "crypt.convert(word, salt=None)", "crypt.get_cmap(word, salt=None)", "crypt.rfft(word, salt=None)", "crypt._type(word, salt=None)", "crypt._clip(word, salt=None)", "crypt.array_str(word, salt=None)", "crypt.print_exc(word, salt=None)"], "crypt.methods": ["crypt.methods"], "crypt.mksalt()": ["mksalt", "crypt.random_state()", "crypt.main()", "crypt._main()", "crypt.all_tasks()", "crypt.test()", "crypt.makeFloatSeries()", "crypt.makeStringSeries()", "crypt.shape()", "crypt.shearfactor()", "crypt.post_mortem()", "crypt.localcontext()", "crypt.subplot_tool()", "crypt.token_urlsafe()", "crypt.removeHandler()"], "crypt.mksalt(method=None)": ["mksalt", "crypt.mksalt(method=None)", "crypt.random_state(method=None)", "crypt.main(method=None)", "crypt._main(method=None)", "crypt.all_tasks(method=None)", "crypt.test(method=None)", "crypt.makeFloatSeries(method=None)", "crypt.makeStringSeries(method=None)", "crypt.shape(method=None)", "crypt.shearfactor(method=None)", "crypt.post_mortem(method=None)", "crypt.localcontext(method=None)", "crypt.subplot_tool(method=None)", "crypt.token_urlsafe(method=None)"], "crypt.mksalt(method=None, rounds=None)": ["mksalt", "crypt.mksalt(method=None, rounds=None)", "crypt.random_state(method=None, rounds=None)", "crypt.main(method=None, rounds=None)", "crypt._main(method=None, rounds=None)", "crypt.all_tasks(method=None, rounds=None)", "crypt.test(method=None, rounds=None)", "crypt.makeFloatSeries(method=None, rounds=None)", "crypt.makeStringSeries(method=None, rounds=None)", "crypt.shape(method=None, rounds=None)", "crypt.shearfactor(method=None, rounds=None)", "crypt.post_mortem(method=None, rounds=None)", "crypt.localcontext(method=None, rounds=None)", "crypt.subplot_tool(method=None, rounds=None)", "crypt.token_urlsafe(method=None, rounds=None)"], "crypt.mksalt(rounds=None)": ["mksalt", "crypt.mksalt(rounds=None)", "crypt.random_state(rounds=None)", "crypt.main(rounds=None)", "crypt._main(rounds=None)", "crypt.all_tasks(rounds=None)", "crypt.test(rounds=None)", "crypt.makeFloatSeries(rounds=None)", "crypt.makeStringSeries(rounds=None)", "crypt.shape(rounds=None)", "crypt.shearfactor(rounds=None)", "crypt.post_mortem(rounds=None)", "crypt.localcontext(rounds=None)", "crypt.subplot_tool(rounds=None)", "crypt.token_urlsafe(rounds=None)"], "csv.Dialect": ["csv.Dialect"], "csv.DictReader(f, *args, **kwds)": ["DictReader"], "csv.DictReader(f, *args, **kwds, dialect='excel')": ["DictReader", "csv.DictReader(f, *args, **kwds, dialect=5.0)"], "csv.DictReader(f, *args, **kwds, fieldnames=None)": ["DictReader", "csv.DictReader(f, *args, **kwds, fieldnames=None)"], "csv.DictReader(f, *args, **kwds, fieldnames=None, dialect='excel')": ["DictReader", "csv.DictReader(f, *args, **kwds, fieldnames=None, dialect='excel')", "csv.DictReader(f, *args, **kwds, fieldnames=None, dialect=5.0)"], "csv.DictReader(f, *args, **kwds, fieldnames=None, restkey=None)": ["DictReader", "csv.DictReader(f, *args, **kwds, fieldnames=None, restkey=None)"], "csv.DictReader(f, *args, **kwds, fieldnames=None, restval=None)": ["DictReader", "csv.DictReader(f, *args, **kwds, fieldnames=None, restval=None)"], "csv.DictReader(f, *args, **kwds, restkey=None)": ["DictReader", "csv.DictReader(f, *args, **kwds, restkey=None)"], "csv.DictReader(f, *args, **kwds, restkey=None, restval=None)": ["DictReader", "csv.DictReader(f, *args, **kwds, restkey=None, restval=None)"], "csv.DictReader(f, *args, **kwds, restval=None)": ["DictReader", "csv.DictReader(f, *args, **kwds, restval=None)"], "csv.DictWriter(f, fieldnames, *args, **kwds)": ["DictWriter"], "csv.DictWriter(f, fieldnames, *args, **kwds, dialect='excel')": ["DictWriter", "csv.DictWriter(f, fieldnames, *args, **kwds, dialect=5)"], "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise')": ["DictWriter", "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction=5.0)"], "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction='raise', dialect='excel')": ["DictWriter", "csv.DictWriter(f, fieldnames, *args, **kwds, extrasaction=5, dialect=5.0)"], "csv.DictWriter(f, fieldnames, *args, **kwds, restval='')": ["DictWriter", "csv.DictWriter(f, fieldnames, *args, **kwds, restval=0)"], "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', dialect='excel')": ["DictWriter", "csv.DictWriter(f, fieldnames, *args, **kwds, restval=0.0, dialect=5)"], "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise')": ["DictWriter", "csv.DictWriter(f, fieldnames, *args, **kwds, restval=0, extrasaction=5)"], "csv.DictWriter(f, fieldnames, *args, **kwds, restval='', extrasaction='raise', dialect='excel')": ["DictWriter", "csv.DictWriter(f, fieldnames, *args, **kwds, restval=0, extrasaction=5, dialect=5)"], "csv.QUOTE_ALL": ["csv.QUOTE_ALL"], "csv.QUOTE_MINIMAL": ["csv.QUOTE_MINIMAL"], "csv.QUOTE_NONE": ["csv.QUOTE_NONE"], "csv.QUOTE_NONNUMERIC": ["csv.QUOTE_NONNUMERIC"], "csv.Sniffer": ["csv.Sniffer"], "csv.excel": ["csv.excel"], "csv.excel_tab": ["csv.excel_tab"], "csv.field_size_limit()": ["field_size_limit"], "csv.field_size_limit(new_limit)": ["field_size_limit"], "csv.reader(csvfile, **fmtparams)": ["reader"], "csv.reader(csvfile, **fmtparams, dialect='excel')": ["reader", "csv.reader(csvfile, **fmtparams, dialect=5)"], "csv.register_dialect(name, dialect)": ["register_dialect"], "csv.register_dialect(name, dialect, **fmtparams)": ["register_dialect"], "csv.unix_dialect": ["csv.unix_dialect"], "csv.unregister_dialect(name)": ["unregister_dialect"], "csv.writer(csvfile, **fmtparams)": ["writer"], "csv.writer(csvfile, **fmtparams, dialect='excel')": ["writer", "csv.writer(csvfile, **fmtparams, dialect=5)"], "csvreader.__next__()": ["__next__"], "csvreader.dialect": ["csvreader.dialect"], "csvreader.fieldnames": ["csvreader.fieldnames"], "csvreader.line_num": ["csvreader.line_num"], "csvwriter.dialect": ["csvwriter.dialect"], "csvwriter.writerow(row)": ["writerow"], "csvwriter.writerows(rows)": ["writerows"], "ctypes.ArgumentError": ["ctypes.ArgumentError"], "ctypes.Array(*args)": ["Array"], "ctypes.CDLL(name)": ["CDLL"], "ctypes.CDLL(name, handle=None)": ["CDLL", "ctypes.CDLL(name, handle=None)"], "ctypes.CDLL(name, mode=DEFAULT_MODE)": ["CDLL"], "ctypes.CDLL(name, mode=DEFAULT_MODE, handle=None)": ["CDLL", "ctypes.CDLL(name, mode=DEFAULT_MODE, handle=None)"], "ctypes.CDLL(name, use_errno=False)": ["CDLL", "ctypes.CDLL(name, use_errno=True)"], "ctypes.CDLL(name, use_last_error=False)": ["CDLL", "ctypes.CDLL(name, use_last_error=True)"], "ctypes.CFUNCTYPE(restype, *argtypes)": ["CFUNCTYPE", "ctypes.PYFUNCTYPE(restype, *argtypes)", "ctypes.ftruncate(restype, *argtypes)", "ctypes._commonType(restype, *argtypes)", "ctypes._type_check(restype, *argtypes)", "ctypes.NewType(restype, *argtypes)", "ctypes._type(restype, *argtypes)", "ctypes.issubsctype(restype, *argtypes)", "ctypes._check_types(restype, *argtypes)", "ctypes.common_type(restype, *argtypes)", "ctypes.issctype(restype, *argtypes)", "ctypes.currency(restype, *argtypes)", "ctypes.unescape(restype, *argtypes)", "ctypes.truncate(restype, *argtypes)", "ctypes.count(restype, *argtypes)"], "ctypes.DEFAULT_MODE": ["ctypes.DEFAULT_MODE"], "ctypes.DllCanUnloadNow()": ["DllCanUnloadNow"], "ctypes.DllGetClassObject()": ["DllGetClassObject"], "ctypes.FormatError(code)": ["FormatError"], "ctypes.GetLastError()": ["GetLastError"], "ctypes.HRESULT": ["ctypes.HRESULT"], "ctypes.LittleEndianStructure(*args, **kw)": ["LittleEndianStructure"], "ctypes.OleDLL(name)": ["OleDLL"], "ctypes.OleDLL(name, handle=None)": ["OleDLL", "ctypes.OleDLL(name, handle=None)"], "ctypes.OleDLL(name, mode=DEFAULT_MODE)": ["OleDLL"], "ctypes.OleDLL(name, mode=DEFAULT_MODE, handle=None)": ["OleDLL", "ctypes.OleDLL(name, mode=DEFAULT_MODE, handle=None)"], "ctypes.OleDLL(name, use_errno=False)": ["OleDLL", "ctypes.OleDLL(name, use_errno=True)"], "ctypes.OleDLL(name, use_last_error=False)": ["OleDLL", "ctypes.OleDLL(name, use_last_error=True)"], "ctypes.POINTER(type)": ["POINTER"], "ctypes.PYFUNCTYPE(restype, *argtypes)": ["PYFUNCTYPE", "ctypes.CFUNCTYPE(restype, *argtypes)", "ctypes.ftruncate(restype, *argtypes)", "ctypes.NewType(restype, *argtypes)", "ctypes.issubsctype(restype, *argtypes)", "ctypes._type(restype, *argtypes)", "ctypes.issctype(restype, *argtypes)", "ctypes.unescape(restype, *argtypes)", "ctypes._wrapfunc(restype, *argtypes)", "ctypes.truncate(restype, *argtypes)", "ctypes._type_repr(restype, *argtypes)", "ctypes.splittype(restype, *argtypes)", "ctypes.as_ctypes(restype, *argtypes)", "ctypes._infer_return_type(restype, *argtypes)", "ctypes._nest_function(restype, *argtypes)"], "ctypes.PyDLL(name)": ["PyDLL"], "ctypes.PyDLL(name, handle=None)": ["PyDLL", "ctypes.PyDLL(name, handle=None)"], "ctypes.PyDLL(name, mode=DEFAULT_MODE)": ["PyDLL"], "ctypes.PyDLL(name, mode=DEFAULT_MODE, handle=None)": ["PyDLL", "ctypes.PyDLL(name, mode=DEFAULT_MODE, handle=None)"], "ctypes.RTLD_GLOBAL": ["ctypes.RTLD_GLOBAL"], "ctypes.Structure(*args, **kw)": ["Structure"], "ctypes.Union(*args, **kw)": ["Union"], "ctypes.WINFUNCTYPE(restype, *argtypes)": ["WINFUNCTYPE"], "ctypes.WINFUNCTYPE(restype, *argtypes, use_last_error=False)": ["WINFUNCTYPE", "ctypes.WINFUNCTYPE(restype, *argtypes, use_last_error=True)"], "ctypes.WinDLL(name)": ["WinDLL"], "ctypes.WinDLL(name, mode=DEFAULT_MODE)": ["WinDLL"], "ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None)": ["WinDLL", "ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None)"], "ctypes.WinDLL(name, use_errno=False)": ["WinDLL", "ctypes.WinDLL(name, use_errno=True)"], "ctypes.WinError()": ["WinError"], "ctypes.WinError(code=None)": ["WinError", "ctypes.WinError(code=None)"], "ctypes.WinError(code=None, descr=None)": ["WinError", "ctypes.WinError(code=None, descr=None)"], "ctypes.WinError(descr=None)": ["WinError", "ctypes.WinError(descr=None)"], "ctypes._CData": ["ctypes._CData"], "ctypes._FuncPtr": ["ctypes._FuncPtr"], "ctypes._Pointer": ["ctypes._Pointer"], "ctypes._SimpleCData": ["ctypes._SimpleCData"], "ctypes.addressof(obj)": ["addressof"], "ctypes.alignment(obj_or_type)": ["alignment"], "ctypes.byref(obj)": ["byref"], "ctypes.byref(obj, offset)": ["byref"], "ctypes.c_byte": ["ctypes.c_byte"], "ctypes.c_char": ["ctypes.c_char"], "ctypes.c_char_p": ["ctypes.c_char_p"], "ctypes.c_double": ["ctypes.c_double"], "ctypes.c_float": ["ctypes.c_float"], "ctypes.c_int": ["ctypes.c_int"], "ctypes.c_int16": ["ctypes.c_int16"], "ctypes.c_int32": ["ctypes.c_int32"], "ctypes.c_longdouble": ["ctypes.c_longdouble"], "ctypes.c_longlong": ["ctypes.c_longlong"], "ctypes.c_short": ["ctypes.c_short"], "ctypes.c_ubyte": ["ctypes.c_ubyte"], "ctypes.c_uint": ["ctypes.c_uint"], "ctypes.c_uint16": ["ctypes.c_uint16"], "ctypes.c_uint32": ["ctypes.c_uint32"], "ctypes.c_uint64": ["ctypes.c_uint64"], "ctypes.c_ulong": ["ctypes.c_ulong"], "ctypes.c_ulonglong": ["ctypes.c_ulonglong"], "ctypes.c_void_p": ["ctypes.c_void_p"], "ctypes.c_wchar": ["ctypes.c_wchar"], "ctypes.c_wchar_p": ["ctypes.c_wchar_p"], "ctypes.cast(obj, type)": ["cast", "ctypes._cast(obj, type)", "ctypes.set_cmap(obj, type)", "ctypes.st(obj, type)", "ctypes.asstr(obj, type)", "ctypes.at(obj, type)", "ctypes.cdist(obj, type)", "ctypes.safe_cast(obj, type)", "ctypes.broadcast(obj, type)", "ctypes.localhost(obj, type)", "ctypes.concat(obj, type)", "ctypes.nanstd(obj, type)", "ctypes.assert_(obj, type)", "ctypes.cudart(obj, type)", "ctypes.__concat__(obj, type)"], "ctypes.create_string_buffer(init_or_size)": ["create_string_buffer", "ctypes.create_unicode_buffer(init_or_size)", "ctypes.get_buffer(init_or_size)", "ctypes.c_buffer(init_or_size)", "ctypes.array2string(init_or_size)", "ctypes.fromstring(init_or_size)", "ctypes.generate_range(init_or_size)", "ctypes._copy_docstring_and_deprecators(init_or_size)", "ctypes._get_instructions_bytes(init_or_size)", "ctypes.tostring(init_or_size)", "ctypes.ParserCreate(init_or_size)", "ctypes.stack_effect(init_or_size)", "ctypes._find_strings(init_or_size)", "ctypes._array2string_impl(init_or_size)", "ctypes.array_str(init_or_size)"], "ctypes.create_string_buffer(init_or_size, size=None)": ["create_string_buffer", "ctypes.create_string_buffer(init_or_size, size=None)", "ctypes.create_unicode_buffer(init_or_size, size=None)", "ctypes.get_buffer(init_or_size, size=None)", "ctypes.c_buffer(init_or_size, size=None)", "ctypes.array2string(init_or_size, size=None)", "ctypes.fromstring(init_or_size, size=None)", "ctypes.generate_range(init_or_size, size=None)", "ctypes._copy_docstring_and_deprecators(init_or_size, size=None)", "ctypes._get_instructions_bytes(init_or_size, size=None)", "ctypes.tostring(init_or_size, size=None)", "ctypes.ParserCreate(init_or_size, size=None)", "ctypes.stack_effect(init_or_size, size=None)", "ctypes._find_strings(init_or_size, size=None)", "ctypes._array2string_impl(init_or_size, size=None)"], "ctypes.create_unicode_buffer(init_or_size)": ["create_unicode_buffer", "ctypes.create_string_buffer(init_or_size)", "ctypes.unicode_escape_decode(init_or_size)", "ctypes.unicode_escape_encode(init_or_size)", "ctypes.unicode_internal_encode(init_or_size)", "ctypes.unicode_internal_decode(init_or_size)", "ctypes.get_buffer(init_or_size)", "ctypes.create_dynamic(init_or_size)", "ctypes.raw_unicode_escape_decode(init_or_size)", "ctypes.raw_unicode_escape_encode(init_or_size)", "ctypes.c_buffer(init_or_size)", "ctypes.charmap_encode(init_or_size)", "ctypes.create_default_context(init_or_size)", "ctypes.utf_32_be_encode(init_or_size)", "ctypes.get_fuser_method(init_or_size)"], "ctypes.create_unicode_buffer(init_or_size, size=None)": ["create_unicode_buffer", "ctypes.create_unicode_buffer(init_or_size, size=None)", "ctypes.create_string_buffer(init_or_size, size=None)", "ctypes.unicode_escape_decode(init_or_size, size=None)", "ctypes.unicode_escape_encode(init_or_size, size=None)", "ctypes.unicode_internal_encode(init_or_size, size=None)", "ctypes.unicode_internal_decode(init_or_size, size=None)", "ctypes.get_buffer(init_or_size, size=None)", "ctypes.create_dynamic(init_or_size, size=None)", "ctypes.raw_unicode_escape_decode(init_or_size, size=None)", "ctypes.raw_unicode_escape_encode(init_or_size, size=None)", "ctypes.c_buffer(init_or_size, size=None)", "ctypes.charmap_encode(init_or_size, size=None)", "ctypes.create_default_context(init_or_size, size=None)", "ctypes.utf_32_be_encode(init_or_size, size=None)"], "ctypes.get_errno()": ["get_errno"], "ctypes.memmove(dst, src, count)": ["memmove"], "ctypes.memset(dst, c, count)": ["memset"], "ctypes.pointer(obj)": ["pointer"], "ctypes.py_object": ["ctypes.py_object"], "ctypes.pythonapi": ["ctypes.pythonapi"], "ctypes.resize(obj, size)": ["resize"], "ctypes.set_errno(value)": ["set_errno"], "ctypes.set_last_error(value)": ["set_last_error"], "ctypes.sizeof(obj_or_type)": ["sizeof"], "ctypes.string_at(address)": ["string_at", "ctypes.wstring_at(address)", "ctypes._all_gather(address)", "ctypes.argsort(address)", "ctypes.localtime(address)", "ctypes.splitnport(address)", "ctypes.sort(address)", "ctypes.NamedTemporaryFile(address)", "ctypes.stack(address)", "ctypes._stack_multi_columns(address)", "ctypes._parse(address)", "ctypes._rref_typeof_on_user(address)", "ctypes.TemporaryFile(address)", "ctypes._disassemble_bytes(address)", "ctypes.rendezvous(address)"], "ctypes.string_at(address, size=-1)": ["string_at", "ctypes.string_at(address, size=(- '1'))", "ctypes.wstring_at(address, size=(- 1))", "ctypes._all_gather(address, size=(- 1))", "ctypes.argsort(address, size=(- 1))", "ctypes.localtime(address, size=(- 1))", "ctypes.splitnport(address, size=(- 1))", "ctypes.sort(address, size=(- 1))", "ctypes.NamedTemporaryFile(address, size=(- 1))", "ctypes.stack(address, size=(- 1))", "ctypes._stack_multi_columns(address, size=(- 1))", "ctypes._parse(address, size=(- 1))", "ctypes._rref_typeof_on_user(address, size=(- 1))", "ctypes.TemporaryFile(address, size=(- 1))", "ctypes._disassemble_bytes(address, size=(- 1))"], "ctypes.util.find_library(name)": ["find_library"], "ctypes.util.find_msvcrt()": ["find_msvcrt"], "ctypes.windll": ["ctypes.windll"], "ctypes.wstring_at(address)": ["wstring_at", "ctypes.string_at(address)", "ctypes._all_gather(address)", "ctypes.argsort(address)", "ctypes.localtime(address)", "ctypes.splitnport(address)", "ctypes.NamedTemporaryFile(address)", "ctypes.sort(address)", "ctypes._stack_multi_columns(address)", "ctypes._rref_typeof_on_user(address)", "ctypes.stack(address)", "ctypes._parse(address)", "ctypes.TemporaryFile(address)", "ctypes._disassemble_bytes(address)", "ctypes.rendezvous(address)"], "ctypes.wstring_at(address, size=-1)": ["wstring_at", "ctypes.wstring_at(address, size=(- '1'))", "ctypes.string_at(address, size=(- 1))", "ctypes._all_gather(address, size=(- 1))", "ctypes.argsort(address, size=(- 1))", "ctypes.localtime(address, size=(- 1))", "ctypes.splitnport(address, size=(- 1))", "ctypes.NamedTemporaryFile(address, size=(- 1))", "ctypes.sort(address, size=(- 1))", "ctypes._stack_multi_columns(address, size=(- 1))", "ctypes._rref_typeof_on_user(address, size=(- 1))", "ctypes.stack(address, size=(- 1))", "ctypes._parse(address, size=(- 1))", "ctypes.TemporaryFile(address, size=(- 1))", "ctypes._disassemble_bytes(address, size=(- 1))"], "curses.OK": ["curses.OK"], "curses.ascii.alt(c)": ["alt"], "curses.ascii.ascii(c)": ["ascii"], "curses.ascii.controlnames": ["curses.ascii.controlnames"], "curses.ascii.ctrl(c)": ["ctrl"], "curses.ascii.isalnum(c)": ["isalnum"], "curses.ascii.isalpha(c)": ["isalpha"], "curses.ascii.isascii(c)": ["isascii"], "curses.ascii.isblank(c)": ["isblank"], "curses.ascii.iscntrl(c)": ["iscntrl"], "curses.ascii.isctrl(c)": ["isctrl"], "curses.ascii.isdigit(c)": ["isdigit"], "curses.ascii.isgraph(c)": ["isgraph"], "curses.ascii.islower(c)": ["islower"], "curses.ascii.ispunct(c)": ["ispunct"], "curses.ascii.isspace(c)": ["isspace"], "curses.ascii.isupper(c)": ["isupper"], "curses.ascii.isxdigit(c)": ["isxdigit"], "curses.ascii.unctrl(c)": ["unctrl"], "curses.baudrate()": ["baudrate"], "curses.beep()": ["beep"], "curses.can_change_color()": ["can_change_color"], "curses.cbreak()": ["cbreak"], "curses.color_content(color_number)": ["color_content"], "curses.color_pair(color_number)": ["color_pair"], "curses.curs_set(visibility)": ["curs_set"], "curses.def_prog_mode()": ["def_prog_mode"], "curses.def_shell_mode()": ["def_shell_mode"], "curses.delay_output(ms)": ["delay_output"], "curses.doupdate()": ["doupdate"], "curses.echo()": ["echo"], "curses.endwin()": ["endwin"], "curses.erasechar()": ["erasechar"], "curses.error": ["curses.error"], "curses.flash()": ["flash"], "curses.flushinp()": ["flushinp"], "curses.getmouse()": ["getmouse"], "curses.getsyx()": ["getsyx"], "curses.getwin(file)": ["getwin"], "curses.halfdelay(tenths)": ["halfdelay"], "curses.has_colors()": ["has_colors"], "curses.has_il()": ["has_il"], "curses.has_key(ch)": ["has_key"], "curses.init_color(color_number, r, g, b)": ["init_color"], "curses.init_pair(pair_number, fg, bg)": ["init_pair"], "curses.initscr()": ["initscr", "curses.init()", "curses.finditer()", "curses.init_rpc()", "curses.init_rank()", "curses.interp()", "curses.insert()", "curses.winter()", "curses._hist_bin_sqrt()", "curses.nts()", "curses._init_param()", "curses._init_regex()", "curses._init_posix()", "curses._is_initvar()", "curses._str_intern()"], "curses.is_term_resized(nlines, ncols)": ["is_term_resized"], "curses.isendwin()": ["isendwin"], "curses.keyname(k)": ["keyname"], "curses.killchar()": ["killchar"], "curses.meta(flag)": ["meta"], "curses.mouseinterval(interval)": ["mouseinterval"], "curses.napms(ms)": ["napms"], "curses.newpad(nlines, ncols)": ["newpad"], "curses.newwin(nlines, ncols)": ["newwin"], "curses.nl()": ["nl"], "curses.nocbreak()": ["nocbreak"], "curses.noecho()": ["noecho"], "curses.noqiflush()": ["noqiflush"], "curses.noraw()": ["noraw"], "curses.pair_content(pair_number)": ["pair_content"], "curses.pair_number(attr)": ["pair_number"], "curses.panel.bottom_panel()": ["bottom_panel"], "curses.panel.new_panel(win)": ["new_panel"], "curses.panel.top_panel()": ["top_panel"], "curses.panel.update_panels()": ["update_panels"], "curses.putp(str)": ["putp"], "curses.qiflush()": ["qiflush"], "curses.qiflush(flag)": ["qiflush"], "curses.raw()": ["raw"], "curses.reset_prog_mode()": ["reset_prog_mode"], "curses.reset_shell_mode()": ["reset_shell_mode"], "curses.resetty()": ["resetty"], "curses.resize_term(nlines, ncols)": ["resize_term"], "curses.resizeterm(nlines, ncols)": ["resizeterm"], "curses.savetty()": ["savetty"], "curses.setsyx(y, x)": ["setsyx"], "curses.setupterm()": ["setupterm"], "curses.setupterm(fd=-1)": ["setupterm", "curses.setupterm(fd=(- '1'))"], "curses.setupterm(term=None)": ["setupterm", "curses.setupterm(term=None)"], "curses.setupterm(term=None, fd=-1)": ["setupterm", "curses.setupterm(term=None, fd=(- 1))", "curses.setupterm(term=None, fd=(- '1'))"], "curses.start_color()": ["start_color", "curses.colorbar()", "curses._scalar_str()", "curses.copystat()", "curses.constant()", "curses._start_record_function()", "curses.start()", "curses.color()", "curses.lstat()", "curses.column_stack()", "curses._start_server()", "curses._sort_complex()", "curses.start_server()", "curses.sort_complex()", "curses.colormaps()"], "curses.termattrs()": ["termattrs"], "curses.termname()": ["termname"], "curses.textpad.Textbox(win)": ["Textbox"], "curses.textpad.rectangle(win, uly, ulx, lry, lrx)": ["rectangle"], "curses.tparm(str)": ["tparm"], "curses.typeahead(fd)": ["typeahead"], "curses.unctrl(ch)": ["unctrl"], "curses.unget_wch(ch)": ["unget_wch"], "curses.ungetch(ch)": ["ungetch"], "curses.ungetmouse(id, x, y, z, bstate)": ["ungetmouse"], "curses.update_lines_cols()": ["update_lines_cols"], "curses.use_default_colors()": ["use_default_colors"], "curses.use_env(flag)": ["use_env"], "curses.version": ["curses.version"], "curses.wrapper(func)": ["wrapper", "curses.OpenWrapper(func)", "curses._view_wrapper(func)", "curses._wrap(func)", "curses.wrap(func)", "curses.update_wrapper(func)", "curses.wraps(func)", "curses.upper(func)", "curses._convert_wrapper(func)", "curses._wrapit(func)", "curses.copper(func)", "curses.unwrap(func)", "curses.append(func)", "curses.tracer(func)", "curses.isupper(func)"], "cursor.arraysize": ["cursor.arraysize"], "cursor.close()": ["close"], "cursor.connection": ["cursor.connection"], "cursor.description": ["cursor.description"], "cursor.execute(sql)": ["execute"], "cursor.execute(sql, parameters)": ["execute"], "cursor.executemany(sql, seq_of_parameters)": ["executemany"], "cursor.executescript(sql_script)": ["executescript"], "cursor.fetchall()": ["fetchall"], "cursor.fetchmany()": ["fetchmany"], "cursor.fetchmany(size=cursor.arraysize)": ["fetchmany"], "cursor.fetchone()": ["fetchone"], "cursor.lastrowid": ["cursor.lastrowid"], "cursor.rowcount": ["cursor.rowcount"], "d[key]": ["d[key]"], "d[key] = value": ["d[key] = value"], "dataclasses.Field": ["dataclasses.Field"], "dataclasses.asdict(instance)": ["asdict", "dataclasses._asdict_inner(instance)", "dataclasses._as_int(instance)", "dataclasses._splitdict(instance)", "dataclasses.isdigit(instance)", "dataclasses.is_dict(instance)", "dataclasses.cast(instance)", "dataclasses.sinc(instance)", "dataclasses._cast(instance)", "dataclasses.wait(instance)", "dataclasses.dist(instance)", "dataclasses._wait(instance)", "dataclasses.gradient(instance)", "dataclasses._makenamedict(instance)", "dataclasses.split(instance)"], "dataclasses.asdict(instance, dict_factory=dict)": ["asdict", "dataclasses._asdict_inner(instance, dict_factory=dict)", "dataclasses._as_int(instance, dict_factory=dict)", "dataclasses._splitdict(instance, dict_factory=dict)", "dataclasses.isdigit(instance, dict_factory=dict)", "dataclasses.is_dict(instance, dict_factory=dict)", "dataclasses.cast(instance, dict_factory=dict)", "dataclasses.sinc(instance, dict_factory=dict)", "dataclasses._cast(instance, dict_factory=dict)", "dataclasses.wait(instance, dict_factory=dict)", "dataclasses.dist(instance, dict_factory=dict)", "dataclasses._wait(instance, dict_factory=dict)", "dataclasses.gradient(instance, dict_factory=dict)", "dataclasses._makenamedict(instance, dict_factory=dict)", "dataclasses.split(instance, dict_factory=dict)"], "dataclasses.astuple(instance)": ["astuple", "dataclasses._astuple_inner(instance)", "dataclasses._as_tuple(instance)", "dataclasses.is_tuple(instance)", "dataclasses._ntuple(instance)", "dataclasses._tuple_str(instance)", "dataclasses.namedtuple(instance)", "dataclasses._namedtuple(instance)", "dataclasses._safe_tuple(instance)", "dataclasses.make_tuple(instance)", "dataclasses.suptitle(instance)", "dataclasses.setup(instance)", "dataclasses._setup(instance)", "dataclasses._cast_inplace(instance)", "dataclasses._make_nmtuple(instance)"], "dataclasses.astuple(instance, tuple_factory=tuple)": ["astuple", "dataclasses._astuple_inner(instance, tuple_factory=tuple)", "dataclasses._as_tuple(instance, tuple_factory=tuple)", "dataclasses.is_tuple(instance, tuple_factory=tuple)", "dataclasses._ntuple(instance, tuple_factory=tuple)", "dataclasses._tuple_str(instance, tuple_factory=tuple)", "dataclasses.namedtuple(instance, tuple_factory=tuple)", "dataclasses._namedtuple(instance, tuple_factory=tuple)", "dataclasses._safe_tuple(instance, tuple_factory=tuple)", "dataclasses.make_tuple(instance, tuple_factory=tuple)", "dataclasses.suptitle(instance, tuple_factory=tuple)", "dataclasses.setup(instance, tuple_factory=tuple)", "dataclasses._setup(instance, tuple_factory=tuple)", "dataclasses._cast_inplace(instance, tuple_factory=tuple)", "dataclasses._make_nmtuple(instance, tuple_factory=tuple)"], "dataclasses.field()": ["field", "dataclasses.fields()", "dataclasses.fold()", "dataclasses.filled()", "dataclasses.shield()", "dataclasses._node()", "dataclasses._usefields()", "dataclasses._get_field()", "dataclasses.figure()", "dataclasses.find()", "dataclasses.fill()", "dataclasses._field_init()", "dataclasses.parsefield()", "dataclasses.findobj()", "dataclasses.unfold()"], "dataclasses.field(compare=True)": ["field", "dataclasses.field(compare=False)", "dataclasses.fields(compare=True)", "dataclasses.fold(compare=True)", "dataclasses.filled(compare=True)", "dataclasses.shield(compare=True)", "dataclasses._node(compare=True)", "dataclasses._usefields(compare=True)", "dataclasses._get_field(compare=True)", "dataclasses.figure(compare=True)", "dataclasses.find(compare=True)", "dataclasses.fill(compare=True)", "dataclasses._field_init(compare=True)", "dataclasses.parsefield(compare=True)", "dataclasses.findobj(compare=True)"], "dataclasses.field(default=MISSING)": ["field", "dataclasses.fields(default=MISSING)", "dataclasses.fold(default=MISSING)", "dataclasses.filled(default=MISSING)", "dataclasses.shield(default=MISSING)", "dataclasses._node(default=MISSING)", "dataclasses._usefields(default=MISSING)", "dataclasses._get_field(default=MISSING)", "dataclasses.figure(default=MISSING)", "dataclasses.find(default=MISSING)", "dataclasses.fill(default=MISSING)", "dataclasses._field_init(default=MISSING)", "dataclasses.parsefield(default=MISSING)", "dataclasses.findobj(default=MISSING)", "dataclasses.unfold(default=MISSING)"], "dataclasses.field(default=MISSING, default_factory=MISSING)": ["field", "dataclasses.fields(default=MISSING, default_factory=MISSING)", "dataclasses.fold(default=MISSING, default_factory=MISSING)", "dataclasses.filled(default=MISSING, default_factory=MISSING)", "dataclasses.shield(default=MISSING, default_factory=MISSING)", "dataclasses._node(default=MISSING, default_factory=MISSING)", "dataclasses._usefields(default=MISSING, default_factory=MISSING)", "dataclasses._get_field(default=MISSING, default_factory=MISSING)", "dataclasses.figure(default=MISSING, default_factory=MISSING)", "dataclasses.find(default=MISSING, default_factory=MISSING)", "dataclasses.fill(default=MISSING, default_factory=MISSING)", "dataclasses._field_init(default=MISSING, default_factory=MISSING)", "dataclasses.parsefield(default=MISSING, default_factory=MISSING)", "dataclasses.findobj(default=MISSING, default_factory=MISSING)", "dataclasses.unfold(default=MISSING, default_factory=MISSING)"], "dataclasses.field(default=MISSING, repr=True)": ["field", "dataclasses.field(default=MISSING, repr=False)", "dataclasses.fields(default=MISSING, repr=True)", "dataclasses.fold(default=MISSING, repr=True)", "dataclasses.filled(default=MISSING, repr=True)", "dataclasses.shield(default=MISSING, repr=True)", "dataclasses._node(default=MISSING, repr=True)", "dataclasses._usefields(default=MISSING, repr=True)", "dataclasses._get_field(default=MISSING, repr=True)", "dataclasses.figure(default=MISSING, repr=True)", "dataclasses.find(default=MISSING, repr=True)", "dataclasses.fill(default=MISSING, repr=True)", "dataclasses._field_init(default=MISSING, repr=True)", "dataclasses.parsefield(default=MISSING, repr=True)", "dataclasses.findobj(default=MISSING, repr=True)"], "dataclasses.field(default_factory=MISSING)": ["field", "dataclasses.fields(default_factory=MISSING)", "dataclasses.fold(default_factory=MISSING)", "dataclasses.filled(default_factory=MISSING)", "dataclasses.shield(default_factory=MISSING)", "dataclasses._node(default_factory=MISSING)", "dataclasses._usefields(default_factory=MISSING)", "dataclasses._get_field(default_factory=MISSING)", "dataclasses.figure(default_factory=MISSING)", "dataclasses.find(default_factory=MISSING)", "dataclasses.fill(default_factory=MISSING)", "dataclasses._field_init(default_factory=MISSING)", "dataclasses.parsefield(default_factory=MISSING)", "dataclasses.findobj(default_factory=MISSING)", "dataclasses.unfold(default_factory=MISSING)"], "dataclasses.field(hash=None)": ["field", "dataclasses.field(hash=None)", "dataclasses.fields(hash=None)", "dataclasses.fold(hash=None)", "dataclasses.filled(hash=None)", "dataclasses.shield(hash=None)", "dataclasses._node(hash=None)", "dataclasses._usefields(hash=None)", "dataclasses._get_field(hash=None)", "dataclasses.figure(hash=None)", "dataclasses.find(hash=None)", "dataclasses.fill(hash=None)", "dataclasses._field_init(hash=None)", "dataclasses.parsefield(hash=None)", "dataclasses.findobj(hash=None)"], "dataclasses.field(init=True)": ["field", "dataclasses.field(init=False)", "dataclasses.fields(init=True)", "dataclasses.fold(init=True)", "dataclasses.filled(init=True)", "dataclasses.shield(init=True)", "dataclasses._node(init=True)", "dataclasses._usefields(init=True)", "dataclasses._get_field(init=True)", "dataclasses.figure(init=True)", "dataclasses.find(init=True)", "dataclasses.fill(init=True)", "dataclasses._field_init(init=True)", "dataclasses.parsefield(init=True)", "dataclasses.findobj(init=True)"], "dataclasses.field(metadata=None)": ["field", "dataclasses.field(metadata=None)", "dataclasses.fields(metadata=None)", "dataclasses.fold(metadata=None)", "dataclasses.filled(metadata=None)", "dataclasses.shield(metadata=None)", "dataclasses._node(metadata=None)", "dataclasses._usefields(metadata=None)", "dataclasses._get_field(metadata=None)", "dataclasses.figure(metadata=None)", "dataclasses.find(metadata=None)", "dataclasses.fill(metadata=None)", "dataclasses._field_init(metadata=None)", "dataclasses.parsefield(metadata=None)", "dataclasses.findobj(metadata=None)"], "dataclasses.field(repr=True)": ["field", "dataclasses.field(repr=False)", "dataclasses.fields(repr=True)", "dataclasses.fold(repr=True)", "dataclasses.filled(repr=True)", "dataclasses.shield(repr=True)", "dataclasses._node(repr=True)", "dataclasses._usefields(repr=True)", "dataclasses._get_field(repr=True)", "dataclasses.figure(repr=True)", "dataclasses.find(repr=True)", "dataclasses.fill(repr=True)", "dataclasses._field_init(repr=True)", "dataclasses.parsefield(repr=True)", "dataclasses.findobj(repr=True)"], "dataclasses.fields(class_or_instance)": ["fields", "dataclasses.field(class_or_instance)", "dataclasses._usefields(class_or_instance)", "dataclasses.iter_fields(class_or_instance)", "dataclasses._copy_fields(class_or_instance)", "dataclasses.filled(class_or_instance)", "dataclasses.shield(class_or_instance)", "dataclasses._get_field(class_or_instance)", "dataclasses.jiffies(class_or_instance)", "dataclasses._field_init(class_or_instance)", "dataclasses.findlabels(class_or_instance)", "dataclasses.parsefield(class_or_instance)", "dataclasses.fold(class_or_instance)", "dataclasses.find(class_or_instance)", "dataclasses.fill(class_or_instance)"], "dataclasses.make_dataclass(cls_name, fields)": ["make_dataclass", "dataclasses._signature_get_partial(cls_name, fields)", "dataclasses.new_class(cls_name, fields)", "dataclasses._nest_class(cls_name, fields)", "dataclasses.chebinterpolate(cls_name, fields)", "dataclasses.dataclass(cls_name, fields)", "dataclasses.is_dataclass(cls_name, fields)", "dataclasses._leading_trailing(cls_name, fields)", "dataclasses._save_dispatcher(cls_name, fields)", "dataclasses.assert_array_max_ulp(cls_name, fields)", "dataclasses._take_dispatcher(cls_name, fields)", "dataclasses.make_dual(cls_name, fields)", "dataclasses._nanmax_dispatcher(cls_name, fields)", "dataclasses._replace_dispatcher(cls_name, fields)", "dataclasses._is_dataclass_instance(cls_name, fields)"], "dataclasses.make_dataclass(cls_name, fields, bases=())": ["make_dataclass", "dataclasses._signature_get_partial(cls_name, fields, bases=())", "dataclasses.new_class(cls_name, fields, bases=())", "dataclasses._nest_class(cls_name, fields, bases=())", "dataclasses.chebinterpolate(cls_name, fields, bases=())", "dataclasses.dataclass(cls_name, fields, bases=())", "dataclasses.is_dataclass(cls_name, fields, bases=())", "dataclasses._leading_trailing(cls_name, fields, bases=())", "dataclasses._save_dispatcher(cls_name, fields, bases=())", "dataclasses.assert_array_max_ulp(cls_name, fields, bases=())", "dataclasses._take_dispatcher(cls_name, fields, bases=())", "dataclasses.make_dual(cls_name, fields, bases=())", "dataclasses._nanmax_dispatcher(cls_name, fields, bases=())", "dataclasses._replace_dispatcher(cls_name, fields, bases=())", "dataclasses._is_dataclass_instance(cls_name, fields, bases=())"], "dataclasses.make_dataclass(cls_name, fields, bases=(), namespace=None)": ["make_dataclass", "dataclasses.make_dataclass(cls_name, fields, bases=(), namespace=None)", "dataclasses._signature_get_partial(cls_name, fields, bases=(), namespace=None)", "dataclasses.new_class(cls_name, fields, bases=(), namespace=None)", "dataclasses._nest_class(cls_name, fields, bases=(), namespace=None)", "dataclasses.chebinterpolate(cls_name, fields, bases=(), namespace=None)", "dataclasses.dataclass(cls_name, fields, bases=(), namespace=None)", "dataclasses.is_dataclass(cls_name, fields, bases=(), namespace=None)", "dataclasses._leading_trailing(cls_name, fields, bases=(), namespace=None)", "dataclasses._save_dispatcher(cls_name, fields, bases=(), namespace=None)", "dataclasses.assert_array_max_ulp(cls_name, fields, bases=(), namespace=None)", "dataclasses._take_dispatcher(cls_name, fields, bases=(), namespace=None)", "dataclasses.make_dual(cls_name, fields, bases=(), namespace=None)", "dataclasses._nanmax_dispatcher(cls_name, fields, bases=(), namespace=None)", "dataclasses._replace_dispatcher(cls_name, fields, bases=(), namespace=None)"], "dataclasses.make_dataclass(cls_name, fields, eq=True)": ["make_dataclass", "dataclasses.make_dataclass(cls_name, fields, eq=False)", "dataclasses._signature_get_partial(cls_name, fields, eq=True)", "dataclasses.new_class(cls_name, fields, eq=True)", "dataclasses._nest_class(cls_name, fields, eq=True)", "dataclasses.chebinterpolate(cls_name, fields, eq=True)", "dataclasses.dataclass(cls_name, fields, eq=True)", "dataclasses.is_dataclass(cls_name, fields, eq=True)", "dataclasses._leading_trailing(cls_name, fields, eq=True)", "dataclasses._save_dispatcher(cls_name, fields, eq=True)", "dataclasses.assert_array_max_ulp(cls_name, fields, eq=True)", "dataclasses._take_dispatcher(cls_name, fields, eq=True)", "dataclasses.make_dual(cls_name, fields, eq=True)", "dataclasses._nanmax_dispatcher(cls_name, fields, eq=True)", "dataclasses._replace_dispatcher(cls_name, fields, eq=True)"], "dataclasses.make_dataclass(cls_name, fields, frozen=False)": ["make_dataclass", "dataclasses.make_dataclass(cls_name, fields, frozen=True)", "dataclasses._signature_get_partial(cls_name, fields, frozen=False)", "dataclasses.new_class(cls_name, fields, frozen=False)", "dataclasses._nest_class(cls_name, fields, frozen=False)", "dataclasses.chebinterpolate(cls_name, fields, frozen=False)", "dataclasses.dataclass(cls_name, fields, frozen=False)", "dataclasses.is_dataclass(cls_name, fields, frozen=False)", "dataclasses._leading_trailing(cls_name, fields, frozen=False)", "dataclasses._save_dispatcher(cls_name, fields, frozen=False)", "dataclasses.assert_array_max_ulp(cls_name, fields, frozen=False)", "dataclasses._take_dispatcher(cls_name, fields, frozen=False)", "dataclasses.make_dual(cls_name, fields, frozen=False)", "dataclasses._nanmax_dispatcher(cls_name, fields, frozen=False)", "dataclasses._replace_dispatcher(cls_name, fields, frozen=False)"], "dataclasses.make_dataclass(cls_name, fields, init=True)": ["make_dataclass", "dataclasses.make_dataclass(cls_name, fields, init=False)", "dataclasses._signature_get_partial(cls_name, fields, init=True)", "dataclasses.new_class(cls_name, fields, init=True)", "dataclasses._nest_class(cls_name, fields, init=True)", "dataclasses.chebinterpolate(cls_name, fields, init=True)", "dataclasses.dataclass(cls_name, fields, init=True)", "dataclasses.is_dataclass(cls_name, fields, init=True)", "dataclasses._leading_trailing(cls_name, fields, init=True)", "dataclasses._save_dispatcher(cls_name, fields, init=True)", "dataclasses.assert_array_max_ulp(cls_name, fields, init=True)", "dataclasses._take_dispatcher(cls_name, fields, init=True)", "dataclasses.make_dual(cls_name, fields, init=True)", "dataclasses._nanmax_dispatcher(cls_name, fields, init=True)", "dataclasses._replace_dispatcher(cls_name, fields, init=True)"], "dataclasses.make_dataclass(cls_name, fields, namespace=None)": ["make_dataclass", "dataclasses.make_dataclass(cls_name, fields, namespace=None)", "dataclasses._signature_get_partial(cls_name, fields, namespace=None)", "dataclasses.new_class(cls_name, fields, namespace=None)", "dataclasses._nest_class(cls_name, fields, namespace=None)", "dataclasses.chebinterpolate(cls_name, fields, namespace=None)", "dataclasses.dataclass(cls_name, fields, namespace=None)", "dataclasses.is_dataclass(cls_name, fields, namespace=None)", "dataclasses._leading_trailing(cls_name, fields, namespace=None)", "dataclasses._save_dispatcher(cls_name, fields, namespace=None)", "dataclasses.assert_array_max_ulp(cls_name, fields, namespace=None)", "dataclasses._take_dispatcher(cls_name, fields, namespace=None)", "dataclasses.make_dual(cls_name, fields, namespace=None)", "dataclasses._nanmax_dispatcher(cls_name, fields, namespace=None)", "dataclasses._replace_dispatcher(cls_name, fields, namespace=None)"], "dataclasses.make_dataclass(cls_name, fields, order=False)": ["make_dataclass", "dataclasses.make_dataclass(cls_name, fields, order=True)", "dataclasses._signature_get_partial(cls_name, fields, order=False)", "dataclasses.new_class(cls_name, fields, order=False)", "dataclasses._nest_class(cls_name, fields, order=False)", "dataclasses.chebinterpolate(cls_name, fields, order=False)", "dataclasses.dataclass(cls_name, fields, order=False)", "dataclasses.is_dataclass(cls_name, fields, order=False)", "dataclasses._leading_trailing(cls_name, fields, order=False)", "dataclasses._save_dispatcher(cls_name, fields, order=False)", "dataclasses.assert_array_max_ulp(cls_name, fields, order=False)", "dataclasses._take_dispatcher(cls_name, fields, order=False)", "dataclasses.make_dual(cls_name, fields, order=False)", "dataclasses._nanmax_dispatcher(cls_name, fields, order=False)", "dataclasses._replace_dispatcher(cls_name, fields, order=False)"], "dataclasses.make_dataclass(cls_name, fields, repr=True)": ["make_dataclass", "dataclasses.make_dataclass(cls_name, fields, repr=False)", "dataclasses._signature_get_partial(cls_name, fields, repr=True)", "dataclasses.new_class(cls_name, fields, repr=True)", "dataclasses._nest_class(cls_name, fields, repr=True)", "dataclasses.chebinterpolate(cls_name, fields, repr=True)", "dataclasses.dataclass(cls_name, fields, repr=True)", "dataclasses.is_dataclass(cls_name, fields, repr=True)", "dataclasses._leading_trailing(cls_name, fields, repr=True)", "dataclasses._save_dispatcher(cls_name, fields, repr=True)", "dataclasses.assert_array_max_ulp(cls_name, fields, repr=True)", "dataclasses._take_dispatcher(cls_name, fields, repr=True)", "dataclasses.make_dual(cls_name, fields, repr=True)", "dataclasses._nanmax_dispatcher(cls_name, fields, repr=True)", "dataclasses._replace_dispatcher(cls_name, fields, repr=True)"], "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=False)": ["make_dataclass", "dataclasses.make_dataclass(cls_name, fields, unsafe_hash=True)", "dataclasses._signature_get_partial(cls_name, fields, unsafe_hash=False)", "dataclasses.new_class(cls_name, fields, unsafe_hash=False)", "dataclasses._nest_class(cls_name, fields, unsafe_hash=False)", "dataclasses.chebinterpolate(cls_name, fields, unsafe_hash=False)", "dataclasses.dataclass(cls_name, fields, unsafe_hash=False)", "dataclasses.is_dataclass(cls_name, fields, unsafe_hash=False)", "dataclasses._leading_trailing(cls_name, fields, unsafe_hash=False)", "dataclasses._save_dispatcher(cls_name, fields, unsafe_hash=False)", "dataclasses.assert_array_max_ulp(cls_name, fields, unsafe_hash=False)", "dataclasses._take_dispatcher(cls_name, fields, unsafe_hash=False)", "dataclasses.make_dual(cls_name, fields, unsafe_hash=False)", "dataclasses._nanmax_dispatcher(cls_name, fields, unsafe_hash=False)", "dataclasses._replace_dispatcher(cls_name, fields, unsafe_hash=False)"], "dataclasses.replace(instance, **changes)": ["replace", "dataclasses.prepare(instance, **changes)", "dataclasses.rename(instance, **changes)", "dataclasses.reduce(instance, **changes)", "dataclasses._replace_dispatcher(instance, **changes)", "dataclasses.urlencode(instance, **changes)", "dataclasses._create_fn(instance, **changes)", "dataclasses._average_dispatcher(instance, **changes)", "dataclasses.interpolate_1d(instance, **changes)", "dataclasses.interpolate_2d(instance, **changes)", "dataclasses.namedtuple(instance, **changes)", "dataclasses._namedtuple(instance, **changes)", "dataclasses.percentile(instance, **changes)", "dataclasses._makeLoader(instance, **changes)", "dataclasses.all_reduce(instance, **changes)"], "datagram_handler.emit()": ["emit"], "datagram_handler.makeSocket()": ["makeSocket"], "datagram_handler.send(s)": ["send"], "date.__format__(format)": ["__format__"], "date.__str__()": ["__str__"], "date.ctime()": ["ctime"], "date.day": ["date.day"], "date.fromisoformat(date_string)": ["fromisoformat"], "date.fromordinal(ordinal)": ["fromordinal"], "date.fromtimestamp(timestamp)": ["fromtimestamp"], "date.isocalendar()": ["isocalendar"], "date.isoformat()": ["isoformat"], "date.isoweekday()": ["isoweekday"], "date.max": ["date.max"], "date.min": ["date.min"], "date.month": ["date.month"], "date.replace()": ["replace"], "date.replace(day=self.day)": ["replace"], "date.replace(month=self.month)": ["replace"], "date.replace(month=self.month, day=self.day)": ["replace"], "date.replace(year=self.year)": ["replace"], "date.replace(year=self.year, day=self.day)": ["replace"], "date.replace(year=self.year, month=self.month)": ["replace"], "date.replace(year=self.year, month=self.month, day=self.day)": ["replace"], "date.resolution": ["date.resolution"], "date.strftime(format)": ["strftime"], "date.today()": ["today"], "date.toordinal()": ["toordinal"], "date.weekday()": ["weekday"], "date.year": ["date.year"], "date_header.datetime": ["date_header.datetime"], "date_time.decode(string)": ["decode"], "date_time.encode(out)": ["encode"], "datetime.MAXYEAR": ["datetime.MAXYEAR"], "datetime.MINYEAR": ["datetime.MINYEAR"], "datetime.__format__(format)": ["__format__"], "datetime.__str__()": ["__str__"], "datetime.astimezone()": ["astimezone"], "datetime.astimezone(tz=None)": ["astimezone", "datetime.astimezone(tz=None)"], "datetime.combine(date, time)": ["combine"], "datetime.combine(date, time, tzinfo=self.tzinfo)": ["combine"], "datetime.ctime()": ["ctime"], "datetime.date": ["datetime.date"], "datetime.date()": ["date"], "datetime.date(year, month, day)": ["date"], "datetime.datetime": ["datetime.datetime"], "datetime.datetime(year, month, day)": ["datetime"], "datetime.datetime(year, month, day, hour=0)": ["datetime", "datetime.datetime(year, month, day, hour='0')"], "datetime.datetime(year, month, day, hour=0, microsecond=0)": ["datetime", "datetime.datetime(year, month, day, hour='0', microsecond='0')"], "datetime.datetime(year, month, day, hour=0, minute=0)": ["datetime", "datetime.datetime(year, month, day, hour='0', minute='0')"], "datetime.datetime(year, month, day, hour=0, second=0)": ["datetime", "datetime.datetime(year, month, day, hour='0', second='0')"], "datetime.datetime(year, month, day, microsecond=0)": ["datetime", "datetime.datetime(year, month, day, microsecond='0')"], "datetime.datetime(year, month, day, minute=0)": ["datetime", "datetime.datetime(year, month, day, minute='0')"], "datetime.datetime(year, month, day, second=0)": ["datetime", "datetime.datetime(year, month, day, second='0')"], "datetime.datetime(year, month, day, tzinfo=None)": ["datetime", "datetime.datetime(year, month, day, tzinfo=None)"], "datetime.day": ["datetime.day"], "datetime.fold": ["datetime.fold"], "datetime.fromisoformat(date_string)": ["fromisoformat"], "datetime.fromordinal(ordinal)": ["fromordinal"], "datetime.fromtimestamp(timestamp)": ["fromtimestamp"], "datetime.fromtimestamp(timestamp, tz=None)": ["fromtimestamp", "datetime.fromtimestamp(timestamp, tz=None)"], "datetime.hour": ["datetime.hour"], "datetime.isocalendar()": ["isocalendar"], "datetime.isoformat()": ["isoformat"], "datetime.isoformat(sep='T')": ["isoformat", "datetime.isoformat(sep=1.0)"], "datetime.isoformat(sep='T', timespec='auto')": ["isoformat", "datetime.isoformat(sep=1, timespec=4)"], "datetime.isoformat(timespec='auto')": ["isoformat", "datetime.isoformat(timespec=4.0)"], "datetime.isoweekday()": ["isoweekday"], "datetime.max": ["datetime.max"], "datetime.min": ["datetime.min"], "datetime.minute": ["datetime.minute"], "datetime.month": ["datetime.month"], "datetime.now()": ["now"], "datetime.now(tz=None)": ["now", "datetime.now(tz=None)"], "datetime.replace(day=self.day)": ["replace"], "datetime.replace(hour=self.hour)": ["replace"], "datetime.replace(microsecond=self.microsecond)": ["replace"], "datetime.replace(minute=self.minute)": ["replace"], "datetime.replace(month=self.month)": ["replace"], "datetime.replace(second=self.second)": ["replace"], "datetime.replace(tzinfo=self.tzinfo)": ["replace"], "datetime.resolution": ["datetime.resolution"], "datetime.second": ["datetime.second"], "datetime.strftime(format)": ["strftime"], "datetime.strptime(date_string, format)": ["strptime"], "datetime.time": ["datetime.time"], "datetime.time()": ["time"], "datetime.time(hour=0)": ["time", "datetime.time(hour='0')"], "datetime.time(hour=0, microsecond=0)": ["time", "datetime.time(hour='0', microsecond='0')"], "datetime.time(hour=0, minute=0)": ["time", "datetime.time(hour='0', minute='0')"], "datetime.time(hour=0, second=0)": ["time", "datetime.time(hour='0', second='0')"], "datetime.time(microsecond=0)": ["time", "datetime.time(microsecond='0')"], "datetime.time(minute=0)": ["time", "datetime.time(minute='0')"], "datetime.time(second=0)": ["time", "datetime.time(second='0')"], "datetime.time(tzinfo=None)": ["time", "datetime.time(tzinfo=None)"], "datetime.timedelta": ["datetime.timedelta"], "datetime.timedelta()": ["timedelta"], "datetime.timedelta(days=0)": ["timedelta", "datetime.timedelta(days='0')"], "datetime.timedelta(days=0, microseconds=0)": ["timedelta", "datetime.timedelta(days='0', microseconds='0')"], "datetime.timedelta(days=0, seconds=0)": ["timedelta", "datetime.timedelta(days='0', seconds='0')"], "datetime.timedelta(hours=0)": ["timedelta", "datetime.timedelta(hours='0')"], "datetime.timedelta(microseconds=0)": ["timedelta", "datetime.timedelta(microseconds='0')"], "datetime.timedelta(milliseconds=0)": ["timedelta", "datetime.timedelta(milliseconds='0')"], "datetime.timedelta(minutes=0)": ["timedelta", "datetime.timedelta(minutes='0')"], "datetime.timedelta(seconds=0)": ["timedelta", "datetime.timedelta(seconds='0')"], "datetime.timedelta(weeks=0)": ["timedelta", "datetime.timedelta(weeks='0')"], "datetime.timestamp()": ["timestamp"], "datetime.timetz()": ["timetz"], "datetime.timezone": ["datetime.timezone"], "datetime.timezone(offset)": ["timezone"], "datetime.today()": ["today"], "datetime.tzinfo": ["datetime.tzinfo"], "datetime.utcfromtimestamp(timestamp)": ["utcfromtimestamp"], "datetime.utcnow()": ["utcnow"], "datetime.utctimetuple()": ["utctimetuple"], "datetime.year": ["datetime.year"], "dbm.dumb.error": ["dbm.dumb.error"], "dbm.dumb.open(filename)": ["open"], "dbm.dumb.open(filename, flag)": ["open"], "dbm.error": ["dbm.error"], "dbm.gnu.error": ["dbm.gnu.error"], "dbm.gnu.open(filename)": ["open"], "dbm.gnu.open(filename, flag)": ["open"], "dbm.gnu.open(filename, flag, mode)": ["open"], "dbm.ndbm.error": ["dbm.ndbm.error"], "dbm.ndbm.library": ["dbm.ndbm.library"], "dbm.open(file)": ["open", "dbm._open(file)", "dbm.open_latin1(file)", "dbm.popen(file)", "dbm.bltn_open(file)", "dbm.OpenWrapper(file)", "dbm._builtin_open(file)", "dbm.urlopen(file)", "dbm.pie(file)", "dbm._run_code(file)", "dbm.compress(file)", "dbm._popen(file)", "dbm.byte_compile(file)", "dbm.boxplot(file)", "dbm.pen(file)"], "dbm.open(file, flag='r')": ["open", "dbm.open(file, flag=1)", "dbm._open(file, flag='r')", "dbm.open_latin1(file, flag='r')", "dbm.popen(file, flag='r')", "dbm.bltn_open(file, flag='r')", "dbm.OpenWrapper(file, flag='r')", "dbm._builtin_open(file, flag='r')", "dbm.urlopen(file, flag='r')", "dbm.pie(file, flag='r')", "dbm._run_code(file, flag='r')", "dbm.compress(file, flag='r')", "dbm._popen(file, flag='r')", "dbm.byte_compile(file, flag='r')", "dbm.boxplot(file, flag='r')"], "dbm.open(file, mode=0o666)": ["open", "dbm.open(file, mode='438')", "dbm._open(file, mode=438)", "dbm.open_latin1(file, mode=438)", "dbm.popen(file, mode=438)", "dbm.bltn_open(file, mode=438)", "dbm.OpenWrapper(file, mode=438)", "dbm._builtin_open(file, mode=438)", "dbm.urlopen(file, mode=438)", "dbm.pie(file, mode=438)", "dbm._run_code(file, mode=438)", "dbm.compress(file, mode=438)", "dbm._popen(file, mode=438)", "dbm.byte_compile(file, mode=438)", "dbm.boxplot(file, mode=438)"], "dbm.whichdb(filename)": ["whichdb", "dbm.which(filename)", "dbm.whichmodule(filename)", "dbm.whathdr(filename)", "dbm.width(filename)", "dbm.chmod(filename)", "dbm.chdir(filename)", "dbm.fchmod(filename)", "dbm.iscode(filename)", "dbm._chbevl(filename)", "dbm.shield(filename)", "dbm.fchdir(filename)", "dbm.waitid(filename)", "dbm.hist2d(filename)", "dbm._id(filename)"], "decimal.BasicContext": ["decimal.BasicContext"], "decimal.Clamped": ["decimal.Clamped"], "decimal.Context(Emax=None)": ["Context", "decimal.Context(Emax=None)"], "decimal.Context(capitals=None)": ["Context", "decimal.Context(capitals=None)"], "decimal.Context(clamp=None)": ["Context", "decimal.Context(clamp=None)"], "decimal.Context(prec=None)": ["Context", "decimal.Context(prec=None)"], "decimal.Context(prec=None, rounding=None)": ["Context", "decimal.Context(prec=None, rounding=None)"], "decimal.Context(rounding=None)": ["Context", "decimal.Context(rounding=None)"], "decimal.Context(traps=None)": ["Context", "decimal.Context(traps=None)"], "decimal.Decimal()": ["Decimal"], "decimal.Decimal(context=None)": ["Decimal", "decimal.Decimal(context=None)"], "decimal.Decimal(value=\"0\")": ["Decimal", "decimal.Decimal(value=0)"], "decimal.Decimal(value=\"0\", context=None)": ["Decimal", "decimal.Decimal(value='0', context=None)", "decimal.Decimal(value=0, context=None)"], "decimal.DecimalException": ["decimal.DecimalException"], "decimal.DefaultContext": ["decimal.DefaultContext"], "decimal.DivisionByZero": ["decimal.DivisionByZero"], "decimal.ExtendedContext": ["decimal.ExtendedContext"], "decimal.FloatOperation": ["decimal.FloatOperation"], "decimal.Inexact": ["decimal.Inexact"], "decimal.InvalidOperation": ["decimal.InvalidOperation"], "decimal.Overflow": ["decimal.Overflow"], "decimal.ROUND_05UP": ["decimal.ROUND_05UP"], "decimal.ROUND_CEILING": ["decimal.ROUND_CEILING"], "decimal.ROUND_DOWN": ["decimal.ROUND_DOWN"], "decimal.ROUND_FLOOR": ["decimal.ROUND_FLOOR"], "decimal.ROUND_HALF_DOWN": ["decimal.ROUND_HALF_DOWN"], "decimal.ROUND_HALF_EVEN": ["decimal.ROUND_HALF_EVEN"], "decimal.ROUND_HALF_UP": ["decimal.ROUND_HALF_UP"], "decimal.ROUND_UP": ["decimal.ROUND_UP"], "decimal.Rounded": ["decimal.Rounded"], "decimal.Subnormal": ["decimal.Subnormal"], "decimal.Underflow": ["decimal.Underflow"], "decimal.adjusted()": ["adjusted"], "decimal.as_integer_ratio()": ["as_integer_ratio"], "decimal.as_tuple()": ["as_tuple"], "decimal.compare(other)": ["compare"], "decimal.compare(other, context=None)": ["compare", "decimal.compare(other, context=None)"], "decimal.compare_signal(other)": ["compare_signal"], "decimal.compare_signal(other, context=None)": ["compare_signal", "decimal.compare_signal(other, context=None)"], "decimal.compare_total(other)": ["compare_total"], "decimal.compare_total(other, context=None)": ["compare_total", "decimal.compare_total(other, context=None)"], "decimal.compare_total_mag(other)": ["compare_total_mag"], "decimal.compare_total_mag(other, context=None)": ["compare_total_mag", "decimal.compare_total_mag(other, context=None)"], "decimal.copy_negate()": ["copy_negate"], "decimal.copy_sign(other)": ["copy_sign"], "decimal.exp()": ["exp"], "decimal.exp(context=None)": ["exp", "decimal.exp(context=None)"], "decimal.fma(other, third)": ["fma"], "decimal.fma(other, third, context=None)": ["fma", "decimal.fma(other, third, context=None)"], "decimal.from_float(f)": ["from_float"], "decimal.getcontext()": ["getcontext", "decimal.setcontext()", "decimal.get_qcontent()", "decimal.gettext()", "decimal.dgettext()", "decimal.ngettext()", "decimal.lgettext()", "decimal.lngettext()", "decimal.get_ttext()", "decimal.dngettext()", "decimal.ldgettext()", "decimal._getconv()", "decimal.rc_context()", "decimal.ldngettext()", "decimal.getcomments()"], "decimal.is_finite()": ["is_finite"], "decimal.is_infinite()": ["is_infinite"], "decimal.is_normal()": ["is_normal"], "decimal.is_signed()": ["is_signed"], "decimal.is_zero()": ["is_zero"], "decimal.ln()": ["ln"], "decimal.ln(context=None)": ["ln", "decimal.ln(context=None)"], "decimal.localcontext()": ["localcontext", "decimal.localtime()", "decimal.rc_context()", "decimal.get_locales()", "decimal.close_all()", "decimal.validate_map_location()", "decimal.close()", "decimal._all_tasks_compat()", "decimal.get_backend()", "decimal.askokcancel()", "decimal.DocTestSuite()", "decimal.Comment()", "decimal._assert_no_warnings_context()", "decimal._assert_no_gc_cycles_context()", "decimal.interact()"], "decimal.localcontext(ctx=None)": ["localcontext", "decimal.localcontext(ctx=None)", "decimal.localtime(ctx=None)", "decimal.rc_context(ctx=None)", "decimal.get_locales(ctx=None)", "decimal.close_all(ctx=None)", "decimal.validate_map_location(ctx=None)", "decimal.close(ctx=None)", "decimal._all_tasks_compat(ctx=None)", "decimal.get_backend(ctx=None)", "decimal.askokcancel(ctx=None)", "decimal.DocTestSuite(ctx=None)", "decimal.Comment(ctx=None)", "decimal._assert_no_warnings_context(ctx=None)", "decimal._assert_no_gc_cycles_context(ctx=None)"], "decimal.log10()": ["log10"], "decimal.log10(context=None)": ["log10", "decimal.log10(context=None)"], "decimal.logb()": ["logb"], "decimal.logb(context=None)": ["logb", "decimal.logb(context=None)"], "decimal.logical_and(other)": ["logical_and"], "decimal.logical_and(other, context=None)": ["logical_and", "decimal.logical_and(other, context=None)"], "decimal.logical_invert()": ["logical_invert"], "decimal.logical_invert(context=None)": ["logical_invert", "decimal.logical_invert(context=None)"], "decimal.logical_or(other)": ["logical_or"], "decimal.logical_or(other, context=None)": ["logical_or", "decimal.logical_or(other, context=None)"], "decimal.logical_xor(other)": ["logical_xor"], "decimal.max(other)": ["max"], "decimal.max(other, context=None)": ["max", "decimal.max(other, context=None)"], "decimal.max_mag(other)": ["max_mag"], "decimal.max_mag(other, context=None)": ["max_mag", "decimal.max_mag(other, context=None)"], "decimal.min(other)": ["min"], "decimal.min(other, context=None)": ["min", "decimal.min(other, context=None)"], "decimal.min_mag(other)": ["min_mag"], "decimal.min_mag(other, context=None)": ["min_mag", "decimal.min_mag(other, context=None)"], "decimal.next_plus()": ["next_plus"], "decimal.next_plus(context=None)": ["next_plus", "decimal.next_plus(context=None)"], "decimal.next_toward(other)": ["next_toward"], "decimal.next_toward(other, context=None)": ["next_toward", "decimal.next_toward(other, context=None)"], "decimal.normalize()": ["normalize"], "decimal.normalize(context=None)": ["normalize", "decimal.normalize(context=None)"], "decimal.number_class(context=None)": ["number_class", "decimal.number_class(context=None)"], "decimal.quantize(exp)": ["quantize"], "decimal.quantize(exp, context=None)": ["quantize", "decimal.quantize(exp, context=None)"], "decimal.quantize(exp, rounding=None)": ["quantize", "decimal.quantize(exp, rounding=None)"], "decimal.quantize(exp, rounding=None, context=None)": ["quantize", "decimal.quantize(exp, rounding=None, context=None)"], "decimal.radix()": ["radix"], "decimal.remainder_near(other)": ["remainder_near"], "decimal.remainder_near(other, context=None)": ["remainder_near", "decimal.remainder_near(other, context=None)"], "decimal.rotate(other)": ["rotate"], "decimal.same_quantum(other)": ["same_quantum"], "decimal.setcontext(c)": ["setcontext", "decimal.getcontext(c)", "decimal.get_qcontent(c)", "decimal.gettext(c)", "decimal.rc_context(c)", "decimal.dgettext(c)", "decimal._assert_warns_context(c)", "decimal.ngettext(c)", "decimal.lgettext(c)", "decimal.SetPointerType(c)", "decimal.localcontext(c)", "decimal.copy_context(c)", "decimal.context_diff(c)", "decimal.lngettext(c)", "decimal.get_ttext(c)"], "decimal.shift(other)": ["shift"], "decimal.sqrt()": ["sqrt"], "decimal.sqrt(context=None)": ["sqrt", "decimal.sqrt(context=None)"], "decimal.to_eng_string()": ["to_eng_string"], "decimal.to_eng_string(context=None)": ["to_eng_string", "decimal.to_eng_string(context=None)"], "decimal.to_integral()": ["to_integral"], "decimal.to_integral(rounding=None)": ["to_integral", "decimal.to_integral(rounding=None)"], "decimal.to_integral_exact()": ["to_integral_exact"], "decimal.to_integral_exact(context=None)": ["to_integral_exact", "decimal.to_integral_exact(context=None)"], "decimal.to_integral_exact(rounding=None)": ["to_integral_exact", "decimal.to_integral_exact(rounding=None)"], "decimal.to_integral_exact(rounding=None, context=None)": ["to_integral_exact", "decimal.to_integral_exact(rounding=None, context=None)"], "decimal.to_integral_value()": ["to_integral_value"], "decimal.to_integral_value(context=None)": ["to_integral_value", "decimal.to_integral_value(context=None)"], "decimal.to_integral_value(rounding=None)": ["to_integral_value", "decimal.to_integral_value(rounding=None)"], "decimal.to_integral_value(rounding=None, context=None)": ["to_integral_value", "decimal.to_integral_value(rounding=None, context=None)"], "defaultdict.__missing__(key)": ["__missing__"], "definition.__name__": ["definition.__name__"], "definition.__qualname__": ["definition.__qualname__"], "del d[key]": ["del d[key]"], "delattr(object, name)": ["delattr", "__getattr__(object, name)", "delay(object, name)", "getxattr(object, name)", "setxattr(object, name)", "listxattr(object, name)", "splitattr(object, name)", "delete(object, name)", "easter(object, name)", "det(object, name)", "flatten_dtype(object, name)", "loadtxt(object, name)", "lagtrim(object, name)", "delaxes(object, name)", "delitem(object, name)"], "deque.append(x)": ["append"], "deque.appendleft(x)": ["appendleft"], "deque.clear()": ["clear"], "deque.copy()": ["copy"], "deque.count(x)": ["count"], "deque.extend(iterable)": ["extend"], "deque.extendleft(iterable)": ["extendleft"], "deque.index(x)": ["index"], "deque.index(x, start)": ["index"], "deque.index(x, start, stop)": ["index"], "deque.insert(i, x)": ["insert"], "deque.maxlen": ["deque.maxlen"], "deque.pop()": ["pop"], "deque.popleft()": ["popleft"], "deque.remove(value)": ["remove"], "deque.reverse()": ["reverse"], "deque.rotate()": ["rotate"], "deque.rotate(n=1)": ["rotate", "deque.rotate(n='1')"], "devpoll.close()": ["close"], "devpoll.closed": ["devpoll.closed"], "devpoll.modify(fd)": ["modify"], "devpoll.modify(fd, eventmask)": ["modify"], "devpoll.poll()": ["poll"], "devpoll.register(fd)": ["register"], "devpoll.register(fd, eventmask)": ["register"], "devpoll.unregister(fd)": ["unregister"], "dialog.bitmap(name, x, y, width, height, text)": ["bitmap"], "dialog.checkbox(name, x, y, width, height, attributes, property, text, next_control)": ["checkbox"], "dialog.control(name, type, x, y, width, height, attributes, property, text, control_next, help)": ["control"], "dialog.line(name, x, y, width, height)": ["line"], "dialog.radiogroup(name, x, y, width, height, attributes, property, text, next_control)": ["radiogroup"], "dialog.text(name, x, y, width, height, attributes, text)": ["text"], "dict(**kwarg)": ["dict", "asdict(**kwarg)", "dist(**kwarg)", "is_dict(**kwarg)", "dirac_(**kwarg)", "dirac(**kwarg)", "cdist(**kwarg)", "distb(**kwarg)", "_dt_(**kwarg)", "disco(**kwarg)", "_splitdict(**kwarg)", "dsplit(**kwarg)", "digest(**kwarg)", "iat(**kwarg)", "__dir__(**kwarg)"], "dict(iterable, **kwarg)": ["dict", "asdict(iterable, **kwarg)", "dist(iterable, **kwarg)", "is_dict(iterable, **kwarg)", "dirac_(iterable, **kwarg)", "dirac(iterable, **kwarg)", "cdist(iterable, **kwarg)", "distb(iterable, **kwarg)", "_dt_(iterable, **kwarg)", "disco(iterable, **kwarg)", "_splitdict(iterable, **kwarg)", "dsplit(iterable, **kwarg)", "digest(iterable, **kwarg)", "iat(iterable, **kwarg)", "__dir__(iterable, **kwarg)"], "dict(mapping, **kwarg)": ["dict", "asdict(mapping, **kwarg)", "dist(mapping, **kwarg)", "is_dict(mapping, **kwarg)", "dirac_(mapping, **kwarg)", "dirac(mapping, **kwarg)", "cdist(mapping, **kwarg)", "distb(mapping, **kwarg)", "_dt_(mapping, **kwarg)", "disco(mapping, **kwarg)", "_splitdict(mapping, **kwarg)", "dsplit(mapping, **kwarg)", "digest(mapping, **kwarg)", "iat(mapping, **kwarg)", "__dir__(mapping, **kwarg)"], "dict.clear()": ["clear"], "dict.fromkeys(iterable)": ["fromkeys"], "dict.fromkeys(iterable, value)": ["fromkeys"], "dict.get(key)": ["get"], "dict.get(key, default)": ["get"], "dict.items()": ["items"], "dict.keys()": ["keys"], "dict.pop(key)": ["pop"], "dict.pop(key, default)": ["pop"], "dict.popitem()": ["popitem"], "dict.setdefault(key)": ["setdefault"], "dict.setdefault(key, default)": ["setdefault"], "dict.update()": ["update"], "dict.update(other)": ["update"], "dict.values()": ["values"], "differ.compare(a, b)": ["compare"], "difflib.Differ": ["difflib.Differ"], "difflib.Differ()": ["Differ"], "difflib.Differ(charjunk=None)": ["Differ", "difflib.Differ(charjunk=None)"], "difflib.Differ(linejunk=None)": ["Differ", "difflib.Differ(linejunk=None)"], "difflib.Differ(linejunk=None, charjunk=None)": ["Differ", "difflib.Differ(linejunk=None, charjunk=None)"], "difflib.HtmlDiff": ["difflib.HtmlDiff"], "difflib.IS_LINE_JUNK(line)": ["IS_LINE_JUNK", "difflib._find_lines(line)", "difflib.is_tuple(line)", "difflib._is_universal(line)", "difflib._is_sunder(line)", "difflib.isroutine(line)", "difflib.unique_id(line)", "difflib.isbuiltin(line)", "difflib._isunsized(line)", "difflib.unlink(line)", "difflib.islink(line)", "difflib._quantile_is_valid(line)", "difflib.isfunction(line)", "difflib._is_string_like(line)", "difflib.fuse_linear_bn(line)"], "difflib.SequenceMatcher": ["difflib.SequenceMatcher"], "difflib.SequenceMatcher()": ["SequenceMatcher"], "difflib.SequenceMatcher(a='')": ["SequenceMatcher", "difflib.SequenceMatcher(a=0)"], "difflib.SequenceMatcher(a='', autojunk=True)": ["SequenceMatcher", "difflib.SequenceMatcher(a='', autojunk=False)", "difflib.SequenceMatcher(a=0.0, autojunk=True)"], "difflib.SequenceMatcher(a='', b='')": ["SequenceMatcher", "difflib.SequenceMatcher(a=0.0, b=0)"], "difflib.SequenceMatcher(autojunk=True)": ["SequenceMatcher", "difflib.SequenceMatcher(autojunk=False)"], "difflib.SequenceMatcher(b='')": ["SequenceMatcher", "difflib.SequenceMatcher(b=0)"], "difflib.SequenceMatcher(isjunk=None, a='')": ["SequenceMatcher", "difflib.SequenceMatcher(isjunk=None, a='')", "difflib.SequenceMatcher(isjunk=None, a=0.0)"], "difflib.SequenceMatcher(isjunk=None, b='')": ["SequenceMatcher", "difflib.SequenceMatcher(isjunk=None, b='')", "difflib.SequenceMatcher(isjunk=None, b=0.0)"], "difflib.context_diff(a, b)": ["context_diff", "difflib.get_observer_dict(a, b)", "difflib.unified_diff(a, b)", "difflib.architecture(a, b)", "difflib.sparsify_labels(a, b)", "difflib.win32_ver(a, b)", "difflib.mac_ver(a, b)", "difflib.encode(a, b)", "difflib.register_archive_format(a, b)", "difflib.assert_equal(a, b)", "difflib.dist(a, b)", "difflib.rc_context(a, b)", "difflib._format_callback(a, b)", "difflib.assert_array_less(a, b)", "difflib.fromfile(a, b)"], "difflib.context_diff(a, b, fromfile='')": ["context_diff", "difflib.context_diff(a, b, fromfile=0.0)", "difflib.get_observer_dict(a, b, fromfile='')", "difflib.unified_diff(a, b, fromfile='')", "difflib.architecture(a, b, fromfile='')", "difflib.sparsify_labels(a, b, fromfile='')", "difflib.win32_ver(a, b, fromfile='')", "difflib.mac_ver(a, b, fromfile='')", "difflib.encode(a, b, fromfile='')", "difflib.register_archive_format(a, b, fromfile='')", "difflib.assert_equal(a, b, fromfile='')", "difflib.dist(a, b, fromfile='')", "difflib.rc_context(a, b, fromfile='')", "difflib._format_callback(a, b, fromfile='')", "difflib.assert_array_less(a, b, fromfile='')"], "difflib.context_diff(a, b, fromfile='', fromfiledate='')": ["context_diff", "difflib.context_diff(a, b, fromfile=0, fromfiledate=0.0)", "difflib.get_observer_dict(a, b, fromfile='', fromfiledate='')", "difflib.unified_diff(a, b, fromfile='', fromfiledate='')", "difflib.architecture(a, b, fromfile='', fromfiledate='')", "difflib.sparsify_labels(a, b, fromfile='', fromfiledate='')", "difflib.win32_ver(a, b, fromfile='', fromfiledate='')", "difflib.mac_ver(a, b, fromfile='', fromfiledate='')", "difflib.encode(a, b, fromfile='', fromfiledate='')", "difflib.register_archive_format(a, b, fromfile='', fromfiledate='')", "difflib.assert_equal(a, b, fromfile='', fromfiledate='')", "difflib.dist(a, b, fromfile='', fromfiledate='')", "difflib.rc_context(a, b, fromfile='', fromfiledate='')", "difflib._format_callback(a, b, fromfile='', fromfiledate='')", "difflib.assert_array_less(a, b, fromfile='', fromfiledate='')"], "difflib.context_diff(a, b, fromfile='', tofile='')": ["context_diff", "difflib.context_diff(a, b, fromfile=0.0, tofile=0.0)", "difflib.get_observer_dict(a, b, fromfile='', tofile='')", "difflib.unified_diff(a, b, fromfile='', tofile='')", "difflib.architecture(a, b, fromfile='', tofile='')", "difflib.sparsify_labels(a, b, fromfile='', tofile='')", "difflib.win32_ver(a, b, fromfile='', tofile='')", "difflib.mac_ver(a, b, fromfile='', tofile='')", "difflib.encode(a, b, fromfile='', tofile='')", "difflib.register_archive_format(a, b, fromfile='', tofile='')", "difflib.assert_equal(a, b, fromfile='', tofile='')", "difflib.dist(a, b, fromfile='', tofile='')", "difflib.rc_context(a, b, fromfile='', tofile='')", "difflib._format_callback(a, b, fromfile='', tofile='')", "difflib.assert_array_less(a, b, fromfile='', tofile='')"], "difflib.context_diff(a, b, fromfile='', tofiledate='')": ["context_diff", "difflib.context_diff(a, b, fromfile=0, tofiledate=0.0)", "difflib.get_observer_dict(a, b, fromfile='', tofiledate='')", "difflib.unified_diff(a, b, fromfile='', tofiledate='')", "difflib.architecture(a, b, fromfile='', tofiledate='')", "difflib.sparsify_labels(a, b, fromfile='', tofiledate='')", "difflib.win32_ver(a, b, fromfile='', tofiledate='')", "difflib.mac_ver(a, b, fromfile='', tofiledate='')", "difflib.encode(a, b, fromfile='', tofiledate='')", "difflib.register_archive_format(a, b, fromfile='', tofiledate='')", "difflib.assert_equal(a, b, fromfile='', tofiledate='')", "difflib.dist(a, b, fromfile='', tofiledate='')", "difflib.rc_context(a, b, fromfile='', tofiledate='')", "difflib._format_callback(a, b, fromfile='', tofiledate='')", "difflib.assert_array_less(a, b, fromfile='', tofiledate='')"], "difflib.context_diff(a, b, fromfiledate='')": ["context_diff", "difflib.context_diff(a, b, fromfiledate=0.0)", "difflib.get_observer_dict(a, b, fromfiledate='')", "difflib.unified_diff(a, b, fromfiledate='')", "difflib.architecture(a, b, fromfiledate='')", "difflib.sparsify_labels(a, b, fromfiledate='')", "difflib.win32_ver(a, b, fromfiledate='')", "difflib.mac_ver(a, b, fromfiledate='')", "difflib.encode(a, b, fromfiledate='')", "difflib.register_archive_format(a, b, fromfiledate='')", "difflib.assert_equal(a, b, fromfiledate='')", "difflib.dist(a, b, fromfiledate='')", "difflib.rc_context(a, b, fromfiledate='')", "difflib._format_callback(a, b, fromfiledate='')", "difflib.assert_array_less(a, b, fromfiledate='')"], "difflib.context_diff(a, b, lineterm='\\n')": ["context_diff", "difflib.context_diff(a, b, lineterm=1)", "difflib.get_observer_dict(a, b, lineterm='\\n')", "difflib.unified_diff(a, b, lineterm='\\n')", "difflib.architecture(a, b, lineterm='\\n')", "difflib.sparsify_labels(a, b, lineterm='\\n')", "difflib.win32_ver(a, b, lineterm='\\n')", "difflib.mac_ver(a, b, lineterm='\\n')", "difflib.encode(a, b, lineterm='\\n')", "difflib.register_archive_format(a, b, lineterm='\\n')", "difflib.assert_equal(a, b, lineterm='\\n')", "difflib.dist(a, b, lineterm='\\n')", "difflib.rc_context(a, b, lineterm='\\n')", "difflib._format_callback(a, b, lineterm='\\n')", "difflib.assert_array_less(a, b, lineterm='\\n')"], "difflib.context_diff(a, b, n=3)": ["context_diff", "difflib.context_diff(a, b, n='3')", "difflib.get_observer_dict(a, b, n=3)", "difflib.unified_diff(a, b, n=3)", "difflib.architecture(a, b, n=3)", "difflib.sparsify_labels(a, b, n=3)", "difflib.win32_ver(a, b, n=3)", "difflib.mac_ver(a, b, n=3)", "difflib.encode(a, b, n=3)", "difflib.register_archive_format(a, b, n=3)", "difflib.assert_equal(a, b, n=3)", "difflib.dist(a, b, n=3)", "difflib.rc_context(a, b, n=3)", "difflib._format_callback(a, b, n=3)", "difflib.assert_array_less(a, b, n=3)"], "difflib.context_diff(a, b, tofile='')": ["context_diff", "difflib.context_diff(a, b, tofile=0)", "difflib.get_observer_dict(a, b, tofile='')", "difflib.unified_diff(a, b, tofile='')", "difflib.architecture(a, b, tofile='')", "difflib.sparsify_labels(a, b, tofile='')", "difflib.win32_ver(a, b, tofile='')", "difflib.mac_ver(a, b, tofile='')", "difflib.encode(a, b, tofile='')", "difflib.register_archive_format(a, b, tofile='')", "difflib.assert_equal(a, b, tofile='')", "difflib.dist(a, b, tofile='')", "difflib.rc_context(a, b, tofile='')", "difflib._format_callback(a, b, tofile='')", "difflib.assert_array_less(a, b, tofile='')"], "difflib.context_diff(a, b, tofiledate='')": ["context_diff", "difflib.context_diff(a, b, tofiledate=0)", "difflib.get_observer_dict(a, b, tofiledate='')", "difflib.unified_diff(a, b, tofiledate='')", "difflib.architecture(a, b, tofiledate='')", "difflib.sparsify_labels(a, b, tofiledate='')", "difflib.win32_ver(a, b, tofiledate='')", "difflib.mac_ver(a, b, tofiledate='')", "difflib.encode(a, b, tofiledate='')", "difflib.register_archive_format(a, b, tofiledate='')", "difflib.assert_equal(a, b, tofiledate='')", "difflib.dist(a, b, tofiledate='')", "difflib.rc_context(a, b, tofiledate='')", "difflib._format_callback(a, b, tofiledate='')", "difflib.assert_array_less(a, b, tofiledate='')"], "difflib.diff_bytes(dfunc, a, b)": ["diff_bytes", "difflib.test_tiff(dfunc, a, b)", "difflib._read_bytes(dfunc, a, b)", "difflib.RAND_bytes(dfunc, a, b)", "difflib.to_bytes(dfunc, a, b)", "difflib.read_bytes4(dfunc, a, b)", "difflib.read_bytes8(dfunc, a, b)", "difflib.read_bytes1(dfunc, a, b)", "difflib.context_diff(dfunc, a, b)", "difflib._is_bytes_like(dfunc, a, b)", "difflib.ediff1d(dfunc, a, b)", "difflib._disassemble_bytes(dfunc, a, b)", "difflib.asbytes(dfunc, a, b)", "difflib._bits_of(dfunc, a, b)", "difflib._bytes_to_codes(dfunc, a, b)"], "difflib.diff_bytes(dfunc, a, b, fromfile=b'')": ["diff_bytes", "difflib.test_tiff(dfunc, a, b, fromfile=b'')", "difflib._read_bytes(dfunc, a, b, fromfile=b'')", "difflib.RAND_bytes(dfunc, a, b, fromfile=b'')", "difflib.to_bytes(dfunc, a, b, fromfile=b'')", "difflib.read_bytes4(dfunc, a, b, fromfile=b'')", "difflib.read_bytes8(dfunc, a, b, fromfile=b'')", "difflib.read_bytes1(dfunc, a, b, fromfile=b'')", "difflib.context_diff(dfunc, a, b, fromfile=b'')", "difflib._is_bytes_like(dfunc, a, b, fromfile=b'')", "difflib.ediff1d(dfunc, a, b, fromfile=b'')", "difflib._disassemble_bytes(dfunc, a, b, fromfile=b'')", "difflib.asbytes(dfunc, a, b, fromfile=b'')", "difflib._bits_of(dfunc, a, b, fromfile=b'')", "difflib._bytes_to_codes(dfunc, a, b, fromfile=b'')"], "difflib.diff_bytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')": ["diff_bytes", "difflib.test_tiff(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib._read_bytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib.RAND_bytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib.to_bytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib.read_bytes4(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib.read_bytes8(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib.read_bytes1(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib.context_diff(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib._is_bytes_like(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib.ediff1d(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib._disassemble_bytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib.asbytes(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib._bits_of(dfunc, a, b, fromfile=b'', fromfiledate=b'')", "difflib._bytes_to_codes(dfunc, a, b, fromfile=b'', fromfiledate=b'')"], "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'')": ["diff_bytes", "difflib.test_tiff(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib._read_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib.RAND_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib.to_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib.read_bytes4(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib.read_bytes8(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib.read_bytes1(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib.context_diff(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib._is_bytes_like(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib.ediff1d(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib._disassemble_bytes(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib.asbytes(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib._bits_of(dfunc, a, b, fromfile=b'', tofile=b'')", "difflib._bytes_to_codes(dfunc, a, b, fromfile=b'', tofile=b'')"], "difflib.diff_bytes(dfunc, a, b, fromfile=b'', tofiledate=b'')": ["diff_bytes", "difflib.test_tiff(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib._read_bytes(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib.RAND_bytes(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib.to_bytes(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib.read_bytes4(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib.read_bytes8(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib.read_bytes1(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib.context_diff(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib._is_bytes_like(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib.ediff1d(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib._disassemble_bytes(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib.asbytes(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib._bits_of(dfunc, a, b, fromfile=b'', tofiledate=b'')", "difflib._bytes_to_codes(dfunc, a, b, fromfile=b'', tofiledate=b'')"], "difflib.diff_bytes(dfunc, a, b, fromfiledate=b'')": ["diff_bytes", "difflib.test_tiff(dfunc, a, b, fromfiledate=b'')", "difflib._read_bytes(dfunc, a, b, fromfiledate=b'')", "difflib.RAND_bytes(dfunc, a, b, fromfiledate=b'')", "difflib.to_bytes(dfunc, a, b, fromfiledate=b'')", "difflib.read_bytes4(dfunc, a, b, fromfiledate=b'')", "difflib.read_bytes8(dfunc, a, b, fromfiledate=b'')", "difflib.read_bytes1(dfunc, a, b, fromfiledate=b'')", "difflib.context_diff(dfunc, a, b, fromfiledate=b'')", "difflib._is_bytes_like(dfunc, a, b, fromfiledate=b'')", "difflib.ediff1d(dfunc, a, b, fromfiledate=b'')", "difflib._disassemble_bytes(dfunc, a, b, fromfiledate=b'')", "difflib.asbytes(dfunc, a, b, fromfiledate=b'')", "difflib._bits_of(dfunc, a, b, fromfiledate=b'')", "difflib._bytes_to_codes(dfunc, a, b, fromfiledate=b'')"], "difflib.diff_bytes(dfunc, a, b, lineterm=b'\\n')": ["diff_bytes", "difflib.test_tiff(dfunc, a, b, lineterm=b'\\n')", "difflib._read_bytes(dfunc, a, b, lineterm=b'\\n')", "difflib.RAND_bytes(dfunc, a, b, lineterm=b'\\n')", "difflib.to_bytes(dfunc, a, b, lineterm=b'\\n')", "difflib.read_bytes4(dfunc, a, b, lineterm=b'\\n')", "difflib.read_bytes8(dfunc, a, b, lineterm=b'\\n')", "difflib.read_bytes1(dfunc, a, b, lineterm=b'\\n')", "difflib.context_diff(dfunc, a, b, lineterm=b'\\n')", "difflib._is_bytes_like(dfunc, a, b, lineterm=b'\\n')", "difflib.ediff1d(dfunc, a, b, lineterm=b'\\n')", "difflib._disassemble_bytes(dfunc, a, b, lineterm=b'\\n')", "difflib.asbytes(dfunc, a, b, lineterm=b'\\n')", "difflib._bits_of(dfunc, a, b, lineterm=b'\\n')", "difflib._bytes_to_codes(dfunc, a, b, lineterm=b'\\n')"], "difflib.diff_bytes(dfunc, a, b, n=3)": ["diff_bytes", "difflib.diff_bytes(dfunc, a, b, n='3')", "difflib.test_tiff(dfunc, a, b, n=3)", "difflib._read_bytes(dfunc, a, b, n=3)", "difflib.RAND_bytes(dfunc, a, b, n=3)", "difflib.to_bytes(dfunc, a, b, n=3)", "difflib.read_bytes4(dfunc, a, b, n=3)", "difflib.read_bytes8(dfunc, a, b, n=3)", "difflib.read_bytes1(dfunc, a, b, n=3)", "difflib.context_diff(dfunc, a, b, n=3)", "difflib._is_bytes_like(dfunc, a, b, n=3)", "difflib.ediff1d(dfunc, a, b, n=3)", "difflib._disassemble_bytes(dfunc, a, b, n=3)", "difflib.asbytes(dfunc, a, b, n=3)", "difflib._bits_of(dfunc, a, b, n=3)"], "difflib.diff_bytes(dfunc, a, b, tofile=b'')": ["diff_bytes", "difflib.test_tiff(dfunc, a, b, tofile=b'')", "difflib._read_bytes(dfunc, a, b, tofile=b'')", "difflib.RAND_bytes(dfunc, a, b, tofile=b'')", "difflib.to_bytes(dfunc, a, b, tofile=b'')", "difflib.read_bytes4(dfunc, a, b, tofile=b'')", "difflib.read_bytes8(dfunc, a, b, tofile=b'')", "difflib.read_bytes1(dfunc, a, b, tofile=b'')", "difflib.context_diff(dfunc, a, b, tofile=b'')", "difflib._is_bytes_like(dfunc, a, b, tofile=b'')", "difflib.ediff1d(dfunc, a, b, tofile=b'')", "difflib._disassemble_bytes(dfunc, a, b, tofile=b'')", "difflib.asbytes(dfunc, a, b, tofile=b'')", "difflib._bits_of(dfunc, a, b, tofile=b'')", "difflib._bytes_to_codes(dfunc, a, b, tofile=b'')"], "difflib.diff_bytes(dfunc, a, b, tofiledate=b'')": ["diff_bytes", "difflib.test_tiff(dfunc, a, b, tofiledate=b'')", "difflib._read_bytes(dfunc, a, b, tofiledate=b'')", "difflib.RAND_bytes(dfunc, a, b, tofiledate=b'')", "difflib.to_bytes(dfunc, a, b, tofiledate=b'')", "difflib.read_bytes4(dfunc, a, b, tofiledate=b'')", "difflib.read_bytes8(dfunc, a, b, tofiledate=b'')", "difflib.read_bytes1(dfunc, a, b, tofiledate=b'')", "difflib.context_diff(dfunc, a, b, tofiledate=b'')", "difflib._is_bytes_like(dfunc, a, b, tofiledate=b'')", "difflib.ediff1d(dfunc, a, b, tofiledate=b'')", "difflib._disassemble_bytes(dfunc, a, b, tofiledate=b'')", "difflib.asbytes(dfunc, a, b, tofiledate=b'')", "difflib._bits_of(dfunc, a, b, tofiledate=b'')", "difflib._bytes_to_codes(dfunc, a, b, tofiledate=b'')"], "difflib.get_close_matches(word, possibilities)": ["get_close_matches", "difflib.get_child_watcher(word, possibilities)", "difflib.get_file_path(word, possibilities)", "difflib.get_class_members(word, possibilities)", "difflib.set_child_watcher(word, possibilities)", "difflib.get_closure(word, possibilities)", "difflib.clear_traces(word, possibilities)", "difflib.get_file_path_2(word, possibilities)", "difflib.get_paths(word, possibilities)", "difflib.get_fuser_method(word, possibilities)", "difflib.get_console_size(word, possibilities)", "difflib._declstringlit_match(word, possibilities)", "difflib._allclose_dispatcher(word, possibilities)", "difflib.get_exec_path(word, possibilities)", "difflib.get_lzma_file(word, possibilities)"], "difflib.get_close_matches(word, possibilities, cutoff=0.6)": ["get_close_matches", "difflib.get_close_matches(word, possibilities, cutoff='0.6')", "difflib.get_child_watcher(word, possibilities, cutoff=0.6)", "difflib.get_file_path(word, possibilities, cutoff=0.6)", "difflib.get_class_members(word, possibilities, cutoff=0.6)", "difflib.set_child_watcher(word, possibilities, cutoff=0.6)", "difflib.get_closure(word, possibilities, cutoff=0.6)", "difflib.clear_traces(word, possibilities, cutoff=0.6)", "difflib.get_file_path_2(word, possibilities, cutoff=0.6)", "difflib.get_paths(word, possibilities, cutoff=0.6)", "difflib.get_fuser_method(word, possibilities, cutoff=0.6)", "difflib.get_console_size(word, possibilities, cutoff=0.6)", "difflib._declstringlit_match(word, possibilities, cutoff=0.6)", "difflib._allclose_dispatcher(word, possibilities, cutoff=0.6)", "difflib.get_exec_path(word, possibilities, cutoff=0.6)"], "difflib.get_close_matches(word, possibilities, n=3)": ["get_close_matches", "difflib.get_close_matches(word, possibilities, n='3')", "difflib.get_child_watcher(word, possibilities, n=3)", "difflib.get_file_path(word, possibilities, n=3)", "difflib.get_class_members(word, possibilities, n=3)", "difflib.set_child_watcher(word, possibilities, n=3)", "difflib.get_closure(word, possibilities, n=3)", "difflib.clear_traces(word, possibilities, n=3)", "difflib.get_file_path_2(word, possibilities, n=3)", "difflib.get_paths(word, possibilities, n=3)", "difflib.get_fuser_method(word, possibilities, n=3)", "difflib.get_console_size(word, possibilities, n=3)", "difflib._declstringlit_match(word, possibilities, n=3)", "difflib._allclose_dispatcher(word, possibilities, n=3)", "difflib.get_exec_path(word, possibilities, n=3)"], "difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)": ["get_close_matches", "difflib.get_close_matches(word, possibilities, n='3', cutoff='0.6')", "difflib.get_child_watcher(word, possibilities, n=3, cutoff=0.6)", "difflib.get_file_path(word, possibilities, n=3, cutoff=0.6)", "difflib.get_class_members(word, possibilities, n=3, cutoff=0.6)", "difflib.set_child_watcher(word, possibilities, n=3, cutoff=0.6)", "difflib.get_closure(word, possibilities, n=3, cutoff=0.6)", "difflib.clear_traces(word, possibilities, n=3, cutoff=0.6)", "difflib.get_file_path_2(word, possibilities, n=3, cutoff=0.6)", "difflib.get_paths(word, possibilities, n=3, cutoff=0.6)", "difflib.get_fuser_method(word, possibilities, n=3, cutoff=0.6)", "difflib.get_console_size(word, possibilities, n=3, cutoff=0.6)", "difflib._declstringlit_match(word, possibilities, n=3, cutoff=0.6)", "difflib._allclose_dispatcher(word, possibilities, n=3, cutoff=0.6)", "difflib.get_exec_path(word, possibilities, n=3, cutoff=0.6)"], "difflib.ndiff(a, b)": ["ndiff", "difflib.ediff1d(a, b)", "difflib.nulp_diff(a, b)", "difflib.dis(a, b)", "difflib.find(a, b)", "difflib.round(a, b)", "difflib.round_(a, b)", "difflib.mkdir(a, b)", "difflib.disco(a, b)", "difflib.encode(a, b)", "difflib.ondrag(a, b)", "difflib.indent(a, b)", "difflib.around(a, b)", "difflib.mkfifo(a, b)", "difflib.append(a, b)"], "difflib.ndiff(a, b, charjunk=IS_CHARACTER_JUNK)": ["ndiff", "difflib.ediff1d(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.nulp_diff(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.dis(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.find(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.round(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.round_(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.mkdir(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.disco(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.encode(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.ondrag(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.indent(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.around(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.mkfifo(a, b, charjunk=IS_CHARACTER_JUNK)", "difflib.append(a, b, charjunk=IS_CHARACTER_JUNK)"], "difflib.ndiff(a, b, linejunk=None)": ["ndiff", "difflib.ndiff(a, b, linejunk=None)", "difflib.ediff1d(a, b, linejunk=None)", "difflib.nulp_diff(a, b, linejunk=None)", "difflib.dis(a, b, linejunk=None)", "difflib.find(a, b, linejunk=None)", "difflib.round(a, b, linejunk=None)", "difflib.round_(a, b, linejunk=None)", "difflib.mkdir(a, b, linejunk=None)", "difflib.disco(a, b, linejunk=None)", "difflib.encode(a, b, linejunk=None)", "difflib.ondrag(a, b, linejunk=None)", "difflib.indent(a, b, linejunk=None)", "difflib.around(a, b, linejunk=None)", "difflib.mkfifo(a, b, linejunk=None)"], "difflib.ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)": ["ndiff", "difflib.ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.ediff1d(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.nulp_diff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.dis(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.find(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.round(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.round_(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.mkdir(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.disco(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.encode(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.ondrag(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.indent(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.around(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)", "difflib.mkfifo(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK)"], "difflib.restore(sequence, which)": ["restore", "difflib.resolve(sequence, which)", "difflib.testsource(sequence, which)", "difflib.resetscreen(sequence, which)", "difflib.register(sequence, which)", "difflib.reduce_storage(sequence, which)", "difflib.reset(sequence, which)", "difflib._register(sequence, which)", "difflib.resetlocale(sequence, which)", "difflib.getsource(sequence, which)", "difflib.rmtree(sequence, which)", "difflib.rstrip(sequence, which)", "difflib.stream(sequence, which)", "difflib.create(sequence, which)", "difflib.source(sequence, which)"], "difflib.unified_diff(a, b)": ["unified_diff", "difflib.context_diff(a, b)", "difflib.get_observer_dict(a, b)", "difflib.architecture(a, b)", "difflib.sparsify_labels(a, b)", "difflib.mac_ver(a, b)", "difflib.win32_ver(a, b)", "difflib.fromfile(a, b)", "difflib.libc_ver(a, b)", "difflib.register_archive_format(a, b)", "difflib._syscmd_ver(a, b)", "difflib.dist(a, b)", "difflib.encode(a, b)", "difflib._max_append(a, b)", "difflib.assert_equal(a, b)"], "difflib.unified_diff(a, b, fromfile='')": ["unified_diff", "difflib.unified_diff(a, b, fromfile=0)", "difflib.context_diff(a, b, fromfile='')", "difflib.get_observer_dict(a, b, fromfile='')", "difflib.architecture(a, b, fromfile='')", "difflib.sparsify_labels(a, b, fromfile='')", "difflib.mac_ver(a, b, fromfile='')", "difflib.win32_ver(a, b, fromfile='')", "difflib.fromfile(a, b, fromfile='')", "difflib.libc_ver(a, b, fromfile='')", "difflib.register_archive_format(a, b, fromfile='')", "difflib._syscmd_ver(a, b, fromfile='')", "difflib.dist(a, b, fromfile='')", "difflib.encode(a, b, fromfile='')", "difflib._max_append(a, b, fromfile='')"], "difflib.unified_diff(a, b, fromfile='', fromfiledate='')": ["unified_diff", "difflib.unified_diff(a, b, fromfile=0.0, fromfiledate=0)", "difflib.context_diff(a, b, fromfile='', fromfiledate='')", "difflib.get_observer_dict(a, b, fromfile='', fromfiledate='')", "difflib.architecture(a, b, fromfile='', fromfiledate='')", "difflib.sparsify_labels(a, b, fromfile='', fromfiledate='')", "difflib.mac_ver(a, b, fromfile='', fromfiledate='')", "difflib.win32_ver(a, b, fromfile='', fromfiledate='')", "difflib.fromfile(a, b, fromfile='', fromfiledate='')", "difflib.libc_ver(a, b, fromfile='', fromfiledate='')", "difflib.register_archive_format(a, b, fromfile='', fromfiledate='')", "difflib._syscmd_ver(a, b, fromfile='', fromfiledate='')", "difflib.dist(a, b, fromfile='', fromfiledate='')", "difflib.encode(a, b, fromfile='', fromfiledate='')", "difflib._max_append(a, b, fromfile='', fromfiledate='')"], "difflib.unified_diff(a, b, fromfile='', tofile='')": ["unified_diff", "difflib.unified_diff(a, b, fromfile=0.0, tofile=0.0)", "difflib.context_diff(a, b, fromfile='', tofile='')", "difflib.get_observer_dict(a, b, fromfile='', tofile='')", "difflib.architecture(a, b, fromfile='', tofile='')", "difflib.sparsify_labels(a, b, fromfile='', tofile='')", "difflib.mac_ver(a, b, fromfile='', tofile='')", "difflib.win32_ver(a, b, fromfile='', tofile='')", "difflib.fromfile(a, b, fromfile='', tofile='')", "difflib.libc_ver(a, b, fromfile='', tofile='')", "difflib.register_archive_format(a, b, fromfile='', tofile='')", "difflib._syscmd_ver(a, b, fromfile='', tofile='')", "difflib.dist(a, b, fromfile='', tofile='')", "difflib.encode(a, b, fromfile='', tofile='')", "difflib._max_append(a, b, fromfile='', tofile='')"], "difflib.unified_diff(a, b, lineterm='\\n')": ["unified_diff", "difflib.unified_diff(a, b, lineterm=1)", "difflib.context_diff(a, b, lineterm='\\n')", "difflib.get_observer_dict(a, b, lineterm='\\n')", "difflib.architecture(a, b, lineterm='\\n')", "difflib.sparsify_labels(a, b, lineterm='\\n')", "difflib.mac_ver(a, b, lineterm='\\n')", "difflib.win32_ver(a, b, lineterm='\\n')", "difflib.fromfile(a, b, lineterm='\\n')", "difflib.libc_ver(a, b, lineterm='\\n')", "difflib.register_archive_format(a, b, lineterm='\\n')", "difflib._syscmd_ver(a, b, lineterm='\\n')", "difflib.dist(a, b, lineterm='\\n')", "difflib.encode(a, b, lineterm='\\n')", "difflib._max_append(a, b, lineterm='\\n')"], "difflib.unified_diff(a, b, n=3)": ["unified_diff", "difflib.unified_diff(a, b, n='3')", "difflib.context_diff(a, b, n=3)", "difflib.get_observer_dict(a, b, n=3)", "difflib.architecture(a, b, n=3)", "difflib.sparsify_labels(a, b, n=3)", "difflib.mac_ver(a, b, n=3)", "difflib.win32_ver(a, b, n=3)", "difflib.fromfile(a, b, n=3)", "difflib.libc_ver(a, b, n=3)", "difflib.register_archive_format(a, b, n=3)", "difflib._syscmd_ver(a, b, n=3)", "difflib.dist(a, b, n=3)", "difflib.encode(a, b, n=3)", "difflib._max_append(a, b, n=3)"], "difflib.unified_diff(a, b, tofile='')": ["unified_diff", "difflib.unified_diff(a, b, tofile=0)", "difflib.context_diff(a, b, tofile='')", "difflib.get_observer_dict(a, b, tofile='')", "difflib.architecture(a, b, tofile='')", "difflib.sparsify_labels(a, b, tofile='')", "difflib.mac_ver(a, b, tofile='')", "difflib.win32_ver(a, b, tofile='')", "difflib.fromfile(a, b, tofile='')", "difflib.libc_ver(a, b, tofile='')", "difflib.register_archive_format(a, b, tofile='')", "difflib._syscmd_ver(a, b, tofile='')", "difflib.dist(a, b, tofile='')", "difflib.encode(a, b, tofile='')", "difflib._max_append(a, b, tofile='')"], "dir()": ["dir", "__dir__()", "rmdir()", "dirac_()", "dirac()", "isdir()", "chdir()", "mkdir()", "fchdir()", "dis()", "__ior__()", "ior()", "_div()", "scandir()", "set_dir()"], "dir(object)": ["dir", "__dir__(object)", "rmdir(object)", "dirac_(object)", "dirac(object)", "isdir(object)", "chdir(object)", "mkdir(object)", "fchdir(object)", "dis(object)", "__ior__(object)", "ior(object)", "_div(object)", "scandir(object)", "set_dir(object)"], "dir_entry.is_dir()": ["is_dir"], "dir_entry.is_dir(follow_symlinks=True)": ["is_dir", "dir_entry.is_dir(follow_symlinks=False)"], "dir_entry.is_file()": ["is_file"], "dir_entry.is_file(follow_symlinks=True)": ["is_file", "dir_entry.is_file(follow_symlinks=False)"], "dir_entry.is_symlink()": ["is_symlink"], "dir_entry.path": ["dir_entry.path"], "dir_entry.stat(follow_symlinks=True)": ["stat", "dir_entry.stat(follow_symlinks=False)"], "dircmp.common": ["dircmp.common"], "dircmp.common_dirs": ["dircmp.common_dirs"], "dircmp.common_files": ["dircmp.common_files"], "dircmp.diff_files": ["dircmp.diff_files"], "dircmp.funny_files": ["dircmp.funny_files"], "dircmp.left_list": ["dircmp.left_list"], "dircmp.left_only": ["dircmp.left_only"], "dircmp.report()": ["report"], "dircmp.report_full_closure()": ["report_full_closure"], "dircmp.report_partial_closure()": ["report_partial_closure"], "dircmp.right_list": ["dircmp.right_list"], "dircmp.right_only": ["dircmp.right_only"], "dircmp.same_files": ["dircmp.same_files"], "dircmp.subdirs": ["dircmp.subdirs"], "directory.add_file(file)": ["add_file"], "directory.add_file(file, language=None)": ["add_file", "directory.add_file(file, language=None)"], "directory.add_file(file, src=None)": ["add_file", "directory.add_file(file, src=None)"], "directory.add_file(file, src=None, language=None)": ["add_file", "directory.add_file(file, src=None, language=None)"], "directory.add_file(file, src=None, version=None, language=None)": ["add_file", "directory.add_file(file, src=None, version=None, language=None)"], "directory.glob(pattern)": ["glob"], "directory.glob(pattern, exclude=None)": ["glob", "directory.glob(pattern, exclude=None)"], "directory.remove_pyc()": ["remove_pyc"], "directory.start_component(component=None)": ["start_component", "directory.start_component(component=None)"], "directory.start_component(component=None, feature=None)": ["start_component", "directory.start_component(component=None, feature=None)"], "directory.start_component(component=None, uuid=None)": ["start_component", "directory.start_component(component=None, uuid=None)"], "directory.start_component(feature=None)": ["start_component", "directory.start_component(feature=None)"], "directory.start_component(keyfile=None)": ["start_component", "directory.start_component(keyfile=None)"], "directory.start_component(uuid=None)": ["start_component", "directory.start_component(uuid=None)"], "dis.Bytecode(x)": ["Bytecode"], "dis.Bytecode(x, current_offset=None)": ["Bytecode", "dis.Bytecode(x, current_offset=None)"], "dis.Bytecode(x, first_line=None)": ["Bytecode", "dis.Bytecode(x, first_line=None)"], "dis.Instruction": ["dis.Instruction"], "dis.cmp_op": ["dis.cmp_op"], "dis.dis(depth=None)": ["dis", "dis.dis(depth=None)", "dis.distb(depth=None)", "dis.delaxes(depth=None)", "dis.scandir(depth=None)", "dis.listdir(depth=None)", "dis.textdomain(depth=None)", "dis.stack_size(depth=None)", "dis.init(depth=None)", "dis.main(depth=None)", "dis._main(depth=None)", "dis.mode(depth=None)", "dis.show(depth=None)", "dis.test(depth=None)", "dis.random_state(depth=None)"], "dis.dis(file=None, depth=None)": ["dis", "dis.dis(file=None, depth=None)", "dis.distb(file=None, depth=None)", "dis.delaxes(file=None, depth=None)", "dis.scandir(file=None, depth=None)", "dis.listdir(file=None, depth=None)", "dis.textdomain(file=None, depth=None)", "dis.stack_size(file=None, depth=None)", "dis.init(file=None, depth=None)", "dis.main(file=None, depth=None)", "dis._main(file=None, depth=None)", "dis.mode(file=None, depth=None)", "dis.show(file=None, depth=None)", "dis.test(file=None, depth=None)", "dis.random_state(file=None, depth=None)"], "dis.dis(x=None)": ["dis", "dis.dis(x=None)", "dis.distb(x=None)", "dis.delaxes(x=None)", "dis.scandir(x=None)", "dis.listdir(x=None)", "dis.textdomain(x=None)", "dis.stack_size(x=None)", "dis.init(x=None)", "dis.main(x=None)", "dis._main(x=None)", "dis.mode(x=None)", "dis.show(x=None)", "dis.test(x=None)", "dis.random_state(x=None)"], "dis.dis(x=None, depth=None)": ["dis", "dis.dis(x=None, depth=None)", "dis.distb(x=None, depth=None)", "dis.delaxes(x=None, depth=None)", "dis.scandir(x=None, depth=None)", "dis.listdir(x=None, depth=None)", "dis.textdomain(x=None, depth=None)", "dis.stack_size(x=None, depth=None)", "dis.init(x=None, depth=None)", "dis.main(x=None, depth=None)", "dis._main(x=None, depth=None)", "dis.mode(x=None, depth=None)", "dis.show(x=None, depth=None)", "dis.test(x=None, depth=None)", "dis.random_state(x=None, depth=None)"], "dis.dis(x=None, file=None)": ["dis", "dis.dis(x=None, file=None)", "dis.distb(x=None, file=None)", "dis.delaxes(x=None, file=None)", "dis.scandir(x=None, file=None)", "dis.listdir(x=None, file=None)", "dis.textdomain(x=None, file=None)", "dis.stack_size(x=None, file=None)", "dis.init(x=None, file=None)", "dis.main(x=None, file=None)", "dis._main(x=None, file=None)", "dis.mode(x=None, file=None)", "dis.show(x=None, file=None)", "dis.test(x=None, file=None)", "dis.random_state(x=None, file=None)"], "dis.dis(x=None, file=None, depth=None)": ["dis", "dis.dis(x=None, file=None, depth=None)", "dis.distb(x=None, file=None, depth=None)", "dis.delaxes(x=None, file=None, depth=None)", "dis.scandir(x=None, file=None, depth=None)", "dis.listdir(x=None, file=None, depth=None)", "dis.textdomain(x=None, file=None, depth=None)", "dis.stack_size(x=None, file=None, depth=None)", "dis.init(x=None, file=None, depth=None)", "dis.main(x=None, file=None, depth=None)", "dis._main(x=None, file=None, depth=None)", "dis.mode(x=None, file=None, depth=None)", "dis.show(x=None, file=None, depth=None)", "dis.test(x=None, file=None, depth=None)", "dis.random_state(x=None, file=None, depth=None)"], "dis.disassemble(code)": ["disassemble", "dis._disassemble_bytes(code)", "dis._parse(code)", "dis.disco(code)", "dis.localtime(code)", "dis._all_gather(code)", "dis.string_at(code)", "dis.wstring_at(code)", "dis.splitnport(code)", "dis._disassemble_recursive(code)", "dis.load_dynamic(code)", "dis.NamedTemporaryFile(code)", "dis.TemporaryFile(code)", "dis.load_source(code)", "dis.print_stack(code)"], "dis.disassemble(code, lasti=-1)": ["disassemble", "dis.disassemble(code, lasti=(- '1'))", "dis._disassemble_bytes(code, lasti=(- 1))", "dis._parse(code, lasti=(- 1))", "dis.disco(code, lasti=(- 1))", "dis.localtime(code, lasti=(- 1))", "dis._all_gather(code, lasti=(- 1))", "dis.string_at(code, lasti=(- 1))", "dis.wstring_at(code, lasti=(- 1))", "dis.splitnport(code, lasti=(- 1))", "dis._disassemble_recursive(code, lasti=(- 1))", "dis.load_dynamic(code, lasti=(- 1))", "dis.NamedTemporaryFile(code, lasti=(- 1))", "dis.TemporaryFile(code, lasti=(- 1))", "dis.load_source(code, lasti=(- 1))"], "dis.disassemble(code, lasti=-1, file=None)": ["disassemble", "dis.disassemble(code, lasti=(- 1), file=None)", "dis.disassemble(code, lasti=(- '1'), file=None)", "dis._disassemble_bytes(code, lasti=(- 1), file=None)", "dis._parse(code, lasti=(- 1), file=None)", "dis.disco(code, lasti=(- 1), file=None)", "dis.localtime(code, lasti=(- 1), file=None)", "dis._all_gather(code, lasti=(- 1), file=None)", "dis.string_at(code, lasti=(- 1), file=None)", "dis.wstring_at(code, lasti=(- 1), file=None)", "dis.splitnport(code, lasti=(- 1), file=None)", "dis._disassemble_recursive(code, lasti=(- 1), file=None)", "dis.load_dynamic(code, lasti=(- 1), file=None)", "dis.NamedTemporaryFile(code, lasti=(- 1), file=None)", "dis.TemporaryFile(code, lasti=(- 1), file=None)"], "dis.disco(code)": ["disco", "dis.disassemble(code)", "dis.splitnport(code)", "dis._parse(code)", "dis.localtime(code)", "dis.string_at(code)", "dis.load_dynamic(code)", "dis.wstring_at(code)", "dis.sort(code)", "dis.dis(code)", "dis.load_source(code)", "dis.print_stack(code)", "dis._all_gather(code)", "dis.argsort(code)", "dis._disassemble_bytes(code)"], "dis.disco(code, lasti=-1)": ["disco", "dis.disco(code, lasti=(- '1'))", "dis.disassemble(code, lasti=(- 1))", "dis.splitnport(code, lasti=(- 1))", "dis._parse(code, lasti=(- 1))", "dis.localtime(code, lasti=(- 1))", "dis.string_at(code, lasti=(- 1))", "dis.load_dynamic(code, lasti=(- 1))", "dis.wstring_at(code, lasti=(- 1))", "dis.sort(code, lasti=(- 1))", "dis.dis(code, lasti=(- 1))", "dis.load_source(code, lasti=(- 1))", "dis.print_stack(code, lasti=(- 1))", "dis._all_gather(code, lasti=(- 1))", "dis.argsort(code, lasti=(- 1))"], "dis.disco(code, lasti=-1, file=None)": ["disco", "dis.disco(code, lasti=(- 1), file=None)", "dis.disco(code, lasti=(- '1'), file=None)", "dis.disassemble(code, lasti=(- 1), file=None)", "dis.splitnport(code, lasti=(- 1), file=None)", "dis._parse(code, lasti=(- 1), file=None)", "dis.localtime(code, lasti=(- 1), file=None)", "dis.string_at(code, lasti=(- 1), file=None)", "dis.load_dynamic(code, lasti=(- 1), file=None)", "dis.wstring_at(code, lasti=(- 1), file=None)", "dis.sort(code, lasti=(- 1), file=None)", "dis.dis(code, lasti=(- 1), file=None)", "dis.load_source(code, lasti=(- 1), file=None)", "dis.print_stack(code, lasti=(- 1), file=None)", "dis._all_gather(code, lasti=(- 1), file=None)"], "dis.distb()": ["distb", "dis.dis()", "dis.listdir()", "dis.init()", "dis.test()", "dis.width()", "dis.stack_size()", "dis.random_state()", "dis.delaxes()", "dis.scandir()", "dis.exit_dual_level()", "dis.set_trace()", "dis.print_exc()", "dis.tiltangle()", "dis.textdomain()"], "dis.distb(file=None)": ["distb", "dis.distb(file=None)", "dis.dis(file=None)", "dis.listdir(file=None)", "dis.init(file=None)", "dis.test(file=None)", "dis.width(file=None)", "dis.stack_size(file=None)", "dis.random_state(file=None)", "dis.delaxes(file=None)", "dis.scandir(file=None)", "dis.exit_dual_level(file=None)", "dis.set_trace(file=None)", "dis.print_exc(file=None)", "dis.tiltangle(file=None)"], "dis.distb(tb=None)": ["distb", "dis.distb(tb=None)", "dis.dis(tb=None)", "dis.listdir(tb=None)", "dis.init(tb=None)", "dis.test(tb=None)", "dis.width(tb=None)", "dis.stack_size(tb=None)", "dis.random_state(tb=None)", "dis.delaxes(tb=None)", "dis.scandir(tb=None)", "dis.exit_dual_level(tb=None)", "dis.set_trace(tb=None)", "dis.print_exc(tb=None)", "dis.tiltangle(tb=None)"], "dis.distb(tb=None, file=None)": ["distb", "dis.distb(tb=None, file=None)", "dis.dis(tb=None, file=None)", "dis.listdir(tb=None, file=None)", "dis.init(tb=None, file=None)", "dis.test(tb=None, file=None)", "dis.width(tb=None, file=None)", "dis.stack_size(tb=None, file=None)", "dis.random_state(tb=None, file=None)", "dis.delaxes(tb=None, file=None)", "dis.scandir(tb=None, file=None)", "dis.exit_dual_level(tb=None, file=None)", "dis.set_trace(tb=None, file=None)", "dis.print_exc(tb=None, file=None)", "dis.tiltangle(tb=None, file=None)"], "dis.findlabels(code)": ["findlabels", "dis._findclass(code)", "dis.findall(code)", "dis._find_lines(code)", "dis.get_figlabels(code)", "dis.is_final(code)", "dis.find_loader(code)", "dis.label(code)", "dis.final(code)", "dis._fix_names(code)", "dis._find_lteq(code)", "dis.clabel(code)", "dis.fields(code)", "dis.ylabel(code)", "dis.xlabel(code)"], "dis.findlinestarts(code)": ["findlinestarts", "dis._find_lines(code)", "dis.findTestCases(code)", "dis.finditer(code)", "dis.tril_indices(code)", "dis.triu_indices(code)", "dis._find_strings(code)", "dis.mask_indices(code)", "dis._find_tensors(code)", "dis._findclass(code)", "dis._find_mime_parameters(code)", "dis._fill_in_zeros(code)", "dis.findlabels(code)", "dis.triu_indices_from(code)", "dis.tril_indices_from(code)"], "dis.get_instructions(x)": ["get_instructions", "dis._get_instructions_bytes(x)", "dis.get_python_inc(x)", "dis.ProcessingInstruction(x)", "dis._find_strings(x)", "dis.get_type_hints(x)", "dis.translation(x)", "dis.setposition(x)", "dis.array_function_dispatch(x)", "dis.tostring(x)", "dis.tostringlist(x)", "dis.interact(x)", "dis.set_printoptions(x)", "dis.getlines(x)", "dis.array_function_from_dispatcher(x)"], "dis.hascompare": ["dis.hascompare"], "dis.hasfree": ["dis.hasfree"], "dis.hasjabs": ["dis.hasjabs"], "dis.hasjrel": ["dis.hasjrel"], "dis.haslocal": ["dis.haslocal"], "dis.hasname": ["dis.hasname"], "dis.opmap": ["dis.opmap"], "dis.opname": ["dis.opname"], "dis.show_code(x)": ["show_code", "dis.dis(x)", "dis.distb(x)", "dis._disassemble_recursive(x)", "dis.create_dynamic(x)", "dis.print_exc(x)", "dis.hook_encoded(x)", "dis._show(x)", "dis.print_list(x)", "dis.print_last(x)", "dis._code_dispatcher(x)", "dis.chown(x)", "dis.escape_encode(x)", "dis.escape_decode(x)", "dis.encode(x)"], "dis.show_code(x, file=None)": ["show_code", "dis.show_code(x, file=None)", "dis.dis(x, file=None)", "dis.distb(x, file=None)", "dis._disassemble_recursive(x, file=None)", "dis.create_dynamic(x, file=None)", "dis.print_exc(x, file=None)", "dis.hook_encoded(x, file=None)", "dis._show(x, file=None)", "dis.print_list(x, file=None)", "dis.print_last(x, file=None)", "dis._code_dispatcher(x, file=None)", "dis.chown(x, file=None)", "dis.escape_encode(x, file=None)", "dis.escape_decode(x, file=None)"], "dis.stack_effect(opcode)": ["stack_effect", "dis.extract_stack(opcode)", "dis.format_stack(opcode)", "dis.print_stack(opcode)", "dis._stack_dispatcher(opcode)", "dis.c_buffer(opcode)", "dis.start_server(opcode)", "dis.create_string_buffer(opcode)", "dis.fftshift(opcode)", "dis.ifftshift(opcode)", "dis._raw_fftnd(opcode)", "dis.hist_frame(opcode)", "dis.get_buffer(opcode)", "dis.extract_tb(opcode)", "dis.notmasked_edges(opcode)"], "dis.stack_effect(opcode, oparg)": ["stack_effect", "dis.extract_stack(opcode, oparg)", "dis.format_stack(opcode, oparg)", "dis.print_stack(opcode, oparg)", "dis._stack_dispatcher(opcode, oparg)", "dis.c_buffer(opcode, oparg)", "dis.start_server(opcode, oparg)", "dis.create_string_buffer(opcode, oparg)", "dis.fftshift(opcode, oparg)", "dis.ifftshift(opcode, oparg)", "dis._raw_fftnd(opcode, oparg)", "dis.hist_frame(opcode, oparg)", "dis.get_buffer(opcode, oparg)", "dis.extract_tb(opcode, oparg)", "dis.notmasked_edges(opcode, oparg)"], "dispatcher.accept()": ["accept"], "dispatcher.bind(address)": ["bind"], "dispatcher.close()": ["close"], "dispatcher.connect(address)": ["connect"], "dispatcher.create_socket()": ["create_socket"], "dispatcher.create_socket(family=socket.AF_INET)": ["create_socket"], "dispatcher.create_socket(family=socket.AF_INET, type=socket.SOCK_STREAM)": ["create_socket"], "dispatcher.create_socket(type=socket.SOCK_STREAM)": ["create_socket"], "dispatcher.handle_accept()": ["handle_accept"], "dispatcher.handle_accepted(sock, addr)": ["handle_accepted"], "dispatcher.handle_connect()": ["handle_connect"], "dispatcher.handle_expt()": ["handle_expt"], "dispatcher.handle_read()": ["handle_read"], "dispatcher.listen(backlog)": ["listen"], "dispatcher.readable()": ["readable"], "dispatcher.recv(buffer_size)": ["recv"], "dispatcher.send(data)": ["send"], "dispatcher.writable()": ["writable"], "divmod(a, b)": ["divmod", "rdivmod(a, b)", "imod(a, b)", "__imod__(a, b)", "mod(a, b)", "__mod__(a, b)", "_div(a, b)", "sigmoid(a, b)", "ndim(a, b)", "rdiv(a, b)", "_ndim(a, b)", "rmod(a, b)", "mode(a, b)", "demo(a, b)", "hardsigmoid(a, b)"], "doc_test.docstring": ["doc_test.docstring"], "doc_test.examples": ["doc_test.examples"], "doc_test.globs": ["doc_test.globs"], "doc_test.lineno": ["doc_test.lineno"], "doc_test_finder.find(obj)": ["find"], "doc_test_finder.find(obj, name)": ["find"], "doc_test_finder.find(obj, name, module)": ["find"], "doc_test_finder.find(obj, name, module, globs)": ["find"], "doc_test_finder.find(obj, name, module, globs, extraglobs)": ["find"], "doc_test_parser.get_doctest(string, globs, name, filename, lineno)": ["get_doctest"], "doc_test_parser.get_examples(string)": ["get_examples"], "doc_test_parser.get_examples(string, name='<string>')": ["get_examples", "doc_test_parser.get_examples(string, name=8)"], "doc_test_parser.parse(string)": ["parse"], "doc_test_parser.parse(string, name='<string>')": ["parse", "doc_test_parser.parse(string, name=8.0)"], "doc_test_runner.report_failure(out, test, example, got)": ["report_failure"], "doc_test_runner.report_start(out, test, example)": ["report_start"], "doc_test_runner.report_success(out, test, example, got)": ["report_success"], "doc_test_runner.report_unexpected_exception(out, test, example, exc_info)": ["report_unexpected_exception"], "doc_test_runner.run(test)": ["run"], "doc_test_runner.run(test, clear_globs=True)": ["run", "doc_test_runner.run(test, clear_globs=False)"], "doc_test_runner.run(test, compileflags=None)": ["run", "doc_test_runner.run(test, compileflags=None)"], "doc_test_runner.run(test, compileflags=None, clear_globs=True)": ["run", "doc_test_runner.run(test, compileflags=None, clear_globs=False)"], "doc_test_runner.run(test, compileflags=None, out=None)": ["run", "doc_test_runner.run(test, compileflags=None, out=None)"], "doc_test_runner.run(test, out=None)": ["run", "doc_test_runner.run(test, out=None)"], "doc_test_runner.run(test, out=None, clear_globs=True)": ["run", "doc_test_runner.run(test, out=None, clear_globs=False)"], "doc_test_runner.summarize()": ["summarize"], "doc_test_runner.summarize(verbose=None)": ["summarize", "doc_test_runner.summarize(verbose=None)"], "doctest.COMPARISON_FLAGS": ["doctest.COMPARISON_FLAGS"], "doctest.DONT_ACCEPT_BLANKLINE": ["doctest.DONT_ACCEPT_BLANKLINE"], "doctest.DONT_ACCEPT_TRUE_FOR_1": ["doctest.DONT_ACCEPT_TRUE_FOR_1"], "doctest.DebugRunner()": ["DebugRunner"], "doctest.DebugRunner(checker=None, optionflags=0)": ["DebugRunner", "doctest.DebugRunner(checker=None, optionflags=0)", "doctest.DebugRunner(checker=None, optionflags='0')"], "doctest.DebugRunner(checker=None, verbose=None)": ["DebugRunner", "doctest.DebugRunner(checker=None, verbose=None)"], "doctest.DebugRunner(checker=None, verbose=None, optionflags=0)": ["DebugRunner", "doctest.DebugRunner(checker=None, verbose=None, optionflags=0)", "doctest.DebugRunner(checker=None, verbose=None, optionflags='0')"], "doctest.DebugRunner(optionflags=0)": ["DebugRunner", "doctest.DebugRunner(optionflags='0')"], "doctest.DebugRunner(verbose=None)": ["DebugRunner", "doctest.DebugRunner(verbose=None)"], "doctest.DocFileSuite(*paths)": ["DocFileSuite", "doctest.DocFileTest(*paths)", "doctest.DocTestSuite(*paths)", "doctest.write_file(*paths)", "doctest.iter_fields(*paths)", "doctest._iter_filter(*paths)", "doctest.cmpfiles(*paths)", "doctest._turtle_docrevise(*paths)", "doctest.makeSuite(*paths)", "doctest.run_module_suite(*paths)", "doctest.filter(*paths)", "doctest._filter(*paths)", "doctest.digest(*paths)", "doctest.delete(*paths)", "doctest.set_locale(*paths)"], "doctest.DocFileSuite(*paths, encoding=None)": ["DocFileSuite", "doctest.DocFileSuite(*paths, encoding=None)", "doctest.DocFileTest(*paths, encoding=None)", "doctest.DocTestSuite(*paths, encoding=None)", "doctest.write_file(*paths, encoding=None)", "doctest.iter_fields(*paths, encoding=None)", "doctest._iter_filter(*paths, encoding=None)", "doctest.cmpfiles(*paths, encoding=None)", "doctest._turtle_docrevise(*paths, encoding=None)", "doctest.makeSuite(*paths, encoding=None)", "doctest.run_module_suite(*paths, encoding=None)", "doctest.filter(*paths, encoding=None)", "doctest._filter(*paths, encoding=None)", "doctest.digest(*paths, encoding=None)", "doctest.delete(*paths, encoding=None)"], "doctest.DocFileSuite(*paths, globs=None)": ["DocFileSuite", "doctest.DocFileSuite(*paths, globs=None)", "doctest.DocFileTest(*paths, globs=None)", "doctest.DocTestSuite(*paths, globs=None)", "doctest.write_file(*paths, globs=None)", "doctest.iter_fields(*paths, globs=None)", "doctest._iter_filter(*paths, globs=None)", "doctest.cmpfiles(*paths, globs=None)", "doctest._turtle_docrevise(*paths, globs=None)", "doctest.makeSuite(*paths, globs=None)", "doctest.run_module_suite(*paths, globs=None)", "doctest.filter(*paths, globs=None)", "doctest._filter(*paths, globs=None)", "doctest.digest(*paths, globs=None)", "doctest.delete(*paths, globs=None)"], "doctest.DocFileSuite(*paths, module_relative=True)": ["DocFileSuite", "doctest.DocFileSuite(*paths, module_relative=False)", "doctest.DocFileTest(*paths, module_relative=True)", "doctest.DocTestSuite(*paths, module_relative=True)", "doctest.write_file(*paths, module_relative=True)", "doctest.iter_fields(*paths, module_relative=True)", "doctest._iter_filter(*paths, module_relative=True)", "doctest.cmpfiles(*paths, module_relative=True)", "doctest._turtle_docrevise(*paths, module_relative=True)", "doctest.makeSuite(*paths, module_relative=True)", "doctest.run_module_suite(*paths, module_relative=True)", "doctest.filter(*paths, module_relative=True)", "doctest._filter(*paths, module_relative=True)", "doctest.digest(*paths, module_relative=True)", "doctest.delete(*paths, module_relative=True)"], "doctest.DocFileSuite(*paths, module_relative=True, package=None)": ["DocFileSuite", "doctest.DocFileSuite(*paths, module_relative=False, package=None)", "doctest.DocFileTest(*paths, module_relative=True, package=None)", "doctest.DocTestSuite(*paths, module_relative=True, package=None)", "doctest.write_file(*paths, module_relative=True, package=None)", "doctest.iter_fields(*paths, module_relative=True, package=None)", "doctest._iter_filter(*paths, module_relative=True, package=None)", "doctest.cmpfiles(*paths, module_relative=True, package=None)", "doctest._turtle_docrevise(*paths, module_relative=True, package=None)", "doctest.makeSuite(*paths, module_relative=True, package=None)", "doctest.run_module_suite(*paths, module_relative=True, package=None)", "doctest.filter(*paths, module_relative=True, package=None)", "doctest._filter(*paths, module_relative=True, package=None)", "doctest.digest(*paths, module_relative=True, package=None)", "doctest.delete(*paths, module_relative=True, package=None)"], "doctest.DocFileSuite(*paths, optionflags=0)": ["DocFileSuite", "doctest.DocFileSuite(*paths, optionflags='0')", "doctest.DocFileTest(*paths, optionflags=0)", "doctest.DocTestSuite(*paths, optionflags=0)", "doctest.write_file(*paths, optionflags=0)", "doctest.iter_fields(*paths, optionflags=0)", "doctest._iter_filter(*paths, optionflags=0)", "doctest.cmpfiles(*paths, optionflags=0)", "doctest._turtle_docrevise(*paths, optionflags=0)", "doctest.makeSuite(*paths, optionflags=0)", "doctest.run_module_suite(*paths, optionflags=0)", "doctest.filter(*paths, optionflags=0)", "doctest._filter(*paths, optionflags=0)", "doctest.digest(*paths, optionflags=0)", "doctest.delete(*paths, optionflags=0)"], "doctest.DocFileSuite(*paths, package=None)": ["DocFileSuite", "doctest.DocFileSuite(*paths, package=None)", "doctest.DocFileTest(*paths, package=None)", "doctest.DocTestSuite(*paths, package=None)", "doctest.write_file(*paths, package=None)", "doctest.iter_fields(*paths, package=None)", "doctest._iter_filter(*paths, package=None)", "doctest.cmpfiles(*paths, package=None)", "doctest._turtle_docrevise(*paths, package=None)", "doctest.makeSuite(*paths, package=None)", "doctest.run_module_suite(*paths, package=None)", "doctest.filter(*paths, package=None)", "doctest._filter(*paths, package=None)", "doctest.digest(*paths, package=None)", "doctest.delete(*paths, package=None)"], "doctest.DocFileSuite(*paths, parser=DocTestParser())": ["DocFileSuite", "doctest.DocFileTest(*paths, parser=DocTestParser())", "doctest.DocTestSuite(*paths, parser=DocTestParser())", "doctest.write_file(*paths, parser=DocTestParser())", "doctest.iter_fields(*paths, parser=DocTestParser())", "doctest._iter_filter(*paths, parser=DocTestParser())", "doctest.cmpfiles(*paths, parser=DocTestParser())", "doctest._turtle_docrevise(*paths, parser=DocTestParser())", "doctest.makeSuite(*paths, parser=DocTestParser())", "doctest.run_module_suite(*paths, parser=DocTestParser())", "doctest.filter(*paths, parser=DocTestParser())", "doctest._filter(*paths, parser=DocTestParser())", "doctest.digest(*paths, parser=DocTestParser())", "doctest.delete(*paths, parser=DocTestParser())", "doctest.set_locale(*paths, parser=DocTestParser())"], "doctest.DocFileSuite(*paths, setUp=None)": ["DocFileSuite", "doctest.DocFileSuite(*paths, setUp=None)", "doctest.DocFileTest(*paths, setUp=None)", "doctest.DocTestSuite(*paths, setUp=None)", "doctest.write_file(*paths, setUp=None)", "doctest.iter_fields(*paths, setUp=None)", "doctest._iter_filter(*paths, setUp=None)", "doctest.cmpfiles(*paths, setUp=None)", "doctest._turtle_docrevise(*paths, setUp=None)", "doctest.makeSuite(*paths, setUp=None)", "doctest.run_module_suite(*paths, setUp=None)", "doctest.filter(*paths, setUp=None)", "doctest._filter(*paths, setUp=None)", "doctest.digest(*paths, setUp=None)", "doctest.delete(*paths, setUp=None)"], "doctest.DocFileSuite(*paths, tearDown=None)": ["DocFileSuite", "doctest.DocFileSuite(*paths, tearDown=None)", "doctest.DocFileTest(*paths, tearDown=None)", "doctest.DocTestSuite(*paths, tearDown=None)", "doctest.write_file(*paths, tearDown=None)", "doctest.iter_fields(*paths, tearDown=None)", "doctest._iter_filter(*paths, tearDown=None)", "doctest.cmpfiles(*paths, tearDown=None)", "doctest._turtle_docrevise(*paths, tearDown=None)", "doctest.makeSuite(*paths, tearDown=None)", "doctest.run_module_suite(*paths, tearDown=None)", "doctest.filter(*paths, tearDown=None)", "doctest._filter(*paths, tearDown=None)", "doctest.digest(*paths, tearDown=None)", "doctest.delete(*paths, tearDown=None)"], "doctest.DocTest(examples, globs, name, filename, lineno, docstring)": ["DocTest"], "doctest.DocTestFailure(test, example, got)": ["DocTestFailure"], "doctest.DocTestFinder()": ["DocTestFinder"], "doctest.DocTestFinder(exclude_empty=True)": ["DocTestFinder", "doctest.DocTestFinder(exclude_empty=False)"], "doctest.DocTestFinder(parser=DocTestParser())": ["DocTestFinder"], "doctest.DocTestFinder(parser=DocTestParser(), exclude_empty=True)": ["DocTestFinder", "doctest.DocTestFinder(parser=DocTestParser(), exclude_empty=False)"], "doctest.DocTestFinder(parser=DocTestParser(), recurse=True)": ["DocTestFinder", "doctest.DocTestFinder(parser=DocTestParser(), recurse=False)"], "doctest.DocTestFinder(recurse=True)": ["DocTestFinder", "doctest.DocTestFinder(recurse=False)"], "doctest.DocTestFinder(verbose=False)": ["DocTestFinder", "doctest.DocTestFinder(verbose=True)"], "doctest.DocTestFinder(verbose=False, exclude_empty=True)": ["DocTestFinder", "doctest.DocTestFinder(verbose=True, exclude_empty=False)"], "doctest.DocTestFinder(verbose=False, parser=DocTestParser())": ["DocTestFinder", "doctest.DocTestFinder(verbose=True, parser=DocTestParser())"], "doctest.DocTestFinder(verbose=False, recurse=True)": ["DocTestFinder", "doctest.DocTestFinder(verbose=True, recurse=False)"], "doctest.DocTestParser": ["doctest.DocTestParser"], "doctest.DocTestRunner()": ["DocTestRunner"], "doctest.DocTestRunner(checker=None, optionflags=0)": ["DocTestRunner", "doctest.DocTestRunner(checker=None, optionflags=0)", "doctest.DocTestRunner(checker=None, optionflags='0')"], "doctest.DocTestRunner(checker=None, verbose=None, optionflags=0)": ["DocTestRunner", "doctest.DocTestRunner(checker=None, verbose=None, optionflags=0)", "doctest.DocTestRunner(checker=None, verbose=None, optionflags='0')"], "doctest.DocTestRunner(optionflags=0)": ["DocTestRunner", "doctest.DocTestRunner(optionflags='0')"], "doctest.DocTestRunner(verbose=None)": ["DocTestRunner", "doctest.DocTestRunner(verbose=None)"], "doctest.DocTestRunner(verbose=None, optionflags=0)": ["DocTestRunner", "doctest.DocTestRunner(verbose=None, optionflags=0)", "doctest.DocTestRunner(verbose=None, optionflags='0')"], "doctest.DocTestSuite()": ["DocTestSuite", "doctest.test()", "doctest.run_module_suite()", "doctest.random_state()", "doctest.ndpointer()", "doctest.turtlesize()", "doctest.screensize()", "doctest.getsitepackages()", "doctest.subplots_adjust()", "doctest.makeStringSeries()", "doctest.token_bytes()", "doctest.format_time()", "doctest.post_mortem()", "doctest.clearstamps()", "doctest.makeObjectSeries()"], "doctest.DocTestSuite(checker=None)": ["DocTestSuite", "doctest.DocTestSuite(checker=None)", "doctest.test(checker=None)", "doctest.run_module_suite(checker=None)", "doctest.random_state(checker=None)", "doctest.ndpointer(checker=None)", "doctest.turtlesize(checker=None)", "doctest.screensize(checker=None)", "doctest.getsitepackages(checker=None)", "doctest.subplots_adjust(checker=None)", "doctest.makeStringSeries(checker=None)", "doctest.token_bytes(checker=None)", "doctest.format_time(checker=None)", "doctest.post_mortem(checker=None)", "doctest.clearstamps(checker=None)"], "doctest.DocTestSuite(extraglobs=None)": ["DocTestSuite", "doctest.DocTestSuite(extraglobs=None)", "doctest.test(extraglobs=None)", "doctest.run_module_suite(extraglobs=None)", "doctest.random_state(extraglobs=None)", "doctest.ndpointer(extraglobs=None)", "doctest.turtlesize(extraglobs=None)", "doctest.screensize(extraglobs=None)", "doctest.getsitepackages(extraglobs=None)", "doctest.subplots_adjust(extraglobs=None)", "doctest.makeStringSeries(extraglobs=None)", "doctest.token_bytes(extraglobs=None)", "doctest.format_time(extraglobs=None)", "doctest.post_mortem(extraglobs=None)", "doctest.clearstamps(extraglobs=None)"], "doctest.DocTestSuite(globs=None)": ["DocTestSuite", "doctest.DocTestSuite(globs=None)", "doctest.test(globs=None)", "doctest.run_module_suite(globs=None)", "doctest.random_state(globs=None)", "doctest.ndpointer(globs=None)", "doctest.turtlesize(globs=None)", "doctest.screensize(globs=None)", "doctest.getsitepackages(globs=None)", "doctest.subplots_adjust(globs=None)", "doctest.makeStringSeries(globs=None)", "doctest.token_bytes(globs=None)", "doctest.format_time(globs=None)", "doctest.post_mortem(globs=None)", "doctest.clearstamps(globs=None)"], "doctest.DocTestSuite(module=None)": ["DocTestSuite", "doctest.DocTestSuite(module=None)", "doctest.test(module=None)", "doctest.run_module_suite(module=None)", "doctest.random_state(module=None)", "doctest.ndpointer(module=None)", "doctest.turtlesize(module=None)", "doctest.screensize(module=None)", "doctest.getsitepackages(module=None)", "doctest.subplots_adjust(module=None)", "doctest.makeStringSeries(module=None)", "doctest.token_bytes(module=None)", "doctest.format_time(module=None)", "doctest.post_mortem(module=None)", "doctest.clearstamps(module=None)"], "doctest.DocTestSuite(module=None, extraglobs=None)": ["DocTestSuite", "doctest.DocTestSuite(module=None, extraglobs=None)", "doctest.test(module=None, extraglobs=None)", "doctest.run_module_suite(module=None, extraglobs=None)", "doctest.random_state(module=None, extraglobs=None)", "doctest.ndpointer(module=None, extraglobs=None)", "doctest.turtlesize(module=None, extraglobs=None)", "doctest.screensize(module=None, extraglobs=None)", "doctest.getsitepackages(module=None, extraglobs=None)", "doctest.subplots_adjust(module=None, extraglobs=None)", "doctest.makeStringSeries(module=None, extraglobs=None)", "doctest.token_bytes(module=None, extraglobs=None)", "doctest.format_time(module=None, extraglobs=None)", "doctest.post_mortem(module=None, extraglobs=None)", "doctest.clearstamps(module=None, extraglobs=None)"], "doctest.DocTestSuite(module=None, globs=None)": ["DocTestSuite", "doctest.DocTestSuite(module=None, globs=None)", "doctest.test(module=None, globs=None)", "doctest.run_module_suite(module=None, globs=None)", "doctest.random_state(module=None, globs=None)", "doctest.ndpointer(module=None, globs=None)", "doctest.turtlesize(module=None, globs=None)", "doctest.screensize(module=None, globs=None)", "doctest.getsitepackages(module=None, globs=None)", "doctest.subplots_adjust(module=None, globs=None)", "doctest.makeStringSeries(module=None, globs=None)", "doctest.token_bytes(module=None, globs=None)", "doctest.format_time(module=None, globs=None)", "doctest.post_mortem(module=None, globs=None)", "doctest.clearstamps(module=None, globs=None)"], "doctest.DocTestSuite(setUp=None)": ["DocTestSuite", "doctest.DocTestSuite(setUp=None)", "doctest.test(setUp=None)", "doctest.run_module_suite(setUp=None)", "doctest.random_state(setUp=None)", "doctest.ndpointer(setUp=None)", "doctest.turtlesize(setUp=None)", "doctest.screensize(setUp=None)", "doctest.getsitepackages(setUp=None)", "doctest.subplots_adjust(setUp=None)", "doctest.makeStringSeries(setUp=None)", "doctest.token_bytes(setUp=None)", "doctest.format_time(setUp=None)", "doctest.post_mortem(setUp=None)", "doctest.clearstamps(setUp=None)"], "doctest.DocTestSuite(tearDown=None)": ["DocTestSuite", "doctest.DocTestSuite(tearDown=None)", "doctest.test(tearDown=None)", "doctest.run_module_suite(tearDown=None)", "doctest.random_state(tearDown=None)", "doctest.ndpointer(tearDown=None)", "doctest.turtlesize(tearDown=None)", "doctest.screensize(tearDown=None)", "doctest.getsitepackages(tearDown=None)", "doctest.subplots_adjust(tearDown=None)", "doctest.makeStringSeries(tearDown=None)", "doctest.token_bytes(tearDown=None)", "doctest.format_time(tearDown=None)", "doctest.post_mortem(tearDown=None)", "doctest.clearstamps(tearDown=None)"], "doctest.DocTestSuite(test_finder=None)": ["DocTestSuite", "doctest.DocTestSuite(test_finder=None)", "doctest.test(test_finder=None)", "doctest.run_module_suite(test_finder=None)", "doctest.random_state(test_finder=None)", "doctest.ndpointer(test_finder=None)", "doctest.turtlesize(test_finder=None)", "doctest.screensize(test_finder=None)", "doctest.getsitepackages(test_finder=None)", "doctest.subplots_adjust(test_finder=None)", "doctest.makeStringSeries(test_finder=None)", "doctest.token_bytes(test_finder=None)", "doctest.format_time(test_finder=None)", "doctest.post_mortem(test_finder=None)", "doctest.clearstamps(test_finder=None)"], "doctest.ELLIPSIS": ["doctest.ELLIPSIS"], "doctest.Example(source, want)": ["Example"], "doctest.Example(source, want, exc_msg=None)": ["Example", "doctest.Example(source, want, exc_msg=None)"], "doctest.Example(source, want, exc_msg=None, indent=0)": ["Example", "doctest.Example(source, want, exc_msg=None, indent=0)", "doctest.Example(source, want, exc_msg=None, indent='0')"], "doctest.Example(source, want, exc_msg=None, lineno=0)": ["Example", "doctest.Example(source, want, exc_msg=None, lineno=0)", "doctest.Example(source, want, exc_msg=None, lineno='0')"], "doctest.Example(source, want, indent=0)": ["Example", "doctest.Example(source, want, indent='0')"], "doctest.Example(source, want, lineno=0)": ["Example", "doctest.Example(source, want, lineno='0')"], "doctest.Example(source, want, lineno=0, indent=0)": ["Example", "doctest.Example(source, want, lineno='0', indent='0')"], "doctest.Example(source, want, lineno=0, options=None)": ["Example", "doctest.Example(source, want, lineno=0, options=None)", "doctest.Example(source, want, lineno='0', options=None)"], "doctest.Example(source, want, options=None)": ["Example", "doctest.Example(source, want, options=None)"], "doctest.FAIL_FAST": ["doctest.FAIL_FAST"], "doctest.IGNORE_EXCEPTION_DETAIL": ["doctest.IGNORE_EXCEPTION_DETAIL"], "doctest.NORMALIZE_WHITESPACE": ["doctest.NORMALIZE_WHITESPACE"], "doctest.OutputChecker": ["doctest.OutputChecker"], "doctest.REPORTING_FLAGS": ["doctest.REPORTING_FLAGS"], "doctest.REPORT_CDIFF": ["doctest.REPORT_CDIFF"], "doctest.REPORT_NDIFF": ["doctest.REPORT_NDIFF"], "doctest.REPORT_ONLY_FIRST_FAILURE": ["doctest.REPORT_ONLY_FIRST_FAILURE"], "doctest.REPORT_UDIFF": ["doctest.REPORT_UDIFF"], "doctest.SKIP": ["doctest.SKIP"], "doctest.UnexpectedException(test, example, exc_info)": ["UnexpectedException"], "doctest.debug(module, name)": ["debug", "doctest.debug_src(module, name)", "doctest.sub_debug(module, name)", "doctest.debug_script(module, name)", "doctest._is_debug_mode(module, name)", "doctest._get_debug_info(module, name)", "doctest.neg(module, name)", "doctest.chebsub(module, name)", "doctest.__neg__(module, name)", "doctest.degrees(module, name)", "doctest.det(module, name)", "doctest.eig(module, name)", "doctest.dup(module, name)", "doctest.chebmul(module, name)", "doctest._get_defaults(module, name)"], "doctest.debug(module, name, pm=False)": ["debug", "doctest.debug(module, name, pm=True)", "doctest.debug_src(module, name, pm=False)", "doctest.sub_debug(module, name, pm=False)", "doctest.debug_script(module, name, pm=False)", "doctest._is_debug_mode(module, name, pm=False)", "doctest._get_debug_info(module, name, pm=False)", "doctest.neg(module, name, pm=False)", "doctest.chebsub(module, name, pm=False)", "doctest.__neg__(module, name, pm=False)", "doctest.degrees(module, name, pm=False)", "doctest.det(module, name, pm=False)", "doctest.eig(module, name, pm=False)", "doctest.dup(module, name, pm=False)", "doctest.chebmul(module, name, pm=False)"], "doctest.debug_src(src)": ["debug_src", "doctest.debug_script(src)", "doctest.legtrim(src)", "doctest.decodestring(src)", "doctest.tril_indices(src)", "doctest.triu_indices(src)", "doctest.cast_scalar_indexer(src)", "doctest.chebtrim(src)", "doctest.format_datetime(src)", "doctest.lru_cache(src)", "doctest.b16decode(src)", "doctest.b32decode(src)", "doctest.safe_repr(src)", "doctest.re_compile(src)", "doctest._unparse_datetime(src)"], "doctest.debug_src(src, pm=False)": ["debug_src", "doctest.debug_src(src, pm=True)", "doctest.debug_script(src, pm=False)", "doctest.legtrim(src, pm=False)", "doctest.decodestring(src, pm=False)", "doctest.tril_indices(src, pm=False)", "doctest.triu_indices(src, pm=False)", "doctest.cast_scalar_indexer(src, pm=False)", "doctest.chebtrim(src, pm=False)", "doctest.format_datetime(src, pm=False)", "doctest.lru_cache(src, pm=False)", "doctest.b16decode(src, pm=False)", "doctest.b32decode(src, pm=False)", "doctest.safe_repr(src, pm=False)", "doctest.re_compile(src, pm=False)"], "doctest.register_optionflag(name)": ["register_optionflag", "doctest._get_registered_option(name)", "doctest._register_builtin(name)", "doctest.register_package(name)", "doctest.register_kl(name)", "doctest._abc_register(name)", "doctest._unregister_task(name)", "doctest._py_unregister_task(name)", "doctest.register_at_fork(name)", "doctest.register_cmap(name)", "doctest.register_error(name)", "doctest._c_unregister_task(name)", "doctest.rewrite_exception(name)", "doctest.unregister_unpack_format(name)", "doctest.register_plotting_backend_cb(name)"], "doctest.run_docstring_examples(f, globs)": ["run_docstring_examples", "doctest._construction_repr(f, globs)", "doctest.union_categoricals(f, globs)", "doctest.matrix_rank(f, globs)", "doctest._code_to_timestamp_pyc(f, globs)", "doctest._init_module_attrs(f, globs)", "doctest.encodestring(f, globs)", "doctest._encodestring(f, globs)", "doctest.setitimer(f, globs)", "doctest.utf_32_le_decode(f, globs)", "doctest.utf_16_le_decode(f, globs)", "doctest.validate_integer(f, globs)", "doctest._convert_for_comparison(f, globs)", "doctest.remove_tree(f, globs)", "doctest.mask_indices(f, globs)"], "doctest.run_docstring_examples(f, globs, name=\"NoName\")": ["run_docstring_examples", "doctest.run_docstring_examples(f, globs, name=6.0)", "doctest._construction_repr(f, globs, name='NoName')", "doctest.union_categoricals(f, globs, name='NoName')", "doctest.matrix_rank(f, globs, name='NoName')", "doctest._code_to_timestamp_pyc(f, globs, name='NoName')", "doctest._init_module_attrs(f, globs, name='NoName')", "doctest.encodestring(f, globs, name='NoName')", "doctest._encodestring(f, globs, name='NoName')", "doctest.setitimer(f, globs, name='NoName')", "doctest.utf_32_le_decode(f, globs, name='NoName')", "doctest.utf_16_le_decode(f, globs, name='NoName')", "doctest.validate_integer(f, globs, name='NoName')", "doctest._convert_for_comparison(f, globs, name='NoName')", "doctest.remove_tree(f, globs, name='NoName')"], "doctest.run_docstring_examples(f, globs, name=\"NoName\", optionflags=0)": ["run_docstring_examples", "doctest.run_docstring_examples(f, globs, name=6.0, optionflags='0')", "doctest._construction_repr(f, globs, name='NoName', optionflags=0)", "doctest.union_categoricals(f, globs, name='NoName', optionflags=0)", "doctest.matrix_rank(f, globs, name='NoName', optionflags=0)", "doctest._code_to_timestamp_pyc(f, globs, name='NoName', optionflags=0)", "doctest._init_module_attrs(f, globs, name='NoName', optionflags=0)", "doctest.encodestring(f, globs, name='NoName', optionflags=0)", "doctest._encodestring(f, globs, name='NoName', optionflags=0)", "doctest.setitimer(f, globs, name='NoName', optionflags=0)", "doctest.utf_32_le_decode(f, globs, name='NoName', optionflags=0)", "doctest.utf_16_le_decode(f, globs, name='NoName', optionflags=0)", "doctest.validate_integer(f, globs, name='NoName', optionflags=0)", "doctest._convert_for_comparison(f, globs, name='NoName', optionflags=0)", "doctest.remove_tree(f, globs, name='NoName', optionflags=0)"], "doctest.run_docstring_examples(f, globs, optionflags=0)": ["run_docstring_examples", "doctest.run_docstring_examples(f, globs, optionflags='0')", "doctest._construction_repr(f, globs, optionflags=0)", "doctest.union_categoricals(f, globs, optionflags=0)", "doctest.matrix_rank(f, globs, optionflags=0)", "doctest._code_to_timestamp_pyc(f, globs, optionflags=0)", "doctest._init_module_attrs(f, globs, optionflags=0)", "doctest.encodestring(f, globs, optionflags=0)", "doctest._encodestring(f, globs, optionflags=0)", "doctest.setitimer(f, globs, optionflags=0)", "doctest.utf_32_le_decode(f, globs, optionflags=0)", "doctest.utf_16_le_decode(f, globs, optionflags=0)", "doctest.validate_integer(f, globs, optionflags=0)", "doctest._convert_for_comparison(f, globs, optionflags=0)", "doctest.remove_tree(f, globs, optionflags=0)"], "doctest.run_docstring_examples(f, globs, verbose=False)": ["run_docstring_examples", "doctest.run_docstring_examples(f, globs, verbose=True)", "doctest._construction_repr(f, globs, verbose=False)", "doctest.union_categoricals(f, globs, verbose=False)", "doctest.matrix_rank(f, globs, verbose=False)", "doctest._code_to_timestamp_pyc(f, globs, verbose=False)", "doctest._init_module_attrs(f, globs, verbose=False)", "doctest.encodestring(f, globs, verbose=False)", "doctest._encodestring(f, globs, verbose=False)", "doctest.setitimer(f, globs, verbose=False)", "doctest.utf_32_le_decode(f, globs, verbose=False)", "doctest.utf_16_le_decode(f, globs, verbose=False)", "doctest.validate_integer(f, globs, verbose=False)", "doctest._convert_for_comparison(f, globs, verbose=False)", "doctest.remove_tree(f, globs, verbose=False)"], "doctest.run_docstring_examples(f, globs, verbose=False, compileflags=None)": ["run_docstring_examples", "doctest.run_docstring_examples(f, globs, verbose=True, compileflags=None)", "doctest._construction_repr(f, globs, verbose=False, compileflags=None)", "doctest.union_categoricals(f, globs, verbose=False, compileflags=None)", "doctest.matrix_rank(f, globs, verbose=False, compileflags=None)", "doctest._code_to_timestamp_pyc(f, globs, verbose=False, compileflags=None)", "doctest._init_module_attrs(f, globs, verbose=False, compileflags=None)", "doctest.encodestring(f, globs, verbose=False, compileflags=None)", "doctest._encodestring(f, globs, verbose=False, compileflags=None)", "doctest.setitimer(f, globs, verbose=False, compileflags=None)", "doctest.utf_32_le_decode(f, globs, verbose=False, compileflags=None)", "doctest.utf_16_le_decode(f, globs, verbose=False, compileflags=None)", "doctest.validate_integer(f, globs, verbose=False, compileflags=None)", "doctest._convert_for_comparison(f, globs, verbose=False, compileflags=None)", "doctest.remove_tree(f, globs, verbose=False, compileflags=None)"], "doctest.run_docstring_examples(f, globs, verbose=False, name=\"NoName\")": ["run_docstring_examples", "doctest.run_docstring_examples(f, globs, verbose=True, name='NoName')", "doctest.run_docstring_examples(f, globs, verbose=False, name=6)", "doctest._construction_repr(f, globs, verbose=False, name='NoName')", "doctest.union_categoricals(f, globs, verbose=False, name='NoName')", "doctest.matrix_rank(f, globs, verbose=False, name='NoName')", "doctest._code_to_timestamp_pyc(f, globs, verbose=False, name='NoName')", "doctest._init_module_attrs(f, globs, verbose=False, name='NoName')", "doctest.encodestring(f, globs, verbose=False, name='NoName')", "doctest._encodestring(f, globs, verbose=False, name='NoName')", "doctest.setitimer(f, globs, verbose=False, name='NoName')", "doctest.utf_32_le_decode(f, globs, verbose=False, name='NoName')", "doctest.utf_16_le_decode(f, globs, verbose=False, name='NoName')", "doctest.validate_integer(f, globs, verbose=False, name='NoName')", "doctest._convert_for_comparison(f, globs, verbose=False, name='NoName')"], "doctest.script_from_examples(s)": ["script_from_examples", "doctest._from_ctypes_scalar(s)", "doctest.create_script_module_impl(s)", "doctest._date_from_string(s)", "doctest.script_method(s)", "doctest.create_script_module(s)", "doctest._from_ctypes_structure(s)", "doctest._dec_from_triple(s)", "doctest._signature_from_callable(s)", "doctest._add_script_class(s)", "doctest._get_script_class(s)", "doctest.interface_script(s)", "doctest._ctype_from_dtype_scalar(s)", "doctest._assemble_from_unit_mappings(s)", "doctest.inherit_from_data(s)"], "doctest.set_unittest_reportflags(flags)": ["set_unittest_reportflags", "doctest._get_exports_list(flags)", "doctest._remove_universal_flags(flags)", "doctest._set_array_types(flags)", "doctest.test_rast(flags)", "doctest._extract_future_flags(flags)", "doctest._set_reuseport(flags)", "doctest._assert_finite(flags)", "doctest._nest_class(flags)", "doctest._release_waiter(flags)", "doctest.module_has_exports(flags)", "doctest.register_optionflag(flags)", "doctest._make_failed_import_test(flags)", "doctest._get_outer_edges(flags)", "doctest.set_default_tensor_type(flags)"], "doctest.testfile(filename, extraglobs=None)": ["testfile", "doctest.testfile(filename, extraglobs=None)", "doctest._lock_file(filename, extraglobs=None)", "doctest.guess_type(filename, extraglobs=None)", "doctest.escape(filename, extraglobs=None)", "doctest.guess_extension(filename, extraglobs=None)", "doctest.getframeinfo(filename, extraglobs=None)", "doctest.measure(filename, extraglobs=None)", "doctest.fftfreq(filename, extraglobs=None)", "doctest.get_docstring(filename, extraglobs=None)", "doctest.get_fill_func(filename, extraglobs=None)", "doctest.get_data(filename, extraglobs=None)", "doctest.na_value_for_dtype(filename, extraglobs=None)", "doctest.rfftfreq(filename, extraglobs=None)", "doctest.set_string_function(filename, extraglobs=None)"], "doctest.testfile(filename, globs=None)": ["testfile", "doctest.testfile(filename, globs=None)", "doctest._lock_file(filename, globs=None)", "doctest.guess_type(filename, globs=None)", "doctest.escape(filename, globs=None)", "doctest.guess_extension(filename, globs=None)", "doctest.getframeinfo(filename, globs=None)", "doctest.measure(filename, globs=None)", "doctest.fftfreq(filename, globs=None)", "doctest.get_docstring(filename, globs=None)", "doctest.get_fill_func(filename, globs=None)", "doctest.get_data(filename, globs=None)", "doctest.na_value_for_dtype(filename, globs=None)", "doctest.rfftfreq(filename, globs=None)", "doctest.set_string_function(filename, globs=None)"], "doctest.testfile(filename, module_relative=True)": ["testfile", "doctest.testfile(filename, module_relative=False)", "doctest._lock_file(filename, module_relative=True)", "doctest.guess_type(filename, module_relative=True)", "doctest.escape(filename, module_relative=True)", "doctest.guess_extension(filename, module_relative=True)", "doctest.getframeinfo(filename, module_relative=True)", "doctest.measure(filename, module_relative=True)", "doctest.fftfreq(filename, module_relative=True)", "doctest.get_docstring(filename, module_relative=True)", "doctest.get_fill_func(filename, module_relative=True)", "doctest.get_data(filename, module_relative=True)", "doctest.na_value_for_dtype(filename, module_relative=True)", "doctest.rfftfreq(filename, module_relative=True)", "doctest.set_string_function(filename, module_relative=True)"], "doctest.testfile(filename, name=None)": ["testfile", "doctest.testfile(filename, name=None)", "doctest._lock_file(filename, name=None)", "doctest.guess_type(filename, name=None)", "doctest.escape(filename, name=None)", "doctest.guess_extension(filename, name=None)", "doctest.getframeinfo(filename, name=None)", "doctest.measure(filename, name=None)", "doctest.fftfreq(filename, name=None)", "doctest.get_docstring(filename, name=None)", "doctest.get_fill_func(filename, name=None)", "doctest.get_data(filename, name=None)", "doctest.na_value_for_dtype(filename, name=None)", "doctest.rfftfreq(filename, name=None)", "doctest.set_string_function(filename, name=None)"], "doctest.testfile(filename, optionflags=0)": ["testfile", "doctest.testfile(filename, optionflags='0')", "doctest._lock_file(filename, optionflags=0)", "doctest.guess_type(filename, optionflags=0)", "doctest.escape(filename, optionflags=0)", "doctest.guess_extension(filename, optionflags=0)", "doctest.getframeinfo(filename, optionflags=0)", "doctest.measure(filename, optionflags=0)", "doctest.fftfreq(filename, optionflags=0)", "doctest.get_docstring(filename, optionflags=0)", "doctest.get_fill_func(filename, optionflags=0)", "doctest.get_data(filename, optionflags=0)", "doctest.na_value_for_dtype(filename, optionflags=0)", "doctest.rfftfreq(filename, optionflags=0)", "doctest.set_string_function(filename, optionflags=0)"], "doctest.testfile(filename, package=None)": ["testfile", "doctest.testfile(filename, package=None)", "doctest._lock_file(filename, package=None)", "doctest.guess_type(filename, package=None)", "doctest.escape(filename, package=None)", "doctest.guess_extension(filename, package=None)", "doctest.getframeinfo(filename, package=None)", "doctest.measure(filename, package=None)", "doctest.fftfreq(filename, package=None)", "doctest.get_docstring(filename, package=None)", "doctest.get_fill_func(filename, package=None)", "doctest.get_data(filename, package=None)", "doctest.na_value_for_dtype(filename, package=None)", "doctest.rfftfreq(filename, package=None)", "doctest.set_string_function(filename, package=None)"], "doctest.testfile(filename, report=True)": ["testfile", "doctest.testfile(filename, report=False)", "doctest._lock_file(filename, report=True)", "doctest.guess_type(filename, report=True)", "doctest.escape(filename, report=True)", "doctest.guess_extension(filename, report=True)", "doctest.getframeinfo(filename, report=True)", "doctest.measure(filename, report=True)", "doctest.fftfreq(filename, report=True)", "doctest.get_docstring(filename, report=True)", "doctest.get_fill_func(filename, report=True)", "doctest.get_data(filename, report=True)", "doctest.na_value_for_dtype(filename, report=True)", "doctest.rfftfreq(filename, report=True)", "doctest.set_string_function(filename, report=True)"], "doctest.testfile(filename, verbose=None)": ["testfile", "doctest.testfile(filename, verbose=None)", "doctest._lock_file(filename, verbose=None)", "doctest.guess_type(filename, verbose=None)", "doctest.escape(filename, verbose=None)", "doctest.guess_extension(filename, verbose=None)", "doctest.getframeinfo(filename, verbose=None)", "doctest.measure(filename, verbose=None)", "doctest.fftfreq(filename, verbose=None)", "doctest.get_docstring(filename, verbose=None)", "doctest.get_fill_func(filename, verbose=None)", "doctest.get_data(filename, verbose=None)", "doctest.na_value_for_dtype(filename, verbose=None)", "doctest.rfftfreq(filename, verbose=None)", "doctest.set_string_function(filename, verbose=None)"], "doctest.testmod()": ["testmod", "doctest.test()", "doctest.resizemode()", "doctest.getnode()", "doctest.token_bytes()", "doctest.mode()", "doctest.textdomain()", "doctest.post_mortem()", "doctest.clearstamps()", "doctest.mkdtemp()", "doctest.listdir()", "doctest.get()", "doctest.interact()", "doctest.getPeriodData()", "doctest.log_to_stderr()"], "doctest.testmod(globs=None)": ["testmod", "doctest.testmod(globs=None)", "doctest.test(globs=None)", "doctest.resizemode(globs=None)", "doctest.getnode(globs=None)", "doctest.token_bytes(globs=None)", "doctest.mode(globs=None)", "doctest.textdomain(globs=None)", "doctest.post_mortem(globs=None)", "doctest.clearstamps(globs=None)", "doctest.mkdtemp(globs=None)", "doctest.listdir(globs=None)", "doctest.get(globs=None)", "doctest.interact(globs=None)", "doctest.getPeriodData(globs=None)"], "doctest.testmod(m=None)": ["testmod", "doctest.testmod(m=None)", "doctest.test(m=None)", "doctest.resizemode(m=None)", "doctest.getnode(m=None)", "doctest.token_bytes(m=None)", "doctest.mode(m=None)", "doctest.textdomain(m=None)", "doctest.post_mortem(m=None)", "doctest.clearstamps(m=None)", "doctest.mkdtemp(m=None)", "doctest.listdir(m=None)", "doctest.get(m=None)", "doctest.interact(m=None)", "doctest.getPeriodData(m=None)"], "doctest.testmod(name=None)": ["testmod", "doctest.testmod(name=None)", "doctest.test(name=None)", "doctest.resizemode(name=None)", "doctest.getnode(name=None)", "doctest.token_bytes(name=None)", "doctest.mode(name=None)", "doctest.textdomain(name=None)", "doctest.post_mortem(name=None)", "doctest.clearstamps(name=None)", "doctest.mkdtemp(name=None)", "doctest.listdir(name=None)", "doctest.get(name=None)", "doctest.interact(name=None)", "doctest.getPeriodData(name=None)"], "doctest.testmod(optionflags=0)": ["testmod", "doctest.testmod(optionflags='0')", "doctest.test(optionflags=0)", "doctest.resizemode(optionflags=0)", "doctest.getnode(optionflags=0)", "doctest.token_bytes(optionflags=0)", "doctest.mode(optionflags=0)", "doctest.textdomain(optionflags=0)", "doctest.post_mortem(optionflags=0)", "doctest.clearstamps(optionflags=0)", "doctest.mkdtemp(optionflags=0)", "doctest.listdir(optionflags=0)", "doctest.get(optionflags=0)", "doctest.interact(optionflags=0)", "doctest.getPeriodData(optionflags=0)"], "doctest.testmod(report=True)": ["testmod", "doctest.testmod(report=False)", "doctest.test(report=True)", "doctest.resizemode(report=True)", "doctest.getnode(report=True)", "doctest.token_bytes(report=True)", "doctest.mode(report=True)", "doctest.textdomain(report=True)", "doctest.post_mortem(report=True)", "doctest.clearstamps(report=True)", "doctest.mkdtemp(report=True)", "doctest.listdir(report=True)", "doctest.get(report=True)", "doctest.interact(report=True)", "doctest.getPeriodData(report=True)"], "doctest.testmod(verbose=None)": ["testmod", "doctest.testmod(verbose=None)", "doctest.test(verbose=None)", "doctest.resizemode(verbose=None)", "doctest.getnode(verbose=None)", "doctest.token_bytes(verbose=None)", "doctest.mode(verbose=None)", "doctest.textdomain(verbose=None)", "doctest.post_mortem(verbose=None)", "doctest.clearstamps(verbose=None)", "doctest.mkdtemp(verbose=None)", "doctest.listdir(verbose=None)", "doctest.get(verbose=None)", "doctest.interact(verbose=None)", "doctest.getPeriodData(verbose=None)"], "doctest.testsource(module, name)": ["testsource", "doctest.getsource(module, name)", "doctest.source(module, name)", "doctest.restore(module, name)", "doctest.getsourcefile(module, name)", "doctest.source_hash(module, name)", "doctest._get_sourcefile(module, name)", "doctest.test_voc(module, name)", "doctest.getsourcelines(module, name)", "doctest.DocTestSuite(module, name)", "doctest._destinsrc(module, name)", "doctest._get_function_source(module, name)", "doctest.decode_source(module, name)", "doctest.findsource(module, name)", "doctest.measure(module, name)"], "domain_filter.domain": ["domain_filter.domain"], "dumbdbm.close()": ["close"], "dumbdbm.sync()": ["sync"], "element.append(subelement)": ["append"], "element.clear()": ["clear"], "element.extend(subelements)": ["extend"], "element.find(match)": ["find"], "element.find(match, namespaces=None)": ["find", "element.find(match, namespaces=None)"], "element.findall(match)": ["findall"], "element.findall(match, namespaces=None)": ["findall", "element.findall(match, namespaces=None)"], "element.findtext(match)": ["findtext"], "element.findtext(match, default=None)": ["findtext", "element.findtext(match, default=None)"], "element.findtext(match, default=None, namespaces=None)": ["findtext", "element.findtext(match, default=None, namespaces=None)"], "element.findtext(match, namespaces=None)": ["findtext", "element.findtext(match, namespaces=None)"], "element.get(key)": ["get"], "element.get(key, default=None)": ["get", "element.get(key, default=None)"], "element.insert(index, subelement)": ["insert"], "element.items()": ["items"], "element.iter()": ["iter"], "element.iter(tag=None)": ["iter", "element.iter(tag=None)"], "element.iterfind(match)": ["iterfind"], "element.iterfind(match, namespaces=None)": ["iterfind", "element.iterfind(match, namespaces=None)"], "element.keys()": ["keys"], "element.makeelement(tag, attrib)": ["makeelement"], "element.remove(subelement)": ["remove"], "element.set(key, value)": ["set"], "element.tag": ["element.tag"], "element.text": ["element.text"], "element_tree._setroot(element)": ["_setroot"], "element_tree.find(match)": ["find"], "element_tree.find(match, namespaces=None)": ["find", "element_tree.find(match, namespaces=None)"], "element_tree.findtext(match)": ["findtext"], "element_tree.findtext(match, default=None)": ["findtext", "element_tree.findtext(match, default=None)"], "element_tree.findtext(match, default=None, namespaces=None)": ["findtext", "element_tree.findtext(match, default=None, namespaces=None)"], "element_tree.getroot()": ["getroot"], "element_tree.iter()": ["iter"], "element_tree.iter(tag=None)": ["iter", "element_tree.iter(tag=None)"], "element_tree.iterfind(match)": ["iterfind"], "element_tree.parse(source)": ["parse"], "element_tree.parse(source, parser=None)": ["parse", "element_tree.parse(source, parser=None)"], "element_tree.write(file, default_namespace=None)": ["write", "element_tree.write(file, default_namespace=None)"], "element_tree.write(file, encoding=\"us-ascii\")": ["write", "element_tree.write(file, encoding=8)"], "element_tree.write(file, encoding=\"us-ascii\", method=\"xml\")": ["write", "element_tree.write(file, encoding=8, method=3.0)"], "element_tree.write(file, encoding=\"us-ascii\", xml_declaration=None)": ["write", "element_tree.write(file, encoding='us-ascii', xml_declaration=None)", "element_tree.write(file, encoding=8, xml_declaration=None)"], "element_tree.write(file, method=\"xml\")": ["write", "element_tree.write(file, method=3.0)"], "element_tree.write(file, short_empty_elements=True)": ["write", "element_tree.write(file, short_empty_elements=False)"], "element_tree.write(file, xml_declaration=None)": ["write", "element_tree.write(file, xml_declaration=None)"], "email.charset.Charset()": ["Charset"], "email.charset.Charset(input_charset=DEFAULT_CHARSET)": ["Charset"], "email.charset.add_alias(alias, canonical)": ["add_alias", "email.charset._add_aliases(alias, canonical)", "email.charset._hash_add(alias, canonical)", "email.charset._alias(alias, canonical)", "email.charset._add_margins(alias, canonical)", "email.charset.add_callers(alias, canonical)", "email.charset._add_integer_aliases(alias, canonical)", "email.charset.atleast_3d(alias, canonical)", "email.charset.atleast_1d(alias, canonical)", "email.charset.atleast_2d(alias, canonical)", "email.charset.add_ops(alias, canonical)", "email.charset.radians(alias, canonical)", "email.charset.add_charset(alias, canonical)", "email.charset.adadelta(alias, canonical)", "email.charset.RAND_add(alias, canonical)"], "email.charset.add_charset(charset)": ["add_charset", "email.charset.addshape(charset)", "email.charset.broadcast(charset)", "email.charset.reduce_add(charset)", "email.charset.add_observer_(charset)", "email.charset._optimize_charset(charset)", "email.charset.escape_decode(charset)", "email.charset.parse(charset)", "email.charset._parse_datetime(charset)", "email.charset.parse_config_h(charset)", "email.charset._std_dispatcher(charset)", "email.charset.parse_makefile(charset)", "email.charset.create_archive(charset)", "email.charset.addsitedir(charset)", "email.charset._parse_makefile(charset)"], "email.charset.add_charset(charset, body_enc=None)": ["add_charset", "email.charset.add_charset(charset, body_enc=None)", "email.charset.addshape(charset, body_enc=None)", "email.charset.broadcast(charset, body_enc=None)", "email.charset.reduce_add(charset, body_enc=None)", "email.charset.add_observer_(charset, body_enc=None)", "email.charset._optimize_charset(charset, body_enc=None)", "email.charset.escape_decode(charset, body_enc=None)", "email.charset.parse(charset, body_enc=None)", "email.charset._parse_datetime(charset, body_enc=None)", "email.charset.parse_config_h(charset, body_enc=None)", "email.charset._std_dispatcher(charset, body_enc=None)", "email.charset.parse_makefile(charset, body_enc=None)", "email.charset.create_archive(charset, body_enc=None)", "email.charset.addsitedir(charset, body_enc=None)"], "email.charset.add_charset(charset, header_enc=None, body_enc=None)": ["add_charset", "email.charset.add_charset(charset, header_enc=None, body_enc=None)", "email.charset.addshape(charset, header_enc=None, body_enc=None)", "email.charset.broadcast(charset, header_enc=None, body_enc=None)", "email.charset.reduce_add(charset, header_enc=None, body_enc=None)", "email.charset.add_observer_(charset, header_enc=None, body_enc=None)", "email.charset._optimize_charset(charset, header_enc=None, body_enc=None)", "email.charset.escape_decode(charset, header_enc=None, body_enc=None)", "email.charset.parse(charset, header_enc=None, body_enc=None)", "email.charset._parse_datetime(charset, header_enc=None, body_enc=None)", "email.charset.parse_config_h(charset, header_enc=None, body_enc=None)", "email.charset._std_dispatcher(charset, header_enc=None, body_enc=None)", "email.charset.parse_makefile(charset, header_enc=None, body_enc=None)", "email.charset.create_archive(charset, header_enc=None, body_enc=None)", "email.charset.addsitedir(charset, header_enc=None, body_enc=None)"], "email.charset.add_charset(charset, output_charset=None)": ["add_charset", "email.charset.add_charset(charset, output_charset=None)", "email.charset.addshape(charset, output_charset=None)", "email.charset.broadcast(charset, output_charset=None)", "email.charset.reduce_add(charset, output_charset=None)", "email.charset.add_observer_(charset, output_charset=None)", "email.charset._optimize_charset(charset, output_charset=None)", "email.charset.escape_decode(charset, output_charset=None)", "email.charset.parse(charset, output_charset=None)", "email.charset._parse_datetime(charset, output_charset=None)", "email.charset.parse_config_h(charset, output_charset=None)", "email.charset._std_dispatcher(charset, output_charset=None)", "email.charset.parse_makefile(charset, output_charset=None)", "email.charset.create_archive(charset, output_charset=None)", "email.charset.addsitedir(charset, output_charset=None)"], "email.charset.add_codec(charset, codecname)": ["add_codec", "email.charset.a85decode(charset, codecname)", "email.charset.decode(charset, codecname)", "email.charset.add_newdoc(charset, codecname)", "email.charset.reduce_add(charset, codecname)", "email.charset._code(charset, codecname)", "email.charset.add_ops(charset, codecname)", "email.charset.reduce_add_coalesced(charset, codecname)", "email.charset.load_module(charset, codecname)", "email.charset.body_decode(charset, codecname)", "email.charset._add_methods(charset, codecname)", "email.charset._decode_args(charset, codecname)", "email.charset.body_encode(charset, codecname)", "email.charset.add_callers(charset, codecname)", "email.charset.add_charset(charset, codecname)"], "email.contentmanager.ContentManager": ["email.contentmanager.ContentManager"], "email.contentmanager.get_content(msg)": ["get_content"], "email.contentmanager.get_content(msg, errors='replace')": ["get_content", "email.contentmanager.get_content(msg, errors=7.0)"], "email.contentmanager.raw_data_manager": ["email.contentmanager.raw_data_manager"], "email.contentmanager.set_content(msg, <'EmailMessage'>)": [], "email.contentmanager.set_content(msg, <'EmailMessage'>, cid=None)": [], "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None)": [], "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None, disposition=None)": [], "email.contentmanager.set_content(msg, <'EmailMessage'>, cte=None, filename=None)": [], "email.contentmanager.set_content(msg, <'EmailMessage'>, disposition=None)": [], "email.contentmanager.set_content(msg, <'EmailMessage'>, headers=None)": [], "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, cid=None)": [], "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, cte=\"base64\")": [], "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, cte=\"base64\", disposition=None)": [], "email.contentmanager.set_content(msg, <'bytes'>, maintype, subtype, params=None)": [], "email.contentmanager.set_content(msg, <'str'>)": [], "email.contentmanager.set_content(msg, <'str'>, charset='utf-8'                     cte=None)": [], "email.contentmanager.set_content(msg, <'str'>, cid=None)": [], "email.contentmanager.set_content(msg, <'str'>, disposition=None)": [], "email.contentmanager.set_content(msg, <'str'>, filename=None)": [], "email.contentmanager.set_content(msg, <'str'>, headers=None)": [], "email.contentmanager.set_content(msg, <'str'>, params=None)": [], "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\")": [], "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", charset='utf-8'                     cte=None)": [], "email.contentmanager.set_content(msg, <'str'>, subtype=\"plain\", disposition=None)": [], "email.encoders.encode_7or8bit(msg)": ["encode_7or8bit", "email.encoders.encode_b(msg)", "email.encoders.iterencode(msg)", "email.encoders._bencode(msg)", "email.encoders.body_encode(msg)", "email.encoders._85encode(msg)", "email.encoders.decode_b(msg)", "email.encoders.utf_8_encode(msg)", "email.encoders.ascii_encode(msg)", "email.encoders.utf_7_encode(msg)", "email.encoders.urlencode(msg)", "email.encoders.a85encode(msg)", "email.encoders.b16encode(msg)", "email.encoders.b64encode(msg)", "email.encoders.b32encode(msg)"], "email.encoders.encode_base64(msg)": ["encode_base64", "email.encoders._encode_base64(msg)", "email.encoders.body_encode(msg)", "email.encoders._decode_base64(msg)", "email.encoders.b64encode(msg)", "email.encoders.encode_b(msg)", "email.encoders.info(msg)", "email.encoders.b64decode(msg)", "email.encoders.b16encode(msg)", "email.encoders.ascii_encode(msg)", "email.encoders._bencode(msg)", "email.encoders.py_encode_basestring(msg)", "email.encoders._decode_args(msg)", "email.encoders.fsencode(msg)", "email.encoders.decode_b(msg)"], "email.encoders.encode_noop(msg)": ["encode_noop", "email.encoders.hook_encoded(msg)", "email.encoders.encode_quopri(msg)", "email.encoders.encode_q(msg)", "email.encoders.encode_long(msg)", "email.encoders._encode(msg)", "email.encoders.encode(msg)", "email.encoders.code_info(msg)", "email.encoders.escape_encode(msg)", "email.encoders._qencode(msg)", "email.encoders._ip_getnode(msg)", "email.encoders._bencode(msg)", "email.encoders._random_getnode(msg)", "email.encoders._decode_line(msg)", "email.encoders.latin_1_encode(msg)"], "email.encoders.encode_quopri(msg)": ["encode_quopri", "email.encoders.encode_q(msg)", "email.encoders.encode_noop(msg)", "email.encoders.decode_q(msg)", "email.encoders.encode_long(msg)", "email.encoders.utf_8_encode(msg)", "email.encoders.hook_encoded(msg)", "email.encoders.encodestring(msg)", "email.encoders.utf_7_encode(msg)", "email.encoders._unix_getnode(msg)", "email.encoders._encodestring(msg)", "email.encoders._encode(msg)", "email.encoders.encode(msg)", "email.encoders.header_encode(msg)", "email.encoders.get_encoded_word(msg)"], "email.errors.BoundaryError": ["email.errors.BoundaryError"], "email.errors.HeaderParseError": ["email.errors.HeaderParseError"], "email.errors.MessageError": ["email.errors.MessageError"], "email.errors.MultipartConversionError": ["email.errors.MultipartConversionError"], "email.generator.BytesGenerator(outfp)": ["BytesGenerator"], "email.generator.BytesGenerator(outfp, mangle_from_=None)": ["BytesGenerator", "email.generator.BytesGenerator(outfp, mangle_from_=None)"], "email.generator.BytesGenerator(outfp, mangle_from_=None, maxheaderlen=None)": ["BytesGenerator", "email.generator.BytesGenerator(outfp, mangle_from_=None, maxheaderlen=None)"], "email.generator.BytesGenerator(outfp, maxheaderlen=None)": ["BytesGenerator", "email.generator.BytesGenerator(outfp, maxheaderlen=None)"], "email.generator.DecodedGenerator(outfp)": ["DecodedGenerator"], "email.generator.DecodedGenerator(outfp, fmt=None)": ["DecodedGenerator", "email.generator.DecodedGenerator(outfp, fmt=None)"], "email.generator.DecodedGenerator(outfp, mangle_from_=None, maxheaderlen=None)": ["DecodedGenerator", "email.generator.DecodedGenerator(outfp, mangle_from_=None, maxheaderlen=None)"], "email.generator.Generator(outfp)": ["Generator"], "email.generator.Generator(outfp, mangle_from_=None)": ["Generator", "email.generator.Generator(outfp, mangle_from_=None)"], "email.generator.Generator(outfp, mangle_from_=None, maxheaderlen=None)": ["Generator", "email.generator.Generator(outfp, mangle_from_=None, maxheaderlen=None)"], "email.generator.Generator(outfp, maxheaderlen=None)": ["Generator", "email.generator.Generator(outfp, maxheaderlen=None)"], "email.generator.Generator(outfp, policy=None)": ["Generator", "email.generator.Generator(outfp, policy=None)"], "email.header.Header()": ["Header"], "email.header.Header(charset=None)": ["Header", "email.header.Header(charset=None)"], "email.header.Header(errors='strict')": ["Header", "email.header.Header(errors=6.0)"], "email.header.Header(header_name=None)": ["Header", "email.header.Header(header_name=None)"], "email.header.Header(maxlinelen=None)": ["Header", "email.header.Header(maxlinelen=None)"], "email.header.Header(s=None)": ["Header", "email.header.Header(s=None)"], "email.header.Header(s=None, header_name=None)": ["Header", "email.header.Header(s=None, header_name=None)"], "email.header.Header(s=None, maxlinelen=None)": ["Header", "email.header.Header(s=None, maxlinelen=None)"], "email.header.decode_header(header)": ["decode_header", "email.header.header_decode(header)", "email.header.header_encode(header)", "email.header._email_decode_header(header)", "email.header.escape_decode(header)", "email.header.read_code(header)", "email.header.readbuffer_encode(header)", "email.header.header_check(header)", "email.header.escape_encode(header)", "email.header.decode_params(header)", "email.header.ensure_decoded(header)", "email.header._ensure_decoded(header)", "email.header._decode_line(header)", "email.header._hex_code(header)", "email.header.decode_q(header)"], "email.header.make_header(decoded_seq)": ["make_header", "email.header.notmasked_edges(decoded_seq)", "email.header.make_mask_none(decoded_seq)", "email.header.escape_encode(decoded_seq)", "email.header.escape_decode(decoded_seq)", "email.header.charmap_decode(decoded_seq)", "email.header.register_shape(decoded_seq)", "email.header.charmap_encode(decoded_seq)", "email.header.readmodule(decoded_seq)", "email.header.vander(decoded_seq)", "email.header.argmax(decoded_seq)", "email.header.addsitepackages(decoded_seq)", "email.header._decode_line(decoded_seq)", "email.header._ravel_dispatcher(decoded_seq)", "email.header._stack_dispatcher(decoded_seq)"], "email.headerregistry.Address()": ["Address"], "email.headerregistry.Address(addr_spec=None)": ["Address", "email.headerregistry.Address(addr_spec=None)"], "email.headerregistry.Address(display_name='')": ["Address", "email.headerregistry.Address(display_name=0.0)"], "email.headerregistry.Address(display_name='', username='')": ["Address", "email.headerregistry.Address(display_name=0.0, username=0.0)"], "email.headerregistry.Address(domain='')": ["Address", "email.headerregistry.Address(domain=0.0)"], "email.headerregistry.Address(username='')": ["Address", "email.headerregistry.Address(username=0.0)"], "email.headerregistry.Address(username='', addr_spec=None)": ["Address", "email.headerregistry.Address(username='', addr_spec=None)", "email.headerregistry.Address(username=0.0, addr_spec=None)"], "email.headerregistry.Address(username='', domain='')": ["Address", "email.headerregistry.Address(username=0, domain=0.0)"], "email.headerregistry.AddressHeader": ["email.headerregistry.AddressHeader"], "email.headerregistry.BaseHeader(name, value)": ["BaseHeader"], "email.headerregistry.ContentTransferEncoding": ["email.headerregistry.ContentTransferEncoding"], "email.headerregistry.ContentTypeHeader": ["email.headerregistry.ContentTypeHeader"], "email.headerregistry.DateHeader": ["email.headerregistry.DateHeader"], "email.headerregistry.Group(addresses=None)": ["Group", "email.headerregistry.Group(addresses=None)"], "email.headerregistry.Group(display_name=None)": ["Group", "email.headerregistry.Group(display_name=None)"], "email.headerregistry.Group(display_name=None, addresses=None)": ["Group", "email.headerregistry.Group(display_name=None, addresses=None)"], "email.headerregistry.HeaderRegistry(base_class=BaseHeader)": ["HeaderRegistry"], "email.headerregistry.HeaderRegistry(base_class=BaseHeader, default_class=UnstructuredHeader)": ["HeaderRegistry"], "email.headerregistry.HeaderRegistry(base_class=BaseHeader, default_class=UnstructuredHeader, use_default_map=True)": ["HeaderRegistry", "email.headerregistry.HeaderRegistry(base_class=BaseHeader, default_class=UnstructuredHeader, use_default_map=False)"], "email.headerregistry.HeaderRegistry(base_class=BaseHeader, use_default_map=True)": ["HeaderRegistry", "email.headerregistry.HeaderRegistry(base_class=BaseHeader, use_default_map=False)"], "email.headerregistry.MIMEVersionHeader": ["email.headerregistry.MIMEVersionHeader"], "email.headerregistry.ParameterizedMIMEHeader": ["email.headerregistry.ParameterizedMIMEHeader"], "email.headerregistry.SingleAddressHeader": ["email.headerregistry.SingleAddressHeader"], "email.iterators._structure(msg, fp=None)": ["_structure", "email.iterators._structure(msg, fp=None)", "email.iterators.ensure_future(msg, fp=None)", "email.iterators.tracer(msg, fp=None)", "email.iterators.wrap_future(msg, fp=None)", "email.iterators.get_instructions(msg, fp=None)", "email.iterators.distance(msg, fp=None)", "email.iterators._stat(msg, fp=None)", "email.iterators.setlocale(msg, fp=None)", "email.iterators.strip(msg, fp=None)", "email.iterators.stdev(msg, fp=None)", "email.iterators.lstat(msg, fp=None)", "email.iterators.print_list(msg, fp=None)", "email.iterators.obj2sctype(msg, fp=None)", "email.iterators._size_dispatcher(msg, fp=None)"], "email.iterators._structure(msg, fp=None, level=0)": ["_structure", "email.iterators._structure(msg, fp=None, level=0)", "email.iterators._structure(msg, fp=None, level='0')", "email.iterators.ensure_future(msg, fp=None, level=0)", "email.iterators.tracer(msg, fp=None, level=0)", "email.iterators.wrap_future(msg, fp=None, level=0)", "email.iterators.get_instructions(msg, fp=None, level=0)", "email.iterators.distance(msg, fp=None, level=0)", "email.iterators._stat(msg, fp=None, level=0)", "email.iterators.setlocale(msg, fp=None, level=0)", "email.iterators.strip(msg, fp=None, level=0)", "email.iterators.stdev(msg, fp=None, level=0)", "email.iterators.lstat(msg, fp=None, level=0)", "email.iterators.print_list(msg, fp=None, level=0)", "email.iterators.obj2sctype(msg, fp=None, level=0)"], "email.iterators._structure(msg, fp=None, level=0, include_default=False)": ["_structure", "email.iterators._structure(msg, fp=None, level=0, include_default=True)", "email.iterators._structure(msg, fp=None, level='0', include_default=False)", "email.iterators.ensure_future(msg, fp=None, level=0, include_default=False)", "email.iterators.tracer(msg, fp=None, level=0, include_default=False)", "email.iterators.wrap_future(msg, fp=None, level=0, include_default=False)", "email.iterators.get_instructions(msg, fp=None, level=0, include_default=False)", "email.iterators.distance(msg, fp=None, level=0, include_default=False)", "email.iterators._stat(msg, fp=None, level=0, include_default=False)", "email.iterators.setlocale(msg, fp=None, level=0, include_default=False)", "email.iterators.strip(msg, fp=None, level=0, include_default=False)", "email.iterators.stdev(msg, fp=None, level=0, include_default=False)", "email.iterators.lstat(msg, fp=None, level=0, include_default=False)", "email.iterators.print_list(msg, fp=None, level=0, include_default=False)", "email.iterators.obj2sctype(msg, fp=None, level=0, include_default=False)"], "email.iterators._structure(msg, level=0)": ["_structure", "email.iterators._structure(msg, level='0')", "email.iterators.ensure_future(msg, level=0)", "email.iterators.tracer(msg, level=0)", "email.iterators.wrap_future(msg, level=0)", "email.iterators.get_instructions(msg, level=0)", "email.iterators.distance(msg, level=0)", "email.iterators._stat(msg, level=0)", "email.iterators.setlocale(msg, level=0)", "email.iterators.strip(msg, level=0)", "email.iterators.stdev(msg, level=0)", "email.iterators.lstat(msg, level=0)", "email.iterators.print_list(msg, level=0)", "email.iterators.obj2sctype(msg, level=0)", "email.iterators._size_dispatcher(msg, level=0)"], "email.iterators.body_line_iterator(msg)": ["body_line_iterator", "email.iterators._iter_filter(msg)", "email.iterators.decodestring(msg)", "email.iterators.encodestring(msg)", "email.iterators.byte_compile(msg)", "email.iterators._encodestring(msg)", "email.iterators._create_stdlib_context(msg)", "email.iterators._unique_state_dict(msg)", "email.iterators.broadcast_object_list(msg)", "email.iterators._code_to_timestamp_pyc(msg)", "email.iterators._make_date_converter(msg)", "email.iterators._create_unverified_context(msg)", "email.iterators._non_printable_finder(msg)", "email.iterators._is_legal_header_name(msg)", "email.iterators._non_atom_end_matcher(msg)"], "email.iterators.body_line_iterator(msg, decode=False)": ["body_line_iterator", "email.iterators.body_line_iterator(msg, decode=True)", "email.iterators._iter_filter(msg, decode=False)", "email.iterators.decodestring(msg, decode=False)", "email.iterators.encodestring(msg, decode=False)", "email.iterators.byte_compile(msg, decode=False)", "email.iterators._encodestring(msg, decode=False)", "email.iterators._create_stdlib_context(msg, decode=False)", "email.iterators._unique_state_dict(msg, decode=False)", "email.iterators.broadcast_object_list(msg, decode=False)", "email.iterators._code_to_timestamp_pyc(msg, decode=False)", "email.iterators._make_date_converter(msg, decode=False)", "email.iterators._create_unverified_context(msg, decode=False)", "email.iterators._non_printable_finder(msg, decode=False)", "email.iterators._is_legal_header_name(msg, decode=False)"], "email.iterators.typed_subpart_iterator(msg, maintype='text')": ["typed_subpart_iterator", "email.iterators.typed_subpart_iterator(msg, maintype=4.0)", "email.iterators.iterparse(msg, maintype='text')", "email.iterators.upsample_bilinear(msg, maintype='text')", "email.iterators.scatter_matrix(msg, maintype='text')", "email.iterators.get_type_hints(msg, maintype='text')", "email.iterators._searchsorted_dispatcher(msg, maintype='text')", "email.iterators._translate_dispatcher(msg, maintype='text')", "email.iterators._partition_dispatcher(msg, maintype='text')", "email.iterators.interpolate(msg, maintype='text')", "email.iterators._startswith_dispatcher(msg, maintype='text')", "email.iterators.upsample_nearest(msg, maintype='text')", "email.iterators.start_server(msg, maintype='text')", "email.iterators.errorbar(msg, maintype='text')", "email.iterators.ensure_key_mapped(msg, maintype='text')"], "email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None)": ["typed_subpart_iterator", "email.iterators.typed_subpart_iterator(msg, maintype='text', subtype=None)", "email.iterators.typed_subpart_iterator(msg, maintype=4.0, subtype=None)", "email.iterators.iterparse(msg, maintype='text', subtype=None)", "email.iterators.upsample_bilinear(msg, maintype='text', subtype=None)", "email.iterators.scatter_matrix(msg, maintype='text', subtype=None)", "email.iterators.get_type_hints(msg, maintype='text', subtype=None)", "email.iterators._searchsorted_dispatcher(msg, maintype='text', subtype=None)", "email.iterators._translate_dispatcher(msg, maintype='text', subtype=None)", "email.iterators._partition_dispatcher(msg, maintype='text', subtype=None)", "email.iterators.interpolate(msg, maintype='text', subtype=None)", "email.iterators._startswith_dispatcher(msg, maintype='text', subtype=None)", "email.iterators.upsample_nearest(msg, maintype='text', subtype=None)", "email.iterators.start_server(msg, maintype='text', subtype=None)", "email.iterators.errorbar(msg, maintype='text', subtype=None)"], "email.iterators.typed_subpart_iterator(msg, subtype=None)": ["typed_subpart_iterator", "email.iterators.typed_subpart_iterator(msg, subtype=None)", "email.iterators.iterparse(msg, subtype=None)", "email.iterators.upsample_bilinear(msg, subtype=None)", "email.iterators.scatter_matrix(msg, subtype=None)", "email.iterators.get_type_hints(msg, subtype=None)", "email.iterators._searchsorted_dispatcher(msg, subtype=None)", "email.iterators._translate_dispatcher(msg, subtype=None)", "email.iterators._partition_dispatcher(msg, subtype=None)", "email.iterators.interpolate(msg, subtype=None)", "email.iterators._startswith_dispatcher(msg, subtype=None)", "email.iterators.upsample_nearest(msg, subtype=None)", "email.iterators.start_server(msg, subtype=None)", "email.iterators.errorbar(msg, subtype=None)", "email.iterators.ensure_key_mapped(msg, subtype=None)"], "email.message.EmailMessage()": ["EmailMessage"], "email.message.EmailMessage(policy=default)": ["EmailMessage"], "email.message.Message()": ["Message"], "email.message_from_binary_file(fp)": ["message_from_binary_file", "email.message_from_file(fp)", "email.message_from_bytes(fp)", "email.flex_binary_moment(fp)", "email._get_code_from_file(fp)", "email._is_fmt_binary(fp)", "email._inplace_binary_method(fp)", "email.storage_from_cache(fp)", "email.filter_stack_entry(fp)", "email.message_from_string(fp)", "email._guess_time_format_for_array(fp)", "email._guess_datetime_format_for_array(fp)", "email.flex_arith_method_FRAME(fp)", "email._builtin_from_name(fp)", "email._signature_from_builtin(fp)"], "email.message_from_binary_file(fp, _class=None)": ["message_from_binary_file", "email.message_from_binary_file(fp, _class=None)", "email.message_from_file(fp, _class=None)", "email.message_from_bytes(fp, _class=None)", "email.flex_binary_moment(fp, _class=None)", "email._get_code_from_file(fp, _class=None)", "email._is_fmt_binary(fp, _class=None)", "email._inplace_binary_method(fp, _class=None)", "email.storage_from_cache(fp, _class=None)", "email.filter_stack_entry(fp, _class=None)", "email.message_from_string(fp, _class=None)", "email._guess_time_format_for_array(fp, _class=None)", "email._guess_datetime_format_for_array(fp, _class=None)", "email.flex_arith_method_FRAME(fp, _class=None)", "email._builtin_from_name(fp, _class=None)"], "email.message_from_bytes(s)": ["message_from_bytes", "email.message_from_file(s)", "email.message_from_binary_file(s)", "email._load_from_bytes(s)", "email.quote_from_bytes(s)", "email.urlquote_from_bytes(s)", "email.message_from_string(s)", "email._read_bytes(s)", "email.read_bytes4(s)", "email.read_bytes8(s)", "email.read_bytes1(s)", "email.storage_from_cache(s)", "email._from_ctypes_scalar(s)", "email._date_from_string(s)", "email.RAND_bytes(s)"], "email.message_from_bytes(s, _class=None)": ["message_from_bytes", "email.message_from_bytes(s, _class=None)", "email.message_from_file(s, _class=None)", "email.message_from_binary_file(s, _class=None)", "email._load_from_bytes(s, _class=None)", "email.quote_from_bytes(s, _class=None)", "email.urlquote_from_bytes(s, _class=None)", "email.message_from_string(s, _class=None)", "email._read_bytes(s, _class=None)", "email.read_bytes4(s, _class=None)", "email.read_bytes8(s, _class=None)", "email.read_bytes1(s, _class=None)", "email.storage_from_cache(s, _class=None)", "email._from_ctypes_scalar(s, _class=None)", "email._date_from_string(s, _class=None)"], "email.message_from_bytes(s, policy=policy.compat32)": ["message_from_bytes", "email.message_from_file(s, policy=policy.compat32)", "email.message_from_binary_file(s, policy=policy.compat32)", "email._load_from_bytes(s, policy=policy.compat32)", "email.quote_from_bytes(s, policy=policy.compat32)", "email.urlquote_from_bytes(s, policy=policy.compat32)", "email.message_from_string(s, policy=policy.compat32)", "email._read_bytes(s, policy=policy.compat32)", "email.read_bytes4(s, policy=policy.compat32)", "email.read_bytes8(s, policy=policy.compat32)", "email.read_bytes1(s, policy=policy.compat32)", "email.storage_from_cache(s, policy=policy.compat32)", "email._from_ctypes_scalar(s, policy=policy.compat32)", "email._date_from_string(s, policy=policy.compat32)", "email.RAND_bytes(s, policy=policy.compat32)"], "email.message_from_file(fp)": ["message_from_file", "email.message_from_binary_file(fp)", "email.message_from_bytes(fp)", "email._get_code_from_file(fp)", "email.message_from_string(fp)", "email.storage_from_cache(fp)", "email._filter_header(fp)", "email.spec_from_file_location(fp)", "email._builtin_from_name(fp)", "email._mode_from_name(fp)", "email.filter_name(fp)", "email._parse_release_file(fp)", "email._signature_from_builtin(fp)", "email._pair_from_first(fp)", "email._make_failed_load_tests(fp)"], "email.message_from_file(fp, _class=None)": ["message_from_file", "email.message_from_file(fp, _class=None)", "email.message_from_binary_file(fp, _class=None)", "email.message_from_bytes(fp, _class=None)", "email._get_code_from_file(fp, _class=None)", "email.message_from_string(fp, _class=None)", "email.storage_from_cache(fp, _class=None)", "email._filter_header(fp, _class=None)", "email.spec_from_file_location(fp, _class=None)", "email._builtin_from_name(fp, _class=None)", "email._mode_from_name(fp, _class=None)", "email.filter_name(fp, _class=None)", "email._parse_release_file(fp, _class=None)", "email._signature_from_builtin(fp, _class=None)", "email._pair_from_first(fp, _class=None)"], "email.message_from_string(s)": ["message_from_string", "email._from_string(s)", "email.fromstring(s)", "email.format_string(s)", "email.message_from_file(s)", "email.create_string_buffer(s)", "email._read_string(s)", "email._commastring(s)", "email.read_string1(s)", "email.read_string4(s)", "email.message_from_bytes(s)", "email.formatstring(s)", "email._date_from_string(s)", "email.set_string_function(s)", "email._gt_from_ge(s)"], "email.message_from_string(s, _class=None)": ["message_from_string", "email.message_from_string(s, _class=None)", "email._from_string(s, _class=None)", "email.fromstring(s, _class=None)", "email.format_string(s, _class=None)", "email.message_from_file(s, _class=None)", "email.create_string_buffer(s, _class=None)", "email._read_string(s, _class=None)", "email._commastring(s, _class=None)", "email.read_string1(s, _class=None)", "email.read_string4(s, _class=None)", "email.message_from_bytes(s, _class=None)", "email.formatstring(s, _class=None)", "email._date_from_string(s, _class=None)", "email.set_string_function(s, _class=None)"], "email.message_from_string(s, policy=policy.compat32)": ["message_from_string", "email._from_string(s, policy=policy.compat32)", "email.fromstring(s, policy=policy.compat32)", "email.format_string(s, policy=policy.compat32)", "email.message_from_file(s, policy=policy.compat32)", "email.create_string_buffer(s, policy=policy.compat32)", "email._read_string(s, policy=policy.compat32)", "email._commastring(s, policy=policy.compat32)", "email.read_string1(s, policy=policy.compat32)", "email.read_string4(s, policy=policy.compat32)", "email.message_from_bytes(s, policy=policy.compat32)", "email.formatstring(s, policy=policy.compat32)", "email._date_from_string(s, policy=policy.compat32)", "email.set_string_function(s, policy=policy.compat32)", "email._gt_from_ge(s, policy=policy.compat32)"], "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream')": ["MIMEApplication", "email.mime.application.MIMEApplication(_data, **_params, _subtype=12)"], "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream', _encoder=email.encoders.encode_base64)": ["MIMEApplication", "email.mime.application.MIMEApplication(_data, **_params, _subtype=12.0, _encoder=email.encoders.encode_base64)"], "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream', _encoder=email.encoders.encode_base64, policy=compat32)": ["MIMEApplication", "email.mime.application.MIMEApplication(_data, **_params, _subtype=12.0, _encoder=email.encoders.encode_base64, policy=compat32)"], "email.mime.application.MIMEApplication(_data, **_params, _subtype='octet-stream', policy=compat32)": ["MIMEApplication", "email.mime.application.MIMEApplication(_data, **_params, _subtype=12.0, policy=compat32)"], "email.mime.audio.MIMEAudio(_audiodata, **_params)": ["MIMEAudio"], "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None)": ["MIMEAudio", "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None)"], "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None, policy=compat32)": ["MIMEAudio", "email.mime.audio.MIMEAudio(_audiodata, **_params, _subtype=None, policy=compat32)"], "email.mime.base.MIMEBase(_maintype, _subtype, **_params)": ["MIMEBase"], "email.mime.base.MIMEBase(_maintype, _subtype, **_params, policy=compat32)": ["MIMEBase"], "email.mime.image.MIMEImage(_imagedata, **_params)": ["MIMEImage"], "email.mime.image.MIMEImage(_imagedata, **_params, _encoder=email.encoders.encode_base64)": ["MIMEImage"], "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)": ["MIMEImage", "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None)"], "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None, _encoder=email.encoders.encode_base64)": ["MIMEImage", "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None, _encoder=email.encoders.encode_base64)"], "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None, policy=compat32)": ["MIMEImage", "email.mime.image.MIMEImage(_imagedata, **_params, _subtype=None, policy=compat32)"], "email.mime.image.MIMEImage(_imagedata, **_params, policy=compat32)": ["MIMEImage"], "email.mime.message.MIMEMessage(_msg)": ["MIMEMessage"], "email.mime.message.MIMEMessage(_msg, _subtype='rfc822')": ["MIMEMessage", "email.mime.message.MIMEMessage(_msg, _subtype=6)"], "email.mime.message.MIMEMessage(_msg, _subtype='rfc822', policy=compat32)": ["MIMEMessage", "email.mime.message.MIMEMessage(_msg, _subtype=6.0, policy=compat32)"], "email.mime.message.MIMEMessage(_msg, policy=compat32)": ["MIMEMessage"], "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed')": ["MIMEMultipart", "email.mime.multipart.MIMEMultipart(**_params, _subtype=5.0)"], "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', _subparts=None)": ["MIMEMultipart", "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', _subparts=None)", "email.mime.multipart.MIMEMultipart(**_params, _subtype=5.0, _subparts=None)"], "email.mime.multipart.MIMEMultipart(**_params, _subtype='mixed', policy=compat32)": ["MIMEMultipart", "email.mime.multipart.MIMEMultipart(**_params, _subtype=5, policy=compat32)"], "email.mime.multipart.MIMEMultipart(**_params, boundary=None)": ["MIMEMultipart", "email.mime.multipart.MIMEMultipart(**_params, boundary=None)"], "email.mime.multipart.MIMEMultipart(**_params, boundary=None, _subparts=None)": ["MIMEMultipart", "email.mime.multipart.MIMEMultipart(**_params, boundary=None, _subparts=None)"], "email.mime.text.MIMEText(_text, _charset=None)": ["MIMEText", "email.mime.text.MIMEText(_text, _charset=None)"], "email.mime.text.MIMEText(_text, _subtype='plain')": ["MIMEText", "email.mime.text.MIMEText(_text, _subtype=5.0)"], "email.mime.text.MIMEText(_text, _subtype='plain', _charset=None)": ["MIMEText", "email.mime.text.MIMEText(_text, _subtype='plain', _charset=None)", "email.mime.text.MIMEText(_text, _subtype=5.0, _charset=None)"], "email.parser.BytesHeaderParser(_class=None)": ["BytesHeaderParser", "email.parser.BytesHeaderParser(_class=None)"], "email.parser.BytesHeaderParser(policy=policy.compat32)": ["BytesHeaderParser"], "email.parser.BytesParser(_class=None)": ["BytesParser", "email.parser.BytesParser(_class=None)"], "email.parser.BytesParser(policy=policy.compat32)": ["BytesParser"], "email.parser.FeedParser()": ["FeedParser"], "email.parser.HeaderParser(_class=None)": ["HeaderParser", "email.parser.HeaderParser(_class=None)"], "email.parser.Parser()": ["Parser"], "email.parser.Parser(_class=None)": ["Parser", "email.parser.Parser(_class=None)"], "email.parser.Parser(policy=policy.compat32)": ["Parser"], "email.policy.Compat32(**kw)": ["Compat32"], "email.policy.HTTP": ["email.policy.HTTP"], "email.policy.Policy(**kw)": ["Policy"], "email.policy.SMTP": ["email.policy.SMTP"], "email.policy.SMTPUTF8": ["email.policy.SMTPUTF8"], "email.policy.compat32": ["email.policy.compat32"], "email.utils.collapse_rfc2231_value(value)": ["collapse_rfc2231_value", "email.utils.decode_rfc2231(value)", "email.utils.encode_rfc2231(value)", "email.utils.rfc822_escape(value)", "email.utils.set_fill_value(value)", "email.utils.default_collate(value)", "email.utils._clean_na_values(value)", "email.utils._check_fill_value(value)", "email.utils.infer_fill_value(value)", "email.utils._recursive_fill_value(value)", "email.utils._validate_rpc_args(value)", "email.utils.common_fill_value(value)", "email.utils._assert_valid_refcount(value)", "email.utils.real_if_close(value)", "email.utils.masked_values(value)"], "email.utils.collapse_rfc2231_value(value, errors='replace')": ["collapse_rfc2231_value", "email.utils.collapse_rfc2231_value(value, errors=7)", "email.utils.decode_rfc2231(value, errors='replace')", "email.utils.encode_rfc2231(value, errors='replace')", "email.utils.rfc822_escape(value, errors='replace')", "email.utils.set_fill_value(value, errors='replace')", "email.utils.default_collate(value, errors='replace')", "email.utils._clean_na_values(value, errors='replace')", "email.utils._check_fill_value(value, errors='replace')", "email.utils.infer_fill_value(value, errors='replace')", "email.utils._recursive_fill_value(value, errors='replace')", "email.utils._validate_rpc_args(value, errors='replace')", "email.utils.common_fill_value(value, errors='replace')", "email.utils._assert_valid_refcount(value, errors='replace')", "email.utils.real_if_close(value, errors='replace')"], "email.utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')": ["collapse_rfc2231_value", "email.utils.collapse_rfc2231_value(value, errors=7, fallback_charset=8.0)", "email.utils.decode_rfc2231(value, errors='replace', fallback_charset='us-ascii')", "email.utils.encode_rfc2231(value, errors='replace', fallback_charset='us-ascii')", "email.utils.rfc822_escape(value, errors='replace', fallback_charset='us-ascii')", "email.utils.set_fill_value(value, errors='replace', fallback_charset='us-ascii')", "email.utils.default_collate(value, errors='replace', fallback_charset='us-ascii')", "email.utils._clean_na_values(value, errors='replace', fallback_charset='us-ascii')", "email.utils._check_fill_value(value, errors='replace', fallback_charset='us-ascii')", "email.utils.infer_fill_value(value, errors='replace', fallback_charset='us-ascii')", "email.utils._recursive_fill_value(value, errors='replace', fallback_charset='us-ascii')", "email.utils._validate_rpc_args(value, errors='replace', fallback_charset='us-ascii')", "email.utils.common_fill_value(value, errors='replace', fallback_charset='us-ascii')", "email.utils._assert_valid_refcount(value, errors='replace', fallback_charset='us-ascii')", "email.utils.real_if_close(value, errors='replace', fallback_charset='us-ascii')"], "email.utils.collapse_rfc2231_value(value, fallback_charset='us-ascii')": ["collapse_rfc2231_value", "email.utils.collapse_rfc2231_value(value, fallback_charset=8.0)", "email.utils.decode_rfc2231(value, fallback_charset='us-ascii')", "email.utils.encode_rfc2231(value, fallback_charset='us-ascii')", "email.utils.rfc822_escape(value, fallback_charset='us-ascii')", "email.utils.set_fill_value(value, fallback_charset='us-ascii')", "email.utils.default_collate(value, fallback_charset='us-ascii')", "email.utils._clean_na_values(value, fallback_charset='us-ascii')", "email.utils._check_fill_value(value, fallback_charset='us-ascii')", "email.utils.infer_fill_value(value, fallback_charset='us-ascii')", "email.utils._recursive_fill_value(value, fallback_charset='us-ascii')", "email.utils._validate_rpc_args(value, fallback_charset='us-ascii')", "email.utils.common_fill_value(value, fallback_charset='us-ascii')", "email.utils._assert_valid_refcount(value, fallback_charset='us-ascii')", "email.utils.real_if_close(value, fallback_charset='us-ascii')"], "email.utils.decode_params(params)": ["decode_params", "email.utils._doc_params(params)", "email.utils._convert_params(params)", "email.utils.decode_header(params)", "email.utils.header_decode(params)", "email.utils.decode_q(params)", "email.utils.locator_params(params)", "email.utils.read_code(params)", "email.utils.parse_header(params)", "email.utils.decode(params)", "email.utils.header_encode(params)", "email.utils._encode_result(params)", "email.utils.decode_source(params)", "email.utils.parse_headers(params)", "email.utils.escape_decode(params)"], "email.utils.decode_rfc2231(s)": ["decode_rfc2231", "email.utils.encode_rfc2231(s)", "email.utils.rfc822_escape(s)", "email.utils.decode_source(s)", "email.utils.decode_q(s)", "email.utils.utf_8_decode(s)", "email.utils.utf_7_decode(s)", "email.utils.collapse_rfc2231_value(s)", "email.utils.decode(s)", "email.utils.decode_header(s)", "email.utils.utf_16_decode(s)", "email.utils.escape_decode(s)", "email.utils.header_decode(s)", "email.utils.utf_32_decode(s)", "email.utils.decode_params(s)"], "email.utils.encode_rfc2231(s)": ["encode_rfc2231", "email.utils.utf_8_encode(s)", "email.utils.utf_7_encode(s)", "email.utils.encode(s)", "email.utils.escape_encode(s)", "email.utils.readbuffer_encode(s)", "email.utils.hook_encoded(s)", "email.utils.utf_32_be_encode(s)", "email.utils.utf_32_le_encode(s)", "email.utils.utf_16_le_encode(s)", "email.utils.utf_16_be_encode(s)", "email.utils.escape_decode(s)", "email.utils.b64encode(s)", "email.utils.rc_context(s)", "email.utils.decode(s)"], "email.utils.encode_rfc2231(s, charset=None)": ["encode_rfc2231", "email.utils.encode_rfc2231(s, charset=None)", "email.utils.utf_8_encode(s, charset=None)", "email.utils.utf_7_encode(s, charset=None)", "email.utils.encode(s, charset=None)", "email.utils.escape_encode(s, charset=None)", "email.utils.readbuffer_encode(s, charset=None)", "email.utils.hook_encoded(s, charset=None)", "email.utils.utf_32_be_encode(s, charset=None)", "email.utils.utf_32_le_encode(s, charset=None)", "email.utils.utf_16_le_encode(s, charset=None)", "email.utils.utf_16_be_encode(s, charset=None)", "email.utils.escape_decode(s, charset=None)", "email.utils.b64encode(s, charset=None)", "email.utils.rc_context(s, charset=None)"], "email.utils.encode_rfc2231(s, charset=None, language=None)": ["encode_rfc2231", "email.utils.encode_rfc2231(s, charset=None, language=None)", "email.utils.utf_8_encode(s, charset=None, language=None)", "email.utils.utf_7_encode(s, charset=None, language=None)", "email.utils.encode(s, charset=None, language=None)", "email.utils.escape_encode(s, charset=None, language=None)", "email.utils.readbuffer_encode(s, charset=None, language=None)", "email.utils.hook_encoded(s, charset=None, language=None)", "email.utils.utf_32_be_encode(s, charset=None, language=None)", "email.utils.utf_32_le_encode(s, charset=None, language=None)", "email.utils.utf_16_le_encode(s, charset=None, language=None)", "email.utils.utf_16_be_encode(s, charset=None, language=None)", "email.utils.escape_decode(s, charset=None, language=None)", "email.utils.b64encode(s, charset=None, language=None)", "email.utils.rc_context(s, charset=None, language=None)"], "email.utils.encode_rfc2231(s, language=None)": ["encode_rfc2231", "email.utils.encode_rfc2231(s, language=None)", "email.utils.utf_8_encode(s, language=None)", "email.utils.utf_7_encode(s, language=None)", "email.utils.encode(s, language=None)", "email.utils.escape_encode(s, language=None)", "email.utils.readbuffer_encode(s, language=None)", "email.utils.hook_encoded(s, language=None)", "email.utils.utf_32_be_encode(s, language=None)", "email.utils.utf_32_le_encode(s, language=None)", "email.utils.utf_16_le_encode(s, language=None)", "email.utils.utf_16_be_encode(s, language=None)", "email.utils.escape_decode(s, language=None)", "email.utils.b64encode(s, language=None)", "email.utils.rc_context(s, language=None)"], "email.utils.format_datetime(dt)": ["format_datetime", "email.utils._unparse_datetime(dt)", "email.utils.safeimport(dt)", "email.utils._declname_match(dt)", "email.utils.kaiming_normal_(dt)", "email.utils.kaiming_uniform_(dt)", "email.utils._concat_datetime(dt)", "email.utils.platform(dt)", "email.utils.flatten_dtype(dt)", "email.utils.formatdate(dt)", "email.utils._declstringlit_match(dt)", "email.utils._non_atom_end_matcher(dt)", "email.utils._non_attribute_end_matcher(dt)", "email.utils.ontimer(dt)", "email.utils.rewrite_name(dt)"], "email.utils.format_datetime(dt, usegmt=False)": ["format_datetime", "email.utils.format_datetime(dt, usegmt=True)", "email.utils._unparse_datetime(dt, usegmt=False)", "email.utils.safeimport(dt, usegmt=False)", "email.utils._declname_match(dt, usegmt=False)", "email.utils.kaiming_normal_(dt, usegmt=False)", "email.utils.kaiming_uniform_(dt, usegmt=False)", "email.utils._concat_datetime(dt, usegmt=False)", "email.utils.platform(dt, usegmt=False)", "email.utils.flatten_dtype(dt, usegmt=False)", "email.utils.formatdate(dt, usegmt=False)", "email.utils._declstringlit_match(dt, usegmt=False)", "email.utils._non_atom_end_matcher(dt, usegmt=False)", "email.utils._non_attribute_end_matcher(dt, usegmt=False)", "email.utils.ontimer(dt, usegmt=False)"], "email.utils.formataddr(pair)": ["formataddr", "email.utils.encode(pair)", "email.utils.decode(pair)", "email.utils.unquote(pair)", "email.utils.unquote_plus(pair)", "email.utils._formatparam(pair)", "email.utils._formatArray(pair)", "email.utils.format(pair)", "email.utils._format(pair)", "email.utils.pformat(pair)", "email.utils._formatwarnmsg(pair)", "email.utils.str_format(pair)", "email.utils.formatargspec(pair)", "email.utils.formatdate(pair)", "email.utils.formatwarning(pair)"], "email.utils.formataddr(pair, charset='utf-8')": ["formataddr", "email.utils.formataddr(pair, charset=5)", "email.utils.encode(pair, charset='utf-8')", "email.utils.decode(pair, charset='utf-8')", "email.utils.unquote(pair, charset='utf-8')", "email.utils.unquote_plus(pair, charset='utf-8')", "email.utils._formatparam(pair, charset='utf-8')", "email.utils._formatArray(pair, charset='utf-8')", "email.utils.format(pair, charset='utf-8')", "email.utils._format(pair, charset='utf-8')", "email.utils.pformat(pair, charset='utf-8')", "email.utils._formatwarnmsg(pair, charset='utf-8')", "email.utils.str_format(pair, charset='utf-8')", "email.utils.formatargspec(pair, charset='utf-8')", "email.utils.formatdate(pair, charset='utf-8')"], "email.utils.formatdate()": ["formatdate", "email.utils.random_state()", "email.utils.colormode()", "email.utils._make_date_converter()", "email.utils.validate_map_location()", "email.utils.mode()", "email.utils.removeHandler()", "email.utils.resizemode()", "email.utils.makePeriodFrame()", "email.utils.makeFloatSeries()", "email.utils._all_tasks_compat()", "email.utils.post_mortem()", "email.utils.localcontext()", "email.utils.delaxes()", "email.utils.token_urlsafe()"], "email.utils.formatdate(localtime=False)": ["formatdate", "email.utils.formatdate(localtime=True)", "email.utils.random_state(localtime=False)", "email.utils.colormode(localtime=False)", "email.utils._make_date_converter(localtime=False)", "email.utils.validate_map_location(localtime=False)", "email.utils.mode(localtime=False)", "email.utils.removeHandler(localtime=False)", "email.utils.resizemode(localtime=False)", "email.utils.makePeriodFrame(localtime=False)", "email.utils.makeFloatSeries(localtime=False)", "email.utils._all_tasks_compat(localtime=False)", "email.utils.post_mortem(localtime=False)", "email.utils.localcontext(localtime=False)", "email.utils.delaxes(localtime=False)"], "email.utils.formatdate(localtime=False, usegmt=False)": ["formatdate", "email.utils.formatdate(localtime=True, usegmt=True)", "email.utils.random_state(localtime=False, usegmt=False)", "email.utils.colormode(localtime=False, usegmt=False)", "email.utils._make_date_converter(localtime=False, usegmt=False)", "email.utils.validate_map_location(localtime=False, usegmt=False)", "email.utils.mode(localtime=False, usegmt=False)", "email.utils.removeHandler(localtime=False, usegmt=False)", "email.utils.resizemode(localtime=False, usegmt=False)", "email.utils.makePeriodFrame(localtime=False, usegmt=False)", "email.utils.makeFloatSeries(localtime=False, usegmt=False)", "email.utils._all_tasks_compat(localtime=False, usegmt=False)", "email.utils.post_mortem(localtime=False, usegmt=False)", "email.utils.localcontext(localtime=False, usegmt=False)", "email.utils.delaxes(localtime=False, usegmt=False)"], "email.utils.formatdate(timeval=None)": ["formatdate", "email.utils.formatdate(timeval=None)", "email.utils.random_state(timeval=None)", "email.utils.colormode(timeval=None)", "email.utils._make_date_converter(timeval=None)", "email.utils.validate_map_location(timeval=None)", "email.utils.mode(timeval=None)", "email.utils.removeHandler(timeval=None)", "email.utils.resizemode(timeval=None)", "email.utils.makePeriodFrame(timeval=None)", "email.utils.makeFloatSeries(timeval=None)", "email.utils._all_tasks_compat(timeval=None)", "email.utils.post_mortem(timeval=None)", "email.utils.localcontext(timeval=None)", "email.utils.delaxes(timeval=None)"], "email.utils.formatdate(timeval=None, localtime=False)": ["formatdate", "email.utils.formatdate(timeval=None, localtime=True)", "email.utils.random_state(timeval=None, localtime=False)", "email.utils.colormode(timeval=None, localtime=False)", "email.utils._make_date_converter(timeval=None, localtime=False)", "email.utils.validate_map_location(timeval=None, localtime=False)", "email.utils.mode(timeval=None, localtime=False)", "email.utils.removeHandler(timeval=None, localtime=False)", "email.utils.resizemode(timeval=None, localtime=False)", "email.utils.makePeriodFrame(timeval=None, localtime=False)", "email.utils.makeFloatSeries(timeval=None, localtime=False)", "email.utils._all_tasks_compat(timeval=None, localtime=False)", "email.utils.post_mortem(timeval=None, localtime=False)", "email.utils.localcontext(timeval=None, localtime=False)", "email.utils.delaxes(timeval=None, localtime=False)"], "email.utils.formatdate(timeval=None, localtime=False, usegmt=False)": ["formatdate", "email.utils.formatdate(timeval=None, localtime=True, usegmt=True)", "email.utils.random_state(timeval=None, localtime=False, usegmt=False)", "email.utils.colormode(timeval=None, localtime=False, usegmt=False)", "email.utils._make_date_converter(timeval=None, localtime=False, usegmt=False)", "email.utils.validate_map_location(timeval=None, localtime=False, usegmt=False)", "email.utils.mode(timeval=None, localtime=False, usegmt=False)", "email.utils.removeHandler(timeval=None, localtime=False, usegmt=False)", "email.utils.resizemode(timeval=None, localtime=False, usegmt=False)", "email.utils.makePeriodFrame(timeval=None, localtime=False, usegmt=False)", "email.utils.makeFloatSeries(timeval=None, localtime=False, usegmt=False)", "email.utils._all_tasks_compat(timeval=None, localtime=False, usegmt=False)", "email.utils.post_mortem(timeval=None, localtime=False, usegmt=False)", "email.utils.localcontext(timeval=None, localtime=False, usegmt=False)", "email.utils.delaxes(timeval=None, localtime=False, usegmt=False)"], "email.utils.formatdate(timeval=None, usegmt=False)": ["formatdate", "email.utils.formatdate(timeval=None, usegmt=True)", "email.utils.random_state(timeval=None, usegmt=False)", "email.utils.colormode(timeval=None, usegmt=False)", "email.utils._make_date_converter(timeval=None, usegmt=False)", "email.utils.validate_map_location(timeval=None, usegmt=False)", "email.utils.mode(timeval=None, usegmt=False)", "email.utils.removeHandler(timeval=None, usegmt=False)", "email.utils.resizemode(timeval=None, usegmt=False)", "email.utils.makePeriodFrame(timeval=None, usegmt=False)", "email.utils.makeFloatSeries(timeval=None, usegmt=False)", "email.utils._all_tasks_compat(timeval=None, usegmt=False)", "email.utils.post_mortem(timeval=None, usegmt=False)", "email.utils.localcontext(timeval=None, usegmt=False)", "email.utils.delaxes(timeval=None, usegmt=False)"], "email.utils.formatdate(usegmt=False)": ["formatdate", "email.utils.formatdate(usegmt=True)", "email.utils.random_state(usegmt=False)", "email.utils.colormode(usegmt=False)", "email.utils._make_date_converter(usegmt=False)", "email.utils.validate_map_location(usegmt=False)", "email.utils.mode(usegmt=False)", "email.utils.removeHandler(usegmt=False)", "email.utils.resizemode(usegmt=False)", "email.utils.makePeriodFrame(usegmt=False)", "email.utils.makeFloatSeries(usegmt=False)", "email.utils._all_tasks_compat(usegmt=False)", "email.utils.post_mortem(usegmt=False)", "email.utils.localcontext(usegmt=False)", "email.utils.delaxes(usegmt=False)"], "email.utils.localtime()": ["localtime", "email.utils.localcontext()", "email.utils.validate_map_location()", "email.utils.makeFloatSeries()", "email.utils.colormode()", "email.utils.tiltangle()", "email.utils.close()", "email.utils.clearstamps()", "email.utils.makeObjectSeries()", "email.utils.delaxes()", "email.utils.scandir()", "email.utils.listdir()", "email.utils.Comment()", "email.utils.random_state()", "email.utils.log_to_stderr()"], "email.utils.localtime(dt=None)": ["localtime", "email.utils.localtime(dt=None)", "email.utils.localcontext(dt=None)", "email.utils.validate_map_location(dt=None)", "email.utils.makeFloatSeries(dt=None)", "email.utils.colormode(dt=None)", "email.utils.tiltangle(dt=None)", "email.utils.close(dt=None)", "email.utils.clearstamps(dt=None)", "email.utils.makeObjectSeries(dt=None)", "email.utils.delaxes(dt=None)", "email.utils.scandir(dt=None)", "email.utils.listdir(dt=None)", "email.utils.Comment(dt=None)", "email.utils.random_state(dt=None)"], "email.utils.make_msgid(idstring=None)": ["make_msgid", "email.utils.make_msgid(idstring=None)", "email.utils.makeStringSeries(idstring=None)", "email.utils.askquestion(idstring=None)", "email.utils.get_backend(idstring=None)", "email.utils.makePeriodFrame(idstring=None)", "email.utils.makeFloatSeries(idstring=None)", "email.utils.mkdtemp(idstring=None)", "email.utils.mkstemp(idstring=None)", "email.utils.makePeriodSeries(idstring=None)", "email.utils.makeObjectSeries(idstring=None)", "email.utils.askyesno(idstring=None)", "email.utils._make_options_dict(idstring=None)", "email.utils.get_cmap(idstring=None)", "email.utils.main(idstring=None)"], "email.utils.make_msgid(idstring=None, domain=None)": ["make_msgid", "email.utils.make_msgid(idstring=None, domain=None)", "email.utils.makeStringSeries(idstring=None, domain=None)", "email.utils.askquestion(idstring=None, domain=None)", "email.utils.get_backend(idstring=None, domain=None)", "email.utils.makePeriodFrame(idstring=None, domain=None)", "email.utils.makeFloatSeries(idstring=None, domain=None)", "email.utils.mkdtemp(idstring=None, domain=None)", "email.utils.mkstemp(idstring=None, domain=None)", "email.utils.makePeriodSeries(idstring=None, domain=None)", "email.utils.makeObjectSeries(idstring=None, domain=None)", "email.utils.askyesno(idstring=None, domain=None)", "email.utils._make_options_dict(idstring=None, domain=None)", "email.utils.get_cmap(idstring=None, domain=None)", "email.utils.main(idstring=None, domain=None)"], "email.utils.mktime_tz(tuple)": ["mktime_tz", "email.utils.to_time(tuple)", "email.utils.timeit(tuple)", "email.utils._time(tuple)", "email.utils.getmtime(tuple)", "email.utils.utime(tuple)", "email.utils.to_timedelta(tuple)", "email.utils.times(tuple)", "email.utils.make_stub(tuple)", "email.utils._strptime_time(tuple)", "email.utils._check_timeout(tuple)", "email.utils.makeTimeDataFrame(tuple)", "email.utils.mktemp(tuple)", "email.utils._trim_zeros(tuple)", "email.utils.make_tuple(tuple)"], "email.utils.parseaddr(address)": ["parseaddr", "email.utils._parser(address)", "email.utils.parseargs(address)", "email.utils._parseparam(address)", "email.utils.pread(address)", "email.utils._parse(address)", "email.utils.parse(address)", "email.utils.parse_url(address)", "email.utils.preadv(address)", "email.utils.parsedate(address)", "email.utils.sparse(address)", "email.utils.sparse_(address)", "email.utils.TextParser(address)", "email.utils.parsefield(address)", "email.utils.ParseFlags(address)"], "email.utils.parsedate(date)": ["parsedate", "email.utils.parsedate_tz(date)", "email.utils._parsedate_tz(date)", "email.utils.ParserCreate(date)", "email.utils._parse(date)", "email.utils.parse(date)", "email.utils.parse_template(date)", "email.utils.update(date)", "email.utils.parseaddr(date)", "email.utils.deprecate(date)", "email.utils.parseline(date)", "email.utils.create(date)", "email.utils._parser(date)", "email.utils.sparse(date)", "email.utils.parseargs(date)"], "email.utils.parsedate_to_datetime(date)": ["parsedate_to_datetime", "email.utils._parse_datetime(date)", "email.utils._unparse_datetime(date)", "email.utils._datetime_metadata_str(date)", "email.utils.format_datetime(date)", "email.utils.parsedate_tz(date)", "email.utils._parsedate_tz(date)", "email.utils.parse_date_time(date)", "email.utils.objects_to_datetime64ns(date)", "email.utils.parse_date_fields(date)", "email.utils._strptime_datetime(date)", "email.utils._validate_parse_dates_arg(date)", "email.utils.maybe_unbox_datetimelike_tz_deprecation(date)", "email.utils.parsedate(date)", "email.utils._flatten_sparse_tensors(date)"], "email.utils.parsedate_tz(date)": ["parsedate_tz", "email.utils._parsedate_tz(date)", "email.utils.parsedate(date)", "email.utils.ParserCreate(date)", "email.utils.parsedate_to_datetime(date)", "email.utils._parse_size(date)", "email.utils.parse_template(date)", "email.utils._create_tree(date)", "email.utils.prepare_qat(date)", "email.utils.create_task(date)", "email.utils.parametrize(date)", "email.utils.create_tree(date)", "email.utils._tz_replacer(date)", "email.utils.parse_qs(date)", "email.utils._parse(date)"], "email.utils.quote(str)": ["quote", "email.utils.quote_from_bytes(str)", "email.utils.urlquote_from_bytes(str)", "email.utils.quote_plus(str)", "email.utils.quantile(str)", "email.utils.utime(str)", "email.utils.remote(str)", "email.utils.nanquantile(str)", "email.utils.require(str)", "email.utils.execute(str)", "email.utils.read_parquet(str)", "email.utils.take(str)", "email.utils.stem(str)", "email.utils.sort(str)", "email.utils.outer(str)"], "email.utils.unquote(str)": ["unquote", "email.utils.unquote_plus(str)", "email.utils.formataddr(str)", "email.utils.encode(str)", "email.utils.quote(str)", "email.utils.decode(str)", "email.utils.unique(str)", "email.utils._unquotevalue(str)", "email.utils.quote_plus(str)", "email.utils._unquote_match(str)", "email.utils.unique1d(str)", "email.utils._unique1d(str)", "email.utils.quotedata(str)", "email.utils.unused(str)", "email.utils.unique_id(str)"], "email_message.__bytes__()": ["__bytes__"], "email_message.__getitem__(name)": ["__getitem__"], "email_message.__len__()": ["__len__"], "email_message.__setitem__(name, val)": ["__setitem__"], "email_message.__str__()": ["__str__"], "email_message.add_alternative(*args, **kw)": ["add_alternative"], "email_message.add_header(_name, _value, **_params)": ["add_header"], "email_message.add_related(*args, **kw)": ["add_related"], "email_message.as_bytes(policy=None)": ["as_bytes", "email_message.as_bytes(policy=None)"], "email_message.as_string()": ["as_string"], "email_message.as_string(policy=None)": ["as_string", "email_message.as_string(policy=None)"], "email_message.clear()": ["clear"], "email_message.clear_content()": ["clear_content"], "email_message.defects": ["email_message.defects"], "email_message.del_param(param)": ["del_param"], "email_message.del_param(param, header='content-type')": ["del_param", "email_message.del_param(param, header=12.0)"], "email_message.del_param(param, requote=True)": ["del_param", "email_message.del_param(param, requote=False)"], "email_message.epilogue": ["email_message.epilogue"], "email_message.get_all(name)": ["get_all"], "email_message.get_all(name, failobj=None)": ["get_all", "email_message.get_all(name, failobj=None)"], "email_message.get_body('html', 'plain'))": [], "email_message.get_body('html', 'plain'), preferencelist=('related')": [], "email_message.get_boundary()": ["get_boundary"], "email_message.get_boundary(failobj=None)": ["get_boundary", "email_message.get_boundary(failobj=None)"], "email_message.get_charsets()": ["get_charsets"], "email_message.get_charsets(failobj=None)": ["get_charsets", "email_message.get_charsets(failobj=None)"], "email_message.get_content(*args, **kw)": ["get_content"], "email_message.get_content_maintype()": ["get_content_maintype"], "email_message.get_content_subtype()": ["get_content_subtype"], "email_message.is_multipart()": ["is_multipart"], "email_message.iter_attachments()": ["iter_attachments"], "email_message.iter_parts()": ["iter_parts"], "email_message.keys()": ["keys"], "email_message.make_alternative(boundary=None)": ["make_alternative", "email_message.make_alternative(boundary=None)"], "email_message.make_related()": ["make_related"], "email_message.make_related(boundary=None)": ["make_related", "email_message.make_related(boundary=None)"], "email_message.preamble": ["email_message.preamble"], "email_message.replace_header(_name, _value)": ["replace_header"], "email_message.set_boundary(boundary)": ["set_boundary"], "email_message.set_content(*args, **kw)": ["set_content"], "email_message.set_content(*args, **kw, content_manager=None)": ["set_content", "email_message.set_content(*args, **kw, content_manager=None)"], "email_message.set_default_type(ctype)": ["set_default_type"], "email_message.set_param(param, value)": ["set_param"], "email_message.set_param(param, value, header='Content-Type')": ["set_param", "email_message.set_param(param, value, header=12.0)"], "email_message.set_param(param, value, header='Content-Type', charset=None)": ["set_param", "email_message.set_param(param, value, header='Content-Type', charset=None)", "email_message.set_param(param, value, header=12.0, charset=None)"], "email_message.set_param(param, value, language='')": ["set_param", "email_message.set_param(param, value, language=0)"], "email_message.set_param(param, value, replace=False)": ["set_param", "email_message.set_param(param, value, replace=True)"], "email_message.set_param(param, value, requote=True)": ["set_param", "email_message.set_param(param, value, requote=False)"], "email_message.values()": ["values"], "email_message.walk()": ["walk"], "email_policy.content_manager": ["email_policy.content_manager"], "email_policy.fold(name, value)": ["fold"], "email_policy.header_factory": ["email_policy.header_factory"], "email_policy.header_fetch_parse(name, value)": ["header_fetch_parse"], "email_policy.header_source_parse(sourcelines)": ["header_source_parse"], "email_policy.header_store_parse(name, value)": ["header_store_parse"], "email_policy.refold_source": ["email_policy.refold_source"], "email_policy.utf8": ["email_policy.utf8"], "encodings.idna.ToASCII(label)": ["ToASCII"], "encodings.idna.ToUnicode(label)": ["ToUnicode"], "encodings.idna.nameprep(label)": ["nameprep"], "ensurepip.bootstrap()": ["bootstrap", "ensurepip._bootstrap()", "ensurepip.test()", "ensurepip.set_trace()", "ensurepip.shape()", "ensurepip.token_bytes()", "ensurepip.post_mortem()", "ensurepip.clearstamps()", "ensurepip.localcontext()", "ensurepip.subplot_tool()", "ensurepip.listdir()", "ensurepip.random_state()", "ensurepip.log_to_stderr()", "ensurepip.get_rank()", "ensurepip.colormode()"], "ensurepip.bootstrap(default_pip=False)": ["bootstrap", "ensurepip.bootstrap(default_pip=True)", "ensurepip._bootstrap(default_pip=False)", "ensurepip.test(default_pip=False)", "ensurepip.set_trace(default_pip=False)", "ensurepip.shape(default_pip=False)", "ensurepip.token_bytes(default_pip=False)", "ensurepip.post_mortem(default_pip=False)", "ensurepip.clearstamps(default_pip=False)", "ensurepip.localcontext(default_pip=False)", "ensurepip.subplot_tool(default_pip=False)", "ensurepip.listdir(default_pip=False)", "ensurepip.random_state(default_pip=False)", "ensurepip.log_to_stderr(default_pip=False)", "ensurepip.get_rank(default_pip=False)"], "ensurepip.bootstrap(root=None)": ["bootstrap", "ensurepip.bootstrap(root=None)", "ensurepip._bootstrap(root=None)", "ensurepip.test(root=None)", "ensurepip.set_trace(root=None)", "ensurepip.shape(root=None)", "ensurepip.token_bytes(root=None)", "ensurepip.post_mortem(root=None)", "ensurepip.clearstamps(root=None)", "ensurepip.localcontext(root=None)", "ensurepip.subplot_tool(root=None)", "ensurepip.listdir(root=None)", "ensurepip.random_state(root=None)", "ensurepip.log_to_stderr(root=None)", "ensurepip.get_rank(root=None)"], "ensurepip.bootstrap(root=None, altinstall=False)": ["bootstrap", "ensurepip.bootstrap(root=None, altinstall=True)", "ensurepip._bootstrap(root=None, altinstall=False)", "ensurepip.test(root=None, altinstall=False)", "ensurepip.set_trace(root=None, altinstall=False)", "ensurepip.shape(root=None, altinstall=False)", "ensurepip.token_bytes(root=None, altinstall=False)", "ensurepip.post_mortem(root=None, altinstall=False)", "ensurepip.clearstamps(root=None, altinstall=False)", "ensurepip.localcontext(root=None, altinstall=False)", "ensurepip.subplot_tool(root=None, altinstall=False)", "ensurepip.listdir(root=None, altinstall=False)", "ensurepip.random_state(root=None, altinstall=False)", "ensurepip.log_to_stderr(root=None, altinstall=False)", "ensurepip.get_rank(root=None, altinstall=False)"], "ensurepip.bootstrap(root=None, upgrade=False)": ["bootstrap", "ensurepip.bootstrap(root=None, upgrade=True)", "ensurepip._bootstrap(root=None, upgrade=False)", "ensurepip.test(root=None, upgrade=False)", "ensurepip.set_trace(root=None, upgrade=False)", "ensurepip.shape(root=None, upgrade=False)", "ensurepip.token_bytes(root=None, upgrade=False)", "ensurepip.post_mortem(root=None, upgrade=False)", "ensurepip.clearstamps(root=None, upgrade=False)", "ensurepip.localcontext(root=None, upgrade=False)", "ensurepip.subplot_tool(root=None, upgrade=False)", "ensurepip.listdir(root=None, upgrade=False)", "ensurepip.random_state(root=None, upgrade=False)", "ensurepip.log_to_stderr(root=None, upgrade=False)", "ensurepip.get_rank(root=None, upgrade=False)"], "ensurepip.bootstrap(root=None, user=False)": ["bootstrap", "ensurepip.bootstrap(root=None, user=True)", "ensurepip._bootstrap(root=None, user=False)", "ensurepip.test(root=None, user=False)", "ensurepip.set_trace(root=None, user=False)", "ensurepip.shape(root=None, user=False)", "ensurepip.token_bytes(root=None, user=False)", "ensurepip.post_mortem(root=None, user=False)", "ensurepip.clearstamps(root=None, user=False)", "ensurepip.localcontext(root=None, user=False)", "ensurepip.subplot_tool(root=None, user=False)", "ensurepip.listdir(root=None, user=False)", "ensurepip.random_state(root=None, user=False)", "ensurepip.log_to_stderr(root=None, user=False)", "ensurepip.get_rank(root=None, user=False)"], "ensurepip.bootstrap(upgrade=False)": ["bootstrap", "ensurepip.bootstrap(upgrade=True)", "ensurepip._bootstrap(upgrade=False)", "ensurepip.test(upgrade=False)", "ensurepip.set_trace(upgrade=False)", "ensurepip.shape(upgrade=False)", "ensurepip.token_bytes(upgrade=False)", "ensurepip.post_mortem(upgrade=False)", "ensurepip.clearstamps(upgrade=False)", "ensurepip.localcontext(upgrade=False)", "ensurepip.subplot_tool(upgrade=False)", "ensurepip.listdir(upgrade=False)", "ensurepip.random_state(upgrade=False)", "ensurepip.log_to_stderr(upgrade=False)", "ensurepip.get_rank(upgrade=False)"], "ensurepip.bootstrap(user=False)": ["bootstrap", "ensurepip.bootstrap(user=True)", "ensurepip._bootstrap(user=False)", "ensurepip.test(user=False)", "ensurepip.set_trace(user=False)", "ensurepip.shape(user=False)", "ensurepip.token_bytes(user=False)", "ensurepip.post_mortem(user=False)", "ensurepip.clearstamps(user=False)", "ensurepip.localcontext(user=False)", "ensurepip.subplot_tool(user=False)", "ensurepip.listdir(user=False)", "ensurepip.random_state(user=False)", "ensurepip.log_to_stderr(user=False)", "ensurepip.get_rank(user=False)"], "ensurepip.bootstrap(verbosity=0)": ["bootstrap", "ensurepip.bootstrap(verbosity='0')", "ensurepip._bootstrap(verbosity=0)", "ensurepip.test(verbosity=0)", "ensurepip.set_trace(verbosity=0)", "ensurepip.shape(verbosity=0)", "ensurepip.token_bytes(verbosity=0)", "ensurepip.post_mortem(verbosity=0)", "ensurepip.clearstamps(verbosity=0)", "ensurepip.localcontext(verbosity=0)", "ensurepip.subplot_tool(verbosity=0)", "ensurepip.listdir(verbosity=0)", "ensurepip.random_state(verbosity=0)", "ensurepip.log_to_stderr(verbosity=0)", "ensurepip.get_rank(verbosity=0)"], "ensurepip.version()": ["version", "ensurepip._sys_version()", "ensurepip._recursion()", "ensurepip._norm_version()", "ensurepip.get_versions()", "ensurepip._check_version()", "ensurepip.python_version()", "ensurepip.arcsin()", "ensurepip.verify()", "ensurepip.win32_ver()", "ensurepip._sin()", "ensurepip.ion()", "ensurepip.hermint()", "ensurepip.hessian()", "ensurepip.ErrorString()"], "enum.Enum": ["enum.Enum"], "enum.Flag": ["enum.Flag"], "enum.IntFlag": ["enum.IntFlag"], "enum.auto": ["enum.auto"], "enum.unique()": ["unique", "enum.unique1d()", "enum._unique1d()", "enum.unique_id()", "enum._uniq()", "enum.unquote()", "enum.unused()", "enum.nice()", "enum._use_unicode()", "enum.quantile()", "enum.quantize()", "enum.unquote_plus()", "enum._unquotevalue()", "enum.utime()", "enum.unhex()"], "enumerate(iterable)": ["enumerate", "_enumerate(iterable)", "ensure_relative(iterable)", "to_numeric(iterable)", "generate_range(iterable)", "_test_generator(iterable)", "interactive(iterable)", "isgenerator(iterable)", "einsum_path(iterable)", "getuserbase(iterable)", "use_numexpr(iterable)", "_getuserbase(iterable)", "interpolate(iterable)", "_ensure_term(iterable)", "_cnfmerge(iterable)"], "enumerate(iterable, start=0)": ["enumerate", "enumerate(iterable, start='0')", "_enumerate(iterable, start=0)", "ensure_relative(iterable, start=0)", "to_numeric(iterable, start=0)", "generate_range(iterable, start=0)", "_test_generator(iterable, start=0)", "interactive(iterable, start=0)", "isgenerator(iterable, start=0)", "einsum_path(iterable, start=0)", "getuserbase(iterable, start=0)", "use_numexpr(iterable, start=0)", "_getuserbase(iterable, start=0)", "interpolate(iterable, start=0)", "_ensure_term(iterable, start=0)"], "env_builder.create(env_dir)": ["create"], "env_builder.create_configuration(context)": ["create_configuration"], "env_builder.install_scripts(context, path)": ["install_scripts"], "env_builder.post_setup(context)": ["post_setup"], "env_builder.setup_python(context)": ["setup_python"], "env_builder.setup_scripts(context)": ["setup_scripts"], "epoll.fileno()": ["fileno"], "epoll.fromfd(fd)": ["fromfd"], "epoll.modify(fd, eventmask)": ["modify"], "epoll.poll()": ["poll"], "epoll.poll(maxevents=-1)": ["poll", "epoll.poll(maxevents=(- '1'))"], "epoll.poll(timeout=-1)": ["poll", "epoll.poll(timeout=(- '1'))"], "epoll.poll(timeout=-1, maxevents=-1)": ["poll", "epoll.poll(timeout=(- '1'), maxevents=(- '1'))"], "epoll.register(fd)": ["register"], "epoll.register(fd, eventmask)": ["register"], "epoll.unregister(fd)": ["unregister"], "errno.E2BIG": ["errno.E2BIG"], "errno.EACCES": ["errno.EACCES"], "errno.EADDRINUSE": ["errno.EADDRINUSE"], "errno.EADDRNOTAVAIL": ["errno.EADDRNOTAVAIL"], "errno.EAGAIN": ["errno.EAGAIN"], "errno.EALREADY": ["errno.EALREADY"], "errno.EBADE": ["errno.EBADE"], "errno.EBADF": ["errno.EBADF"], "errno.EBADFD": ["errno.EBADFD"], "errno.EBADMSG": ["errno.EBADMSG"], "errno.EBADR": ["errno.EBADR"], "errno.EBADRQC": ["errno.EBADRQC"], "errno.EBADSLT": ["errno.EBADSLT"], "errno.EBFONT": ["errno.EBFONT"], "errno.EBUSY": ["errno.EBUSY"], "errno.ECHILD": ["errno.ECHILD"], "errno.ECHRNG": ["errno.ECHRNG"], "errno.ECOMM": ["errno.ECOMM"], "errno.ECONNABORTED": ["errno.ECONNABORTED"], "errno.ECONNREFUSED": ["errno.ECONNREFUSED"], "errno.ECONNRESET": ["errno.ECONNRESET"], "errno.EDEADLK": ["errno.EDEADLK"], "errno.EDEADLOCK": ["errno.EDEADLOCK"], "errno.EDESTADDRREQ": ["errno.EDESTADDRREQ"], "errno.EDOM": ["errno.EDOM"], "errno.EEXIST": ["errno.EEXIST"], "errno.EFAULT": ["errno.EFAULT"], "errno.EFBIG": ["errno.EFBIG"], "errno.EHOSTDOWN": ["errno.EHOSTDOWN"], "errno.EHOSTUNREACH": ["errno.EHOSTUNREACH"], "errno.EIDRM": ["errno.EIDRM"], "errno.EINPROGRESS": ["errno.EINPROGRESS"], "errno.EINTR": ["errno.EINTR"], "errno.EINVAL": ["errno.EINVAL"], "errno.EIO": ["errno.EIO"], "errno.EISCONN": ["errno.EISCONN"], "errno.EISDIR": ["errno.EISDIR"], "errno.EL2HLT": ["errno.EL2HLT"], "errno.EL3HLT": ["errno.EL3HLT"], "errno.EL3RST": ["errno.EL3RST"], "errno.ELIBACC": ["errno.ELIBACC"], "errno.ELIBBAD": ["errno.ELIBBAD"], "errno.ELIBEXEC": ["errno.ELIBEXEC"], "errno.ELIBMAX": ["errno.ELIBMAX"], "errno.ELIBSCN": ["errno.ELIBSCN"], "errno.ELNRNG": ["errno.ELNRNG"], "errno.ELOOP": ["errno.ELOOP"], "errno.EMFILE": ["errno.EMFILE"], "errno.EMLINK": ["errno.EMLINK"], "errno.EMSGSIZE": ["errno.EMSGSIZE"], "errno.ENAMETOOLONG": ["errno.ENAMETOOLONG"], "errno.ENETDOWN": ["errno.ENETDOWN"], "errno.ENETRESET": ["errno.ENETRESET"], "errno.ENETUNREACH": ["errno.ENETUNREACH"], "errno.ENOCSI": ["errno.ENOCSI"], "errno.ENODEV": ["errno.ENODEV"], "errno.ENOENT": ["errno.ENOENT"], "errno.ENOLCK": ["errno.ENOLCK"], "errno.ENOLINK": ["errno.ENOLINK"], "errno.ENOMEM": ["errno.ENOMEM"], "errno.ENOMSG": ["errno.ENOMSG"], "errno.ENONET": ["errno.ENONET"], "errno.ENOPKG": ["errno.ENOPKG"], "errno.ENOSPC": ["errno.ENOSPC"], "errno.ENOSR": ["errno.ENOSR"], "errno.ENOSYS": ["errno.ENOSYS"], "errno.ENOTBLK": ["errno.ENOTBLK"], "errno.ENOTCONN": ["errno.ENOTCONN"], "errno.ENOTDIR": ["errno.ENOTDIR"], "errno.ENOTEMPTY": ["errno.ENOTEMPTY"], "errno.ENOTSOCK": ["errno.ENOTSOCK"], "errno.ENOTTY": ["errno.ENOTTY"], "errno.ENOTUNIQ": ["errno.ENOTUNIQ"], "errno.EOVERFLOW": ["errno.EOVERFLOW"], "errno.EPERM": ["errno.EPERM"], "errno.EPIPE": ["errno.EPIPE"], "errno.EPROTOTYPE": ["errno.EPROTOTYPE"], "errno.ERANGE": ["errno.ERANGE"], "errno.EREMCHG": ["errno.EREMCHG"], "errno.EREMOTE": ["errno.EREMOTE"], "errno.EREMOTEIO": ["errno.EREMOTEIO"], "errno.EROFS": ["errno.EROFS"], "errno.ESHUTDOWN": ["errno.ESHUTDOWN"], "errno.ESPIPE": ["errno.ESPIPE"], "errno.ESRCH": ["errno.ESRCH"], "errno.ESTALE": ["errno.ESTALE"], "errno.ESTRPIPE": ["errno.ESTRPIPE"], "errno.ETIME": ["errno.ETIME"], "errno.ETIMEDOUT": ["errno.ETIMEDOUT"], "errno.ETOOMANYREFS": ["errno.ETOOMANYREFS"], "errno.ETXTBSY": ["errno.ETXTBSY"], "errno.EUCLEAN": ["errno.EUCLEAN"], "errno.EUNATCH": ["errno.EUNATCH"], "errno.EUSERS": ["errno.EUSERS"], "errno.EWOULDBLOCK": ["errno.EWOULDBLOCK"], "errno.EXDEV": ["errno.EXDEV"], "errno.EXFULL": ["errno.EXFULL"], "errno.errorcode": ["errno.errorcode"], "eval(expression)": ["eval", "runeval(expression)", "testfile(expression)", "_get_fill_value(expression)", "fwalk(expression)", "_readmodule(expression)", "repeat(expression)", "delete(expression)", "_nanvar_dispatcher(expression)", "get_schema(expression)", "table_exists(expression)", "_wrap_result(expression)", "interpolate(expression)", "findall(expression)", "getline(expression)"], "eval(expression, globals)": ["eval", "runeval(expression, globals)", "testfile(expression, globals)", "_get_fill_value(expression, globals)", "fwalk(expression, globals)", "_readmodule(expression, globals)", "repeat(expression, globals)", "delete(expression, globals)", "_nanvar_dispatcher(expression, globals)", "get_schema(expression, globals)", "table_exists(expression, globals)", "_wrap_result(expression, globals)", "interpolate(expression, globals)", "findall(expression, globals)", "getline(expression, globals)"], "eval(expression, globals, locals)": ["eval", "runeval(expression, globals, locals)", "testfile(expression, globals, locals)", "_get_fill_value(expression, globals, locals)", "fwalk(expression, globals, locals)", "_readmodule(expression, globals, locals)", "repeat(expression, globals, locals)", "delete(expression, globals, locals)", "_nanvar_dispatcher(expression, globals, locals)", "get_schema(expression, globals, locals)", "table_exists(expression, globals, locals)", "_wrap_result(expression, globals, locals)", "interpolate(expression, globals, locals)", "findall(expression, globals, locals)", "getline(expression, globals, locals)"], "event.clear()": ["clear"], "event.set()": ["set"], "event.wait()": ["wait"], "example.exc_msg": ["example.exc_msg"], "example.indent": ["example.indent"], "example.lineno": ["example.lineno"], "example.options": ["example.options"], "example.want": ["example.want"], "exec(object)": ["exec", "_exec(object)", "execl(object)", "execv(object)", "execvp(object)", "execve(object)", "execle(object)", "execlp(object)", "execvpe(object)", "execlpe(object)", "execute(object)", "_execvpe(object)", "_reduce_ex(object)", "select(object)", "_exp(object)"], "exec(object, globals)": ["exec", "_exec(object, globals)", "execl(object, globals)", "execv(object, globals)", "execvp(object, globals)", "execve(object, globals)", "execle(object, globals)", "execlp(object, globals)", "execvpe(object, globals)", "execlpe(object, globals)", "execute(object, globals)", "_execvpe(object, globals)", "_reduce_ex(object, globals)", "select(object, globals)", "_exp(object, globals)"], "exec(object, globals, locals)": ["exec", "_exec(object, globals, locals)", "execl(object, globals, locals)", "execv(object, globals, locals)", "execvp(object, globals, locals)", "execve(object, globals, locals)", "execle(object, globals, locals)", "execlp(object, globals, locals)", "execvpe(object, globals, locals)", "execlpe(object, globals, locals)", "execute(object, globals, locals)", "_execvpe(object, globals, locals)", "_reduce_ex(object, globals, locals)", "select(object, globals, locals)", "_exp(object, globals, locals)"], "executor.map(func, *iterables)": ["map"], "executor.map(func, *iterables, chunksize=1)": ["map", "executor.map(func, *iterables, chunksize='1')"], "executor.map(func, *iterables, timeout=None)": ["map", "executor.map(func, *iterables, timeout=None)"], "executor.map(func, *iterables, timeout=None, chunksize=1)": ["map", "executor.map(func, *iterables, timeout=None, chunksize=1)", "executor.map(func, *iterables, timeout=None, chunksize='1')"], "executor.shutdown()": ["shutdown"], "executor.shutdown(wait=True)": ["shutdown", "executor.shutdown(wait=False)"], "executor.submit(fn, *args, **kwargs)": ["submit"], "exit()": ["exit", "_exit()", "exists()", "_exists()", "text()", "lexists()", "textinput()", "WIFEXITED()", "print_exc()", "_export()", "hexbin()", "legfit()", "export()", "legint()", "timeit()"], "exit(code=None)": ["exit", "exit(code=None)", "_exit(code=None)", "exists(code=None)", "_exists(code=None)", "text(code=None)", "lexists(code=None)", "textinput(code=None)", "WIFEXITED(code=None)", "print_exc(code=None)", "_export(code=None)", "hexbin(code=None)", "legfit(code=None)", "export(code=None)", "legint(code=None)"], "exit_stack.callback(callback, *args, **kwds)": ["callback"], "exit_stack.close()": ["close"], "exit_stack.enter_context(cm)": ["enter_context"], "exit_stack.pop_all()": ["pop_all"], "exit_stack.push(exit)": ["push"], "extension_file_loader.create_module(spec)": ["create_module"], "extension_file_loader.get_code(fullname)": ["get_code"], "extension_file_loader.get_source(fullname)": ["get_source"], "extension_file_loader.is_package(fullname)": ["is_package"], "extension_file_loader.path": ["extension_file_loader.path"], "fancy_ur_lopener.prompt_user_passwd(host, realm)": ["prompt_user_passwd"], "fault.faultString": ["fault.faultString"], "faulthandler.cancel_dump_traceback_later()": ["cancel_dump_traceback_later"], "faulthandler.disable()": ["disable"], "faulthandler.dump_traceback()": ["dump_traceback"], "faulthandler.dump_traceback(all_threads=True)": ["dump_traceback", "faulthandler.dump_traceback(all_threads=False)"], "faulthandler.dump_traceback_later(timeout)": ["dump_traceback_later"], "faulthandler.dump_traceback_later(timeout, exit=False)": ["dump_traceback_later", "faulthandler.dump_traceback_later(timeout, exit=True)"], "faulthandler.dump_traceback_later(timeout, repeat=False)": ["dump_traceback_later", "faulthandler.dump_traceback_later(timeout, repeat=True)"], "faulthandler.dump_traceback_later(timeout, repeat=False, exit=False)": ["dump_traceback_later", "faulthandler.dump_traceback_later(timeout, repeat=True, exit=True)"], "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr)": ["dump_traceback_later", "faulthandler.dump_traceback_later(timeout, repeat=True, file=sys.stderr)"], "faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderr, exit=False)": ["dump_traceback_later", "faulthandler.dump_traceback_later(timeout, repeat=True, file=sys.stderr, exit=True)"], "faulthandler.enable()": ["enable"], "faulthandler.enable(all_threads=True)": ["enable", "faulthandler.enable(all_threads=False)"], "faulthandler.enable(file=sys.stderr)": ["enable"], "faulthandler.enable(file=sys.stderr, all_threads=True)": ["enable", "faulthandler.enable(file=sys.stderr, all_threads=False)"], "faulthandler.is_enabled()": ["is_enabled"], "faulthandler.register(signum, all_threads=True, chain=False)": ["register", "faulthandler.register(signum, all_threads=False, chain=True)"], "faulthandler.register(signum, chain=False)": ["register", "faulthandler.register(signum, chain=True)"], "faulthandler.unregister(signum)": ["unregister"], "fcntl.fcntl(fd, cmd)": ["fcntl"], "fcntl.fcntl(fd, cmd, arg=0)": ["fcntl", "fcntl.fcntl(fd, cmd, arg='0')"], "fcntl.flock(fd, operation)": ["flock"], "fcntl.ioctl(fd, request)": ["ioctl"], "fcntl.ioctl(fd, request, arg=0)": ["ioctl", "fcntl.ioctl(fd, request, arg='0')"], "fcntl.ioctl(fd, request, arg=0, mutate_flag=True)": ["ioctl", "fcntl.ioctl(fd, request, arg=0, mutate_flag=False)", "fcntl.ioctl(fd, request, arg='0', mutate_flag=True)"], "fcntl.ioctl(fd, request, mutate_flag=True)": ["ioctl", "fcntl.ioctl(fd, request, mutate_flag=False)"], "fcntl.lockf(fd, cmd)": ["lockf"], "fcntl.lockf(fd, cmd, len=0)": ["lockf", "fcntl.lockf(fd, cmd, len='0')"], "fcntl.lockf(fd, cmd, len=0, start=0)": ["lockf", "fcntl.lockf(fd, cmd, len='0', start='0')"], "fcntl.lockf(fd, cmd, len=0, start=0, whence=0)": ["lockf", "fcntl.lockf(fd, cmd, len='0', start='0', whence='0')"], "fcntl.lockf(fd, cmd, len=0, whence=0)": ["lockf", "fcntl.lockf(fd, cmd, len='0', whence='0')"], "fcntl.lockf(fd, cmd, start=0)": ["lockf", "fcntl.lockf(fd, cmd, start='0')"], "fcntl.lockf(fd, cmd, start=0, whence=0)": ["lockf", "fcntl.lockf(fd, cmd, start='0', whence='0')"], "fcntl.lockf(fd, cmd, whence=0)": ["lockf", "fcntl.lockf(fd, cmd, whence='0')"], "feature.set_current()": ["set_current"], "file_finder.find_loader(fullname)": ["find_loader"], "file_finder.find_spec(fullname)": ["find_spec"], "file_finder.find_spec(fullname, target=None)": ["find_spec", "file_finder.find_spec(fullname, target=None)"], "file_finder.invalidate_caches()": ["invalidate_caches"], "file_finder.path": ["file_finder.path"], "file_finder.path_hook(*loader_details)": ["path_hook"], "file_handler.close()": ["close"], "file_handler.emit(record)": ["emit"], "file_io.mode": ["file_io.mode"], "file_loader.get_data(path)": ["get_data"], "file_loader.load_module(fullname)": ["load_module"], "file_loader.name": ["file_loader.name"], "file_loader.path": ["file_loader.path"], "filecmp.DEFAULT_IGNORES": ["filecmp.DEFAULT_IGNORES"], "filecmp.cmp(f1, f2)": ["cmp", "filecmp.copy(f1, f2)", "filecmp.dumps(f1, f2)", "filecmp.copy2(f1, f2)", "filecmp._dumps(f1, f2)", "filecmp.mkpath(f1, f2)", "filecmp.copystat(f1, f2)", "filecmp.copyfile(f1, f2)", "filecmp.copymode(f1, f2)", "filecmp._covhelper(f1, f2)", "filecmp.copy_tree(f1, f2)", "filecmp.cov(f1, f2)", "filecmp.copy_file(f1, f2)", "filecmp._copyxattr(f1, f2)", "filecmp.cut(f1, f2)"], "filecmp.cmp(f1, f2, shallow=True)": ["cmp", "filecmp.cmp(f1, f2, shallow=False)", "filecmp.copy(f1, f2, shallow=True)", "filecmp.dumps(f1, f2, shallow=True)", "filecmp.copy2(f1, f2, shallow=True)", "filecmp._dumps(f1, f2, shallow=True)", "filecmp.mkpath(f1, f2, shallow=True)", "filecmp.copystat(f1, f2, shallow=True)", "filecmp.copyfile(f1, f2, shallow=True)", "filecmp.copymode(f1, f2, shallow=True)", "filecmp._covhelper(f1, f2, shallow=True)", "filecmp.copy_tree(f1, f2, shallow=True)", "filecmp.cov(f1, f2, shallow=True)", "filecmp.copy_file(f1, f2, shallow=True)", "filecmp._copyxattr(f1, f2, shallow=True)"], "filecmp.cmpfiles(dir1, dir2, common)": ["cmpfiles", "filecmp.copy_file(dir1, dir2, common)", "filecmp.dumps(dir1, dir2, common)", "filecmp.field(dir1, dir2, common)", "filecmp.margins(dir1, dir2, common)", "filecmp.convolve(dir1, dir2, common)", "filecmp.build_err_msg(dir1, dir2, common)", "filecmp._covhelper(dir1, dir2, common)", "filecmp.copy_tree(dir1, dir2, common)", "filecmp.ones_like(dir1, dir2, common)", "filecmp.geomspace(dir1, dir2, common)", "filecmp.correlate(dir1, dir2, common)", "filecmp.dataclass(dir1, dir2, common)", "filecmp._dump(dir1, dir2, common)", "filecmp.dump(dir1, dir2, common)"], "filecmp.cmpfiles(dir1, dir2, common, shallow=True)": ["cmpfiles", "filecmp.cmpfiles(dir1, dir2, common, shallow=False)", "filecmp.copy_file(dir1, dir2, common, shallow=True)", "filecmp.dumps(dir1, dir2, common, shallow=True)", "filecmp.field(dir1, dir2, common, shallow=True)", "filecmp.margins(dir1, dir2, common, shallow=True)", "filecmp.convolve(dir1, dir2, common, shallow=True)", "filecmp.build_err_msg(dir1, dir2, common, shallow=True)", "filecmp._covhelper(dir1, dir2, common, shallow=True)", "filecmp.copy_tree(dir1, dir2, common, shallow=True)", "filecmp.ones_like(dir1, dir2, common, shallow=True)", "filecmp.geomspace(dir1, dir2, common, shallow=True)", "filecmp.correlate(dir1, dir2, common, shallow=True)", "filecmp.dataclass(dir1, dir2, common, shallow=True)", "filecmp._dump(dir1, dir2, common, shallow=True)"], "filecmp.dircmp(a, b)": ["dircmp"], "filecmp.dircmp(a, b, hide=None)": ["dircmp", "filecmp.dircmp(a, b, hide=None)"], "filecmp.dircmp(a, b, ignore=None)": ["dircmp", "filecmp.dircmp(a, b, ignore=None)"], "filecmp.dircmp(a, b, ignore=None, hide=None)": ["dircmp", "filecmp.dircmp(a, b, ignore=None, hide=None)"], "fileinput.FileInput()": ["FileInput"], "fileinput.FileInput(backup='')": ["FileInput", "fileinput.FileInput(backup=0)"], "fileinput.FileInput(bufsize=0)": ["FileInput", "fileinput.FileInput(bufsize='0')"], "fileinput.FileInput(files=None)": ["FileInput", "fileinput.FileInput(files=None)"], "fileinput.FileInput(files=None, backup='')": ["FileInput", "fileinput.FileInput(files=None, backup='')", "fileinput.FileInput(files=None, backup=0)"], "fileinput.FileInput(files=None, bufsize=0)": ["FileInput", "fileinput.FileInput(files=None, bufsize=0)", "fileinput.FileInput(files=None, bufsize='0')"], "fileinput.FileInput(files=None, inplace=False)": ["FileInput", "fileinput.FileInput(files=None, inplace=True)"], "fileinput.FileInput(inplace=False)": ["FileInput", "fileinput.FileInput(inplace=True)"], "fileinput.FileInput(mode='r')": ["FileInput", "fileinput.FileInput(mode=1)"], "fileinput.close()": ["close", "fileinput.close_all()", "fileinput.colormode()", "fileinput.listen()", "fileinput.Tcl()", "fileinput.Comment()", "fileinput.localcontext()", "fileinput.ensure_clean()", "fileinput.colorbar()", "fileinput.mode()", "fileinput.log_to_stderr()", "fileinput.clim()", "fileinput.localtime()", "fileinput.getLogger()", "fileinput.dataclass()"], "fileinput.filelineno()": ["filelineno", "fileinput.fileno()", "fileinput.lineno()", "fileinput.getlineno()", "fileinput.filling()", "fileinput.legline()", "fileinput._fill_in_zeros()", "fileinput.getfileinfo()", "fileinput._open_file_like()", "fileinput.filename()", "fileinput.lasti2lineno()", "fileinput.figlegend()", "fileinput._lock_file()", "fileinput.filled()", "fileinput.increment_lineno()"], "fileinput.filename()": ["filename", "fileinput.filter_name()", "fileinput.filemode()", "fileinput.visiblename()", "fileinput.fileno()", "fileinput.rename()", "fileinput._fix_names()", "fileinput.move_file()", "fileinput._fix_co_filename()", "fileinput.bitname()", "fileinput._getname()", "fileinput.dirname()", "fileinput.renames()", "fileinput.filelineno()", "fileinput._newname()"], "fileinput.hook_compressed(filename, mode)": ["hook_compressed", "fileinput.compressed(filename, mode)", "fileinput.savez_compressed(filename, mode)", "fileinput.write_to_compressed(filename, mode)", "fileinput.compress_rowcols(filename, mode)", "fileinput.compress_rows(filename, mode)", "fileinput.compress(filename, mode)", "fileinput.compress_nd(filename, mode)", "fileinput.hook_encoded(filename, mode)", "fileinput.decompress(filename, mode)", "fileinput._compose_mro(filename, mode)", "fileinput.show_compilers(filename, mode)", "fileinput._get_compressor(filename, mode)", "fileinput.decompress_file(filename, mode)", "fileinput._compress_dispatcher(filename, mode)"], "fileinput.hook_encoded(encoding)": ["hook_encoded", "fileinput.show_code(encoding)", "fileinput.encode(encoding)", "fileinput.utf_8_encode(encoding)", "fileinput.utf_7_encode(encoding)", "fileinput.b64encode(encoding)", "fileinput.escape_encode(encoding)", "fileinput.utf_16_encode(encoding)", "fileinput.utf_32_encode(encoding)", "fileinput.decode(encoding)", "fileinput.encode_rfc2231(encoding)", "fileinput.latin_1_encode(encoding)", "fileinput._decode_line(encoding)", "fileinput.utf_32_be_encode(encoding)", "fileinput.utf_8_decode(encoding)"], "fileinput.input()": ["input", "fileinput.init()", "fileinput.main()", "fileinput._main()", "fileinput.width()", "fileinput.twinx()", "fileinput.twiny()", "fileinput.listdir()", "fileinput.Comment()", "fileinput._run_finalizers()", "fileinput.validate_map_location()", "fileinput.tiltangle()", "fileinput._get_plot_backend()", "fileinput.textdomain()", "fileinput.stack_size()"], "fileinput.input(backup='')": ["input", "fileinput.input(backup=0)", "fileinput.init(backup='')", "fileinput.main(backup='')", "fileinput._main(backup='')", "fileinput.width(backup='')", "fileinput.twinx(backup='')", "fileinput.twiny(backup='')", "fileinput.listdir(backup='')", "fileinput.Comment(backup='')", "fileinput._run_finalizers(backup='')", "fileinput.validate_map_location(backup='')", "fileinput.tiltangle(backup='')", "fileinput._get_plot_backend(backup='')", "fileinput.textdomain(backup='')"], "fileinput.input(bufsize=0)": ["input", "fileinput.input(bufsize='0')", "fileinput.init(bufsize=0)", "fileinput.main(bufsize=0)", "fileinput._main(bufsize=0)", "fileinput.width(bufsize=0)", "fileinput.twinx(bufsize=0)", "fileinput.twiny(bufsize=0)", "fileinput.listdir(bufsize=0)", "fileinput.Comment(bufsize=0)", "fileinput._run_finalizers(bufsize=0)", "fileinput.validate_map_location(bufsize=0)", "fileinput.tiltangle(bufsize=0)", "fileinput._get_plot_backend(bufsize=0)", "fileinput.textdomain(bufsize=0)"], "fileinput.input(files=None)": ["input", "fileinput.input(files=None)", "fileinput.init(files=None)", "fileinput.main(files=None)", "fileinput._main(files=None)", "fileinput.width(files=None)", "fileinput.twinx(files=None)", "fileinput.twiny(files=None)", "fileinput.listdir(files=None)", "fileinput.Comment(files=None)", "fileinput._run_finalizers(files=None)", "fileinput.validate_map_location(files=None)", "fileinput.tiltangle(files=None)", "fileinput._get_plot_backend(files=None)", "fileinput.textdomain(files=None)"], "fileinput.input(files=None, backup='')": ["input", "fileinput.input(files=None, backup='')", "fileinput.input(files=None, backup=0)", "fileinput.init(files=None, backup='')", "fileinput.main(files=None, backup='')", "fileinput._main(files=None, backup='')", "fileinput.width(files=None, backup='')", "fileinput.twinx(files=None, backup='')", "fileinput.twiny(files=None, backup='')", "fileinput.listdir(files=None, backup='')", "fileinput.Comment(files=None, backup='')", "fileinput._run_finalizers(files=None, backup='')", "fileinput.validate_map_location(files=None, backup='')", "fileinput.tiltangle(files=None, backup='')", "fileinput._get_plot_backend(files=None, backup='')"], "fileinput.input(files=None, bufsize=0)": ["input", "fileinput.input(files=None, bufsize=0)", "fileinput.input(files=None, bufsize='0')", "fileinput.init(files=None, bufsize=0)", "fileinput.main(files=None, bufsize=0)", "fileinput._main(files=None, bufsize=0)", "fileinput.width(files=None, bufsize=0)", "fileinput.twinx(files=None, bufsize=0)", "fileinput.twiny(files=None, bufsize=0)", "fileinput.listdir(files=None, bufsize=0)", "fileinput.Comment(files=None, bufsize=0)", "fileinput._run_finalizers(files=None, bufsize=0)", "fileinput.validate_map_location(files=None, bufsize=0)", "fileinput.tiltangle(files=None, bufsize=0)", "fileinput._get_plot_backend(files=None, bufsize=0)"], "fileinput.input(files=None, inplace=False)": ["input", "fileinput.input(files=None, inplace=True)", "fileinput.init(files=None, inplace=False)", "fileinput.main(files=None, inplace=False)", "fileinput._main(files=None, inplace=False)", "fileinput.width(files=None, inplace=False)", "fileinput.twinx(files=None, inplace=False)", "fileinput.twiny(files=None, inplace=False)", "fileinput.listdir(files=None, inplace=False)", "fileinput.Comment(files=None, inplace=False)", "fileinput._run_finalizers(files=None, inplace=False)", "fileinput.validate_map_location(files=None, inplace=False)", "fileinput.tiltangle(files=None, inplace=False)", "fileinput._get_plot_backend(files=None, inplace=False)", "fileinput.textdomain(files=None, inplace=False)"], "fileinput.input(inplace=False)": ["input", "fileinput.input(inplace=True)", "fileinput.init(inplace=False)", "fileinput.main(inplace=False)", "fileinput._main(inplace=False)", "fileinput.width(inplace=False)", "fileinput.twinx(inplace=False)", "fileinput.twiny(inplace=False)", "fileinput.listdir(inplace=False)", "fileinput.Comment(inplace=False)", "fileinput._run_finalizers(inplace=False)", "fileinput.validate_map_location(inplace=False)", "fileinput.tiltangle(inplace=False)", "fileinput._get_plot_backend(inplace=False)", "fileinput.textdomain(inplace=False)"], "fileinput.input(mode='r')": ["input", "fileinput.input(mode=1)", "fileinput.init(mode='r')", "fileinput.main(mode='r')", "fileinput._main(mode='r')", "fileinput.width(mode='r')", "fileinput.twinx(mode='r')", "fileinput.twiny(mode='r')", "fileinput.listdir(mode='r')", "fileinput.Comment(mode='r')", "fileinput._run_finalizers(mode='r')", "fileinput.validate_map_location(mode='r')", "fileinput.tiltangle(mode='r')", "fileinput._get_plot_backend(mode='r')", "fileinput.textdomain(mode='r')"], "fileinput.isfirstline()": ["isfirstline", "fileinput.isfile()", "fileinput.isroutine()", "fileinput.isinstance()", "fileinput.isstdin()", "fileinput.istitle()", "fileinput.splitlines()", "fileinput.iscoroutine()", "fileinput._isfinite()", "fileinput.isstring()", "fileinput.list2cmdline()", "fileinput.isfileobj()", "fileinput.gisfinite()", "fileinput.isvisible()", "fileinput.parseline()"], "fileinput.isstdin()": ["isstdin", "fileinput.isstring()", "fileinput.isin()", "fileinput.listdir()", "fileinput.isfirstline()", "fileinput._close_stdin()", "fileinput.isposinf()", "fileinput.isdir()", "fileinput._rlistdir()", "fileinput.list2cmdline()", "fileinput.is_scripting()", "fileinput.isroutine()", "fileinput.islink()", "fileinput.isdown()", "fileinput.askstring()"], "fileinput.lineno()": ["lineno", "fileinput.getlineno()", "fileinput.inferno()", "fileinput.filelineno()", "fileinput._not_in()", "fileinput.fileno()", "fileinput._indent()", "fileinput.axline()", "fileinput.vlines()", "fileinput.Client()", "fileinput.listen()", "fileinput.lasti2lineno()", "fileinput.indent()", "fileinput.hlines()", "fileinput.align_tensors()"], "fileinput.nextfile()": ["nextfile", "fileinput.getfile()", "fileinput.testfile()", "fileinput.tile()", "fileinput.getabsfile()", "fileinput.setprofile()", "fileinput.EncodedFile()", "fileinput.getfileinfo()", "fileinput.quantile()", "fileinput._samefile()", "fileinput.title()", "fileinput.samefile()", "fileinput.expectedFailure()", "fileinput.filled()", "fileinput.nanpercentile()"], "filter(function, iterable)": ["filter", "_filter(function, iterable)", "_add_filter(function, iterable)", "filter_name(function, iterable)", "finditer(function, iterable)", "iter_fields(function, iterable)", "_iter_filter(function, iterable)", "filled(function, iterable)", "fileno(function, iterable)", "isfile(function, iterable)", "_filter_nodes(function, iterable)", "interp(function, iterable)", "fliplr(function, iterable)", "simplefilter(function, iterable)", "_fit(function, iterable)"], "filter.all_frames": ["filter.all_frames"], "filter.domain": ["filter.domain"], "filter.filter(record)": ["filter"], "filter.inclusive": ["filter.inclusive"], "filter.lineno": ["filter.lineno"], "finalize.__call__()": ["__call__"], "finalize.detach()": ["detach"], "finalize.peek()": ["peek"], "finder.find_module(fullname)": ["find_module"], "finder.find_module(fullname, path=None)": ["find_module", "finder.find_module(fullname, path=None)"], "float()": ["float", "askfloat()", "is_float()", "format()", "_format()", "locate()", "loadtxt()", "flag()", "_load()", "flatten()", "_read_float()", "load()", "plot()", "pformat()", "_flatten()"], "float(x)": ["float", "askfloat(x)", "is_float(x)", "format(x)", "_format(x)", "locate(x)", "loadtxt(x)", "flag(x)", "_load(x)", "flatten(x)", "_read_float(x)", "load(x)", "plot(x)", "pformat(x)", "_flatten(x)"], "float.as_integer_ratio()": ["as_integer_ratio"], "float.fromhex(s)": ["fromhex"], "float.hex()": ["hex"], "float.is_integer()": ["is_integer"], "fnmatch.filter(names, pattern)": ["filter", "fnmatch._filter(names, pattern)", "fnmatch._add_filter(names, pattern)", "fnmatch.filter_name(names, pattern)", "fnmatch.finditer(names, pattern)", "fnmatch.iter_fields(names, pattern)", "fnmatch._iter_filter(names, pattern)", "fnmatch.filled(names, pattern)", "fnmatch.fileno(names, pattern)", "fnmatch.isfile(names, pattern)", "fnmatch._filter_nodes(names, pattern)", "fnmatch.interp(names, pattern)", "fnmatch.fliplr(names, pattern)", "fnmatch.simplefilter(names, pattern)", "fnmatch._fit(names, pattern)"], "fnmatch.fnmatch(filename, pattern)": ["fnmatch", "fnmatch.findmatch(filename, pattern)", "fnmatch.match(filename, pattern)", "fnmatch.fnmatchcase(filename, pattern)", "fnmatch.fullmatch(filename, pattern)", "fnmatch.normpath(filename, pattern)", "fnmatch._patch(filename, pattern)", "fnmatch._find_mac(filename, pattern)", "fnmatch.mkpath(filename, pattern)", "fnmatch._fspath(filename, pattern)", "fnmatch.fspath(filename, pattern)", "fnmatch.format(filename, pattern)", "fnmatch._format(filename, pattern)", "fnmatch._dnsname_match(filename, pattern)", "fnmatch.mat(filename, pattern)"], "fnmatch.fnmatchcase(filename, pattern)": ["fnmatchcase", "fnmatch.fnmatch(filename, pattern)", "fnmatch.findmatch(filename, pattern)", "fnmatch.normcase(filename, pattern)", "fnmatch.match(filename, pattern)", "fnmatch.fullmatch(filename, pattern)", "fnmatch.findTestCases(filename, pattern)", "fnmatch.formatargspec(filename, pattern)", "fnmatch._format_handle(filename, pattern)", "fnmatch.formatdate(filename, pattern)", "fnmatch.machine(filename, pattern)", "fnmatch._hash_fn(filename, pattern)", "fnmatch.add_charset(filename, pattern)", "fnmatch._format_size(filename, pattern)", "fnmatch._parser_dispatch(filename, pattern)"], "fnmatch.translate(pattern)": ["translate", "fnmatch.translation(pattern)", "fnmatch._translate_dispatcher(pattern)", "fnmatch.interpolate(pattern)", "fnmatch.table(pattern)", "fnmatch.trace(pattern)", "fnmatch.iterparse(pattern)", "fnmatch.nanstd(pattern)", "fnmatch.rename(pattern)", "fnmatch.rsplit(pattern)", "fnmatch.all_gather(pattern)", "fnmatch._nested_map(pattern)", "fnmatch._any_dispatcher(pattern)", "fnmatch.scatter_matrix(pattern)", "fnmatch.nanquantile(pattern)"], "format(value)": ["format", "_format(value)", "formatdate(value)", "format_string(value)", "match(value)", "_normalize(value)", "fullmatch(value)", "create(value)", "unpack_from(value)", "compile_path(value)", "concat_compat(value)", "bootstrap(value)", "load(value)", "_bootstrap(value)", "replicate(value)"], "format(value, format_spec)": ["format", "_format(value, format_spec)", "formatdate(value, format_spec)", "format_string(value, format_spec)", "match(value, format_spec)", "_normalize(value, format_spec)", "fullmatch(value, format_spec)", "create(value, format_spec)", "unpack_from(value, format_spec)", "compile_path(value, format_spec)", "concat_compat(value, format_spec)", "bootstrap(value, format_spec)", "load(value, format_spec)", "_bootstrap(value, format_spec)", "replicate(value, format_spec)"], "formatter.AS_IS": ["formatter.AS_IS"], "formatter.AbstractFormatter(writer)": ["AbstractFormatter"], "formatter.AbstractWriter": ["formatter.AbstractWriter"], "formatter.DumbWriter(file=None)": ["DumbWriter", "formatter.DumbWriter(file=None)"], "formatter.DumbWriter(file=None, maxcol=72)": ["DumbWriter", "formatter.DumbWriter(file=None, maxcol=72)", "formatter.DumbWriter(file=None, maxcol='72')"], "formatter.DumbWriter(maxcol=72)": ["DumbWriter", "formatter.DumbWriter(maxcol='72')"], "formatter.NullFormatter()": ["NullFormatter"], "formatter.NullFormatter(writer=None)": ["NullFormatter", "formatter.NullFormatter(writer=None)"], "formatter.NullWriter": ["formatter.NullWriter"], "formatter.add_flowing_data(data)": ["add_flowing_data"], "formatter.add_hor_rule(*args, **kw)": ["add_hor_rule"], "formatter.add_label_data(format, counter)": ["add_label_data"], "formatter.add_line_break()": ["add_line_break"], "formatter.assert_line_data()": ["assert_line_data"], "formatter.assert_line_data(flag=1)": ["assert_line_data", "formatter.assert_line_data(flag='1')"], "formatter.check_unused_args(used_args, args, kwargs)": ["check_unused_args"], "formatter.convert_field(value, conversion)": ["convert_field"], "formatter.end_paragraph(blanklines)": ["end_paragraph"], "formatter.flush_softspace()": ["flush_softspace"], "formatter.format(format_string, *args, **kwargs)": ["format"], "formatter.format(record)": ["format"], "formatter.format_field(value, format_spec)": ["format_field"], "formatter.get_field(field_name, args, kwargs)": ["get_field"], "formatter.get_value(key, args, kwargs)": ["get_value"], "formatter.parse(format_string)": ["parse"], "formatter.pop_alignment()": ["pop_alignment"], "formatter.pop_font()": ["pop_font"], "formatter.pop_margin()": ["pop_margin"], "formatter.pop_style()": ["pop_style"], "formatter.pop_style(n=1)": ["pop_style", "formatter.pop_style(n='1')"], "formatter.push_alignment(align)": ["push_alignment"], "formatter.push_font((size, italic, bold, teletype))": ["push_font"], "formatter.push_margin(margin)": ["push_margin"], "formatter.push_style(*styles)": ["push_style"], "formatter.set_spacing(spacing)": ["set_spacing"], "formatter.vformat(format_string, args, kwargs)": ["vformat"], "fraction.__ceil__()": ["__ceil__"], "fraction.__floor__()": ["__floor__"], "fraction.__round__()": ["__round__"], "fraction.__round__(ndigits)": ["__round__"], "fraction.denominator": ["fraction.denominator"], "fraction.from_decimal(dec)": ["from_decimal"], "fraction.from_float(flt)": ["from_float"], "fraction.limit_denominator()": ["limit_denominator"], "fraction.limit_denominator(max_denominator=1000000)": ["limit_denominator", "fraction.limit_denominator(max_denominator='1000000')"], "fractions.Fraction()": ["Fraction"], "fractions.Fraction(decimal)": ["Fraction"], "fractions.Fraction(denominator=1)": ["Fraction", "fractions.Fraction(denominator='1')"], "fractions.Fraction(float)": ["Fraction"], "fractions.Fraction(numerator=0)": ["Fraction", "fractions.Fraction(numerator='0')"], "fractions.Fraction(numerator=0, denominator=1)": ["Fraction", "fractions.Fraction(numerator='0', denominator='1')"], "fractions.gcd(a, b)": ["gcd", "fractions._gcd(a, b)", "fractions.csd(a, b)", "fractions.gci(a, b)", "fractions.gcf(a, b)", "fractions.sgd(a, b)", "fractions.getcwd(a, b)", "fractions.gca(a, b)", "fractions.getcwdb(a, b)", "fractions._code(a, b)", "fractions._cuda(a, b)", "fractions.grid(a, b)", "fractions.xkcd(a, b)", "fractions.cond(a, b)", "fractions.bgpic(a, b)"], "frame.lineno": ["frame.lineno"], "frozenset()": ["frozenset", "is_frozen()", "reset()", "init_frozen()", "is_frozen_package()", "get_frozen_object()", "reindent()", "_requires_frozen()", "flags_frozen()", "_frozen_get_del_attr()", "fromregex()", "_unstack_frame()", "_gt_from_ge()", "_lt_from_le()", "fromstring()"], "frozenset(iterable)": ["frozenset", "is_frozen(iterable)", "reset(iterable)", "init_frozen(iterable)", "is_frozen_package(iterable)", "get_frozen_object(iterable)", "reindent(iterable)", "_requires_frozen(iterable)", "flags_frozen(iterable)", "_frozen_get_del_attr(iterable)", "fromregex(iterable)", "_unstack_frame(iterable)", "_gt_from_ge(iterable)", "_lt_from_le(iterable)", "fromstring(iterable)"], "ftplib.FTP(acct='')": ["FTP", "ftplib.FTP(acct=0)"], "ftplib.FTP(host='')": ["FTP", "ftplib.FTP(host=0)"], "ftplib.FTP(host='', acct='')": ["FTP", "ftplib.FTP(host=0, acct=0)"], "ftplib.FTP(host='', passwd='')": ["FTP", "ftplib.FTP(host=0.0, passwd=0)"], "ftplib.FTP(host='', user='')": ["FTP", "ftplib.FTP(host=0.0, user=0.0)"], "ftplib.FTP(passwd='')": ["FTP", "ftplib.FTP(passwd=0.0)"], "ftplib.FTP(source_address=None)": ["FTP", "ftplib.FTP(source_address=None)"], "ftplib.FTP(user='')": ["FTP", "ftplib.FTP(user=0)"], "ftplib.FTP_TLS()": ["FTP_TLS"], "ftplib.FTP_TLS(certfile=None)": ["FTP_TLS", "ftplib.FTP_TLS(certfile=None)"], "ftplib.FTP_TLS(host='')": ["FTP_TLS", "ftplib.FTP_TLS(host=0.0)"], "ftplib.FTP_TLS(keyfile=None)": ["FTP_TLS", "ftplib.FTP_TLS(keyfile=None)"], "ftplib.FTP_TLS(passwd='')": ["FTP_TLS", "ftplib.FTP_TLS(passwd=0)"], "ftplib.FTP_TLS(timeout=None)": ["FTP_TLS", "ftplib.FTP_TLS(timeout=None)"], "ftplib.FTP_TLS(user='')": ["FTP_TLS", "ftplib.FTP_TLS(user=0.0)"], "ftplib.error_perm": ["ftplib.error_perm"], "ftplib.error_proto": ["ftplib.error_proto"], "ftplib.error_reply": ["ftplib.error_reply"], "ftplib.error_temp": ["ftplib.error_temp"], "function.get_frees()": ["get_frees"], "function.get_globals()": ["get_globals"], "function.get_locals()": ["get_locals"], "function.get_parameters()": ["get_parameters"], "functools.cmp_to_key(func)": ["cmp_to_key"], "functools.partial(func, *args, **keywords)": ["partial"], "functools.partialmethod(func, *args, **keywords)": ["partialmethod"], "functools.reduce(function, iterable)": ["reduce"], "functools.reduce(function, iterable, initializer)": ["reduce"], "functools.update_wrapper(wrapper, wrapped)": ["update_wrapper", "functools.OpenWrapper(wrapper, wrapped)", "functools._view_wrapper(wrapper, wrapped)", "functools.wrapper(wrapper, wrapped)", "functools.updatecache(wrapper, wrapped)", "functools.wrap_future(wrapper, wrapped)", "functools._convert_wrapper(wrapper, wrapped)", "functools._interpolate_scipy_wrapper(wrapper, wrapped)", "functools._get_method_wrappers(wrapper, wrapped)", "functools._make_skipna_wrapper(wrapper, wrapped)", "functools.update(wrapper, wrapped)", "functools.prepare_predicate(wrapper, wrapped)", "functools._unwrap_dispatcher(wrapper, wrapped)", "functools.make_wrapped_arith_op(wrapper, wrapped)", "functools._validate_where(wrapper, wrapped)"], "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)": ["update_wrapper", "functools.OpenWrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools._view_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools.wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools.updatecache(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools.wrap_future(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools._convert_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools._interpolate_scipy_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools._get_method_wrappers(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools._make_skipna_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools.update(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools.prepare_predicate(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools._unwrap_dispatcher(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools.make_wrapped_arith_op(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)", "functools._validate_where(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS)"], "functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)": ["update_wrapper", "functools.OpenWrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools._view_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools.wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools.updatecache(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools.wrap_future(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools._convert_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools._interpolate_scipy_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools._get_method_wrappers(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools._make_skipna_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools.update(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools.prepare_predicate(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools._unwrap_dispatcher(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools.make_wrapped_arith_op(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)", "functools._validate_where(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)"], "functools.update_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)": ["update_wrapper", "functools.OpenWrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools._view_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools.wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools.updatecache(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools.wrap_future(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools._convert_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools._interpolate_scipy_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools._get_method_wrappers(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools._make_skipna_wrapper(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools.update(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools.prepare_predicate(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools._unwrap_dispatcher(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools.make_wrapped_arith_op(wrapper, wrapped, updated=WRAPPER_UPDATES)", "functools._validate_where(wrapper, wrapped, updated=WRAPPER_UPDATES)"], "future.add_done_callback(callback)": ["add_done_callback"], "future.add_done_callback(callback, context=None)": ["add_done_callback", "future.add_done_callback(callback, context=None)"], "future.add_done_callback(fn)": ["add_done_callback"], "future.cancel()": ["cancel"], "future.get_loop()": ["get_loop"], "future.remove_done_callback(callback)": ["remove_done_callback"], "future.result(timeout=None)": ["result", "future.result(timeout=None)"], "future.set_exception(exception)": ["set_exception"], "future.set_result(result)": ["set_result"], "future.set_running_or_notify_cancel()": ["set_running_or_notify_cancel"], "gc.DEBUG_COLLECTABLE": ["gc.DEBUG_COLLECTABLE"], "gc.DEBUG_LEAK": ["gc.DEBUG_LEAK"], "gc.DEBUG_SAVEALL": ["gc.DEBUG_SAVEALL"], "gc.DEBUG_STATS": ["gc.DEBUG_STATS"], "gc.DEBUG_UNCOLLECTABLE": ["gc.DEBUG_UNCOLLECTABLE"], "gc.collect(generation=2)": ["collect", "gc.collect(generation='2')"], "gc.disable()": ["disable"], "gc.enable()": ["enable"], "gc.freeze()": ["freeze"], "gc.get_count()": ["get_count"], "gc.get_objects()": ["get_objects"], "gc.get_referents(*objs)": ["get_referents"], "gc.get_referrers(*objs)": ["get_referrers"], "gc.get_stats()": ["get_stats"], "gc.isenabled()": ["isenabled"], "gc.set_debug(flags)": ["set_debug"], "gc.set_threshold(threshold0)": ["set_threshold"], "gc.set_threshold(threshold0, threshold1)": ["set_threshold"], "gc.set_threshold(threshold0, threshold1, threshold2)": ["set_threshold"], "gc.unfreeze()": ["unfreeze"], "gdbm.close()": ["close"], "gdbm.firstkey()": ["firstkey"], "gdbm.nextkey(key)": ["nextkey"], "gdbm.reorganize()": ["reorganize"], "gdbm.sync()": ["sync"], "generator.clone(fp)": ["clone"], "generator.flatten(msg, linesep=None)": ["flatten", "generator.flatten(msg, linesep=None)"], "generator.flatten(msg, unixfrom=False)": ["flatten", "generator.flatten(msg, unixfrom=True)"], "generator.write(s)": ["write"], "getattr(object, name)": ["getattr", "__getattr__(object, name)", "getxattr(object, name)", "setxattr(object, name)", "_getattribute(object, name)", "gettext(object, name)", "getargs(object, name)", "getdata(object, name)", "greater(object, name)", "getpager(object, name)", "get_path(object, name)", "dgettext(object, name)", "getattr_static(object, name)", "ngettext(object, name)", "lgettext(object, name)"], "getattr(object, name, default)": ["getattr", "__getattr__(object, name, default)", "getxattr(object, name, default)", "setxattr(object, name, default)", "_getattribute(object, name, default)", "gettext(object, name, default)", "getargs(object, name, default)", "getdata(object, name, default)", "greater(object, name, default)", "getpager(object, name, default)", "get_path(object, name, default)", "dgettext(object, name, default)", "getattr_static(object, name, default)", "ngettext(object, name, default)", "lgettext(object, name, default)"], "getopt.error": ["getopt.error"], "getopt.getopt(args)": ["getopt", "getopt.gnu_getopt(args)", "getopt.deepcopy(args)", "getopt.legint(args)", "getopt.lagint(args)", "getopt.hermint(args)", "getopt.polyint(args)", "getopt.chebint(args)", "getopt.hermeint(args)", "getopt.getp(args)", "getopt.getoutput(args)", "getopt._get_option(args)", "getopt.get_path(args)", "getopt._get_loop(args)", "getopt._get_path(args)"], "getopt.getopt(args, shortopts)": ["getopt", "getopt.gnu_getopt(args, shortopts)", "getopt.deepcopy(args, shortopts)", "getopt.legint(args, shortopts)", "getopt.lagint(args, shortopts)", "getopt.hermint(args, shortopts)", "getopt.polyint(args, shortopts)", "getopt.chebint(args, shortopts)", "getopt.hermeint(args, shortopts)", "getopt.getp(args, shortopts)", "getopt.getoutput(args, shortopts)", "getopt._get_option(args, shortopts)", "getopt.get_path(args, shortopts)", "getopt._get_loop(args, shortopts)", "getopt._get_path(args, shortopts)"], "getopt.getopt(args, shortopts, longopts=)": [], "getopt.gnu_getopt(args)": ["gnu_getopt", "getopt.getopt(args)", "getopt.legint(args)", "getopt.deepcopy(args)", "getopt.lagint(args)", "getopt.hermint(args)", "getopt.polyint(args)", "getopt.chebint(args)", "getopt.hermeint(args)", "getopt._get_option(args)", "getopt.getlogin(args)", "getopt._setoption(args)", "getopt.get_group(args)", "getopt.getoutput(args)", "getopt.getpen(args)"], "getopt.gnu_getopt(args, shortopts)": ["gnu_getopt", "getopt.getopt(args, shortopts)", "getopt.legint(args, shortopts)", "getopt.deepcopy(args, shortopts)", "getopt.lagint(args, shortopts)", "getopt.hermint(args, shortopts)", "getopt.polyint(args, shortopts)", "getopt.chebint(args, shortopts)", "getopt.hermeint(args, shortopts)", "getopt._get_option(args, shortopts)", "getopt.getlogin(args, shortopts)", "getopt._setoption(args, shortopts)", "getopt.get_group(args, shortopts)", "getopt.getoutput(args, shortopts)", "getopt.getpen(args, shortopts)"], "getopt.gnu_getopt(args, shortopts, longopts=)": [], "getpass.GetPassWarning": ["getpass.GetPassWarning"], "getpass.getpass()": ["getpass", "getpass.win_getpass()", "getpass.unix_getpass()", "getpass.fallback_getpass()", "getpass.get_paths()", "getpass.setpos()", "getpass.getabsfile()", "getpass.getlines()", "getpass.transpose()", "getpass.iterparse()", "getpass.parse()", "getpass._parse_datetime()", "getpass.easy_dtype()", "getpass.thetagrids()", "getpass._namespaces()"], "getpass.getpass(prompt='Password: ')": ["getpass", "getpass.getpass(prompt=10)", "getpass.win_getpass(prompt='Password: ')", "getpass.unix_getpass(prompt='Password: ')", "getpass.fallback_getpass(prompt='Password: ')", "getpass.get_paths(prompt='Password: ')", "getpass.setpos(prompt='Password: ')", "getpass.getabsfile(prompt='Password: ')", "getpass.getlines(prompt='Password: ')", "getpass.transpose(prompt='Password: ')", "getpass.iterparse(prompt='Password: ')", "getpass.parse(prompt='Password: ')", "getpass._parse_datetime(prompt='Password: ')", "getpass.easy_dtype(prompt='Password: ')", "getpass.thetagrids(prompt='Password: ')"], "getpass.getpass(prompt='Password: ', stream=None)": ["getpass", "getpass.getpass(prompt='Password: ', stream=None)", "getpass.getpass(prompt=10.0, stream=None)", "getpass.win_getpass(prompt='Password: ', stream=None)", "getpass.unix_getpass(prompt='Password: ', stream=None)", "getpass.fallback_getpass(prompt='Password: ', stream=None)", "getpass.get_paths(prompt='Password: ', stream=None)", "getpass.setpos(prompt='Password: ', stream=None)", "getpass.getabsfile(prompt='Password: ', stream=None)", "getpass.getlines(prompt='Password: ', stream=None)", "getpass.transpose(prompt='Password: ', stream=None)", "getpass.iterparse(prompt='Password: ', stream=None)", "getpass.parse(prompt='Password: ', stream=None)", "getpass._parse_datetime(prompt='Password: ', stream=None)", "getpass.easy_dtype(prompt='Password: ', stream=None)"], "getpass.getpass(stream=None)": ["getpass", "getpass.getpass(stream=None)", "getpass.win_getpass(stream=None)", "getpass.unix_getpass(stream=None)", "getpass.fallback_getpass(stream=None)", "getpass.get_paths(stream=None)", "getpass.setpos(stream=None)", "getpass.getabsfile(stream=None)", "getpass.getlines(stream=None)", "getpass.transpose(stream=None)", "getpass.iterparse(stream=None)", "getpass.parse(stream=None)", "getpass._parse_datetime(stream=None)", "getpass.easy_dtype(stream=None)", "getpass.thetagrids(stream=None)"], "getpass.getuser()": ["getuser", "getpass.getuserbase()", "getpass._getuserbase()", "getpass.geterr()", "getpass.getbufsize()", "getpass.getsize()", "getpass.greater()", "getpass._get_sep()", "getpass.getpager()", "getpass.fuser()", "getpass._get_spec()", "getpass.getsource()", "getpass.getenv()", "getpass.getLogger()", "getpass.gather()"], "gettext.GNUTranslations": ["gettext.GNUTranslations"], "gettext.bind_textdomain_codeset(domain)": ["bind_textdomain_codeset", "gettext.bindtextdomain(domain)", "gettext._copy_docstring_and_deprecators(domain)", "gettext.latin_1_decode(domain)", "gettext.latin_1_encode(domain)", "gettext._assert_warns_context(domain)", "gettext._decode_line(domain)", "gettext.reduce_add_coalesced(domain)", "gettext.utf_16_ex_decode(domain)", "gettext.utf_32_ex_decode(domain)", "gettext._compile_bytecode(domain)", "gettext._find_strings(domain)", "gettext._histogram_bin_edges_dispatcher(domain)", "gettext.escape_encode(domain)", "gettext.escape_decode(domain)"], "gettext.bind_textdomain_codeset(domain, codeset=None)": ["bind_textdomain_codeset", "gettext.bind_textdomain_codeset(domain, codeset=None)", "gettext.bindtextdomain(domain, codeset=None)", "gettext._copy_docstring_and_deprecators(domain, codeset=None)", "gettext.latin_1_decode(domain, codeset=None)", "gettext.latin_1_encode(domain, codeset=None)", "gettext._assert_warns_context(domain, codeset=None)", "gettext._decode_line(domain, codeset=None)", "gettext.reduce_add_coalesced(domain, codeset=None)", "gettext.utf_16_ex_decode(domain, codeset=None)", "gettext.utf_32_ex_decode(domain, codeset=None)", "gettext._compile_bytecode(domain, codeset=None)", "gettext._find_strings(domain, codeset=None)", "gettext._histogram_bin_edges_dispatcher(domain, codeset=None)", "gettext.escape_encode(domain, codeset=None)"], "gettext.bindtextdomain(domain)": ["bindtextdomain", "gettext.bind_textdomain_codeset(domain)", "gettext.interpolate(domain)", "gettext._compile_bytecode(domain)", "gettext._find_strings(domain)", "gettext.makeIntervalIndex(domain)", "gettext.interact(domain)", "gettext.identity(domain)", "gettext.isneginf(domain)", "gettext.makeBoolIndex(domain)", "gettext.main(domain)", "gettext._nanmedian(domain)", "gettext.nanmedian(domain)", "gettext.ndpointer(domain)", "gettext.latin_1_decode(domain)"], "gettext.dgettext(domain, message)": ["dgettext", "gettext.dngettext(domain, message)", "gettext.ldgettext(domain, message)", "gettext.gettext(domain, message)", "gettext.ldngettext(domain, message)", "gettext.ngettext(domain, message)", "gettext.lgettext(domain, message)", "gettext.lngettext(domain, message)", "gettext.get_ttext(domain, message)", "gettext.getcontext(domain, message)", "gettext.text(domain, message)", "gettext.__getattr__(domain, message)", "gettext.figtext(domain, message)", "gettext.__getitem__(domain, message)", "gettext.getitem(domain, message)"], "gettext.dngettext(domain, singular, plural, n)": ["dngettext", "gettext.ldngettext(domain, singular, plural, n)", "gettext.dgettext(domain, singular, plural, n)", "gettext.ngettext(domain, singular, plural, n)", "gettext.lngettext(domain, singular, plural, n)", "gettext.ldgettext(domain, singular, plural, n)", "gettext.gettext(domain, singular, plural, n)", "gettext.lgettext(domain, singular, plural, n)", "gettext.get_ttext(domain, singular, plural, n)", "gettext.getcontext(domain, singular, plural, n)", "gettext.setcontext(domain, singular, plural, n)", "gettext.text(domain, singular, plural, n)", "gettext.__getattr__(domain, singular, plural, n)", "gettext.figtext(domain, singular, plural, n)", "gettext.get_dot_atom_text(domain, singular, plural, n)"], "gettext.find(domain)": ["find", "gettext.rfind(domain)", "gettext.findall(domain)", "gettext.index(domain)", "gettext.finditer(domain)", "gettext.rindex(domain)", "gettext.indices(domain)", "gettext.pinv(domain)", "gettext.mknod(domain)", "gettext.vander(domain)", "gettext.intersect1d(domain)", "gettext.mask_indices(domain)", "gettext.symlink(domain)", "gettext.figimage(domain)", "gettext.endswith(domain)"], "gettext.find(domain, all=False)": ["find", "gettext.find(domain, all=True)", "gettext.rfind(domain, all=False)", "gettext.findall(domain, all=False)", "gettext.index(domain, all=False)", "gettext.finditer(domain, all=False)", "gettext.rindex(domain, all=False)", "gettext.indices(domain, all=False)", "gettext.pinv(domain, all=False)", "gettext.mknod(domain, all=False)", "gettext.vander(domain, all=False)", "gettext.intersect1d(domain, all=False)", "gettext.mask_indices(domain, all=False)", "gettext.symlink(domain, all=False)", "gettext.figimage(domain, all=False)"], "gettext.find(domain, languages=None)": ["find", "gettext.find(domain, languages=None)", "gettext.rfind(domain, languages=None)", "gettext.findall(domain, languages=None)", "gettext.index(domain, languages=None)", "gettext.finditer(domain, languages=None)", "gettext.rindex(domain, languages=None)", "gettext.indices(domain, languages=None)", "gettext.pinv(domain, languages=None)", "gettext.mknod(domain, languages=None)", "gettext.vander(domain, languages=None)", "gettext.intersect1d(domain, languages=None)", "gettext.mask_indices(domain, languages=None)", "gettext.symlink(domain, languages=None)", "gettext.figimage(domain, languages=None)"], "gettext.find(domain, languages=None, all=False)": ["find", "gettext.find(domain, languages=None, all=True)", "gettext.rfind(domain, languages=None, all=False)", "gettext.findall(domain, languages=None, all=False)", "gettext.index(domain, languages=None, all=False)", "gettext.finditer(domain, languages=None, all=False)", "gettext.rindex(domain, languages=None, all=False)", "gettext.indices(domain, languages=None, all=False)", "gettext.pinv(domain, languages=None, all=False)", "gettext.mknod(domain, languages=None, all=False)", "gettext.vander(domain, languages=None, all=False)", "gettext.intersect1d(domain, languages=None, all=False)", "gettext.mask_indices(domain, languages=None, all=False)", "gettext.symlink(domain, languages=None, all=False)", "gettext.figimage(domain, languages=None, all=False)"], "gettext.find(domain, localedir=None)": ["find", "gettext.find(domain, localedir=None)", "gettext.rfind(domain, localedir=None)", "gettext.findall(domain, localedir=None)", "gettext.index(domain, localedir=None)", "gettext.finditer(domain, localedir=None)", "gettext.rindex(domain, localedir=None)", "gettext.indices(domain, localedir=None)", "gettext.pinv(domain, localedir=None)", "gettext.mknod(domain, localedir=None)", "gettext.vander(domain, localedir=None)", "gettext.intersect1d(domain, localedir=None)", "gettext.mask_indices(domain, localedir=None)", "gettext.symlink(domain, localedir=None)", "gettext.figimage(domain, localedir=None)"], "gettext.find(domain, localedir=None, all=False)": ["find", "gettext.find(domain, localedir=None, all=True)", "gettext.rfind(domain, localedir=None, all=False)", "gettext.findall(domain, localedir=None, all=False)", "gettext.index(domain, localedir=None, all=False)", "gettext.finditer(domain, localedir=None, all=False)", "gettext.rindex(domain, localedir=None, all=False)", "gettext.indices(domain, localedir=None, all=False)", "gettext.pinv(domain, localedir=None, all=False)", "gettext.mknod(domain, localedir=None, all=False)", "gettext.vander(domain, localedir=None, all=False)", "gettext.intersect1d(domain, localedir=None, all=False)", "gettext.mask_indices(domain, localedir=None, all=False)", "gettext.symlink(domain, localedir=None, all=False)", "gettext.figimage(domain, localedir=None, all=False)"], "gettext.find(domain, localedir=None, languages=None)": ["find", "gettext.find(domain, localedir=None, languages=None)", "gettext.rfind(domain, localedir=None, languages=None)", "gettext.findall(domain, localedir=None, languages=None)", "gettext.index(domain, localedir=None, languages=None)", "gettext.finditer(domain, localedir=None, languages=None)", "gettext.rindex(domain, localedir=None, languages=None)", "gettext.indices(domain, localedir=None, languages=None)", "gettext.pinv(domain, localedir=None, languages=None)", "gettext.mknod(domain, localedir=None, languages=None)", "gettext.vander(domain, localedir=None, languages=None)", "gettext.intersect1d(domain, localedir=None, languages=None)", "gettext.mask_indices(domain, localedir=None, languages=None)", "gettext.symlink(domain, localedir=None, languages=None)", "gettext.figimage(domain, localedir=None, languages=None)"], "gettext.find(domain, localedir=None, languages=None, all=False)": ["find", "gettext.find(domain, localedir=None, languages=None, all=True)", "gettext.rfind(domain, localedir=None, languages=None, all=False)", "gettext.findall(domain, localedir=None, languages=None, all=False)", "gettext.index(domain, localedir=None, languages=None, all=False)", "gettext.finditer(domain, localedir=None, languages=None, all=False)", "gettext.rindex(domain, localedir=None, languages=None, all=False)", "gettext.indices(domain, localedir=None, languages=None, all=False)", "gettext.pinv(domain, localedir=None, languages=None, all=False)", "gettext.mknod(domain, localedir=None, languages=None, all=False)", "gettext.vander(domain, localedir=None, languages=None, all=False)", "gettext.intersect1d(domain, localedir=None, languages=None, all=False)", "gettext.mask_indices(domain, localedir=None, languages=None, all=False)", "gettext.symlink(domain, localedir=None, languages=None, all=False)", "gettext.figimage(domain, localedir=None, languages=None, all=False)"], "gettext.gettext(message)": ["gettext", "gettext.dgettext(message)", "gettext.ngettext(message)", "gettext.lgettext(message)", "gettext.lngettext(message)", "gettext.get_ttext(message)", "gettext.dngettext(message)", "gettext.ldgettext(message)", "gettext.getcontext(message)", "gettext.ldngettext(message)", "gettext.text(message)", "gettext.__getattr__(message)", "gettext.figtext(message)", "gettext.__getitem__(message)", "gettext.getitem(message)"], "gettext.install(domain)": ["install", "gettext._all(domain)", "gettext.print_stack(domain)", "gettext._stat(domain)", "gettext.distance(domain)", "gettext.interact(domain)", "gettext.distb(domain)", "gettext.title(domain)", "gettext._raw_input(domain)", "gettext.lstat(domain)", "gettext.setlocale(domain)", "gettext.filled(domain)", "gettext.nanstd(domain)", "gettext.Client(domain)", "gettext.listen(domain)"], "gettext.install(domain, codeset=None)": ["install", "gettext.install(domain, codeset=None)", "gettext._all(domain, codeset=None)", "gettext.print_stack(domain, codeset=None)", "gettext._stat(domain, codeset=None)", "gettext.distance(domain, codeset=None)", "gettext.interact(domain, codeset=None)", "gettext.distb(domain, codeset=None)", "gettext.title(domain, codeset=None)", "gettext._raw_input(domain, codeset=None)", "gettext.lstat(domain, codeset=None)", "gettext.setlocale(domain, codeset=None)", "gettext.filled(domain, codeset=None)", "gettext.nanstd(domain, codeset=None)", "gettext.Client(domain, codeset=None)"], "gettext.install(domain, codeset=None, names=None)": ["install", "gettext.install(domain, codeset=None, names=None)", "gettext._all(domain, codeset=None, names=None)", "gettext.print_stack(domain, codeset=None, names=None)", "gettext._stat(domain, codeset=None, names=None)", "gettext.distance(domain, codeset=None, names=None)", "gettext.interact(domain, codeset=None, names=None)", "gettext.distb(domain, codeset=None, names=None)", "gettext.title(domain, codeset=None, names=None)", "gettext._raw_input(domain, codeset=None, names=None)", "gettext.lstat(domain, codeset=None, names=None)", "gettext.setlocale(domain, codeset=None, names=None)", "gettext.filled(domain, codeset=None, names=None)", "gettext.nanstd(domain, codeset=None, names=None)", "gettext.Client(domain, codeset=None, names=None)"], "gettext.install(domain, localedir=None)": ["install", "gettext.install(domain, localedir=None)", "gettext._all(domain, localedir=None)", "gettext.print_stack(domain, localedir=None)", "gettext._stat(domain, localedir=None)", "gettext.distance(domain, localedir=None)", "gettext.interact(domain, localedir=None)", "gettext.distb(domain, localedir=None)", "gettext.title(domain, localedir=None)", "gettext._raw_input(domain, localedir=None)", "gettext.lstat(domain, localedir=None)", "gettext.setlocale(domain, localedir=None)", "gettext.filled(domain, localedir=None)", "gettext.nanstd(domain, localedir=None)", "gettext.Client(domain, localedir=None)"], "gettext.install(domain, localedir=None, codeset=None)": ["install", "gettext.install(domain, localedir=None, codeset=None)", "gettext._all(domain, localedir=None, codeset=None)", "gettext.print_stack(domain, localedir=None, codeset=None)", "gettext._stat(domain, localedir=None, codeset=None)", "gettext.distance(domain, localedir=None, codeset=None)", "gettext.interact(domain, localedir=None, codeset=None)", "gettext.distb(domain, localedir=None, codeset=None)", "gettext.title(domain, localedir=None, codeset=None)", "gettext._raw_input(domain, localedir=None, codeset=None)", "gettext.lstat(domain, localedir=None, codeset=None)", "gettext.setlocale(domain, localedir=None, codeset=None)", "gettext.filled(domain, localedir=None, codeset=None)", "gettext.nanstd(domain, localedir=None, codeset=None)", "gettext.Client(domain, localedir=None, codeset=None)"], "gettext.install(domain, localedir=None, codeset=None, names=None)": ["install", "gettext.install(domain, localedir=None, codeset=None, names=None)", "gettext._all(domain, localedir=None, codeset=None, names=None)", "gettext.print_stack(domain, localedir=None, codeset=None, names=None)", "gettext._stat(domain, localedir=None, codeset=None, names=None)", "gettext.distance(domain, localedir=None, codeset=None, names=None)", "gettext.interact(domain, localedir=None, codeset=None, names=None)", "gettext.distb(domain, localedir=None, codeset=None, names=None)", "gettext.title(domain, localedir=None, codeset=None, names=None)", "gettext._raw_input(domain, localedir=None, codeset=None, names=None)", "gettext.lstat(domain, localedir=None, codeset=None, names=None)", "gettext.setlocale(domain, localedir=None, codeset=None, names=None)", "gettext.filled(domain, localedir=None, codeset=None, names=None)", "gettext.nanstd(domain, localedir=None, codeset=None, names=None)", "gettext.Client(domain, localedir=None, codeset=None, names=None)"], "gettext.install(domain, localedir=None, names=None)": ["install", "gettext.install(domain, localedir=None, names=None)", "gettext._all(domain, localedir=None, names=None)", "gettext.print_stack(domain, localedir=None, names=None)", "gettext._stat(domain, localedir=None, names=None)", "gettext.distance(domain, localedir=None, names=None)", "gettext.interact(domain, localedir=None, names=None)", "gettext.distb(domain, localedir=None, names=None)", "gettext.title(domain, localedir=None, names=None)", "gettext._raw_input(domain, localedir=None, names=None)", "gettext.lstat(domain, localedir=None, names=None)", "gettext.setlocale(domain, localedir=None, names=None)", "gettext.filled(domain, localedir=None, names=None)", "gettext.nanstd(domain, localedir=None, names=None)", "gettext.Client(domain, localedir=None, names=None)"], "gettext.install(domain, names=None)": ["install", "gettext.install(domain, names=None)", "gettext._all(domain, names=None)", "gettext.print_stack(domain, names=None)", "gettext._stat(domain, names=None)", "gettext.distance(domain, names=None)", "gettext.interact(domain, names=None)", "gettext.distb(domain, names=None)", "gettext.title(domain, names=None)", "gettext._raw_input(domain, names=None)", "gettext.lstat(domain, names=None)", "gettext.setlocale(domain, names=None)", "gettext.filled(domain, names=None)", "gettext.nanstd(domain, names=None)", "gettext.Client(domain, names=None)"], "gettext.ngettext(singular, plural, n)": ["ngettext", "gettext.lngettext(singular, plural, n)", "gettext.dngettext(singular, plural, n)", "gettext.gettext(singular, plural, n)", "gettext.ldngettext(singular, plural, n)", "gettext.dgettext(singular, plural, n)", "gettext.lgettext(singular, plural, n)", "gettext.get_ttext(singular, plural, n)", "gettext.ldgettext(singular, plural, n)", "gettext.getcontext(singular, plural, n)", "gettext.text(singular, plural, n)", "gettext.__getattr__(singular, plural, n)", "gettext.figtext(singular, plural, n)", "gettext.__getitem__(singular, plural, n)", "gettext.getitem(singular, plural, n)"], "gettext.textdomain()": ["textdomain", "gettext.main()", "gettext._main()", "gettext.token_hex()", "gettext._format_exc()", "gettext.thetagrids()", "gettext.format_exc()", "gettext.token_bytes()", "gettext.print_exception()", "gettext.testmod()", "gettext.get_rank()", "gettext._assert_no_warnings_context()", "gettext.test()", "gettext.ndpointer()", "gettext.print_exc()"], "gettext.translation(domain)": ["translation", "gettext.transpose(domain)", "gettext.formatannotation(domain)", "gettext.setposition(domain)", "gettext.asmatrix(domain)", "gettext.get_instructions(domain)", "gettext.nanargmin(domain)", "gettext.makeFloatIndex(domain)", "gettext.fromstring(domain)", "gettext.shapetransform(domain)", "gettext.calculate_gain(domain)", "gettext.splitlines(domain)", "gettext.latin_1_encode(domain)", "gettext.unlink(domain)", "gettext.rstrip(domain)"], "gettext.translation(domain, class_=None)": ["translation", "gettext.translation(domain, class_=None)", "gettext.transpose(domain, class_=None)", "gettext.formatannotation(domain, class_=None)", "gettext.setposition(domain, class_=None)", "gettext.asmatrix(domain, class_=None)", "gettext.get_instructions(domain, class_=None)", "gettext.nanargmin(domain, class_=None)", "gettext.makeFloatIndex(domain, class_=None)", "gettext.fromstring(domain, class_=None)", "gettext.shapetransform(domain, class_=None)", "gettext.calculate_gain(domain, class_=None)", "gettext.splitlines(domain, class_=None)", "gettext.latin_1_encode(domain, class_=None)", "gettext.unlink(domain, class_=None)"], "gettext.translation(domain, codeset=None)": ["translation", "gettext.translation(domain, codeset=None)", "gettext.transpose(domain, codeset=None)", "gettext.formatannotation(domain, codeset=None)", "gettext.setposition(domain, codeset=None)", "gettext.asmatrix(domain, codeset=None)", "gettext.get_instructions(domain, codeset=None)", "gettext.nanargmin(domain, codeset=None)", "gettext.makeFloatIndex(domain, codeset=None)", "gettext.fromstring(domain, codeset=None)", "gettext.shapetransform(domain, codeset=None)", "gettext.calculate_gain(domain, codeset=None)", "gettext.splitlines(domain, codeset=None)", "gettext.latin_1_encode(domain, codeset=None)", "gettext.unlink(domain, codeset=None)"], "gettext.translation(domain, fallback=False)": ["translation", "gettext.translation(domain, fallback=True)", "gettext.transpose(domain, fallback=False)", "gettext.formatannotation(domain, fallback=False)", "gettext.setposition(domain, fallback=False)", "gettext.asmatrix(domain, fallback=False)", "gettext.get_instructions(domain, fallback=False)", "gettext.nanargmin(domain, fallback=False)", "gettext.makeFloatIndex(domain, fallback=False)", "gettext.fromstring(domain, fallback=False)", "gettext.shapetransform(domain, fallback=False)", "gettext.calculate_gain(domain, fallback=False)", "gettext.splitlines(domain, fallback=False)", "gettext.latin_1_encode(domain, fallback=False)", "gettext.unlink(domain, fallback=False)"], "gettext.translation(domain, languages=None)": ["translation", "gettext.translation(domain, languages=None)", "gettext.transpose(domain, languages=None)", "gettext.formatannotation(domain, languages=None)", "gettext.setposition(domain, languages=None)", "gettext.asmatrix(domain, languages=None)", "gettext.get_instructions(domain, languages=None)", "gettext.nanargmin(domain, languages=None)", "gettext.makeFloatIndex(domain, languages=None)", "gettext.fromstring(domain, languages=None)", "gettext.shapetransform(domain, languages=None)", "gettext.calculate_gain(domain, languages=None)", "gettext.splitlines(domain, languages=None)", "gettext.latin_1_encode(domain, languages=None)", "gettext.unlink(domain, languages=None)"], "gettext.translation(domain, localedir=None)": ["translation", "gettext.translation(domain, localedir=None)", "gettext.transpose(domain, localedir=None)", "gettext.formatannotation(domain, localedir=None)", "gettext.setposition(domain, localedir=None)", "gettext.asmatrix(domain, localedir=None)", "gettext.get_instructions(domain, localedir=None)", "gettext.nanargmin(domain, localedir=None)", "gettext.makeFloatIndex(domain, localedir=None)", "gettext.fromstring(domain, localedir=None)", "gettext.shapetransform(domain, localedir=None)", "gettext.calculate_gain(domain, localedir=None)", "gettext.splitlines(domain, localedir=None)", "gettext.latin_1_encode(domain, localedir=None)", "gettext.unlink(domain, localedir=None)"], "gettext.translation(domain, localedir=None, class_=None)": ["translation", "gettext.translation(domain, localedir=None, class_=None)", "gettext.transpose(domain, localedir=None, class_=None)", "gettext.formatannotation(domain, localedir=None, class_=None)", "gettext.setposition(domain, localedir=None, class_=None)", "gettext.asmatrix(domain, localedir=None, class_=None)", "gettext.get_instructions(domain, localedir=None, class_=None)", "gettext.nanargmin(domain, localedir=None, class_=None)", "gettext.makeFloatIndex(domain, localedir=None, class_=None)", "gettext.fromstring(domain, localedir=None, class_=None)", "gettext.shapetransform(domain, localedir=None, class_=None)", "gettext.calculate_gain(domain, localedir=None, class_=None)", "gettext.splitlines(domain, localedir=None, class_=None)", "gettext.latin_1_encode(domain, localedir=None, class_=None)", "gettext.unlink(domain, localedir=None, class_=None)"], "gettext.translation(domain, localedir=None, codeset=None)": ["translation", "gettext.translation(domain, localedir=None, codeset=None)", "gettext.transpose(domain, localedir=None, codeset=None)", "gettext.formatannotation(domain, localedir=None, codeset=None)", "gettext.setposition(domain, localedir=None, codeset=None)", "gettext.asmatrix(domain, localedir=None, codeset=None)", "gettext.get_instructions(domain, localedir=None, codeset=None)", "gettext.nanargmin(domain, localedir=None, codeset=None)", "gettext.makeFloatIndex(domain, localedir=None, codeset=None)", "gettext.fromstring(domain, localedir=None, codeset=None)", "gettext.shapetransform(domain, localedir=None, codeset=None)", "gettext.calculate_gain(domain, localedir=None, codeset=None)", "gettext.splitlines(domain, localedir=None, codeset=None)", "gettext.latin_1_encode(domain, localedir=None, codeset=None)", "gettext.unlink(domain, localedir=None, codeset=None)"], "gettext.translation(domain, localedir=None, fallback=False)": ["translation", "gettext.translation(domain, localedir=None, fallback=True)", "gettext.transpose(domain, localedir=None, fallback=False)", "gettext.formatannotation(domain, localedir=None, fallback=False)", "gettext.setposition(domain, localedir=None, fallback=False)", "gettext.asmatrix(domain, localedir=None, fallback=False)", "gettext.get_instructions(domain, localedir=None, fallback=False)", "gettext.nanargmin(domain, localedir=None, fallback=False)", "gettext.makeFloatIndex(domain, localedir=None, fallback=False)", "gettext.fromstring(domain, localedir=None, fallback=False)", "gettext.shapetransform(domain, localedir=None, fallback=False)", "gettext.calculate_gain(domain, localedir=None, fallback=False)", "gettext.splitlines(domain, localedir=None, fallback=False)", "gettext.latin_1_encode(domain, localedir=None, fallback=False)", "gettext.unlink(domain, localedir=None, fallback=False)"], "gettext.translation(domain, localedir=None, languages=None)": ["translation", "gettext.translation(domain, localedir=None, languages=None)", "gettext.transpose(domain, localedir=None, languages=None)", "gettext.formatannotation(domain, localedir=None, languages=None)", "gettext.setposition(domain, localedir=None, languages=None)", "gettext.asmatrix(domain, localedir=None, languages=None)", "gettext.get_instructions(domain, localedir=None, languages=None)", "gettext.nanargmin(domain, localedir=None, languages=None)", "gettext.makeFloatIndex(domain, localedir=None, languages=None)", "gettext.fromstring(domain, localedir=None, languages=None)", "gettext.shapetransform(domain, localedir=None, languages=None)", "gettext.calculate_gain(domain, localedir=None, languages=None)", "gettext.splitlines(domain, localedir=None, languages=None)", "gettext.latin_1_encode(domain, localedir=None, languages=None)", "gettext.unlink(domain, localedir=None, languages=None)"], "glob.escape(pathname)": ["escape", "glob.guess_type(pathname)", "glob.get_locales(pathname)", "glob.measure(pathname)", "glob.compress(pathname)", "glob.testfile(pathname)", "glob.signature(pathname)", "glob.onrelease(pathname)", "glob._format_exc(pathname)", "glob.format_exc(pathname)", "glob._describe_option(pathname)", "glob.socketpair(pathname)", "glob.spawn(pathname)", "glob.getframeinfo(pathname)", "glob.browse(pathname)"], "glob.glob(pathname)": ["glob", "glob.iglob(pathname)", "glob._iglob(pathname)", "glob.loop(pathname)", "glob.angle(pathname)", "glob._group(pathname)", "glob.locate(pathname)", "glob._genops(pathname)", "glob.glob1(pathname)", "glob._glob1(pathname)", "glob._glob2(pathname)", "glob.glob0(pathname)", "glob._glob0(pathname)", "glob._txt2obj(pathname)", "glob.platform(pathname)"], "glob.glob(pathname, recursive=False)": ["glob", "glob.glob(pathname, recursive=True)", "glob.iglob(pathname, recursive=False)", "glob._iglob(pathname, recursive=False)", "glob.loop(pathname, recursive=False)", "glob.angle(pathname, recursive=False)", "glob._group(pathname, recursive=False)", "glob.locate(pathname, recursive=False)", "glob._genops(pathname, recursive=False)", "glob.glob1(pathname, recursive=False)", "glob._glob1(pathname, recursive=False)", "glob._glob2(pathname, recursive=False)", "glob.glob0(pathname, recursive=False)", "glob._glob0(pathname, recursive=False)", "glob._txt2obj(pathname, recursive=False)"], "glob.iglob(pathname)": ["iglob", "glob.glob(pathname)", "glob._iglob(pathname)", "glob.diagonal(pathname)", "glob.diagflat(pathname)", "glob.diag(pathname)", "glob.loop(pathname)", "glob.tril(pathname)", "glob.angle(pathname)", "glob._group(pathname)", "glob._splitnetloc(pathname)", "glob.locate(pathname)", "glob._genops(pathname)", "glob._txt2obj(pathname)", "glob.compile(pathname)"], "glob.iglob(pathname, recursive=False)": ["iglob", "glob.iglob(pathname, recursive=True)", "glob.glob(pathname, recursive=False)", "glob._iglob(pathname, recursive=False)", "glob.diagonal(pathname, recursive=False)", "glob.diagflat(pathname, recursive=False)", "glob.diag(pathname, recursive=False)", "glob.loop(pathname, recursive=False)", "glob.tril(pathname, recursive=False)", "glob.angle(pathname, recursive=False)", "glob._group(pathname, recursive=False)", "glob._splitnetloc(pathname, recursive=False)", "glob.locate(pathname, recursive=False)", "glob._genops(pathname, recursive=False)", "glob._txt2obj(pathname, recursive=False)"], "globals()": ["globals", "_globals()", "glob()", "glob1()", "_iglob()", "loads()", "_glob1()", "_loads()", "_glob2()", "glob0()", "_glob0()", "iglob()", "get_locales()", "localhost()", "getlocale()"], "gnu_translations.gettext(message)": ["gettext"], "gnu_translations.lngettext(singular, plural, n)": ["lngettext"], "gnu_translations.ngettext(singular, plural, n)": ["ngettext"], "group.__str__()": ["__str__"], "group.addresses": ["group.addresses"], "grp.getgrall()": ["getgrall"], "grp.getgrgid(gid)": ["getgrgid"], "grp.getgrnam(name)": ["getgrnam"], "gzip.GzipFile()": ["GzipFile"], "gzip.GzipFile(compresslevel=9)": ["GzipFile", "gzip.GzipFile(compresslevel='9')"], "gzip.GzipFile(filename=None)": ["GzipFile", "gzip.GzipFile(filename=None)"], "gzip.GzipFile(filename=None, compresslevel=9)": ["GzipFile", "gzip.GzipFile(filename=None, compresslevel=9)", "gzip.GzipFile(filename=None, compresslevel='9')"], "gzip.GzipFile(filename=None, mtime=None)": ["GzipFile", "gzip.GzipFile(filename=None, mtime=None)"], "gzip.GzipFile(fileobj=None)": ["GzipFile", "gzip.GzipFile(fileobj=None)"], "gzip.GzipFile(mtime=None)": ["GzipFile", "gzip.GzipFile(mtime=None)"], "gzip.compress(data)": ["compress", "gzip.decompress(data)", "gzip._compress_dispatcher(data)", "gzip.pcolormesh(data)", "gzip.fromrecords(data)", "gzip.cumprod(data)", "gzip.as_completed(data)", "gzip.load_compiled(data)", "gzip.onrelease(data)", "gzip.parse(data)", "gzip.screensize(data)", "gzip._nested_map(data)", "gzip.fromarrays(data)", "gzip.nancumprod(data)", "gzip.rmtree(data)"], "gzip.compress(data, compresslevel=9)": ["compress", "gzip.compress(data, compresslevel='9')", "gzip.decompress(data, compresslevel=9)", "gzip._compress_dispatcher(data, compresslevel=9)", "gzip.pcolormesh(data, compresslevel=9)", "gzip.fromrecords(data, compresslevel=9)", "gzip.cumprod(data, compresslevel=9)", "gzip.as_completed(data, compresslevel=9)", "gzip.load_compiled(data, compresslevel=9)", "gzip.onrelease(data, compresslevel=9)", "gzip.parse(data, compresslevel=9)", "gzip.screensize(data, compresslevel=9)", "gzip._nested_map(data, compresslevel=9)", "gzip.fromarrays(data, compresslevel=9)", "gzip.nancumprod(data, compresslevel=9)"], "gzip.decompress(data)": ["decompress", "gzip.re_compile(data)", "gzip.compile(data)", "gzip.compress(data)", "gzip.decodestring(data)", "gzip.b16decode(data)", "gzip.b32decode(data)", "gzip._genops(data)", "gzip.prepare(data)", "gzip._unparse_datetime(data)", "gzip.template(data)", "gzip.safe_repr(data)", "gzip.b85encode(data)", "gzip.parse(data)", "gzip.rmtree(data)"], "gzip.open(filename)": ["open", "gzip._open(filename)", "gzip.open_latin1(filename)", "gzip.popen(filename)", "gzip.bltn_open(filename)", "gzip.OpenWrapper(filename)", "gzip._builtin_open(filename)", "gzip.urlopen(filename)", "gzip.pie(filename)", "gzip._run_code(filename)", "gzip.compress(filename)", "gzip._popen(filename)", "gzip.byte_compile(filename)", "gzip.boxplot(filename)", "gzip.pen(filename)"], "gzip.open(filename, compresslevel=9)": ["open", "gzip.open(filename, compresslevel='9')", "gzip._open(filename, compresslevel=9)", "gzip.open_latin1(filename, compresslevel=9)", "gzip.popen(filename, compresslevel=9)", "gzip.bltn_open(filename, compresslevel=9)", "gzip.OpenWrapper(filename, compresslevel=9)", "gzip._builtin_open(filename, compresslevel=9)", "gzip.urlopen(filename, compresslevel=9)", "gzip.pie(filename, compresslevel=9)", "gzip._run_code(filename, compresslevel=9)", "gzip.compress(filename, compresslevel=9)", "gzip._popen(filename, compresslevel=9)", "gzip.byte_compile(filename, compresslevel=9)", "gzip.boxplot(filename, compresslevel=9)"], "gzip.open(filename, encoding=None)": ["open", "gzip.open(filename, encoding=None)", "gzip._open(filename, encoding=None)", "gzip.open_latin1(filename, encoding=None)", "gzip.popen(filename, encoding=None)", "gzip.bltn_open(filename, encoding=None)", "gzip.OpenWrapper(filename, encoding=None)", "gzip._builtin_open(filename, encoding=None)", "gzip.urlopen(filename, encoding=None)", "gzip.pie(filename, encoding=None)", "gzip._run_code(filename, encoding=None)", "gzip.compress(filename, encoding=None)", "gzip._popen(filename, encoding=None)", "gzip.byte_compile(filename, encoding=None)", "gzip.boxplot(filename, encoding=None)"], "gzip.open(filename, mode='rb')": ["open", "gzip.open(filename, mode=2.0)", "gzip._open(filename, mode='rb')", "gzip.open_latin1(filename, mode='rb')", "gzip.popen(filename, mode='rb')", "gzip.bltn_open(filename, mode='rb')", "gzip.OpenWrapper(filename, mode='rb')", "gzip._builtin_open(filename, mode='rb')", "gzip.urlopen(filename, mode='rb')", "gzip.pie(filename, mode='rb')", "gzip._run_code(filename, mode='rb')", "gzip.compress(filename, mode='rb')", "gzip._popen(filename, mode='rb')", "gzip.byte_compile(filename, mode='rb')", "gzip.boxplot(filename, mode='rb')"], "gzip.open(filename, mode='rb', compresslevel=9)": ["open", "gzip.open(filename, mode=2.0, compresslevel='9')", "gzip._open(filename, mode='rb', compresslevel=9)", "gzip.open_latin1(filename, mode='rb', compresslevel=9)", "gzip.popen(filename, mode='rb', compresslevel=9)", "gzip.bltn_open(filename, mode='rb', compresslevel=9)", "gzip.OpenWrapper(filename, mode='rb', compresslevel=9)", "gzip._builtin_open(filename, mode='rb', compresslevel=9)", "gzip.urlopen(filename, mode='rb', compresslevel=9)", "gzip.pie(filename, mode='rb', compresslevel=9)", "gzip._run_code(filename, mode='rb', compresslevel=9)", "gzip.compress(filename, mode='rb', compresslevel=9)", "gzip._popen(filename, mode='rb', compresslevel=9)", "gzip.byte_compile(filename, mode='rb', compresslevel=9)", "gzip.boxplot(filename, mode='rb', compresslevel=9)"], "gzip.open(filename, mode='rb', encoding=None)": ["open", "gzip.open(filename, mode='rb', encoding=None)", "gzip.open(filename, mode=2.0, encoding=None)", "gzip._open(filename, mode='rb', encoding=None)", "gzip.open_latin1(filename, mode='rb', encoding=None)", "gzip.popen(filename, mode='rb', encoding=None)", "gzip.bltn_open(filename, mode='rb', encoding=None)", "gzip.OpenWrapper(filename, mode='rb', encoding=None)", "gzip._builtin_open(filename, mode='rb', encoding=None)", "gzip.urlopen(filename, mode='rb', encoding=None)", "gzip.pie(filename, mode='rb', encoding=None)", "gzip._run_code(filename, mode='rb', encoding=None)", "gzip.compress(filename, mode='rb', encoding=None)", "gzip._popen(filename, mode='rb', encoding=None)", "gzip.byte_compile(filename, mode='rb', encoding=None)"], "gzip.open(filename, mode='rb', errors=None)": ["open", "gzip.open(filename, mode='rb', errors=None)", "gzip.open(filename, mode=2.0, errors=None)", "gzip._open(filename, mode='rb', errors=None)", "gzip.open_latin1(filename, mode='rb', errors=None)", "gzip.popen(filename, mode='rb', errors=None)", "gzip.bltn_open(filename, mode='rb', errors=None)", "gzip.OpenWrapper(filename, mode='rb', errors=None)", "gzip._builtin_open(filename, mode='rb', errors=None)", "gzip.urlopen(filename, mode='rb', errors=None)", "gzip.pie(filename, mode='rb', errors=None)", "gzip._run_code(filename, mode='rb', errors=None)", "gzip.compress(filename, mode='rb', errors=None)", "gzip._popen(filename, mode='rb', errors=None)", "gzip.byte_compile(filename, mode='rb', errors=None)"], "gzip.open(filename, mode='rb', newline=None)": ["open", "gzip.open(filename, mode='rb', newline=None)", "gzip.open(filename, mode=2.0, newline=None)", "gzip._open(filename, mode='rb', newline=None)", "gzip.open_latin1(filename, mode='rb', newline=None)", "gzip.popen(filename, mode='rb', newline=None)", "gzip.bltn_open(filename, mode='rb', newline=None)", "gzip.OpenWrapper(filename, mode='rb', newline=None)", "gzip._builtin_open(filename, mode='rb', newline=None)", "gzip.urlopen(filename, mode='rb', newline=None)", "gzip.pie(filename, mode='rb', newline=None)", "gzip._run_code(filename, mode='rb', newline=None)", "gzip.compress(filename, mode='rb', newline=None)", "gzip._popen(filename, mode='rb', newline=None)", "gzip.byte_compile(filename, mode='rb', newline=None)"], "gzip.open(filename, newline=None)": ["open", "gzip.open(filename, newline=None)", "gzip._open(filename, newline=None)", "gzip.open_latin1(filename, newline=None)", "gzip.popen(filename, newline=None)", "gzip.bltn_open(filename, newline=None)", "gzip.OpenWrapper(filename, newline=None)", "gzip._builtin_open(filename, newline=None)", "gzip.urlopen(filename, newline=None)", "gzip.pie(filename, newline=None)", "gzip._run_code(filename, newline=None)", "gzip.compress(filename, newline=None)", "gzip._popen(filename, newline=None)", "gzip.byte_compile(filename, newline=None)", "gzip.boxplot(filename, newline=None)"], "gzip_file.mtime": ["gzip_file.mtime"], "handle.cancel()": ["cancel"], "hasattr(object, name)": ["hasattr", "scatter(object, name)", "asstr(object, name)", "asmatrix(object, name)", "setxattr(object, name)", "_try_cast(object, name)", "isatty(object, name)", "listxattr(object, name)", "splitattr(object, name)", "easter(object, name)", "str(object, name)", "__str__(object, name)", "_str(object, name)", "abspath(object, name)", "__getattr__(object, name)"], "hash(object)": ["hash", "geohash(object)", "_hash_fn(object)", "_hash_add(object)", "hardswish(object)", "__abs__(object)", "hsv(object)", "_abs(object)", "hash_array(object)", "hardshrink(object)", "abs(object)", "abspath(object)", "matshow(object)", "whathdr(object)", "source_hash(object)"], "hash.block_size": ["hash.block_size"], "hash.copy()": ["copy"], "hash.digest()": ["digest"], "hash.digest_size": ["hash.digest_size"], "hash.hexdigest()": ["hexdigest"], "hash.name": ["hash.name"], "hash.update(data)": ["update"], "hashlib.algorithms_available": ["hashlib.algorithms_available"], "hashlib.algorithms_guaranteed": ["hashlib.algorithms_guaranteed"], "hashlib.new(name)": ["new", "hashlib.vander(name)", "hashlib.axline(name)", "hashlib.unwrap(name)", "hashlib.encode(name)", "hashlib.nanmean(name)", "hashlib.runeval(name)", "hashlib.distance(name)", "hashlib.interact(name)", "hashlib.isneginf(name)", "hashlib.variance(name)", "hashlib.getlines(name)", "hashlib._nanmedian(name)", "hashlib.nanmedian(name)", "hashlib.transpose(name)"], "hashlib.new(name, data)": ["new", "hashlib.vander(name, data)", "hashlib.axline(name, data)", "hashlib.unwrap(name, data)", "hashlib.encode(name, data)", "hashlib.nanmean(name, data)", "hashlib.runeval(name, data)", "hashlib.distance(name, data)", "hashlib.interact(name, data)", "hashlib.isneginf(name, data)", "hashlib.variance(name, data)", "hashlib.getlines(name, data)", "hashlib._nanmedian(name, data)", "hashlib.nanmedian(name, data)", "hashlib.transpose(name, data)"], "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations)": ["pbkdf2_hmac"], "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)": ["pbkdf2_hmac", "hashlib.pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None)"], "hashlib.scrypt(password, salt, n, r, p)": ["scrypt", "hashlib.crypt(password, salt, n, r, p)", "hashlib.script(password, salt, n, r, p)", "hashlib.split(password, salt, n, r, p)", "hashlib.strip(password, salt, n, r, p)", "hashlib.lstrip(password, salt, n, r, p)", "hashlib._ptp_dispatcher(password, salt, n, r, p)", "hashlib.obj2sctype(password, salt, n, r, p)", "hashlib.escape(password, salt, n, r, p)", "hashlib.rstrip(password, salt, n, r, p)", "hashlib.rsplit(password, salt, n, r, p)", "hashlib.relpath(password, salt, n, r, p)", "hashlib.asarray(password, salt, n, r, p)", "hashlib._split_dispatcher(password, salt, n, r, p)", "hashlib.as_completed(password, salt, n, r, p)"], "hashlib.scrypt(password, salt, n, r, p, dklen=64)": ["scrypt", "hashlib.scrypt(password, salt, n, r, p, dklen='64')", "hashlib.crypt(password, salt, n, r, p, dklen=64)", "hashlib.script(password, salt, n, r, p, dklen=64)", "hashlib.split(password, salt, n, r, p, dklen=64)", "hashlib.strip(password, salt, n, r, p, dklen=64)", "hashlib.lstrip(password, salt, n, r, p, dklen=64)", "hashlib._ptp_dispatcher(password, salt, n, r, p, dklen=64)", "hashlib.obj2sctype(password, salt, n, r, p, dklen=64)", "hashlib.escape(password, salt, n, r, p, dklen=64)", "hashlib.rstrip(password, salt, n, r, p, dklen=64)", "hashlib.rsplit(password, salt, n, r, p, dklen=64)", "hashlib.relpath(password, salt, n, r, p, dklen=64)", "hashlib.asarray(password, salt, n, r, p, dklen=64)", "hashlib._split_dispatcher(password, salt, n, r, p, dklen=64)"], "hashlib.scrypt(password, salt, n, r, p, maxmem=0)": ["scrypt", "hashlib.scrypt(password, salt, n, r, p, maxmem='0')", "hashlib.crypt(password, salt, n, r, p, maxmem=0)", "hashlib.script(password, salt, n, r, p, maxmem=0)", "hashlib.split(password, salt, n, r, p, maxmem=0)", "hashlib.strip(password, salt, n, r, p, maxmem=0)", "hashlib.lstrip(password, salt, n, r, p, maxmem=0)", "hashlib._ptp_dispatcher(password, salt, n, r, p, maxmem=0)", "hashlib.obj2sctype(password, salt, n, r, p, maxmem=0)", "hashlib.escape(password, salt, n, r, p, maxmem=0)", "hashlib.rstrip(password, salt, n, r, p, maxmem=0)", "hashlib.rsplit(password, salt, n, r, p, maxmem=0)", "hashlib.relpath(password, salt, n, r, p, maxmem=0)", "hashlib.asarray(password, salt, n, r, p, maxmem=0)", "hashlib._split_dispatcher(password, salt, n, r, p, maxmem=0)"], "hashlib.scrypt(password, salt, n, r, p, maxmem=0, dklen=64)": ["scrypt", "hashlib.scrypt(password, salt, n, r, p, maxmem='0', dklen='64')", "hashlib.crypt(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib.script(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib.split(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib.strip(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib.lstrip(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib._ptp_dispatcher(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib.obj2sctype(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib.escape(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib.rstrip(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib.rsplit(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib.relpath(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib.asarray(password, salt, n, r, p, maxmem=0, dklen=64)", "hashlib._split_dispatcher(password, salt, n, r, p, maxmem=0, dklen=64)"], "header.__eq__(other)": ["__eq__"], "header.__ne__(other)": ["__ne__"], "header.__str__()": ["__str__"], "header.append(s)": ["append"], "header.append(s, charset=None)": ["append", "header.append(s, charset=None)"], "header.append(s, charset=None, errors='strict')": ["append", "header.append(s, charset=None, errors='strict')", "header.append(s, charset=None, errors=6.0)"], "header.append(s, errors='strict')": ["append", "header.append(s, errors=6)"], "header.encode(\\t')": [], "header.encode(\\t', linesep='\\n')": [], "header.encode(\\t', maxlinelen=None)": [], "header.encode(\\t', maxlinelen=None, linesep='\\n')": [], "header.encode(\\t', splitchars=';)": [], "header.encode(\\t', splitchars=';, linesep='\\n')": [], "header.encode(\\t', splitchars=';, maxlinelen=None)": [], "header_registry.__getitem__(name)": ["__getitem__"], "header_registry.map_to_type(self, name, cls)": ["map_to_type"], "headers.add_header(name, value, **_params)": ["add_header"], "headers.get_all(name)": ["get_all"], "heapq.heapify(x)": ["heapify"], "heapq.heappop(heap)": ["heappop"], "heapq.heappush(heap, item)": ["heappush"], "heapq.heappushpop(heap, item)": ["heappushpop"], "heapq.heapreplace(heap, item)": ["heapreplace"], "heapq.merge(*iterables)": ["merge", "heapq.merge_asof(*iterables)", "heapq.merge_ordered(*iterables)", "heapq.melt(*iterables)", "heapq.get_dummies(*iterables)", "heapq.lreshape(*iterables)", "heapq._reindex_axis(*iterables)", "heapq.crosstab(*iterables)", "heapq.pivot_table(*iterables)", "heapq.json_normalize(*iterables)", "heapq._json_normalize(*iterables)", "heapq.pivot(*iterables)", "heapq.read_gbq(*iterables)", "heapq.makeDataFrame(*iterables)", "heapq.read_xml(*iterables)"], "heapq.merge(*iterables, key=None)": ["merge", "heapq.merge(*iterables, key=None)", "heapq.merge_asof(*iterables, key=None)", "heapq.merge_ordered(*iterables, key=None)", "heapq.melt(*iterables, key=None)", "heapq.get_dummies(*iterables, key=None)", "heapq.lreshape(*iterables, key=None)", "heapq._reindex_axis(*iterables, key=None)", "heapq.crosstab(*iterables, key=None)", "heapq.pivot_table(*iterables, key=None)", "heapq.json_normalize(*iterables, key=None)", "heapq._json_normalize(*iterables, key=None)", "heapq.pivot(*iterables, key=None)", "heapq.read_gbq(*iterables, key=None)", "heapq.makeDataFrame(*iterables, key=None)"], "heapq.merge(*iterables, key=None, reverse=False)": ["merge", "heapq.merge(*iterables, key=None, reverse=True)", "heapq.merge_asof(*iterables, key=None, reverse=False)", "heapq.merge_ordered(*iterables, key=None, reverse=False)", "heapq.melt(*iterables, key=None, reverse=False)", "heapq.get_dummies(*iterables, key=None, reverse=False)", "heapq.lreshape(*iterables, key=None, reverse=False)", "heapq._reindex_axis(*iterables, key=None, reverse=False)", "heapq.crosstab(*iterables, key=None, reverse=False)", "heapq.pivot_table(*iterables, key=None, reverse=False)", "heapq.json_normalize(*iterables, key=None, reverse=False)", "heapq._json_normalize(*iterables, key=None, reverse=False)", "heapq.pivot(*iterables, key=None, reverse=False)", "heapq.read_gbq(*iterables, key=None, reverse=False)", "heapq.makeDataFrame(*iterables, key=None, reverse=False)"], "heapq.merge(*iterables, reverse=False)": ["merge", "heapq.merge(*iterables, reverse=True)", "heapq.merge_asof(*iterables, reverse=False)", "heapq.merge_ordered(*iterables, reverse=False)", "heapq.melt(*iterables, reverse=False)", "heapq.get_dummies(*iterables, reverse=False)", "heapq.lreshape(*iterables, reverse=False)", "heapq._reindex_axis(*iterables, reverse=False)", "heapq.crosstab(*iterables, reverse=False)", "heapq.pivot_table(*iterables, reverse=False)", "heapq.json_normalize(*iterables, reverse=False)", "heapq._json_normalize(*iterables, reverse=False)", "heapq.pivot(*iterables, reverse=False)", "heapq.read_gbq(*iterables, reverse=False)", "heapq.makeDataFrame(*iterables, reverse=False)"], "heapq.nlargest(n, iterable)": ["nlargest", "heapq._nlargest(n, iterable)", "heapq.argsort(n, iterable)", "heapq.nsmallest(n, iterable)", "heapq.nanstd(n, iterable)", "heapq._scalar_str(n, iterable)", "heapq.margins(n, iterable)", "heapq.average(n, iterable)", "heapq.register(n, iterable)", "heapq.upsample_nearest(n, iterable)", "heapq.lag_plot(n, iterable)", "heapq.nanpercentile(n, iterable)", "heapq.array_str(n, iterable)", "heapq.onrelease(n, iterable)", "heapq.translate(n, iterable)"], "heapq.nlargest(n, iterable, key=None)": ["nlargest", "heapq.nlargest(n, iterable, key=None)", "heapq._nlargest(n, iterable, key=None)", "heapq.argsort(n, iterable, key=None)", "heapq.nsmallest(n, iterable, key=None)", "heapq.nanstd(n, iterable, key=None)", "heapq._scalar_str(n, iterable, key=None)", "heapq.margins(n, iterable, key=None)", "heapq.average(n, iterable, key=None)", "heapq.register(n, iterable, key=None)", "heapq.upsample_nearest(n, iterable, key=None)", "heapq.lag_plot(n, iterable, key=None)", "heapq.nanpercentile(n, iterable, key=None)", "heapq.array_str(n, iterable, key=None)", "heapq.onrelease(n, iterable, key=None)"], "heapq.nsmallest(n, iterable)": ["nsmallest", "heapq.install(n, iterable)", "heapq._nlargest(n, iterable)", "heapq.nlargest(n, iterable)", "heapq.nanstd(n, iterable)", "heapq._scalar_str(n, iterable)", "heapq._nested_map(n, iterable)", "heapq.findall(n, iterable)", "heapq._nanmedian_small(n, iterable)", "heapq._all(n, iterable)", "heapq.all(n, iterable)", "heapq.as_completed(n, iterable)", "heapq._unstack_multiple(n, iterable)", "heapq.upsample(n, iterable)", "heapq.bmat(n, iterable)"], "heapq.nsmallest(n, iterable, key=None)": ["nsmallest", "heapq.nsmallest(n, iterable, key=None)", "heapq.install(n, iterable, key=None)", "heapq._nlargest(n, iterable, key=None)", "heapq.nlargest(n, iterable, key=None)", "heapq.nanstd(n, iterable, key=None)", "heapq._scalar_str(n, iterable, key=None)", "heapq._nested_map(n, iterable, key=None)", "heapq.findall(n, iterable, key=None)", "heapq._nanmedian_small(n, iterable, key=None)", "heapq._all(n, iterable, key=None)", "heapq.all(n, iterable, key=None)", "heapq.as_completed(n, iterable, key=None)", "heapq._unstack_multiple(n, iterable, key=None)", "heapq.upsample(n, iterable, key=None)"], "help()": ["help", "gather()", "select()", "hessian()", "axhspan()", "base_repr()", "replicate()", "parse_qsl()", "namedtuple()", "_namedtuple()", "eye()", "read_excel()", "socketpair()", "leaky_relu()", "einsum_path()"], "help(object)": ["help", "gather(object)", "select(object)", "hessian(object)", "axhspan(object)", "base_repr(object)", "replicate(object)", "parse_qsl(object)", "namedtuple(object)", "_namedtuple(object)", "eye(object)", "read_excel(object)", "socketpair(object)", "leaky_relu(object)", "einsum_path(object)"], "hex(x)": ["hex", "unhex(x)", "ishex(x)", "binhex(x)", "hexbin(x)", "_exp(x)", "_dexp(x)", "text(x)", "_exec(x)", "setx(x)", "_exit(x)", "help(x)", "exit(x)", "home(x)", "_iexp(x)"], "hmac.digest(key, msg, digest)": ["digest", "hmac.dist(key, msg, digest)", "hmac.get_dir(key, msg, digest)", "hmac.cdist(key, msg, digest)", "hmac.distb(key, msg, digest)", "hmac.get(key, msg, digest)", "hmac.det(key, msg, digest)", "hmac.dis(key, msg, digest)", "hmac._get_edges(key, msg, digest)", "hmac.indices(key, msg, digest)", "hmac.isdigit(key, msg, digest)", "hmac.degrees(key, msg, digest)", "hmac.set_dir(key, msg, digest)", "hmac.figtext(key, msg, digest)", "hmac.get_domain(key, msg, digest)"], "hmac.new(key)": ["new", "hmac.vander(key)", "hmac.axline(key)", "hmac.unwrap(key)", "hmac.encode(key)", "hmac.nanmean(key)", "hmac.runeval(key)", "hmac.distance(key)", "hmac.interact(key)", "hmac.isneginf(key)", "hmac.variance(key)", "hmac.getlines(key)", "hmac._nanmedian(key)", "hmac.nanmedian(key)", "hmac.transpose(key)"], "hmac.new(key, digestmod=None)": ["new", "hmac.new(key, digestmod=None)", "hmac.vander(key, digestmod=None)", "hmac.axline(key, digestmod=None)", "hmac.unwrap(key, digestmod=None)", "hmac.encode(key, digestmod=None)", "hmac.nanmean(key, digestmod=None)", "hmac.runeval(key, digestmod=None)", "hmac.distance(key, digestmod=None)", "hmac.interact(key, digestmod=None)", "hmac.isneginf(key, digestmod=None)", "hmac.variance(key, digestmod=None)", "hmac.getlines(key, digestmod=None)", "hmac._nanmedian(key, digestmod=None)", "hmac.nanmedian(key, digestmod=None)"], "hmac.new(key, msg=None)": ["new", "hmac.new(key, msg=None)", "hmac.vander(key, msg=None)", "hmac.axline(key, msg=None)", "hmac.unwrap(key, msg=None)", "hmac.encode(key, msg=None)", "hmac.nanmean(key, msg=None)", "hmac.runeval(key, msg=None)", "hmac.distance(key, msg=None)", "hmac.interact(key, msg=None)", "hmac.isneginf(key, msg=None)", "hmac.variance(key, msg=None)", "hmac.getlines(key, msg=None)", "hmac._nanmedian(key, msg=None)", "hmac.nanmedian(key, msg=None)"], "html.entities.codepoint2name": ["html.entities.codepoint2name"], "html.entities.entitydefs": ["html.entities.entitydefs"], "html.entities.html5": ["html.entities.html5"], "html.entities.name2codepoint": ["html.entities.name2codepoint"], "html.escape(s)": ["escape", "html.guess_type(s)", "html.get_locales(s)", "html.measure(s)", "html.compress(s)", "html.testfile(s)", "html.signature(s)", "html.onrelease(s)", "html._format_exc(s)", "html.format_exc(s)", "html._describe_option(s)", "html.socketpair(s)", "html.spawn(s)", "html.getframeinfo(s)", "html.browse(s)"], "html.escape(s, quote=True)": ["escape", "html.escape(s, quote=False)", "html.guess_type(s, quote=True)", "html.get_locales(s, quote=True)", "html.measure(s, quote=True)", "html.compress(s, quote=True)", "html.testfile(s, quote=True)", "html.signature(s, quote=True)", "html.onrelease(s, quote=True)", "html._format_exc(s, quote=True)", "html.format_exc(s, quote=True)", "html._describe_option(s, quote=True)", "html.socketpair(s, quote=True)", "html.spawn(s, quote=True)", "html.getframeinfo(s, quote=True)"], "html.parser.HTMLParser()": ["HTMLParser"], "html.parser.HTMLParser(convert_charrefs=True)": ["HTMLParser", "html.parser.HTMLParser(convert_charrefs=False)"], "html.unescape(s)": ["unescape", "html._escape(s)", "html.escape(s)", "html.re_escape(s)", "html.escape_encode(s)", "html.reshape(s)", "html.upsample(s)", "html.truncate(s)", "html.uname(s)", "html.shape(s)", "html.usage(s)", "html._escape_cdata(s)", "html._class_escape(s)", "html.ftruncate(s)", "html.CFUNCTYPE(s)"], "html_calendar.cssclass_month": ["html_calendar.cssclass_month"], "html_calendar.cssclass_month_head": ["html_calendar.cssclass_month_head"], "html_calendar.cssclass_noday": ["html_calendar.cssclass_noday"], "html_calendar.cssclass_year": ["html_calendar.cssclass_year"], "html_calendar.cssclass_year_head": ["html_calendar.cssclass_year_head"], "html_calendar.cssclasses": ["html_calendar.cssclasses"], "html_calendar.cssclasses_weekday_head": ["html_calendar.cssclasses_weekday_head"], "html_calendar.formatmonth(theyear, themonth)": ["formatmonth"], "html_calendar.formatmonth(theyear, themonth, withyear=True)": ["formatmonth", "html_calendar.formatmonth(theyear, themonth, withyear=False)"], "html_calendar.formatyear(theyear)": ["formatyear"], "html_calendar.formatyear(theyear, width=3)": ["formatyear", "html_calendar.formatyear(theyear, width='3')"], "html_calendar.formatyearpage(theyear)": ["formatyearpage"], "html_calendar.formatyearpage(theyear, css='calendar.css')": ["formatyearpage", "html_calendar.formatyearpage(theyear, css=12.0)"], "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)": ["formatyearpage", "html_calendar.formatyearpage(theyear, css='calendar.css', encoding=None)", "html_calendar.formatyearpage(theyear, css=12.0, encoding=None)"], "html_calendar.formatyearpage(theyear, encoding=None)": ["formatyearpage", "html_calendar.formatyearpage(theyear, encoding=None)"], "html_calendar.formatyearpage(theyear, width=3)": ["formatyearpage", "html_calendar.formatyearpage(theyear, width='3')"], "html_calendar.formatyearpage(theyear, width=3, css='calendar.css')": ["formatyearpage", "html_calendar.formatyearpage(theyear, width='3', css=12)"], "html_calendar.formatyearpage(theyear, width=3, css='calendar.css', encoding=None)": ["formatyearpage", "html_calendar.formatyearpage(theyear, width=3, css='calendar.css', encoding=None)", "html_calendar.formatyearpage(theyear, width='3', css=12.0, encoding=None)"], "html_calendar.formatyearpage(theyear, width=3, encoding=None)": ["formatyearpage", "html_calendar.formatyearpage(theyear, width=3, encoding=None)", "html_calendar.formatyearpage(theyear, width='3', encoding=None)"], "html_diff.__init__(linejunk=None)": ["__init__", "html_diff.__init__(linejunk=None)"], "html_diff.__init__(tabsize=8)": ["__init__", "html_diff.__init__(tabsize='8')"], "html_diff.__init__(tabsize=8, charjunk=IS_CHARACTER_JUNK)": ["__init__", "html_diff.__init__(tabsize='8', charjunk=IS_CHARACTER_JUNK)"], "html_diff.__init__(tabsize=8, linejunk=None)": ["__init__", "html_diff.__init__(tabsize=8, linejunk=None)", "html_diff.__init__(tabsize='8', linejunk=None)"], "html_diff.__init__(tabsize=8, wrapcolumn=None)": ["__init__", "html_diff.__init__(tabsize=8, wrapcolumn=None)", "html_diff.__init__(tabsize='8', wrapcolumn=None)"], "html_diff.__init__(wrapcolumn=None)": ["__init__", "html_diff.__init__(wrapcolumn=None)"], "html_diff.__init__(wrapcolumn=None, linejunk=None)": ["__init__", "html_diff.__init__(wrapcolumn=None, linejunk=None)"], "html_diff.make_file(fromlines, tolines)": ["make_file"], "html_diff.make_file(fromlines, tolines, charset='utf-8')": ["make_file", "html_diff.make_file(fromlines, tolines, charset=5.0)"], "html_diff.make_file(fromlines, tolines, fromdesc='')": ["make_file", "html_diff.make_file(fromlines, tolines, fromdesc=0.0)"], "html_diff.make_file(fromlines, tolines, fromdesc='', charset='utf-8')": ["make_file", "html_diff.make_file(fromlines, tolines, fromdesc=0.0, charset=5.0)"], "html_diff.make_file(fromlines, tolines, fromdesc='', context=False)": ["make_file", "html_diff.make_file(fromlines, tolines, fromdesc='', context=True)", "html_diff.make_file(fromlines, tolines, fromdesc=0, context=False)"], "html_diff.make_file(fromlines, tolines, todesc='')": ["make_file", "html_diff.make_file(fromlines, tolines, todesc=0)"], "html_diff.make_table(fromlines, tolines)": ["make_table"], "html_diff.make_table(fromlines, tolines, context=False)": ["make_table", "html_diff.make_table(fromlines, tolines, context=True)"], "html_diff.make_table(fromlines, tolines, fromdesc='')": ["make_table", "html_diff.make_table(fromlines, tolines, fromdesc=0)"], "html_diff.make_table(fromlines, tolines, numlines=5)": ["make_table", "html_diff.make_table(fromlines, tolines, numlines='5')"], "html_diff.make_table(fromlines, tolines, todesc='')": ["make_table", "html_diff.make_table(fromlines, tolines, todesc=0.0)"], "http.HTTPStatus": ["http.HTTPStatus"], "http.client.HTTPConnection(host)": ["HTTPConnection"], "http.client.HTTPConnection(host, blocksize=8192)": ["HTTPConnection", "http.client.HTTPConnection(host, blocksize='8192')"], "http.client.HTTPConnection(host, port=None)": ["HTTPConnection", "http.client.HTTPConnection(host, port=None)"], "http.client.HTTPConnection(host, port=None, blocksize=8192)": ["HTTPConnection", "http.client.HTTPConnection(host, port=None, blocksize=8192)", "http.client.HTTPConnection(host, port=None, blocksize='8192')"], "http.client.HTTPConnection(host, port=None, source_address=None, blocksize=8192)": ["HTTPConnection", "http.client.HTTPConnection(host, port=None, source_address=None, blocksize=8192)", "http.client.HTTPConnection(host, port=None, source_address=None, blocksize='8192')"], "http.client.HTTPConnection(host, timeout)": ["HTTPConnection"], "http.client.HTTPConnection(host, timeout, port=None)": ["HTTPConnection", "http.client.HTTPConnection(host, timeout, port=None)"], "http.client.HTTPException": ["http.client.HTTPException"], "http.client.HTTPResponse(sock)": ["HTTPResponse"], "http.client.HTTPResponse(sock, debuglevel=0)": ["HTTPResponse", "http.client.HTTPResponse(sock, debuglevel='0')"], "http.client.HTTPResponse(sock, debuglevel=0, method=None)": ["HTTPResponse", "http.client.HTTPResponse(sock, debuglevel=0, method=None)", "http.client.HTTPResponse(sock, debuglevel='0', method=None)"], "http.client.HTTPResponse(sock, method=None)": ["HTTPResponse", "http.client.HTTPResponse(sock, method=None)"], "http.client.HTTPResponse(sock, method=None, url=None)": ["HTTPResponse", "http.client.HTTPResponse(sock, method=None, url=None)"], "http.client.HTTPResponse(sock, url=None)": ["HTTPResponse", "http.client.HTTPResponse(sock, url=None)"], "http.client.HTTPSConnection(host, blocksize=8192)": ["HTTPSConnection", "http.client.HTTPSConnection(host, blocksize='8192')"], "http.client.HTTPSConnection(host, context=None)": ["HTTPSConnection", "http.client.HTTPSConnection(host, context=None)"], "http.client.HTTPSConnection(host, timeout)": ["HTTPSConnection"], "http.client.HTTP_PORT": ["http.client.HTTP_PORT"], "http.client.InvalidURL": ["http.client.InvalidURL"], "http.client.responses": ["http.client.responses"], "http.cookiejar.CookieJar()": ["CookieJar"], "http.cookiejar.CookieJar(policy=None)": ["CookieJar", "http.cookiejar.CookieJar(policy=None)"], "http.cookiejar.DefaultCookiePolicy(allowed_domains=None)": ["DefaultCookiePolicy", "http.cookiejar.DefaultCookiePolicy(allowed_domains=None)"], "http.cookiejar.DefaultCookiePolicy(blocked_domains=None)": ["DefaultCookiePolicy", "http.cookiejar.DefaultCookiePolicy(blocked_domains=None)"], "http.cookiejar.DefaultCookiePolicy(hide_cookie2=False)": ["DefaultCookiePolicy", "http.cookiejar.DefaultCookiePolicy(hide_cookie2=True)"], "http.cookiejar.DefaultCookiePolicy(netscape=True)": ["DefaultCookiePolicy", "http.cookiejar.DefaultCookiePolicy(netscape=False)"], "http.cookiejar.DefaultCookiePolicy(rfc2109_as_netscape=None)": ["DefaultCookiePolicy", "http.cookiejar.DefaultCookiePolicy(rfc2109_as_netscape=None)"], "http.cookiejar.DefaultCookiePolicy(rfc2965=False)": ["DefaultCookiePolicy", "http.cookiejar.DefaultCookiePolicy(rfc2965=True)"], "http.cookiejar.FileCookieJar(filename, delayload=None)": ["FileCookieJar", "http.cookiejar.FileCookieJar(filename, delayload=None)"], "http.cookiejar.FileCookieJar(filename, delayload=None, policy=None)": ["FileCookieJar", "http.cookiejar.FileCookieJar(filename, delayload=None, policy=None)"], "http.cookiejar.FileCookieJar(filename, policy=None)": ["FileCookieJar", "http.cookiejar.FileCookieJar(filename, policy=None)"], "http.cookiejar.LWPCookieJar(filename)": ["LWPCookieJar"], "http.cookiejar.LWPCookieJar(filename, delayload=None)": ["LWPCookieJar", "http.cookiejar.LWPCookieJar(filename, delayload=None)"], "http.cookiejar.LWPCookieJar(filename, delayload=None, policy=None)": ["LWPCookieJar", "http.cookiejar.LWPCookieJar(filename, delayload=None, policy=None)"], "http.cookiejar.LWPCookieJar(filename, policy=None)": ["LWPCookieJar", "http.cookiejar.LWPCookieJar(filename, policy=None)"], "http.cookiejar.LoadError": ["http.cookiejar.LoadError"], "http.cookies.BaseCookie()": ["BaseCookie"], "http.cookies.BaseCookie(input)": ["BaseCookie"], "http.cookies.CookieError": ["http.cookies.CookieError"], "http.cookies.Morsel": ["http.cookies.Morsel"], "http.server.BaseHTTPRequestHandler(request, client_address, server)": ["BaseHTTPRequestHandler"], "http.server.CGIHTTPRequestHandler(request, client_address, server)": ["CGIHTTPRequestHandler"], "http.server.HTTPServer(server_address, RequestHandlerClass)": ["HTTPServer"], "http.server.SimpleHTTPRequestHandler(request, client_address, server)": ["SimpleHTTPRequestHandler"], "http.server.SimpleHTTPRequestHandler(request, client_address, server, directory=None)": ["SimpleHTTPRequestHandler", "http.server.SimpleHTTPRequestHandler(request, client_address, server, directory=None)"], "http.server.ThreadingHTTPServer(server_address, RequestHandlerClass)": ["ThreadingHTTPServer"], "http_handler.emit(record)": ["emit"], "http_handler.mapLogRecord(record)": ["mapLogRecord"], "i_pv4_address.exploded": ["i_pv4_address.exploded"], "i_pv4_address.is_global": ["i_pv4_address.is_global"], "i_pv4_address.is_link_local": ["i_pv4_address.is_link_local"], "i_pv4_address.is_multicast": ["i_pv4_address.is_multicast"], "i_pv4_address.is_private": ["i_pv4_address.is_private"], "i_pv4_address.is_reserved": ["i_pv4_address.is_reserved"], "i_pv4_address.is_unspecified": ["i_pv4_address.is_unspecified"], "i_pv4_address.max_prefixlen": ["i_pv4_address.max_prefixlen"], "i_pv4_address.packed": ["i_pv4_address.packed"], "i_pv4_address.reverse_pointer": ["i_pv4_address.reverse_pointer"], "i_pv4_address.version": ["i_pv4_address.version"], "i_pv4_interface.ip": ["i_pv4_interface.ip"], "i_pv4_interface.network": ["i_pv4_interface.network"], "i_pv4_interface.with_hostmask": ["i_pv4_interface.with_hostmask"], "i_pv4_interface.with_prefixlen": ["i_pv4_interface.with_prefixlen"], "i_pv4_network.address_exclude(network)": ["address_exclude"], "i_pv4_network.broadcast_address": ["i_pv4_network.broadcast_address"], "i_pv4_network.compare_networks(other)": ["compare_networks"], "i_pv4_network.exploded": ["i_pv4_network.exploded"], "i_pv4_network.hostmask": ["i_pv4_network.hostmask"], "i_pv4_network.hosts()": ["hosts"], "i_pv4_network.is_link_local": ["i_pv4_network.is_link_local"], "i_pv4_network.max_prefixlen": ["i_pv4_network.max_prefixlen"], "i_pv4_network.network_address": ["i_pv4_network.network_address"], "i_pv4_network.num_addresses": ["i_pv4_network.num_addresses"], "i_pv4_network.prefixlen": ["i_pv4_network.prefixlen"], "i_pv4_network.subnet_of(other)": ["subnet_of"], "i_pv4_network.subnets()": ["subnets"], "i_pv4_network.subnets(new_prefix=None)": ["subnets", "i_pv4_network.subnets(new_prefix=None)"], "i_pv4_network.subnets(prefixlen_diff=1)": ["subnets", "i_pv4_network.subnets(prefixlen_diff='1')"], "i_pv4_network.subnets(prefixlen_diff=1, new_prefix=None)": ["subnets", "i_pv4_network.subnets(prefixlen_diff=1, new_prefix=None)", "i_pv4_network.subnets(prefixlen_diff='1', new_prefix=None)"], "i_pv4_network.supernet_of(other)": ["supernet_of"], "i_pv4_network.with_hostmask": ["i_pv4_network.with_hostmask"], "i_pv4_network.with_netmask": ["i_pv4_network.with_netmask"], "i_pv6_address.ipv4_mapped": ["i_pv6_address.ipv4_mapped"], "i_pv6_address.is_site_local": ["i_pv6_address.is_site_local"], "i_pv6_address.sixtofour": ["i_pv6_address.sixtofour"], "i_pv6_address.teredo": ["i_pv6_address.teredo"], "i_pv6_network.compare_networks(other)": ["compare_networks"], "id(object)": ["id", "_id(object)", "__iand__(object)", "__iadd__(object)", "imod(object)", "find(object)", "grid(object)", "iand(object)", "iadd(object)", "in1d(object)", "__imod__(object)", "bind(object)", "index(object)", "uuid3(object)", "XMLID(object)"], "imaplib.IMAP4(port=IMAP4_PORT)": ["IMAP4"], "imaplib.IMAP4_SSL()": ["IMAP4_SSL"], "imaplib.IMAP4_SSL(certfile=None)": ["IMAP4_SSL", "imaplib.IMAP4_SSL(certfile=None)"], "imaplib.IMAP4_SSL(host='')": ["IMAP4_SSL", "imaplib.IMAP4_SSL(host=0.0)"], "imaplib.IMAP4_SSL(keyfile=None)": ["IMAP4_SSL", "imaplib.IMAP4_SSL(keyfile=None)"], "imaplib.IMAP4_SSL(port=IMAP4_SSL_PORT)": ["IMAP4_SSL"], "imaplib.IMAP4_stream(command)": ["IMAP4_stream"], "imaplib.Int2AP(num)": ["Int2AP", "imaplib.interp(num)", "imaplib.install(num)", "imaplib._install(num)", "imaplib.init(num)", "imaplib._isna(num)", "imaplib.isna(num)", "imaplib.interact(num)", "imaplib.init_rpc(num)", "imaplib.ip_interface(num)", "imaplib.trapz(num)", "imaplib.notna(num)", "imaplib.final(num)", "imaplib.ifft2(num)", "imaplib.input(num)"], "imaplib.Internaldate2tuple(datestr)": ["Internaldate2tuple", "imaplib.Time2Internaldate(datestr)", "imaplib.validate_integer(datestr)", "imaplib.integral_types(datestr)", "imaplib.interpolate(datestr)", "imaplib.is_namedtuple(datestr)", "imaplib.normalize_axis_tuple(datestr)", "imaplib.namedtuple(datestr)", "imaplib._namedtuple(datestr)", "imaplib._new_IntervalIndex(datestr)", "imaplib._create_named_tuple(datestr)", "imaplib.integral_types_and(datestr)", "imaplib.interpolate_1d(datestr)", "imaplib.interpolate_2d(datestr)", "imaplib.chebinterpolate(datestr)"], "imaplib.ParseFlags(flagstr)": ["ParseFlags", "imaplib.parseargs(flagstr)", "imaplib.parsefield(flagstr)", "imaplib.parse_qs(flagstr)", "imaplib._parse(flagstr)", "imaplib.parse(flagstr)", "imaplib.parse_url(flagstr)", "imaplib.parseaddr(flagstr)", "imaplib.parseline(flagstr)", "imaplib.parsedate(flagstr)", "imaplib._parse_sub(flagstr)", "imaplib.parse_qsl(flagstr)", "imaplib._parser(flagstr)", "imaplib.sparse(flagstr)", "imaplib.sparse_(flagstr)"], "imaplib.Time2Internaldate(date_time)": ["Time2Internaldate", "imaplib.Internaldate2tuple(date_time)", "imaplib.validate_integer(date_time)", "imaplib.makeIntervalIndex(date_time)", "imaplib.interpolate_2d(date_time)", "imaplib._akima_interpolate(date_time)", "imaplib.interpolate(date_time)", "imaplib.chebinterpolate(date_time)", "imaplib.isinteractive(date_time)", "imaplib._is_internal_frame(date_time)", "imaplib.integral_types(date_time)", "imaplib.interpolate_1d(date_time)", "imaplib.interactive(date_time)", "imaplib.validate_endpoints(date_time)", "imaplib.validate_inferred_freq(date_time)"], "imghdr.tests": ["imghdr.tests"], "imghdr.what(filename)": ["what", "imghdr.wait(filename)", "imghdr.mat(filename)", "imghdr.bmat(filename)", "imghdr.hfft(filename)", "imghdr._stat(filename)", "imghdr.warn(filename)", "imghdr._warn(filename)", "imghdr.stat(filename)", "imghdr.hist(filename)", "imghdr.ihfft(filename)", "imghdr.lstat(filename)", "imghdr.nanstd(filename)", "imghdr.gather(filename)", "imghdr.unwrap(filename)"], "imghdr.what(filename, h=None)": ["what", "imghdr.what(filename, h=None)", "imghdr.wait(filename, h=None)", "imghdr.mat(filename, h=None)", "imghdr.bmat(filename, h=None)", "imghdr.hfft(filename, h=None)", "imghdr._stat(filename, h=None)", "imghdr.warn(filename, h=None)", "imghdr._warn(filename, h=None)", "imghdr.stat(filename, h=None)", "imghdr.hist(filename, h=None)", "imghdr.ihfft(filename, h=None)", "imghdr.lstat(filename, h=None)", "imghdr.nanstd(filename, h=None)", "imghdr.gather(filename, h=None)"], "imp.C_BUILTIN": ["imp.C_BUILTIN"], "imp.C_EXTENSION": ["imp.C_EXTENSION"], "imp.NullImporter(path_string)": ["NullImporter"], "imp.PKG_DIRECTORY": ["imp.PKG_DIRECTORY"], "imp.PY_COMPILED": ["imp.PY_COMPILED"], "imp.PY_FROZEN": ["imp.PY_FROZEN"], "imp.acquire_lock()": ["acquire_lock", "imp._acquireLock()", "imp._lock_file()", "imp.allocate_lock()", "imp._unlock_file()", "imp.RLock()", "imp.lock_held()", "imp.unpack_archive()", "imp._lock_unlock_module()", "imp.require()", "imp._releaseLock()", "imp.current_process()", "imp.Lock()", "imp._git_archive_link()", "imp.make_archive()"], "imp.cache_from_source(path)": ["cache_from_source", "imp._squeeze_dispatcher(path)", "imp.ensure_index_from_sequences(path)", "imp._size_dispatcher(path)", "imp._transpose_dispatcher(path)", "imp._tensorinv_dispatcher(path)", "imp._real_if_close_dispatcher(path)", "imp._strip_dispatcher(path)", "imp._trilu_indices_form_dispatcher(path)", "imp._ravel_dispatcher(path)", "imp.get_source_lines_and_file(path)", "imp._qr_dispatcher(path)", "imp.readmodule_ex(path)", "imp._polyder_dispatcher(path)", "imp._field_accessor(path)"], "imp.find_module(name)": ["find_module", "imp.find_loader(name)", "imp.readmodule(name)", "imp.import_module(name)", "imp._run_module_code(name)", "imp.find_spec(name)", "imp.getmodule(name)", "imp._spec_from_module(name)", "imp.readmodule_ex(name)", "imp.run_module(name)", "imp.findobj(name)", "imp.find(name)", "imp.multi_dot(name)", "imp.reduce_add(name)", "imp.filled(name)"], "imp.find_module(name, path)": ["find_module", "imp.find_loader(name, path)", "imp.readmodule(name, path)", "imp.import_module(name, path)", "imp._run_module_code(name, path)", "imp.find_spec(name, path)", "imp.getmodule(name, path)", "imp._spec_from_module(name, path)", "imp.readmodule_ex(name, path)", "imp.run_module(name, path)", "imp.findobj(name, path)", "imp.find(name, path)", "imp.multi_dot(name, path)", "imp.reduce_add(name, path)", "imp.filled(name, path)"], "imp.get_suffixes()": ["get_suffixes", "imp.all_suffixes()", "imp._add_suffixes()", "imp._get_sourcefile()", "imp.getbufsize()", "imp.getsourcefile()", "imp.getabsfile()", "imp.getfile()", "imp._get_uid()", "imp.getsize()", "imp._get_sep()", "imp.getsourcelines()", "imp._get_spec()", "imp.getlines()", "imp._get_skiprows()"], "imp.get_tag()": ["get_tag", "imp.get_magic()", "imp._get_stats()", "imp._get_gid()", "imp._get_stream()", "imp._get_traces()", "imp._getlang()", "imp.getargs()", "imp.getdata()", "imp.getpager()", "imp.get_path()", "imp._get_name()", "imp._name_get()", "imp._get_path()", "imp.get_mask()"], "imp.load_module(name, file, pathname, description)": ["load_module", "imp._module_to_load(name, file, pathname, description)", "imp.npy_load_module(name, file, pathname, description)", "imp._load_module_shim(name, file, pathname, description)", "imp.module_for_loader(name, file, pathname, description)", "imp._readmodule(name, file, pathname, description)", "imp.readmodule(name, file, pathname, description)", "imp.find_module(name, file, pathname, description)", "imp.make_module(name, file, pathname, description)", "imp.load_reduce(name, file, pathname, description)", "imp.load_source(name, file, pathname, description)", "imp._xml_loads(name, file, pathname, description)", "imp._get_module_lock(name, file, pathname, description)", "imp._run_module_code(name, file, pathname, description)", "imp._load_attr_from_module(name, file, pathname, description)"], "imp.lock_held()": ["lock_held", "imp._lock_file()", "imp._load_unlocked()", "imp._load_local()", "imp.Lock()", "imp._rebuild_socket()", "imp._unlock_file()", "imp._releaseLock()", "imp.getblock()", "imp.lockf()", "imp.block()", "imp._block()", "imp._unpack_field()", "imp.acquire_lock()", "imp.check()"], "imp.new_module(name)": ["new_module", "imp._new_module(name)", "imp.run_module(name)", "imp.set_module(name)", "imp._module_repr(name)", "imp.swap_module(name)", "imp.trace_module(name)", "imp.new_method(name)", "imp.getmodulename(name)", "imp._normalize_module(name)", "imp.run_module_suite(name)", "imp.ismodule(name)", "imp.npy_load_module(name)", "imp._run_module_code(name)", "imp.new_compiler(name)"], "imp.release_lock()": ["release_lock", "imp.onrelease()", "imp.onkeyrelease()", "imp.release()", "imp.set_locale()", "imp._block_setup()", "imp._releaseLock()", "imp._parse_release_file()", "imp._check_resolvers()", "imp._parse_localename()", "imp._read_long()", "imp._set_reflect_both()", "imp.correlate()", "imp.token_urlsafe()", "imp.locate()"], "imp.reload(module)": ["reload", "imp._load(module)", "imp.read(module)", "imp._read(module)", "imp.load(module)", "imp.loads(module)", "imp._loads(module)", "imp.pread(module)", "imp.readv(module)", "imp.overload(module)", "imp._overload(module)", "imp.preadv(module)", "imp.imread(module)", "imp.loadtxt(module)", "imp.get_loader(module)"], "imp.source_from_cache(path)": ["source_from_cache", "imp.cache_from_source(path)", "imp.storage_from_cache(path)", "imp._format_callback_source(path)", "imp._signature_from_callable(path)", "imp.source_hash(path)", "imp._reset_cache(path)", "imp._from_ctypes_structure(path)", "imp.lru_cache(path)", "imp._reset_caches(path)", "imp._date_from_string(path)", "imp.decode_source(path)", "imp._from_ctypes_scalar(path)", "imp._check_no_signature(path)", "imp._calc_julian_from_V(path)"], "importlib.__import__(name)": ["__import__", "importlib.import_module(name)", "importlib.imread(name)", "importlib.print_list(name)", "importlib._get_compressor(name)", "importlib._run_pip(name)", "importlib.mat(name)", "importlib.capwords(name)", "importlib.isposinf(name)", "importlib.print_tb(name)", "importlib.get_cmap(name)", "importlib.poll(name)", "importlib.bmat(name)", "importlib.goto(name)", "importlib._parse_datetime(name)"], "importlib.__import__(name, fromlist=())": ["__import__", "importlib.import_module(name, fromlist=())", "importlib.imread(name, fromlist=())", "importlib.print_list(name, fromlist=())", "importlib._get_compressor(name, fromlist=())", "importlib._run_pip(name, fromlist=())", "importlib.mat(name, fromlist=())", "importlib.capwords(name, fromlist=())", "importlib.isposinf(name, fromlist=())", "importlib.print_tb(name, fromlist=())", "importlib.get_cmap(name, fromlist=())", "importlib.poll(name, fromlist=())", "importlib.bmat(name, fromlist=())", "importlib.goto(name, fromlist=())", "importlib._parse_datetime(name, fromlist=())"], "importlib.__import__(name, globals=None)": ["__import__", "importlib.__import__(name, globals=None)", "importlib.import_module(name, globals=None)", "importlib.imread(name, globals=None)", "importlib.print_list(name, globals=None)", "importlib._get_compressor(name, globals=None)", "importlib._run_pip(name, globals=None)", "importlib.mat(name, globals=None)", "importlib.capwords(name, globals=None)", "importlib.isposinf(name, globals=None)", "importlib.print_tb(name, globals=None)", "importlib.get_cmap(name, globals=None)", "importlib.poll(name, globals=None)", "importlib.bmat(name, globals=None)", "importlib.goto(name, globals=None)"], "importlib.__import__(name, globals=None, fromlist=())": ["__import__", "importlib.__import__(name, globals=None, fromlist=())", "importlib.import_module(name, globals=None, fromlist=())", "importlib.imread(name, globals=None, fromlist=())", "importlib.print_list(name, globals=None, fromlist=())", "importlib._get_compressor(name, globals=None, fromlist=())", "importlib._run_pip(name, globals=None, fromlist=())", "importlib.mat(name, globals=None, fromlist=())", "importlib.capwords(name, globals=None, fromlist=())", "importlib.isposinf(name, globals=None, fromlist=())", "importlib.print_tb(name, globals=None, fromlist=())", "importlib.get_cmap(name, globals=None, fromlist=())", "importlib.poll(name, globals=None, fromlist=())", "importlib.bmat(name, globals=None, fromlist=())", "importlib.goto(name, globals=None, fromlist=())"], "importlib.__import__(name, globals=None, level=0)": ["__import__", "importlib.__import__(name, globals=None, level=0)", "importlib.__import__(name, globals=None, level='0')", "importlib.import_module(name, globals=None, level=0)", "importlib.imread(name, globals=None, level=0)", "importlib.print_list(name, globals=None, level=0)", "importlib._get_compressor(name, globals=None, level=0)", "importlib._run_pip(name, globals=None, level=0)", "importlib.mat(name, globals=None, level=0)", "importlib.capwords(name, globals=None, level=0)", "importlib.isposinf(name, globals=None, level=0)", "importlib.print_tb(name, globals=None, level=0)", "importlib.get_cmap(name, globals=None, level=0)", "importlib.poll(name, globals=None, level=0)", "importlib.bmat(name, globals=None, level=0)"], "importlib.__import__(name, globals=None, locals=None)": ["__import__", "importlib.__import__(name, globals=None, locals=None)", "importlib.import_module(name, globals=None, locals=None)", "importlib.imread(name, globals=None, locals=None)", "importlib.print_list(name, globals=None, locals=None)", "importlib._get_compressor(name, globals=None, locals=None)", "importlib._run_pip(name, globals=None, locals=None)", "importlib.mat(name, globals=None, locals=None)", "importlib.capwords(name, globals=None, locals=None)", "importlib.isposinf(name, globals=None, locals=None)", "importlib.print_tb(name, globals=None, locals=None)", "importlib.get_cmap(name, globals=None, locals=None)", "importlib.poll(name, globals=None, locals=None)", "importlib.bmat(name, globals=None, locals=None)", "importlib.goto(name, globals=None, locals=None)"], "importlib.__import__(name, level=0)": ["__import__", "importlib.__import__(name, level='0')", "importlib.import_module(name, level=0)", "importlib.imread(name, level=0)", "importlib.print_list(name, level=0)", "importlib._get_compressor(name, level=0)", "importlib._run_pip(name, level=0)", "importlib.mat(name, level=0)", "importlib.capwords(name, level=0)", "importlib.isposinf(name, level=0)", "importlib.print_tb(name, level=0)", "importlib.get_cmap(name, level=0)", "importlib.poll(name, level=0)", "importlib.bmat(name, level=0)", "importlib.goto(name, level=0)"], "importlib.abc.ExecutionLoader": ["importlib.abc.ExecutionLoader"], "importlib.abc.FileLoader(fullname, path)": ["FileLoader"], "importlib.abc.Finder": ["importlib.abc.Finder"], "importlib.abc.Loader": ["importlib.abc.Loader"], "importlib.abc.MetaPathFinder": ["importlib.abc.MetaPathFinder"], "importlib.abc.SourceLoader": ["importlib.abc.SourceLoader"], "importlib.find_loader(name)": ["find_loader", "importlib.find_module(name)", "importlib.find_spec(name)", "importlib.findobj(name)", "importlib.find(name)", "importlib.load(name)", "importlib._find_spec_from_path(name)", "importlib._find_strings(name)", "importlib.loads(name)", "importlib.ndpointer(name)", "importlib.readbuffer_encode(name)", "importlib._raw_fftnd(name)", "importlib.makeFloatIndex(name)", "importlib.filled(name)", "importlib.vander(name)"], "importlib.find_loader(name, path=None)": ["find_loader", "importlib.find_loader(name, path=None)", "importlib.find_module(name, path=None)", "importlib.find_spec(name, path=None)", "importlib.findobj(name, path=None)", "importlib.find(name, path=None)", "importlib.load(name, path=None)", "importlib._find_spec_from_path(name, path=None)", "importlib._find_strings(name, path=None)", "importlib.loads(name, path=None)", "importlib.ndpointer(name, path=None)", "importlib.readbuffer_encode(name, path=None)", "importlib._raw_fftnd(name, path=None)", "importlib.makeFloatIndex(name, path=None)", "importlib.filled(name, path=None)"], "importlib.import_module(name)": ["import_module", "importlib.iter_importer_modules(name)", "importlib.import_nose(name)", "importlib.iter_modules(name)", "importlib.module_has_exports(name)", "importlib.importfile(name)", "importlib.load_module(name)", "importlib.find_module(name)", "importlib.make_module(name)", "importlib.ismodule(name)", "importlib.import_lzma(name)", "importlib._importers(name)", "importlib.getmodule(name)", "importlib.__import__(name)", "importlib._fix_up_module(name)"], "importlib.import_module(name, package=None)": ["import_module", "importlib.import_module(name, package=None)", "importlib.iter_importer_modules(name, package=None)", "importlib.import_nose(name, package=None)", "importlib.iter_modules(name, package=None)", "importlib.module_has_exports(name, package=None)", "importlib.importfile(name, package=None)", "importlib.load_module(name, package=None)", "importlib.find_module(name, package=None)", "importlib.make_module(name, package=None)", "importlib.ismodule(name, package=None)", "importlib.import_lzma(name, package=None)", "importlib._importers(name, package=None)", "importlib.getmodule(name, package=None)", "importlib.__import__(name, package=None)"], "importlib.invalidate_caches()": ["invalidate_caches", "importlib._validate_names()", "importlib.validate_ascending()", "importlib.validate_args()", "importlib.validate_cuda_device()", "importlib._validate_dtypes()", "importlib.validate_kwargs()", "importlib._valid_locales()", "importlib._validate_v()", "importlib.validate_periods()", "importlib._validate_rpc_args()", "importlib._validate_hash_pyc()", "importlib.invalid_comparison()", "importlib.invalidate_string_dtypes()", "importlib.validate_endpoints()"], "importlib.machinery.BYTECODE_SUFFIXES": ["importlib.machinery.BYTECODE_SUFFIXES"], "importlib.machinery.BuiltinImporter": ["importlib.machinery.BuiltinImporter"], "importlib.machinery.DEBUG_BYTECODE_SUFFIXES": ["importlib.machinery.DEBUG_BYTECODE_SUFFIXES"], "importlib.machinery.EXTENSION_SUFFIXES": ["importlib.machinery.EXTENSION_SUFFIXES"], "importlib.machinery.ExtensionFileLoader(fullname, path)": ["ExtensionFileLoader"], "importlib.machinery.FileFinder(path, *loader_details)": ["FileFinder"], "importlib.machinery.ModuleSpec(name, loader)": ["ModuleSpec"], "importlib.machinery.ModuleSpec(name, loader, is_package=None)": ["ModuleSpec", "importlib.machinery.ModuleSpec(name, loader, is_package=None)"], "importlib.machinery.ModuleSpec(name, loader, loader_state=None)": ["ModuleSpec", "importlib.machinery.ModuleSpec(name, loader, loader_state=None)"], "importlib.machinery.ModuleSpec(name, loader, origin=None)": ["ModuleSpec", "importlib.machinery.ModuleSpec(name, loader, origin=None)"], "importlib.machinery.ModuleSpec(name, loader, origin=None, is_package=None)": ["ModuleSpec", "importlib.machinery.ModuleSpec(name, loader, origin=None, is_package=None)"], "importlib.machinery.ModuleSpec(name, loader, origin=None, loader_state=None)": ["ModuleSpec", "importlib.machinery.ModuleSpec(name, loader, origin=None, loader_state=None)"], "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES": ["importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES"], "importlib.machinery.PathFinder": ["importlib.machinery.PathFinder"], "importlib.machinery.SOURCE_SUFFIXES": ["importlib.machinery.SOURCE_SUFFIXES"], "importlib.machinery.SourceFileLoader(fullname, path)": ["SourceFileLoader"], "importlib.machinery.SourcelessFileLoader(fullname, path)": ["SourcelessFileLoader"], "importlib.machinery.WindowsRegistryFinder": ["importlib.machinery.WindowsRegistryFinder"], "importlib.machinery.all_suffixes()": ["all_suffixes", "importlib.machinery._add_suffixes()", "importlib.machinery.get_suffixes()", "importlib.machinery._all_string_prefixes()", "importlib.machinery.all_types()", "importlib.machinery.close_all()", "importlib.machinery.safe_eval()", "importlib.machinery.all_tasks()", "importlib.machinery._all_zeros()", "importlib.machinery.as_series()", "importlib.machinery.parse_all_fields()", "importlib.machinery.masked_all()", "importlib.machinery.extend_all()", "importlib.machinery.all_reduce()", "importlib.machinery.jiffies()"], "importlib.reload(module)": ["reload", "importlib._load(module)", "importlib.read(module)", "importlib._read(module)", "importlib.load(module)", "importlib.loads(module)", "importlib._loads(module)", "importlib.pread(module)", "importlib.readv(module)", "importlib.overload(module)", "importlib._overload(module)", "importlib.preadv(module)", "importlib.imread(module)", "importlib.loadtxt(module)", "importlib.get_loader(module)"], "importlib.resources.Package": ["importlib.resources.Package"], "importlib.resources.contents(package)": ["contents"], "importlib.resources.is_resource(package, name)": ["is_resource"], "importlib.resources.open_binary(package, resource)": ["open_binary"], "importlib.resources.open_text(package, resource)": ["open_text"], "importlib.resources.open_text(package, resource, encoding='utf-8')": ["open_text", "importlib.resources.open_text(package, resource, encoding=5)"], "importlib.resources.open_text(package, resource, encoding='utf-8', errors='strict')": ["open_text", "importlib.resources.open_text(package, resource, encoding=5, errors=6.0)"], "importlib.resources.open_text(package, resource, errors='strict')": ["open_text", "importlib.resources.open_text(package, resource, errors=6.0)"], "importlib.resources.path(package, resource)": ["path"], "importlib.resources.read_binary(package, resource)": ["read_binary"], "importlib.resources.read_text(package, resource)": ["read_text"], "importlib.resources.read_text(package, resource, encoding='utf-8')": ["read_text", "importlib.resources.read_text(package, resource, encoding=5)"], "importlib.resources.read_text(package, resource, errors='strict')": ["read_text", "importlib.resources.read_text(package, resource, errors=6.0)"], "importlib.util.LazyLoader(loader)": ["LazyLoader"], "importlib.util.cache_from_source(path, debug_override=None, optimization=None)": ["cache_from_source", "importlib.util.cache_from_source(path, debug_override=None, optimization=None)", "importlib.util._squeeze_dispatcher(path, debug_override=None, optimization=None)", "importlib.util.ensure_index_from_sequences(path, debug_override=None, optimization=None)", "importlib.util._size_dispatcher(path, debug_override=None, optimization=None)", "importlib.util._transpose_dispatcher(path, debug_override=None, optimization=None)", "importlib.util._tensorinv_dispatcher(path, debug_override=None, optimization=None)", "importlib.util._real_if_close_dispatcher(path, debug_override=None, optimization=None)", "importlib.util._strip_dispatcher(path, debug_override=None, optimization=None)", "importlib.util._trilu_indices_form_dispatcher(path, debug_override=None, optimization=None)", "importlib.util._ravel_dispatcher(path, debug_override=None, optimization=None)", "importlib.util.get_source_lines_and_file(path, debug_override=None, optimization=None)", "importlib.util._qr_dispatcher(path, debug_override=None, optimization=None)", "importlib.util.readmodule_ex(path, debug_override=None, optimization=None)", "importlib.util._polyder_dispatcher(path, debug_override=None, optimization=None)"], "importlib.util.cache_from_source(path, optimization=None)": ["cache_from_source", "importlib.util.cache_from_source(path, optimization=None)", "importlib.util._squeeze_dispatcher(path, optimization=None)", "importlib.util.ensure_index_from_sequences(path, optimization=None)", "importlib.util._size_dispatcher(path, optimization=None)", "importlib.util._transpose_dispatcher(path, optimization=None)", "importlib.util._tensorinv_dispatcher(path, optimization=None)", "importlib.util._real_if_close_dispatcher(path, optimization=None)", "importlib.util._strip_dispatcher(path, optimization=None)", "importlib.util._trilu_indices_form_dispatcher(path, optimization=None)", "importlib.util._ravel_dispatcher(path, optimization=None)", "importlib.util.get_source_lines_and_file(path, optimization=None)", "importlib.util._qr_dispatcher(path, optimization=None)", "importlib.util.readmodule_ex(path, optimization=None)", "importlib.util._polyder_dispatcher(path, optimization=None)"], "importlib.util.find_spec(name)": ["find_spec", "importlib.util._find_spec_from_path(name)", "importlib.util.find(name)", "importlib.util.find_loader(name)", "importlib.util.find_module(name)", "importlib.util.init_rpc(name)", "importlib.util._find_strings(name)", "importlib.util._spec_from_module(name)", "importlib.util.escape_encode(name)", "importlib.util.magnitude_spectrum(name)", "importlib.util.angle_spectrum(name)", "importlib.util.findobj(name)", "importlib.util._amin_dispatcher(name)", "importlib.util._cond_dispatcher(name)", "importlib.util.print_stack(name)"], "importlib.util.find_spec(name, package=None)": ["find_spec", "importlib.util.find_spec(name, package=None)", "importlib.util._find_spec_from_path(name, package=None)", "importlib.util.find(name, package=None)", "importlib.util.find_loader(name, package=None)", "importlib.util.find_module(name, package=None)", "importlib.util.init_rpc(name, package=None)", "importlib.util._find_strings(name, package=None)", "importlib.util._spec_from_module(name, package=None)", "importlib.util.escape_encode(name, package=None)", "importlib.util.magnitude_spectrum(name, package=None)", "importlib.util.angle_spectrum(name, package=None)", "importlib.util.findobj(name, package=None)", "importlib.util._amin_dispatcher(name, package=None)", "importlib.util._cond_dispatcher(name, package=None)"], "importlib.util.module_from_spec(spec)": ["module_from_spec", "importlib.util._spec_from_module(spec)", "importlib.util._module_repr_from_spec(spec)", "importlib.util.spec_from_loader(spec)", "importlib.util._mode_from_name(spec)", "importlib.util._fix_up_module(spec)", "importlib.util.set_module(spec)", "importlib.util.optimize_frozen_module(spec)", "importlib.util.swap_module(spec)", "importlib.util.npy_load_module(spec)", "importlib.util.fuse_modules(spec)", "importlib.util.iter_modules(spec)", "importlib.util._lt_from_le(spec)", "importlib.util._le_from_lt(spec)", "importlib.util._ge_from_le(spec)"], "importlib.util.resolve_name(name, package)": ["resolve_name", "importlib.util._resolve_name(name, package)", "importlib.util.resolve_bases(name, package)", "importlib.util.resolve(name, package)", "importlib.util.is_reserved_name(name, package)", "importlib.util._check_resolvers(name, package)", "importlib.util.rewrite_name(name, package)", "importlib.util.resolve_ellipsis(name, package)", "importlib.util._remove_nan_1d(name, package)", "importlib.util._replace_nan(name, package)", "importlib.util.tensorsolve(name, package)", "importlib.util._reset_cache(name, package)", "importlib.util.register_namespace(name, package)", "importlib.util.get_op_result_name(name, package)", "importlib.util.ensure_relative(name, package)"], "importlib.util.spec_from_file_location(name, location)": ["spec_from_file_location", "importlib.util._find_spec_from_path(name, location)", "importlib.util.ensure_index_from_sequences(name, location)", "importlib.util.find_spec(name, location)", "importlib.util.get_source_lines_and_file(name, location)", "importlib.util.cache_from_source(name, location)", "importlib.util.makeFloatIndex(name, location)", "importlib.util.get_instructions(name, location)", "importlib.util.format_stack(name, location)", "importlib.util.formatannotation(name, location)", "importlib.util.create_unicode_buffer(name, location)", "importlib.util._parse_format_specifier(name, location)", "importlib.util.forbid_nonstring_types(name, location)", "importlib.util.latin_1_decode(name, location)", "importlib.util.fromstringlist(name, location)"], "importlib.util.spec_from_file_location(name, location, loader=None)": ["spec_from_file_location", "importlib.util.spec_from_file_location(name, location, loader=None)", "importlib.util._find_spec_from_path(name, location, loader=None)", "importlib.util.ensure_index_from_sequences(name, location, loader=None)", "importlib.util.find_spec(name, location, loader=None)", "importlib.util.get_source_lines_and_file(name, location, loader=None)", "importlib.util.cache_from_source(name, location, loader=None)", "importlib.util.makeFloatIndex(name, location, loader=None)", "importlib.util.get_instructions(name, location, loader=None)", "importlib.util.format_stack(name, location, loader=None)", "importlib.util.formatannotation(name, location, loader=None)", "importlib.util.create_unicode_buffer(name, location, loader=None)", "importlib.util._parse_format_specifier(name, location, loader=None)", "importlib.util.forbid_nonstring_types(name, location, loader=None)", "importlib.util.latin_1_decode(name, location, loader=None)"], "importlib.util.spec_from_file_location(name, location, loader=None, submodule_search_locations=None)": ["spec_from_file_location", "importlib.util.spec_from_file_location(name, location, loader=None, submodule_search_locations=None)", "importlib.util._find_spec_from_path(name, location, loader=None, submodule_search_locations=None)", "importlib.util.ensure_index_from_sequences(name, location, loader=None, submodule_search_locations=None)", "importlib.util.find_spec(name, location, loader=None, submodule_search_locations=None)", "importlib.util.get_source_lines_and_file(name, location, loader=None, submodule_search_locations=None)", "importlib.util.cache_from_source(name, location, loader=None, submodule_search_locations=None)", "importlib.util.makeFloatIndex(name, location, loader=None, submodule_search_locations=None)", "importlib.util.get_instructions(name, location, loader=None, submodule_search_locations=None)", "importlib.util.format_stack(name, location, loader=None, submodule_search_locations=None)", "importlib.util.formatannotation(name, location, loader=None, submodule_search_locations=None)", "importlib.util.create_unicode_buffer(name, location, loader=None, submodule_search_locations=None)", "importlib.util._parse_format_specifier(name, location, loader=None, submodule_search_locations=None)", "importlib.util.forbid_nonstring_types(name, location, loader=None, submodule_search_locations=None)", "importlib.util.latin_1_decode(name, location, loader=None, submodule_search_locations=None)"], "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)": ["spec_from_file_location", "importlib.util.spec_from_file_location(name, location, submodule_search_locations=None)", "importlib.util._find_spec_from_path(name, location, submodule_search_locations=None)", "importlib.util.ensure_index_from_sequences(name, location, submodule_search_locations=None)", "importlib.util.find_spec(name, location, submodule_search_locations=None)", "importlib.util.get_source_lines_and_file(name, location, submodule_search_locations=None)", "importlib.util.cache_from_source(name, location, submodule_search_locations=None)", "importlib.util.makeFloatIndex(name, location, submodule_search_locations=None)", "importlib.util.get_instructions(name, location, submodule_search_locations=None)", "importlib.util.format_stack(name, location, submodule_search_locations=None)", "importlib.util.formatannotation(name, location, submodule_search_locations=None)", "importlib.util.create_unicode_buffer(name, location, submodule_search_locations=None)", "importlib.util._parse_format_specifier(name, location, submodule_search_locations=None)", "importlib.util.forbid_nonstring_types(name, location, submodule_search_locations=None)", "importlib.util.latin_1_decode(name, location, submodule_search_locations=None)"], "importlib.util.spec_from_loader(name, loader)": ["spec_from_loader", "importlib.util._spec_from_module(name, loader)", "importlib.util.formatargspec(name, loader)", "importlib.util._find_spec(name, loader)", "importlib.util._makeLoader(name, loader)", "importlib.util.fromarrays(name, loader)", "importlib.util.magnitude_spectrum(name, loader)", "importlib.util.fromrecords(name, loader)", "importlib.util.make_sparse(name, loader)", "importlib.util.load_source(name, loader)", "importlib.util._unstack_frame(name, loader)", "importlib.util.load_compiled(name, loader)", "importlib.util.loads(name, loader)", "importlib.util.cache_from_source(name, loader)", "importlib.util.phase_spectrum(name, loader)"], "importlib.util.spec_from_loader(name, loader, origin=None)": ["spec_from_loader", "importlib.util.spec_from_loader(name, loader, origin=None)", "importlib.util._spec_from_module(name, loader, origin=None)", "importlib.util.formatargspec(name, loader, origin=None)", "importlib.util._find_spec(name, loader, origin=None)", "importlib.util._makeLoader(name, loader, origin=None)", "importlib.util.fromarrays(name, loader, origin=None)", "importlib.util.magnitude_spectrum(name, loader, origin=None)", "importlib.util.fromrecords(name, loader, origin=None)", "importlib.util.make_sparse(name, loader, origin=None)", "importlib.util.load_source(name, loader, origin=None)", "importlib.util._unstack_frame(name, loader, origin=None)", "importlib.util.load_compiled(name, loader, origin=None)", "importlib.util.loads(name, loader, origin=None)", "importlib.util.cache_from_source(name, loader, origin=None)"], "importlib.util.spec_from_loader(name, loader, origin=None, is_package=None)": ["spec_from_loader", "importlib.util.spec_from_loader(name, loader, origin=None, is_package=None)", "importlib.util._spec_from_module(name, loader, origin=None, is_package=None)", "importlib.util.formatargspec(name, loader, origin=None, is_package=None)", "importlib.util._find_spec(name, loader, origin=None, is_package=None)", "importlib.util._makeLoader(name, loader, origin=None, is_package=None)", "importlib.util.fromarrays(name, loader, origin=None, is_package=None)", "importlib.util.magnitude_spectrum(name, loader, origin=None, is_package=None)", "importlib.util.fromrecords(name, loader, origin=None, is_package=None)", "importlib.util.make_sparse(name, loader, origin=None, is_package=None)", "importlib.util.load_source(name, loader, origin=None, is_package=None)", "importlib.util._unstack_frame(name, loader, origin=None, is_package=None)", "importlib.util.load_compiled(name, loader, origin=None, is_package=None)", "importlib.util.loads(name, loader, origin=None, is_package=None)", "importlib.util.cache_from_source(name, loader, origin=None, is_package=None)"], "incremental_decoder.decode(object)": ["decode"], "incremental_decoder.decode(object, final)": ["decode"], "incremental_decoder.reset()": ["reset"], "incremental_decoder.setstate(state)": ["setstate"], "incremental_encoder.encode(object)": ["encode"], "incremental_encoder.encode(object, final)": ["encode"], "incremental_encoder.getstate()": ["getstate"], "incremental_encoder.reset()": ["reset"], "incremental_encoder.setstate(state)": ["setstate"], "input()": ["input", "init()", "main()", "_main()", "width()", "twinx()", "twiny()", "listdir()", "Comment()", "_run_finalizers()", "validate_map_location()", "tiltangle()", "_get_plot_backend()", "textdomain()", "stack_size()"], "input(prompt)": ["input", "init(prompt)", "main(prompt)", "_main(prompt)", "width(prompt)", "twinx(prompt)", "twiny(prompt)", "listdir(prompt)", "Comment(prompt)", "_run_finalizers(prompt)", "validate_map_location(prompt)", "tiltangle(prompt)", "_get_plot_backend(prompt)", "textdomain(prompt)", "stack_size(prompt)"], "inspect.BoundArguments": ["inspect.BoundArguments"], "inspect.CO_ASYNC_GENERATOR": ["inspect.CO_ASYNC_GENERATOR"], "inspect.CO_GENERATOR": ["inspect.CO_GENERATOR"], "inspect.CO_ITERABLE_COROUTINE": ["inspect.CO_ITERABLE_COROUTINE"], "inspect.CO_NESTED": ["inspect.CO_NESTED"], "inspect.CO_NEWLOCALS": ["inspect.CO_NEWLOCALS"], "inspect.CO_NOFREE": ["inspect.CO_NOFREE"], "inspect.CO_OPTIMIZED": ["inspect.CO_OPTIMIZED"], "inspect.CO_VARARGS": ["inspect.CO_VARARGS"], "inspect.CO_VARKEYWORDS": ["inspect.CO_VARKEYWORDS"], "inspect.Parameter(name, kind)": ["Parameter"], "inspect.Parameter(name, kind, annotation=Parameter.empty)": ["Parameter"], "inspect.Parameter(name, kind, default=Parameter.empty)": ["Parameter"], "inspect.Signature()": ["Signature"], "inspect.Signature(parameters=None)": ["Signature", "inspect.Signature(parameters=None)"], "inspect.Signature(parameters=None, return_annotation=Signature.empty)": ["Signature", "inspect.Signature(parameters=None, return_annotation=Signature.empty)"], "inspect.Signature(return_annotation=Signature.empty)": ["Signature"], "inspect.cleandoc(doc)": ["cleandoc", "inspect._can_dot(doc)", "inspect._cleanup(doc)", "inspect.clear(doc)", "inspect.legvander(doc)", "inspect.fileno(doc)", "inspect.getdoc(doc)", "inspect.lineno(doc)", "inspect.legadd(doc)", "inspect.legend(doc)", "inspect._expand(doc)", "inspect.Client(doc)", "inspect.clearcache(doc)", "inspect.urlcleanup(doc)", "inspect._load_local(doc)"], "inspect.currentframe()": ["currentframe", "inspect.currentThread()", "inspect.current_thread()", "inspect.current_task()", "inspect.current_process()", "inspect.rename()", "inspect.renames()", "inspect.urlretrieve()", "inspect.currency()", "inspect._replace_charref()", "inspect.uname()", "inspect.getframeinfo()", "inspect.current_blas_handle()", "inspect.clear_frames()", "inspect.urldefrag()"], "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)": ["formatargspec", "inspect._parse_format_specifier(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.format_stack(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.format_time(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect._find_spec_from_path(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.format_tb(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.fromstring(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.fromstringlist(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.register_at_fork(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.formatannotation(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect._spec_from_module(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.forbid_nonstring_types(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.transpose(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.find_spec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)", "inspect.iterparse(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue)"], "inspect.formatargspec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)": ["formatargspec", "inspect._parse_format_specifier(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.format_stack(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.format_time(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect._find_spec_from_path(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.format_tb(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.fromstring(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.fromstringlist(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.register_at_fork(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.formatannotation(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect._spec_from_module(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.forbid_nonstring_types(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.transpose(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.find_spec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)", "inspect.iterparse(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns)"], "inspect.formatargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)": ["formatargvalues", "inspect.formatargspec(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect.getargvalues(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect._formatparam(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect._formatArray(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect._floatify_na_values(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect._format_labels(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect._formatwarnmsg(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect.formataddr(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect.formatdate(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect.formatwarning(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect._format_handle(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect.repr_format(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect.format_list(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)", "inspect._formatwarnmsg_impl(args, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw)"], "inspect.getargspec(func)": ["getargspec", "inspect.getfullargspec(func)", "inspect.getargs(func)", "inspect._get_spec(func)", "inspect.formatargspec(func)", "inspect.getcallargs(func)", "inspect.getpager(func)", "inspect._getfullargs(func)", "inspect.getargvalues(func)", "inspect.getaddresses(func)", "inspect.get_magic(func)", "inspect.getshapes(func)", "inspect.figaspect(func)", "inspect.getpen(func)", "inspect.get_addr_spec(func)"], "inspect.getargvalues(frame)": ["getargvalues", "inspect._get_na_values(frame)", "inspect.get_value(frame)", "inspect.formatargvalues(frame)", "inspect.getargs(frame)", "inspect.getcanvas(frame)", "inspect._get_traces(frame)", "inspect.getargspec(frame)", "inspect.eigvals(frame)", "inspect._get_fill_value(frame)", "inspect.get_fill_value(frame)", "inspect.getcallargs(frame)", "inspect._getfullargs(frame)", "inspect.get_locales(frame)", "inspect.eigvalsh(frame)"], "inspect.getattr_static(obj, attr)": ["getattr_static", "inspect._static_getmro(obj, attr)", "inspect.get_static_fn(obj, attr)", "inspect._get_stats(obj, attr)", "inspect.__getattr__(obj, attr)", "inspect.extract_stack(obj, attr)", "inspect.getgeneratorstate(obj, attr)", "inspect.getxattr(obj, attr)", "inspect._getattribute(obj, attr)", "inspect.get_magic(obj, attr)", "inspect._path_stat(obj, attr)", "inspect.get_sharing_strategy(obj, attr)", "inspect._get_stream(obj, attr)", "inspect._get_traces(obj, attr)", "inspect.getargspec(obj, attr)"], "inspect.getattr_static(obj, attr, default=None)": ["getattr_static", "inspect.getattr_static(obj, attr, default=None)", "inspect._static_getmro(obj, attr, default=None)", "inspect.get_static_fn(obj, attr, default=None)", "inspect._get_stats(obj, attr, default=None)", "inspect.__getattr__(obj, attr, default=None)", "inspect.extract_stack(obj, attr, default=None)", "inspect.getgeneratorstate(obj, attr, default=None)", "inspect.getxattr(obj, attr, default=None)", "inspect._getattribute(obj, attr, default=None)", "inspect.get_magic(obj, attr, default=None)", "inspect._path_stat(obj, attr, default=None)", "inspect.get_sharing_strategy(obj, attr, default=None)", "inspect._get_stream(obj, attr, default=None)", "inspect._get_traces(obj, attr, default=None)"], "inspect.getcallargs(func, *args, **kwds)": ["getcallargs", "inspect._getfullargs(func, *args, **kwds)", "inspect.getargs(func, *args, **kwds)", "inspect.getfullargspec(func, *args, **kwds)", "inspect.getcanvas(func, *args, **kwds)", "inspect.geterrcall(func, *args, **kwds)", "inspect.getCols(func, *args, **kwds)", "inspect._getlang(func, *args, **kwds)", "inspect.getargspec(func, *args, **kwds)", "inspect.getcaps(func, *args, **kwds)", "inspect.get_local_part(func, *args, **kwds)", "inspect.getclosurevars(func, *args, **kwds)", "inspect.get_locales(func, *args, **kwds)", "inspect.getclasstree(func, *args, **kwds)", "inspect.getargvalues(func, *args, **kwds)"], "inspect.getclasstree(classes)": ["getclasstree", "inspect.ensure_clean(classes)", "inspect.template(classes)", "inspect.read_excel(classes)", "inspect.rmtree(classes)", "inspect.gather(classes)", "inspect.locate(classes)", "inspect.create(classes)", "inspect.concatenate(classes)", "inspect.lagtrim(classes)", "inspect.decodestring(classes)", "inspect.encodestring(classes)", "inspect.prepare(classes)", "inspect._encodestring(classes)", "inspect.platform(classes)"], "inspect.getclasstree(classes, unique=False)": ["getclasstree", "inspect.getclasstree(classes, unique=True)", "inspect.ensure_clean(classes, unique=False)", "inspect.template(classes, unique=False)", "inspect.read_excel(classes, unique=False)", "inspect.rmtree(classes, unique=False)", "inspect.gather(classes, unique=False)", "inspect.locate(classes, unique=False)", "inspect.create(classes, unique=False)", "inspect.concatenate(classes, unique=False)", "inspect.lagtrim(classes, unique=False)", "inspect.decodestring(classes, unique=False)", "inspect.encodestring(classes, unique=False)", "inspect.prepare(classes, unique=False)", "inspect._encodestring(classes, unique=False)"], "inspect.getclosurevars(func)": ["getclosurevars", "inspect.getcallargs(func)", "inspect.getclasstree(func)", "inspect.getsource(func)", "inspect.getLogger(func)", "inspect.getcanvas(func)", "inspect.getreader(func)", "inspect.get_logger(func)", "inspect._get_stream(func)", "inspect.get_loader(func)", "inspect.getdecoder(func)", "inspect.getencoder(func)", "inspect.getuser(func)", "inspect.getouterframes(func)", "inspect.getCols(func)"], "inspect.getcomments(object)": ["getcomments", "inspect.Comment(object)", "inspect.get_qcontent(object)", "inspect.getcontext(object)", "inspect._moments(object)", "inspect.getCols(object)", "inspect.getmembers(object)", "inspect._getmembers(object)", "inspect._getconv(object)", "inspect._get_methods(object)", "inspect.get_comment(object)", "inspect.getmtime(object)", "inspect.getctime(object)", "inspect._netstat_getnode(object)", "inspect._netbios_getnode(object)"], "inspect.getcoroutinelocals(coroutine)": ["getcoroutinelocals", "inspect.getcoroutinestate(coroutine)", "inspect.coroutine(coroutine)", "inspect._format_coroutine(coroutine)", "inspect.iscoroutine(coroutine)", "inspect.get_locales(coroutine)", "inspect.getgeneratorlocals(coroutine)", "inspect.getdefaultlocale(coroutine)", "inspect._check_for_locals(coroutine)", "inspect.getlocale(coroutine)", "inspect._get_overloads(coroutine)", "inspect.get_obs_route(coroutine)", "inspect.getproxies(coroutine)", "inspect.getclosurevars(coroutine)", "inspect.getouterframes(coroutine)"], "inspect.getcoroutinestate(coroutine)": ["getcoroutinestate", "inspect.getcoroutinelocals(coroutine)", "inspect.coroutine(coroutine)", "inspect._format_coroutine(coroutine)", "inspect.iscoroutine(coroutine)", "inspect._netstat_getnode(coroutine)", "inspect.getSeriesData(coroutine)", "inspect._static_getmro(coroutine)", "inspect.get_obs_route(coroutine)", "inspect.run_coroutine_threadsafe(coroutine)", "inspect.getgeneratorstate(coroutine)", "inspect._get_restore_location(coroutine)", "inspect.getcontext(coroutine)", "inspect.getproxies(coroutine)", "inspect._copy_future_state(coroutine)"], "inspect.getdoc(object)": ["getdoc", "inspect.getblock(object)", "inspect.getsource(object)", "inspect.get(object)", "inspect.doc(object)", "inspect.getdomain(object)", "inspect.getcwd(object)", "inspect.getmro(object)", "inspect.getopt(object)", "inspect.getpid(object)", "inspect.getgid(object)", "inspect.getsid(object)", "inspect.getlocale(object)", "inspect.getuid(object)", "inspect._get_gid(object)"], "inspect.getframeinfo(frame)": ["getframeinfo", "inspect.getinnerframes(frame)", "inspect.getouterframes(frame)", "inspect.hermeint(frame)", "inspect.hermint(frame)", "inspect.median_grouped(frame)", "inspect.increment_lineno(frame)", "inspect._arraymethod(frame)", "inspect.get_locales(frame)", "inspect.hermder(frame)", "inspect.fftfreq(frame)", "inspect.boxplot_frame_groupby(frame)", "inspect.getdata(frame)", "inspect.testfile(frame)", "inspect.hermeder(frame)"], "inspect.getframeinfo(frame, context=1)": ["getframeinfo", "inspect.getframeinfo(frame, context='1')", "inspect.getinnerframes(frame, context=1)", "inspect.getouterframes(frame, context=1)", "inspect.hermeint(frame, context=1)", "inspect.hermint(frame, context=1)", "inspect.median_grouped(frame, context=1)", "inspect.increment_lineno(frame, context=1)", "inspect._arraymethod(frame, context=1)", "inspect.get_locales(frame, context=1)", "inspect.hermder(frame, context=1)", "inspect.fftfreq(frame, context=1)", "inspect.boxplot_frame_groupby(frame, context=1)", "inspect.getdata(frame, context=1)", "inspect.testfile(frame, context=1)"], "inspect.getfullargspec(func)": ["getfullargspec", "inspect._getfullargs(func)", "inspect.getargspec(func)", "inspect.getcallargs(func)", "inspect.getargs(func)", "inspect._get_spec(func)", "inspect.getdefaultlocale(func)", "inspect.formatargspec(func)", "inspect.getfile(func)", "inspect.getuser(func)", "inspect._getlang(func)", "inspect.getuserbase(func)", "inspect._getuserbase(func)", "inspect._parse_flags(func)", "inspect.getpager(func)"], "inspect.getgeneratorlocals(generator)": ["getgeneratorlocals", "inspect.getgeneratorstate(generator)", "inspect.getdefaultlocale(generator)", "inspect.geterrcall(generator)", "inspect.__generator_ctor(generator)", "inspect.isgenerator(generator)", "inspect._test_generator(generator)", "inspect.get_locales(generator)", "inspect.getcoroutinelocals(generator)", "inspect._generate_overlap_table(generator)", "inspect.getlocale(generator)", "inspect._get_overloads(generator)", "inspect.seterrcall(generator)", "inspect.get_protocol_name(generator)", "inspect.getinnerframes(generator)"], "inspect.getgeneratorstate(generator)": ["getgeneratorstate", "inspect.getgeneratorlocals(generator)", "inspect._test_generator(generator)", "inspect._netstat_getnode(generator)", "inspect.__generator_ctor(generator)", "inspect.getattr_static(generator)", "inspect.generate_range(generator)", "inspect.isgenerator(generator)", "inspect._get_trace_graph(generator)", "inspect._generate_overlap_table(generator)", "inspect._static_getmro(generator)", "inspect.get_signature(generator)", "inspect.generate_property(generator)", "inspect.getcoroutinestate(generator)", "inspect.generic_parser(generator)"], "inspect.getinnerframes(traceback)": ["getinnerframes", "inspect.getouterframes(traceback)", "inspect.getframeinfo(traceback)", "inspect.get_locales(traceback)", "inspect._return_inverse(traceback)", "inspect.guess_extension(traceback)", "inspect._clean_na_values(traceback)", "inspect._arraymethod(traceback)", "inspect.na_value_for_dtype(traceback)", "inspect.hermder(traceback)", "inspect.fftfreq(traceback)", "inspect.getdata(traceback)", "inspect.read_stringnl(traceback)", "inspect.hermeint(traceback)", "inspect.testfile(traceback)"], "inspect.getinnerframes(traceback, context=1)": ["getinnerframes", "inspect.getinnerframes(traceback, context='1')", "inspect.getouterframes(traceback, context=1)", "inspect.getframeinfo(traceback, context=1)", "inspect.get_locales(traceback, context=1)", "inspect._return_inverse(traceback, context=1)", "inspect.guess_extension(traceback, context=1)", "inspect._clean_na_values(traceback, context=1)", "inspect._arraymethod(traceback, context=1)", "inspect.na_value_for_dtype(traceback, context=1)", "inspect.hermder(traceback, context=1)", "inspect.fftfreq(traceback, context=1)", "inspect.getdata(traceback, context=1)", "inspect.read_stringnl(traceback, context=1)", "inspect.hermeint(traceback, context=1)"], "inspect.getmembers(object)": ["getmembers", "inspect.getenvb(object)", "inspect.getlines(object)", "inspect.getmodule(object)", "inspect.getenv(object)", "inspect.gather(object)", "inspect.getabsfile(object)", "inspect._trim_zeros(object)", "inspect.seterr(object)", "inspect._parse_datetime(object)", "inspect.getpass(object)", "inspect.gather_object(object)", "inspect.stem(object)", "inspect.register_shape(object)", "inspect.parse_makefile(object)"], "inspect.getmembers(object, predicate)": ["getmembers", "inspect.getenvb(object, predicate)", "inspect.getlines(object, predicate)", "inspect.getmodule(object, predicate)", "inspect.getenv(object, predicate)", "inspect.gather(object, predicate)", "inspect.getabsfile(object, predicate)", "inspect._trim_zeros(object, predicate)", "inspect.seterr(object, predicate)", "inspect._parse_datetime(object, predicate)", "inspect.getpass(object, predicate)", "inspect.gather_object(object, predicate)", "inspect.stem(object, predicate)", "inspect.register_shape(object, predicate)", "inspect.parse_makefile(object, predicate)"], "inspect.getmodule(object)": ["getmodule", "inspect.readmodule(object)", "inspect.readmodule_ex(object)", "inspect.import_module(object)", "inspect.run_module(object)", "inspect.testmod(object)", "inspect.find_module(object)", "inspect.getlines(object)", "inspect._run_module_code(object)", "inspect.setlocale(object)", "inspect.getenv(object)", "inspect.getabsfile(object)", "inspect.encode(object)", "inspect.getmembers(object)", "inspect.remove(object)"], "inspect.getmodulename(path)": ["getmodulename", "inspect.getmodule(path)", "inspect.getLevelName(path)", "inspect._modname(path)", "inspect._getname(path)", "inspect._new_module(path)", "inspect.new_module(path)", "inspect._get_name(path)", "inspect.getouterframes(path)", "inspect._name_get(path)", "inspect._get_module_lock(path)", "inspect.trace_module(path)", "inspect._get_names(path)", "inspect._normalize_module(path)", "inspect._get_name_info(path)"], "inspect.getmro(cls)": ["getmro", "inspect.getdoc(cls)", "inspect.get(cls)", "inspect.getmodule(cls)", "inspect.getitimer(cls)", "inspect.get_group(cls)", "inspect.getopt(cls)", "inspect.getgroups(cls)", "inspect.geterr(cls)", "inspect._static_getmro(cls)", "inspect.getpgrp(cls)", "inspect.__getattr__(cls)", "inspect.getnode(cls)", "inspect.getuser(cls)", "inspect._getname(cls)"], "inspect.getouterframes(frame)": ["getouterframes", "inspect.getinnerframes(frame)", "inspect.getframeinfo(frame)", "inspect.get_locales(frame)", "inspect.getdata(frame)", "inspect.signature(frame)", "inspect.median_grouped(frame)", "inspect.guess_extension(frame)", "inspect.remove_tree(frame)", "inspect._arraymethod(frame)", "inspect.boxplot_frame_groupby(frame)", "inspect.measure(frame)", "inspect.na_value_for_dtype(frame)", "inspect.hermder(frame)", "inspect.fftfreq(frame)"], "inspect.getouterframes(frame, context=1)": ["getouterframes", "inspect.getouterframes(frame, context='1')", "inspect.getinnerframes(frame, context=1)", "inspect.getframeinfo(frame, context=1)", "inspect.get_locales(frame, context=1)", "inspect.getdata(frame, context=1)", "inspect.signature(frame, context=1)", "inspect.median_grouped(frame, context=1)", "inspect.guess_extension(frame, context=1)", "inspect.remove_tree(frame, context=1)", "inspect._arraymethod(frame, context=1)", "inspect.boxplot_frame_groupby(frame, context=1)", "inspect.measure(frame, context=1)", "inspect.na_value_for_dtype(frame, context=1)", "inspect.hermder(frame, context=1)"], "inspect.getsourcefile(object)": ["getsourcefile", "inspect._get_sourcefile(object)", "inspect.getsource(object)", "inspect.getsourcelines(object)", "inspect.getfile(object)", "inspect.getabsfile(object)", "inspect.testsource(object)", "inspect.get_suffixes(object)", "inspect.getmodule(object)", "inspect.getscreen(object)", "inspect.getturtle(object)", "inspect.getlocale(object)", "inspect.source(object)", "inspect.getbufsize(object)", "inspect.percentile(object)"], "inspect.getsourcelines(object)": ["getsourcelines", "inspect.getsourcefile(object)", "inspect._get_sourcefile(object)", "inspect.getsource(object)", "inspect.getlines(object)", "inspect.getline(object)", "inspect.testsource(object)", "inspect.get_locales(object)", "inspect.get_suffixes(object)", "inspect.getmodule(object)", "inspect.hermeline(object)", "inspect.getscreen(object)", "inspect.getlineno(object)", "inspect.getturtle(object)", "inspect.getlocale(object)"], "inspect.isasyncgen(object)": ["isasyncgen", "inspect.isasyncgenfunction(object)", "inspect.distance(object)", "inspect.ispackage(object)", "inspect.issequence(object)", "inspect.isinstance(object)", "inspect.isspace(object)", "inspect.sync(object)", "inspect.linspace(object)", "inspect.issctype(object)", "inspect.askyesno(object)", "inspect.isneginf(object)", "inspect.variance(object)", "inspect.isstring(object)", "inspect.async_execution(object)"], "inspect.isasyncgenfunction(object)": ["isasyncgenfunction", "inspect.isfunction(object)", "inspect.isasyncgen(object)", "inspect.isgeneratorfunction(object)", "inspect.async_execution(object)", "inspect._asof_by_function(object)", "inspect._asof_function(object)", "inspect.iscoroutinefunction(object)", "inspect.find_function(object)", "inspect._fromfunction_dispatcher(object)", "inspect.array_function_dispatch(object)", "inspect._exit_function(object)", "inspect._union1d_dispatcher(object)", "inspect.ProcessingInstruction(object)", "inspect.init_reductions(object)"], "inspect.isawaitable(object)": ["isawaitable", "inspect._wrap_awaitable(object)", "inspect.isreadable(object)", "inspect.disable(object)", "inspect.istitle(object)", "inspect.in_table_a1(object)", "inspect.symtable(object)", "inspect.iterable(object)", "inspect.variable(object)", "inspect.table(object)", "inspect.is_available(object)", "inspect.table_exists(object)", "inspect.has_table(object)", "inspect.isvisible(object)", "inspect._tables(object)"], "inspect.isbuiltin(object)": ["isbuiltin", "inspect.is_builtin(object)", "inspect.is_built(object)", "inspect.isroutine(object)", "inspect.islink(object)", "inspect.init_builtin(object)", "inspect._find_builtin(object)", "inspect._builtin_open(object)", "inspect.check_builtin(object)", "inspect.isfunction(object)", "inspect.isin(object)", "inspect.isstdin(object)", "inspect.iscoroutine(object)", "inspect.isfirstline(object)", "inspect.linux_distribution(object)"], "inspect.isclass(object)": ["isclass", "inspect.issubclass_(object)", "inspect.strclass(object)", "inspect._findclass(object)", "inspect.isclose(object)", "inspect.isscalar(object)", "inspect.isabs(object)", "inspect.isleap(object)", "inspect.new_class(object)", "inspect.classname(object)", "inspect.dataclass(object)", "inspect.findTestCases(object)", "inspect.sca(object)", "inspect.cla(object)", "inspect._scalar_str(object)"], "inspect.iscoroutine(object)": ["iscoroutine", "inspect.isroutine(object)", "inspect.coroutine(object)", "inspect.iscoroutinefunction(object)", "inspect._format_coroutine(object)", "inspect.isfirstline(object)", "inspect.getcoroutinestate(object)", "inspect.getcoroutinelocals(object)", "inspect.WIFCONTINUED(object)", "inspect.is_scripting(object)", "inspect.isbuiltin(object)", "inspect.isfortran(object)", "inspect._outer_dispatcher(object)", "inspect.iscode(object)", "inspect.isfunction(object)"], "inspect.iscoroutinefunction(object)": ["iscoroutinefunction", "inspect.iscoroutine(object)", "inspect.isfunction(object)", "inspect.isasyncgenfunction(object)", "inspect.fromfunction(object)", "inspect.isroutine(object)", "inspect.coroutine(object)", "inspect._format_coroutine(object)", "inspect.isgeneratorfunction(object)", "inspect._asof_function(object)", "inspect._exit_function(object)", "inspect._fromfunction_dispatcher(object)", "inspect.find_function(object)", "inspect._warn_unawaited_coroutine(object)", "inspect._get_format_function(object)"], "inspect.isfunction(object)": ["isfunction", "inspect._asof_function(object)", "inspect._exit_function(object)", "inspect.find_function(object)", "inspect._run_function(object)", "inspect.fromfunction(object)", "inspect.isasyncgenfunction(object)", "inspect._nest_function(object)", "inspect._asof_by_function(object)", "inspect.iscoroutinefunction(object)", "inspect.isgeneratorfunction(object)", "inspect.search_function(object)", "inspect.isroutine(object)", "inspect.isbuiltin(object)", "inspect.get_instructions(object)"], "inspect.isgeneratorfunction(object)": ["isgeneratorfunction", "inspect.isgenerator(object)", "inspect.isasyncgenfunction(object)", "inspect.isfunction(object)", "inspect.fromfunction(object)", "inspect.get_instructions(object)", "inspect.iscoroutinefunction(object)", "inspect._asof_function(object)", "inspect._exit_function(object)", "inspect._fromfunction_dispatcher(object)", "inspect.find_function(object)", "inspect._test_generator(object)", "inspect.generate_tokens(object)", "inspect.invert_permutation(object)", "inspect.init_reductions(object)"], "inspect.ismethod(object)": ["ismethod", "inspect.__methods(object)", "inspect.bind_method(object)", "inspect._is_some_method(object)", "inspect._is_bound_method(object)", "inspect.imod(object)", "inspect._binary_method(object)", "inspect.to_time(object)", "inspect.allmethods(object)", "inspect.new_method(object)", "inspect.seth(object)", "inspect.__methodDict(object)", "inspect.__imod__(object)", "inspect.abstractmethod(object)", "inspect._get_methods(object)"], "inspect.isroutine(object)": ["isroutine", "inspect.iscoroutine(object)", "inspect.coroutine(object)", "inspect.isfirstline(object)", "inspect.isbuiltin(object)", "inspect.iscoroutinefunction(object)", "inspect.isfunction(object)", "inspect._isnotsuite(object)", "inspect.ismount(object)", "inspect.isin(object)", "inspect.isstdin(object)", "inspect.istitle(object)", "inspect.isrecursive(object)", "inspect.is_optional(object)", "inspect._isrecursive(object)"], "inspect.istraceback(object)": ["istraceback", "inspect.get_traceback_limit(object)", "inspect._exception_traceback(object)", "inspect.compact_traceback(object)", "inspect.distance(object)", "inspect.settrace(object)", "inspect.stack(object)", "inspect.trace(object)", "inspect.setcbreak(object)", "inspect.interface(object)", "inspect.set_trace(object)", "inspect.traceable(object)", "inspect.isreal(object)", "inspect._stack_dispatcher(object)", "inspect.hstack(object)"], "inspect.signature(callable)": ["signature", "inspect._signature_from_callable(callable)", "inspect.measure(callable)", "inspect.listxattr(callable)", "inspect._return_inverse(callable)", "inspect.getouterframes(callable)", "inspect.guess_extension(callable)", "inspect.ip_network(callable)", "inspect.escape(callable)", "inspect.legint(callable)", "inspect.lagint(callable)", "inspect.getframeinfo(callable)", "inspect.hermint(callable)", "inspect.polyint(callable)", "inspect.chebint(callable)"], "inspect.signature(callable, follow_wrapped=True)": ["signature", "inspect.signature(callable, follow_wrapped=False)", "inspect._signature_from_callable(callable, follow_wrapped=True)", "inspect.measure(callable, follow_wrapped=True)", "inspect.listxattr(callable, follow_wrapped=True)", "inspect._return_inverse(callable, follow_wrapped=True)", "inspect.getouterframes(callable, follow_wrapped=True)", "inspect.guess_extension(callable, follow_wrapped=True)", "inspect.ip_network(callable, follow_wrapped=True)", "inspect.escape(callable, follow_wrapped=True)", "inspect.legint(callable, follow_wrapped=True)", "inspect.lagint(callable, follow_wrapped=True)", "inspect.getframeinfo(callable, follow_wrapped=True)", "inspect.hermint(callable, follow_wrapped=True)", "inspect.polyint(callable, follow_wrapped=True)"], "inspect.stack()": ["stack", "inspect._isna()", "inspect.list()", "inspect._splitnetloc()", "inspect.unstack()", "inspect.template()", "inspect.trimcoef()", "inspect.writedoc()", "inspect.broadcast_arrays()", "inspect.close_all()", "inspect.debug_src()", "inspect.lru_cache()", "inspect.safe_repr()", "inspect._synthesize()", "inspect._unique_state_dict()"], "inspect.stack(context=1)": ["stack", "inspect.stack(context='1')", "inspect._isna(context=1)", "inspect.list(context=1)", "inspect._splitnetloc(context=1)", "inspect.unstack(context=1)", "inspect.template(context=1)", "inspect.trimcoef(context=1)", "inspect.writedoc(context=1)", "inspect.broadcast_arrays(context=1)", "inspect.close_all(context=1)", "inspect.debug_src(context=1)", "inspect.lru_cache(context=1)", "inspect.safe_repr(context=1)", "inspect._synthesize(context=1)"], "inspect.trace()": ["trace", "inspect.stack()", "inspect.trace_module()", "inspect.translate()", "inspect.iterparse()", "inspect.rmtree()", "inspect.circle()", "inspect.unstack()", "inspect.gradient()", "inspect._center_dispatcher()", "inspect.save()", "inspect.has_table()", "inspect.broadcast()", "inspect.onrelease()", "inspect._raw_input()"], "inspect.trace(context=1)": ["trace", "inspect.trace(context='1')", "inspect.stack(context=1)", "inspect.trace_module(context=1)", "inspect.translate(context=1)", "inspect.iterparse(context=1)", "inspect.rmtree(context=1)", "inspect.circle(context=1)", "inspect.unstack(context=1)", "inspect.gradient(context=1)", "inspect._center_dispatcher(context=1)", "inspect.save(context=1)", "inspect.has_table(context=1)", "inspect.broadcast(context=1)", "inspect.onrelease(context=1)"], "inspect.unwrap(func, stop=None)": ["unwrap", "inspect.unwrap(func, stop=None)", "inspect.OpenWrapper(func, stop=None)", "inspect.run(func, stop=None)", "inspect.init_rpc(func, stop=None)", "inspect._builtin_open(func, stop=None)", "inspect._wrap(func, stop=None)", "inspect.wrap(func, stop=None)", "inspect.bltn_open(func, stop=None)", "inspect.wraps(func, stop=None)", "inspect.argpartition(func, stop=None)", "inspect._open(func, stop=None)", "inspect.open(func, stop=None)", "inspect.rfft(func, stop=None)", "inspect.cross(func, stop=None)"], "inspect_loader.exec_module(module)": ["exec_module"], "inspect_loader.get_code(fullname)": ["get_code"], "inspect_loader.load_module(fullname)": ["load_module"], "inspect_loader.source_to_code(data)": ["source_to_code"], "inspect_loader.source_to_code(data, path='<string>')": ["source_to_code", "inspect_loader.source_to_code(data, path=8)"], "instance.__class__": ["instance.__class__"], "int()": ["int", "init()", "_in()", "input()", "__inv__()", "ginput()", "pprint()", "_sin()", "invert()", "Int2AP()", "iat()", "_not_in()", "itn()", "__not__()", "nts()"], "int(x)": ["int", "init(x)", "_in(x)", "input(x)", "__inv__(x)", "ginput(x)", "pprint(x)", "_sin(x)", "invert(x)", "Int2AP(x)", "iat(x)", "_not_in(x)", "itn(x)", "__not__(x)", "nts(x)"], "int(x, base=10)": ["int", "int(x, base='10')", "init(x, base=10)", "_in(x, base=10)", "input(x, base=10)", "__inv__(x, base=10)", "ginput(x, base=10)", "pprint(x, base=10)", "_sin(x, base=10)", "invert(x, base=10)", "Int2AP(x, base=10)", "iat(x, base=10)", "_not_in(x, base=10)", "itn(x, base=10)", "__not__(x, base=10)"], "int.bit_length()": ["bit_length"], "int.from_bytes(bytes, byteorder)": ["from_bytes"], "int.from_bytes(bytes, byteorder, signed=False)": ["from_bytes", "int.from_bytes(bytes, byteorder, signed=True)"], "int.to_bytes(length, byteorder)": ["to_bytes"], "int.to_bytes(length, byteorder, signed=False)": ["to_bytes", "int.to_bytes(length, byteorder, signed=True)"], "io.BlockingIOError": ["io.BlockingIOError"], "io.BufferedRWPair(reader, writer)": ["BufferedRWPair"], "io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)": ["BufferedRWPair"], "io.BufferedRandom(raw)": ["BufferedRandom"], "io.BufferedReader(raw)": ["BufferedReader"], "io.BufferedReader(raw, buffer_size=DEFAULT_BUFFER_SIZE)": ["BufferedReader"], "io.BufferedWriter(raw)": ["BufferedWriter"], "io.BufferedWriter(raw, buffer_size=DEFAULT_BUFFER_SIZE)": ["BufferedWriter"], "io.BytesIO()": ["BytesIO"], "io.BytesIO(initial_bytes)": ["BytesIO"], "io.DEFAULT_BUFFER_SIZE": ["io.DEFAULT_BUFFER_SIZE"], "io.FileIO(name)": ["FileIO"], "io.FileIO(name, closefd=True)": ["FileIO", "io.FileIO(name, closefd=False)"], "io.FileIO(name, closefd=True, opener=None)": ["FileIO", "io.FileIO(name, closefd=False, opener=None)"], "io.FileIO(name, mode='r')": ["FileIO", "io.FileIO(name, mode=1)"], "io.FileIO(name, mode='r', closefd=True)": ["FileIO", "io.FileIO(name, mode='r', closefd=False)", "io.FileIO(name, mode=1.0, closefd=True)"], "io.FileIO(name, mode='r', opener=None)": ["FileIO", "io.FileIO(name, mode='r', opener=None)", "io.FileIO(name, mode=1, opener=None)"], "io.FileIO(name, opener=None)": ["FileIO", "io.FileIO(name, opener=None)"], "io.IOBase": ["io.IOBase"], "io.IncrementalNewlineDecoder": ["io.IncrementalNewlineDecoder"], "io.RawIOBase": ["io.RawIOBase"], "io.StringIO()": ["StringIO"], "io.StringIO(initial_value='')": ["StringIO", "io.StringIO(initial_value=0.0)"], "io.StringIO(initial_value='', newline='\\n')": ["StringIO", "io.StringIO(initial_value=0.0, newline=1.0)"], "io.StringIO(newline='\\n')": ["StringIO", "io.StringIO(newline=1.0)"], "io.TextIOBase": ["io.TextIOBase"], "io.TextIOWrapper(buffer)": ["TextIOWrapper"], "io.TextIOWrapper(buffer, encoding=None, errors=None)": ["TextIOWrapper", "io.TextIOWrapper(buffer, encoding=None, errors=None)"], "io.TextIOWrapper(buffer, encoding=None, newline=None)": ["TextIOWrapper", "io.TextIOWrapper(buffer, encoding=None, newline=None)"], "io.TextIOWrapper(buffer, errors=None)": ["TextIOWrapper", "io.TextIOWrapper(buffer, errors=None)"], "io.TextIOWrapper(buffer, newline=None)": ["TextIOWrapper", "io.TextIOWrapper(buffer, newline=None)"], "io.TextIOWrapper(buffer, write_through=False)": ["TextIOWrapper", "io.TextIOWrapper(buffer, write_through=True)"], "io.UnsupportedOperation": ["io.UnsupportedOperation"], "io.open(file)": ["open", "io._open(file)", "io.open_latin1(file)", "io.popen(file)", "io.bltn_open(file)", "io.OpenWrapper(file)", "io._builtin_open(file)", "io.urlopen(file)", "io.pie(file)", "io._run_code(file)", "io.compress(file)", "io._popen(file)", "io.byte_compile(file)", "io.boxplot(file)", "io.pen(file)"], "io.open(file, buffering=-1)": ["open", "io.open(file, buffering=(- '1'))", "io._open(file, buffering=(- 1))", "io.open_latin1(file, buffering=(- 1))", "io.popen(file, buffering=(- 1))", "io.bltn_open(file, buffering=(- 1))", "io.OpenWrapper(file, buffering=(- 1))", "io._builtin_open(file, buffering=(- 1))", "io.urlopen(file, buffering=(- 1))", "io.pie(file, buffering=(- 1))", "io._run_code(file, buffering=(- 1))", "io.compress(file, buffering=(- 1))", "io._popen(file, buffering=(- 1))", "io.byte_compile(file, buffering=(- 1))", "io.boxplot(file, buffering=(- 1))"], "io.open(file, encoding=None)": ["open", "io.open(file, encoding=None)", "io._open(file, encoding=None)", "io.open_latin1(file, encoding=None)", "io.popen(file, encoding=None)", "io.bltn_open(file, encoding=None)", "io.OpenWrapper(file, encoding=None)", "io._builtin_open(file, encoding=None)", "io.urlopen(file, encoding=None)", "io.pie(file, encoding=None)", "io._run_code(file, encoding=None)", "io.compress(file, encoding=None)", "io._popen(file, encoding=None)", "io.byte_compile(file, encoding=None)", "io.boxplot(file, encoding=None)"], "io.open(file, mode='r')": ["open", "io.open(file, mode=1)", "io._open(file, mode='r')", "io.open_latin1(file, mode='r')", "io.popen(file, mode='r')", "io.bltn_open(file, mode='r')", "io.OpenWrapper(file, mode='r')", "io._builtin_open(file, mode='r')", "io.urlopen(file, mode='r')", "io.pie(file, mode='r')", "io._run_code(file, mode='r')", "io.compress(file, mode='r')", "io._popen(file, mode='r')", "io.byte_compile(file, mode='r')", "io.boxplot(file, mode='r')"], "io.open(file, mode='r', buffering=-1)": ["open", "io.open(file, mode=1, buffering=(- '1'))", "io._open(file, mode='r', buffering=(- 1))", "io.open_latin1(file, mode='r', buffering=(- 1))", "io.popen(file, mode='r', buffering=(- 1))", "io.bltn_open(file, mode='r', buffering=(- 1))", "io.OpenWrapper(file, mode='r', buffering=(- 1))", "io._builtin_open(file, mode='r', buffering=(- 1))", "io.urlopen(file, mode='r', buffering=(- 1))", "io.pie(file, mode='r', buffering=(- 1))", "io._run_code(file, mode='r', buffering=(- 1))", "io.compress(file, mode='r', buffering=(- 1))", "io._popen(file, mode='r', buffering=(- 1))", "io.byte_compile(file, mode='r', buffering=(- 1))", "io.boxplot(file, mode='r', buffering=(- 1))"], "io.open(file, opener=None)": ["open", "io.open(file, opener=None)", "io._open(file, opener=None)", "io.open_latin1(file, opener=None)", "io.popen(file, opener=None)", "io.bltn_open(file, opener=None)", "io.OpenWrapper(file, opener=None)", "io._builtin_open(file, opener=None)", "io.urlopen(file, opener=None)", "io.pie(file, opener=None)", "io._run_code(file, opener=None)", "io.compress(file, opener=None)", "io._popen(file, opener=None)", "io.byte_compile(file, opener=None)", "io.boxplot(file, opener=None)"], "io_base.__del__()": ["__del__"], "io_base.fileno()": ["fileno"], "io_base.flush()": ["flush"], "io_base.isatty()": ["isatty"], "io_base.readable()": ["readable"], "io_base.readline()": ["readline"], "io_base.readline(size=-1)": ["readline", "io_base.readline(size=(- '1'))"], "io_base.readlines()": ["readlines"], "io_base.readlines(hint=-1)": ["readlines", "io_base.readlines(hint=(- '1'))"], "io_base.seek(offset)": ["seek"], "io_base.seek(offset, whence=SEEK_SET)": ["seek"], "io_base.seekable()": ["seekable"], "io_base.truncate()": ["truncate"], "io_base.truncate(size=None)": ["truncate", "io_base.truncate(size=None)"], "io_base.writable()": ["writable"], "io_base.writelines(lines)": ["writelines"], "ipaddress.AddressValueError(ValueError)": ["AddressValueError"], "ipaddress.IPv4Address(address)": ["IPv4Address"], "ipaddress.IPv4Interface(address)": ["IPv4Interface"], "ipaddress.IPv4Network(address, strict=True)": ["IPv4Network", "ipaddress.IPv4Network(address, strict=False)"], "ipaddress.IPv6Address(address)": ["IPv6Address"], "ipaddress.IPv6Interface(address)": ["IPv6Interface"], "ipaddress.IPv6Network(address)": ["IPv6Network"], "ipaddress.IPv6Network(address, strict=True)": ["IPv6Network", "ipaddress.IPv6Network(address, strict=False)"], "ipaddress.NetmaskValueError(ValueError)": ["NetmaskValueError"], "ipaddress.collapse_addresses(addresses)": ["collapse_addresses", "ipaddress._collapse_addresses_internal(addresses)", "ipaddress.address_type(addresses)", "ipaddress.get_address_list(addresses)", "ipaddress.ip_address(addresses)", "ipaddress.get_address(addresses)", "ipaddress._class_escape(addresses)", "ipaddress.getaddresses(addresses)", "ipaddress.escape_decode(addresses)", "ipaddress._find_address_range(addresses)", "ipaddress.assert_class_equal(addresses)", "ipaddress.add_ops(addresses)", "ipaddress._ipaddress_match(addresses)", "ipaddress.assert_copy(addresses)", "ipaddress.add_callers(addresses)"], "ipaddress.get_mixed_type_key(obj)": ["get_mixed_type_key", "ipaddress.getMixedTypeDict(obj)", "ipaddress.get_type_line(obj)", "ipaddress.get_type_hints(obj)", "ipaddress._create_named_tuple(obj)", "ipaddress._default_mime_types(obj)", "ipaddress.get_module_concrete_type(obj)", "ipaddress.get_quant_type(obj)", "ipaddress._get_module_lock(obj)", "ipaddress.read_mime_types(obj)", "ipaddress._get_named_tuple_properties(obj)", "ipaddress.maybe_infer_dtype_type(obj)", "ipaddress._get_scalar_type_map(obj)", "ipaddress.set_default_tensor_type(obj)", "ipaddress._get_method_wrappers(obj)"], "ipaddress.ip_address(address)": ["ip_address", "ipaddress.address_type(address)", "ipaddress.get_address(address)", "ipaddress.get_address_list(address)", "ipaddress.arbitrary_address(address)", "ipaddress._ipaddress_match(address)", "ipaddress._find_address_range(address)", "ipaddress.collapse_addresses(address)", "ipaddress.getaddresses(address)", "ipaddress._add_script_class(address)", "ipaddress.get_addr_spec(address)", "ipaddress.add_ops(address)", "ipaddress.process_skipna(address)", "ipaddress.addshape(address)", "ipaddress.decompress_file(address)"], "ipaddress.ip_interface(address)": ["ip_interface", "ipaddress.interface(address)", "ipaddress.interface_script(address)", "ipaddress.interactive(address)", "ipaddress.interact(address)", "ipaddress.interp(address)", "ipaddress.isinteractive(address)", "ipaddress.integral_types(address)", "ipaddress.interpolate(address)", "ipaddress.iterable(address)", "ipaddress.iterfind(address)", "ipaddress.trace(address)", "ipaddress.in_interactive_session(address)", "ipaddress._integer_repr(address)", "ipaddress._interp_limit(address)"], "ipaddress.ip_network(address)": ["ip_network", "ipaddress.to_clipboard(address)", "ipaddress._return_output(address)", "ipaddress.get_fill_func(address)", "ipaddress.signature(address)", "ipaddress._return_inverse(address)", "ipaddress.tripcolor(address)", "ipaddress._lock_file(address)", "ipaddress.nan_to_num(address)", "ipaddress.increment_lineno(address)", "ipaddress._lu_no_infos(address)", "ipaddress.legint(address)", "ipaddress.lagint(address)", "ipaddress.get_docstring(address)", "ipaddress.polyder(address)"], "ipaddress.ip_network(address, strict=True)": ["ip_network", "ipaddress.ip_network(address, strict=False)", "ipaddress.to_clipboard(address, strict=True)", "ipaddress._return_output(address, strict=True)", "ipaddress.get_fill_func(address, strict=True)", "ipaddress.signature(address, strict=True)", "ipaddress._return_inverse(address, strict=True)", "ipaddress.tripcolor(address, strict=True)", "ipaddress._lock_file(address, strict=True)", "ipaddress.nan_to_num(address, strict=True)", "ipaddress.increment_lineno(address, strict=True)", "ipaddress._lu_no_infos(address, strict=True)", "ipaddress.legint(address, strict=True)", "ipaddress.lagint(address, strict=True)", "ipaddress.get_docstring(address, strict=True)"], "ipaddress.summarize_address_range(first, last)": ["summarize_address_range", "ipaddress.get_summarized_data(first, last)", "ipaddress._find_address_range(first, last)", "ipaddress.get_address_list(first, last)", "ipaddress.get_address(first, last)", "ipaddress.get_angle_addr(first, last)", "ipaddress.get_name_addr(first, last)", "ipaddress.get_addr_spec(first, last)", "ipaddress.register_series_accessor(first, last)", "ipaddress._parse_size(first, last)", "ipaddress.ip_address(first, last)", "ipaddress.arbitrary_address(first, last)", "ipaddress.collapse_addresses(first, last)", "ipaddress.get_remaining_size(first, last)", "ipaddress._ipaddress_match(first, last)"], "ipaddress.v4_int_to_packed(address)": ["v4_int_to_packed", "ipaddress.v6_int_to_packed(address)", "ipaddress._is_packed(address)", "ipaddress._inet_paton(address)", "ipaddress._packed_sequence_init(address)", "ipaddress._biject_to_stack(address)", "ipaddress._masked_arith_op(address)", "ipaddress._task_print_stack(address)", "ipaddress._parse_int(address)", "ipaddress.to_pickle(address)", "ipaddress._init_pathinfo(address)", "ipaddress._make_options_dict(address)", "ipaddress._packed_sequence_init_args(address)", "ipaddress._inplace_binary_method(address)", "ipaddress.ints_to_td64ns(address)"], "ipaddress.v6_int_to_packed(address)": ["v6_int_to_packed", "ipaddress.v4_int_to_packed(address)", "ipaddress._is_packed(address)", "ipaddress._inet_paton(address)", "ipaddress._packed_sequence_init(address)", "ipaddress._biject_to_stack(address)", "ipaddress._masked_arith_op(address)", "ipaddress._task_print_stack(address)", "ipaddress._parse_int(address)", "ipaddress.to_pickle(address)", "ipaddress._init_pathinfo(address)", "ipaddress._make_options_dict(address)", "ipaddress._packed_sequence_init_args(address)", "ipaddress._inplace_binary_method(address)", "ipaddress.ints_to_td64ns(address)"], "is_jump_target": ["is_jump_target"], "isinstance(object, classinfo)": ["isinstance", "distance(object, classinfo)", "_check_isinstance(object, classinfo)", "isspace(object, classinfo)", "isinteractive(object, classinfo)", "linspace(object, classinfo)", "isfirstline(object, classinfo)", "_check_instance(object, classinfo)", "_isfinite(object, classinfo)", "interface(object, classinfo)", "gisfinite(object, classinfo)", "gisnan(object, classinfo)", "is_storage(object, classinfo)", "issequence(object, classinfo)", "isasyncgen(object, classinfo)"], "issubclass(class, classinfo)": [], "iter(context)": ["iter", "filter(context)", "_filter(context)", "interp(context)", "winter(context)", "_iterdir(context)", "is_term(context)", "inner(context)", "write(context)", "interact(context)", "register(context)", "finditer(context)", "iterable(context)", "outer(context)", "_register(context)"], "iter(d)": ["iter", "filter(d)", "_filter(d)", "interp(d)", "winter(d)", "_iterdir(d)", "is_term(d)", "inner(d)", "write(d)", "interact(d)", "register(d)", "finditer(d)", "iterable(d)", "outer(d)", "_register(d)"], "iter(dictview)": ["iter", "filter(dictview)", "_filter(dictview)", "interp(dictview)", "winter(dictview)", "_iterdir(dictview)", "is_term(dictview)", "inner(dictview)", "write(dictview)", "interact(dictview)", "register(dictview)", "finditer(dictview)", "iterable(dictview)", "outer(dictview)", "_register(dictview)"], "iter(object)": ["iter", "filter(object)", "_filter(object)", "interp(object)", "winter(object)", "_iterdir(object)", "is_term(object)", "inner(object)", "write(object)", "interact(object)", "register(object)", "finditer(object)", "iterable(object)", "outer(object)", "_register(object)"], "iter(object, sentinel)": ["iter", "filter(object, sentinel)", "_filter(object, sentinel)", "interp(object, sentinel)", "winter(object, sentinel)", "_iterdir(object, sentinel)", "is_term(object, sentinel)", "inner(object, sentinel)", "write(object, sentinel)", "interact(object, sentinel)", "register(object, sentinel)", "finditer(object, sentinel)", "iterable(object, sentinel)", "outer(object, sentinel)", "_register(object, sentinel)"], "iter(proxy)": ["iter", "filter(proxy)", "_filter(proxy)", "interp(proxy)", "winter(proxy)", "_iterdir(proxy)", "is_term(proxy)", "inner(proxy)", "write(proxy)", "interact(proxy)", "register(proxy)", "finditer(proxy)", "iterable(proxy)", "outer(proxy)", "_register(proxy)"], "iterator.__iter__()": ["__iter__"], "iterator.__next__()": ["__next__"], "itertools.accumulate(iterable)": ["accumulate"], "itertools.accumulate(iterable, func)": ["accumulate"], "itertools.chain(*iterables)": ["chain"], "itertools.combinations(iterable, r)": ["combinations"], "itertools.combinations_with_replacement(iterable, r)": ["combinations_with_replacement"], "itertools.compress(data, selectors)": ["compress"], "itertools.count()": ["count"], "itertools.count(start=0)": ["count", "itertools.count(start='0')"], "itertools.count(start=0, step=1)": ["count", "itertools.count(start='0', step='1')"], "itertools.count(step=1)": ["count", "itertools.count(step='1')"], "itertools.cycle(iterable)": ["cycle"], "itertools.dropwhile(predicate, iterable)": ["dropwhile"], "itertools.filterfalse(predicate, iterable)": ["filterfalse"], "itertools.groupby(iterable)": ["groupby"], "itertools.groupby(iterable, key=None)": ["groupby", "itertools.groupby(iterable, key=None)"], "itertools.islice(iterable, start, stop)": ["islice"], "itertools.islice(iterable, start, stop, step)": ["islice"], "itertools.permutations(iterable)": ["permutations"], "itertools.permutations(iterable, r=None)": ["permutations", "itertools.permutations(iterable, r=None)"], "itertools.product(*iterables)": ["product"], "itertools.product(*iterables, repeat=1)": ["product", "itertools.product(*iterables, repeat='1')"], "itertools.repeat(object)": ["repeat"], "itertools.repeat(object, times)": ["repeat"], "itertools.starmap(function, iterable)": ["starmap"], "itertools.takewhile(predicate, iterable)": ["takewhile"], "itertools.tee(iterable)": ["tee"], "itertools.tee(iterable, n=2)": ["tee", "itertools.tee(iterable, n='2')"], "itertools.zip_longest(*iterables)": ["zip_longest"], "itertools.zip_longest(*iterables, fillvalue=None)": ["zip_longest", "itertools.zip_longest(*iterables, fillvalue=None)"], "joinable_queue.close()": ["close"], "joinable_queue.poll()": ["poll"], "joinable_queue.poll(timeout)": ["poll"], "joinable_queue.recv()": ["recv"], "joinable_queue.recv_bytes()": ["recv_bytes"], "joinable_queue.recv_bytes(maxlength)": ["recv_bytes"], "joinable_queue.recv_bytes_into(buffer)": ["recv_bytes_into"], "joinable_queue.send(obj)": ["send"], "joinable_queue.send_bytes(buffer)": ["send_bytes"], "joinable_queue.send_bytes(buffer, offset)": ["send_bytes"], "joinable_queue.send_bytes(buffer, offset, size)": ["send_bytes"], "json.JSONDecodeError(msg, doc, pos)": ["JSONDecodeError"], "json.JSONDecoder()": ["JSONDecoder"], "json.JSONDecoder(object_hook=None)": ["JSONDecoder", "json.JSONDecoder(object_hook=None)"], "json.JSONDecoder(object_hook=None, parse_int=None)": ["JSONDecoder", "json.JSONDecoder(object_hook=None, parse_int=None)"], "json.JSONDecoder(object_pairs_hook=None)": ["JSONDecoder", "json.JSONDecoder(object_pairs_hook=None)"], "json.JSONDecoder(parse_constant=None)": ["JSONDecoder", "json.JSONDecoder(parse_constant=None)"], "json.JSONDecoder(parse_float=None)": ["JSONDecoder", "json.JSONDecoder(parse_float=None)"], "json.JSONDecoder(parse_int=None)": ["JSONDecoder", "json.JSONDecoder(parse_int=None)"], "json.JSONDecoder(strict=True)": ["JSONDecoder", "json.JSONDecoder(strict=False)"], "json.JSONEncoder()": ["JSONEncoder"], "json.JSONEncoder(allow_nan=True)": ["JSONEncoder", "json.JSONEncoder(allow_nan=False)"], "json.JSONEncoder(check_circular=True)": ["JSONEncoder", "json.JSONEncoder(check_circular=False)"], "json.JSONEncoder(default=None)": ["JSONEncoder", "json.JSONEncoder(default=None)"], "json.JSONEncoder(ensure_ascii=True)": ["JSONEncoder", "json.JSONEncoder(ensure_ascii=False)"], "json.JSONEncoder(indent=None)": ["JSONEncoder", "json.JSONEncoder(indent=None)"], "json.JSONEncoder(separators=None)": ["JSONEncoder", "json.JSONEncoder(separators=None)"], "json.JSONEncoder(skipkeys=False)": ["JSONEncoder", "json.JSONEncoder(skipkeys=True)"], "json.JSONEncoder(skipkeys=False, ensure_ascii=True)": ["JSONEncoder", "json.JSONEncoder(skipkeys=True, ensure_ascii=False)"], "json.JSONEncoder(sort_keys=False)": ["JSONEncoder", "json.JSONEncoder(sort_keys=True)"], "json.dump(obj, fp, **kw)": ["dump", "json._dump(obj, fp, **kw)", "json.dumps(obj, fp, **kw)", "json._dumps(obj, fp, **kw)", "json.dup(obj, fp, **kw)", "json.dup2(obj, fp, **kw)", "json._get_dump(obj, fp, **kw)", "json.up(obj, fp, **kw)", "json.DupFd(obj, fp, **kw)", "json._xml_dumps(obj, fp, **kw)", "json.WCOREDUMP(obj, fp, **kw)", "json._sum_(obj, fp, **kw)", "json._sum(obj, fp, **kw)", "json.sum(obj, fp, **kw)", "json.cmp(obj, fp, **kw)"], "json.dump(obj, fp, **kw, allow_nan=True)": ["dump", "json.dump(obj, fp, **kw, allow_nan=False)", "json._dump(obj, fp, **kw, allow_nan=True)", "json.dumps(obj, fp, **kw, allow_nan=True)", "json._dumps(obj, fp, **kw, allow_nan=True)", "json.dup(obj, fp, **kw, allow_nan=True)", "json.dup2(obj, fp, **kw, allow_nan=True)", "json._get_dump(obj, fp, **kw, allow_nan=True)", "json.up(obj, fp, **kw, allow_nan=True)", "json.DupFd(obj, fp, **kw, allow_nan=True)", "json._xml_dumps(obj, fp, **kw, allow_nan=True)", "json.WCOREDUMP(obj, fp, **kw, allow_nan=True)", "json._sum_(obj, fp, **kw, allow_nan=True)", "json._sum(obj, fp, **kw, allow_nan=True)", "json.sum(obj, fp, **kw, allow_nan=True)"], "json.dump(obj, fp, **kw, check_circular=True)": ["dump", "json.dump(obj, fp, **kw, check_circular=False)", "json._dump(obj, fp, **kw, check_circular=True)", "json.dumps(obj, fp, **kw, check_circular=True)", "json._dumps(obj, fp, **kw, check_circular=True)", "json.dup(obj, fp, **kw, check_circular=True)", "json.dup2(obj, fp, **kw, check_circular=True)", "json._get_dump(obj, fp, **kw, check_circular=True)", "json.up(obj, fp, **kw, check_circular=True)", "json.DupFd(obj, fp, **kw, check_circular=True)", "json._xml_dumps(obj, fp, **kw, check_circular=True)", "json.WCOREDUMP(obj, fp, **kw, check_circular=True)", "json._sum_(obj, fp, **kw, check_circular=True)", "json._sum(obj, fp, **kw, check_circular=True)", "json.sum(obj, fp, **kw, check_circular=True)"], "json.dump(obj, fp, **kw, cls=None)": ["dump", "json.dump(obj, fp, **kw, cls=None)", "json._dump(obj, fp, **kw, cls=None)", "json.dumps(obj, fp, **kw, cls=None)", "json._dumps(obj, fp, **kw, cls=None)", "json.dup(obj, fp, **kw, cls=None)", "json.dup2(obj, fp, **kw, cls=None)", "json._get_dump(obj, fp, **kw, cls=None)", "json.up(obj, fp, **kw, cls=None)", "json.DupFd(obj, fp, **kw, cls=None)", "json._xml_dumps(obj, fp, **kw, cls=None)", "json.WCOREDUMP(obj, fp, **kw, cls=None)", "json._sum_(obj, fp, **kw, cls=None)", "json._sum(obj, fp, **kw, cls=None)", "json.sum(obj, fp, **kw, cls=None)"], "json.dump(obj, fp, **kw, default=None)": ["dump", "json.dump(obj, fp, **kw, default=None)", "json._dump(obj, fp, **kw, default=None)", "json.dumps(obj, fp, **kw, default=None)", "json._dumps(obj, fp, **kw, default=None)", "json.dup(obj, fp, **kw, default=None)", "json.dup2(obj, fp, **kw, default=None)", "json._get_dump(obj, fp, **kw, default=None)", "json.up(obj, fp, **kw, default=None)", "json.DupFd(obj, fp, **kw, default=None)", "json._xml_dumps(obj, fp, **kw, default=None)", "json.WCOREDUMP(obj, fp, **kw, default=None)", "json._sum_(obj, fp, **kw, default=None)", "json._sum(obj, fp, **kw, default=None)", "json.sum(obj, fp, **kw, default=None)"], "json.dump(obj, fp, **kw, ensure_ascii=True)": ["dump", "json.dump(obj, fp, **kw, ensure_ascii=False)", "json._dump(obj, fp, **kw, ensure_ascii=True)", "json.dumps(obj, fp, **kw, ensure_ascii=True)", "json._dumps(obj, fp, **kw, ensure_ascii=True)", "json.dup(obj, fp, **kw, ensure_ascii=True)", "json.dup2(obj, fp, **kw, ensure_ascii=True)", "json._get_dump(obj, fp, **kw, ensure_ascii=True)", "json.up(obj, fp, **kw, ensure_ascii=True)", "json.DupFd(obj, fp, **kw, ensure_ascii=True)", "json._xml_dumps(obj, fp, **kw, ensure_ascii=True)", "json.WCOREDUMP(obj, fp, **kw, ensure_ascii=True)", "json._sum_(obj, fp, **kw, ensure_ascii=True)", "json._sum(obj, fp, **kw, ensure_ascii=True)", "json.sum(obj, fp, **kw, ensure_ascii=True)"], "json.dump(obj, fp, **kw, indent=None)": ["dump", "json.dump(obj, fp, **kw, indent=None)", "json._dump(obj, fp, **kw, indent=None)", "json.dumps(obj, fp, **kw, indent=None)", "json._dumps(obj, fp, **kw, indent=None)", "json.dup(obj, fp, **kw, indent=None)", "json.dup2(obj, fp, **kw, indent=None)", "json._get_dump(obj, fp, **kw, indent=None)", "json.up(obj, fp, **kw, indent=None)", "json.DupFd(obj, fp, **kw, indent=None)", "json._xml_dumps(obj, fp, **kw, indent=None)", "json.WCOREDUMP(obj, fp, **kw, indent=None)", "json._sum_(obj, fp, **kw, indent=None)", "json._sum(obj, fp, **kw, indent=None)", "json.sum(obj, fp, **kw, indent=None)"], "json.dump(obj, fp, **kw, separators=None)": ["dump", "json.dump(obj, fp, **kw, separators=None)", "json._dump(obj, fp, **kw, separators=None)", "json.dumps(obj, fp, **kw, separators=None)", "json._dumps(obj, fp, **kw, separators=None)", "json.dup(obj, fp, **kw, separators=None)", "json.dup2(obj, fp, **kw, separators=None)", "json._get_dump(obj, fp, **kw, separators=None)", "json.up(obj, fp, **kw, separators=None)", "json.DupFd(obj, fp, **kw, separators=None)", "json._xml_dumps(obj, fp, **kw, separators=None)", "json.WCOREDUMP(obj, fp, **kw, separators=None)", "json._sum_(obj, fp, **kw, separators=None)", "json._sum(obj, fp, **kw, separators=None)", "json.sum(obj, fp, **kw, separators=None)"], "json.dump(obj, fp, **kw, skipkeys=False)": ["dump", "json.dump(obj, fp, **kw, skipkeys=True)", "json._dump(obj, fp, **kw, skipkeys=False)", "json.dumps(obj, fp, **kw, skipkeys=False)", "json._dumps(obj, fp, **kw, skipkeys=False)", "json.dup(obj, fp, **kw, skipkeys=False)", "json.dup2(obj, fp, **kw, skipkeys=False)", "json._get_dump(obj, fp, **kw, skipkeys=False)", "json.up(obj, fp, **kw, skipkeys=False)", "json.DupFd(obj, fp, **kw, skipkeys=False)", "json._xml_dumps(obj, fp, **kw, skipkeys=False)", "json.WCOREDUMP(obj, fp, **kw, skipkeys=False)", "json._sum_(obj, fp, **kw, skipkeys=False)", "json._sum(obj, fp, **kw, skipkeys=False)", "json.sum(obj, fp, **kw, skipkeys=False)"], "json.dump(obj, fp, **kw, sort_keys=False)": ["dump", "json.dump(obj, fp, **kw, sort_keys=True)", "json._dump(obj, fp, **kw, sort_keys=False)", "json.dumps(obj, fp, **kw, sort_keys=False)", "json._dumps(obj, fp, **kw, sort_keys=False)", "json.dup(obj, fp, **kw, sort_keys=False)", "json.dup2(obj, fp, **kw, sort_keys=False)", "json._get_dump(obj, fp, **kw, sort_keys=False)", "json.up(obj, fp, **kw, sort_keys=False)", "json.DupFd(obj, fp, **kw, sort_keys=False)", "json._xml_dumps(obj, fp, **kw, sort_keys=False)", "json.WCOREDUMP(obj, fp, **kw, sort_keys=False)", "json._sum_(obj, fp, **kw, sort_keys=False)", "json._sum(obj, fp, **kw, sort_keys=False)", "json.sum(obj, fp, **kw, sort_keys=False)"], "json.dumps(obj, **kw)": ["dumps", "json._dumps(obj, **kw)", "json.dump(obj, **kw)", "json._dump(obj, **kw)", "json._sum_(obj, **kw)", "json._sum(obj, **kw)", "json.dup2(obj, **kw)", "json._group(obj, **kw)", "json._unparse_datetime(obj, **kw)", "json._genops(obj, **kw)", "json.compile(obj, **kw)", "json.template(obj, **kw)", "json.safe_repr(obj, **kw)", "json.re_compile(obj, **kw)", "json.run(obj, **kw)"], "json.dumps(obj, **kw, allow_nan=True)": ["dumps", "json.dumps(obj, **kw, allow_nan=False)", "json._dumps(obj, **kw, allow_nan=True)", "json.dump(obj, **kw, allow_nan=True)", "json._dump(obj, **kw, allow_nan=True)", "json._sum_(obj, **kw, allow_nan=True)", "json._sum(obj, **kw, allow_nan=True)", "json.dup2(obj, **kw, allow_nan=True)", "json._group(obj, **kw, allow_nan=True)", "json._unparse_datetime(obj, **kw, allow_nan=True)", "json._genops(obj, **kw, allow_nan=True)", "json.compile(obj, **kw, allow_nan=True)", "json.template(obj, **kw, allow_nan=True)", "json.safe_repr(obj, **kw, allow_nan=True)", "json.re_compile(obj, **kw, allow_nan=True)"], "json.dumps(obj, **kw, check_circular=True)": ["dumps", "json.dumps(obj, **kw, check_circular=False)", "json._dumps(obj, **kw, check_circular=True)", "json.dump(obj, **kw, check_circular=True)", "json._dump(obj, **kw, check_circular=True)", "json._sum_(obj, **kw, check_circular=True)", "json._sum(obj, **kw, check_circular=True)", "json.dup2(obj, **kw, check_circular=True)", "json._group(obj, **kw, check_circular=True)", "json._unparse_datetime(obj, **kw, check_circular=True)", "json._genops(obj, **kw, check_circular=True)", "json.compile(obj, **kw, check_circular=True)", "json.template(obj, **kw, check_circular=True)", "json.safe_repr(obj, **kw, check_circular=True)", "json.re_compile(obj, **kw, check_circular=True)"], "json.dumps(obj, **kw, cls=None)": ["dumps", "json.dumps(obj, **kw, cls=None)", "json._dumps(obj, **kw, cls=None)", "json.dump(obj, **kw, cls=None)", "json._dump(obj, **kw, cls=None)", "json._sum_(obj, **kw, cls=None)", "json._sum(obj, **kw, cls=None)", "json.dup2(obj, **kw, cls=None)", "json._group(obj, **kw, cls=None)", "json._unparse_datetime(obj, **kw, cls=None)", "json._genops(obj, **kw, cls=None)", "json.compile(obj, **kw, cls=None)", "json.template(obj, **kw, cls=None)", "json.safe_repr(obj, **kw, cls=None)", "json.re_compile(obj, **kw, cls=None)"], "json.dumps(obj, **kw, default=None)": ["dumps", "json.dumps(obj, **kw, default=None)", "json._dumps(obj, **kw, default=None)", "json.dump(obj, **kw, default=None)", "json._dump(obj, **kw, default=None)", "json._sum_(obj, **kw, default=None)", "json._sum(obj, **kw, default=None)", "json.dup2(obj, **kw, default=None)", "json._group(obj, **kw, default=None)", "json._unparse_datetime(obj, **kw, default=None)", "json._genops(obj, **kw, default=None)", "json.compile(obj, **kw, default=None)", "json.template(obj, **kw, default=None)", "json.safe_repr(obj, **kw, default=None)", "json.re_compile(obj, **kw, default=None)"], "json.dumps(obj, **kw, ensure_ascii=True)": ["dumps", "json.dumps(obj, **kw, ensure_ascii=False)", "json._dumps(obj, **kw, ensure_ascii=True)", "json.dump(obj, **kw, ensure_ascii=True)", "json._dump(obj, **kw, ensure_ascii=True)", "json._sum_(obj, **kw, ensure_ascii=True)", "json._sum(obj, **kw, ensure_ascii=True)", "json.dup2(obj, **kw, ensure_ascii=True)", "json._group(obj, **kw, ensure_ascii=True)", "json._unparse_datetime(obj, **kw, ensure_ascii=True)", "json._genops(obj, **kw, ensure_ascii=True)", "json.compile(obj, **kw, ensure_ascii=True)", "json.template(obj, **kw, ensure_ascii=True)", "json.safe_repr(obj, **kw, ensure_ascii=True)", "json.re_compile(obj, **kw, ensure_ascii=True)"], "json.dumps(obj, **kw, indent=None)": ["dumps", "json.dumps(obj, **kw, indent=None)", "json._dumps(obj, **kw, indent=None)", "json.dump(obj, **kw, indent=None)", "json._dump(obj, **kw, indent=None)", "json._sum_(obj, **kw, indent=None)", "json._sum(obj, **kw, indent=None)", "json.dup2(obj, **kw, indent=None)", "json._group(obj, **kw, indent=None)", "json._unparse_datetime(obj, **kw, indent=None)", "json._genops(obj, **kw, indent=None)", "json.compile(obj, **kw, indent=None)", "json.template(obj, **kw, indent=None)", "json.safe_repr(obj, **kw, indent=None)", "json.re_compile(obj, **kw, indent=None)"], "json.dumps(obj, **kw, separators=None)": ["dumps", "json.dumps(obj, **kw, separators=None)", "json._dumps(obj, **kw, separators=None)", "json.dump(obj, **kw, separators=None)", "json._dump(obj, **kw, separators=None)", "json._sum_(obj, **kw, separators=None)", "json._sum(obj, **kw, separators=None)", "json.dup2(obj, **kw, separators=None)", "json._group(obj, **kw, separators=None)", "json._unparse_datetime(obj, **kw, separators=None)", "json._genops(obj, **kw, separators=None)", "json.compile(obj, **kw, separators=None)", "json.template(obj, **kw, separators=None)", "json.safe_repr(obj, **kw, separators=None)", "json.re_compile(obj, **kw, separators=None)"], "json.load(fp, **kw)": ["load", "json._load(fp, **kw)", "json.loads(fp, **kw)", "json._loads(fp, **kw)", "json.reload(fp, **kw)", "json.loadtxt(fp, **kw)", "json.overload(fp, **kw)", "json._overload(fp, **kw)", "json._read_long(fp, **kw)", "json._xml_loads(fp, **kw)", "json.lagdiv(fp, **kw)", "json.legadd(fp, **kw)", "json.locate(fp, **kw)", "json.lagadd(fp, **kw)", "json.lagder(fp, **kw)"], "json.load(fp, **kw, cls=None)": ["load", "json.load(fp, **kw, cls=None)", "json._load(fp, **kw, cls=None)", "json.loads(fp, **kw, cls=None)", "json._loads(fp, **kw, cls=None)", "json.reload(fp, **kw, cls=None)", "json.loadtxt(fp, **kw, cls=None)", "json.overload(fp, **kw, cls=None)", "json._overload(fp, **kw, cls=None)", "json._read_long(fp, **kw, cls=None)", "json._xml_loads(fp, **kw, cls=None)", "json.lagdiv(fp, **kw, cls=None)", "json.legadd(fp, **kw, cls=None)", "json.locate(fp, **kw, cls=None)", "json.lagadd(fp, **kw, cls=None)"], "json.load(fp, **kw, cls=None, object_hook=None)": ["load", "json.load(fp, **kw, cls=None, object_hook=None)", "json._load(fp, **kw, cls=None, object_hook=None)", "json.loads(fp, **kw, cls=None, object_hook=None)", "json._loads(fp, **kw, cls=None, object_hook=None)", "json.reload(fp, **kw, cls=None, object_hook=None)", "json.loadtxt(fp, **kw, cls=None, object_hook=None)", "json.overload(fp, **kw, cls=None, object_hook=None)", "json._overload(fp, **kw, cls=None, object_hook=None)", "json._read_long(fp, **kw, cls=None, object_hook=None)", "json._xml_loads(fp, **kw, cls=None, object_hook=None)", "json.lagdiv(fp, **kw, cls=None, object_hook=None)", "json.legadd(fp, **kw, cls=None, object_hook=None)", "json.locate(fp, **kw, cls=None, object_hook=None)", "json.lagadd(fp, **kw, cls=None, object_hook=None)"], "json.load(fp, **kw, cls=None, parse_float=None)": ["load", "json.load(fp, **kw, cls=None, parse_float=None)", "json._load(fp, **kw, cls=None, parse_float=None)", "json.loads(fp, **kw, cls=None, parse_float=None)", "json._loads(fp, **kw, cls=None, parse_float=None)", "json.reload(fp, **kw, cls=None, parse_float=None)", "json.loadtxt(fp, **kw, cls=None, parse_float=None)", "json.overload(fp, **kw, cls=None, parse_float=None)", "json._overload(fp, **kw, cls=None, parse_float=None)", "json._read_long(fp, **kw, cls=None, parse_float=None)", "json._xml_loads(fp, **kw, cls=None, parse_float=None)", "json.lagdiv(fp, **kw, cls=None, parse_float=None)", "json.legadd(fp, **kw, cls=None, parse_float=None)", "json.locate(fp, **kw, cls=None, parse_float=None)", "json.lagadd(fp, **kw, cls=None, parse_float=None)"], "json.load(fp, **kw, cls=None, parse_int=None)": ["load", "json.load(fp, **kw, cls=None, parse_int=None)", "json._load(fp, **kw, cls=None, parse_int=None)", "json.loads(fp, **kw, cls=None, parse_int=None)", "json._loads(fp, **kw, cls=None, parse_int=None)", "json.reload(fp, **kw, cls=None, parse_int=None)", "json.loadtxt(fp, **kw, cls=None, parse_int=None)", "json.overload(fp, **kw, cls=None, parse_int=None)", "json._overload(fp, **kw, cls=None, parse_int=None)", "json._read_long(fp, **kw, cls=None, parse_int=None)", "json._xml_loads(fp, **kw, cls=None, parse_int=None)", "json.lagdiv(fp, **kw, cls=None, parse_int=None)", "json.legadd(fp, **kw, cls=None, parse_int=None)", "json.locate(fp, **kw, cls=None, parse_int=None)", "json.lagadd(fp, **kw, cls=None, parse_int=None)"], "json.load(fp, **kw, object_hook=None)": ["load", "json.load(fp, **kw, object_hook=None)", "json._load(fp, **kw, object_hook=None)", "json.loads(fp, **kw, object_hook=None)", "json._loads(fp, **kw, object_hook=None)", "json.reload(fp, **kw, object_hook=None)", "json.loadtxt(fp, **kw, object_hook=None)", "json.overload(fp, **kw, object_hook=None)", "json._overload(fp, **kw, object_hook=None)", "json._read_long(fp, **kw, object_hook=None)", "json._xml_loads(fp, **kw, object_hook=None)", "json.lagdiv(fp, **kw, object_hook=None)", "json.legadd(fp, **kw, object_hook=None)", "json.locate(fp, **kw, object_hook=None)", "json.lagadd(fp, **kw, object_hook=None)"], "json.load(fp, **kw, parse_constant=None)": ["load", "json.load(fp, **kw, parse_constant=None)", "json._load(fp, **kw, parse_constant=None)", "json.loads(fp, **kw, parse_constant=None)", "json._loads(fp, **kw, parse_constant=None)", "json.reload(fp, **kw, parse_constant=None)", "json.loadtxt(fp, **kw, parse_constant=None)", "json.overload(fp, **kw, parse_constant=None)", "json._overload(fp, **kw, parse_constant=None)", "json._read_long(fp, **kw, parse_constant=None)", "json._xml_loads(fp, **kw, parse_constant=None)", "json.lagdiv(fp, **kw, parse_constant=None)", "json.legadd(fp, **kw, parse_constant=None)", "json.locate(fp, **kw, parse_constant=None)", "json.lagadd(fp, **kw, parse_constant=None)"], "json.load(fp, **kw, parse_float=None)": ["load", "json.load(fp, **kw, parse_float=None)", "json._load(fp, **kw, parse_float=None)", "json.loads(fp, **kw, parse_float=None)", "json._loads(fp, **kw, parse_float=None)", "json.reload(fp, **kw, parse_float=None)", "json.loadtxt(fp, **kw, parse_float=None)", "json.overload(fp, **kw, parse_float=None)", "json._overload(fp, **kw, parse_float=None)", "json._read_long(fp, **kw, parse_float=None)", "json._xml_loads(fp, **kw, parse_float=None)", "json.lagdiv(fp, **kw, parse_float=None)", "json.legadd(fp, **kw, parse_float=None)", "json.locate(fp, **kw, parse_float=None)", "json.lagadd(fp, **kw, parse_float=None)"], "json.load(fp, **kw, parse_int=None)": ["load", "json.load(fp, **kw, parse_int=None)", "json._load(fp, **kw, parse_int=None)", "json.loads(fp, **kw, parse_int=None)", "json._loads(fp, **kw, parse_int=None)", "json.reload(fp, **kw, parse_int=None)", "json.loadtxt(fp, **kw, parse_int=None)", "json.overload(fp, **kw, parse_int=None)", "json._overload(fp, **kw, parse_int=None)", "json._read_long(fp, **kw, parse_int=None)", "json._xml_loads(fp, **kw, parse_int=None)", "json.lagdiv(fp, **kw, parse_int=None)", "json.legadd(fp, **kw, parse_int=None)", "json.locate(fp, **kw, parse_int=None)", "json.lagadd(fp, **kw, parse_int=None)"], "json.loads(s, **kw)": ["loads", "json._loads(s, **kw)", "json._load(s, **kw)", "json.load(s, **kw)", "json.reload(s, **kw)", "json._xml_loads(s, **kw)", "json.loadtxt(s, **kw)", "json.set_loader(s, **kw)", "json._globals(s, **kw)", "json.load_tests(s, **kw)", "json.towards(s, **kw)", "json.overload(s, **kw)", "json.leapdays(s, **kw)", "json._overload(s, **kw)", "json.load_source(s, **kw)"], "json.loads(s, **kw, cls=None)": ["loads", "json.loads(s, **kw, cls=None)", "json._loads(s, **kw, cls=None)", "json._load(s, **kw, cls=None)", "json.load(s, **kw, cls=None)", "json.reload(s, **kw, cls=None)", "json._xml_loads(s, **kw, cls=None)", "json.loadtxt(s, **kw, cls=None)", "json.set_loader(s, **kw, cls=None)", "json._globals(s, **kw, cls=None)", "json.load_tests(s, **kw, cls=None)", "json.towards(s, **kw, cls=None)", "json.overload(s, **kw, cls=None)", "json.leapdays(s, **kw, cls=None)", "json._overload(s, **kw, cls=None)"], "json.loads(s, **kw, encoding=None)": ["loads", "json.loads(s, **kw, encoding=None)", "json._loads(s, **kw, encoding=None)", "json._load(s, **kw, encoding=None)", "json.load(s, **kw, encoding=None)", "json.reload(s, **kw, encoding=None)", "json._xml_loads(s, **kw, encoding=None)", "json.loadtxt(s, **kw, encoding=None)", "json.set_loader(s, **kw, encoding=None)", "json._globals(s, **kw, encoding=None)", "json.load_tests(s, **kw, encoding=None)", "json.towards(s, **kw, encoding=None)", "json.overload(s, **kw, encoding=None)", "json.leapdays(s, **kw, encoding=None)", "json._overload(s, **kw, encoding=None)"], "json.loads(s, **kw, encoding=None, cls=None)": ["loads", "json.loads(s, **kw, encoding=None, cls=None)", "json._loads(s, **kw, encoding=None, cls=None)", "json._load(s, **kw, encoding=None, cls=None)", "json.load(s, **kw, encoding=None, cls=None)", "json.reload(s, **kw, encoding=None, cls=None)", "json._xml_loads(s, **kw, encoding=None, cls=None)", "json.loadtxt(s, **kw, encoding=None, cls=None)", "json.set_loader(s, **kw, encoding=None, cls=None)", "json._globals(s, **kw, encoding=None, cls=None)", "json.load_tests(s, **kw, encoding=None, cls=None)", "json.towards(s, **kw, encoding=None, cls=None)", "json.overload(s, **kw, encoding=None, cls=None)", "json.leapdays(s, **kw, encoding=None, cls=None)", "json._overload(s, **kw, encoding=None, cls=None)"], "json.loads(s, **kw, encoding=None, object_hook=None)": ["loads", "json.loads(s, **kw, encoding=None, object_hook=None)", "json._loads(s, **kw, encoding=None, object_hook=None)", "json._load(s, **kw, encoding=None, object_hook=None)", "json.load(s, **kw, encoding=None, object_hook=None)", "json.reload(s, **kw, encoding=None, object_hook=None)", "json._xml_loads(s, **kw, encoding=None, object_hook=None)", "json.loadtxt(s, **kw, encoding=None, object_hook=None)", "json.set_loader(s, **kw, encoding=None, object_hook=None)", "json._globals(s, **kw, encoding=None, object_hook=None)", "json.load_tests(s, **kw, encoding=None, object_hook=None)", "json.towards(s, **kw, encoding=None, object_hook=None)", "json.overload(s, **kw, encoding=None, object_hook=None)", "json.leapdays(s, **kw, encoding=None, object_hook=None)", "json._overload(s, **kw, encoding=None, object_hook=None)"], "json.loads(s, **kw, object_hook=None)": ["loads", "json.loads(s, **kw, object_hook=None)", "json._loads(s, **kw, object_hook=None)", "json._load(s, **kw, object_hook=None)", "json.load(s, **kw, object_hook=None)", "json.reload(s, **kw, object_hook=None)", "json._xml_loads(s, **kw, object_hook=None)", "json.loadtxt(s, **kw, object_hook=None)", "json.set_loader(s, **kw, object_hook=None)", "json._globals(s, **kw, object_hook=None)", "json.load_tests(s, **kw, object_hook=None)", "json.towards(s, **kw, object_hook=None)", "json.overload(s, **kw, object_hook=None)", "json.leapdays(s, **kw, object_hook=None)", "json._overload(s, **kw, object_hook=None)"], "json.loads(s, **kw, parse_float=None)": ["loads", "json.loads(s, **kw, parse_float=None)", "json._loads(s, **kw, parse_float=None)", "json._load(s, **kw, parse_float=None)", "json.load(s, **kw, parse_float=None)", "json.reload(s, **kw, parse_float=None)", "json._xml_loads(s, **kw, parse_float=None)", "json.loadtxt(s, **kw, parse_float=None)", "json.set_loader(s, **kw, parse_float=None)", "json._globals(s, **kw, parse_float=None)", "json.load_tests(s, **kw, parse_float=None)", "json.towards(s, **kw, parse_float=None)", "json.overload(s, **kw, parse_float=None)", "json.leapdays(s, **kw, parse_float=None)", "json._overload(s, **kw, parse_float=None)"], "json.loads(s, **kw, parse_int=None)": ["loads", "json.loads(s, **kw, parse_int=None)", "json._loads(s, **kw, parse_int=None)", "json._load(s, **kw, parse_int=None)", "json.load(s, **kw, parse_int=None)", "json.reload(s, **kw, parse_int=None)", "json._xml_loads(s, **kw, parse_int=None)", "json.loadtxt(s, **kw, parse_int=None)", "json.set_loader(s, **kw, parse_int=None)", "json._globals(s, **kw, parse_int=None)", "json.load_tests(s, **kw, parse_int=None)", "json.towards(s, **kw, parse_int=None)", "json.overload(s, **kw, parse_int=None)", "json.leapdays(s, **kw, parse_int=None)", "json._overload(s, **kw, parse_int=None)"], "json_decoder.decode(s)": ["decode"], "json_decoder.raw_decode(s)": ["raw_decode"], "json_encoder.colno": ["json_encoder.colno"], "json_encoder.default(o)": ["default"], "json_encoder.doc": ["json_encoder.doc"], "json_encoder.encode(o)": ["encode"], "json_encoder.iterencode(o)": ["iterencode"], "json_encoder.lineno": ["json_encoder.lineno"], "json_encoder.msg": ["json_encoder.msg"], "json_encoder.pos": ["json_encoder.pos"], "kevent.data": ["kevent.data"], "kevent.fflags": ["kevent.fflags"], "kevent.filter": ["kevent.filter"], "kevent.flags": ["kevent.flags"], "kevent.ident": ["kevent.ident"], "kevent.udata": ["kevent.udata"], "key in d": ["(key not in d)"], "key in proxy": ["(key not in proxy)"], "key not in d": ["(key in d)"], "keyword.iskeyword(s)": ["iskeyword"], "keyword.kwlist": ["keyword.kwlist"], "kqueue.control(changelist, max_events)": ["control"], "kqueue.control(changelist, max_events, timeout)": ["control"], "kqueue.fileno()": ["fileno"], "kqueue.fromfd(fd)": ["fromfd"], "lazy_loader.factory(loader)": ["factory"], "len(d)": ["len", "alen(d)", "le(d)", "__le__(d)", "len_q(d)", "len_b(d)", "fileno(d)", "lineno(d)", "legend(d)", "Client(d)", "listen(d)", "legint(d)", "pen(d)", "str_len(d)", "_cleanup(d)"], "len(dictview)": ["len", "alen(dictview)", "le(dictview)", "__le__(dictview)", "len_q(dictview)", "len_b(dictview)", "fileno(dictview)", "lineno(dictview)", "legend(dictview)", "Client(dictview)", "listen(dictview)", "legint(dictview)", "pen(dictview)", "str_len(dictview)", "_cleanup(dictview)"], "len(proxy)": ["len", "alen(proxy)", "le(proxy)", "__le__(proxy)", "len_q(proxy)", "len_b(proxy)", "fileno(proxy)", "lineno(proxy)", "legend(proxy)", "Client(proxy)", "listen(proxy)", "legint(proxy)", "pen(proxy)", "str_len(proxy)", "_cleanup(proxy)"], "len(s)": ["len", "alen(s)", "le(s)", "__le__(s)", "len_q(s)", "len_b(s)", "fileno(s)", "lineno(s)", "legend(s)", "Client(s)", "listen(s)", "legint(s)", "pen(s)", "str_len(s)", "_cleanup(s)"], "library_loader.LoadLibrary(name)": ["LoadLibrary"], "license": ["license"], "linecache.checkcache()": ["checkcache", "linecache._perfcheck()", "linecache.askokcancel()", "linecache.token_hex()", "linecache.set_trace()", "linecache.askyesnocancel()", "linecache.askretrycancel()", "linecache.getsitepackages()", "linecache.shape()", "linecache.shearfactor()", "linecache.tracer()", "linecache.get_locales()", "linecache.localcontext()", "linecache.ParserCreate()", "linecache.ensure_clean()"], "linecache.checkcache(filename=None)": ["checkcache", "linecache.checkcache(filename=None)", "linecache._perfcheck(filename=None)", "linecache.askokcancel(filename=None)", "linecache.token_hex(filename=None)", "linecache.set_trace(filename=None)", "linecache.askyesnocancel(filename=None)", "linecache.askretrycancel(filename=None)", "linecache.getsitepackages(filename=None)", "linecache.shape(filename=None)", "linecache.shearfactor(filename=None)", "linecache.tracer(filename=None)", "linecache.get_locales(filename=None)", "linecache.localcontext(filename=None)", "linecache.ParserCreate(filename=None)"], "linecache.clearcache()": ["clearcache", "linecache._clearcache()", "linecache.lazycache()", "linecache.clear_traces()", "linecache.checkcache()", "linecache.clearscreen()", "linecache.clear()", "linecache.clear_frames()", "linecache.search()", "linecache._coerce()", "linecache.clearstamp()", "linecache.closerange()", "linecache.arctanh()", "linecache.sched_getparam()", "linecache._check_trace()"], "linecache.getline(filename, lineno)": ["getline", "linecache.axline(filename, lineno)", "linecache.get_python_lib(filename, lineno)", "linecache.get_type_hints(filename, lineno)", "linecache.link(filename, lineno)", "linecache.testfile(filename, lineno)", "linecache.utime(filename, lineno)", "linecache.title(filename, lineno)", "linecache.table(filename, lineno)", "linecache._get_fill_value(filename, lineno)", "linecache.generate_range(filename, lineno)", "linecache.turtlesize(filename, lineno)", "linecache.read_table(filename, lineno)", "linecache.percentile(filename, lineno)", "linecache.get_schema(filename, lineno)"], "linecache.getline(filename, lineno, module_globals=None)": ["getline", "linecache.getline(filename, lineno, module_globals=None)", "linecache.axline(filename, lineno, module_globals=None)", "linecache.get_python_lib(filename, lineno, module_globals=None)", "linecache.get_type_hints(filename, lineno, module_globals=None)", "linecache.link(filename, lineno, module_globals=None)", "linecache.testfile(filename, lineno, module_globals=None)", "linecache.utime(filename, lineno, module_globals=None)", "linecache.title(filename, lineno, module_globals=None)", "linecache.table(filename, lineno, module_globals=None)", "linecache._get_fill_value(filename, lineno, module_globals=None)", "linecache.generate_range(filename, lineno, module_globals=None)", "linecache.turtlesize(filename, lineno, module_globals=None)", "linecache.read_table(filename, lineno, module_globals=None)", "linecache.percentile(filename, lineno, module_globals=None)"], "linecache.lazycache(filename, module_globals)": ["lazycache", "linecache.clearcache(filename, module_globals)", "linecache._clearcache(filename, module_globals)", "linecache.updatecache(filename, module_globals)", "linecache._tp_cache(filename, module_globals)", "linecache.place(filename, module_globals)", "linecache.lru_cache(filename, module_globals)", "linecache.poly2cheb(filename, module_globals)", "linecache.yscale(filename, module_globals)", "linecache._get_cached(filename, module_globals)", "linecache.check_call(filename, module_globals)", "linecache.locate(filename, module_globals)", "linecache.checkcache(filename, module_globals)", "linecache.access(filename, module_globals)", "linecache._any_dispatcher(filename, module_globals)"], "list()": ["list", "split()", "_isna()", "stack()", "write()", "input()", "logits_to_probs()", "probs_to_logits()", "locate()", "_splitnetloc()", "_iter_filter()", "getclasstree()", "tril_indices()", "triu_indices()", "_wsp_splitter()"], "list(d)": ["list", "split(d)", "_isna(d)", "stack(d)", "write(d)", "input(d)", "logits_to_probs(d)", "probs_to_logits(d)", "locate(d)", "_splitnetloc(d)", "_iter_filter(d)", "getclasstree(d)", "tril_indices(d)", "triu_indices(d)", "_wsp_splitter(d)"], "list(iterable)": ["list", "split(iterable)", "_isna(iterable)", "stack(iterable)", "write(iterable)", "input(iterable)", "logits_to_probs(iterable)", "probs_to_logits(iterable)", "locate(iterable)", "_splitnetloc(iterable)", "_iter_filter(iterable)", "getclasstree(iterable)", "tril_indices(iterable)", "triu_indices(iterable)", "_wsp_splitter(iterable)"], "list.sort()": ["sort"], "list.sort(key=None)": ["sort", "list.sort(key=None)"], "list.sort(key=None, reverse=False)": ["sort", "list.sort(key=None, reverse=True)"], "list.sort(reverse=False)": ["sort", "list.sort(reverse=True)"], "listener.close()": ["close"], "listener.last_accepted": ["listener.last_accepted"], "loader.create_module(spec)": ["create_module"], "loader.exec_module(module)": ["exec_module"], "loader.load_module(fullname)": ["load_module"], "loader.module_repr(module)": ["module_repr"], "locale.ALT_DIGITS": ["locale.ALT_DIGITS"], "locale.CHAR_MAX": ["locale.CHAR_MAX"], "locale.CODESET": ["locale.CODESET"], "locale.CRNCYSTR": ["locale.CRNCYSTR"], "locale.D_FMT": ["locale.D_FMT"], "locale.D_T_FMT": ["locale.D_T_FMT"], "locale.ERA": ["locale.ERA"], "locale.ERA_D_FMT": ["locale.ERA_D_FMT"], "locale.ERA_D_T_FMT": ["locale.ERA_D_T_FMT"], "locale.ERA_T_FMT": ["locale.ERA_T_FMT"], "locale.LC_ALL": ["locale.LC_ALL"], "locale.LC_COLLATE": ["locale.LC_COLLATE"], "locale.LC_CTYPE": ["locale.LC_CTYPE"], "locale.LC_MESSAGES": ["locale.LC_MESSAGES"], "locale.LC_MONETARY": ["locale.LC_MONETARY"], "locale.LC_NUMERIC": ["locale.LC_NUMERIC"], "locale.LC_TIME": ["locale.LC_TIME"], "locale.NOEXPR": ["locale.NOEXPR"], "locale.RADIXCHAR": ["locale.RADIXCHAR"], "locale.THOUSEP": ["locale.THOUSEP"], "locale.T_FMT": ["locale.T_FMT"], "locale.T_FMT_AMPM": ["locale.T_FMT_AMPM"], "locale.YESEXPR": ["locale.YESEXPR"], "locale.atof(string)": ["atof", "locale.loadtxt(string)", "locale.fromfile(string)", "locale._loadtxt_with_like(string)", "locale.masked_all(string)", "locale.genfromtxt(string)", "locale._genfromtxt_with_like(string)", "locale.atoi(string)", "locale.pathconf(string)", "locale.at(string)", "locale.fpathconf(string)", "locale.iat(string)", "locale.mat(string)", "locale.countOf(string)", "locale.matshow(string)"], "locale.currency(val)": ["currency", "locale.pack_sequence(val)", "locale._return_counts(val)", "locale.rundocs(val)", "locale._return_output(val)", "locale.rfftfreq(val)", "locale._return_inverse(val)", "locale.getouterframes(val)", "locale.signature(val)", "locale._describe_option(val)", "locale.infer_concrete_type_builder(val)", "locale.increment_lineno(val)", "locale.guess_type(val)", "locale.remove_tree(val)", "locale._arraymethod(val)"], "locale.currency(val, grouping=False)": ["currency", "locale.currency(val, grouping=True)", "locale.pack_sequence(val, grouping=False)", "locale._return_counts(val, grouping=False)", "locale.rundocs(val, grouping=False)", "locale._return_output(val, grouping=False)", "locale.rfftfreq(val, grouping=False)", "locale._return_inverse(val, grouping=False)", "locale.getouterframes(val, grouping=False)", "locale.signature(val, grouping=False)", "locale._describe_option(val, grouping=False)", "locale.infer_concrete_type_builder(val, grouping=False)", "locale.increment_lineno(val, grouping=False)", "locale.guess_type(val, grouping=False)", "locale.remove_tree(val, grouping=False)"], "locale.currency(val, grouping=False, international=False)": ["currency", "locale.currency(val, grouping=True, international=True)", "locale.pack_sequence(val, grouping=False, international=False)", "locale._return_counts(val, grouping=False, international=False)", "locale.rundocs(val, grouping=False, international=False)", "locale._return_output(val, grouping=False, international=False)", "locale.rfftfreq(val, grouping=False, international=False)", "locale._return_inverse(val, grouping=False, international=False)", "locale.getouterframes(val, grouping=False, international=False)", "locale.signature(val, grouping=False, international=False)", "locale._describe_option(val, grouping=False, international=False)", "locale.infer_concrete_type_builder(val, grouping=False, international=False)", "locale.increment_lineno(val, grouping=False, international=False)", "locale.guess_type(val, grouping=False, international=False)", "locale.remove_tree(val, grouping=False, international=False)"], "locale.currency(val, international=False)": ["currency", "locale.currency(val, international=True)", "locale.pack_sequence(val, international=False)", "locale._return_counts(val, international=False)", "locale.rundocs(val, international=False)", "locale._return_output(val, international=False)", "locale.rfftfreq(val, international=False)", "locale._return_inverse(val, international=False)", "locale.getouterframes(val, international=False)", "locale.signature(val, international=False)", "locale._describe_option(val, international=False)", "locale.infer_concrete_type_builder(val, international=False)", "locale.increment_lineno(val, international=False)", "locale.guess_type(val, international=False)", "locale.remove_tree(val, international=False)"], "locale.currency(val, symbol=True)": ["currency", "locale.currency(val, symbol=False)", "locale.pack_sequence(val, symbol=True)", "locale._return_counts(val, symbol=True)", "locale.rundocs(val, symbol=True)", "locale._return_output(val, symbol=True)", "locale.rfftfreq(val, symbol=True)", "locale._return_inverse(val, symbol=True)", "locale.getouterframes(val, symbol=True)", "locale.signature(val, symbol=True)", "locale._describe_option(val, symbol=True)", "locale.infer_concrete_type_builder(val, symbol=True)", "locale.increment_lineno(val, symbol=True)", "locale.guess_type(val, symbol=True)", "locale.remove_tree(val, symbol=True)"], "locale.currency(val, symbol=True, grouping=False)": ["currency", "locale.currency(val, symbol=False, grouping=True)", "locale.pack_sequence(val, symbol=True, grouping=False)", "locale._return_counts(val, symbol=True, grouping=False)", "locale.rundocs(val, symbol=True, grouping=False)", "locale._return_output(val, symbol=True, grouping=False)", "locale.rfftfreq(val, symbol=True, grouping=False)", "locale._return_inverse(val, symbol=True, grouping=False)", "locale.getouterframes(val, symbol=True, grouping=False)", "locale.signature(val, symbol=True, grouping=False)", "locale._describe_option(val, symbol=True, grouping=False)", "locale.infer_concrete_type_builder(val, symbol=True, grouping=False)", "locale.increment_lineno(val, symbol=True, grouping=False)", "locale.guess_type(val, symbol=True, grouping=False)", "locale.remove_tree(val, symbol=True, grouping=False)"], "locale.currency(val, symbol=True, grouping=False, international=False)": ["currency", "locale.currency(val, symbol=False, grouping=True, international=True)", "locale.pack_sequence(val, symbol=True, grouping=False, international=False)", "locale._return_counts(val, symbol=True, grouping=False, international=False)", "locale.rundocs(val, symbol=True, grouping=False, international=False)", "locale._return_output(val, symbol=True, grouping=False, international=False)", "locale.rfftfreq(val, symbol=True, grouping=False, international=False)", "locale._return_inverse(val, symbol=True, grouping=False, international=False)", "locale.getouterframes(val, symbol=True, grouping=False, international=False)", "locale.signature(val, symbol=True, grouping=False, international=False)", "locale._describe_option(val, symbol=True, grouping=False, international=False)", "locale.infer_concrete_type_builder(val, symbol=True, grouping=False, international=False)", "locale.increment_lineno(val, symbol=True, grouping=False, international=False)", "locale.guess_type(val, symbol=True, grouping=False, international=False)", "locale.remove_tree(val, symbol=True, grouping=False, international=False)"], "locale.currency(val, symbol=True, international=False)": ["currency", "locale.currency(val, symbol=False, international=True)", "locale.pack_sequence(val, symbol=True, international=False)", "locale._return_counts(val, symbol=True, international=False)", "locale.rundocs(val, symbol=True, international=False)", "locale._return_output(val, symbol=True, international=False)", "locale.rfftfreq(val, symbol=True, international=False)", "locale._return_inverse(val, symbol=True, international=False)", "locale.getouterframes(val, symbol=True, international=False)", "locale.signature(val, symbol=True, international=False)", "locale._describe_option(val, symbol=True, international=False)", "locale.infer_concrete_type_builder(val, symbol=True, international=False)", "locale.increment_lineno(val, symbol=True, international=False)", "locale.guess_type(val, symbol=True, international=False)", "locale.remove_tree(val, symbol=True, international=False)"], "locale.delocalize(string)": ["delocalize", "locale.localtime(string)", "locale.getlocale(string)", "locale.setlocale(string)", "locale.calcsize(string)", "locale._calcsize(string)", "locale.deserialize(string)", "locale.resetlocale(string)", "locale.get_locales(string)", "locale._normalize(string)", "locale.serialize(string)", "locale.normalize(string)", "locale.locate(string)", "locale.getdefaultlocale(string)", "locale._normalize_module(string)"], "locale.format(format, val)": ["format", "locale._format(format, val)", "locale.formatdate(format, val)", "locale.format_string(format, val)", "locale.match(format, val)", "locale._normalize(format, val)", "locale.fullmatch(format, val)", "locale.create(format, val)", "locale.unpack_from(format, val)", "locale.compile_path(format, val)", "locale.concat_compat(format, val)", "locale.bootstrap(format, val)", "locale.load(format, val)", "locale._bootstrap(format, val)", "locale.replicate(format, val)"], "locale.format(format, val, grouping=False)": ["format", "locale.format(format, val, grouping=True)", "locale._format(format, val, grouping=False)", "locale.formatdate(format, val, grouping=False)", "locale.format_string(format, val, grouping=False)", "locale.match(format, val, grouping=False)", "locale._normalize(format, val, grouping=False)", "locale.fullmatch(format, val, grouping=False)", "locale.create(format, val, grouping=False)", "locale.unpack_from(format, val, grouping=False)", "locale.compile_path(format, val, grouping=False)", "locale.concat_compat(format, val, grouping=False)", "locale.bootstrap(format, val, grouping=False)", "locale.load(format, val, grouping=False)", "locale._bootstrap(format, val, grouping=False)"], "locale.format(format, val, grouping=False, monetary=False)": ["format", "locale.format(format, val, grouping=True, monetary=True)", "locale._format(format, val, grouping=False, monetary=False)", "locale.formatdate(format, val, grouping=False, monetary=False)", "locale.format_string(format, val, grouping=False, monetary=False)", "locale.match(format, val, grouping=False, monetary=False)", "locale._normalize(format, val, grouping=False, monetary=False)", "locale.fullmatch(format, val, grouping=False, monetary=False)", "locale.create(format, val, grouping=False, monetary=False)", "locale.unpack_from(format, val, grouping=False, monetary=False)", "locale.compile_path(format, val, grouping=False, monetary=False)", "locale.concat_compat(format, val, grouping=False, monetary=False)", "locale.bootstrap(format, val, grouping=False, monetary=False)", "locale.load(format, val, grouping=False, monetary=False)", "locale._bootstrap(format, val, grouping=False, monetary=False)"], "locale.format(format, val, monetary=False)": ["format", "locale.format(format, val, monetary=True)", "locale._format(format, val, monetary=False)", "locale.formatdate(format, val, monetary=False)", "locale.format_string(format, val, monetary=False)", "locale.match(format, val, monetary=False)", "locale._normalize(format, val, monetary=False)", "locale.fullmatch(format, val, monetary=False)", "locale.create(format, val, monetary=False)", "locale.unpack_from(format, val, monetary=False)", "locale.compile_path(format, val, monetary=False)", "locale.concat_compat(format, val, monetary=False)", "locale.bootstrap(format, val, monetary=False)", "locale.load(format, val, monetary=False)", "locale._bootstrap(format, val, monetary=False)"], "locale.format_string(format, val)": ["format_string", "locale.format(format, val)", "locale._format(format, val)", "locale.formatdate(format, val)", "locale.encodestring(format, val)", "locale._encodestring(format, val)", "locale.str_extractall(format, val)", "locale.matrix_rank(format, val)", "locale._return_output(format, val)", "locale.concat_compat(format, val)", "locale._convert_other(format, val)", "locale.register_cmap(format, val)", "locale._return_counts(format, val)", "locale._normalize(format, val)", "locale.bootstrap(format, val)"], "locale.format_string(format, val, grouping=False)": ["format_string", "locale.format_string(format, val, grouping=True)", "locale.format(format, val, grouping=False)", "locale._format(format, val, grouping=False)", "locale.formatdate(format, val, grouping=False)", "locale.encodestring(format, val, grouping=False)", "locale._encodestring(format, val, grouping=False)", "locale.str_extractall(format, val, grouping=False)", "locale.matrix_rank(format, val, grouping=False)", "locale._return_output(format, val, grouping=False)", "locale.concat_compat(format, val, grouping=False)", "locale._convert_other(format, val, grouping=False)", "locale.register_cmap(format, val, grouping=False)", "locale._return_counts(format, val, grouping=False)", "locale._normalize(format, val, grouping=False)"], "locale.format_string(format, val, grouping=False, monetary=False)": ["format_string", "locale.format_string(format, val, grouping=True, monetary=True)", "locale.format(format, val, grouping=False, monetary=False)", "locale._format(format, val, grouping=False, monetary=False)", "locale.formatdate(format, val, grouping=False, monetary=False)", "locale.encodestring(format, val, grouping=False, monetary=False)", "locale._encodestring(format, val, grouping=False, monetary=False)", "locale.str_extractall(format, val, grouping=False, monetary=False)", "locale.matrix_rank(format, val, grouping=False, monetary=False)", "locale._return_output(format, val, grouping=False, monetary=False)", "locale.concat_compat(format, val, grouping=False, monetary=False)", "locale._convert_other(format, val, grouping=False, monetary=False)", "locale.register_cmap(format, val, grouping=False, monetary=False)", "locale._return_counts(format, val, grouping=False, monetary=False)", "locale._normalize(format, val, grouping=False, monetary=False)"], "locale.format_string(format, val, monetary=False)": ["format_string", "locale.format_string(format, val, monetary=True)", "locale.format(format, val, monetary=False)", "locale._format(format, val, monetary=False)", "locale.formatdate(format, val, monetary=False)", "locale.encodestring(format, val, monetary=False)", "locale._encodestring(format, val, monetary=False)", "locale.str_extractall(format, val, monetary=False)", "locale.matrix_rank(format, val, monetary=False)", "locale._return_output(format, val, monetary=False)", "locale.concat_compat(format, val, monetary=False)", "locale._convert_other(format, val, monetary=False)", "locale.register_cmap(format, val, monetary=False)", "locale._return_counts(format, val, monetary=False)", "locale._normalize(format, val, monetary=False)"], "locale.getdefaultlocale()": ["getdefaultlocale", "locale.getlocale()", "locale._default_locale_getter()", "locale.resetlocale()", "locale.get_locales()", "locale.getgeneratorlocals()", "locale.default_fill_value()", "locale.autoscale()", "locale.setlocale()", "locale.delocalize()", "locale.getdata()", "locale.getfullargspec()", "locale.default_restore_location()", "locale._check_for_default_values()", "locale._getfullargs()"], "locale.getdefaultlocale(envvars)": ["getdefaultlocale", "locale.getlocale(envvars)", "locale._default_locale_getter(envvars)", "locale.resetlocale(envvars)", "locale.get_locales(envvars)", "locale.getgeneratorlocals(envvars)", "locale.default_fill_value(envvars)", "locale.autoscale(envvars)", "locale.setlocale(envvars)", "locale.delocalize(envvars)", "locale.getdata(envvars)", "locale.getfullargspec(envvars)", "locale.default_restore_location(envvars)", "locale._check_for_default_values(envvars)", "locale._getfullargs(envvars)"], "locale.getlocale()": ["getlocale", "locale.get_python_lib()", "locale.ignore()", "locale.createResolutionCallbackFromFrame()", "locale.axhline()", "locale.axvline()", "locale.get_python_inc()", "locale._uninstall_helper()", "locale._get_sysconfigdata_name()", "locale.poll()", "locale._exit()", "locale.poll3()", "locale.poll2()", "locale.browse()", "locale.platform()"], "locale.getlocale(category=LC_CTYPE)": ["getlocale", "locale.get_python_lib(category=LC_CTYPE)", "locale.ignore(category=LC_CTYPE)", "locale.createResolutionCallbackFromFrame(category=LC_CTYPE)", "locale.axhline(category=LC_CTYPE)", "locale.axvline(category=LC_CTYPE)", "locale.get_python_inc(category=LC_CTYPE)", "locale._uninstall_helper(category=LC_CTYPE)", "locale._get_sysconfigdata_name(category=LC_CTYPE)", "locale.poll(category=LC_CTYPE)", "locale._exit(category=LC_CTYPE)", "locale.poll3(category=LC_CTYPE)", "locale.poll2(category=LC_CTYPE)", "locale.browse(category=LC_CTYPE)", "locale.platform(category=LC_CTYPE)"], "locale.getpreferredencoding()": ["getpreferredencoding", "locale._create_interpreter_name_lookup_fn()", "locale.deprecated()", "locale.validate_ascending()", "locale.shutdown()", "locale.set_use_numexpr()", "locale.trace()", "locale.ginput()", "locale.setastest()", "locale.compile_path()", "locale.Pipe()", "locale.xkcd()", "locale.stack()", "locale.start()", "locale.enable()"], "locale.getpreferredencoding(do_setlocale=True)": ["getpreferredencoding", "locale.getpreferredencoding(do_setlocale=False)", "locale._create_interpreter_name_lookup_fn(do_setlocale=True)", "locale.deprecated(do_setlocale=True)", "locale.validate_ascending(do_setlocale=True)", "locale.shutdown(do_setlocale=True)", "locale.set_use_numexpr(do_setlocale=True)", "locale.trace(do_setlocale=True)", "locale.ginput(do_setlocale=True)", "locale.setastest(do_setlocale=True)", "locale.compile_path(do_setlocale=True)", "locale.Pipe(do_setlocale=True)", "locale.xkcd(do_setlocale=True)", "locale.stack(do_setlocale=True)", "locale.start(do_setlocale=True)"], "locale.nl_langinfo(option)": ["nl_langinfo"], "locale.normalize(localename)": ["normalize", "locale.normal_(localename)", "locale.uniform_(localename)", "locale.multi_margin_loss(localename)", "locale.trunc_normal_(localename)", "locale.apply_permutation(localename)", "locale.poisson_nll_loss(localename)", "locale.xavier_normal_(localename)", "locale._normalize_module(localename)", "locale.hinge_embedding_loss(localename)", "locale.batch_norm(localename)", "locale.linear(localename)", "locale.grid_sample(localename)", "locale.instance_norm(localename)", "locale.xavier_uniform_(localename)"], "locale.resetlocale()": ["resetlocale", "locale.setlocale()", "locale.getlocale()", "locale.get_locales()", "locale.resolve()", "locale.delocalize()", "locale.getdefaultlocale()", "locale.restore()", "locale.resetscreen()", "locale._releaseLock()", "locale.reset()", "locale.settiltangle()", "locale.localtime()", "locale.replicate()", "locale.autoscale()"], "locale.resetlocale(category=LC_ALL)": ["resetlocale", "locale.setlocale(category=LC_ALL)", "locale.getlocale(category=LC_ALL)", "locale.get_locales(category=LC_ALL)", "locale.resolve(category=LC_ALL)", "locale.delocalize(category=LC_ALL)", "locale.getdefaultlocale(category=LC_ALL)", "locale.restore(category=LC_ALL)", "locale.resetscreen(category=LC_ALL)", "locale._releaseLock(category=LC_ALL)", "locale.reset(category=LC_ALL)", "locale.settiltangle(category=LC_ALL)", "locale.localtime(category=LC_ALL)", "locale.replicate(category=LC_ALL)", "locale.autoscale(category=LC_ALL)"], "locale.setlocale(category)": ["setlocale", "locale.table(category)", "locale.getmodule(category)", "locale.setpos(category)", "locale.getabsfile(category)", "locale.seterr(category)", "locale.escape(category)", "locale.enable(category)", "locale.askyesnocancel(category)", "locale.askretrycancel(category)", "locale.install(category)", "locale.scatter(category)", "locale.Tcl(category)", "locale.askokcancel(category)", "locale.ParserCreate(category)"], "locale.str(float)": ["str", "locale.__str__(float)", "locale._str(float)", "locale.st(float)", "locale.strip(float)", "locale.asstr(float)", "locale.start(float)", "locale.lstrip(float)", "locale.strong(float)", "locale._std(float)", "locale.std(float)", "locale.seterr(float)", "locale.rstrip(float)", "locale.stream(float)", "locale.setraw(float)"], "locale.strcoll(string1, string2)": ["strcoll"], "locale.strxfrm(string)": ["strxfrm"], "locals()": ["locals", "localhost()", "_globals()", "set_locale()", "loads()", "_loads()", "get_locales()", "localtime()", "locate()", "loc()", "getlocale()", "setlocale()", "_valid_locales()", "_load_local()", "delocalize()"], "lock.acquire()": ["acquire"], "lock.acquire(block=True)": ["acquire", "lock.acquire(block=False)"], "lock.acquire(blocking=True)": ["acquire", "lock.acquire(blocking=False)"], "lock.acquire(blocking=True, timeout=-1)": ["acquire", "lock.acquire(blocking=False, timeout=(- 1))", "lock.acquire(blocking=True, timeout=(- '1'))"], "lock.acquire(timeout=-1)": ["acquire", "lock.acquire(timeout=(- '1'))"], "lock.acquire(timeout=None)": ["acquire", "lock.acquire(timeout=None)"], "lock.acquire(waitflag=1, timeout=-1)": ["acquire", "lock.acquire(waitflag='1', timeout=(- '1'))"], "lock.locked()": ["locked"], "log_record.getMessage()": ["getMessage"], "logger_adapter.process(msg, kwargs)": ["process"], "logging.FileHandler(filename)": ["FileHandler"], "logging.FileHandler(filename, mode='a')": ["FileHandler", "logging.FileHandler(filename, mode=1.0)"], "logging.FileHandler(filename, mode='a', delay=False)": ["FileHandler", "logging.FileHandler(filename, mode='a', delay=True)", "logging.FileHandler(filename, mode=1.0, delay=False)"], "logging.FileHandler(filename, mode='a', encoding=None)": ["FileHandler", "logging.FileHandler(filename, mode='a', encoding=None)", "logging.FileHandler(filename, mode=1, encoding=None)"], "logging.Filter(name='')": ["Filter", "logging.Filter(name=0.0)"], "logging.Formatter(datefmt=None, style='%')": ["Formatter", "logging.Formatter(datefmt=None, style='%')", "logging.Formatter(datefmt=None, style=1.0)"], "logging.Formatter(fmt=None)": ["Formatter", "logging.Formatter(fmt=None)"], "logging.Formatter(fmt=None, datefmt=None)": ["Formatter", "logging.Formatter(fmt=None, datefmt=None)"], "logging.Formatter(fmt=None, datefmt=None, style='%')": ["Formatter", "logging.Formatter(fmt=None, datefmt=None, style='%')", "logging.Formatter(fmt=None, datefmt=None, style=1)"], "logging.Formatter(fmt=None, style='%')": ["Formatter", "logging.Formatter(fmt=None, style='%')", "logging.Formatter(fmt=None, style=1)"], "logging.Formatter(style='%')": ["Formatter", "logging.Formatter(style=1)"], "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info)": ["LogRecord"], "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None)": ["LogRecord", "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None)"], "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None)": ["LogRecord", "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None)"], "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, sinfo=None)": ["LogRecord", "logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, sinfo=None)"], "logging.LoggerAdapter(logger, extra)": ["LoggerAdapter"], "logging.StreamHandler(stream=None)": ["StreamHandler", "logging.StreamHandler(stream=None)"], "logging.addLevelName(level, levelName)": ["addLevelName", "logging.getLevelName(level, levelName)", "logging.kleene_and(level, levelName)", "logging.get_name_addr(level, levelName)", "logging.delegate_names(level, levelName)", "logging.adadelta(level, levelName)", "logging._basename(level, levelName)", "logging.basename(level, levelName)", "logging.filename(level, levelName)", "logging._get_candidate_names(level, levelName)", "logging.rename(level, levelName)", "logging._is_legal_header_name(level, levelName)", "logging.getmodulename(level, levelName)", "logging.get_callable_name(level, levelName)", "logging._declname_match(level, levelName)"], "logging.basicConfig(**kwargs)": ["basicConfig", "logging.readconfig(**kwargs)", "logging.sysconf(**kwargs)", "logging.show_config(**kwargs)", "logging.config_dict(**kwargs)", "logging.pathconf(**kwargs)", "logging.script_qconfig_dict(**kwargs)", "logging.softsign(**kwargs)", "logging._ifconfig_getnode(**kwargs)", "logging._field_assign(**kwargs)", "logging._ipconfig_getnode(**kwargs)", "logging._block_slicing(**kwargs)", "logging.ascontiguousarray(**kwargs)", "logging.string_at(**kwargs)", "logging.basis(**kwargs)"], "logging.captureWarnings(capture)": ["captureWarnings", "logging.resetwarnings(capture)", "logging.filterwarnings(capture)", "logging.warning(capture)", "logging.formatwarning(capture)", "logging.sub_warning(capture)", "logging.assert_no_warnings(capture)", "logging.assert_produces_warning(capture)", "logging.parseargs(capture)", "logging.wstring_at(capture)", "logging.get_remaining_size(capture)", "logging.english_capitalize(capture)", "logging._formatwarning_orig(capture)", "logging.read_stringnl_noescape(capture)", "logging._read_string(capture)"], "logging.config.fileConfig(fname)": ["fileConfig"], "logging.config.fileConfig(fname, defaults=None)": ["fileConfig", "logging.config.fileConfig(fname, defaults=None)"], "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)": ["fileConfig", "logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=False)"], "logging.config.fileConfig(fname, disable_existing_loggers=True)": ["fileConfig", "logging.config.fileConfig(fname, disable_existing_loggers=False)"], "logging.config.listen()": ["listen"], "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT)": ["listen"], "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)": ["listen", "logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)"], "logging.config.listen(verify=None)": ["listen", "logging.config.listen(verify=None)"], "logging.config.stopListening()": ["stopListening"], "logging.critical(msg, *args, **kwargs)": ["critical", "logging.script(msg, *args, **kwargs)", "logging.circle(msg, *args, **kwargs)", "logging._script(msg, *args, **kwargs)", "logging.ISTERMINAL(msg, *args, **kwargs)", "logging.capitalize(msg, *args, **kwargs)", "logging.Tcl(msg, *args, **kwargs)", "logging.getcoroutinelocals(msg, *args, **kwargs)", "logging.install(msg, *args, **kwargs)", "logging.in_table_c8(msg, *args, **kwargs)", "logging.in_table_c6(msg, *args, **kwargs)", "logging.is_optional(msg, *args, **kwargs)", "logging.in_table_c3(msg, *args, **kwargs)", "logging.Catalog(msg, *args, **kwargs)", "logging._install(msg, *args, **kwargs)"], "logging.debug(msg, *args, **kwargs)": ["debug", "logging.debug_src(msg, *args, **kwargs)", "logging.sub_debug(msg, *args, **kwargs)", "logging.debug_script(msg, *args, **kwargs)", "logging._is_debug_mode(msg, *args, **kwargs)", "logging._get_debug_info(msg, *args, **kwargs)", "logging.neg(msg, *args, **kwargs)", "logging.chebsub(msg, *args, **kwargs)", "logging.__neg__(msg, *args, **kwargs)", "logging.degrees(msg, *args, **kwargs)", "logging.det(msg, *args, **kwargs)", "logging.eig(msg, *args, **kwargs)", "logging.dup(msg, *args, **kwargs)", "logging.chebmul(msg, *args, **kwargs)", "logging._get_defaults(msg, *args, **kwargs)"], "logging.disable()": ["disable", "logging.disassemble()", "logging.isreadable()", "logging.symtable()", "logging.distance()", "logging.in_table_d2()", "logging.iterable()", "logging.in_table_d1()", "logging.distb()", "logging.variable()", "logging.table()", "logging.isabs()", "logging.isawaitable()", "logging._disassemble_str()", "logging.table_exists()"], "logging.disable(level=CRITICAL)": ["disable", "logging.disassemble(level=CRITICAL)", "logging.isreadable(level=CRITICAL)", "logging.symtable(level=CRITICAL)", "logging.distance(level=CRITICAL)", "logging.in_table_d2(level=CRITICAL)", "logging.iterable(level=CRITICAL)", "logging.in_table_d1(level=CRITICAL)", "logging.distb(level=CRITICAL)", "logging.variable(level=CRITICAL)", "logging.table(level=CRITICAL)", "logging.isabs(level=CRITICAL)", "logging.isawaitable(level=CRITICAL)", "logging._disassemble_str(level=CRITICAL)", "logging.table_exists(level=CRITICAL)"], "logging.getLevelName(level)": ["getLevelName", "logging.addLevelName(level)", "logging._getname(level)", "logging.getmodulename(level)", "logging._get_name(level)", "logging._name_get(level)", "logging._get_names(level)", "logging.getTestCaseNames(level)", "logging.getline(level)", "logging.delegate_names(level)", "logging._get_next_label(level)", "logging.get_long_le(level)", "logging._getnamelist(level)", "logging.getgrnam(level)", "logging.getpwnam(level)"], "logging.getLogger(name=None)": ["getLogger", "logging.getLogger(name=None)", "logging.getnode(name=None)", "logging.get_locales(name=None)", "logging.seterr(name=None)", "logging.get_worker_info(name=None)", "logging.get(name=None)", "logging.get_rank(name=None)", "logging.getPeriodData(name=None)", "logging.log_to_stderr(name=None)", "logging.token_hex(name=None)", "logging.tiltangle(name=None)", "logging.close(name=None)", "logging.generate_range(name=None)", "logging.table(name=None)"], "logging.handlers.BaseRotatingHandler(filename, mode)": ["BaseRotatingHandler"], "logging.handlers.BaseRotatingHandler(filename, mode, delay=False)": ["BaseRotatingHandler", "logging.handlers.BaseRotatingHandler(filename, mode, delay=True)"], "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)": ["BaseRotatingHandler", "logging.handlers.BaseRotatingHandler(filename, mode, encoding=None)"], "logging.handlers.BufferingHandler(capacity)": ["BufferingHandler"], "logging.handlers.DatagramHandler(host, port)": ["DatagramHandler"], "logging.handlers.HTTPHandler(host, url)": ["HTTPHandler"], "logging.handlers.HTTPHandler(host, url, context=None)": ["HTTPHandler", "logging.handlers.HTTPHandler(host, url, context=None)"], "logging.handlers.HTTPHandler(host, url, credentials=None)": ["HTTPHandler", "logging.handlers.HTTPHandler(host, url, credentials=None)"], "logging.handlers.HTTPHandler(host, url, method='GET')": ["HTTPHandler", "logging.handlers.HTTPHandler(host, url, method=3)"], "logging.handlers.HTTPHandler(host, url, method='GET', context=None)": ["HTTPHandler", "logging.handlers.HTTPHandler(host, url, method='GET', context=None)", "logging.handlers.HTTPHandler(host, url, method=3, context=None)"], "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)": ["HTTPHandler", "logging.handlers.HTTPHandler(host, url, method='GET', credentials=None)", "logging.handlers.HTTPHandler(host, url, method=3, credentials=None)"], "logging.handlers.HTTPHandler(host, url, method='GET', secure=False)": ["HTTPHandler", "logging.handlers.HTTPHandler(host, url, method='GET', secure=True)", "logging.handlers.HTTPHandler(host, url, method=3.0, secure=False)"], "logging.handlers.HTTPHandler(host, url, secure=False, context=None)": ["HTTPHandler", "logging.handlers.HTTPHandler(host, url, secure=True, context=None)"], "logging.handlers.HTTPHandler(host, url, secure=False, credentials=None)": ["HTTPHandler", "logging.handlers.HTTPHandler(host, url, secure=True, credentials=None)"], "logging.handlers.MemoryHandler(capacity)": ["MemoryHandler"], "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR)": ["MemoryHandler"], "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=True)": ["MemoryHandler", "logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, flushOnClose=False)"], "logging.handlers.MemoryHandler(capacity, target=None)": ["MemoryHandler", "logging.handlers.MemoryHandler(capacity, target=None)"], "logging.handlers.NTEventLogHandler(appname)": ["NTEventLogHandler"], "logging.handlers.NTEventLogHandler(appname, dllname=None)": ["NTEventLogHandler", "logging.handlers.NTEventLogHandler(appname, dllname=None)"], "logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')": ["NTEventLogHandler", "logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')", "logging.handlers.NTEventLogHandler(appname, dllname=None, logtype=11.0)"], "logging.handlers.NTEventLogHandler(appname, logtype='Application')": ["NTEventLogHandler", "logging.handlers.NTEventLogHandler(appname, logtype=11)"], "logging.handlers.QueueHandler(queue)": ["QueueHandler"], "logging.handlers.QueueListener(queue, *handlers)": ["QueueListener"], "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=False)": ["QueueListener", "logging.handlers.QueueListener(queue, *handlers, respect_handler_level=True)"], "logging.handlers.RotatingFileHandler(filename)": ["RotatingFileHandler"], "logging.handlers.RotatingFileHandler(filename, backupCount=0)": ["RotatingFileHandler", "logging.handlers.RotatingFileHandler(filename, backupCount='0')"], "logging.handlers.RotatingFileHandler(filename, delay=False)": ["RotatingFileHandler", "logging.handlers.RotatingFileHandler(filename, delay=True)"], "logging.handlers.RotatingFileHandler(filename, encoding=None)": ["RotatingFileHandler", "logging.handlers.RotatingFileHandler(filename, encoding=None)"], "logging.handlers.RotatingFileHandler(filename, maxBytes=0)": ["RotatingFileHandler", "logging.handlers.RotatingFileHandler(filename, maxBytes='0')"], "logging.handlers.RotatingFileHandler(filename, mode='a')": ["RotatingFileHandler", "logging.handlers.RotatingFileHandler(filename, mode=1.0)"], "logging.handlers.RotatingFileHandler(filename, mode='a', backupCount=0)": ["RotatingFileHandler", "logging.handlers.RotatingFileHandler(filename, mode=1.0, backupCount='0')"], "logging.handlers.RotatingFileHandler(filename, mode='a', delay=False)": ["RotatingFileHandler", "logging.handlers.RotatingFileHandler(filename, mode='a', delay=True)", "logging.handlers.RotatingFileHandler(filename, mode=1.0, delay=False)"], "logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0)": ["RotatingFileHandler", "logging.handlers.RotatingFileHandler(filename, mode=1, maxBytes='0')"], "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject)": ["SMTPHandler"], "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None)": ["SMTPHandler", "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None)"], "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)": ["SMTPHandler", "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)"], "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, secure=None)": ["SMTPHandler", "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, secure=None)"], "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, timeout=1.0)": ["SMTPHandler", "logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, timeout='1.0')"], "logging.handlers.SocketHandler(host, port)": ["SocketHandler"], "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT))": [], "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost')": [], "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', facility=LOG_USER)": [], "logging.handlers.SysLogHandler(SYSLOG_UDP_PORT), address=('localhost', socktype=socket.SOCK_DGRAM)": [], "logging.handlers.TimedRotatingFileHandler(filename)": ["TimedRotatingFileHandler"], "logging.handlers.TimedRotatingFileHandler(filename, backupCount=0)": ["TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler(filename, backupCount='0')"], "logging.handlers.TimedRotatingFileHandler(filename, delay=False)": ["TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler(filename, delay=True)"], "logging.handlers.TimedRotatingFileHandler(filename, interval=1)": ["TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler(filename, interval='1')"], "logging.handlers.TimedRotatingFileHandler(filename, utc=False)": ["TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler(filename, utc=True)"], "logging.handlers.TimedRotatingFileHandler(filename, when='h')": ["TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler(filename, when=1)"], "logging.handlers.TimedRotatingFileHandler(filename, when='h', backupCount=0)": ["TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler(filename, when=1.0, backupCount='0')"], "logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1)": ["TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler(filename, when=1.0, interval='1')"], "logging.handlers.WatchedFileHandler(filename, mode='a')": ["WatchedFileHandler", "logging.handlers.WatchedFileHandler(filename, mode=1.0)"], "logging.handlers.WatchedFileHandler(filename, mode='a', delay=False)": ["WatchedFileHandler", "logging.handlers.WatchedFileHandler(filename, mode='a', delay=True)", "logging.handlers.WatchedFileHandler(filename, mode=1.0, delay=False)"], "logging.info(msg, *args, **kwargs)": ["info", "logging.init(msg, *args, **kwargs)", "logging.main(msg, *args, **kwargs)", "logging._main(msg, *args, **kwargs)", "logging.twinx(msg, *args, **kwargs)", "logging.twiny(msg, *args, **kwargs)", "logging.get_worker_info(msg, *args, **kwargs)", "logging.getnode(msg, *args, **kwargs)", "logging.tiltangle(msg, *args, **kwargs)", "logging.who(msg, *args, **kwargs)", "logging.textdomain(msg, *args, **kwargs)", "logging.resizemode(msg, *args, **kwargs)", "logging.box(msg, *args, **kwargs)", "logging.shearfactor(msg, *args, **kwargs)", "logging._sys_version(msg, *args, **kwargs)"], "logging.lastResort": ["logging.lastResort"], "logging.log(level, msg, *args, **kwargs)": ["log", "logging.logn(level, msg, *args, **kwargs)", "logging._ilog(level, msg, *args, **kwargs)", "logging._dlog(level, msg, *args, **kwargs)", "logging.log2(level, msg, *args, **kwargs)", "logging.nolog(level, msg, *args, **kwargs)", "logging.log10(level, msg, *args, **kwargs)", "logging.dolog(level, msg, *args, **kwargs)", "logging.loglog(level, msg, *args, **kwargs)", "logging._dlog10(level, msg, *args, **kwargs)", "logging._w_long(level, msg, *args, **kwargs)", "logging.loc(level, msg, *args, **kwargs)", "logging._r_long(level, msg, *args, **kwargs)", "logging.Catalog(level, msg, *args, **kwargs)", "logging._x_log_x(level, msg, *args, **kwargs)"], "logging.setLogRecordFactory(factory)": ["setLogRecordFactory", "logging.getLogRecordFactory(factory)", "logging.makeLogRecord(factory)", "logging.shearfactor(factory)", "logging.setworldcoordinates(factory)", "logging.nested_to_record(factory)", "logging._reconstructor(factory)", "logging._vector_str(factory)", "logging.__generator_ctor(factory)", "logging.setLoggerClass(factory)", "logging.ismethoddescriptor(factory)", "logging.isgenerator(factory)", "logging.setpriority(factory)", "logging._getcategory(factory)", "logging.strerror(factory)"], "logging.setLoggerClass(klass)": ["setLoggerClass", "logging.getLoggerClass(klass)", "logging.strclass(klass)", "logging.getLogger(klass)", "logging.get_logger(klass)", "logging.setlocale(klass)", "logging._get_overloads(klass)", "logging.seterrcall(klass)", "logging.isclass(klass)", "logging.resetlocale(klass)", "logging.get_locales(klass)", "logging.setLogRecordFactory(klass)", "logging.leggauss(klass)", "logging.laggauss(klass)", "logging.getclasstree(klass)"], "logging.shutdown()": ["shutdown", "logging.subplots()", "logging.autoscale()", "logging.stack()", "logging.start()", "logging.ginput()", "logging.getpreferredencoding()", "logging.setastest()", "logging.validate_ascending()", "logging.deprecated()", "logging.xkcd()", "logging.set_use_numexpr()", "logging._create_interpreter_name_lookup_fn()", "logging.trace()", "logging.enable()"], "logging.warning(msg, *args, **kwargs)": ["warning", "logging.sub_warning(msg, *args, **kwargs)", "logging.showwarning(msg, *args, **kwargs)", "logging._showwarning(msg, *args, **kwargs)", "logging.warn(msg, *args, **kwargs)", "logging._warn(msg, *args, **kwargs)", "logging.hanning(msg, *args, **kwargs)", "logging.resetwarnings(msg, *args, **kwargs)", "logging.formatwarning(msg, *args, **kwargs)", "logging.filterwarnings(msg, *args, **kwargs)", "logging.captureWarnings(msg, *args, **kwargs)", "logging.spring(msg, *args, **kwargs)", "logging.argmin(msg, *args, **kwargs)", "logging.arcsin(msg, *args, **kwargs)", "logging.runstring(msg, *args, **kwargs)"], "loop.add_writer(fd, callback, *args)": ["add_writer"], "loop.call_at(when, callback, *args)": ["call_at"], "loop.call_at(when, callback, *args, context=None)": ["call_at", "loop.call_at(when, callback, *args, context=None)"], "loop.call_exception_handler(context)": ["call_exception_handler"], "loop.call_later(delay, callback, *args)": ["call_later"], "loop.call_soon(callback, *args)": ["call_soon"], "loop.call_soon(callback, *args, context=None)": ["call_soon", "loop.call_soon(callback, *args, context=None)"], "loop.call_soon_threadsafe(callback, *args)": ["call_soon_threadsafe"], "loop.call_soon_threadsafe(callback, *args, context=None)": ["call_soon_threadsafe", "loop.call_soon_threadsafe(callback, *args, context=None)"], "loop.close()": ["close"], "loop.connect_read_pipe(protocol_factory, pipe)": ["connect_read_pipe"], "loop.connect_write_pipe(protocol_factory, pipe)": ["connect_write_pipe"], "loop.create_connection(protocol_factory)": ["create_connection"], "loop.create_connection(protocol_factory, family=0)": ["create_connection", "loop.create_connection(protocol_factory, family='0')"], "loop.create_connection(protocol_factory, flags=0)": ["create_connection", "loop.create_connection(protocol_factory, flags='0')"], "loop.create_connection(protocol_factory, host=None)": ["create_connection", "loop.create_connection(protocol_factory, host=None)"], "loop.create_connection(protocol_factory, port=None)": ["create_connection", "loop.create_connection(protocol_factory, port=None)"], "loop.create_connection(protocol_factory, ssl=None)": ["create_connection", "loop.create_connection(protocol_factory, ssl=None)"], "loop.create_datagram_endpoint(protocol_factory, family=0)": ["create_datagram_endpoint", "loop.create_datagram_endpoint(protocol_factory, family='0')"], "loop.create_future()": ["create_future"], "loop.create_server(protocol_factory)": ["create_server"], "loop.create_server(protocol_factory, backlog=100)": ["create_server", "loop.create_server(protocol_factory, backlog='100')"], "loop.create_server(protocol_factory, flags=socket.AI_PASSIVE)": ["create_server"], "loop.create_server(protocol_factory, host=None)": ["create_server", "loop.create_server(protocol_factory, host=None)"], "loop.create_server(protocol_factory, ssl=None)": ["create_server", "loop.create_server(protocol_factory, ssl=None)"], "loop.create_task(coro)": ["create_task"], "loop.create_unix_connection(protocol_factory)": ["create_unix_connection"], "loop.create_unix_connection(protocol_factory, path=None)": ["create_unix_connection", "loop.create_unix_connection(protocol_factory, path=None)"], "loop.create_unix_connection(protocol_factory, path=None, sock=None)": ["create_unix_connection", "loop.create_unix_connection(protocol_factory, path=None, sock=None)"], "loop.create_unix_connection(protocol_factory, sock=None)": ["create_unix_connection", "loop.create_unix_connection(protocol_factory, sock=None)"], "loop.create_unix_connection(protocol_factory, ssl=None)": ["create_unix_connection", "loop.create_unix_connection(protocol_factory, ssl=None)"], "loop.create_unix_server(protocol_factory)": ["create_unix_server"], "loop.create_unix_server(protocol_factory, backlog=100)": ["create_unix_server", "loop.create_unix_server(protocol_factory, backlog='100')"], "loop.create_unix_server(protocol_factory, path=None, backlog=100)": ["create_unix_server", "loop.create_unix_server(protocol_factory, path=None, backlog=100)", "loop.create_unix_server(protocol_factory, path=None, backlog='100')"], "loop.create_unix_server(protocol_factory, ssl=None)": ["create_unix_server", "loop.create_unix_server(protocol_factory, ssl=None)"], "loop.create_unix_server(protocol_factory, ssl_handshake_timeout=None)": ["create_unix_server", "loop.create_unix_server(protocol_factory, ssl_handshake_timeout=None)"], "loop.create_unix_server(protocol_factory, start_serving=True)": ["create_unix_server", "loop.create_unix_server(protocol_factory, start_serving=False)"], "loop.default_exception_handler(context)": ["default_exception_handler"], "loop.get_debug()": ["get_debug"], "loop.get_exception_handler()": ["get_exception_handler"], "loop.get_task_factory()": ["get_task_factory"], "loop.getaddrinfo(host, port)": ["getaddrinfo"], "loop.getaddrinfo(host, port, family=0)": ["getaddrinfo", "loop.getaddrinfo(host, port, family='0')"], "loop.getaddrinfo(host, port, family=0, flags=0)": ["getaddrinfo", "loop.getaddrinfo(host, port, family='0', flags='0')"], "loop.getaddrinfo(host, port, family=0, proto=0)": ["getaddrinfo", "loop.getaddrinfo(host, port, family='0', proto='0')"], "loop.getaddrinfo(host, port, family=0, type=0)": ["getaddrinfo", "loop.getaddrinfo(host, port, family='0', type='0')"], "loop.getaddrinfo(host, port, type=0, flags=0)": ["getaddrinfo", "loop.getaddrinfo(host, port, type='0', flags='0')"], "loop.getaddrinfo(host, port, type=0, proto=0)": ["getaddrinfo", "loop.getaddrinfo(host, port, type='0', proto='0')"], "loop.getnameinfo(sockaddr)": ["getnameinfo"], "loop.getnameinfo(sockaddr, flags=0)": ["getnameinfo", "loop.getnameinfo(sockaddr, flags='0')"], "loop.is_closed()": ["is_closed"], "loop.is_running()": ["is_running"], "loop.remove_reader(fd)": ["remove_reader"], "loop.remove_signal_handler(sig)": ["remove_signal_handler"], "loop.remove_writer(fd)": ["remove_writer"], "loop.run_forever()": ["run_forever"], "loop.run_in_executor(executor, func, *args)": ["run_in_executor"], "loop.run_until_complete(future)": ["run_until_complete"], "loop.sendfile(transport, file)": ["sendfile"], "loop.sendfile(transport, file, count=None)": ["sendfile", "loop.sendfile(transport, file, count=None)"], "loop.sendfile(transport, file, count=None, fallback=True)": ["sendfile", "loop.sendfile(transport, file, count=None, fallback=False)"], "loop.sendfile(transport, file, fallback=True)": ["sendfile", "loop.sendfile(transport, file, fallback=False)"], "loop.sendfile(transport, file, offset=0)": ["sendfile", "loop.sendfile(transport, file, offset='0')"], "loop.sendfile(transport, file, offset=0, count=None)": ["sendfile", "loop.sendfile(transport, file, offset=0, count=None)", "loop.sendfile(transport, file, offset='0', count=None)"], "loop.sendfile(transport, file, offset=0, fallback=True)": ["sendfile", "loop.sendfile(transport, file, offset=0, fallback=False)", "loop.sendfile(transport, file, offset='0', fallback=True)"], "loop.set_debug(enabled: bool)": [], "loop.set_default_executor(executor)": ["set_default_executor"], "loop.set_exception_handler(handler)": ["set_exception_handler"], "loop.set_task_factory(factory)": ["set_task_factory"], "loop.shutdown_asyncgens()": ["shutdown_asyncgens"], "loop.sock_accept(sock)": ["sock_accept"], "loop.sock_connect(sock, address)": ["sock_connect"], "loop.sock_recv(sock, nbytes)": ["sock_recv"], "loop.sock_recv_into(sock, buf)": ["sock_recv_into"], "loop.sock_sendall(sock, data)": ["sock_sendall"], "loop.sock_sendfile(sock, file)": ["sock_sendfile"], "loop.sock_sendfile(sock, file, count=None)": ["sock_sendfile", "loop.sock_sendfile(sock, file, count=None)"], "loop.sock_sendfile(sock, file, fallback=True)": ["sock_sendfile", "loop.sock_sendfile(sock, file, fallback=False)"], "loop.sock_sendfile(sock, file, offset=0)": ["sock_sendfile", "loop.sock_sendfile(sock, file, offset='0')"], "loop.sock_sendfile(sock, file, offset=0, fallback=True)": ["sock_sendfile", "loop.sock_sendfile(sock, file, offset=0, fallback=False)", "loop.sock_sendfile(sock, file, offset='0', fallback=True)"], "loop.start_tls(transport, protocol, sslcontext)": ["start_tls"], "loop.start_tls(transport, protocol, sslcontext, server_hostname=None)": ["start_tls", "loop.start_tls(transport, protocol, sslcontext, server_hostname=None)"], "loop.start_tls(transport, protocol, sslcontext, server_side=False)": ["start_tls", "loop.start_tls(transport, protocol, sslcontext, server_side=True)"], "loop.start_tls(transport, protocol, sslcontext, ssl_handshake_timeout=None)": ["start_tls", "loop.start_tls(transport, protocol, sslcontext, ssl_handshake_timeout=None)"], "loop.stop()": ["stop"], "loop.subprocess_exec(protocol_factory, *args, **kwargs)": ["subprocess_exec"], "loop.subprocess_exec(protocol_factory, *args, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE)": ["subprocess_exec"], "loop.subprocess_exec(protocol_factory, *args, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)": ["subprocess_exec"], "loop.subprocess_exec(protocol_factory, *args, **kwargs, stdout=subprocess.PIPE)": ["subprocess_exec"], "loop.subprocess_exec(protocol_factory, *args, **kwargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)": ["subprocess_exec"], "loop.subprocess_shell(protocol_factory, cmd, **kwargs)": ["subprocess_shell"], "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stderr=subprocess.PIPE)": ["subprocess_shell"], "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE)": ["subprocess_shell"], "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE)": ["subprocess_shell"], "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)": ["subprocess_shell"], "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE)": ["subprocess_shell"], "loop.subprocess_shell(protocol_factory, cmd, **kwargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)": ["subprocess_shell"], "loop.time()": ["time"], "lzma.LZMACompressor()": ["LZMACompressor"], "lzma.LZMACompressor(check=-1)": ["LZMACompressor", "lzma.LZMACompressor(check=(- '1'))"], "lzma.LZMACompressor(check=-1, filters=None)": ["LZMACompressor", "lzma.LZMACompressor(check=(- 1), filters=None)", "lzma.LZMACompressor(check=(- '1'), filters=None)"], "lzma.LZMACompressor(check=-1, preset=None)": ["LZMACompressor", "lzma.LZMACompressor(check=(- 1), preset=None)", "lzma.LZMACompressor(check=(- '1'), preset=None)"], "lzma.LZMACompressor(filters=None)": ["LZMACompressor", "lzma.LZMACompressor(filters=None)"], "lzma.LZMACompressor(format=FORMAT_XZ, check=-1)": ["LZMACompressor", "lzma.LZMACompressor(format=FORMAT_XZ, check=(- '1'))"], "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)": ["LZMACompressor", "lzma.LZMACompressor(format=FORMAT_XZ, filters=None)"], "lzma.LZMACompressor(format=FORMAT_XZ, preset=None)": ["LZMACompressor", "lzma.LZMACompressor(format=FORMAT_XZ, preset=None)"], "lzma.LZMACompressor(preset=None)": ["LZMACompressor", "lzma.LZMACompressor(preset=None)"], "lzma.LZMADecompressor()": ["LZMADecompressor"], "lzma.LZMADecompressor(filters=None)": ["LZMADecompressor", "lzma.LZMADecompressor(filters=None)"], "lzma.LZMADecompressor(format=FORMAT_AUTO)": ["LZMADecompressor"], "lzma.LZMADecompressor(format=FORMAT_AUTO, filters=None)": ["LZMADecompressor", "lzma.LZMADecompressor(format=FORMAT_AUTO, filters=None)"], "lzma.LZMADecompressor(format=FORMAT_AUTO, memlimit=None)": ["LZMADecompressor", "lzma.LZMADecompressor(format=FORMAT_AUTO, memlimit=None)"], "lzma.LZMADecompressor(memlimit=None)": ["LZMADecompressor", "lzma.LZMADecompressor(memlimit=None)"], "lzma.LZMAError": ["lzma.LZMAError"], "lzma.LZMAFile()": ["LZMAFile"], "lzma.LZMAFile(check=-1)": ["LZMAFile", "lzma.LZMAFile(check=(- '1'))"], "lzma.LZMAFile(filename=None)": ["LZMAFile", "lzma.LZMAFile(filename=None)"], "lzma.LZMAFile(filename=None, check=-1)": ["LZMAFile", "lzma.LZMAFile(filename=None, check=(- 1))", "lzma.LZMAFile(filename=None, check=(- '1'))"], "lzma.LZMAFile(filename=None, format=None)": ["LZMAFile", "lzma.LZMAFile(filename=None, format=None)"], "lzma.LZMAFile(filename=None, mode=\"r\")": ["LZMAFile", "lzma.LZMAFile(filename=None, mode='r')", "lzma.LZMAFile(filename=None, mode=1)"], "lzma.LZMAFile(filters=None)": ["LZMAFile", "lzma.LZMAFile(filters=None)"], "lzma.LZMAFile(format=None)": ["LZMAFile", "lzma.LZMAFile(format=None)"], "lzma.LZMAFile(mode=\"r\")": ["LZMAFile", "lzma.LZMAFile(mode=1)"], "lzma.compress(data)": ["compress", "lzma.decompress(data)", "lzma._compress_dispatcher(data)", "lzma.pcolormesh(data)", "lzma.fromrecords(data)", "lzma.cumprod(data)", "lzma.as_completed(data)", "lzma.load_compiled(data)", "lzma.onrelease(data)", "lzma.parse(data)", "lzma.screensize(data)", "lzma._nested_map(data)", "lzma.fromarrays(data)", "lzma.nancumprod(data)", "lzma.rmtree(data)"], "lzma.compress(data, check=-1)": ["compress", "lzma.compress(data, check=(- '1'))", "lzma.decompress(data, check=(- 1))", "lzma._compress_dispatcher(data, check=(- 1))", "lzma.pcolormesh(data, check=(- 1))", "lzma.fromrecords(data, check=(- 1))", "lzma.cumprod(data, check=(- 1))", "lzma.as_completed(data, check=(- 1))", "lzma.load_compiled(data, check=(- 1))", "lzma.onrelease(data, check=(- 1))", "lzma.parse(data, check=(- 1))", "lzma.screensize(data, check=(- 1))", "lzma._nested_map(data, check=(- 1))", "lzma.fromarrays(data, check=(- 1))", "lzma.nancumprod(data, check=(- 1))"], "lzma.compress(data, check=-1, preset=None)": ["compress", "lzma.compress(data, check=(- 1), preset=None)", "lzma.compress(data, check=(- '1'), preset=None)", "lzma.decompress(data, check=(- 1), preset=None)", "lzma._compress_dispatcher(data, check=(- 1), preset=None)", "lzma.pcolormesh(data, check=(- 1), preset=None)", "lzma.fromrecords(data, check=(- 1), preset=None)", "lzma.cumprod(data, check=(- 1), preset=None)", "lzma.as_completed(data, check=(- 1), preset=None)", "lzma.load_compiled(data, check=(- 1), preset=None)", "lzma.onrelease(data, check=(- 1), preset=None)", "lzma.parse(data, check=(- 1), preset=None)", "lzma.screensize(data, check=(- 1), preset=None)", "lzma._nested_map(data, check=(- 1), preset=None)", "lzma.fromarrays(data, check=(- 1), preset=None)"], "lzma.compress(data, filters=None)": ["compress", "lzma.compress(data, filters=None)", "lzma.decompress(data, filters=None)", "lzma._compress_dispatcher(data, filters=None)", "lzma.pcolormesh(data, filters=None)", "lzma.fromrecords(data, filters=None)", "lzma.cumprod(data, filters=None)", "lzma.as_completed(data, filters=None)", "lzma.load_compiled(data, filters=None)", "lzma.onrelease(data, filters=None)", "lzma.parse(data, filters=None)", "lzma.screensize(data, filters=None)", "lzma._nested_map(data, filters=None)", "lzma.fromarrays(data, filters=None)", "lzma.nancumprod(data, filters=None)"], "lzma.compress(data, format=FORMAT_XZ)": ["compress", "lzma.decompress(data, format=FORMAT_XZ)", "lzma._compress_dispatcher(data, format=FORMAT_XZ)", "lzma.pcolormesh(data, format=FORMAT_XZ)", "lzma.fromrecords(data, format=FORMAT_XZ)", "lzma.cumprod(data, format=FORMAT_XZ)", "lzma.as_completed(data, format=FORMAT_XZ)", "lzma.load_compiled(data, format=FORMAT_XZ)", "lzma.onrelease(data, format=FORMAT_XZ)", "lzma.parse(data, format=FORMAT_XZ)", "lzma.screensize(data, format=FORMAT_XZ)", "lzma._nested_map(data, format=FORMAT_XZ)", "lzma.fromarrays(data, format=FORMAT_XZ)", "lzma.nancumprod(data, format=FORMAT_XZ)", "lzma.rmtree(data, format=FORMAT_XZ)"], "lzma.compress(data, format=FORMAT_XZ, check=-1)": ["compress", "lzma.compress(data, format=FORMAT_XZ, check=(- '1'))", "lzma.decompress(data, format=FORMAT_XZ, check=(- 1))", "lzma._compress_dispatcher(data, format=FORMAT_XZ, check=(- 1))", "lzma.pcolormesh(data, format=FORMAT_XZ, check=(- 1))", "lzma.fromrecords(data, format=FORMAT_XZ, check=(- 1))", "lzma.cumprod(data, format=FORMAT_XZ, check=(- 1))", "lzma.as_completed(data, format=FORMAT_XZ, check=(- 1))", "lzma.load_compiled(data, format=FORMAT_XZ, check=(- 1))", "lzma.onrelease(data, format=FORMAT_XZ, check=(- 1))", "lzma.parse(data, format=FORMAT_XZ, check=(- 1))", "lzma.screensize(data, format=FORMAT_XZ, check=(- 1))", "lzma._nested_map(data, format=FORMAT_XZ, check=(- 1))", "lzma.fromarrays(data, format=FORMAT_XZ, check=(- 1))", "lzma.nancumprod(data, format=FORMAT_XZ, check=(- 1))"], "lzma.compress(data, format=FORMAT_XZ, filters=None)": ["compress", "lzma.compress(data, format=FORMAT_XZ, filters=None)", "lzma.decompress(data, format=FORMAT_XZ, filters=None)", "lzma._compress_dispatcher(data, format=FORMAT_XZ, filters=None)", "lzma.pcolormesh(data, format=FORMAT_XZ, filters=None)", "lzma.fromrecords(data, format=FORMAT_XZ, filters=None)", "lzma.cumprod(data, format=FORMAT_XZ, filters=None)", "lzma.as_completed(data, format=FORMAT_XZ, filters=None)", "lzma.load_compiled(data, format=FORMAT_XZ, filters=None)", "lzma.onrelease(data, format=FORMAT_XZ, filters=None)", "lzma.parse(data, format=FORMAT_XZ, filters=None)", "lzma.screensize(data, format=FORMAT_XZ, filters=None)", "lzma._nested_map(data, format=FORMAT_XZ, filters=None)", "lzma.fromarrays(data, format=FORMAT_XZ, filters=None)", "lzma.nancumprod(data, format=FORMAT_XZ, filters=None)"], "lzma.compress(data, format=FORMAT_XZ, preset=None)": ["compress", "lzma.compress(data, format=FORMAT_XZ, preset=None)", "lzma.decompress(data, format=FORMAT_XZ, preset=None)", "lzma._compress_dispatcher(data, format=FORMAT_XZ, preset=None)", "lzma.pcolormesh(data, format=FORMAT_XZ, preset=None)", "lzma.fromrecords(data, format=FORMAT_XZ, preset=None)", "lzma.cumprod(data, format=FORMAT_XZ, preset=None)", "lzma.as_completed(data, format=FORMAT_XZ, preset=None)", "lzma.load_compiled(data, format=FORMAT_XZ, preset=None)", "lzma.onrelease(data, format=FORMAT_XZ, preset=None)", "lzma.parse(data, format=FORMAT_XZ, preset=None)", "lzma.screensize(data, format=FORMAT_XZ, preset=None)", "lzma._nested_map(data, format=FORMAT_XZ, preset=None)", "lzma.fromarrays(data, format=FORMAT_XZ, preset=None)", "lzma.nancumprod(data, format=FORMAT_XZ, preset=None)"], "lzma.compress(data, preset=None)": ["compress", "lzma.compress(data, preset=None)", "lzma.decompress(data, preset=None)", "lzma._compress_dispatcher(data, preset=None)", "lzma.pcolormesh(data, preset=None)", "lzma.fromrecords(data, preset=None)", "lzma.cumprod(data, preset=None)", "lzma.as_completed(data, preset=None)", "lzma.load_compiled(data, preset=None)", "lzma.onrelease(data, preset=None)", "lzma.parse(data, preset=None)", "lzma.screensize(data, preset=None)", "lzma._nested_map(data, preset=None)", "lzma.fromarrays(data, preset=None)", "lzma.nancumprod(data, preset=None)"], "lzma.decompress(data, filters=None)": ["decompress", "lzma.decompress(data, filters=None)", "lzma.re_compile(data, filters=None)", "lzma.compile(data, filters=None)", "lzma.compress(data, filters=None)", "lzma.decodestring(data, filters=None)", "lzma.b16decode(data, filters=None)", "lzma.b32decode(data, filters=None)", "lzma._genops(data, filters=None)", "lzma.prepare(data, filters=None)", "lzma._unparse_datetime(data, filters=None)", "lzma.template(data, filters=None)", "lzma.safe_repr(data, filters=None)", "lzma.b85encode(data, filters=None)", "lzma.parse(data, filters=None)"], "lzma.decompress(data, format=FORMAT_AUTO)": ["decompress", "lzma.re_compile(data, format=FORMAT_AUTO)", "lzma.compile(data, format=FORMAT_AUTO)", "lzma.compress(data, format=FORMAT_AUTO)", "lzma.decodestring(data, format=FORMAT_AUTO)", "lzma.b16decode(data, format=FORMAT_AUTO)", "lzma.b32decode(data, format=FORMAT_AUTO)", "lzma._genops(data, format=FORMAT_AUTO)", "lzma.prepare(data, format=FORMAT_AUTO)", "lzma._unparse_datetime(data, format=FORMAT_AUTO)", "lzma.template(data, format=FORMAT_AUTO)", "lzma.safe_repr(data, format=FORMAT_AUTO)", "lzma.b85encode(data, format=FORMAT_AUTO)", "lzma.parse(data, format=FORMAT_AUTO)", "lzma.rmtree(data, format=FORMAT_AUTO)"], "lzma.decompress(data, format=FORMAT_AUTO, filters=None)": ["decompress", "lzma.decompress(data, format=FORMAT_AUTO, filters=None)", "lzma.re_compile(data, format=FORMAT_AUTO, filters=None)", "lzma.compile(data, format=FORMAT_AUTO, filters=None)", "lzma.compress(data, format=FORMAT_AUTO, filters=None)", "lzma.decodestring(data, format=FORMAT_AUTO, filters=None)", "lzma.b16decode(data, format=FORMAT_AUTO, filters=None)", "lzma.b32decode(data, format=FORMAT_AUTO, filters=None)", "lzma._genops(data, format=FORMAT_AUTO, filters=None)", "lzma.prepare(data, format=FORMAT_AUTO, filters=None)", "lzma._unparse_datetime(data, format=FORMAT_AUTO, filters=None)", "lzma.template(data, format=FORMAT_AUTO, filters=None)", "lzma.safe_repr(data, format=FORMAT_AUTO, filters=None)", "lzma.b85encode(data, format=FORMAT_AUTO, filters=None)", "lzma.parse(data, format=FORMAT_AUTO, filters=None)"], "lzma.decompress(data, memlimit=None)": ["decompress", "lzma.decompress(data, memlimit=None)", "lzma.re_compile(data, memlimit=None)", "lzma.compile(data, memlimit=None)", "lzma.compress(data, memlimit=None)", "lzma.decodestring(data, memlimit=None)", "lzma.b16decode(data, memlimit=None)", "lzma.b32decode(data, memlimit=None)", "lzma._genops(data, memlimit=None)", "lzma.prepare(data, memlimit=None)", "lzma._unparse_datetime(data, memlimit=None)", "lzma.template(data, memlimit=None)", "lzma.safe_repr(data, memlimit=None)", "lzma.b85encode(data, memlimit=None)", "lzma.parse(data, memlimit=None)"], "lzma.is_check_supported(check)": ["is_check_supported", "lzma._check_tensor_list(check)", "lzma._check_isinstance(check)", "lzma.assert_is_sorted(check)", "lzma._check_p2p_op_list(check)", "lzma._remove_unsupported_archs(check)", "lzma._check_instance(check)", "lzma._check_no_signature(check)", "lzma.sorted_list_difference(check)", "lzma.check_output(check)", "lzma._check_parser(check)", "lzma.check_value_size(check)", "lzma._get_supported_file_loaders(check)", "lzma._input_type_check(check)", "lzma._check_fill_value(check)"], "lzma.open(filename)": ["open", "lzma._open(filename)", "lzma.open_latin1(filename)", "lzma.popen(filename)", "lzma.bltn_open(filename)", "lzma.OpenWrapper(filename)", "lzma._builtin_open(filename)", "lzma.urlopen(filename)", "lzma.pie(filename)", "lzma._run_code(filename)", "lzma.compress(filename)", "lzma._popen(filename)", "lzma.byte_compile(filename)", "lzma.boxplot(filename)", "lzma.pen(filename)"], "lzma.open(filename, check=-1)": ["open", "lzma.open(filename, check=(- '1'))", "lzma._open(filename, check=(- 1))", "lzma.open_latin1(filename, check=(- 1))", "lzma.popen(filename, check=(- 1))", "lzma.bltn_open(filename, check=(- 1))", "lzma.OpenWrapper(filename, check=(- 1))", "lzma._builtin_open(filename, check=(- 1))", "lzma.urlopen(filename, check=(- 1))", "lzma.pie(filename, check=(- 1))", "lzma._run_code(filename, check=(- 1))", "lzma.compress(filename, check=(- 1))", "lzma._popen(filename, check=(- 1))", "lzma.byte_compile(filename, check=(- 1))", "lzma.boxplot(filename, check=(- 1))"], "lzma.open(filename, encoding=None)": ["open", "lzma.open(filename, encoding=None)", "lzma._open(filename, encoding=None)", "lzma.open_latin1(filename, encoding=None)", "lzma.popen(filename, encoding=None)", "lzma.bltn_open(filename, encoding=None)", "lzma.OpenWrapper(filename, encoding=None)", "lzma._builtin_open(filename, encoding=None)", "lzma.urlopen(filename, encoding=None)", "lzma.pie(filename, encoding=None)", "lzma._run_code(filename, encoding=None)", "lzma.compress(filename, encoding=None)", "lzma._popen(filename, encoding=None)", "lzma.byte_compile(filename, encoding=None)", "lzma.boxplot(filename, encoding=None)"], "lzma.open(filename, errors=None)": ["open", "lzma.open(filename, errors=None)", "lzma._open(filename, errors=None)", "lzma.open_latin1(filename, errors=None)", "lzma.popen(filename, errors=None)", "lzma.bltn_open(filename, errors=None)", "lzma.OpenWrapper(filename, errors=None)", "lzma._builtin_open(filename, errors=None)", "lzma.urlopen(filename, errors=None)", "lzma.pie(filename, errors=None)", "lzma._run_code(filename, errors=None)", "lzma.compress(filename, errors=None)", "lzma._popen(filename, errors=None)", "lzma.byte_compile(filename, errors=None)", "lzma.boxplot(filename, errors=None)"], "lzma.open(filename, filters=None)": ["open", "lzma.open(filename, filters=None)", "lzma._open(filename, filters=None)", "lzma.open_latin1(filename, filters=None)", "lzma.popen(filename, filters=None)", "lzma.bltn_open(filename, filters=None)", "lzma.OpenWrapper(filename, filters=None)", "lzma._builtin_open(filename, filters=None)", "lzma.urlopen(filename, filters=None)", "lzma.pie(filename, filters=None)", "lzma._run_code(filename, filters=None)", "lzma.compress(filename, filters=None)", "lzma._popen(filename, filters=None)", "lzma.byte_compile(filename, filters=None)", "lzma.boxplot(filename, filters=None)"], "lzma.open(filename, format=None)": ["open", "lzma.open(filename, format=None)", "lzma._open(filename, format=None)", "lzma.open_latin1(filename, format=None)", "lzma.popen(filename, format=None)", "lzma.bltn_open(filename, format=None)", "lzma.OpenWrapper(filename, format=None)", "lzma._builtin_open(filename, format=None)", "lzma.urlopen(filename, format=None)", "lzma.pie(filename, format=None)", "lzma._run_code(filename, format=None)", "lzma.compress(filename, format=None)", "lzma._popen(filename, format=None)", "lzma.byte_compile(filename, format=None)", "lzma.boxplot(filename, format=None)"], "lzma.open(filename, mode=\"rb\")": ["open", "lzma.open(filename, mode=2)", "lzma._open(filename, mode='rb')", "lzma.open_latin1(filename, mode='rb')", "lzma.popen(filename, mode='rb')", "lzma.bltn_open(filename, mode='rb')", "lzma.OpenWrapper(filename, mode='rb')", "lzma._builtin_open(filename, mode='rb')", "lzma.urlopen(filename, mode='rb')", "lzma.pie(filename, mode='rb')", "lzma._run_code(filename, mode='rb')", "lzma.compress(filename, mode='rb')", "lzma._popen(filename, mode='rb')", "lzma.byte_compile(filename, mode='rb')", "lzma.boxplot(filename, mode='rb')"], "lzma.open(filename, mode=\"rb\", format=None)": ["open", "lzma.open(filename, mode='rb', format=None)", "lzma.open(filename, mode=2.0, format=None)", "lzma._open(filename, mode='rb', format=None)", "lzma.open_latin1(filename, mode='rb', format=None)", "lzma.popen(filename, mode='rb', format=None)", "lzma.bltn_open(filename, mode='rb', format=None)", "lzma.OpenWrapper(filename, mode='rb', format=None)", "lzma._builtin_open(filename, mode='rb', format=None)", "lzma.urlopen(filename, mode='rb', format=None)", "lzma.pie(filename, mode='rb', format=None)", "lzma._run_code(filename, mode='rb', format=None)", "lzma.compress(filename, mode='rb', format=None)", "lzma._popen(filename, mode='rb', format=None)", "lzma.byte_compile(filename, mode='rb', format=None)"], "lzma.open(filename, newline=None)": ["open", "lzma.open(filename, newline=None)", "lzma._open(filename, newline=None)", "lzma.open_latin1(filename, newline=None)", "lzma.popen(filename, newline=None)", "lzma.bltn_open(filename, newline=None)", "lzma.OpenWrapper(filename, newline=None)", "lzma._builtin_open(filename, newline=None)", "lzma.urlopen(filename, newline=None)", "lzma.pie(filename, newline=None)", "lzma._run_code(filename, newline=None)", "lzma.compress(filename, newline=None)", "lzma._popen(filename, newline=None)", "lzma.byte_compile(filename, newline=None)", "lzma.boxplot(filename, newline=None)"], "lzma_compressor.flush()": ["flush"], "lzma_decompressor.check": ["lzma_decompressor.check"], "lzma_decompressor.decompress(data)": ["decompress"], "lzma_decompressor.decompress(data, max_length=-1)": ["decompress", "lzma_decompressor.decompress(data, max_length=(- '1'))"], "lzma_decompressor.eof": ["lzma_decompressor.eof"], "lzma_file.peek()": ["peek"], "mailbox.Babyl(path)": ["Babyl"], "mailbox.Babyl(path, create=True)": ["Babyl", "mailbox.Babyl(path, create=False)"], "mailbox.Babyl(path, factory=None)": ["Babyl", "mailbox.Babyl(path, factory=None)"], "mailbox.Babyl(path, factory=None, create=True)": ["Babyl", "mailbox.Babyl(path, factory=None, create=False)"], "mailbox.Error": ["mailbox.Error"], "mailbox.ExternalClashError": ["mailbox.ExternalClashError"], "mailbox.FormatError": ["mailbox.FormatError"], "mailbox.MH(path, create=True)": ["MH", "mailbox.MH(path, create=False)"], "mailbox.MH(path, factory=None, create=True)": ["MH", "mailbox.MH(path, factory=None, create=False)"], "mailbox.MMDF(path)": ["MMDF"], "mailbox.MMDF(path, create=True)": ["MMDF", "mailbox.MMDF(path, create=False)"], "mailbox.MMDF(path, factory=None)": ["MMDF", "mailbox.MMDF(path, factory=None)"], "mailbox.MMDF(path, factory=None, create=True)": ["MMDF", "mailbox.MMDF(path, factory=None, create=False)"], "mailbox.Maildir(dirname)": ["Maildir"], "mailbox.Maildir(dirname, create=True)": ["Maildir", "mailbox.Maildir(dirname, create=False)"], "mailbox.Maildir(dirname, factory=None)": ["Maildir", "mailbox.Maildir(dirname, factory=None)"], "mailbox.Maildir(dirname, factory=None, create=True)": ["Maildir", "mailbox.Maildir(dirname, factory=None, create=False)"], "mailbox.MaildirMessage()": ["MaildirMessage"], "mailbox.MaildirMessage(message=None)": ["MaildirMessage", "mailbox.MaildirMessage(message=None)"], "mailbox.Message(message=None)": ["Message", "mailbox.Message(message=None)"], "mailbox.NoSuchMailboxError": ["mailbox.NoSuchMailboxError"], "mailbox.NotEmptyError": ["mailbox.NotEmptyError"], "mailbox.__delitem__(key)": ["__delitem__"], "mailbox.__iter__()": ["__iter__"], "mailbox.__len__()": ["__len__"], "mailbox.__setitem__(key, message)": ["__setitem__"], "mailbox.clear()": ["clear"], "mailbox.close()": ["close"], "mailbox.discard(key)": ["discard"], "mailbox.flush()": ["flush"], "mailbox.get(key, default=None)": ["get", "mailbox.get(key, default=None)"], "mailbox.get_bytes(key)": ["get_bytes"], "mailbox.get_string(key)": ["get_string"], "mailbox.items()": ["items"], "mailbox.iteritems()": ["iteritems"], "mailbox.iterkeys()": ["iterkeys"], "mailbox.itervalues()": ["itervalues"], "mailbox.keys()": ["keys"], "mailbox.lock()": ["lock"], "mailbox.mbox(path)": ["mbox"], "mailbox.mbox(path, create=True)": ["mbox", "mailbox.mbox(path, create=False)"], "mailbox.mbox(path, factory=None)": ["mbox", "mailbox.mbox(path, factory=None)"], "mailbox.mbox(path, factory=None, create=True)": ["mbox", "mailbox.mbox(path, factory=None, create=False)"], "mailbox.mboxMessage()": ["mboxMessage"], "mailbox.pop(key)": ["pop"], "mailbox.popitem()": ["popitem"], "mailbox.remove(key)": ["remove"], "mailbox.unlock()": ["unlock"], "mailbox.update(arg)": ["update"], "mailbox.values()": ["values"], "mailcap.findmatch(caps)": ["findmatch", "mailcap.fnmatch(caps)", "mailcap._find_mac(caps)", "mailcap.match(caps)", "mailcap.fnmatchcase(caps)", "mailcap.fullmatch(caps)", "mailcap.findall(caps)", "mailcap.find(caps)", "mailcap._finddoc(caps)", "mailcap.singledispatch(caps)", "mailcap.einsum_path(caps)", "mailcap.bind_method(caps)", "mailcap.normpath(caps)", "mailcap._find_unpack_format(caps)", "mailcap.finditer(caps)"], "mailcap.findmatch(caps, MIMEtype)": ["findmatch", "mailcap.fnmatch(caps, MIMEtype)", "mailcap._find_mac(caps, MIMEtype)", "mailcap.match(caps, MIMEtype)", "mailcap.fnmatchcase(caps, MIMEtype)", "mailcap.fullmatch(caps, MIMEtype)", "mailcap.findall(caps, MIMEtype)", "mailcap.find(caps, MIMEtype)", "mailcap._finddoc(caps, MIMEtype)", "mailcap.singledispatch(caps, MIMEtype)", "mailcap.einsum_path(caps, MIMEtype)", "mailcap.bind_method(caps, MIMEtype)", "mailcap.normpath(caps, MIMEtype)", "mailcap._find_unpack_format(caps, MIMEtype)", "mailcap.finditer(caps, MIMEtype)"], "mailcap.findmatch(caps, MIMEtype, filename='/dev/null')": ["findmatch", "mailcap.findmatch(caps, MIMEtype, filename=9.0)", "mailcap.fnmatch(caps, MIMEtype, filename='/dev/null')", "mailcap._find_mac(caps, MIMEtype, filename='/dev/null')", "mailcap.match(caps, MIMEtype, filename='/dev/null')", "mailcap.fnmatchcase(caps, MIMEtype, filename='/dev/null')", "mailcap.fullmatch(caps, MIMEtype, filename='/dev/null')", "mailcap.findall(caps, MIMEtype, filename='/dev/null')", "mailcap.find(caps, MIMEtype, filename='/dev/null')", "mailcap._finddoc(caps, MIMEtype, filename='/dev/null')", "mailcap.singledispatch(caps, MIMEtype, filename='/dev/null')", "mailcap.einsum_path(caps, MIMEtype, filename='/dev/null')", "mailcap.bind_method(caps, MIMEtype, filename='/dev/null')", "mailcap.normpath(caps, MIMEtype, filename='/dev/null')", "mailcap._find_unpack_format(caps, MIMEtype, filename='/dev/null')"], "mailcap.findmatch(caps, MIMEtype, filename='/dev/null', plist=)": [], "mailcap.findmatch(caps, MIMEtype, key='view')": ["findmatch", "mailcap.findmatch(caps, MIMEtype, key=4)", "mailcap.fnmatch(caps, MIMEtype, key='view')", "mailcap._find_mac(caps, MIMEtype, key='view')", "mailcap.match(caps, MIMEtype, key='view')", "mailcap.fnmatchcase(caps, MIMEtype, key='view')", "mailcap.fullmatch(caps, MIMEtype, key='view')", "mailcap.findall(caps, MIMEtype, key='view')", "mailcap.find(caps, MIMEtype, key='view')", "mailcap._finddoc(caps, MIMEtype, key='view')", "mailcap.singledispatch(caps, MIMEtype, key='view')", "mailcap.einsum_path(caps, MIMEtype, key='view')", "mailcap.bind_method(caps, MIMEtype, key='view')", "mailcap.normpath(caps, MIMEtype, key='view')", "mailcap._find_unpack_format(caps, MIMEtype, key='view')"], "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null')": ["findmatch", "mailcap.findmatch(caps, MIMEtype, key=4.0, filename=9)", "mailcap.fnmatch(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap._find_mac(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap.match(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap.fnmatchcase(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap.fullmatch(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap.findall(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap.find(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap._finddoc(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap.singledispatch(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap.einsum_path(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap.bind_method(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap.normpath(caps, MIMEtype, key='view', filename='/dev/null')", "mailcap._find_unpack_format(caps, MIMEtype, key='view', filename='/dev/null')"], "mailcap.findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=)": [], "mailcap.findmatch(caps, MIMEtype, key='view', plist=)": [], "mailcap.findmatch(caps, MIMEtype, plist=)": [], "mailcap.findmatch(caps, filename='/dev/null')": ["findmatch", "mailcap.findmatch(caps, filename=9.0)", "mailcap.fnmatch(caps, filename='/dev/null')", "mailcap._find_mac(caps, filename='/dev/null')", "mailcap.match(caps, filename='/dev/null')", "mailcap.fnmatchcase(caps, filename='/dev/null')", "mailcap.fullmatch(caps, filename='/dev/null')", "mailcap.findall(caps, filename='/dev/null')", "mailcap.find(caps, filename='/dev/null')", "mailcap._finddoc(caps, filename='/dev/null')", "mailcap.singledispatch(caps, filename='/dev/null')", "mailcap.einsum_path(caps, filename='/dev/null')", "mailcap.bind_method(caps, filename='/dev/null')", "mailcap.normpath(caps, filename='/dev/null')", "mailcap._find_unpack_format(caps, filename='/dev/null')"], "mailcap.findmatch(caps, filename='/dev/null', plist=)": [], "mailcap.findmatch(caps, key='view')": ["findmatch", "mailcap.findmatch(caps, key=4)", "mailcap.fnmatch(caps, key='view')", "mailcap._find_mac(caps, key='view')", "mailcap.match(caps, key='view')", "mailcap.fnmatchcase(caps, key='view')", "mailcap.fullmatch(caps, key='view')", "mailcap.findall(caps, key='view')", "mailcap.find(caps, key='view')", "mailcap._finddoc(caps, key='view')", "mailcap.singledispatch(caps, key='view')", "mailcap.einsum_path(caps, key='view')", "mailcap.bind_method(caps, key='view')", "mailcap.normpath(caps, key='view')", "mailcap._find_unpack_format(caps, key='view')"], "mailcap.findmatch(caps, key='view', filename='/dev/null')": ["findmatch", "mailcap.findmatch(caps, key=4, filename=9.0)", "mailcap.fnmatch(caps, key='view', filename='/dev/null')", "mailcap._find_mac(caps, key='view', filename='/dev/null')", "mailcap.match(caps, key='view', filename='/dev/null')", "mailcap.fnmatchcase(caps, key='view', filename='/dev/null')", "mailcap.fullmatch(caps, key='view', filename='/dev/null')", "mailcap.findall(caps, key='view', filename='/dev/null')", "mailcap.find(caps, key='view', filename='/dev/null')", "mailcap._finddoc(caps, key='view', filename='/dev/null')", "mailcap.singledispatch(caps, key='view', filename='/dev/null')", "mailcap.einsum_path(caps, key='view', filename='/dev/null')", "mailcap.bind_method(caps, key='view', filename='/dev/null')", "mailcap.normpath(caps, key='view', filename='/dev/null')", "mailcap._find_unpack_format(caps, key='view', filename='/dev/null')"], "mailcap.findmatch(caps, key='view', plist=)": [], "mailcap.findmatch(caps, plist=)": [], "mailcap.getcaps()": ["getcaps", "mailcap.getshapes()", "mailcap.getcanvas()", "mailcap.getp()", "mailcap.getCols()", "mailcap.getmask()", "mailcap.getargs()", "mailcap.getpass()", "mailcap._get_iscased()", "mailcap.getcallargs()", "mailcap.get_mask()", "mailcap.get_locales()", "mailcap.getclasstree()", "mailcap.getdoc()", "mailcap.genops()"], "maildir.add_folder(folder)": ["add_folder"], "maildir.clean()": ["clean"], "maildir.close()": ["close"], "maildir.flush()": ["flush"], "maildir.get_file(key)": ["get_file"], "maildir.get_folder(folder)": ["get_folder"], "maildir.list_folders()": ["list_folders"], "maildir.lock()": ["lock"], "maildir.remove_folder(folder)": ["remove_folder"], "maildir_message.add_flag(flag)": ["add_flag"], "maildir_message.get_date()": ["get_date"], "maildir_message.get_subdir()": ["get_subdir"], "maildir_message.set_date(date)": ["set_date"], "maildir_message.set_flags(flags)": ["set_flags"], "maildir_message.set_info(info)": ["set_info"], "maildir_message.set_subdir(subdir)": ["set_subdir"], "map(function, iterable)": ["map", "_vmap(function, iterable)", "vmap(function, iterable)", "max(function, iterable)", "cmp(function, iterable)", "_cmp(function, iterable)", "mat(function, iterable)", "_maketup(function, iterable)", "_dump(function, iterable)", "bmat(function, iterable)", "main(function, iterable)", "dump(function, iterable)", "_wrap(function, iterable)", "imag(function, iterable)", "_main(function, iterable)"], "mapping_proxy_type.copy()": ["copy"], "mapping_proxy_type.get(key)": ["get"], "mapping_proxy_type.get(key, default)": ["get"], "mapping_proxy_type.items()": ["items"], "mapping_proxy_type.values()": ["values"], "marshal.dump(value, file)": ["dump"], "marshal.dump(value, file, version)": ["dump"], "marshal.dumps(value)": ["dumps"], "marshal.dumps(value, version)": ["dumps"], "marshal.load(file)": ["load"], "marshal.loads(bytes)": ["loads"], "marshal.version": ["marshal.version"], "math.acos(x)": ["acos"], "math.asinh(x)": ["asinh"], "math.atan(x)": ["atan"], "math.atan2(y, x)": ["atan2"], "math.ceil(x)": ["ceil"], "math.copysign(x, y)": ["copysign"], "math.degrees(x)": ["degrees"], "math.e": ["math.e"], "math.exp(x)": ["exp"], "math.fabs(x)": ["fabs"], "math.factorial(x)": ["factorial"], "math.floor(x)": ["floor"], "math.fmod(x, y)": ["fmod"], "math.frexp(x)": ["frexp"], "math.fsum(iterable)": ["fsum"], "math.gamma(x)": ["gamma"], "math.gcd(a, b)": ["gcd"], "math.hypot(x, y)": ["hypot"], "math.inf": ["math.inf"], "math.isclose(a, b)": ["isclose"], "math.isclose(a, b, abs_tol=0.0)": ["isclose", "math.isclose(a, b, abs_tol='0.0')"], "math.isclose(a, b, rel_tol=1e-09)": ["isclose", "math.isclose(a, b, rel_tol='1e-09')"], "math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)": ["isclose", "math.isclose(a, b, rel_tol='1e-09', abs_tol='0.0')"], "math.isfinite(x)": ["isfinite"], "math.isinf(x)": ["isinf"], "math.isnan(x)": ["isnan"], "math.ldexp(x, i)": ["ldexp"], "math.lgamma(x)": ["lgamma"], "math.log(x)": ["log", "math.logn(x)", "math._ilog(x)", "math._dlog(x)", "math.log2(x)", "math.nolog(x)", "math.log10(x)", "math.dolog(x)", "math.loglog(x)", "math._dlog10(x)", "math._w_long(x)", "math.loc(x)", "math._r_long(x)", "math.Catalog(x)", "math._x_log_x(x)"], "math.log(x, base)": ["log", "math.logn(x, base)", "math._ilog(x, base)", "math._dlog(x, base)", "math.log2(x, base)", "math.nolog(x, base)", "math.log10(x, base)", "math.dolog(x, base)", "math.loglog(x, base)", "math._dlog10(x, base)", "math._w_long(x, base)", "math.loc(x, base)", "math._r_long(x, base)", "math.Catalog(x, base)", "math._x_log_x(x, base)"], "math.log1p(x)": ["log1p"], "math.log2(x)": ["log2", "math.log(x)", "math.logn(x)", "math._ilog(x)", "math._dlog(x)", "math.nolog(x)", "math.log10(x)", "math._glob2(x)", "math.dolog(x)", "math.loglog(x)", "math._dlog10(x)", "math._w_long(x)", "math._r_long(x)", "math.loc(x)", "math.Catalog(x)"], "math.modf(x)": ["modf"], "math.pi": ["math.pi"], "math.pow(x, y)": ["pow"], "math.radians(x)": ["radians"], "math.remainder(x, y)": ["remainder"], "math.sin(x)": ["sin"], "math.sqrt(x)": ["sqrt", "math._sqrt(x)", "math.zsqrt(x)", "math.sort(x)", "math.msort(x)", "math.st(x)", "math.qr(x)", "math.start(x)", "math.rt(x)", "math.assert_(x)", "math._assert(x)", "math.script(x)", "math.scrypt(x)", "math.insert(x)", "math._script(x)"], "math.tau": ["math.tau"], "math.trunc(x)": ["trunc"], "max(arg1, arg2, *args)": ["max", "amax(arg1, arg2, *args)", "argmax(arg1, arg2, *args)", "nanmax(arg1, arg2, *args)", "mat(arg1, arg2, *args)", "bmat(arg1, arg2, *args)", "main(arg1, arg2, *args)", "asmatrix(arg1, arg2, *args)", "nanargmax(arg1, arg2, *args)", "_amax(arg1, arg2, *args)", "imread(arg1, arg2, *args)", "mksalt(arg1, arg2, *args)", "makeIntIndex(arg1, arg2, *args)", "makeBoolIndex(arg1, arg2, *args)", "makeUIntIndex(arg1, arg2, *args)"], "max(arg1, arg2, *args, key)": ["max", "amax(arg1, arg2, *args, key)", "argmax(arg1, arg2, *args, key)", "nanmax(arg1, arg2, *args, key)", "mat(arg1, arg2, *args, key)", "bmat(arg1, arg2, *args, key)", "main(arg1, arg2, *args, key)", "asmatrix(arg1, arg2, *args, key)", "nanargmax(arg1, arg2, *args, key)", "_amax(arg1, arg2, *args, key)", "imread(arg1, arg2, *args, key)", "mksalt(arg1, arg2, *args, key)", "makeIntIndex(arg1, arg2, *args, key)", "makeBoolIndex(arg1, arg2, *args, key)", "makeUIntIndex(arg1, arg2, *args, key)"], "max(iterable, key)": ["max", "amax(iterable, key)", "argmax(iterable, key)", "nanmax(iterable, key)", "mat(iterable, key)", "bmat(iterable, key)", "main(iterable, key)", "asmatrix(iterable, key)", "nanargmax(iterable, key)", "_amax(iterable, key)", "imread(iterable, key)", "mksalt(iterable, key)", "makeIntIndex(iterable, key)", "makeBoolIndex(iterable, key)", "makeUIntIndex(iterable, key)"], "max(iterable, key, default)": ["max", "amax(iterable, key, default)", "argmax(iterable, key, default)", "nanmax(iterable, key, default)", "mat(iterable, key, default)", "bmat(iterable, key, default)", "main(iterable, key, default)", "asmatrix(iterable, key, default)", "nanargmax(iterable, key, default)", "_amax(iterable, key, default)", "imread(iterable, key, default)", "mksalt(iterable, key, default)", "makeIntIndex(iterable, key, default)", "makeBoolIndex(iterable, key, default)", "makeUIntIndex(iterable, key, default)"], "mbox.get_file(key)": ["get_file"], "mbox.unlock()": ["unlock"], "mbox_message.add_flag(flag)": ["add_flag"], "mbox_message.get_from()": ["get_from"], "mbox_message.remove_flag(flag)": ["remove_flag"], "mbox_message.set_from(from_)": ["set_from"], "mbox_message.set_from(from_, time_=None)": ["set_from", "mbox_message.set_from(from_, time_=None)"], "memory_bio.eof": ["memory_bio.eof"], "memory_bio.pending": ["memory_bio.pending"], "memory_bio.read()": ["read"], "memory_bio.read(n=-1)": ["read", "memory_bio.read(n=(- '1'))"], "memory_bio.write(buf)": ["write"], "memory_bio.write_eof()": ["write_eof"], "memory_handler.close()": ["close"], "memory_handler.flush()": ["flush"], "memory_handler.setTarget(target)": ["setTarget"], "memoryview(obj)": ["memoryview", "pin_memory(obj)", "memory_reserved(obj)", "requires_memory(obj)", "remove(obj)", "TemporaryFile(obj)", "NamedTemporaryFile(obj)", "move(obj)", "_pin_memory_loop(obj)", "_view_roi(obj)", "memory_stats(obj)", "max_memory_reserved(obj)", "merge(obj)", "move_file(obj)", "get_traced_memory(obj)"], "memoryview.__eq__(exporter)": ["__eq__"], "memoryview.c_contiguous": ["memoryview.c_contiguous"], "memoryview.cast(format)": ["cast"], "memoryview.cast(format, shape)": ["cast"], "memoryview.contiguous": ["memoryview.contiguous"], "memoryview.f_contiguous": ["memoryview.f_contiguous"], "memoryview.format": ["memoryview.format"], "memoryview.hex()": ["hex"], "memoryview.itemsize": ["memoryview.itemsize"], "memoryview.nbytes": ["memoryview.nbytes"], "memoryview.ndim": ["memoryview.ndim"], "memoryview.readonly": ["memoryview.readonly"], "memoryview.release()": ["release"], "memoryview.shape": ["memoryview.shape"], "memoryview.strides": ["memoryview.strides"], "memoryview.suboffsets": ["memoryview.suboffsets"], "memoryview.tobytes()": ["tobytes"], "memoryview.tolist()": ["tolist"], "message.__bytes__()": ["__bytes__"], "message.__contains__(name)": ["__contains__"], "message.__delitem__(name)": ["__delitem__"], "message.__getitem__(name)": ["__getitem__"], "message.__len__()": ["__len__"], "message.__setitem__(name, val)": ["__setitem__"], "message.__str__()": ["__str__"], "message.add_header(_name, _value, **_params)": ["add_header"], "message.as_bytes(unixfrom=False)": ["as_bytes", "message.as_bytes(unixfrom=True)"], "message.as_string(unixfrom=False)": ["as_string", "message.as_string(unixfrom=True)"], "message.as_string(unixfrom=False, maxheaderlen=0)": ["as_string", "message.as_string(unixfrom=True, maxheaderlen=0)", "message.as_string(unixfrom=False, maxheaderlen='0')"], "message.attach(payload)": ["attach"], "message.defects": ["message.defects"], "message.del_param(param)": ["del_param"], "message.del_param(param, header='content-type')": ["del_param", "message.del_param(param, header=12)"], "message.del_param(param, requote=True)": ["del_param", "message.del_param(param, requote=False)"], "message.epilogue": ["message.epilogue"], "message.get(name)": ["get"], "message.get_all(name)": ["get_all"], "message.get_all(name, failobj=None)": ["get_all", "message.get_all(name, failobj=None)"], "message.get_boundary()": ["get_boundary"], "message.get_boundary(failobj=None)": ["get_boundary", "message.get_boundary(failobj=None)"], "message.get_charsets()": ["get_charsets"], "message.get_content_charset()": ["get_content_charset"], "message.get_content_charset(failobj=None)": ["get_content_charset", "message.get_content_charset(failobj=None)"], "message.get_content_disposition()": ["get_content_disposition"], "message.get_content_subtype()": ["get_content_subtype"], "message.get_content_type()": ["get_content_type"], "message.get_default_type()": ["get_default_type"], "message.get_filename()": ["get_filename"], "message.get_param(param)": ["get_param"], "message.get_param(param, failobj=None)": ["get_param", "message.get_param(param, failobj=None)"], "message.get_param(param, failobj=None, header='content-type')": ["get_param", "message.get_param(param, failobj=None, header='content-type')", "message.get_param(param, failobj=None, header=12)"], "message.get_param(param, failobj=None, header='content-type', unquote=True)": ["get_param", "message.get_param(param, failobj=None, header='content-type', unquote=False)", "message.get_param(param, failobj=None, header=12, unquote=True)"], "message.get_param(param, failobj=None, unquote=True)": ["get_param", "message.get_param(param, failobj=None, unquote=False)"], "message.get_param(param, header='content-type')": ["get_param", "message.get_param(param, header=12.0)"], "message.get_param(param, header='content-type', unquote=True)": ["get_param", "message.get_param(param, header='content-type', unquote=False)", "message.get_param(param, header=12, unquote=True)"], "message.get_param(param, unquote=True)": ["get_param", "message.get_param(param, unquote=False)"], "message.get_params()": ["get_params"], "message.get_params(failobj=None)": ["get_params", "message.get_params(failobj=None)"], "message.get_params(failobj=None, header='content-type')": ["get_params", "message.get_params(failobj=None, header='content-type')", "message.get_params(failobj=None, header=12.0)"], "message.get_params(failobj=None, unquote=True)": ["get_params", "message.get_params(failobj=None, unquote=False)"], "message.get_params(header='content-type')": ["get_params", "message.get_params(header=12)"], "message.get_params(header='content-type', unquote=True)": ["get_params", "message.get_params(header='content-type', unquote=False)", "message.get_params(header=12.0, unquote=True)"], "message.get_params(unquote=True)": ["get_params", "message.get_params(unquote=False)"], "message.get_payload(decode=False)": ["get_payload", "message.get_payload(decode=True)"], "message.get_payload(i=None)": ["get_payload", "message.get_payload(i=None)"], "message.get_payload(i=None, decode=False)": ["get_payload", "message.get_payload(i=None, decode=True)"], "message.is_multipart()": ["is_multipart"], "message.items()": ["items"], "message.keys()": ["keys"], "message.preamble": ["message.preamble"], "message.replace_header(_name, _value)": ["replace_header"], "message.set_boundary(boundary)": ["set_boundary"], "message.set_charset(charset)": ["set_charset"], "message.set_default_type(ctype)": ["set_default_type"], "message.set_param(param, value)": ["set_param"], "message.set_param(param, value, header='Content-Type')": ["set_param", "message.set_param(param, value, header=12.0)"], "message.set_param(param, value, header='Content-Type', charset=None)": ["set_param", "message.set_param(param, value, header='Content-Type', charset=None)", "message.set_param(param, value, header=12.0, charset=None)"], "message.set_param(param, value, header='Content-Type', language='')": ["set_param", "message.set_param(param, value, header=12.0, language=0.0)"], "message.set_param(param, value, header='Content-Type', replace=False)": ["set_param", "message.set_param(param, value, header='Content-Type', replace=True)", "message.set_param(param, value, header=12, replace=False)"], "message.set_param(param, value, language='')": ["set_param", "message.set_param(param, value, language=0.0)"], "message.set_param(param, value, replace=False)": ["set_param", "message.set_param(param, value, replace=True)"], "message.set_param(param, value, requote=True)": ["set_param", "message.set_param(param, value, requote=False)"], "message.set_payload(payload)": ["set_payload"], "message.set_payload(payload, charset=None)": ["set_payload", "message.set_payload(payload, charset=None)"], "message.set_type(type)": ["set_type"], "message.set_type(type, header='Content-Type')": ["set_type", "message.set_type(type, header=12)"], "message.set_type(type, header='Content-Type', requote=True)": ["set_type", "message.set_type(type, header='Content-Type', requote=False)", "message.set_type(type, header=12, requote=True)"], "message.set_type(type, requote=True)": ["set_type", "message.set_type(type, requote=False)"], "message.values()": ["values"], "message.walk()": ["walk"], "meta_path_finder.find_module(fullname, path)": ["find_module"], "meta_path_finder.find_spec(fullname, path)": ["find_spec"], "meta_path_finder.find_spec(fullname, path, target=None)": ["find_spec", "meta_path_finder.find_spec(fullname, path, target=None)"], "meta_path_finder.invalidate_caches()": ["invalidate_caches"], "mh.__delitem__(key)": ["__delitem__"], "mh.add_folder(folder)": ["add_folder"], "mh.close()": ["close"], "mh.discard(key)": ["discard"], "mh.flush()": ["flush"], "mh.get_file(key)": ["get_file"], "mh.get_folder(folder)": ["get_folder"], "mh.get_sequences()": ["get_sequences"], "mh.lock()": ["lock"], "mh.pack()": ["pack"], "mh.remove(key)": ["remove"], "mh.remove_folder(folder)": ["remove_folder"], "mh.set_sequences(sequences)": ["set_sequences"], "mh_message.add_sequence(sequence)": ["add_sequence"], "mh_message.get_sequences()": ["get_sequences"], "mh_message.remove_sequence(sequence)": ["remove_sequence"], "mh_message.set_sequences(sequences)": ["set_sequences"], "mime_types.guess_all_extensions(type)": ["guess_all_extensions"], "mime_types.guess_all_extensions(type, strict=True)": ["guess_all_extensions", "mime_types.guess_all_extensions(type, strict=False)"], "mime_types.guess_extension(type)": ["guess_extension"], "mime_types.guess_extension(type, strict=True)": ["guess_extension", "mime_types.guess_extension(type, strict=False)"], "mime_types.guess_type(url)": ["guess_type"], "mime_types.guess_type(url, strict=True)": ["guess_type", "mime_types.guess_type(url, strict=False)"], "mime_types.read(filename)": ["read"], "mime_types.read(filename, strict=True)": ["read", "mime_types.read(filename, strict=False)"], "mime_types.read_windows_registry()": ["read_windows_registry"], "mime_types.read_windows_registry(strict=True)": ["read_windows_registry", "mime_types.read_windows_registry(strict=False)"], "mime_types.readfp(fp)": ["readfp"], "mime_types.readfp(fp, strict=True)": ["readfp", "mime_types.readfp(fp, strict=False)"], "mime_types.types_map": ["mime_types.types_map"], "mime_types.types_map_inv": ["mime_types.types_map_inv"], "mime_version_header.major": ["mime_version_header.major"], "mime_version_header.minor": ["mime_version_header.minor"], "mime_version_header.version": ["mime_version_header.version"], "mimetypes.MimeTypes(filenames=())": ["MimeTypes"], "mimetypes.MimeTypes(filenames=(), strict=True)": ["MimeTypes", "mimetypes.MimeTypes(filenames=(), strict=False)"], "mimetypes.MimeTypes(strict=True)": ["MimeTypes", "mimetypes.MimeTypes(strict=False)"], "mimetypes.add_type(type, ext)": ["add_type", "mimetypes._type_check(type, ext)", "mimetypes.b2a_qp(type, ext)", "mimetypes.lagder(type, ext)", "mimetypes.masked_where(type, ext)", "mimetypes.masked_object(type, ext)", "mimetypes.read_stringnl(type, ext)", "mimetypes._rref_typeof_on_user(type, ext)", "mimetypes.copy_tree(type, ext)", "mimetypes.disp(type, ext)", "mimetypes.open(type, ext)", "mimetypes.dup2(type, ext)", "mimetypes.load(type, ext)", "mimetypes.stat(type, ext)", "mimetypes.masked_not_equal(type, ext)"], "mimetypes.add_type(type, ext, strict=True)": ["add_type", "mimetypes.add_type(type, ext, strict=False)", "mimetypes._type_check(type, ext, strict=True)", "mimetypes.b2a_qp(type, ext, strict=True)", "mimetypes.lagder(type, ext, strict=True)", "mimetypes.masked_where(type, ext, strict=True)", "mimetypes.masked_object(type, ext, strict=True)", "mimetypes.read_stringnl(type, ext, strict=True)", "mimetypes._rref_typeof_on_user(type, ext, strict=True)", "mimetypes.copy_tree(type, ext, strict=True)", "mimetypes.disp(type, ext, strict=True)", "mimetypes.open(type, ext, strict=True)", "mimetypes.dup2(type, ext, strict=True)", "mimetypes.load(type, ext, strict=True)", "mimetypes.stat(type, ext, strict=True)"], "mimetypes.common_types": ["mimetypes.common_types"], "mimetypes.encodings_map": ["mimetypes.encodings_map"], "mimetypes.guess_all_extensions(type)": ["guess_all_extensions", "mimetypes.guess_extension(type)", "mimetypes._clean_na_values(type)", "mimetypes._signature_from_callable(type)", "mimetypes.get_fill_func(type)", "mimetypes.as_series(type)", "mimetypes.infer_concrete_type_builder(type)", "mimetypes._run_module_as_main(type)", "mimetypes.na_value_for_dtype(type)", "mimetypes.get_docstring(type)", "mimetypes.get_data(type)", "mimetypes.pack_sequence(type)", "mimetypes.testfile(type)", "mimetypes.set_string_function(type)", "mimetypes.read_stringnl(type)"], "mimetypes.guess_all_extensions(type, strict=True)": ["guess_all_extensions", "mimetypes.guess_all_extensions(type, strict=False)", "mimetypes.guess_extension(type, strict=True)", "mimetypes._clean_na_values(type, strict=True)", "mimetypes._signature_from_callable(type, strict=True)", "mimetypes.get_fill_func(type, strict=True)", "mimetypes.as_series(type, strict=True)", "mimetypes.infer_concrete_type_builder(type, strict=True)", "mimetypes._run_module_as_main(type, strict=True)", "mimetypes.na_value_for_dtype(type, strict=True)", "mimetypes.get_docstring(type, strict=True)", "mimetypes.get_data(type, strict=True)", "mimetypes.pack_sequence(type, strict=True)", "mimetypes.testfile(type, strict=True)", "mimetypes.set_string_function(type, strict=True)"], "mimetypes.guess_extension(type)": ["guess_extension", "mimetypes.guess_all_extensions(type)", "mimetypes._clean_na_values(type)", "mimetypes.get_docstring(type)", "mimetypes.testfile(type)", "mimetypes.signature(type)", "mimetypes.na_value_for_dtype(type)", "mimetypes.getinnerframes(type)", "mimetypes.getouterframes(type)", "mimetypes.set_string_function(type)", "mimetypes.guess_type(type)", "mimetypes.increment_lineno(type)", "mimetypes.get_locales(type)", "mimetypes.getframeinfo(type)", "mimetypes.measure(type)"], "mimetypes.guess_extension(type, strict=True)": ["guess_extension", "mimetypes.guess_extension(type, strict=False)", "mimetypes.guess_all_extensions(type, strict=True)", "mimetypes._clean_na_values(type, strict=True)", "mimetypes.get_docstring(type, strict=True)", "mimetypes.testfile(type, strict=True)", "mimetypes.signature(type, strict=True)", "mimetypes.na_value_for_dtype(type, strict=True)", "mimetypes.getinnerframes(type, strict=True)", "mimetypes.getouterframes(type, strict=True)", "mimetypes.set_string_function(type, strict=True)", "mimetypes.guess_type(type, strict=True)", "mimetypes.increment_lineno(type, strict=True)", "mimetypes.get_locales(type, strict=True)", "mimetypes.getframeinfo(type, strict=True)"], "mimetypes.guess_type(url)": ["guess_type", "mimetypes.escape(url)", "mimetypes.get_module_concrete_type(url)", "mimetypes.testfile(url)", "mimetypes.median_grouped(url)", "mimetypes._rref_typeof_on_owner(url)", "mimetypes.guess_extension(url)", "mimetypes.remove_tree(url)", "mimetypes.infer_concrete_type_builder(url)", "mimetypes.get_locales(url)", "mimetypes.getframeinfo(url)", "mimetypes._return_output(url)", "mimetypes.measure(url)", "mimetypes._return_counts(url)", "mimetypes.getdata(url)"], "mimetypes.guess_type(url, strict=True)": ["guess_type", "mimetypes.guess_type(url, strict=False)", "mimetypes.escape(url, strict=True)", "mimetypes.get_module_concrete_type(url, strict=True)", "mimetypes.testfile(url, strict=True)", "mimetypes.median_grouped(url, strict=True)", "mimetypes._rref_typeof_on_owner(url, strict=True)", "mimetypes.guess_extension(url, strict=True)", "mimetypes.remove_tree(url, strict=True)", "mimetypes.infer_concrete_type_builder(url, strict=True)", "mimetypes.get_locales(url, strict=True)", "mimetypes.getframeinfo(url, strict=True)", "mimetypes._return_output(url, strict=True)", "mimetypes.measure(url, strict=True)", "mimetypes._return_counts(url, strict=True)"], "mimetypes.init(files=None)": ["init", "mimetypes.init(files=None)", "mimetypes.initscr(files=None)", "mimetypes._init_nt(files=None)", "mimetypes.initlog(files=None)", "mimetypes._init_fn(files=None)", "mimetypes._in(files=None)", "mimetypes.finditer(files=None)", "mimetypes._abc_init(files=None)", "mimetypes.init_rpc(files=None)", "mimetypes.identity(files=None)", "mimetypes._isfinite(files=None)", "mimetypes.input(files=None)", "mimetypes.gisfinite(files=None)", "mimetypes.init_rank(files=None)"], "mimetypes.inited": ["mimetypes.inited"], "mimetypes.knownfiles": ["mimetypes.knownfiles"], "mimetypes.read_mime_types(filename)": ["read_mime_types", "mimetypes.image_types(filename)", "mimetypes.integral_types(filename)", "mimetypes.parse_type_line(filename)", "mimetypes._add_types(filename)", "mimetypes.all_types_and(filename)", "mimetypes._infer_return_type(filename)", "mimetypes._path_is_mode_type(filename)", "mimetypes._register_types(filename)", "mimetypes._realType(filename)", "mimetypes.parse_mime_version(filename)", "mimetypes.integral_types_and(filename)", "mimetypes.add_type(filename)", "mimetypes._default_mime_types(filename)", "mimetypes.normalize_storage_type(filename)"], "mimetypes.suffix_map": ["mimetypes.suffix_map"], "mimetypes.types_map": ["mimetypes.types_map"], "min(arg1, arg2, *args)": ["min", "main(arg1, arg2, *args)", "amin(arg1, arg2, *args)", "argmin(arg1, arg2, *args)", "nanmin(arg1, arg2, *args)", "rmdir(arg1, arg2, *args)", "XMLID(arg1, arg2, *args)", "nanargmin(arg1, arg2, *args)", "_amin(arg1, arg2, *args)", "fromstring(arg1, arg2, *args)", "unlink(arg1, arg2, *args)", "Client(arg1, arg2, *args)", "listen(arg1, arg2, *args)", "_run_pip(arg1, arg2, *args)", "PI(arg1, arg2, *args)"], "min(arg1, arg2, *args, key)": ["min", "main(arg1, arg2, *args, key)", "amin(arg1, arg2, *args, key)", "argmin(arg1, arg2, *args, key)", "nanmin(arg1, arg2, *args, key)", "rmdir(arg1, arg2, *args, key)", "XMLID(arg1, arg2, *args, key)", "nanargmin(arg1, arg2, *args, key)", "_amin(arg1, arg2, *args, key)", "fromstring(arg1, arg2, *args, key)", "unlink(arg1, arg2, *args, key)", "Client(arg1, arg2, *args, key)", "listen(arg1, arg2, *args, key)", "_run_pip(arg1, arg2, *args, key)", "PI(arg1, arg2, *args, key)"], "min(iterable, key)": ["min", "main(iterable, key)", "amin(iterable, key)", "argmin(iterable, key)", "nanmin(iterable, key)", "rmdir(iterable, key)", "XMLID(iterable, key)", "nanargmin(iterable, key)", "_amin(iterable, key)", "fromstring(iterable, key)", "unlink(iterable, key)", "Client(iterable, key)", "listen(iterable, key)", "_run_pip(iterable, key)", "PI(iterable, key)"], "min(iterable, key, default)": ["min", "main(iterable, key, default)", "amin(iterable, key, default)", "argmin(iterable, key, default)", "nanmin(iterable, key, default)", "rmdir(iterable, key, default)", "XMLID(iterable, key, default)", "nanargmin(iterable, key, default)", "_amin(iterable, key, default)", "fromstring(iterable, key, default)", "unlink(iterable, key, default)", "Client(iterable, key, default)", "listen(iterable, key, default)", "_run_pip(iterable, key, default)", "PI(iterable, key, default)"], "mmap.close()": ["close"], "mmap.find(sub)": ["find"], "mmap.find(sub, start)": ["find"], "mmap.find(sub, start, end)": ["find"], "mmap.flush()": ["flush"], "mmap.flush(offset)": ["flush"], "mmap.flush(offset, size)": ["flush"], "mmap.mmap(fileno, length)": ["mmap"], "mmap.mmap(fileno, length, access=ACCESS_DEFAULT)": ["mmap"], "mmap.mmap(fileno, length, flags=MAP_SHARED)": ["mmap"], "mmap.mmap(fileno, length, offset)": ["mmap"], "mmap.mmap(fileno, length, offset, access=ACCESS_DEFAULT)": ["mmap"], "mmap.mmap(fileno, length, offset, tagname=None)": ["mmap", "mmap.mmap(fileno, length, offset, tagname=None)"], "mmap.mmap(fileno, length, tagname=None)": ["mmap", "mmap.mmap(fileno, length, tagname=None)"], "mmap.mmap(fileno, length, tagname=None, access=ACCESS_DEFAULT)": ["mmap", "mmap.mmap(fileno, length, tagname=None, access=ACCESS_DEFAULT)"], "mmap.move(dest, src, count)": ["move"], "mmap.read_byte()": ["read_byte"], "mmap.readline()": ["readline"], "mmap.resize(newsize)": ["resize"], "mmap.rfind(sub)": ["rfind"], "mmap.rfind(sub, start, end)": ["rfind"], "mmap.seek(pos)": ["seek"], "mmap.size()": ["size"], "mmap.write(bytes)": ["write"], "mmap.write_byte(byte)": ["write_byte"], "mmdf_message.set_flags(flags)": ["set_flags"], "mock.__class__": ["mock.__class__"], "mock.__dir__()": ["__dir__"], "mock._get_child_mock(**kw)": ["_get_child_mock"], "mock.assert_any_call(*args, **kwargs)": ["assert_any_call"], "mock.assert_called()": ["assert_called"], "mock.assert_called_once()": ["assert_called_once"], "mock.assert_called_once_with(*args, **kwargs)": ["assert_called_once_with"], "mock.assert_called_with(*args, **kwargs)": ["assert_called_with"], "mock.assert_has_calls(calls)": ["assert_has_calls"], "mock.assert_has_calls(calls, any_order=False)": ["assert_has_calls", "mock.assert_has_calls(calls, any_order=True)"], "mock.assert_not_called()": ["assert_not_called"], "mock.attach_mock(mock, attribute)": ["attach_mock"], "mock.call_args": ["mock.call_args"], "mock.call_args_list": ["mock.call_args_list"], "mock.call_count": ["mock.call_count"], "mock.called": ["mock.called"], "mock.configure_mock(**kwargs)": ["configure_mock"], "mock.method_calls": ["mock.method_calls"], "mock.mock_add_spec(spec)": ["mock_add_spec"], "mock.mock_add_spec(spec, spec_set=False)": ["mock_add_spec", "mock.mock_add_spec(spec, spec_set=True)"], "mock.mock_calls": ["mock.mock_calls"], "mock.reset_mock()": ["reset_mock"], "mock.reset_mock(return_value=False)": ["reset_mock", "mock.reset_mock(return_value=True)"], "mock.reset_mock(side_effect=False)": ["reset_mock", "mock.reset_mock(side_effect=True)"], "mock.return_value": ["mock.return_value"], "mock.side_effect": ["mock.side_effect"], "module_finder.modules": ["module_finder.modules"], "module_finder.report()": ["report"], "module_finder.run_script(pathname)": ["run_script"], "module_type.__doc__": ["module_type.__doc__"], "module_type.__package__": ["module_type.__package__"], "modulefinder.AddPackagePath(pkg_name, path)": ["AddPackagePath", "modulefinder.addpackage(pkg_name, path)", "modulefinder.addsitepackages(pkg_name, path)", "modulefinder.load_package(pkg_name, path)", "modulefinder.makepath(pkg_name, path)", "modulefinder.set_package(pkg_name, path)", "modulefinder._calc___package__(pkg_name, path)", "modulefinder.addusersitepackages(pkg_name, path)", "modulefinder.ispackage(pkg_name, path)", "modulefinder.walk_packages(pkg_name, path)", "modulefinder.ReplacePackage(pkg_name, path)", "modulefinder.add_charset(pkg_name, path)", "modulefinder.get_path(pkg_name, path)", "modulefinder.get_data(pkg_name, path)", "modulefinder._get_path(pkg_name, path)"], "modulefinder.ModuleFinder()": ["ModuleFinder"], "modulefinder.ModuleFinder(debug=0)": ["ModuleFinder", "modulefinder.ModuleFinder(debug='0')"], "modulefinder.ModuleFinder(debug=0, excludes=)": [], "modulefinder.ModuleFinder(debug=0, replace_paths=)": [], "modulefinder.ModuleFinder(excludes=)": [], "modulefinder.ModuleFinder(path=None)": ["ModuleFinder", "modulefinder.ModuleFinder(path=None)"], "modulefinder.ModuleFinder(path=None, debug=0)": ["ModuleFinder", "modulefinder.ModuleFinder(path=None, debug=0)", "modulefinder.ModuleFinder(path=None, debug='0')"], "modulefinder.ModuleFinder(path=None, excludes=)": [], "modulefinder.ModuleFinder(path=None, replace_paths=)": [], "modulefinder.ModuleFinder(replace_paths=)": [], "modulefinder.ReplacePackage(oldname, newname)": ["ReplacePackage", "modulefinder.load_package(oldname, newname)", "modulefinder._calc___package__(oldname, newname)", "modulefinder.replace(oldname, newname)", "modulefinder.get_package_name(oldname, newname)", "modulefinder.addpackage(oldname, newname)", "modulefinder.addsitepackages(oldname, newname)", "modulefinder.getsitepackages(oldname, newname)", "modulefinder.ispackage(oldname, newname)", "modulefinder.replicate(oldname, newname)", "modulefinder.tempfilepager(oldname, newname)", "modulefinder.is_frozen_package(oldname, newname)", "modulefinder.plainpager(oldname, newname)", "modulefinder.AddPackagePath(oldname, newname)", "modulefinder.release(oldname, newname)"], "msilib.Binary(filename)": ["Binary"], "msilib.CAB(name)": ["CAB"], "msilib.Control(dlg, name)": ["Control"], "msilib.CreateRecord(count)": ["CreateRecord"], "msilib.Dialog(db, name, x, y, w, h, attr, title, first, default, cancel)": ["Dialog"], "msilib.Directory(database, cab, basedir, physical, logical, default)": ["Directory"], "msilib.Directory(database, cab, basedir, physical, logical, default, componentflags)": ["Directory"], "msilib.FCICreate(cabname, files)": ["FCICreate"], "msilib.Feature(db, id, title, desc, display)": ["Feature"], "msilib.Feature(db, id, title, desc, display, attributes=0)": ["Feature", "msilib.Feature(db, id, title, desc, display, attributes='0')"], "msilib.Feature(db, id, title, desc, display, directory=None)": ["Feature", "msilib.Feature(db, id, title, desc, display, directory=None)"], "msilib.Feature(db, id, title, desc, display, level=1)": ["Feature", "msilib.Feature(db, id, title, desc, display, level='1')"], "msilib.Feature(db, id, title, desc, display, level=1, attributes=0)": ["Feature", "msilib.Feature(db, id, title, desc, display, level='1', attributes='0')"], "msilib.Feature(db, id, title, desc, display, level=1, directory=None)": ["Feature", "msilib.Feature(db, id, title, desc, display, level=1, directory=None)", "msilib.Feature(db, id, title, desc, display, level='1', directory=None)"], "msilib.Feature(db, id, title, desc, display, level=1, parent=None)": ["Feature", "msilib.Feature(db, id, title, desc, display, level=1, parent=None)", "msilib.Feature(db, id, title, desc, display, level='1', parent=None)"], "msilib.Feature(db, id, title, desc, display, parent=None)": ["Feature", "msilib.Feature(db, id, title, desc, display, parent=None)"], "msilib.Feature(db, id, title, desc, display, parent=None, attributes=0)": ["Feature", "msilib.Feature(db, id, title, desc, display, parent=None, attributes=0)", "msilib.Feature(db, id, title, desc, display, parent=None, attributes='0')"], "msilib.Feature(db, id, title, desc, display, parent=None, directory=None)": ["Feature", "msilib.Feature(db, id, title, desc, display, parent=None, directory=None)"], "msilib.OpenDatabase(path, persist)": ["OpenDatabase"], "msilib.RadioButtonGroup(dlg, name, property)": ["RadioButtonGroup"], "msilib.UuidCreate()": ["UuidCreate"], "msilib.add_data(database, table, records)": ["add_data"], "msilib.add_stream(database, name, path)": ["add_stream"], "msilib.add_tables(database, module)": ["add_tables"], "msilib.init_database(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)": ["init_database"], "msilib.schema": ["msilib.schema"], "msilib.sequence": ["msilib.sequence"], "msilib.text": ["msilib.text"], "msvcrt.LK_LOCK": ["msvcrt.LK_LOCK"], "msvcrt.LK_RLCK": ["msvcrt.LK_RLCK"], "msvcrt.get_osfhandle(fd)": ["get_osfhandle"], "msvcrt.getch()": ["getch"], "msvcrt.getche()": ["getche"], "msvcrt.getwch()": ["getwch"], "msvcrt.getwche()": ["getwche"], "msvcrt.heapmin()": ["heapmin"], "msvcrt.kbhit()": ["kbhit"], "msvcrt.locking(fd, mode, nbytes)": ["locking"], "msvcrt.open_osfhandle(handle, flags)": ["open_osfhandle"], "msvcrt.putch(char)": ["putch"], "msvcrt.putwch(unicode_char)": ["putwch"], "msvcrt.setmode(fd, flags)": ["setmode"], "msvcrt.ungetch(char)": ["ungetch"], "msvcrt.ungetwch(unicode_char)": ["ungetwch"], "multiprocessing.Array(typecode_or_type, size_or_initializer)": ["Array"], "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=True)": ["Array", "multiprocessing.Array(typecode_or_type, size_or_initializer, lock=False)"], "multiprocessing.AuthenticationError": ["multiprocessing.AuthenticationError"], "multiprocessing.Barrier(parties)": ["Barrier"], "multiprocessing.Barrier(parties, action)": ["Barrier"], "multiprocessing.BoundedSemaphore()": ["BoundedSemaphore"], "multiprocessing.BufferTooShort": ["multiprocessing.BufferTooShort"], "multiprocessing.Condition()": ["Condition"], "multiprocessing.Condition(lock)": ["Condition"], "multiprocessing.JoinableQueue()": ["JoinableQueue"], "multiprocessing.JoinableQueue(maxsize)": ["JoinableQueue"], "multiprocessing.Lock": ["multiprocessing.Lock"], "multiprocessing.Manager()": ["Manager"], "multiprocessing.Pipe()": ["Pipe"], "multiprocessing.Process()": ["Process"], "multiprocessing.Process(args=())": ["Process"], "multiprocessing.Process(daemon=None)": ["Process", "multiprocessing.Process(daemon=None)"], "multiprocessing.Process(group=None)": ["Process", "multiprocessing.Process(group=None)"], "multiprocessing.Process(group=None, args=())": ["Process", "multiprocessing.Process(group=None, args=())"], "multiprocessing.Process(group=None, name=None)": ["Process", "multiprocessing.Process(group=None, name=None)"], "multiprocessing.Process(kwargs={})": ["Process"], "multiprocessing.Process(name=None)": ["Process", "multiprocessing.Process(name=None)"], "multiprocessing.Process(target=None)": ["Process", "multiprocessing.Process(target=None)"], "multiprocessing.ProcessError": ["multiprocessing.ProcessError"], "multiprocessing.Queue()": ["Queue"], "multiprocessing.Queue(maxsize)": ["Queue"], "multiprocessing.Semaphore()": ["Semaphore"], "multiprocessing.SimpleQueue": ["multiprocessing.SimpleQueue"], "multiprocessing.TimeoutError": ["multiprocessing.TimeoutError"], "multiprocessing.Value(typecode_or_type, *args)": ["Value"], "multiprocessing.Value(typecode_or_type, *args, lock=True)": ["Value", "multiprocessing.Value(typecode_or_type, *args, lock=False)"], "multiprocessing.active_children()": ["active_children", "multiprocessing.active_count()", "multiprocessing.activeCount()", "multiprocessing.create_archive()", "multiprocessing._git_archive_link()", "multiprocessing.parse_date_fields()", "multiprocessing.clear_cache()", "multiprocessing.ascii_decode()", "multiprocessing.make_archive()", "multiprocessing._ishidden()", "multiprocessing.compile_file()", "multiprocessing._copy_archive()", "multiprocessing.patch_pickle()", "multiprocessing._screen_docrevise()", "multiprocessing.ascii_encode()"], "multiprocessing.connection.Client(address)": ["Client", "multiprocessing.connection.listen(address)", "multiprocessing.connection._clip(address)", "multiprocessing.connection.clim(address)", "multiprocessing.connection.identity(address)", "multiprocessing.connection.split(address)", "multiprocessing.connection.unlink(address)", "multiprocessing.connection.print_list(address)", "multiprocessing.connection.axline(address)", "multiprocessing.connection.rsplit(address)", "multiprocessing.connection.circle(address)", "multiprocessing.connection._decode_line(address)", "multiprocessing.connection.install(address)", "multiprocessing.connection.compile(address)", "multiprocessing.connection.as_completed(address)"], "multiprocessing.connection.Client(address, family)": ["Client", "multiprocessing.connection.listen(address, family)", "multiprocessing.connection._clip(address, family)", "multiprocessing.connection.clim(address, family)", "multiprocessing.connection.identity(address, family)", "multiprocessing.connection.split(address, family)", "multiprocessing.connection.unlink(address, family)", "multiprocessing.connection.print_list(address, family)", "multiprocessing.connection.axline(address, family)", "multiprocessing.connection.rsplit(address, family)", "multiprocessing.connection.circle(address, family)", "multiprocessing.connection._decode_line(address, family)", "multiprocessing.connection.install(address, family)", "multiprocessing.connection.compile(address, family)", "multiprocessing.connection.as_completed(address, family)"], "multiprocessing.connection.Listener(address)": ["Listener"], "multiprocessing.connection.Listener(address, family, backlog)": ["Listener"], "multiprocessing.connection.answer_challenge(connection, authkey)": ["answer_challenge", "multiprocessing.connection.ensure_has_len(connection, authkey)", "multiprocessing.connection._check_arg_length(connection, authkey)", "multiprocessing.connection.nanpercentile(connection, authkey)", "multiprocessing.connection.deliver_challenge(connection, authkey)", "multiprocessing.connection.long_has_args(connection, authkey)", "multiprocessing.connection.header_length(connection, authkey)", "multiprocessing.connection.kleene_and(connection, authkey)", "multiprocessing.connection.fake_range(connection, authkey)", "multiprocessing.connection._clean_args(connection, authkey)", "multiprocessing.connection.seterrcall(connection, authkey)", "multiprocessing.connection.closerange(connection, authkey)", "multiprocessing.connection.install_opener(connection, authkey)", "multiprocessing.connection.parse_table_schema(connection, authkey)", "multiprocessing.connection.askretrycancel(connection, authkey)"], "multiprocessing.connection.deliver_challenge(connection, authkey)": ["deliver_challenge", "multiprocessing.connection.is_per_channel(connection, authkey)", "multiprocessing.connection.change_root(connection, authkey)", "multiprocessing.connection.ensure_relative(connection, authkey)", "multiprocessing.connection._check_resolvers(connection, authkey)", "multiprocessing.connection._alen_dispathcer(connection, authkey)", "multiprocessing.connection.ensure_clean_dir(connection, authkey)", "multiprocessing.connection.enter_dual_level(connection, authkey)", "multiprocessing.connection.answer_challenge(connection, authkey)", "multiprocessing.connection._angle_dispatcher(connection, authkey)", "multiprocessing.connection.register_package(connection, authkey)", "multiprocessing.connection.get_callable_name(connection, authkey)", "multiprocessing.connection._center_dispatcher(connection, authkey)", "multiprocessing.connection.legdiv(connection, authkey)", "multiprocessing.connection.installHandler(connection, authkey)"], "multiprocessing.connection.wait(object_list)": ["wait", "multiprocessing.connection._wait(object_list)", "multiprocessing.connection.wait4(object_list)", "multiprocessing.connection.wait3(object_list)", "multiprocessing.connection._wrapit(object_list)", "multiprocessing.connection.waitid(object_list)", "multiprocessing.connection.what(object_list)", "multiprocessing.connection.sigwait(object_list)", "multiprocessing.connection.waitpid(object_list)", "multiprocessing.connection.write(object_list)", "multiprocessing.connection.width(object_list)", "multiprocessing.connection.at(object_list)", "multiprocessing.connection.wait_for(object_list)", "multiprocessing.connection._wait_all(object_list)", "multiprocessing.connection.pwrite(object_list)"], "multiprocessing.connection.wait(object_list, timeout=None)": ["wait", "multiprocessing.connection.wait(object_list, timeout=None)", "multiprocessing.connection._wait(object_list, timeout=None)", "multiprocessing.connection.wait4(object_list, timeout=None)", "multiprocessing.connection.wait3(object_list, timeout=None)", "multiprocessing.connection._wrapit(object_list, timeout=None)", "multiprocessing.connection.waitid(object_list, timeout=None)", "multiprocessing.connection.what(object_list, timeout=None)", "multiprocessing.connection.sigwait(object_list, timeout=None)", "multiprocessing.connection.waitpid(object_list, timeout=None)", "multiprocessing.connection.write(object_list, timeout=None)", "multiprocessing.connection.width(object_list, timeout=None)", "multiprocessing.connection.at(object_list, timeout=None)", "multiprocessing.connection.wait_for(object_list, timeout=None)", "multiprocessing.connection._wait_all(object_list, timeout=None)"], "multiprocessing.cpu_count()": ["cpu_count"], "multiprocessing.current_process()": ["current_process", "multiprocessing._preprocess_for_cut()", "multiprocessing.current_thread()", "multiprocessing._grad_preprocess()", "multiprocessing.current_task()", "multiprocessing.currentframe()", "multiprocessing.init_process_group()", "multiprocessing._init_process_group()", "multiprocessing.create_subprocess_exec()", "multiprocessing._postprocess_for_cut()", "multiprocessing._process_class()", "multiprocessing.currentThread()", "multiprocessing._process_date_conversion()", "multiprocessing.create_subprocess_shell()", "multiprocessing.currency()"], "multiprocessing.freeze_support()": ["freeze_support"], "multiprocessing.get_all_start_methods()": ["get_all_start_methods"], "multiprocessing.get_context()": ["get_context"], "multiprocessing.get_context(method=None)": ["get_context", "multiprocessing.get_context(method=None)"], "multiprocessing.get_logger()": ["get_logger"], "multiprocessing.get_start_method()": ["get_start_method"], "multiprocessing.get_start_method(allow_none=False)": ["get_start_method", "multiprocessing.get_start_method(allow_none=True)"], "multiprocessing.log_to_stderr()": ["log_to_stderr"], "multiprocessing.managers.BaseManager(address)": ["BaseManager"], "multiprocessing.managers.BaseManager(address, authkey)": ["BaseManager"], "multiprocessing.managers.Namespace": ["multiprocessing.managers.Namespace"], "multiprocessing.managers.SyncManager": ["multiprocessing.managers.SyncManager"], "multiprocessing.pool.Pool()": ["Pool"], "multiprocessing.pool.Pool(processes)": ["Pool"], "multiprocessing.pool.Pool(processes, initializer)": ["Pool"], "multiprocessing.pool.Pool(processes, initializer, initargs)": ["Pool"], "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild)": ["Pool"], "multiprocessing.pool.Pool(processes, initializer, initargs, maxtasksperchild, context)": ["Pool"], "multiprocessing.set_executable()": ["set_executable"], "multiprocessing.set_start_method(method)": ["set_start_method"], "multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer)": ["Array"], "multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, lock=True)": ["Array", "multiprocessing.sharedctypes.Array(typecode_or_type, size_or_initializer, lock=False)"], "multiprocessing.sharedctypes.RawArray(typecode_or_type, size_or_initializer)": ["RawArray"], "multiprocessing.sharedctypes.RawValue(typecode_or_type, *args)": ["RawValue"], "multiprocessing.sharedctypes.Value(typecode_or_type, *args)": ["Value"], "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=True)": ["Value", "multiprocessing.sharedctypes.Value(typecode_or_type, *args, lock=False)"], "multiprocessing.sharedctypes.copy(obj)": ["copy"], "multiprocessing.sharedctypes.synchronized(obj, lock)": ["synchronized"], "netrc.NetrcParseError": ["netrc.NetrcParseError"], "netrc.__repr__()": ["__repr__"], "netrc.authenticators(host)": ["authenticators"], "netrc.hosts": ["netrc.hosts"], "netrc.macros": ["netrc.macros"], "netrc.netrc()": ["netrc"], "next(iterator)": ["next", "text(iterator)", "_exit(iterator)", "exit(iterator)", "index(iterator)", "ngettext(iterator)", "unhex(iterator)", "ne(iterator)", "nextfile(iterator)", "__index__(iterator)", "findtext(iterator)", "__ne__(iterator)", "nextmonth(iterator)", "lngettext(iterator)", "dngettext(iterator)"], "next(iterator, default)": ["next", "text(iterator, default)", "_exit(iterator, default)", "exit(iterator, default)", "index(iterator, default)", "ngettext(iterator, default)", "unhex(iterator, default)", "ne(iterator, default)", "nextfile(iterator, default)", "__index__(iterator, default)", "findtext(iterator, default)", "__ne__(iterator, default)", "nextmonth(iterator, default)", "lngettext(iterator, default)", "dngettext(iterator, default)"], "nis.cat(mapname)": ["cat"], "nis.cat(mapname, domain=default_domain)": ["cat"], "nis.error": ["nis.error"], "nis.maps()": ["maps"], "nis.match(key, mapname)": ["match"], "nis.match(key, mapname, domain=default_domain)": ["match"], "nntp_ssl.response": ["nntp_ssl.response"], "nntplib.NNTP(host)": ["NNTP"], "nntplib.NNTP(host, password=None)": ["NNTP", "nntplib.NNTP(host, password=None)"], "nntplib.NNTP(host, port=119)": ["NNTP", "nntplib.NNTP(host, port='119')"], "nntplib.NNTP(host, port=119, password=None)": ["NNTP", "nntplib.NNTP(host, port=119, password=None)", "nntplib.NNTP(host, port='119', password=None)"], "nntplib.NNTP(host, port=119, usenetrc=False)": ["NNTP", "nntplib.NNTP(host, port=119, usenetrc=True)", "nntplib.NNTP(host, port='119', usenetrc=False)"], "nntplib.NNTP(host, timeout)": ["NNTP"], "nntplib.NNTP(host, timeout, password=None)": ["NNTP", "nntplib.NNTP(host, timeout, password=None)"], "nntplib.NNTP(host, timeout, port=119)": ["NNTP", "nntplib.NNTP(host, timeout, port='119')"], "nntplib.NNTP(host, timeout, port=119, password=None)": ["NNTP", "nntplib.NNTP(host, timeout, port=119, password=None)", "nntplib.NNTP(host, timeout, port='119', password=None)"], "nntplib.NNTP(host, timeout, port=119, usenetrc=False)": ["NNTP", "nntplib.NNTP(host, timeout, port=119, usenetrc=True)", "nntplib.NNTP(host, timeout, port='119', usenetrc=False)"], "nntplib.NNTP(host, timeout, user=None)": ["NNTP", "nntplib.NNTP(host, timeout, user=None)"], "nntplib.NNTP(host, user=None)": ["NNTP", "nntplib.NNTP(host, user=None)"], "nntplib.NNTPDataError": ["nntplib.NNTPDataError"], "nntplib.NNTPPermanentError": ["nntplib.NNTPPermanentError"], "nntplib.NNTPProtocolError": ["nntplib.NNTPProtocolError"], "nntplib.NNTPReplyError": ["nntplib.NNTPReplyError"], "nntplib.NNTPTemporaryError": ["nntplib.NNTPTemporaryError"], "nntplib.NNTP_SSL(host)": ["NNTP_SSL"], "nntplib.NNTP_SSL(host, password=None)": ["NNTP_SSL", "nntplib.NNTP_SSL(host, password=None)"], "nntplib.NNTP_SSL(host, port=563)": ["NNTP_SSL", "nntplib.NNTP_SSL(host, port='563')"], "nntplib.NNTP_SSL(host, port=563, password=None)": ["NNTP_SSL", "nntplib.NNTP_SSL(host, port=563, password=None)", "nntplib.NNTP_SSL(host, port='563', password=None)"], "nntplib.NNTP_SSL(host, port=563, user=None)": ["NNTP_SSL", "nntplib.NNTP_SSL(host, port=563, user=None)", "nntplib.NNTP_SSL(host, port='563', user=None)"], "nntplib.NNTP_SSL(host, timeout)": ["NNTP_SSL"], "nntplib.NNTP_SSL(host, timeout, password=None)": ["NNTP_SSL", "nntplib.NNTP_SSL(host, timeout, password=None)"], "nntplib.NNTP_SSL(host, timeout, port=563)": ["NNTP_SSL", "nntplib.NNTP_SSL(host, timeout, port='563')"], "nntplib.NNTP_SSL(host, timeout, user=None)": ["NNTP_SSL", "nntplib.NNTP_SSL(host, timeout, user=None)"], "nntplib.NNTP_SSL(host, user=None)": ["NNTP_SSL", "nntplib.NNTP_SSL(host, user=None)"], "nntplib.decode_header(header_str)": ["decode_header", "nntplib.header_decode(header_str)", "nntplib.header_encode(header_str)", "nntplib._email_decode_header(header_str)", "nntplib.escape_decode(header_str)", "nntplib.read_code(header_str)", "nntplib.readbuffer_encode(header_str)", "nntplib.header_check(header_str)", "nntplib.escape_encode(header_str)", "nntplib.decode_params(header_str)", "nntplib.ensure_decoded(header_str)", "nntplib._ensure_decoded(header_str)", "nntplib._decode_line(header_str)", "nntplib._hex_code(header_str)", "nntplib.decode_q(header_str)"], "node_visitor.generic_visit(node)": ["generic_visit"], "node_visitor.visit(node)": ["visit"], "non_callable_magic_mock.code": ["non_callable_magic_mock.code"], "non_callable_magic_mock.headers": ["non_callable_magic_mock.headers"], "non_callable_magic_mock.reason": ["non_callable_magic_mock.reason"], "nt_event_log_handler.close()": ["close"], "nt_event_log_handler.emit(record)": ["emit"], "null_handler.createLock()": ["createLock"], "null_handler.emit(record)": ["emit"], "null_handler.handle(record)": ["handle"], "null_importer.find_module(fullname)": ["find_module"], "null_importer.find_module(fullname, path)": ["find_module"], "null_translations._parse(fp)": ["_parse"], "null_translations.add_fallback(fallback)": ["add_fallback"], "null_translations.charset()": ["charset"], "null_translations.info()": ["info"], "null_translations.install()": ["install"], "null_translations.install(names=None)": ["install", "null_translations.install(names=None)"], "null_translations.lngettext(singular, plural, n)": ["lngettext"], "null_translations.ngettext(singular, plural, n)": ["ngettext"], "null_translations.output_charset()": ["output_charset"], "null_translations.set_output_charset(charset)": ["set_output_charset"], "numbers.Complex": ["numbers.Complex"], "numbers.Integral": ["numbers.Integral"], "numbers.Number": ["numbers.Number"], "numbers.Rational": ["numbers.Rational"], "numbers.Real": ["numbers.Real"], "object": ["object"], "object.__dict__": ["object.__dict__"], "object.__getnewargs__()": ["__getnewargs__"], "object.__getnewargs_ex__()": ["__getnewargs_ex__"], "object.__getstate__()": ["__getstate__"], "object.__reduce__()": ["__reduce__"], "object.__reduce_ex__(protocol)": ["__reduce_ex__"], "object.__setstate__(state)": ["__setstate__"], "oct(x)": ["oct", "concat(x)", "__not__(x)", "hot(x)", "not_(x)", "__concat__(x)", "doc(x)", "locate(x)", "cut(x)", "loc(x)", "dot(x)", "iconcat(x)", "__iconcat__(x)", "connect(x)", "product(x)"], "offset": ["offset"], "opcode": ["opcode"], "open(file)": ["open", "_open(file)", "open_latin1(file)", "popen(file)", "bltn_open(file)", "OpenWrapper(file)", "_builtin_open(file)", "urlopen(file)", "pie(file)", "_run_code(file)", "compress(file)", "_popen(file)", "byte_compile(file)", "boxplot(file)", "pen(file)"], "open(file, buffering=-1)": ["open", "open(file, buffering=(- '1'))", "_open(file, buffering=(- 1))", "open_latin1(file, buffering=(- 1))", "popen(file, buffering=(- 1))", "bltn_open(file, buffering=(- 1))", "OpenWrapper(file, buffering=(- 1))", "_builtin_open(file, buffering=(- 1))", "urlopen(file, buffering=(- 1))", "pie(file, buffering=(- 1))", "_run_code(file, buffering=(- 1))", "compress(file, buffering=(- 1))", "_popen(file, buffering=(- 1))", "byte_compile(file, buffering=(- 1))", "boxplot(file, buffering=(- 1))"], "open(file, closefd=True)": ["open", "open(file, closefd=False)", "_open(file, closefd=True)", "open_latin1(file, closefd=True)", "popen(file, closefd=True)", "bltn_open(file, closefd=True)", "OpenWrapper(file, closefd=True)", "_builtin_open(file, closefd=True)", "urlopen(file, closefd=True)", "pie(file, closefd=True)", "_run_code(file, closefd=True)", "compress(file, closefd=True)", "_popen(file, closefd=True)", "byte_compile(file, closefd=True)", "boxplot(file, closefd=True)"], "open(file, encoding=None)": ["open", "open(file, encoding=None)", "_open(file, encoding=None)", "open_latin1(file, encoding=None)", "popen(file, encoding=None)", "bltn_open(file, encoding=None)", "OpenWrapper(file, encoding=None)", "_builtin_open(file, encoding=None)", "urlopen(file, encoding=None)", "pie(file, encoding=None)", "_run_code(file, encoding=None)", "compress(file, encoding=None)", "_popen(file, encoding=None)", "byte_compile(file, encoding=None)", "boxplot(file, encoding=None)"], "open(file, errors=None)": ["open", "open(file, errors=None)", "_open(file, errors=None)", "open_latin1(file, errors=None)", "popen(file, errors=None)", "bltn_open(file, errors=None)", "OpenWrapper(file, errors=None)", "_builtin_open(file, errors=None)", "urlopen(file, errors=None)", "pie(file, errors=None)", "_run_code(file, errors=None)", "compress(file, errors=None)", "_popen(file, errors=None)", "byte_compile(file, errors=None)", "boxplot(file, errors=None)"], "open(file, mode='r')": ["open", "open(file, mode=1)", "_open(file, mode='r')", "open_latin1(file, mode='r')", "popen(file, mode='r')", "bltn_open(file, mode='r')", "OpenWrapper(file, mode='r')", "_builtin_open(file, mode='r')", "urlopen(file, mode='r')", "pie(file, mode='r')", "_run_code(file, mode='r')", "compress(file, mode='r')", "_popen(file, mode='r')", "byte_compile(file, mode='r')", "boxplot(file, mode='r')"], "open(file, mode='r', buffering=-1)": ["open", "open(file, mode=1.0, buffering=(- '1'))", "_open(file, mode='r', buffering=(- 1))", "open_latin1(file, mode='r', buffering=(- 1))", "popen(file, mode='r', buffering=(- 1))", "bltn_open(file, mode='r', buffering=(- 1))", "OpenWrapper(file, mode='r', buffering=(- 1))", "_builtin_open(file, mode='r', buffering=(- 1))", "urlopen(file, mode='r', buffering=(- 1))", "pie(file, mode='r', buffering=(- 1))", "_run_code(file, mode='r', buffering=(- 1))", "compress(file, mode='r', buffering=(- 1))", "_popen(file, mode='r', buffering=(- 1))", "byte_compile(file, mode='r', buffering=(- 1))", "boxplot(file, mode='r', buffering=(- 1))"], "open(file, mode='r', encoding=None)": ["open", "open(file, mode='r', encoding=None)", "open(file, mode=1, encoding=None)", "_open(file, mode='r', encoding=None)", "open_latin1(file, mode='r', encoding=None)", "popen(file, mode='r', encoding=None)", "bltn_open(file, mode='r', encoding=None)", "OpenWrapper(file, mode='r', encoding=None)", "_builtin_open(file, mode='r', encoding=None)", "urlopen(file, mode='r', encoding=None)", "pie(file, mode='r', encoding=None)", "_run_code(file, mode='r', encoding=None)", "compress(file, mode='r', encoding=None)", "_popen(file, mode='r', encoding=None)", "byte_compile(file, mode='r', encoding=None)"], "open(file, newline=None)": ["open", "open(file, newline=None)", "_open(file, newline=None)", "open_latin1(file, newline=None)", "popen(file, newline=None)", "bltn_open(file, newline=None)", "OpenWrapper(file, newline=None)", "_builtin_open(file, newline=None)", "urlopen(file, newline=None)", "pie(file, newline=None)", "_run_code(file, newline=None)", "compress(file, newline=None)", "_popen(file, newline=None)", "byte_compile(file, newline=None)", "boxplot(file, newline=None)"], "open(file, opener=None)": ["open", "open(file, opener=None)", "_open(file, opener=None)", "open_latin1(file, opener=None)", "popen(file, opener=None)", "bltn_open(file, opener=None)", "OpenWrapper(file, opener=None)", "_builtin_open(file, opener=None)", "urlopen(file, opener=None)", "pie(file, opener=None)", "_run_code(file, opener=None)", "compress(file, opener=None)", "_popen(file, opener=None)", "byte_compile(file, opener=None)", "boxplot(file, opener=None)"], "operator.__abs__(obj)": ["__abs__", "operator._abs(obj)", "operator.abs(obj)", "operator.barbs(obj)", "operator.isabs(obj)", "operator._tables(obj)", "operator.abspath(obj)", "operator.asbytes(obj)", "operator.cast(obj)", "operator._cast(obj)", "operator._acos(obj)", "operator.axes(obj)", "operator.axis(obj)", "operator.label(obj)", "operator.loads(obj)"], "operator.__and__(a, b)": ["__and__", "operator.and_(a, b)", "operator.__iand__(a, b)", "operator.rand_(a, b)", "operator.iand(a, b)", "operator._valnd(a, b)", "operator.rands(a, b)", "operator.vander(a, b)", "operator.add(a, b)", "operator._add(a, b)", "operator.pad(a, b)", "operator.nanstd(a, b)", "operator.any(a, b)", "operator._expand(a, b)", "operator.__add__(a, b)"], "operator.__contains__(a, b)": ["__contains__", "operator.contains(a, b)", "operator.constant(a, b)", "operator._counts(a, b)", "operator._count_leading(a, b)", "operator.count(a, b)", "operator._comment_line(a, b)", "operator.WIFCONTINUED(a, b)", "operator.count_masked(a, b)", "operator._clone_inputs(a, b)", "operator.assert_contains_all(a, b)", "operator.coroutine(a, b)", "operator._find_contraction(a, b)", "operator.nansum(a, b)", "operator.concat(a, b)"], "operator.__delitem__(a, b)": ["__delitem__", "operator.delitem(a, b)", "operator.delete(a, b)", "operator.__getitem__(a, b)", "operator.setitem(a, b)", "operator.getitem(a, b)", "operator.__setitem__(a, b)", "operator.dsplit(a, b)", "operator.listen(a, b)", "operator.replicate(a, b)", "operator.det(a, b)", "operator.deregister(a, b)", "operator.delocalize(a, b)", "operator.delaxes(a, b)", "operator.getline(a, b)"], "operator.__eq__(a, b)": ["__eq__", "operator.eq(a, b)", "operator._eq(a, b)", "operator.len_q(a, b)", "operator.naneq(a, b)", "operator.equal(a, b)", "operator.__ge__(a, b)", "operator.le(a, b)", "operator.ge(a, b)", "operator.ne(a, b)", "operator.qr(a, b)", "operator.__le__(a, b)", "operator.strseq(a, b)", "operator.__ne__(a, b)", "operator.joinseq(a, b)"], "operator.__ge__(a, b)": ["__ge__", "operator.ge(a, b)", "operator.get(a, b)", "operator.grey(a, b)", "operator.getp(a, b)", "operator.gelu(a, b)", "operator.merge(a, b)", "operator.angle(a, b)", "operator.purge(a, b)", "operator.nange(a, b)", "operator.range(a, b)", "operator.pager(a, b)", "operator.usage(a, b)", "operator.getenv(a, b)", "operator.le(a, b)"], "operator.__getitem__(a, b)": ["__getitem__", "operator.getitem(a, b)", "operator.setitem(a, b)", "operator.__setitem__(a, b)", "operator.getwriter(a, b)", "operator.getitimer(a, b)", "operator.get_writer(a, b)", "operator.delitem(a, b)", "operator.getline(a, b)", "operator.__delitem__(a, b)", "operator._get_stream(a, b)", "operator.getfile(a, b)", "operator._get_writer(a, b)", "operator.gettext(a, b)", "operator.getsize(a, b)"], "operator.__iadd__(a, b)": ["__iadd__", "operator.iadd(a, b)", "operator.add(a, b)", "operator._add(a, b)", "operator.__add__(a, b)", "operator.__iand__(a, b)", "operator.radd(a, b)", "operator.iand(a, b)", "operator._id(a, b)", "operator.imread(a, b)", "operator.legadd(a, b)", "operator._gridnd(a, b)", "operator.lagadd(a, b)", "operator.__and__(a, b)", "operator.iat(a, b)"], "operator.__iand__(a, b)": ["__iand__", "operator.iand(a, b)", "operator.__and__(a, b)", "operator.and_(a, b)", "operator.rand_(a, b)", "operator.__iadd__(a, b)", "operator.find(a, b)", "operator.iadd(a, b)", "operator.in1d(a, b)", "operator.bind(a, b)", "operator.index(a, b)", "operator._valnd(a, b)", "operator._in(a, b)", "operator.rands(a, b)", "operator._id(a, b)"], "operator.__iconcat__(a, b)": ["__iconcat__", "operator.iconcat(a, b)", "operator.concat(a, b)", "operator.__concat__(a, b)", "operator.connect(a, b)", "operator.disconnect(a, b)", "operator.concatenate(a, b)", "operator.constant(a, b)", "operator.count(a, b)", "operator.conjugate(a, b)", "operator.locate(a, b)", "operator._counts(a, b)", "operator.iat(a, b)", "operator.ion(a, b)", "operator.concat_compat(a, b)"], "operator.__index__(a)": ["__index__", "operator.index(a)", "operator.rindex(a)", "operator.indexOf(a)", "operator.opindex(a)", "operator.findtext(a)", "operator.binhex(a)", "operator._indent(a)", "operator.indent(a)", "operator._new_Index(a)", "operator._dexp(a)", "operator.indices(a)", "operator.__iand__(a)", "operator.node(a)", "operator.find(a)"], "operator.__inv__(obj)": ["__inv__", "operator.inv(obj)", "operator.pinv(obj)", "operator._in(obj)", "operator._sin(obj)", "operator.invert(obj)", "operator.itn(obj)", "operator.ion(obj)", "operator.__invert__(obj)", "operator._div(obj)", "operator.min(obj)", "operator.__iand__(obj)", "operator._amin(obj)", "operator.init(obj)", "operator.main(obj)"], "operator.__invert__(obj)": ["__invert__", "operator.invert(obj)", "operator.insert(obj)", "operator.convert(obj)", "operator._convert(obj)", "operator.inner(obj)", "operator.interact(obj)", "operator.__inv__(obj)", "operator.quiver(obj)", "operator._indent(obj)", "operator.interp(obj)", "operator.inv(obj)", "operator.indent(obj)", "operator.winter(obj)", "operator._invoke_rpc(obj)"], "operator.__le__(a, b)": ["__le__", "operator.le(a, b)", "operator.alen(a, b)", "operator.tile(a, b)", "operator.left(a, b)", "operator._lerp(a, b)", "operator.less(a, b)", "operator.label(a, b)", "operator.angle(a, b)", "operator.len_q(a, b)", "operator.sleep(a, b)", "operator.solve(a, b)", "operator.close(a, b)", "operator.lseek(a, b)", "operator.clear(a, b)"], "operator.__lshift__(a, b)": ["__lshift__", "operator.lshift(a, b)", "operator.ilshift(a, b)", "operator.__ilshift__(a, b)", "operator.rshift(a, b)", "operator.__rshift__(a, b)", "operator.irshift(a, b)", "operator.__irshift__(a, b)", "operator.left_shift(a, b)", "operator.fftshift(a, b)", "operator._siftup(a, b)", "operator.ifftshift(a, b)", "operator.left(a, b)", "operator.hfft(a, b)", "operator.ifft(a, b)"], "operator.__lt__(a, b)": ["__lt__", "operator.lt(a, b)", "operator.tilt(a, b)", "operator.left(a, b)", "operator.plot(a, b)", "operator.list(a, b)", "operator.split(a, b)", "operator.lstsq(a, b)", "operator.ljust(a, b)", "operator.nanlt(a, b)", "operator.lstat(a, b)", "operator.__lshift__(a, b)", "operator.lstrip(a, b)", "operator.le(a, b)", "operator.st(a, b)"], "operator.__mul__(a, b)": ["__mul__", "operator.mul(a, b)", "operator.imul(a, b)", "operator.__imul__(a, b)", "operator.rmul(a, b)", "operator.__matmul__(a, b)", "operator.XML(a, b)", "operator.legmul(a, b)", "operator.matmul(a, b)", "operator.lagmul(a, b)", "operator.legmulx(a, b)", "operator.polymul(a, b)", "operator.__imatmul__(a, b)", "operator.hermmul(a, b)", "operator.lagmulx(a, b)"], "operator.__ne__(a, b)": ["__ne__", "operator.ne(a, b)", "operator.neg(a, b)", "operator.new(a, b)", "operator.__neg__(a, b)", "operator.done(a, b)", "operator.bone(a, b)", "operator.nice(a, b)", "operator.ones(a, b)", "operator.node(a, b)", "operator._node(a, b)", "operator.angle(a, b)", "operator.index(a, b)", "operator.inner(a, b)", "operator.onkey(a, b)"], "operator.__neg__(obj)": ["__neg__", "operator.neg(obj)", "operator.ne(obj)", "operator.__ne__(obj)", "operator.new(obj)", "operator.eig(obj)", "operator.done(obj)", "operator.bone(obj)", "operator.nice(obj)", "operator.eigh(obj)", "operator.ones(obj)", "operator.node(obj)", "operator._node(obj)", "operator._cnfmerge(obj)", "operator.isneginf(obj)"], "operator.__not__(obj)": ["__not__", "operator.not_(obj)", "operator.notna(obj)", "operator._not_in(obj)", "operator.nts(obj)", "operator.hot(obj)", "operator.is_not(obj)", "operator.dot(obj)", "operator.nti(obj)", "operator.notnull(obj)", "operator._can_dot(obj)", "operator.unquote(obj)", "operator._noop(obj)", "operator.init(obj)", "operator.goto(obj)"], "operator.__or__(a, b)": ["__or__", "operator.or_(a, b)", "operator.xor(a, b)", "operator.ror_(a, b)", "operator.__ior__(a, b)", "operator.__xor__(a, b)", "operator.ior(a, b)", "operator.xcor(a, b)", "operator.norm(a, b)", "operator.fork(a, b)", "operator.ycor(a, b)", "operator.rxor(a, b)", "operator.__ixor__(a, b)", "operator._fork(a, b)", "operator.ixor(a, b)"], "operator.__setitem__(a, b, c)": ["__setitem__", "operator.setitem(a, b, c)", "operator.__getitem__(a, b, c)", "operator.getitem(a, b, c)", "operator.setitimer(a, b, c)", "operator.stem(a, b, c)", "operator.delitem(a, b, c)", "operator.__delitem__(a, b, c)", "operator.setquit(a, b, c)", "operator.istitle(a, b, c)", "operator.suptitle(a, b, c)", "operator.settrace(a, b, c)", "operator.title(a, b, c)", "operator.settiltangle(a, b, c)", "operator._setdef(a, b, c)"], "operator.__xor__(a, b)": ["__xor__", "operator.xor(a, b)", "operator.xcor(a, b)", "operator.rxor(a, b)", "operator.__ixor__(a, b)", "operator.ixor(a, b)", "operator.or_(a, b)", "operator.__or__(a, b)", "operator.xcorr(a, b)", "operator._export(a, b)", "operator.ror_(a, b)", "operator.__ior__(a, b)", "operator.export(a, b)", "operator.ior(a, b)", "operator.norm(a, b)"], "operator.add(a, b)": ["add", "operator._add(a, b)", "operator.__add__(a, b)", "operator.__iadd__(a, b)", "operator.radd(a, b)", "operator.iadd(a, b)", "operator.__and__(a, b)", "operator.pad(a, b)", "operator.legadd(a, b)", "operator.and_(a, b)", "operator.lagadd(a, b)", "operator.hermadd(a, b)", "operator.chebadd(a, b)", "operator.add_ops(a, b)", "operator.adagrad(a, b)"], "operator.and_(a, b)": ["and_", "operator.__and__(a, b)", "operator.__iand__(a, b)", "operator.rand_(a, b)", "operator.iand(a, b)", "operator._valnd(a, b)", "operator.rands(a, b)", "operator.vander(a, b)", "operator.add(a, b)", "operator._add(a, b)", "operator.pad(a, b)", "operator.nanstd(a, b)", "operator.any(a, b)", "operator._expand(a, b)", "operator.__add__(a, b)"], "operator.attrgetter(*attrs)": ["attrgetter"], "operator.concat(a, b)": ["concat", "operator.concatenate(a, b)", "operator.locate(a, b)", "operator._concat_datetime(a, b)", "operator.ontimer(a, b)", "operator._isna(a, b)", "operator.broadcast_arrays(a, b)", "operator.fuse_conv_bn_jit(a, b)", "operator.crc32(a, b)", "operator.triu_indices_from(a, b)", "operator.tril_indices_from(a, b)", "operator.sanitize_to_nanoseconds(a, b)", "operator.getclasstree(a, b)", "operator.decodestring(a, b)", "operator._reset_option(a, b)"], "operator.contains(a, b)": ["contains", "operator.__contains__(a, b)", "operator.constant(a, b)", "operator._counts(a, b)", "operator._count_leading(a, b)", "operator.count(a, b)", "operator._comment_line(a, b)", "operator.WIFCONTINUED(a, b)", "operator.count_masked(a, b)", "operator._clone_inputs(a, b)", "operator.assert_contains_all(a, b)", "operator.coroutine(a, b)", "operator._find_contraction(a, b)", "operator.nansum(a, b)", "operator.concat(a, b)"], "operator.countOf(a, b)": ["countOf", "operator.count(a, b)", "operator.contourf(a, b)", "operator._counts(a, b)", "operator.contour(a, b)", "operator._flop_count(a, b)", "operator.tricontourf(a, b)", "operator.concat(a, b)", "operator.cpu_count(a, b)", "operator.__concat__(a, b)", "operator._copyto(a, b)", "operator.count_nonzero(a, b)", "operator.cut(a, b)", "operator._count_to_size(a, b)", "operator.tricontour(a, b)"], "operator.delitem(a, b)": ["delitem", "operator.__delitem__(a, b)", "operator.delete(a, b)", "operator.__getitem__(a, b)", "operator.setitem(a, b)", "operator.getitem(a, b)", "operator.__setitem__(a, b)", "operator.dsplit(a, b)", "operator.listen(a, b)", "operator.replicate(a, b)", "operator.det(a, b)", "operator.deregister(a, b)", "operator.delocalize(a, b)", "operator.delaxes(a, b)", "operator.getline(a, b)"], "operator.eq(a, b)": ["eq", "operator._eq(a, b)", "operator.__eq__(a, b)", "operator.len_q(a, b)", "operator.naneq(a, b)", "operator.equal(a, b)", "operator.__ge__(a, b)", "operator.le(a, b)", "operator.ge(a, b)", "operator.ne(a, b)", "operator.qr(a, b)", "operator.__le__(a, b)", "operator.strseq(a, b)", "operator.__ne__(a, b)", "operator.joinseq(a, b)"], "operator.getitem(a, b)": ["getitem", "operator.__getitem__(a, b)", "operator.setitem(a, b)", "operator.__setitem__(a, b)", "operator.getwriter(a, b)", "operator.getitimer(a, b)", "operator.get_writer(a, b)", "operator.delitem(a, b)", "operator.getline(a, b)", "operator.__delitem__(a, b)", "operator._get_stream(a, b)", "operator.getfile(a, b)", "operator._get_writer(a, b)", "operator.gettext(a, b)", "operator.getsize(a, b)"], "operator.iadd(a, b)": ["iadd", "operator.__iadd__(a, b)", "operator.add(a, b)", "operator._add(a, b)", "operator.__add__(a, b)", "operator.__iand__(a, b)", "operator.radd(a, b)", "operator.iand(a, b)", "operator._id(a, b)", "operator.imread(a, b)", "operator.legadd(a, b)", "operator._gridnd(a, b)", "operator.lagadd(a, b)", "operator.__and__(a, b)", "operator.iat(a, b)"], "operator.iconcat(a, b)": ["iconcat", "operator.__iconcat__(a, b)", "operator.concat(a, b)", "operator.__concat__(a, b)", "operator.connect(a, b)", "operator.disconnect(a, b)", "operator.concatenate(a, b)", "operator.constant(a, b)", "operator.count(a, b)", "operator.conjugate(a, b)", "operator.locate(a, b)", "operator._counts(a, b)", "operator.iat(a, b)", "operator.ion(a, b)", "operator.concat_compat(a, b)"], "operator.ifloordiv(a, b)": ["ifloordiv", "operator.__ifloordiv__(a, b)", "operator.__floordiv__(a, b)", "operator.floordiv(a, b)", "operator.rfloordiv(a, b)", "operator.rdiv(a, b)", "operator.itruediv(a, b)", "operator.__itruediv__(a, b)", "operator.fillcolor(a, b)", "operator.lagdiv(a, b)", "operator.legdiv(a, b)", "operator._read_float(a, b)", "operator.read_float8(a, b)", "operator.fromrecords(a, b)", "operator.truediv(a, b)"], "operator.index(a)": ["index", "operator.rindex(a)", "operator.indices(a)", "operator.find(a)", "operator.finditer(a)", "operator.rfind(a)", "operator.vander(a)", "operator.findall(a)", "operator.mask_indices(a)", "operator.pinv(a)", "operator.namedtuple(a)", "operator.mknod(a)", "operator._namedtuple(a)", "operator.render_doc(a)", "operator.debug(a)"], "operator.indexOf(a, b)": ["indexOf", "operator.index(a, b)", "operator.__index__(a, b)", "operator.rindex(a, b)", "operator.opindex(a, b)", "operator.ISEOF(a, b)", "operator.findtext(a, b)", "operator.binhex(a, b)", "operator._new_Index(a, b)", "operator.lineno(a, b)", "operator._indent(a, b)", "operator.indent(a, b)", "operator.indices(a, b)", "operator.findobj(a, b)", "operator.inferno(a, b)"], "operator.is_not(a, b)": ["is_not", "operator._not_in(a, b)", "operator.__not__(a, b)", "operator.not_(a, b)", "operator._as_int(a, b)", "operator.is_tensor(a, b)", "operator._is_str(a, b)", "operator.ismount(a, b)", "operator._is_type(a, b)", "operator._is_list(a, b)", "operator._is_path(a, b)", "operator.print_list(a, b)", "operator._bits_of(a, b)", "operator._init_nt(a, b)", "operator.is_list(a, b)"], "operator.itemgetter(*items)": ["itemgetter"], "operator.itemgetter(item)": ["itemgetter"], "operator.length_hint(obj, default=0)": ["length_hint", "operator.length_hint(obj, default='0')", "operator.concatenate(obj, default=0)", "operator.legtrim(obj, default=0)", "operator.axhline(obj, default=0)", "operator.clean_fill_method(obj, default=0)", "operator.compile_path(obj, default=0)", "operator._convert_other(obj, default=0)", "operator.flatten_dtype(obj, default=0)", "operator.get_python_lib(obj, default=0)", "operator._declstringlit_match(obj, default=0)", "operator._non_attribute_end_matcher(obj, default=0)", "operator._is_legal_header_name(obj, default=0)", "operator._non_atom_end_matcher(obj, default=0)", "operator.angle(obj, default=0)"], "operator.lshift(a, b)": ["lshift", "operator.__lshift__(a, b)", "operator.ilshift(a, b)", "operator.__ilshift__(a, b)", "operator.rshift(a, b)", "operator.__rshift__(a, b)", "operator.irshift(a, b)", "operator.__irshift__(a, b)", "operator.left_shift(a, b)", "operator.fftshift(a, b)", "operator._siftup(a, b)", "operator.ifftshift(a, b)", "operator.left(a, b)", "operator.hfft(a, b)", "operator.ifft(a, b)"], "operator.lt(a, b)": ["lt", "operator.__lt__(a, b)", "operator.tilt(a, b)", "operator.left(a, b)", "operator.plot(a, b)", "operator.list(a, b)", "operator.split(a, b)", "operator.lstsq(a, b)", "operator.ljust(a, b)", "operator.nanlt(a, b)", "operator.lstat(a, b)", "operator.__lshift__(a, b)", "operator.lstrip(a, b)", "operator.le(a, b)", "operator.st(a, b)"], "operator.methodcaller(name, args...)": [], "operator.neg(obj)": ["neg", "operator.__neg__(obj)", "operator.ne(obj)", "operator.__ne__(obj)", "operator.new(obj)", "operator.eig(obj)", "operator.done(obj)", "operator.bone(obj)", "operator.nice(obj)", "operator.eigh(obj)", "operator.ones(obj)", "operator.node(obj)", "operator._node(obj)", "operator._cnfmerge(obj)", "operator.isneginf(obj)"], "operator.or_(a, b)": ["or_", "operator.__or__(a, b)", "operator.xor(a, b)", "operator.ror_(a, b)", "operator.__ior__(a, b)", "operator.__xor__(a, b)", "operator.ior(a, b)", "operator.xcor(a, b)", "operator.norm(a, b)", "operator.fork(a, b)", "operator.ycor(a, b)", "operator.rxor(a, b)", "operator.__ixor__(a, b)", "operator._fork(a, b)", "operator.ixor(a, b)"], "operator.setitem(a, b, c)": ["setitem", "operator.__setitem__(a, b, c)", "operator.__getitem__(a, b, c)", "operator.getitem(a, b, c)", "operator.setitimer(a, b, c)", "operator.stem(a, b, c)", "operator.delitem(a, b, c)", "operator.__delitem__(a, b, c)", "operator.setquit(a, b, c)", "operator.istitle(a, b, c)", "operator.suptitle(a, b, c)", "operator.settrace(a, b, c)", "operator.title(a, b, c)", "operator.settiltangle(a, b, c)", "operator._setdef(a, b, c)"], "operator.truediv(a, b)": ["truediv", "operator.__truediv__(a, b)", "operator.itruediv(a, b)", "operator.__itruediv__(a, b)", "operator.rtruediv(a, b)", "operator.rdiv(a, b)", "operator.hermediv(a, b)", "operator.readv(a, b)", "operator.preadv(a, b)", "operator.legdiv(a, b)", "operator._div(a, b)", "operator.tri(a, b)", "operator.hermdiv(a, b)", "operator.alltrue(a, b)", "operator._iterdir(a, b)"], "operator.truth(obj)": ["truth", "operator.triu(obj)", "operator.truncate(obj)", "operator.rjust(obj)", "operator.start(obj)", "operator.ftruncate(obj)", "operator._structure(obj)", "operator.rt(obj)", "operator.runctx(obj)", "operator.startswith(obj)", "operator._struct_str(obj)", "operator.constructor(obj)", "operator.arctanh(obj)", "operator.str(obj)", "operator._reconstruct(obj)"], "operator.xor(a, b)": ["xor", "operator.__xor__(a, b)", "operator.xcor(a, b)", "operator.rxor(a, b)", "operator.__ixor__(a, b)", "operator.ixor(a, b)", "operator.or_(a, b)", "operator.__or__(a, b)", "operator.xcorr(a, b)", "operator._export(a, b)", "operator.ror_(a, b)", "operator.__ior__(a, b)", "operator.export(a, b)", "operator.ior(a, b)", "operator.norm(a, b)"], "opname": ["opname"], "optparse.OptionGroup(parser, title)": ["OptionGroup"], "optparse.OptionGroup(parser, title, description=None)": ["OptionGroup", "optparse.OptionGroup(parser, title, description=None)"], "ord(c)": ["ord", "or_(c)", "__or__(c)", "xor(c)", "mod(c)", "ror_(c)", "__ior__(c)", "__mod__(c)", "__xor__(c)", "ior(c)", "forward(c)", "towards(c)", "xcor(c)", "norm(c)", "_load(c)"], "ordered_dict.move_to_end(key)": ["move_to_end"], "ordered_dict.move_to_end(key, last=True)": ["move_to_end", "ordered_dict.move_to_end(key, last=False)"], "ordered_dict.popitem()": ["popitem"], "ordered_dict.popitem(last=True)": ["popitem", "ordered_dict.popitem(last=False)"], "os.CLD_DUMPED": ["os.CLD_DUMPED"], "os.CLD_EXITED": ["os.CLD_EXITED"], "os.DirEntry": ["os.DirEntry"], "os.EX_CANTCREAT": ["os.EX_CANTCREAT"], "os.EX_CONFIG": ["os.EX_CONFIG"], "os.EX_DATAERR": ["os.EX_DATAERR"], "os.EX_IOERR": ["os.EX_IOERR"], "os.EX_NOHOST": ["os.EX_NOHOST"], "os.EX_NOPERM": ["os.EX_NOPERM"], "os.EX_NOTFOUND": ["os.EX_NOTFOUND"], "os.EX_PROTOCOL": ["os.EX_PROTOCOL"], "os.EX_USAGE": ["os.EX_USAGE"], "os.F_LOCK": ["os.F_LOCK"], "os.F_OK": ["os.F_OK"], "os.F_TEST": ["os.F_TEST"], "os.F_TLOCK": ["os.F_TLOCK"], "os.F_ULOCK": ["os.F_ULOCK"], "os.GRND_NONBLOCK": ["os.GRND_NONBLOCK"], "os.GRND_RANDOM": ["os.GRND_RANDOM"], "os.O_ASYNC": ["os.O_ASYNC"], "os.O_BINARY": ["os.O_BINARY"], "os.O_DIRECT": ["os.O_DIRECT"], "os.O_DSYNC": ["os.O_DSYNC"], "os.O_NOATIME": ["os.O_NOATIME"], "os.O_NOFOLLOW": ["os.O_NOFOLLOW"], "os.O_SHORT_LIVED": ["os.O_SHORT_LIVED"], "os.O_TEMPORARY": ["os.O_TEMPORARY"], "os.POSIX_FADV_NOREUSE": ["os.POSIX_FADV_NOREUSE"], "os.POSIX_FADV_NORMAL": ["os.POSIX_FADV_NORMAL"], "os.POSIX_FADV_RANDOM": ["os.POSIX_FADV_RANDOM"], "os.POSIX_FADV_SEQUENTIAL": ["os.POSIX_FADV_SEQUENTIAL"], "os.P_DETACH": ["os.P_DETACH"], "os.P_NOWAIT": ["os.P_NOWAIT"], "os.P_NOWAITO": ["os.P_NOWAITO"], "os.P_PGID": ["os.P_PGID"], "os.P_PID": ["os.P_PID"], "os.RTLD_GLOBAL": ["os.RTLD_GLOBAL"], "os.RTLD_LAZY": ["os.RTLD_LAZY"], "os.RTLD_LOCAL": ["os.RTLD_LOCAL"], "os.RWF_DSYNC": ["os.RWF_DSYNC"], "os.RWF_HIPRI": ["os.RWF_HIPRI"], "os.RWF_NOWAIT": ["os.RWF_NOWAIT"], "os.R_OK": ["os.R_OK"], "os.SCHED_BATCH": ["os.SCHED_BATCH"], "os.SCHED_FIFO": ["os.SCHED_FIFO"], "os.SCHED_IDLE": ["os.SCHED_IDLE"], "os.SCHED_SPORADIC": ["os.SCHED_SPORADIC"], "os.SEEK_CUR": ["os.SEEK_CUR"], "os.SF_MNOWAIT": ["os.SF_MNOWAIT"], "os.SF_NODISKIO": ["os.SF_NODISKIO"], "os.SF_SYNC": ["os.SF_SYNC"], "os.WCONTINUED": ["os.WCONTINUED"], "os.WCOREDUMP(status)": ["WCOREDUMP", "os._dump(status)", "os.dump(status)", "os.dumps(status)", "os._dumps(status)", "os.colormaps(status)", "os.read_code(status)", "os.cohere(status)", "os.reduce(status)", "os._coerce(status)", "os.compressed(status)", "os._ezclump(status)", "os._cleanup(status)", "os._ureduce(status)", "os.whichmodule(status)"], "os.WEXITED": ["os.WEXITED"], "os.WEXITSTATUS(status)": ["WEXITSTATUS", "os.exists(status)", "os._exists(status)", "os._get_stats(status)", "os.lexists(status)", "os.getstatusoutput(status)", "os.table_exists(status)", "os.extract(status)", "os.statvfs(status)", "os._task_get_stack(status)", "os.RAND_status(status)", "os._init_rpc_states(status)", "os._exit(status)", "os.exit(status)", "os.test_exr(status)"], "os.WIFCONTINUED(status)": ["WIFCONTINUED", "os.iscoroutine(status)", "os.WIFSIGNALED(status)", "os.__contains__(status)", "os.contains(status)", "os._comment_line(status)", "os.isroutine(status)", "os.coroutine(status)", "os.WIFEXITED(status)", "os.waitid(status)", "os.winter(status)", "os.isfunction(status)", "os.WIFSTOPPED(status)", "os.disconnect(status)", "os.tricontour(status)"], "os.WIFEXITED(status)": ["WIFEXITED", "os.WIFSTOPPED(status)", "os._exit(status)", "os.exit(status)", "os._extend_dict(status)", "os.WIFSIGNALED(status)", "os._isfinite(status)", "os.writedoc(status)", "os.WIFCONTINUED(status)", "os.write(status)", "os.field(status)", "os.writedocs(status)", "os.gisfinite(status)", "os.filled(status)", "os.pwrite(status)"], "os.WIFSIGNALED(status)": ["WIFSIGNALED", "os.signal(status)", "os.final(status)", "os.WIFCONTINUED(status)", "os.figlegend(status)", "os.signature(status)", "os.getsignal(status)", "os.WIFEXITED(status)", "os.filled(status)", "os.isfile(status)", "os._single(status)", "os.isinstance(status)", "os.WIFSTOPPED(status)", "os.ISTERMINAL(status)", "os.findall(status)"], "os.WIFSTOPPED(status)": ["WIFSTOPPED", "os.WIFEXITED(status)", "os.isupper(status)", "os._is_type(status)", "os.waitpid(status)", "os.stop(status)", "os.WIFSIGNALED(status)", "os.issctype(status)", "os.WSTOPSIG(status)", "os.is_tuple(status)", "os.ismethod(status)", "os.writedoc(status)", "os.WIFCONTINUED(status)", "os.writedocs(status)", "os.write(status)"], "os.WNOHANG": ["os.WNOHANG"], "os.WNOWAIT": ["os.WNOWAIT"], "os.WSTOPPED": ["os.WSTOPPED"], "os.WSTOPSIG(status)": ["WSTOPSIG", "os.stop(status)", "os.tostring(status)", "os.WTERMSIG(status)", "os.synopsis(status)", "os.softsign(status)", "os.setcopyright(status)", "os._setoption(status)", "os.setgroups(status)", "os.spring(status)", "os.strong(status)", "os.setpos(status)", "os.setsid(status)", "os.wstring_at(status)", "os.WIFSTOPPED(status)"], "os.WTERMSIG(status)": ["WTERMSIG", "os.ctermid(status)", "os.WSTOPSIG(status)", "os._date_from_string(status)", "os.winter(status)", "os.fromstring(status)", "os.wstring_at(status)", "os.hermweight(status)", "os.ISTERMINAL(status)", "os.eig(status)", "os.tri(status)", "os._sig(status)", "os.ErrorString(status)", "os.version(status)", "os.trimseq(status)"], "os.WUNTRACED": ["os.WUNTRACED"], "os.W_OK": ["os.W_OK"], "os.XATTR_SIZE_MAX": ["os.XATTR_SIZE_MAX"], "os.X_OK": ["os.X_OK"], "os._exit(n)": ["_exit", "os.axhline(n)", "os.axvline(n)", "os.get_python_lib(n)", "os.get_python_inc(n)", "os.getlocale(n)", "os._uninstall_helper(n)", "os._get_sysconfigdata_name(n)", "os.is_python_build(n)", "os.ignore(n)", "os.browse(n)", "os.platform(n)", "os.mainloop(n)", "os.createResolutionCallbackFromFrame(n)", "os.poll(n)"], "os.abort()": ["abort", "os.argsort()", "os.sort()", "os.nargsort()", "os.msort()", "os.major()", "os.acorr()", "os.start()", "os.or_()", "os.__or__()", "os.at()", "os.rt()", "os._export()", "os.format()", "os.assert_()"], "os.access(path, mode)": ["access", "os._field_accessor(path, mode)", "os.mkdir(path, mode)", "os.circle(path, mode)", "os.mkfifo(path, mode)", "os._lstsq_dispatcher(path, mode)", "os._nlargest(path, mode)", "os.nlargest(path, mode)", "os.walk_packages(path, mode)", "os.broadcast(path, mode)", "os.nsmallest(path, mode)", "os.shapesize(path, mode)", "os.makeTimeSeries(path, mode)", "os.save(path, mode)", "os.autoscale(path, mode)"], "os.access(path, mode, dir_fd=None)": ["access", "os.access(path, mode, dir_fd=None)", "os._field_accessor(path, mode, dir_fd=None)", "os.mkdir(path, mode, dir_fd=None)", "os.circle(path, mode, dir_fd=None)", "os.mkfifo(path, mode, dir_fd=None)", "os._lstsq_dispatcher(path, mode, dir_fd=None)", "os._nlargest(path, mode, dir_fd=None)", "os.nlargest(path, mode, dir_fd=None)", "os.walk_packages(path, mode, dir_fd=None)", "os.broadcast(path, mode, dir_fd=None)", "os.nsmallest(path, mode, dir_fd=None)", "os.shapesize(path, mode, dir_fd=None)", "os.makeTimeSeries(path, mode, dir_fd=None)", "os.save(path, mode, dir_fd=None)"], "os.access(path, mode, dir_fd=None, effective_ids=False)": ["access", "os.access(path, mode, dir_fd=None, effective_ids=True)", "os._field_accessor(path, mode, dir_fd=None, effective_ids=False)", "os.mkdir(path, mode, dir_fd=None, effective_ids=False)", "os.circle(path, mode, dir_fd=None, effective_ids=False)", "os.mkfifo(path, mode, dir_fd=None, effective_ids=False)", "os._lstsq_dispatcher(path, mode, dir_fd=None, effective_ids=False)", "os._nlargest(path, mode, dir_fd=None, effective_ids=False)", "os.nlargest(path, mode, dir_fd=None, effective_ids=False)", "os.walk_packages(path, mode, dir_fd=None, effective_ids=False)", "os.broadcast(path, mode, dir_fd=None, effective_ids=False)", "os.nsmallest(path, mode, dir_fd=None, effective_ids=False)", "os.shapesize(path, mode, dir_fd=None, effective_ids=False)", "os.makeTimeSeries(path, mode, dir_fd=None, effective_ids=False)", "os.save(path, mode, dir_fd=None, effective_ids=False)"], "os.access(path, mode, effective_ids=False)": ["access", "os.access(path, mode, effective_ids=True)", "os._field_accessor(path, mode, effective_ids=False)", "os.mkdir(path, mode, effective_ids=False)", "os.circle(path, mode, effective_ids=False)", "os.mkfifo(path, mode, effective_ids=False)", "os._lstsq_dispatcher(path, mode, effective_ids=False)", "os._nlargest(path, mode, effective_ids=False)", "os.nlargest(path, mode, effective_ids=False)", "os.walk_packages(path, mode, effective_ids=False)", "os.broadcast(path, mode, effective_ids=False)", "os.nsmallest(path, mode, effective_ids=False)", "os.shapesize(path, mode, effective_ids=False)", "os.makeTimeSeries(path, mode, effective_ids=False)", "os.save(path, mode, effective_ids=False)"], "os.access(path, mode, effective_ids=False, follow_symlinks=True)": ["access", "os.access(path, mode, effective_ids=True, follow_symlinks=False)", "os._field_accessor(path, mode, effective_ids=False, follow_symlinks=True)", "os.mkdir(path, mode, effective_ids=False, follow_symlinks=True)", "os.circle(path, mode, effective_ids=False, follow_symlinks=True)", "os.mkfifo(path, mode, effective_ids=False, follow_symlinks=True)", "os._lstsq_dispatcher(path, mode, effective_ids=False, follow_symlinks=True)", "os._nlargest(path, mode, effective_ids=False, follow_symlinks=True)", "os.nlargest(path, mode, effective_ids=False, follow_symlinks=True)", "os.walk_packages(path, mode, effective_ids=False, follow_symlinks=True)", "os.broadcast(path, mode, effective_ids=False, follow_symlinks=True)", "os.nsmallest(path, mode, effective_ids=False, follow_symlinks=True)", "os.shapesize(path, mode, effective_ids=False, follow_symlinks=True)", "os.makeTimeSeries(path, mode, effective_ids=False, follow_symlinks=True)", "os.save(path, mode, effective_ids=False, follow_symlinks=True)"], "os.access(path, mode, follow_symlinks=True)": ["access", "os.access(path, mode, follow_symlinks=False)", "os._field_accessor(path, mode, follow_symlinks=True)", "os.mkdir(path, mode, follow_symlinks=True)", "os.circle(path, mode, follow_symlinks=True)", "os.mkfifo(path, mode, follow_symlinks=True)", "os._lstsq_dispatcher(path, mode, follow_symlinks=True)", "os._nlargest(path, mode, follow_symlinks=True)", "os.nlargest(path, mode, follow_symlinks=True)", "os.walk_packages(path, mode, follow_symlinks=True)", "os.broadcast(path, mode, follow_symlinks=True)", "os.nsmallest(path, mode, follow_symlinks=True)", "os.shapesize(path, mode, follow_symlinks=True)", "os.makeTimeSeries(path, mode, follow_symlinks=True)", "os.save(path, mode, follow_symlinks=True)"], "os.altsep": ["os.altsep"], "os.chdir(path)": ["chdir", "os.fchdir(path)", "os.__dir__(path)", "os.scandir(path)", "os.chebder(path)", "os.chebdiv(path)", "os.pathdirs(path)", "os.rmdir(path)", "os.dirac_(path)", "os.dirac(path)", "os.cdist(path)", "os.chmod(path)", "os.isdir(path)", "os.mkdir(path)", "os.fchmod(path)"], "os.chflags(path, flags)": ["chflags"], "os.chmod(path, mode)": ["chmod", "os.mkdir(path, mode)", "os.mkfifo(path, mode)", "os.chown(path, mode)", "os.encode(path, mode)", "os.decode(path, mode)", "os.charmap_decode(path, mode)", "os.charmap_encode(path, mode)", "os.load_compiled(path, mode)", "os.load(path, mode)", "os.b32decode(path, mode)", "os.cumprod(path, mode)", "os.fchmod(path, mode)", "os.round(path, mode)", "os._readmodule(path, mode)"], "os.chmod(path, mode, follow_symlinks=True)": ["chmod", "os.chmod(path, mode, follow_symlinks=False)", "os.mkdir(path, mode, follow_symlinks=True)", "os.mkfifo(path, mode, follow_symlinks=True)", "os.chown(path, mode, follow_symlinks=True)", "os.encode(path, mode, follow_symlinks=True)", "os.decode(path, mode, follow_symlinks=True)", "os.charmap_decode(path, mode, follow_symlinks=True)", "os.charmap_encode(path, mode, follow_symlinks=True)", "os.load_compiled(path, mode, follow_symlinks=True)", "os.load(path, mode, follow_symlinks=True)", "os.b32decode(path, mode, follow_symlinks=True)", "os.cumprod(path, mode, follow_symlinks=True)", "os.fchmod(path, mode, follow_symlinks=True)", "os.round(path, mode, follow_symlinks=True)"], "os.chown(path, uid, gid)": ["chown", "os._show(path, uid, gid)", "os.cond(path, uid, gid)", "os.show_code(path, uid, gid)", "os.imshow(path, uid, gid)", "os.open(path, uid, gid)", "os.get_python_inc(path, uid, gid)", "os.rc_context(path, uid, gid)", "os._ones_dispatcher(path, uid, gid)", "os._decode_line(path, uid, gid)", "os.compress_nd(path, uid, gid)", "os.can_connect(path, uid, gid)", "os.openfp(path, uid, gid)", "os.encode(path, uid, gid)", "os.Client(path, uid, gid)"], "os.chown(path, uid, gid, dir_fd=None)": ["chown", "os.chown(path, uid, gid, dir_fd=None)", "os._show(path, uid, gid, dir_fd=None)", "os.cond(path, uid, gid, dir_fd=None)", "os.show_code(path, uid, gid, dir_fd=None)", "os.imshow(path, uid, gid, dir_fd=None)", "os.open(path, uid, gid, dir_fd=None)", "os.get_python_inc(path, uid, gid, dir_fd=None)", "os.rc_context(path, uid, gid, dir_fd=None)", "os._ones_dispatcher(path, uid, gid, dir_fd=None)", "os._decode_line(path, uid, gid, dir_fd=None)", "os.compress_nd(path, uid, gid, dir_fd=None)", "os.can_connect(path, uid, gid, dir_fd=None)", "os.openfp(path, uid, gid, dir_fd=None)", "os.encode(path, uid, gid, dir_fd=None)"], "os.chown(path, uid, gid, follow_symlinks=True)": ["chown", "os.chown(path, uid, gid, follow_symlinks=False)", "os._show(path, uid, gid, follow_symlinks=True)", "os.cond(path, uid, gid, follow_symlinks=True)", "os.show_code(path, uid, gid, follow_symlinks=True)", "os.imshow(path, uid, gid, follow_symlinks=True)", "os.open(path, uid, gid, follow_symlinks=True)", "os.get_python_inc(path, uid, gid, follow_symlinks=True)", "os.rc_context(path, uid, gid, follow_symlinks=True)", "os._ones_dispatcher(path, uid, gid, follow_symlinks=True)", "os._decode_line(path, uid, gid, follow_symlinks=True)", "os.compress_nd(path, uid, gid, follow_symlinks=True)", "os.can_connect(path, uid, gid, follow_symlinks=True)", "os.openfp(path, uid, gid, follow_symlinks=True)", "os.encode(path, uid, gid, follow_symlinks=True)"], "os.chroot(path)": ["chroot", "os.chebroots(path)", "os.roots(path)", "os.change_root(path)", "os.choose(path)", "os.hot(path)", "os.hermroots(path)", "os.chebfromroots(path)", "os.hermeroots(path)", "os.cool(path)", "os.lagroots(path)", "os.legroots(path)", "os._roots_dispatcher(path)", "os.chmod(path)", "os.chdir(path)"], "os.close(fd)": ["close", "os.close_all(fd)", "os.colormode(fd)", "os.listen(fd)", "os.Tcl(fd)", "os.Comment(fd)", "os.localcontext(fd)", "os.ensure_clean(fd)", "os.colorbar(fd)", "os.mode(fd)", "os.log_to_stderr(fd)", "os.clim(fd)", "os.localtime(fd)", "os.getLogger(fd)", "os.dataclass(fd)"], "os.closerange(fd_low, fd_high)": ["closerange", "os.closelog(fd_low, fd_high)", "os.close(fd_low, fd_high)", "os.get_closure(fd_low, fd_high)", "os.range(fd_low, fd_high)", "os.clone(fd_low, fd_high)", "os.range_pop(fd_low, fd_high)", "os._get_colon(fd_low, fd_high)", "os.cohere(fd_low, fd_high)", "os._coerce(fd_low, fd_high)", "os.real_if_close(fd_low, fd_high)", "os.clearcache(fd_low, fd_high)", "os.fake_range(fd_low, fd_high)", "os.monthrange(fd_low, fd_high)", "os._clearcache(fd_low, fd_high)"], "os.confstr(name)": ["confstr", "os.contour(name)", "os.constructor(name)", "os.contourf(name)", "os._reconstruct(name)", "os.constant(name)", "os.count(name)", "os.concat(name)", "os.__concat__(name)", "os.center(name)", "os._counts(name)", "os.str(name)", "os._reconstructor(name)", "os.__str__(name)", "os._str(name)"], "os.confstr_names": ["os.confstr_names"], "os.cpu_count()": ["cpu_count", "os._flop_count()", "os.count()", "os.copy_context()", "os._counts()", "os._return_counts()", "os.rc_context()", "os.countOf()", "os.contour()", "os.contourf()", "os.column_stack()", "os.conv2d_input()", "os.convert_path()", "os.conv3d_input()", "os.check_output()"], "os.ctermid()": ["ctermid", "os.WTERMSIG()", "os.iterfind()", "os.center()", "os.tri()", "os.hermgrid2d()", "os.thetagrids()", "os.chebgrid2d()", "os.ISTERMINAL()", "os.hermgrid3d()", "os.chebgrid3d()", "os.hermadd()", "os.setegid()", "os.seteuid()", "os.hermint()"], "os.curdir": ["os.curdir"], "os.defpath": ["os.defpath"], "os.devnull": ["os.devnull"], "os.dup(fd)": ["dup", "os._dump(fd)", "os.dump(fd)", "os.dup2(fd)", "os.up(fd)", "os.dumps(fd)", "os._dumps(fd)", "os.DupFd(fd)", "os._dexp(fd)", "os.disp(fd)", "os.du_parse(fd)", "os._get_dump(fd)", "os._xml_dumps(fd)", "os.group(fd)", "os.setup(fd)"], "os.dup2(fd, fd2)": ["dup2", "os.dumps(fd, fd2)", "os._dumps(fd, fd2)", "os.disp(fd, fd2)", "os.copy2(fd, fd2)", "os.subplot2grid(fd, fd2)", "os.urlsplit(fd, fd2)", "os.add_type(fd, fd2)", "os.urlparse(fd, fd2)", "os.lu_unpack(fd, fd2)", "os.svd(fd, fd2)", "os.cut(fd, fd2)", "os.sum(fd, fd2)", "os.cmp(fd, fd2)", "os.create_script_module(fd, fd2)"], "os.dup2(fd, fd2, inheritable=True)": ["dup2", "os.dup2(fd, fd2, inheritable=False)", "os.dumps(fd, fd2, inheritable=True)", "os._dumps(fd, fd2, inheritable=True)", "os.disp(fd, fd2, inheritable=True)", "os.copy2(fd, fd2, inheritable=True)", "os.subplot2grid(fd, fd2, inheritable=True)", "os.urlsplit(fd, fd2, inheritable=True)", "os.add_type(fd, fd2, inheritable=True)", "os.urlparse(fd, fd2, inheritable=True)", "os.lu_unpack(fd, fd2, inheritable=True)", "os.svd(fd, fd2, inheritable=True)", "os.cut(fd, fd2, inheritable=True)", "os.sum(fd, fd2, inheritable=True)", "os.cmp(fd, fd2, inheritable=True)"], "os.environb": ["os.environb"], "os.error": ["os.error"], "os.execl(path, arg0, arg1)": ["execl", "os.execle(path, arg0, arg1)", "os.execlp(path, arg0, arg1)", "os._exec(path, arg0, arg1)", "os.execlpe(path, arg0, arg1)", "os.execv(path, arg0, arg1)", "os.execvp(path, arg0, arg1)", "os.execve(path, arg0, arg1)", "os.execvpe(path, arg0, arg1)", "os.execute(path, arg0, arg1)", "os._execvpe(path, arg0, arg1)", "os._reduce_ex(path, arg0, arg1)", "os.xscale(path, arg0, arg1)", "os.select(path, arg0, arg1)", "os.xlabel(path, arg0, arg1)"], "os.execle(path, arg0, arg1, env)": ["execle", "os.execlpe(path, arg0, arg1, env)", "os.execl(path, arg0, arg1, env)", "os.execve(path, arg0, arg1, env)", "os.execlp(path, arg0, arg1, env)", "os._exec(path, arg0, arg1, env)", "os.execvpe(path, arg0, arg1, env)", "os.execute(path, arg0, arg1, env)", "os._execvpe(path, arg0, arg1, env)", "os.execv(path, arg0, arg1, env)", "os.execvp(path, arg0, arg1, env)", "os._reduce_ex(path, arg0, arg1, env)", "os.xscale(path, arg0, arg1, env)", "os._extendLine(path, arg0, arg1, env)", "os.read_excel(path, arg0, arg1, env)"], "os.execlp(file, arg0, arg1)": ["execlp", "os.execlpe(file, arg0, arg1)", "os.execl(file, arg0, arg1)", "os.execvp(file, arg0, arg1)", "os.execle(file, arg0, arg1)", "os._exec(file, arg0, arg1)", "os.execvpe(file, arg0, arg1)", "os._execvpe(file, arg0, arg1)", "os.execv(file, arg0, arg1)", "os.execve(file, arg0, arg1)", "os._exp(file, arg0, arg1)", "os._ezclump(file, arg0, arg1)", "os.execute(file, arg0, arg1)", "os._dexp(file, arg0, arg1)", "os.clip(file, arg0, arg1)"], "os.execlpe(file, arg0, arg1, env)": ["execlpe", "os.execle(file, arg0, arg1, env)", "os.execlp(file, arg0, arg1, env)", "os.execvpe(file, arg0, arg1, env)", "os._execvpe(file, arg0, arg1, env)", "os.execl(file, arg0, arg1, env)", "os.execvp(file, arg0, arg1, env)", "os.execve(file, arg0, arg1, env)", "os._exec(file, arg0, arg1, env)", "os.execute(file, arg0, arg1, env)", "os.execv(file, arg0, arg1, env)", "os._escape(file, arg0, arg1, env)", "os._reduce_ex(file, arg0, arg1, env)", "os.sethelper(file, arg0, arg1, env)", "os.escape(file, arg0, arg1, env)"], "os.execv(path, args)": ["execv", "os.execvp(path, args)", "os.execve(path, args)", "os._exec(path, args)", "os.execvpe(path, args)", "os._execvpe(path, args)", "os.execl(path, args)", "os.execle(path, args)", "os.execlp(path, args)", "os.recv(path, args)", "os.execlpe(path, args)", "os.execute(path, args)", "os.irecv(path, args)", "os._reduce_ex(path, args)", "os.effective(path, args)"], "os.execve(path, args, env)": ["execve", "os.execvpe(path, args, env)", "os._execvpe(path, args, env)", "os.execv(path, args, env)", "os.execvp(path, args, env)", "os.execle(path, args, env)", "os._exec(path, args, env)", "os.execlpe(path, args, env)", "os.execute(path, args, env)", "os.execl(path, args, env)", "os._reduce_ex(path, args, env)", "os.effective(path, args, env)", "os.execlp(path, args, env)", "os.recv(path, args, env)", "os.box_expected(path, args, env)"], "os.execvp(file, args)": ["execvp", "os.execvpe(file, args)", "os._execvpe(file, args)", "os.execv(file, args)", "os.execve(file, args)", "os.execlp(file, args)", "os._exec(file, args)", "os.execlpe(file, args)", "os.execl(file, args)", "os._exp(file, args)", "os.execle(file, args)", "os.execute(file, args)", "os._dexp(file, args)", "os.recv(file, args)", "os._iexp(file, args)"], "os.execvpe(file, args, env)": ["execvpe", "os._execvpe(file, args, env)", "os.execvp(file, args, env)", "os.execve(file, args, env)", "os.execlpe(file, args, env)", "os.execv(file, args, env)", "os.execle(file, args, env)", "os.execlp(file, args, env)", "os._exec(file, args, env)", "os.execute(file, args, env)", "os.execl(file, args, env)", "os._escape(file, args, env)", "os._reduce_ex(file, args, env)", "os.escape(file, args, env)", "os.effective(file, args, env)"], "os.fchdir(fd)": ["fchdir", "os.chdir(fd)", "os.fchmod(fd)", "os.__dir__(fd)", "os.scandir(fd)", "os.chebder(fd)", "os.chebdiv(fd)", "os.finditer(fd)", "os.pathdirs(fd)", "os.rmdir(fd)", "os.fd_id(fd)", "os.dirac_(fd)", "os.dirac(fd)", "os.cdist(fd)", "os.chmod(fd)"], "os.fchmod(fd, mode)": ["fchmod", "os.chmod(fd, mode)", "os.mod(fd, mode)", "os.fchdir(fd, mode)", "os.fchown(fd, mode)", "os.__mod__(fd, mode)", "os._check_mode(fd, mode)", "os.cumprod(fd, mode)", "os.fold(fd, mode)", "os._code(fd, mode)", "os.imod(fd, mode)", "os.rmod(fd, mode)", "os.mode(fd, mode)", "os.__imod__(fd, mode)", "os.cond(fd, mode)"], "os.fchown(fd, uid, gid)": ["fchown", "os.chown(fd, uid, gid)", "os.lchown(fd, uid, gid)", "os.fchmod(fd, uid, gid)", "os.chebpow(fd, uid, gid)", "os.show(fd, uid, gid)", "os.down(fd, uid, gid)", "os._show(fd, uid, gid)", "os.cond(fd, uid, gid)", "os.shutdown(fd, uid, gid)", "os._shutdown(fd, uid, gid)", "os._siftdown(fd, uid, gid)", "os.showinfo(fd, uid, gid)", "os.chmod(fd, uid, gid)", "os.count(fd, uid, gid)"], "os.fdatasync(fd)": ["fdatasync", "os.fsync(fd)", "os.sync(fd)", "os.distance(fd)", "os.fatal(fd)", "os._escape_cdata(fd)", "os.rpc_async(fd)", "os.findmatch(fd)", "os.dataclass(fd)", "os.formatargspec(fd)", "os.isdata(fd)", "os.easy_dtype(fd)", "os._sync_flush(fd)", "os.atleast_3d(fd)", "os.isasyncgen(fd)"], "os.fdopen(fd, *args, **kwargs)": ["fdopen", "os._open(fd, *args, **kwargs)", "os.open(fd, *args, **kwargs)", "os._popen(fd, *args, **kwargs)", "os.popen(fd, *args, **kwargs)", "os.openfp(fd, *args, **kwargs)", "os.pen(fd, *args, **kwargs)", "os.openpty(fd, *args, **kwargs)", "os.urlopen(fd, *args, **kwargs)", "os.done(fd, *args, **kwargs)", "os.down(fd, *args, **kwargs)", "os.fsdecode(fd, *args, **kwargs)", "os.open_new(fd, *args, **kwargs)", "os._siftdown(fd, *args, **kwargs)", "os.build_opener(fd, *args, **kwargs)"], "os.fork()": ["fork", "os._fork()", "os.forkpty()", "os.fork_rng()", "os.or_()", "os.qform()", "os.__or__()", "os.format()", "os._format()", "os._after_fork()", "os.xor()", "os.ror_()", "os._fr1()", "os.foo()", "os.__ior__()"], "os.forkpty()": ["forkpty", "os.fork()", "os._fork()", "os.format()", "os._format()", "os.print_form()", "os.openpty()", "os.pformat()", "os._formatArray()", "os.copy()", "os._copy()", "os.sort()", "os.normpath()", "os.fork_rng()", "os.wait_for()"], "os.fpathconf(fd, name)": ["fpathconf", "os.pathconf(fd, name)", "os._fspath(fd, name)", "os.fspath(fd, name)", "os.os_fspath(fd, name)", "os.atof(fd, name)", "os.run_path(fd, name)", "os._patch(fd, name)", "os.partition(fd, name)", "os.concat_compat(fd, name)", "os._init_pathinfo(fd, name)", "os.propagate_qconfig_(fd, name)", "os.mkpath(fd, name)", "os.ispath(fd, name)", "os.rpartition(fd, name)"], "os.fsdecode(filename)": ["fsdecode", "os.fsencode(filename)", "os.decode(filename)", "os.decode_q(filename)", "os.decode_b(filename)", "os._decode_args(filename)", "os.iscode(filename)", "os.b64decode(filename)", "os._encode(filename)", "os.b16decode(filename)", "os.b85decode(filename)", "os.encode(filename)", "os.b32decode(filename)", "os.a85decode(filename)", "os.ascii_decode(filename)"], "os.fsencode(filename)": ["fsencode", "os.fsdecode(filename)", "os._encode(filename)", "os.encode(filename)", "os._qencode(filename)", "os._bencode(filename)", "os.encode_b(filename)", "os.encode_q(filename)", "os._85encode(filename)", "os.iscode(filename)", "os.urlencode(filename)", "os.a85encode(filename)", "os.b16encode(filename)", "os.asunicode(filename)", "os.b64encode(filename)"], "os.fstat(fd)": ["fstat", "os._stat(fd)", "os.stat(fd)", "os.start(fd)", "os.lstat(fd)", "os.fstatvfs(fd)", "os._fspath(fd)", "os.fspath(fd)", "os.statvfs(fd)", "os.copystat(fd)", "os.setxattr(fd)", "os.constant(fd)", "os.samestat(fd)", "os.stack(fd)", "os.fatal(fd)"], "os.fsync(fd)": ["fsync", "os.sync(fd)", "os.fdatasync(fd)", "os.sinc(fd)", "os._sync_flush(fd)", "os.fsencode(fd)", "os.rpc_sync(fd)", "os.rpc_async(fd)", "os.isasyncgen(fd)", "os._sync_close(fd)", "os._sin(fd)", "os.symlink(fd)", "os._syscmd_file(fd)", "os.fnmatch(fd)", "os.sci(fd)"], "os.ftruncate(fd, length)": ["ftruncate", "os.truncate(fd, length)", "os.runctx(fd, length)", "os.CFUNCTYPE(fd, length)", "os._structure(fd, length)", "os.translate(fd, length)", "os.PYFUNCTYPE(fd, length)", "os.runcall(fd, length)", "os.filter_name(fd, length)", "os.transjugate(fd, length)", "os.unescape(fd, length)", "os.truth(fd, length)", "os.fromfunction(fd, length)", "os.uname(fd, length)", "os.fstat(fd, length)"], "os.fwalk()": ["fwalk", "os.walk()", "os._fwalk()", "os.onclick()", "os._lock_file()", "os.onscreenclick()", "os.which()", "os.ondrag()", "os.measure()", "os.polyint()", "os.findall()", "os.masked_invalid()", "os._walk_dir()", "os.onrelease()", "os.wait_for()"], "os.fwalk(onerror=None)": ["fwalk", "os.fwalk(onerror=None)", "os.walk(onerror=None)", "os._fwalk(onerror=None)", "os.onclick(onerror=None)", "os._lock_file(onerror=None)", "os.onscreenclick(onerror=None)", "os.which(onerror=None)", "os.ondrag(onerror=None)", "os.measure(onerror=None)", "os.polyint(onerror=None)", "os.findall(onerror=None)", "os.masked_invalid(onerror=None)", "os._walk_dir(onerror=None)", "os.onrelease(onerror=None)"], "os.fwalk(top='.')": ["fwalk", "os.fwalk(top=1)", "os.walk(top='.')", "os._fwalk(top='.')", "os.onclick(top='.')", "os._lock_file(top='.')", "os.onscreenclick(top='.')", "os.which(top='.')", "os.ondrag(top='.')", "os.measure(top='.')", "os.polyint(top='.')", "os.findall(top='.')", "os.masked_invalid(top='.')", "os._walk_dir(top='.')", "os.onrelease(top='.')"], "os.fwalk(top='.', dir_fd=None)": ["fwalk", "os.fwalk(top='.', dir_fd=None)", "os.fwalk(top=1, dir_fd=None)", "os.walk(top='.', dir_fd=None)", "os._fwalk(top='.', dir_fd=None)", "os.onclick(top='.', dir_fd=None)", "os._lock_file(top='.', dir_fd=None)", "os.onscreenclick(top='.', dir_fd=None)", "os.which(top='.', dir_fd=None)", "os.ondrag(top='.', dir_fd=None)", "os.measure(top='.', dir_fd=None)", "os.polyint(top='.', dir_fd=None)", "os.findall(top='.', dir_fd=None)", "os.masked_invalid(top='.', dir_fd=None)", "os._walk_dir(top='.', dir_fd=None)"], "os.fwalk(top='.', follow_symlinks=False)": ["fwalk", "os.fwalk(top='.', follow_symlinks=True)", "os.fwalk(top=1, follow_symlinks=False)", "os.walk(top='.', follow_symlinks=False)", "os._fwalk(top='.', follow_symlinks=False)", "os.onclick(top='.', follow_symlinks=False)", "os._lock_file(top='.', follow_symlinks=False)", "os.onscreenclick(top='.', follow_symlinks=False)", "os.which(top='.', follow_symlinks=False)", "os.ondrag(top='.', follow_symlinks=False)", "os.measure(top='.', follow_symlinks=False)", "os.polyint(top='.', follow_symlinks=False)", "os.findall(top='.', follow_symlinks=False)", "os.masked_invalid(top='.', follow_symlinks=False)", "os._walk_dir(top='.', follow_symlinks=False)"], "os.fwalk(top='.', onerror=None)": ["fwalk", "os.fwalk(top='.', onerror=None)", "os.fwalk(top=1.0, onerror=None)", "os.walk(top='.', onerror=None)", "os._fwalk(top='.', onerror=None)", "os.onclick(top='.', onerror=None)", "os._lock_file(top='.', onerror=None)", "os.onscreenclick(top='.', onerror=None)", "os.which(top='.', onerror=None)", "os.ondrag(top='.', onerror=None)", "os.measure(top='.', onerror=None)", "os.polyint(top='.', onerror=None)", "os.findall(top='.', onerror=None)", "os.masked_invalid(top='.', onerror=None)", "os._walk_dir(top='.', onerror=None)"], "os.fwalk(top='.', topdown=True)": ["fwalk", "os.fwalk(top='.', topdown=False)", "os.fwalk(top=1.0, topdown=True)", "os.walk(top='.', topdown=True)", "os._fwalk(top='.', topdown=True)", "os.onclick(top='.', topdown=True)", "os._lock_file(top='.', topdown=True)", "os.onscreenclick(top='.', topdown=True)", "os.which(top='.', topdown=True)", "os.ondrag(top='.', topdown=True)", "os.measure(top='.', topdown=True)", "os.polyint(top='.', topdown=True)", "os.findall(top='.', topdown=True)", "os.masked_invalid(top='.', topdown=True)", "os._walk_dir(top='.', topdown=True)"], "os.fwalk(topdown=True)": ["fwalk", "os.fwalk(topdown=False)", "os.walk(topdown=True)", "os._fwalk(topdown=True)", "os.onclick(topdown=True)", "os._lock_file(topdown=True)", "os.onscreenclick(topdown=True)", "os.which(topdown=True)", "os.ondrag(topdown=True)", "os.measure(topdown=True)", "os.polyint(topdown=True)", "os.findall(topdown=True)", "os.masked_invalid(topdown=True)", "os._walk_dir(topdown=True)", "os.onrelease(topdown=True)"], "os.get_exec_path(env=None)": ["get_exec_path", "os.get_exec_path(env=None)", "os.print_exception(env=None)", "os.print_exc(env=None)", "os._get_plot_backend(env=None)", "os._format_exc(env=None)", "os.format_exc(env=None)", "os.set_numexpr_threads(env=None)", "os.get_cmap(env=None)", "os.get_rank(env=None)", "os.extract_stack(env=None)", "os.getPeriodData(env=None)", "os.socketpair(env=None)", "os.get_backend(env=None)", "os.get_locales(env=None)"], "os.get_handle_inheritable(handle)": ["get_handle_inheritable"], "os.get_inheritable(fd)": ["get_inheritable", "os.get_writable_path(fd)", "os.set_inheritable(fd)", "os.get_interpreter(fd)", "os.get_writer(fd)", "os.inherit_names(fd)", "os.get_type_line(fd)", "os._get_indent(fd)", "os._get_writer(fd)", "os.get_phrase(fd)", "os.get_terminal_size(fd)", "os.get_include(fd)", "os.in_table_c8(fd)", "os.in_table_c6(fd)", "os.in_table_b1(fd)"], "os.get_terminal_size()": ["get_terminal_size"], "os.get_terminal_size(fd=STDOUT_FILENO)": ["get_terminal_size"], "os.getcwd()": ["getcwd", "os.getcwdb()", "os.get_word()", "os.getdoc()", "os.get()", "os.gcd()", "os.getpid()", "os.getgid()", "os._gcd()", "os.getsid()", "os.getuid()", "os._get_gid()", "os.getnode()", "os.getfqdn()", "os._get_uid()"], "os.getcwdb()": ["getcwdb", "os.getcwd()", "os.get_word()", "os.getdoc()", "os.getpid()", "os.getgid()", "os.getsid()", "os.getuid()", "os.get()", "os.gcd()", "os._gcd()", "os.getdecoder()", "os.getencoder()", "os._get_gid()", "os.getnode()"], "os.getegid()": ["getegid", "os.getgid()", "os.getresgid()", "os._get_gid()", "os.setegid()", "os.getpgid()", "os.geteuid()", "os.setregid()", "os.getpid()", "os.getsid()", "os.setgid()", "os.getuid()", "os.setresgid()", "os.getresuid()", "os.seteuid()"], "os.getenv(key)": ["getenv", "os.getenvb(key)", "os.getlines(key)", "os.stdev(key)", "os.getmodule(key)", "os.gather(key)", "os.getabsfile(key)", "os.pstdev(key)", "os.seterr(key)", "os.getmembers(key)", "os.listen(key)", "os.generate_range(key)", "os.urlretrieve(key)", "os.win_getpass(key)", "os.getpass(key)"], "os.getenv(key, default=None)": ["getenv", "os.getenv(key, default=None)", "os.getenvb(key, default=None)", "os.getlines(key, default=None)", "os.stdev(key, default=None)", "os.getmodule(key, default=None)", "os.gather(key, default=None)", "os.getabsfile(key, default=None)", "os.pstdev(key, default=None)", "os.seterr(key, default=None)", "os.getmembers(key, default=None)", "os.listen(key, default=None)", "os.generate_range(key, default=None)", "os.urlretrieve(key, default=None)", "os.win_getpass(key, default=None)"], "os.getenvb(key)": ["getenvb", "os.getenv(key)", "os.getmembers(key)", "os.getlines(key)", "os.stdev(key)", "os.getmodule(key)", "os.generate_range(key)", "os.getabsfile(key)", "os.gather(key)", "os.pstdev(key)", "os.seterr(key)", "os.enable(key)", "os.listen(key)", "os.urlretrieve(key)", "os.win_getpass(key)"], "os.getenvb(key, default=None)": ["getenvb", "os.getenvb(key, default=None)", "os.getenv(key, default=None)", "os.getmembers(key, default=None)", "os.getlines(key, default=None)", "os.stdev(key, default=None)", "os.getmodule(key, default=None)", "os.generate_range(key, default=None)", "os.getabsfile(key, default=None)", "os.gather(key, default=None)", "os.pstdev(key, default=None)", "os.seterr(key, default=None)", "os.enable(key, default=None)", "os.listen(key, default=None)", "os.urlretrieve(key, default=None)"], "os.geteuid()": ["geteuid", "os.getuid()", "os.getresuid()", "os.seteuid()", "os._get_uid()", "os.getegid()", "os.setreuid()", "os.setuid()", "os.getpid()", "os.getgid()", "os.getsid()", "os.getresgid()", "os.setresuid()", "os._get_gid()", "os.setegid()"], "os.getgid()": ["getgid", "os._get_gid()", "os.getpgid()", "os.getegid()", "os.getpid()", "os.getsid()", "os.setgid()", "os.getuid()", "os.getresgid()", "os.setegid()", "os.setpgid()", "os._get_uid()", "os.getppid()", "os.geteuid()", "os.setregid()"], "os.getgrouplist(user, group)": ["getgrouplist"], "os.getgroups()": ["getgroups", "os.get_group()", "os.setgroups()", "os.get_group_list()", "os._get_group_size()", "os.getpgrp()", "os.group()", "os._group()", "os._get_group_rank()", "os.tcgetpgrp()", "os.genops()", "os.get_group_index()", "os.getmro()", "os.getopt()", "os._genops()"], "os.getloadavg()": ["getloadavg", "os._getlang()", "os.get_loader()", "os.getlogin()", "os.getLogger()", "os.getlocale()", "os.reload()", "os._get_overloads()", "os.get_logger()", "os.getnode()", "os.get_tag()", "os._getconv()", "os.getargs()", "os.getdata()", "os.get_local_part()"], "os.getlogin()": ["getlogin", "os.getline()", "os.get_origin()", "os.getlines()", "os.getLogger()", "os.getdomain()", "os.getgid()", "os.getlineno()", "os._get_gid()", "os.logn()", "os.get_logger()", "os.gnu_getopt()", "os._getlang()", "os.getloadavg()", "os.getpgid()"], "os.getpgid(pid)": ["getpgid", "os.getpid(pid)", "os.getgid(pid)", "os._get_gid(pid)", "os.setpgid(pid)", "os.getppid(pid)", "os.getegid(pid)", "os.getsid(pid)", "os.setgid(pid)", "os.getuid(pid)", "os.getresgid(pid)", "os.getp(pid)", "os.getpgrp(pid)", "os.setegid(pid)", "os._get_uid(pid)"], "os.getpid()": ["getpid", "os.getppid()", "os.getpgid()", "os.getgid()", "os.getsid()", "os.getuid()", "os.getp()", "os._get_gid()", "os.setpgid()", "os._get_uid()", "os.getegid()", "os.geteuid()", "os.getresgid()", "os.setuid()", "os.getdoc()"], "os.getppid()": ["getppid", "os.getpid()", "os.getpgid()", "os.getgid()", "os.getsid()", "os.getuid()", "os.getp()", "os.getpgrp()", "os._get_gid()", "os.setpgid()", "os._get_uid()", "os.getegid()", "os.geteuid()", "os.tcgetpgrp()", "os.getresgid()"], "os.getpriority(which, who)": ["getpriority", "os.setpriority(which, who)", "os.getPeriodData(which, who)", "os.getproxies(which, who)", "os.sched_get_priority_min(which, who)", "os.sched_get_priority_max(which, who)", "os.generate_property(which, who)", "os.get_poly(which, who)", "os.get_property_stubs(which, who)", "os.get_importer(which, who)", "os.getwriter(which, who)", "os._export(which, who)", "os.get_printoptions(which, who)", "os.export(which, who)", "os.getmro(which, who)"], "os.getrandom(size)": ["getrandom"], "os.getrandom(size, flags=0)": ["getrandom", "os.getrandom(size, flags='0')"], "os.getsid(pid)": ["getsid", "os.getpid(pid)", "os.getgid(pid)", "os.setsid(pid)", "os.getuid(pid)", "os.getresgid(pid)", "os.getresuid(pid)", "os._get_gid(pid)", "os._get_uid(pid)", "os.getsize(pid)", "os.getppid(pid)", "os.getpgid(pid)", "os.getegid(pid)", "os.geteuid(pid)", "os.setuid(pid)"], "os.getuid()": ["getuid", "os._get_uid()", "os.geteuid()", "os.setuid()", "os.getpid()", "os.getgid()", "os.getsid()", "os.getresuid()", "os._get_gid()", "os.seteuid()", "os.getppid()", "os.getpgid()", "os.getegid()", "os.setreuid()", "os.getresgid()"], "os.getxattr(path, attribute)": ["getxattr", "os.removexattr(path, attribute)", "os._copyxattr(path, attribute)", "os.stat(path, attribute)", "os.copystat(path, attribute)", "os.copyfile(path, attribute)", "os.copymode(path, attribute)", "os.get_paths(path, attribute)", "os.copy(path, attribute)", "os.copy2(path, attribute)", "os.masked_greater(path, attribute)", "os.__getattr__(path, attribute)", "os.legder(path, attribute)", "os.lagder(path, attribute)", "os.read_feather(path, attribute)"], "os.getxattr(path, attribute, follow_symlinks=True)": ["getxattr", "os.getxattr(path, attribute, follow_symlinks=False)", "os.removexattr(path, attribute, follow_symlinks=True)", "os._copyxattr(path, attribute, follow_symlinks=True)", "os.stat(path, attribute, follow_symlinks=True)", "os.copystat(path, attribute, follow_symlinks=True)", "os.copyfile(path, attribute, follow_symlinks=True)", "os.copymode(path, attribute, follow_symlinks=True)", "os.get_paths(path, attribute, follow_symlinks=True)", "os.copy(path, attribute, follow_symlinks=True)", "os.copy2(path, attribute, follow_symlinks=True)", "os.masked_greater(path, attribute, follow_symlinks=True)", "os.__getattr__(path, attribute, follow_symlinks=True)", "os.legder(path, attribute, follow_symlinks=True)", "os.lagder(path, attribute, follow_symlinks=True)"], "os.initgroups(username, gid)": ["initgroups"], "os.isatty(fd)": ["isatty", "os.isdata(fd)", "os.ispath(fd)", "os.iat(fd)", "os.listxattr(fd)", "os._is_type(fd)", "os.isarray(fd)", "os._is_path(fd)", "os.scatter(fd)", "os.istitle(fd)", "os.isabstract(fd)", "os.savetxt(fd)", "os.sety(fd)", "os.dist(fd)", "os._stat(fd)"], "os.kill(pid, sig)": ["kill", "os.killpg(pid, sig)", "os.fill(pid, sig)", "os.zfill(pid, sig)", "os.filled(pid, sig)", "os.isnull(pid, sig)", "os._all(pid, sig)", "os.all(pid, sig)", "os.findall(pid, sig)", "os.install(pid, sig)", "os._lu_impl(pid, sig)", "os._install(pid, sig)", "os.filling(pid, sig)", "os._backfill_2d(pid, sig)", "os.poll(pid, sig)"], "os.killpg(pgid, sig)": ["killpg", "os.kill(pgid, sig)", "os.filling(pgid, sig)", "os._ilog(pgid, sig)", "os.skip(pgid, sig)", "os.fill(pgid, sig)", "os.pthread_kill(pgid, sig)", "os.zfill(pgid, sig)", "os.filled(pgid, sig)", "os.skipIf(pgid, sig)", "os.skipif(pgid, sig)", "os.isnull(pgid, sig)", "os.loglog(pgid, sig)", "os.isleap(pgid, sig)", "os._backfill_2d(pgid, sig)"], "os.lchflags(path, flags)": ["lchflags"], "os.lchmod(path, mode)": ["lchmod"], "os.lchown(path, uid, gid)": ["lchown", "os.chown(path, uid, gid)", "os.fchown(path, uid, gid)", "os.chebpow(path, uid, gid)", "os.logn(path, uid, gid)", "os.slow(path, uid, gid)", "os.show(path, uid, gid)", "os.down(path, uid, gid)", "os._show(path, uid, gid)", "os.cond(path, uid, gid)", "os.shutdown(path, uid, gid)", "os._shutdown(path, uid, gid)", "os.showinfo(path, uid, gid)", "os.chmod(path, uid, gid)", "os.count(path, uid, gid)"], "os.linesep": ["os.linesep"], "os.link(src, dst)": ["link", "os.rename(src, dst)", "os.replace(src, dst)", "os.Client(src, dst)", "os.getline(src, dst)", "os.onclick(src, dst)", "os.polyint(src, dst)", "os.find(src, dst)", "os.symlink(src, dst)", "os.split(src, dst)", "os.ifftn(src, dst)", "os.min(src, dst)", "os.argmin(src, dst)", "os.lookup(src, dst)", "os.rsplit(src, dst)"], "os.link(src, dst, dst_dir_fd=None)": ["link", "os.link(src, dst, dst_dir_fd=None)", "os.rename(src, dst, dst_dir_fd=None)", "os.replace(src, dst, dst_dir_fd=None)", "os.Client(src, dst, dst_dir_fd=None)", "os.getline(src, dst, dst_dir_fd=None)", "os.onclick(src, dst, dst_dir_fd=None)", "os.polyint(src, dst, dst_dir_fd=None)", "os.find(src, dst, dst_dir_fd=None)", "os.symlink(src, dst, dst_dir_fd=None)", "os.split(src, dst, dst_dir_fd=None)", "os.ifftn(src, dst, dst_dir_fd=None)", "os.min(src, dst, dst_dir_fd=None)", "os.argmin(src, dst, dst_dir_fd=None)", "os.lookup(src, dst, dst_dir_fd=None)"], "os.link(src, dst, follow_symlinks=True)": ["link", "os.link(src, dst, follow_symlinks=False)", "os.rename(src, dst, follow_symlinks=True)", "os.replace(src, dst, follow_symlinks=True)", "os.Client(src, dst, follow_symlinks=True)", "os.getline(src, dst, follow_symlinks=True)", "os.onclick(src, dst, follow_symlinks=True)", "os.polyint(src, dst, follow_symlinks=True)", "os.find(src, dst, follow_symlinks=True)", "os.symlink(src, dst, follow_symlinks=True)", "os.split(src, dst, follow_symlinks=True)", "os.ifftn(src, dst, follow_symlinks=True)", "os.min(src, dst, follow_symlinks=True)", "os.argmin(src, dst, follow_symlinks=True)", "os.lookup(src, dst, follow_symlinks=True)"], "os.link(src, dst, src_dir_fd=None)": ["link", "os.link(src, dst, src_dir_fd=None)", "os.rename(src, dst, src_dir_fd=None)", "os.replace(src, dst, src_dir_fd=None)", "os.Client(src, dst, src_dir_fd=None)", "os.getline(src, dst, src_dir_fd=None)", "os.onclick(src, dst, src_dir_fd=None)", "os.polyint(src, dst, src_dir_fd=None)", "os.find(src, dst, src_dir_fd=None)", "os.symlink(src, dst, src_dir_fd=None)", "os.split(src, dst, src_dir_fd=None)", "os.ifftn(src, dst, src_dir_fd=None)", "os.min(src, dst, src_dir_fd=None)", "os.argmin(src, dst, src_dir_fd=None)", "os.lookup(src, dst, src_dir_fd=None)"], "os.listxattr()": ["listxattr", "os.listdir()", "os.set_trace()", "os.stack_size()", "os.shearfactor()", "os.clearstamps()", "os.localcontext()", "os.scandir()", "os.random_state()", "os.log_to_stderr()", "os._run_finalizers()", "os.all_tasks()", "os.tiltangle()", "os.makeFloatSeries()", "os._all_tasks_compat()"], "os.listxattr(follow_symlinks=True)": ["listxattr", "os.listxattr(follow_symlinks=False)", "os.listdir(follow_symlinks=True)", "os.set_trace(follow_symlinks=True)", "os.stack_size(follow_symlinks=True)", "os.shearfactor(follow_symlinks=True)", "os.clearstamps(follow_symlinks=True)", "os.localcontext(follow_symlinks=True)", "os.scandir(follow_symlinks=True)", "os.random_state(follow_symlinks=True)", "os.log_to_stderr(follow_symlinks=True)", "os._run_finalizers(follow_symlinks=True)", "os.all_tasks(follow_symlinks=True)", "os.tiltangle(follow_symlinks=True)", "os.makeFloatSeries(follow_symlinks=True)"], "os.listxattr(path=None)": ["listxattr", "os.listxattr(path=None)", "os.listdir(path=None)", "os.set_trace(path=None)", "os.stack_size(path=None)", "os.shearfactor(path=None)", "os.clearstamps(path=None)", "os.localcontext(path=None)", "os.scandir(path=None)", "os.random_state(path=None)", "os.log_to_stderr(path=None)", "os._run_finalizers(path=None)", "os.all_tasks(path=None)", "os.tiltangle(path=None)", "os.makeFloatSeries(path=None)"], "os.listxattr(path=None, follow_symlinks=True)": ["listxattr", "os.listxattr(path=None, follow_symlinks=False)", "os.listdir(path=None, follow_symlinks=True)", "os.set_trace(path=None, follow_symlinks=True)", "os.stack_size(path=None, follow_symlinks=True)", "os.shearfactor(path=None, follow_symlinks=True)", "os.clearstamps(path=None, follow_symlinks=True)", "os.localcontext(path=None, follow_symlinks=True)", "os.scandir(path=None, follow_symlinks=True)", "os.random_state(path=None, follow_symlinks=True)", "os.log_to_stderr(path=None, follow_symlinks=True)", "os._run_finalizers(path=None, follow_symlinks=True)", "os.all_tasks(path=None, follow_symlinks=True)", "os.tiltangle(path=None, follow_symlinks=True)", "os.makeFloatSeries(path=None, follow_symlinks=True)"], "os.lockf(fd, cmd, len)": ["lockf", "os.Lock(fd, cmd, len)", "os.block(fd, cmd, len)", "os._block(fd, cmd, len)", "os.RLock(fd, cmd, len)", "os.loc(fd, cmd, len)", "os.lookfor(fd, cmd, len)", "os.iloc(fd, cmd, len)", "os.getblock(fd, cmd, len)", "os._lock_file(fd, cmd, len)", "os.lock_held(fd, cmd, len)", "os.locate(fd, cmd, len)", "os.lookup(fd, cmd, len)", "os.block_diag(fd, cmd, len)", "os._multi_blockify(fd, cmd, len)"], "os.lseek(fd, pos, how)": ["lseek", "os.sleep(fd, pos, how)", "os.close(fd, pos, how)", "os._sleep(fd, pos, how)", "os.speed(fd, pos, how)", "os.le(fd, pos, how)", "os.setcbreak(fd, pos, how)", "os.__le__(fd, pos, how)", "os._setdef(fd, pos, how)", "os.Screen(fd, pos, how)", "os.seterr(fd, pos, how)", "os.legend(fd, pos, how)", "os.legder(fd, pos, how)", "os.listen(fd, pos, how)", "os.delete(fd, pos, how)"], "os.lstat(path)": ["lstat", "os._stat(path)", "os.stat(path)", "os.unlink(path)", "os.lstrip(path)", "os.listen(path)", "os.stairs(path)", "os.mksalt(path)", "os.print_list(path)", "os.print_last(path)", "os.rmdir(path)", "os.install(path)", "os._std(path)", "os.std(path)", "os.relpath(path)"], "os.lstat(path, dir_fd=None)": ["lstat", "os.lstat(path, dir_fd=None)", "os._stat(path, dir_fd=None)", "os.stat(path, dir_fd=None)", "os.unlink(path, dir_fd=None)", "os.lstrip(path, dir_fd=None)", "os.listen(path, dir_fd=None)", "os.stairs(path, dir_fd=None)", "os.mksalt(path, dir_fd=None)", "os.print_list(path, dir_fd=None)", "os.print_last(path, dir_fd=None)", "os.rmdir(path, dir_fd=None)", "os.install(path, dir_fd=None)", "os._std(path, dir_fd=None)", "os.std(path, dir_fd=None)"], "os.major(device)": ["major", "os.mark(device)", "os.mask_or(device)", "os.msort(device)", "os.minor(device)", "os.abort(device)", "os.acorr(device)", "os.or_(device)", "os.__or__(device)", "os.__import__(device)", "os._makeLoader(device)", "os.margins(device)", "os.xor(device)", "os.mod(device)", "os.ror_(device)"], "os.makedev(major, minor)": ["makedev", "os._makecodes(major, minor)", "os._makeLoader(major, minor)", "os.make_module(major, minor)", "os.makedirs(major, minor)", "os.masked_where(major, minor)", "os.makeIntIndex(major, minor)", "os.is_masked(major, minor)", "os.makeSuite(major, minor)", "os.makeBoolIndex(major, minor)", "os.masked_object(major, minor)", "os.makeUIntIndex(major, minor)", "os.masked_values(major, minor)", "os.masked_all(major, minor)", "os.make_tuple(major, minor)"], "os.makedirs(name)": ["makedirs", "os.mkdir(name)", "os.mask_or(name)", "os.take(name)", "os._make_zipfile(name)", "os._as_pairs(name)", "os.register_cmap(name)", "os.merge(name)", "os.mknod(name)", "os.parse(name)", "os.socketpair(name)", "os.vander(name)", "os.gather(name)", "os.einsum(name)", "os.matrix_rank(name)"], "os.makedirs(name, exist_ok=False)": ["makedirs", "os.makedirs(name, exist_ok=True)", "os.mkdir(name, exist_ok=False)", "os.mask_or(name, exist_ok=False)", "os.take(name, exist_ok=False)", "os._make_zipfile(name, exist_ok=False)", "os._as_pairs(name, exist_ok=False)", "os.register_cmap(name, exist_ok=False)", "os.merge(name, exist_ok=False)", "os.mknod(name, exist_ok=False)", "os.parse(name, exist_ok=False)", "os.socketpair(name, exist_ok=False)", "os.vander(name, exist_ok=False)", "os.gather(name, exist_ok=False)", "os.einsum(name, exist_ok=False)"], "os.makedirs(name, mode=0o777)": ["makedirs", "os.makedirs(name, mode='511')", "os.mkdir(name, mode=511)", "os.mask_or(name, mode=511)", "os.take(name, mode=511)", "os._make_zipfile(name, mode=511)", "os._as_pairs(name, mode=511)", "os.register_cmap(name, mode=511)", "os.merge(name, mode=511)", "os.mknod(name, mode=511)", "os.parse(name, mode=511)", "os.socketpair(name, mode=511)", "os.vander(name, mode=511)", "os.gather(name, mode=511)", "os.einsum(name, mode=511)"], "os.makedirs(name, mode=0o777, exist_ok=False)": ["makedirs", "os.makedirs(name, mode=511, exist_ok=True)", "os.makedirs(name, mode='511', exist_ok=False)", "os.mkdir(name, mode=511, exist_ok=False)", "os.mask_or(name, mode=511, exist_ok=False)", "os.take(name, mode=511, exist_ok=False)", "os._make_zipfile(name, mode=511, exist_ok=False)", "os._as_pairs(name, mode=511, exist_ok=False)", "os.register_cmap(name, mode=511, exist_ok=False)", "os.merge(name, mode=511, exist_ok=False)", "os.mknod(name, mode=511, exist_ok=False)", "os.parse(name, mode=511, exist_ok=False)", "os.socketpair(name, mode=511, exist_ok=False)", "os.vander(name, mode=511, exist_ok=False)", "os.gather(name, mode=511, exist_ok=False)"], "os.minor(device)": ["minor", "os.__ior__(device)", "os.ior(device)", "os.min(device)", "os.ignore(device)", "os._amin(device)", "os.main(device)", "os.norm(device)", "os._info(device)", "os._main(device)", "os.__ixor__(device)", "os.ixor(device)", "os.info(device)", "os.amin(device)", "os.mainloop(device)"], "os.mkdir(path)": ["mkdir", "os.mkfifo(path)", "os.makedirs(path)", "os.chmod(path)", "os._mdiff(path)", "os.median(path)", "os._median(path)", "os._makeLoader(path)", "os.mkdtemp(path)", "os.compile_dir(path)", "os.dis(path)", "os.min(path)", "os.rmdir(path)", "os._amin(path)", "os.amin(path)"], "os.mkdir(path, mode=0o777)": ["mkdir", "os.mkdir(path, mode='511')", "os.mkfifo(path, mode=511)", "os.makedirs(path, mode=511)", "os.chmod(path, mode=511)", "os._mdiff(path, mode=511)", "os.median(path, mode=511)", "os._median(path, mode=511)", "os._makeLoader(path, mode=511)", "os.mkdtemp(path, mode=511)", "os.compile_dir(path, mode=511)", "os.dis(path, mode=511)", "os.min(path, mode=511)", "os.rmdir(path, mode=511)", "os._amin(path, mode=511)"], "os.mkfifo(path)": ["mkfifo", "os.mkdir(path)", "os.chmod(path)", "os._mdiff(path)", "os.min(path)", "os.fromfile(path)", "os._amin(path)", "os.find(path)", "os.fftn(path)", "os.amin(path)", "os._makeLoader(path)", "os.to_numeric(path)", "os.rfftn(path)", "os.ndiff(path)", "os.ifftn(path)"], "os.mkfifo(path, dir_fd=None)": ["mkfifo", "os.mkfifo(path, dir_fd=None)", "os.mkdir(path, dir_fd=None)", "os.chmod(path, dir_fd=None)", "os._mdiff(path, dir_fd=None)", "os.min(path, dir_fd=None)", "os.fromfile(path, dir_fd=None)", "os._amin(path, dir_fd=None)", "os.find(path, dir_fd=None)", "os.fftn(path, dir_fd=None)", "os.amin(path, dir_fd=None)", "os._makeLoader(path, dir_fd=None)", "os.to_numeric(path, dir_fd=None)", "os.rfftn(path, dir_fd=None)", "os.ndiff(path, dir_fd=None)"], "os.mkfifo(path, mode=0o666)": ["mkfifo", "os.mkfifo(path, mode='438')", "os.mkdir(path, mode=438)", "os.chmod(path, mode=438)", "os._mdiff(path, mode=438)", "os.min(path, mode=438)", "os.fromfile(path, mode=438)", "os._amin(path, mode=438)", "os.find(path, mode=438)", "os.fftn(path, mode=438)", "os.amin(path, mode=438)", "os._makeLoader(path, mode=438)", "os.to_numeric(path, mode=438)", "os.rfftn(path, mode=438)", "os.ndiff(path, mode=438)"], "os.mknod(path)": ["mknod", "os.symlink(path)", "os.makedirs(path)", "os.find(path)", "os.load(path)", "os.index(path)", "os.rfind(path)", "os.vander(path)", "os.rindex(path)", "os.decode(path)", "os.encodestring(path)", "os._encodestring(path)", "os.indices(path)", "os.findall(path)", "os.utf_16_encode(path)"], "os.mknod(path, device=0)": ["mknod", "os.mknod(path, device='0')", "os.symlink(path, device=0)", "os.makedirs(path, device=0)", "os.find(path, device=0)", "os.load(path, device=0)", "os.index(path, device=0)", "os.rfind(path, device=0)", "os.vander(path, device=0)", "os.rindex(path, device=0)", "os.decode(path, device=0)", "os.encodestring(path, device=0)", "os._encodestring(path, device=0)", "os.indices(path, device=0)", "os.findall(path, device=0)"], "os.mknod(path, device=0, dir_fd=None)": ["mknod", "os.mknod(path, device=0, dir_fd=None)", "os.mknod(path, device='0', dir_fd=None)", "os.symlink(path, device=0, dir_fd=None)", "os.makedirs(path, device=0, dir_fd=None)", "os.find(path, device=0, dir_fd=None)", "os.load(path, device=0, dir_fd=None)", "os.index(path, device=0, dir_fd=None)", "os.rfind(path, device=0, dir_fd=None)", "os.vander(path, device=0, dir_fd=None)", "os.rindex(path, device=0, dir_fd=None)", "os.decode(path, device=0, dir_fd=None)", "os.encodestring(path, device=0, dir_fd=None)", "os._encodestring(path, device=0, dir_fd=None)", "os.indices(path, device=0, dir_fd=None)"], "os.mknod(path, mode=0o600, device=0)": ["mknod", "os.mknod(path, mode='384', device='0')", "os.symlink(path, mode=384, device=0)", "os.makedirs(path, mode=384, device=0)", "os.find(path, mode=384, device=0)", "os.load(path, mode=384, device=0)", "os.index(path, mode=384, device=0)", "os.rfind(path, mode=384, device=0)", "os.vander(path, mode=384, device=0)", "os.rindex(path, mode=384, device=0)", "os.decode(path, mode=384, device=0)", "os.encodestring(path, mode=384, device=0)", "os._encodestring(path, mode=384, device=0)", "os.indices(path, mode=384, device=0)", "os.findall(path, mode=384, device=0)"], "os.name": ["os.name"], "os.nice(increment)": ["nice", "os.indices(increment)", "os.ne(increment)", "os.__ne__(increment)", "os.asunicode(increment)", "os._nth_slice(increment)", "os.iscode(increment)", "os.unique(increment)", "os._encode(increment)", "os.encode(increment)", "os.circle(increment)", "os._pickle(increment)", "os.pickle(increment)", "os.neg(increment)", "os.new(increment)"], "os.open(path, flags)": ["open", "os._open(path, flags)", "os.open_latin1(path, flags)", "os.popen(path, flags)", "os.bltn_open(path, flags)", "os.OpenWrapper(path, flags)", "os._builtin_open(path, flags)", "os.urlopen(path, flags)", "os.pie(path, flags)", "os._run_code(path, flags)", "os.compress(path, flags)", "os._popen(path, flags)", "os.byte_compile(path, flags)", "os.boxplot(path, flags)", "os.pen(path, flags)"], "os.open(path, flags, mode=0o777)": ["open", "os.open(path, flags, mode='511')", "os._open(path, flags, mode=511)", "os.open_latin1(path, flags, mode=511)", "os.popen(path, flags, mode=511)", "os.bltn_open(path, flags, mode=511)", "os.OpenWrapper(path, flags, mode=511)", "os._builtin_open(path, flags, mode=511)", "os.urlopen(path, flags, mode=511)", "os.pie(path, flags, mode=511)", "os._run_code(path, flags, mode=511)", "os.compress(path, flags, mode=511)", "os._popen(path, flags, mode=511)", "os.byte_compile(path, flags, mode=511)", "os.boxplot(path, flags, mode=511)"], "os.open(path, flags, mode=0o777, dir_fd=None)": ["open", "os.open(path, flags, mode=511, dir_fd=None)", "os.open(path, flags, mode='511', dir_fd=None)", "os._open(path, flags, mode=511, dir_fd=None)", "os.open_latin1(path, flags, mode=511, dir_fd=None)", "os.popen(path, flags, mode=511, dir_fd=None)", "os.bltn_open(path, flags, mode=511, dir_fd=None)", "os.OpenWrapper(path, flags, mode=511, dir_fd=None)", "os._builtin_open(path, flags, mode=511, dir_fd=None)", "os.urlopen(path, flags, mode=511, dir_fd=None)", "os.pie(path, flags, mode=511, dir_fd=None)", "os._run_code(path, flags, mode=511, dir_fd=None)", "os.compress(path, flags, mode=511, dir_fd=None)", "os._popen(path, flags, mode=511, dir_fd=None)", "os.byte_compile(path, flags, mode=511, dir_fd=None)"], "os.openpty()": ["openpty", "os.openfp()", "os._open()", "os.open()", "os._popen()", "os.penup()", "os.popen()", "os.fdopen()", "os.pen()", "os.try_compile_fn()", "os.urlopen()", "os._moments()", "os.forkpty()", "os.Comment()", "os._complexType()"], "os.pardir": ["os.pardir"], "os.path.commonpath(paths)": ["commonpath", "os.path.Comment(paths)", "os.path._commonType(paths)", "os.path.normpath(paths)", "os.path.common_type(paths)", "os.path.commonprefix(paths)", "os.path.convert_path(paths)", "os.path.compile_path(paths)", "os.path._path_join(paths)", "os.path.mkpath(paths)", "os.path.concat(paths)", "os.path.__concat__(paths)", "os.path._common_type_dispatcher(paths)", "os.path.concat_compat(paths)", "os.path.iconcat(paths)"], "os.path.commonprefix(list)": ["commonprefix", "os.path._commonType(list)", "os.path.config_prefix(list)", "os.path.common_type(list)", "os.path.commonpath(list)", "os.path.compiler_fixup(list)", "os.path.compress(list)", "os.path.decompress_file(list)", "os.path._common_shorten_repr(list)", "os.path.compile_file(list)", "os.path.find_common_type(list)", "os.path.iscomplex(list)", "os.path._tocomplex(list)", "os.path.gettempprefix(list)", "os.path.common_fill_value(list)"], "os.path.dirname(path)": ["dirname", "os.path.rename(path)", "os.path.bitname(path)", "os.path.isframe(path)", "os.path._modname(path)", "os.path.renames(path)", "os.path.filter_name(path)", "os.path.dirac_(path)", "os.path.dirac(path)", "os.path.uname(path)", "os.path.filename(path)", "os.path._kind_name(path)", "os.path._fix_names(path)", "os.path.__dir__(path)", "os.path.inherit_names(path)"], "os.path.exists(path)": ["exists", "os.path._exists(path)", "os.path.lexists(path)", "os.path._exit(path)", "os.path.exit(path)", "os.path.WEXITSTATUS(path)", "os.path.table_exists(path)", "os.path.fignum_exists(path)", "os.path.is_exiting(path)", "os.path.text(path)", "os.path._test(path)", "os.path._call_if_exists(path)", "os.path.dist(path)", "os.path.test(path)", "os.path.axis(path)"], "os.path.expanduser(path)": ["expanduser", "os.path._expand(path)", "os.path.TextParser(path)", "os.path.expandtabs(path)", "os.path._side_expander(path)", "os.path.expandvars(path)", "os.path.pause(path)", "os.path._expand_vars(path)", "os.path.legvander(path)", "os.path.vander(path)", "os.path._parser(path)", "os.path.easter(path)", "os.path.chebvander(path)", "os.path.hermvander(path)", "os.path.polyvander(path)"], "os.path.expandvars(path)": ["expandvars", "os.path._expand_vars(path)", "os.path.expandtabs(path)", "os.path._expand(path)", "os.path._side_expander(path)", "os.path.expanduser(path)", "os.path._expand_lang(path)", "os.path.expand_makefile_vars(path)", "os.path.scanvars(path)", "os.path.getcanvas(path)", "os.path.nanvar(path)", "os.path.TextParser(path)", "os.path.expand_dims(path)", "os.path.leapdays(path)", "os.path.pathdirs(path)"], "os.path.getatime(path)": ["getatime", "os.path.getmtime(path)", "os.path.getctime(path)", "os.path.getitimer(path)", "os.path._getname(path)", "os.path._get_name(path)", "os.path._name_get(path)", "os.path._getaction(path)", "os.path.setitimer(path)", "os.path._get_names(path)", "os.path._getattribute(path)", "os.path.getline(path)", "os.path.__getattr__(path)", "os.path.getfile(path)", "os.path.getabsfile(path)"], "os.path.getctime(path)": ["getctime", "os.path.getatime(path)", "os.path.getmtime(path)", "os.path.getitimer(path)", "os.path._getaction(path)", "os.path.setitimer(path)", "os.path.getline(path)", "os.path.getfile(path)", "os.path.getcontext(path)", "os.path._getname(path)", "os.path.gettext(path)", "os.path.getsize(path)", "os.path.__getitem__(path)", "os.path.getitem(path)", "os.path._time(path)"], "os.path.getmtime(path)": ["getmtime", "os.path.getatime(path)", "os.path.getctime(path)", "os.path.getitimer(path)", "os.path.setitimer(path)", "os.path.getline(path)", "os.path.getfile(path)", "os.path._getname(path)", "os.path.gettext(path)", "os.path.getsize(path)", "os.path.getmembers(path)", "os.path.__getitem__(path)", "os.path._getmembers(path)", "os.path.getitem(path)", "os.path._time(path)"], "os.path.isabs(path)": ["isabs", "os.path.__abs__(path)", "os.path._abs(path)", "os.path.abs(path)", "os.path.isub(path)", "os.path.is_mask(path)", "os.path.disable(path)", "os.path._isna(path)", "os.path.isclass(path)", "os.path.isMA(path)", "os.path.isabstract(path)", "os.path.__isub__(path)", "os.path.isna(path)", "os.path.barbs(path)", "os.path._alias(path)"], "os.path.ismount(path)": ["ismount", "os.path.ismodule(path)", "os.path.count(path)", "os.path.iselement(path)", "os.path.isroutine(path)", "os.path.is_not(path)", "os.path.isdown(path)", "os.path._counts(path)", "os.path.__import__(path)", "os.path.ion(path)", "os.path.isfunction(path)", "os.path.disconnect(path)", "os.path._isnotsuite(path)", "os.path.to_json(path)", "os.path.countOf(path)"], "os.path.join(path, *paths)": ["join", "os.path._join(path, *paths)", "os.path.joinseq(path, *paths)", "os.path.urljoin(path, *paths)", "os.path._in(path, *paths)", "os.path.jacobian(path, *paths)", "os.path._path_join(path, *paths)", "os.path.__inv__(path, *paths)", "os.path._sin(path, *paths)", "os.path.itn(path, *paths)", "os.path.ion(path, *paths)", "os.path.inv(path, *paths)", "os.path.min(path, *paths)", "os.path.to_json(path, *paths)", "os.path.polyint(path, *paths)"], "os.path.lexists(path)": ["lexists", "os.path.exists(path)", "os.path._exists(path)", "os.path._exit(path)", "os.path.exit(path)", "os.path.list(path)", "os.path.less(path)", "os.path.lstsq(path)", "os.path.WEXITSTATUS(path)", "os.path._call_if_exists(path)", "os.path.table_exists(path)", "os.path.legfit(path)", "os.path.listen(path)", "os.path.legint(path)", "os.path.fignum_exists(path)"], "os.path.normcase(path)": ["normcase", "os.path._normalize(path)", "os.path.normal(path)", "os.path.normalize(path)", "os.path.norm(path)", "os.path._format_size(path)", "os.path.fnmatchcase(path)", "os.path.normpath(path)", "os.path.colormaps(path)", "os.path.onrelease(path)", "os.path._parse_num(path)", "os.path.ignore(path)", "os.path.format(path)", "os.path.raises(path)", "os.path._format(path)"], "os.path.normpath(path)": ["normpath", "os.path.mkpath(path)", "os.path.normal(path)", "os.path.format(path)", "os.path._format(path)", "os.path.fnmatch(path)", "os.path.norm(path)", "os.path.relpath(path)", "os.path.commonpath(path)", "os.path.pformat(path)", "os.path.einsum_path(path)", "os.path.temppath(path)", "os.path.makepath(path)", "os.path._patch(path)", "os.path.normcase(path)"], "os.path.realpath(path)": ["realpath", "os.path.relpath(path)", "os.path._joinrealpath(path)", "os.path._safe_realpath(path)", "os.path.repeat(path)", "os.path.abspath(path)", "os.path.real(path)", "os.path._greedy_path(path)", "os.path.normpath(path)", "os.path._realType(path)", "os.path.get_path(path)", "os.path.temppath(path)", "os.path.makepath(path)", "os.path._patch(path)", "os.path.evaluate(path)"], "os.path.relpath(path)": ["relpath", "os.path.get_paths(path)", "os.path.prepare_qat(path)", "os.path.run_path(path)", "os.path.crypt(path)", "os.path.lstat(path)", "os.path._average_dispatcher(path)", "os.path._all_dispatcher(path)", "os.path._dispatcher(path)", "os.path._corrcoef_dispatcher(path)", "os.path.imread(path)", "os.path.gather(path)", "os.path.rsplit(path)", "os.path.script(path)", "os.path.scrypt(path)"], "os.path.relpath(path, start=os.curdir)": ["relpath", "os.path.get_paths(path, start=os.curdir)", "os.path.prepare_qat(path, start=os.curdir)", "os.path.run_path(path, start=os.curdir)", "os.path.crypt(path, start=os.curdir)", "os.path.lstat(path, start=os.curdir)", "os.path._average_dispatcher(path, start=os.curdir)", "os.path._all_dispatcher(path, start=os.curdir)", "os.path._dispatcher(path, start=os.curdir)", "os.path._corrcoef_dispatcher(path, start=os.curdir)", "os.path.imread(path, start=os.curdir)", "os.path.gather(path, start=os.curdir)", "os.path.rsplit(path, start=os.curdir)", "os.path.script(path, start=os.curdir)", "os.path.scrypt(path, start=os.curdir)"], "os.path.samefile(path1, path2)": ["samefile", "os.path._samefile(path1, path2)", "os.path.sameopenfile(path1, path2)", "os.path.isfile(path1, path2)", "os.path.simplefilter(path1, path2)", "os.path.savefig(path1, path2)", "os.path.getfile(path1, path2)", "os.path.is_tarfile(path1, path2)", "os.path.setprofile(path1, path2)", "os.path.fromfile(path1, path2)", "os.path.upsample(path1, path2)", "os.path.testfile(path1, path2)", "os.path.cmpfiles(path1, path2)", "os.path.nextfile(path1, path2)", "os.path.compile_file(path1, path2)"], "os.path.samestat(stat1, stat2)": ["samestat", "os.path._stat(stat1, stat2)", "os.path.isabstract(stat1, stat2)", "os.path.stat(stat1, stat2)", "os.path.savetxt(stat1, stat2)", "os.path._some_str(stat1, stat2)", "os.path.fstat(stat1, stat2)", "os.path.start(stat1, stat2)", "os.path.setxattr(stat1, stat2)", "os.path.lstat(stat1, stat2)", "os.path._has_metadata(stat1, stat2)", "os.path._start_server(stat1, stat2)", "os.path.start_server(stat1, stat2)", "os.path.update_names(stat1, stat2)", "os.path.random_state(stat1, stat2)"], "os.path.split(path)": ["split", "os.path.subplots(path)", "os.path.array_split(path)", "os.path.simplefilter(path)", "os.path.replicate(path)", "os.path.script(path)", "os.path.select(path)", "os.path.symlink(path)", "os.path.endswith(path)", "os.path._as_pairs(path)", "os.path.isin(path)", "os.path.pinv(path)", "os.path._lu_with_infos(path)", "os.path.setitimer(path)", "os.path.startswith(path)"], "os.path.splitdrive(path)": ["splitdrive", "os.path._splitdict(path)", "os.path.splitvalue(path)", "os.path.splitlines(path)", "os.path.splitext(path)", "os.path.split(path)", "os.path._splitext(path)", "os.path.splitdoc(path)", "os.path.splittype(path)", "os.path.splitport(path)", "os.path.splitattr(path)", "os.path.splituser(path)", "os.path.dsplit(path)", "os.path.vsplit(path)", "os.path.rsplit(path)"], "os.path.splitext(path)": ["splitext", "os.path._splitext(path)", "os.path.split(path)", "os.path.splittag(path)", "os.path._splitnetloc(path)", "os.path.dsplit(path)", "os.path.splittype(path)", "os.path.splitport(path)", "os.path.vsplit(path)", "os.path.splitattr(path)", "os.path.splituser(path)", "os.path.rsplit(path)", "os.path._splitdict(path)", "os.path.splithost(path)", "os.path.hsplit(path)"], "os.path.supports_unicode_filenames": ["os.path.supports_unicode_filenames"], "os.pathconf(path, name)": ["pathconf", "os.fpathconf(path, name)", "os.atof(path, name)", "os._patch(path, name)", "os.run_path(path, name)", "os.partition(path, name)", "os.os_fspath(path, name)", "os.mkpath(path, name)", "os.ispath(path, name)", "os._fspath(path, name)", "os.fspath(path, name)", "os.concat_compat(path, name)", "os._init_pathinfo(path, name)", "os.rpartition(path, name)", "os.readconfig(path, name)"], "os.pathconf_names": ["os.pathconf_names"], "os.pathsep": ["os.pathsep"], "os.pipe()": ["pipe", "os.Pipe()", "os.pipe2()", "os.pie()", "os._popen()", "os.PI()", "os.upper()", "os.popen()", "os.splittype()", "os.pipepager()", "os.pwrite()", "os.copper()", "os._simple()", "os._triple()", "os._pickle()"], "os.pipe2(flags)": ["pipe2", "os.pipe(flags)", "os.Pipe(flags)", "os.pie(flags)", "os._popen(flags)", "os.upper(flags)", "os.popen(flags)", "os.splittype(flags)", "os.PI(flags)", "os.pipepager(flags)", "os.pwrite(flags)", "os.copper(flags)", "os._simple(flags)", "os._triple(flags)", "os._pickle(flags)"], "os.plock(op)": ["plock"], "os.popen(cmd)": ["popen", "os._open(cmd)", "os.open(cmd)", "os.bltn_open(cmd)", "os.open_latin1(cmd)", "os.OpenWrapper(cmd)", "os._builtin_open(cmd)", "os._popen(cmd)", "os.compress(cmd)", "os.partition(cmd)", "os.argpartition(cmd)", "os.fromfile(cmd)", "os.rendezvous(cmd)", "os.run(cmd)", "os.pen(cmd)"], "os.popen(cmd, mode='r')": ["popen", "os.popen(cmd, mode=1)", "os._open(cmd, mode='r')", "os.open(cmd, mode='r')", "os.bltn_open(cmd, mode='r')", "os.open_latin1(cmd, mode='r')", "os.OpenWrapper(cmd, mode='r')", "os._builtin_open(cmd, mode='r')", "os._popen(cmd, mode='r')", "os.compress(cmd, mode='r')", "os.partition(cmd, mode='r')", "os.argpartition(cmd, mode='r')", "os.fromfile(cmd, mode='r')", "os.rendezvous(cmd, mode='r')", "os.run(cmd, mode='r')"], "os.popen(cmd, mode='r', buffering=-1)": ["popen", "os.popen(cmd, mode=1.0, buffering=(- '1'))", "os._open(cmd, mode='r', buffering=(- 1))", "os.open(cmd, mode='r', buffering=(- 1))", "os.bltn_open(cmd, mode='r', buffering=(- 1))", "os.open_latin1(cmd, mode='r', buffering=(- 1))", "os.OpenWrapper(cmd, mode='r', buffering=(- 1))", "os._builtin_open(cmd, mode='r', buffering=(- 1))", "os._popen(cmd, mode='r', buffering=(- 1))", "os.compress(cmd, mode='r', buffering=(- 1))", "os.partition(cmd, mode='r', buffering=(- 1))", "os.argpartition(cmd, mode='r', buffering=(- 1))", "os.fromfile(cmd, mode='r', buffering=(- 1))", "os.rendezvous(cmd, mode='r', buffering=(- 1))", "os.run(cmd, mode='r', buffering=(- 1))"], "os.posix_fadvise(fd, offset, len, advice)": ["posix_fadvise", "os.posix_fallocate(fd, offset, len, advice)", "os._init_posix(fd, offset, len, advice)", "os._parse_proxy(fd, offset, len, advice)", "os.isposinf(fd, offset, len, advice)", "os._ix__dispatcher(fd, offset, len, advice)", "os.setpos(fd, offset, len, advice)", "os.raises(fd, offset, len, advice)", "os._polydiv_dispatcher(fd, offset, len, advice)", "os.masked_outside(fd, offset, len, advice)", "os._polyint_dispatcher(fd, offset, len, advice)", "os._init_non_posix(fd, offset, len, advice)", "os._parse_size(fd, offset, len, advice)", "os._polyfit_dispatcher(fd, offset, len, advice)", "os._get_devices_properties(fd, offset, len, advice)"], "os.posix_fallocate(fd, offset, len)": ["posix_fallocate", "os.allocate_lock(fd, offset, len)", "os._host_allocator(fd, offset, len)", "os.posix_fadvise(fd, offset, len)", "os._print_locale(fd, offset, len)", "os._calculate_shapes(fd, offset, len)", "os.locate(fd, offset, len)", "os.set_locale(fd, offset, len)", "os._init_posix(fd, offset, len)", "os.floating_types(fd, offset, len)", "os.calculate_gain(fd, offset, len)", "os.locator_params(fd, offset, len)", "os._format_pipe(fd, offset, len)", "os.post_mortem(fd, offset, len)", "os._write_float(fd, offset, len)"], "os.pread(fd, n, offset)": ["pread", "os.preadv(fd, n, offset)", "os.read(fd, n, offset)", "os._read(fd, n, offset)", "os.readv(fd, n, offset)", "os.pad(fd, n, offset)", "os.reload(fd, n, offset)", "os.imread(fd, n, offset)", "os.parseaddr(fd, n, offset)", "os.rand_(fd, n, offset)", "os.radd(fd, n, offset)", "os.real(fd, n, offset)", "os.prod(fd, n, offset)", "os._prod(fd, n, offset)", "os.deprecated(fd, n, offset)"], "os.preadv(fd, buffers, offset)": ["preadv", "os.pwritev(fd, buffers, offset)", "os.recv(fd, buffers, offset)", "os.prod(fd, buffers, offset)", "os.irecv(fd, buffers, offset)", "os.parse(fd, buffers, offset)", "os.create(fd, buffers, offset)", "os.hermeder(fd, buffers, offset)", "os.send(fd, buffers, offset)", "os.broadcast(fd, buffers, offset)", "os.open(fd, buffers, offset)", "os.as_strided(fd, buffers, offset)", "os.all_reduce(fd, buffers, offset)", "os.array(fd, buffers, offset)", "os.isend(fd, buffers, offset)"], "os.preadv(fd, buffers, offset, flags=0)": ["preadv", "os.preadv(fd, buffers, offset, flags='0')", "os.pwritev(fd, buffers, offset, flags=0)", "os.recv(fd, buffers, offset, flags=0)", "os.prod(fd, buffers, offset, flags=0)", "os.irecv(fd, buffers, offset, flags=0)", "os.parse(fd, buffers, offset, flags=0)", "os.create(fd, buffers, offset, flags=0)", "os.hermeder(fd, buffers, offset, flags=0)", "os.send(fd, buffers, offset, flags=0)", "os.broadcast(fd, buffers, offset, flags=0)", "os.open(fd, buffers, offset, flags=0)", "os.as_strided(fd, buffers, offset, flags=0)", "os.all_reduce(fd, buffers, offset, flags=0)", "os.array(fd, buffers, offset, flags=0)"], "os.putenv(key, value)": ["putenv", "os._putenv(key, value)", "os.unsetenv(key, value)", "os._unsetenv(key, value)", "os.getenv(key, value)", "os.put(key, value)", "os.pstdev(key, value)", "os.pen(key, value)", "os.pwritev(key, value)", "os.getenvb(key, value)", "os._open(key, value)", "os.open(key, value)", "os.pinv(key, value)", "os.venv(key, value)", "os.utime(key, value)"], "os.pwrite(fd, str, offset)": ["pwrite", "os.pwritev(fd, str, offset)", "os.write(fd, str, offset)", "os.writev(fd, str, offset)", "os._writen(fd, str, offset)", "os.write32u(fd, str, offset)", "os.writedoc(fd, str, offset)", "os._write_u32(fd, str, offset)", "os.pprint(fd, str, offset)", "os.writedocs(fd, str, offset)", "os.readwrite(fd, str, offset)", "os._wrapit(fd, str, offset)", "os.getwriter(fd, str, offset)", "os.pie(fd, str, offset)", "os.winter(fd, str, offset)"], "os.pwritev(fd, buffers, offset)": ["pwritev", "os.preadv(fd, buffers, offset)", "os.recv(fd, buffers, offset)", "os.register(fd, buffers, offset)", "os.split(fd, buffers, offset)", "os.irecv(fd, buffers, offset)", "os.parse(fd, buffers, offset)", "os.create(fd, buffers, offset)", "os.hermint(fd, buffers, offset)", "os.compile(fd, buffers, offset)", "os.polyint(fd, buffers, offset)", "os.simplefilter(fd, buffers, offset)", "os._ptp(fd, buffers, offset)", "os.hermeint(fd, buffers, offset)", "os.inherit_names(fd, buffers, offset)"], "os.read(fd, n)": ["read", "os._read(fd, n)", "os.pread(fd, n)", "os.readv(fd, n)", "os.reload(fd, n)", "os.preadv(fd, n)", "os.imread(fd, n)", "os.rand_(fd, n)", "os.radd(fd, n)", "os.real(fd, n)", "os.read_hdf(fd, n)", "os.rands(fd, n)", "os.read_csv(fd, n)", "os.hermeadd(fd, n)", "os.read_fwf(fd, n)"], "os.readlink(path)": ["readlink"], "os.readlink(path, dir_fd=None)": ["readlink", "os.readlink(path, dir_fd=None)"], "os.readv(fd, buffers)": ["readv", "os.preadv(fd, buffers)", "os.read(fd, buffers)", "os._read(fd, buffers)", "os.pread(fd, buffers)", "os.reload(fd, buffers)", "os.imread(fd, buffers)", "os.radviz(fd, buffers)", "os.rand_(fd, buffers)", "os.recv(fd, buffers)", "os.rdiv(fd, buffers)", "os.radd(fd, buffers)", "os.truediv(fd, buffers)", "os.__truediv__(fd, buffers)", "os.real(fd, buffers)"], "os.register_at_fork()": ["register_at_fork", "os.register_cmap()", "os.get_worker_info()", "os.token_urlsafe()", "os.makeStringSeries()", "os.makePeriodSeries()", "os.format_time()", "os.format_stack()", "os.ParserCreate()", "os.random_state()", "os.register_after_fork()", "os.log_to_stderr()", "os.getLogger()", "os.ndpointer()", "os.test()"], "os.register_at_fork(after_in_child=None)": ["register_at_fork", "os.register_at_fork(after_in_child=None)", "os.register_cmap(after_in_child=None)", "os.get_worker_info(after_in_child=None)", "os.token_urlsafe(after_in_child=None)", "os.makeStringSeries(after_in_child=None)", "os.makePeriodSeries(after_in_child=None)", "os.format_time(after_in_child=None)", "os.format_stack(after_in_child=None)", "os.ParserCreate(after_in_child=None)", "os.random_state(after_in_child=None)", "os.register_after_fork(after_in_child=None)", "os.log_to_stderr(after_in_child=None)", "os.getLogger(after_in_child=None)", "os.ndpointer(after_in_child=None)"], "os.register_at_fork(after_in_parent=None)": ["register_at_fork", "os.register_at_fork(after_in_parent=None)", "os.register_cmap(after_in_parent=None)", "os.get_worker_info(after_in_parent=None)", "os.token_urlsafe(after_in_parent=None)", "os.makeStringSeries(after_in_parent=None)", "os.makePeriodSeries(after_in_parent=None)", "os.format_time(after_in_parent=None)", "os.format_stack(after_in_parent=None)", "os.ParserCreate(after_in_parent=None)", "os.random_state(after_in_parent=None)", "os.register_after_fork(after_in_parent=None)", "os.log_to_stderr(after_in_parent=None)", "os.getLogger(after_in_parent=None)", "os.ndpointer(after_in_parent=None)"], "os.register_at_fork(before=None)": ["register_at_fork", "os.register_at_fork(before=None)", "os.register_cmap(before=None)", "os.get_worker_info(before=None)", "os.token_urlsafe(before=None)", "os.makeStringSeries(before=None)", "os.makePeriodSeries(before=None)", "os.format_time(before=None)", "os.format_stack(before=None)", "os.ParserCreate(before=None)", "os.random_state(before=None)", "os.register_after_fork(before=None)", "os.log_to_stderr(before=None)", "os.getLogger(before=None)", "os.ndpointer(before=None)"], "os.register_at_fork(before=None, after_in_child=None)": ["register_at_fork", "os.register_at_fork(before=None, after_in_child=None)", "os.register_cmap(before=None, after_in_child=None)", "os.get_worker_info(before=None, after_in_child=None)", "os.token_urlsafe(before=None, after_in_child=None)", "os.makeStringSeries(before=None, after_in_child=None)", "os.makePeriodSeries(before=None, after_in_child=None)", "os.format_time(before=None, after_in_child=None)", "os.format_stack(before=None, after_in_child=None)", "os.ParserCreate(before=None, after_in_child=None)", "os.random_state(before=None, after_in_child=None)", "os.register_after_fork(before=None, after_in_child=None)", "os.log_to_stderr(before=None, after_in_child=None)", "os.getLogger(before=None, after_in_child=None)", "os.ndpointer(before=None, after_in_child=None)"], "os.register_at_fork(before=None, after_in_parent=None)": ["register_at_fork", "os.register_at_fork(before=None, after_in_parent=None)", "os.register_cmap(before=None, after_in_parent=None)", "os.get_worker_info(before=None, after_in_parent=None)", "os.token_urlsafe(before=None, after_in_parent=None)", "os.makeStringSeries(before=None, after_in_parent=None)", "os.makePeriodSeries(before=None, after_in_parent=None)", "os.format_time(before=None, after_in_parent=None)", "os.format_stack(before=None, after_in_parent=None)", "os.ParserCreate(before=None, after_in_parent=None)", "os.random_state(before=None, after_in_parent=None)", "os.register_after_fork(before=None, after_in_parent=None)", "os.log_to_stderr(before=None, after_in_parent=None)", "os.getLogger(before=None, after_in_parent=None)", "os.ndpointer(before=None, after_in_parent=None)"], "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)": ["register_at_fork", "os.register_at_fork(before=None, after_in_parent=None, after_in_child=None)", "os.register_cmap(before=None, after_in_parent=None, after_in_child=None)", "os.get_worker_info(before=None, after_in_parent=None, after_in_child=None)", "os.token_urlsafe(before=None, after_in_parent=None, after_in_child=None)", "os.makeStringSeries(before=None, after_in_parent=None, after_in_child=None)", "os.makePeriodSeries(before=None, after_in_parent=None, after_in_child=None)", "os.format_time(before=None, after_in_parent=None, after_in_child=None)", "os.format_stack(before=None, after_in_parent=None, after_in_child=None)", "os.ParserCreate(before=None, after_in_parent=None, after_in_child=None)", "os.random_state(before=None, after_in_parent=None, after_in_child=None)", "os.register_after_fork(before=None, after_in_parent=None, after_in_child=None)", "os.log_to_stderr(before=None, after_in_parent=None, after_in_child=None)", "os.getLogger(before=None, after_in_parent=None, after_in_child=None)", "os.ndpointer(before=None, after_in_parent=None, after_in_child=None)"], "os.remove(path)": ["remove", "os.rmdir(path)", "os.readmodule(path)", "os.recv(path)", "os.irecv(path)", "os.readmodule_ex(path)", "os.getmodule(path)", "os.unlink(path)", "os.encode(path)", "os._stat(path)", "os.stat(path)", "os.decode(path)", "os.freeze(path)", "os.lstat(path)", "os.urlretrieve(path)"], "os.remove(path, dir_fd=None)": ["remove", "os.remove(path, dir_fd=None)", "os.rmdir(path, dir_fd=None)", "os.readmodule(path, dir_fd=None)", "os.recv(path, dir_fd=None)", "os.irecv(path, dir_fd=None)", "os.readmodule_ex(path, dir_fd=None)", "os.getmodule(path, dir_fd=None)", "os.unlink(path, dir_fd=None)", "os.encode(path, dir_fd=None)", "os._stat(path, dir_fd=None)", "os.stat(path, dir_fd=None)", "os.decode(path, dir_fd=None)", "os.freeze(path, dir_fd=None)", "os.lstat(path, dir_fd=None)"], "os.removedirs(name)": ["removedirs", "os.remove(name)", "os.removeResult(name)", "os.removeHandler(name)", "os.rmdir(name)", "os.removeduppaths(name)", "os.removexattr(name)", "os.remove_tree(name)", "os.moveaxis(name)", "os.makedirs(name)", "os._removeHandlerRef(name)", "os.remote(name)", "os.resolve(name)", "os.recvfds(name)", "os.tempdir(name)"], "os.removexattr(path, attribute)": ["removexattr", "os.getxattr(path, attribute)", "os._copyxattr(path, attribute)", "os.copystat(path, attribute)", "os.copymode(path, attribute)", "os.stat(path, attribute)", "os.copyfile(path, attribute)", "os.copy(path, attribute)", "os.copy2(path, attribute)", "os.eventplot(path, attribute)", "os.move_file(path, attribute)", "os._formatparam(path, attribute)", "os.hermval(path, attribute)", "os.hermder(path, attribute)", "os.hermeder(path, attribute)"], "os.removexattr(path, attribute, follow_symlinks=True)": ["removexattr", "os.removexattr(path, attribute, follow_symlinks=False)", "os.getxattr(path, attribute, follow_symlinks=True)", "os._copyxattr(path, attribute, follow_symlinks=True)", "os.copystat(path, attribute, follow_symlinks=True)", "os.copymode(path, attribute, follow_symlinks=True)", "os.stat(path, attribute, follow_symlinks=True)", "os.copyfile(path, attribute, follow_symlinks=True)", "os.copy(path, attribute, follow_symlinks=True)", "os.copy2(path, attribute, follow_symlinks=True)", "os.eventplot(path, attribute, follow_symlinks=True)", "os.move_file(path, attribute, follow_symlinks=True)", "os._formatparam(path, attribute, follow_symlinks=True)", "os.hermval(path, attribute, follow_symlinks=True)", "os.hermder(path, attribute, follow_symlinks=True)"], "os.rename(src, dst)": ["rename", "os.replace(src, dst)", "os.link(src, dst)", "os.remote(src, dst)", "os._readmodule(src, dst)", "os.nanmean(src, dst)", "os.prepare(src, dst)", "os.visiblename(src, dst)", "os.onrelease(src, dst)", "os.translate(src, dst)", "os.nansum(src, dst)", "os.rmtree(src, dst)", "os.screensize(src, dst)", "os.percentile(src, dst)", "os.repeat(src, dst)"], "os.rename(src, dst, dst_dir_fd=None)": ["rename", "os.rename(src, dst, dst_dir_fd=None)", "os.replace(src, dst, dst_dir_fd=None)", "os.link(src, dst, dst_dir_fd=None)", "os.remote(src, dst, dst_dir_fd=None)", "os._readmodule(src, dst, dst_dir_fd=None)", "os.nanmean(src, dst, dst_dir_fd=None)", "os.prepare(src, dst, dst_dir_fd=None)", "os.visiblename(src, dst, dst_dir_fd=None)", "os.onrelease(src, dst, dst_dir_fd=None)", "os.translate(src, dst, dst_dir_fd=None)", "os.nansum(src, dst, dst_dir_fd=None)", "os.rmtree(src, dst, dst_dir_fd=None)", "os.screensize(src, dst, dst_dir_fd=None)", "os.percentile(src, dst, dst_dir_fd=None)"], "os.rename(src, dst, src_dir_fd=None)": ["rename", "os.rename(src, dst, src_dir_fd=None)", "os.replace(src, dst, src_dir_fd=None)", "os.link(src, dst, src_dir_fd=None)", "os.remote(src, dst, src_dir_fd=None)", "os._readmodule(src, dst, src_dir_fd=None)", "os.nanmean(src, dst, src_dir_fd=None)", "os.prepare(src, dst, src_dir_fd=None)", "os.visiblename(src, dst, src_dir_fd=None)", "os.onrelease(src, dst, src_dir_fd=None)", "os.translate(src, dst, src_dir_fd=None)", "os.nansum(src, dst, src_dir_fd=None)", "os.rmtree(src, dst, src_dir_fd=None)", "os.screensize(src, dst, src_dir_fd=None)", "os.percentile(src, dst, src_dir_fd=None)"], "os.rename(src, dst, src_dir_fd=None, dst_dir_fd=None)": ["rename", "os.rename(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.replace(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.link(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.remote(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os._readmodule(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.nanmean(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.prepare(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.visiblename(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.onrelease(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.translate(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.nansum(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.rmtree(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.screensize(src, dst, src_dir_fd=None, dst_dir_fd=None)", "os.percentile(src, dst, src_dir_fd=None, dst_dir_fd=None)"], "os.renames(old, new)": ["renames", "os.rename(old, new)", "os._newnames(old, new)", "os._get_names(old, new)", "os._getname(old, new)", "os.dirname(old, new)", "os._newname(old, new)", "os.typename(old, new)", "os._get_name(old, new)", "os.image_names(old, new)", "os._basename(old, new)", "os.basename(old, new)", "os.uname(old, new)", "os._getnamelist(old, new)", "os._name_get(old, new)"], "os.replace(src, dst)": ["replace", "os.prepare(src, dst)", "os.rename(src, dst)", "os.reduce(src, dst)", "os._replace_dispatcher(src, dst)", "os.urlencode(src, dst)", "os._create_fn(src, dst)", "os._average_dispatcher(src, dst)", "os.interpolate_1d(src, dst)", "os.interpolate_2d(src, dst)", "os.namedtuple(src, dst)", "os._namedtuple(src, dst)", "os.percentile(src, dst)", "os._makeLoader(src, dst)", "os.all_reduce(src, dst)"], "os.replace(src, dst, src_dir_fd=None)": ["replace", "os.replace(src, dst, src_dir_fd=None)", "os.prepare(src, dst, src_dir_fd=None)", "os.rename(src, dst, src_dir_fd=None)", "os.reduce(src, dst, src_dir_fd=None)", "os._replace_dispatcher(src, dst, src_dir_fd=None)", "os.urlencode(src, dst, src_dir_fd=None)", "os._create_fn(src, dst, src_dir_fd=None)", "os._average_dispatcher(src, dst, src_dir_fd=None)", "os.interpolate_1d(src, dst, src_dir_fd=None)", "os.interpolate_2d(src, dst, src_dir_fd=None)", "os.namedtuple(src, dst, src_dir_fd=None)", "os._namedtuple(src, dst, src_dir_fd=None)", "os.percentile(src, dst, src_dir_fd=None)", "os._makeLoader(src, dst, src_dir_fd=None)"], "os.rmdir(path)": ["rmdir", "os.remove(path)", "os.unlink(path)", "os.argmin(path)", "os.median(path)", "os._median(path)", "os.require(path)", "os.dis(path)", "os._stat(path)", "os.tri(path)", "os.stat(path)", "os.min(path)", "os.lstat(path)", "os.fromfile(path)", "os._walk_dir(path)"], "os.rmdir(path, dir_fd=None)": ["rmdir", "os.rmdir(path, dir_fd=None)", "os.remove(path, dir_fd=None)", "os.unlink(path, dir_fd=None)", "os.argmin(path, dir_fd=None)", "os.median(path, dir_fd=None)", "os._median(path, dir_fd=None)", "os.require(path, dir_fd=None)", "os.dis(path, dir_fd=None)", "os._stat(path, dir_fd=None)", "os.tri(path, dir_fd=None)", "os.stat(path, dir_fd=None)", "os.min(path, dir_fd=None)", "os.lstat(path, dir_fd=None)", "os.fromfile(path, dir_fd=None)"], "os.scandir()": ["scandir", "os.socketpair()", "os.listdir()", "os.ndpointer()", "os.screensize()", "os.showwarning()", "os.askokcancel()", "os.barrier()", "os.ensure_clean()", "os.dis()", "os.colorbar()", "os.register_cmap()", "os.removeHandler()", "os.localtime()", "os.read_json()"], "os.scandir(path='.')": ["scandir", "os.scandir(path=1)", "os.socketpair(path='.')", "os.listdir(path='.')", "os.ndpointer(path='.')", "os.screensize(path='.')", "os.showwarning(path='.')", "os.askokcancel(path='.')", "os.barrier(path='.')", "os.ensure_clean(path='.')", "os.dis(path='.')", "os.colorbar(path='.')", "os.register_cmap(path='.')", "os.removeHandler(path='.')", "os.localtime(path='.')"], "os.sched_get_priority_max(policy)": ["sched_get_priority_max", "os.sched_get_priority_min(policy)", "os.sched_getaffinity(policy)", "os.getpriority(policy)", "os.sched_rr_get_interval(policy)", "os.get_traced_memory(policy)", "os.sched_getparam(policy)", "os.setpriority(policy)", "os.get_property_stubs(policy)", "os.get_importer(policy)", "os._get_revised_path(policy)", "os._get_registered_option(policy)", "os._get_torch_home(policy)", "os.get_protocol_name(policy)", "os.get_parent_map(policy)"], "os.sched_get_priority_min(policy)": ["sched_get_priority_min", "os.sched_get_priority_max(policy)", "os.sched_getaffinity(policy)", "os.sched_rr_get_interval(policy)", "os.getpriority(policy)", "os.get_traced_memory(policy)", "os.sched_getparam(policy)", "os.setpriority(policy)", "os.get_property_stubs(policy)", "os.get_importer(policy)", "os.get_type_line(policy)", "os._get_registered_option(policy)", "os.get_python_inc(policy)", "os.get_type_hints(policy)", "os._get_torch_home(policy)"], "os.sched_getaffinity(pid)": ["sched_getaffinity", "os.sched_get_priority_min(pid)", "os.sched_get_priority_max(pid)", "os.sched_getparam(pid)", "os.sched_rr_get_interval(pid)", "os._kl_beta_infinity(pid)", "os.sched_setaffinity(pid)", "os.get_schema(pid)", "os._get_iscased(pid)", "os.get_remaining_size(pid)", "os._getfinalpathname(pid)", "os._check_capability(pid)", "os.get_scheme_names(pid)", "os._get_revised_path(pid)", "os._getfield_is_safe(pid)"], "os.sched_getparam(pid)": ["sched_getparam", "os.get_scheme_names(pid)", "os.get_phrase(pid)", "os.get_schema(pid)", "os.get_parameter(pid)", "os.sched_getaffinity(pid)", "os._get_iscased(pid)", "os.sched_rr_get_interval(pid)", "os.sched_getscheduler(pid)", "os.get_scale_names(pid)", "os.sched_get_priority_min(pid)", "os.sched_get_priority_max(pid)", "os._get_revised_path(pid)", "os.clearcache(pid)", "os.TextParser(pid)"], "os.sched_getscheduler(pid)": ["sched_getscheduler", "os.sched_getparam(pid)", "os.sched_rr_get_interval(pid)", "os.sched_setscheduler(pid)", "os.getsource(pid)", "os.get_schema(pid)", "os.masked_greater(pid)", "os.getsourcelines(pid)", "os._get_iscased(pid)", "os.getuserbase(pid)", "os.sched_yield(pid)", "os.send_handle(pid)", "os._getuserbase(pid)", "os._set_SIGCHLD_handler(pid)", "os._searchsorted_dispatcher(pid)"], "os.sched_rr_get_interval(pid)": ["sched_rr_get_interval", "os.sched_get_priority_min(pid)", "os._get_literal_prefix(pid)", "os.sched_get_priority_max(pid)", "os.sched_getaffinity(pid)", "os.sched_getparam(pid)", "os.sched_getscheduler(pid)", "os.get_interpreter(pid)", "os.get_inheritable(pid)", "os._get_linear_ramps(pid)", "os.get_scheme_names(pid)", "os.get_traced_memory(pid)", "os._get_traces(pid)", "os._get_ordinal_range(pid)", "os._is_internal_frame(pid)"], "os.sched_setaffinity(pid, mask)": ["sched_setaffinity", "os._sanity_check(pid, mask)", "os.sched_setparam(pid, mask)", "os._assert_finite(pid, mask)", "os.sched_getaffinity(pid, mask)", "os._identity_dispatcher(pid, mask)", "os.init_backend(pid, mask)", "os._kl_beta_infinity(pid, mask)", "os._setdiff1d_dispatcher(pid, mask)", "os._startswith_dispatcher(pid, mask)", "os._getintp_ctype(pid, mask)", "os._try_get_dispatched_fn(pid, mask)", "os.set_child_watcher(pid, mask)", "os._get_cached(pid, mask)", "os._check_instance(pid, mask)"], "os.sched_setparam(pid, param)": ["sched_setparam", "os.sched_setaffinity(pid, param)", "os.sched_setscheduler(pid, param)", "os.build_param_list(pid, param)", "os._histogram_dispatcher(pid, param)", "os.decode_params(pid, param)", "os.prepare_child(pid, param)", "os._flush_std_streams(pid, param)", "os._splitparam(pid, param)", "os._get_stream(pid, param)", "os._get_cached(pid, param)", "os.set_child_watcher(pid, param)", "os._doc_params(pid, param)", "os._parseparam(pid, param)", "os.socketpair(pid, param)"], "os.sched_yield()": ["sched_yield", "os.shield()", "os._usefields()", "os._get_cached()", "os._check_size()", "os.parsefield()", "os.check_file()", "os._type_check()", "os.chebadd()", "os._field_accessor()", "os.chebder()", "os._eye_dispatcher()", "os.chebdiv()", "os.sched_setparam()", "os.sched_setscheduler()"], "os.sendfile(out, in, offset, count)": [], "os.sendfile(out, in, offset, count, flags=0)": [], "os.sendfile(out, in, offset, count, headers)": [], "os.sendfile(out, in, offset, count, headers, flags=0)": [], "os.sendfile(out, in, offset, count, headers, trailers)": [], "os.sendfile(out, in, offset, count, headers, trailers, flags=0)": [], "os.sep": ["os.sep"], "os.set_blocking(fd, blocking)": ["set_blocking"], "os.set_handle_inheritable(handle, inheritable)": ["set_handle_inheritable"], "os.seteuid(euid)": ["seteuid", "os.setreuid(euid)", "os.setuid(euid)", "os.setresuid(euid)", "os.setegid(euid)", "os.geteuid(euid)", "os.setregid(euid)", "os.setsid(euid)", "os.setgid(euid)", "os.getuid(euid)", "os.setresgid(euid)", "os.getresuid(euid)", "os.setpgid(euid)", "os._get_uid(euid)", "os.getegid(euid)"], "os.setgid(gid)": ["setgid", "os.setegid(gid)", "os.setpgid(gid)", "os.setregid(gid)", "os.setuid(gid)", "os.getgid(gid)", "os.setsid(gid)", "os.setresgid(gid)", "os._get_gid(gid)", "os.seteuid(gid)", "os.getpgid(gid)", "os.getegid(gid)", "os.setreuid(gid)", "os._setdef(gid)", "os.getresgid(gid)"], "os.setgroups(groups)": ["setgroups", "os.getgroups(groups)", "os.get_group(groups)", "os.setpgrp(groups)", "os.group(groups)", "os.setup(groups)", "os._group(groups)", "os._setup(groups)", "os.get_group_list(groups)", "os._get_group_size(groups)", "os.setpos(groups)", "os.tcsetpgrp(groups)", "os.getpgrp(groups)", "os.stop(groups)", "os.setp(groups)"], "os.setpgid(pid, pgrp)": ["setpgid", "os.setgid(pid, pgrp)", "os.setegid(pid, pgrp)", "os.getpgid(pid, pgrp)", "os.setregid(pid, pgrp)", "os.setuid(pid, pgrp)", "os.getpid(pid, pgrp)", "os.getgid(pid, pgrp)", "os.setsid(pid, pgrp)", "os.setresgid(pid, pgrp)", "os.setp(pid, pgrp)", "os._get_gid(pid, pgrp)", "os.seteuid(pid, pgrp)", "os.setpgrp(pid, pgrp)", "os.stripid(pid, pgrp)"], "os.setpgrp()": ["setpgrp", "os.tcsetpgrp()", "os.getpgrp()", "os.tcgetpgrp()", "os.setgroups()", "os.setp()", "os.setpgid()", "os.getpager()", "os.setup()", "os.strip()", "os._setup()", "os.lstrip()", "os.setpos()", "os.sethelper()", "os.seterr()"], "os.setregid(rgid, egid)": ["setregid", "os.setresgid(rgid, egid)", "os.setegid(rgid, egid)", "os.setreuid(rgid, egid)", "os.setgid(rgid, egid)", "os.getresgid(rgid, egid)", "os.setresuid(rgid, egid)", "os.seteuid(rgid, egid)", "os.setpgid(rgid, egid)", "os.getegid(rgid, egid)", "os.setuid(rgid, egid)", "os.getresuid(rgid, egid)", "os.getgid(rgid, egid)", "os.setsid(rgid, egid)", "os._get_gid(rgid, egid)"], "os.setresuid(ruid, euid, suid)": ["setresuid", "os.setreuid(ruid, euid, suid)", "os.setresgid(ruid, euid, suid)", "os.getresuid(ruid, euid, suid)", "os.seteuid(ruid, euid, suid)", "os.setregid(ruid, euid, suid)", "os.setuid(ruid, euid, suid)", "os.setsid(ruid, euid, suid)", "os.getresgid(ruid, euid, suid)", "os.setegid(ruid, euid, suid)", "os.geteuid(ruid, euid, suid)", "os.getsid(ruid, euid, suid)", "os.setgid(ruid, euid, suid)", "os.getuid(ruid, euid, suid)", "os.set_threshold(ruid, euid, suid)"], "os.setreuid(ruid, euid)": ["setreuid", "os.setresuid(ruid, euid)", "os.seteuid(ruid, euid)", "os.setregid(ruid, euid)", "os.setuid(ruid, euid)", "os.setresgid(ruid, euid)", "os.getresuid(ruid, euid)", "os.setegid(ruid, euid)", "os.geteuid(ruid, euid)", "os.getresgid(ruid, euid)", "os.setsid(ruid, euid)", "os.setgid(ruid, euid)", "os.getuid(ruid, euid)", "os.setpgid(ruid, euid)", "os._get_uid(ruid, euid)"], "os.setuid(uid)": ["setuid", "os.seteuid(uid)", "os.setreuid(uid)", "os.setsid(uid)", "os.setgid(uid)", "os.getuid(uid)", "os.setresuid(uid)", "os.setegid(uid)", "os.setpgid(uid)", "os._get_uid(uid)", "os.setquit(uid)", "os.geteuid(uid)", "os.setup(uid)", "os._setup(uid)", "os.setregid(uid)"], "os.setxattr(path, attribute, value)": ["setxattr", "os._structure(path, attribute, value)", "os.scatter_kwargs(path, attribute, value)", "os.simplefilter(path, attribute, value)", "os.format_string(path, attribute, value)", "os.register(path, attribute, value)", "os.all_gather_coalesced(path, attribute, value)", "os.send(path, attribute, value)", "os.all_gather(path, attribute, value)", "os.intersect1d(path, attribute, value)", "os.get_jit_def(path, attribute, value)", "os._spawn_posix(path, attribute, value)", "os.split(path, attribute, value)", "os.isend(path, attribute, value)", "os.spawn(path, attribute, value)"], "os.setxattr(path, attribute, value, flags=0)": ["setxattr", "os.setxattr(path, attribute, value, flags='0')", "os._structure(path, attribute, value, flags=0)", "os.scatter_kwargs(path, attribute, value, flags=0)", "os.simplefilter(path, attribute, value, flags=0)", "os.format_string(path, attribute, value, flags=0)", "os.register(path, attribute, value, flags=0)", "os.all_gather_coalesced(path, attribute, value, flags=0)", "os.send(path, attribute, value, flags=0)", "os.all_gather(path, attribute, value, flags=0)", "os.intersect1d(path, attribute, value, flags=0)", "os.get_jit_def(path, attribute, value, flags=0)", "os._spawn_posix(path, attribute, value, flags=0)", "os.split(path, attribute, value, flags=0)", "os.isend(path, attribute, value, flags=0)"], "os.setxattr(path, attribute, value, follow_symlinks=True)": ["setxattr", "os.setxattr(path, attribute, value, follow_symlinks=False)", "os._structure(path, attribute, value, follow_symlinks=True)", "os.scatter_kwargs(path, attribute, value, follow_symlinks=True)", "os.simplefilter(path, attribute, value, follow_symlinks=True)", "os.format_string(path, attribute, value, follow_symlinks=True)", "os.register(path, attribute, value, follow_symlinks=True)", "os.all_gather_coalesced(path, attribute, value, follow_symlinks=True)", "os.send(path, attribute, value, follow_symlinks=True)", "os.all_gather(path, attribute, value, follow_symlinks=True)", "os.intersect1d(path, attribute, value, follow_symlinks=True)", "os.get_jit_def(path, attribute, value, follow_symlinks=True)", "os._spawn_posix(path, attribute, value, follow_symlinks=True)", "os.split(path, attribute, value, follow_symlinks=True)", "os.isend(path, attribute, value, follow_symlinks=True)"], "os.spawnl(mode, path)": ["spawnl", "os.spawnle(mode, path)", "os.spawnlp(mode, path)", "os.spawn(mode, path)", "os.spawnlpe(mode, path)", "os.spawnv(mode, path)", "os.spawnvp(mode, path)", "os.spawnve(mode, path)", "os._spawnvef(mode, path)", "os._spawn_nt(mode, path)", "os.spawnvpe(mode, path)", "os.axhspan(mode, path)", "os.axvspan(mode, path)", "os._spawn_posix(mode, path)", "os.angle(mode, path)"], "os.spawnle(mode, path, env)": ["spawnle", "os.spawnlpe(mode, path, env)", "os.spawnl(mode, path, env)", "os.spawnlp(mode, path, env)", "os.spawnve(mode, path, env)", "os.spawn(mode, path, env)", "os._spawnvef(mode, path, env)", "os.spawnvpe(mode, path, env)", "os.spawnv(mode, path, env)", "os.spawnvp(mode, path, env)", "os.angle(mode, path, env)", "os._spawn_nt(mode, path, env)", "os.nanle(mode, path, env)", "os.yscale(mode, path, env)", "os._single(mode, path, env)"], "os.spawnlp(mode, file)": ["spawnlp", "os.spawnlpe(mode, file)", "os.spawnl(mode, file)", "os.spawnvp(mode, file)", "os.spawnle(mode, file)", "os.spawn(mode, file)", "os.spawnvpe(mode, file)", "os.spawnv(mode, file)", "os.spawnve(mode, file)", "os._spawnvef(mode, file)", "os._spawn_nt(mode, file)", "os.isalpha(mode, file)", "os.axhspan(mode, file)", "os.axvspan(mode, file)", "os._spawn_posix(mode, file)"], "os.spawnlpe(mode, file, env)": ["spawnlpe", "os.spawnle(mode, file, env)", "os.spawnlp(mode, file, env)", "os.spawnvpe(mode, file, env)", "os.spawnl(mode, file, env)", "os.spawnvp(mode, file, env)", "os.spawnve(mode, file, env)", "os.spawn(mode, file, env)", "os._spawnvef(mode, file, env)", "os.spawnv(mode, file, env)", "os.angle(mode, file, env)", "os._spawn_nt(mode, file, env)", "os.nanle(mode, file, env)", "os.shape(mode, file, env)", "os.splittype(mode, file, env)"], "os.spawnv(mode, path, args)": ["spawnv", "os.spawnvp(mode, path, args)", "os.spawnve(mode, path, args)", "os.spawn(mode, path, args)", "os._spawnvef(mode, path, args)", "os.spawnvpe(mode, path, args)", "os.spawnl(mode, path, args)", "os.spawnle(mode, path, args)", "os.spawnlp(mode, path, args)", "os._spawn_nt(mode, path, args)", "os.spawnlpe(mode, path, args)", "os.axhspan(mode, path, args)", "os.axvspan(mode, path, args)", "os.pinv(mode, path, args)", "os.spawnv_passfds(mode, path, args)"], "os.spawnve(mode, path, args, env)": ["spawnve", "os._spawnvef(mode, path, args, env)", "os.spawnvpe(mode, path, args, env)", "os.spawnv(mode, path, args, env)", "os.spawnvp(mode, path, args, env)", "os.spawnle(mode, path, args, env)", "os.spawn(mode, path, args, env)", "os.spawnlpe(mode, path, args, env)", "os.spawnl(mode, path, args, env)", "os.save(mode, path, args, env)", "os._save(mode, path, args, env)", "os.spawnlp(mode, path, args, env)", "os._spawn_nt(mode, path, args, env)", "os._savez(mode, path, args, env)", "os.savez(mode, path, args, env)"], "os.startfile(path)": ["startfile"], "os.startfile(path, operation)": ["startfile"], "os.stat(path)": ["stat", "os._stat(path)", "os.lstat(path)", "os.copystat(path)", "os.mksalt(path)", "os.mat(path)", "os.rmdir(path)", "os.what(path)", "os.unlink(path)", "os.distance(path)", "os.wait(path)", "os.asmatrix(path)", "os.remove(path)", "os.getxattr(path)", "os.get_paths(path)"], "os.stat(path, dir_fd=None)": ["stat", "os.stat(path, dir_fd=None)", "os._stat(path, dir_fd=None)", "os.lstat(path, dir_fd=None)", "os.copystat(path, dir_fd=None)", "os.mksalt(path, dir_fd=None)", "os.mat(path, dir_fd=None)", "os.rmdir(path, dir_fd=None)", "os.what(path, dir_fd=None)", "os.unlink(path, dir_fd=None)", "os.distance(path, dir_fd=None)", "os.wait(path, dir_fd=None)", "os.asmatrix(path, dir_fd=None)", "os.remove(path, dir_fd=None)", "os.getxattr(path, dir_fd=None)"], "os.stat(path, follow_symlinks=True)": ["stat", "os.stat(path, follow_symlinks=False)", "os._stat(path, follow_symlinks=True)", "os.lstat(path, follow_symlinks=True)", "os.copystat(path, follow_symlinks=True)", "os.mksalt(path, follow_symlinks=True)", "os.mat(path, follow_symlinks=True)", "os.rmdir(path, follow_symlinks=True)", "os.what(path, follow_symlinks=True)", "os.unlink(path, follow_symlinks=True)", "os.distance(path, follow_symlinks=True)", "os.wait(path, follow_symlinks=True)", "os.asmatrix(path, follow_symlinks=True)", "os.remove(path, follow_symlinks=True)", "os.getxattr(path, follow_symlinks=True)"], "os.stat_result": ["os.stat_result"], "os.statvfs(path)": ["statvfs", "os.fstatvfs(path)", "os._stat(path)", "os.stat(path)", "os.fstat(path)", "os.start(path)", "os.lstat(path)", "os._get_stats(path)", "os.setastest(path)", "os.stairs(path)", "os.startswith(path)", "os.savefig(path)", "os.WEXITSTATUS(path)", "os.RAND_status(path)", "os.save(path)"], "os.strerror(code)": ["strerror", "os._strerror(code)", "os._tkerror(code)", "os._error(code)", "os.error(code)", "os.seterr(code)", "os.showerror(code)", "os.ftperrors(code)", "os._vector_str(code)", "os._tensor_str(code)", "os.construction_error(code)", "os.errorbar(code)", "os.is_tensor(code)", "os.strong(code)", "os.stream(code)"], "os.supports_dir_fd": ["os.supports_dir_fd"], "os.supports_fd": ["os.supports_fd"], "os.supports_follow_symlinks": ["os.supports_follow_symlinks"], "os.symlink(src, dst)": ["symlink", "os.split(src, dst)", "os.matrix_rank(src, dst)", "os._normalize(src, dst)", "os.pinv(src, dst)", "os.nargminmax(src, dst)", "os.mknod(src, dst)", "os.unpack_from(src, dst)", "os.array_split(src, dst)", "os.encodestring(src, dst)", "os.mask_indices(src, dst)", "os._encodestring(src, dst)", "os.select(src, dst)", "os.indices(src, dst)", "os.findall(src, dst)"], "os.symlink(src, dst, dir_fd=None)": ["symlink", "os.symlink(src, dst, dir_fd=None)", "os.split(src, dst, dir_fd=None)", "os.matrix_rank(src, dst, dir_fd=None)", "os._normalize(src, dst, dir_fd=None)", "os.pinv(src, dst, dir_fd=None)", "os.nargminmax(src, dst, dir_fd=None)", "os.mknod(src, dst, dir_fd=None)", "os.unpack_from(src, dst, dir_fd=None)", "os.array_split(src, dst, dir_fd=None)", "os.encodestring(src, dst, dir_fd=None)", "os.mask_indices(src, dst, dir_fd=None)", "os._encodestring(src, dst, dir_fd=None)", "os.select(src, dst, dir_fd=None)", "os.indices(src, dst, dir_fd=None)"], "os.symlink(src, dst, target_is_directory=False)": ["symlink", "os.symlink(src, dst, target_is_directory=True)", "os.split(src, dst, target_is_directory=False)", "os.matrix_rank(src, dst, target_is_directory=False)", "os._normalize(src, dst, target_is_directory=False)", "os.pinv(src, dst, target_is_directory=False)", "os.nargminmax(src, dst, target_is_directory=False)", "os.mknod(src, dst, target_is_directory=False)", "os.unpack_from(src, dst, target_is_directory=False)", "os.array_split(src, dst, target_is_directory=False)", "os.encodestring(src, dst, target_is_directory=False)", "os.mask_indices(src, dst, target_is_directory=False)", "os._encodestring(src, dst, target_is_directory=False)", "os.select(src, dst, target_is_directory=False)", "os.indices(src, dst, target_is_directory=False)"], "os.sync()": ["sync", "os.fsync()", "os.sinc()", "os.rpc_sync()", "os.rpc_async()", "os.fdatasync()", "os._sin()", "os.sci()", "os._sync_flush()", "os.spy()", "os.sca()", "os.isasyncgen()", "os.stn()", "os._sync_close()", "os.symlink()"], "os.sysconf(name)": ["sysconf", "os.countOf(name)", "os.confstr(name)", "os.basicConfig(name)", "os._sys_version(name)", "os.sync(name)", "os.ycor(name)", "os.cond(name)", "os.pathconf(name)", "os.contourf(name)", "os.askyesno(name)", "os.isposinf(name)", "os.showinfo(name)", "os._syscmd_uname(name)", "os.fsync(name)"], "os.system(command)": ["system", "os.stem(command)", "os.stream(command)", "os.system_alias(command)", "os.mkstemp(command)", "os.asbytes(command)", "os.setitem(command)", "os.__setitem__(command)", "os.step(command)", "os.symtable(command)", "os.issctype(command)", "os.asstr(command)", "os.stdev(command)", "os.subst(command)", "os.stamp(command)"], "os.tcgetpgrp(fd)": ["tcgetpgrp", "os.tcsetpgrp(fd)", "os.getpgrp(fd)", "os.setpgrp(fd)", "os.getpager(fd)", "os.get_group(fd)", "os.getgroups(fd)", "os.getp(fd)", "os.getppid(fd)", "os.getpgid(fd)", "os.ttypager(fd)", "os.getgrnam(fd)", "os._java_getprop(fd)", "os.getLogger(fd)", "os.setgroups(fd)"], "os.tcsetpgrp(fd, pg)": ["tcsetpgrp", "os.tcgetpgrp(fd, pg)", "os.setpgrp(fd, pg)", "os.getpgrp(fd, pg)", "os.setgroups(fd, pg)", "os.setpgid(fd, pg)", "os.setp(fd, pg)", "os.getpager(fd, pg)", "os.ttypager(fd, pg)", "os.setup(fd, pg)", "os.strip(fd, pg)", "os._setup(fd, pg)", "os.bootstrap(fd, pg)", "os.sethelper(fd, pg)", "os.get_group(fd, pg)"], "os.terminal_size": ["os.terminal_size"], "os.times()": ["times", "os._time()", "os.utime()", "os.timegm()", "os.timeit()", "os.trimseq()", "os.ontimer()", "os._test()", "os.tile()", "os._trim_zeros()", "os.to_time()", "os.trim_zeros()", "os.test()", "os._strptime()", "os.getatime()"], "os.truncate(path, length)": ["truncate", "os.ftruncate(path, length)", "os.runctx(path, length)", "os._structure(path, length)", "os.translate(path, length)", "os.runcall(path, length)", "os.transjugate(path, length)", "os.truth(path, length)", "os.unescape(path, length)", "os.uname(path, length)", "os.trace(path, length)", "os.CFUNCTYPE(path, length)", "os.deprecate(path, length)", "os._unflatten(path, length)", "os.traceable(path, length)"], "os.umask(mask)": ["umask", "os.putmask(mask)", "os.is_mask(mask)", "os.mark(mask)", "os.mask_or(mask)", "os.getmask(mask)", "os._nan_mask(mask)", "os.get_mask(mask)", "os.dumps(mask)", "os._dumps(mask)", "os.masked_equal(mask)", "os.clump_masked(mask)", "os.count_masked(mask)", "os.is_masked(mask)", "os.make_dual(mask)"], "os.unlink(path, dir_fd=None)": ["unlink", "os.unlink(path, dir_fd=None)", "os.rmdir(path, dir_fd=None)", "os.lstat(path, dir_fd=None)", "os.axline(path, dir_fd=None)", "os.nanmin(path, dir_fd=None)", "os._stat(path, dir_fd=None)", "os.remove(path, dir_fd=None)", "os.Client(path, dir_fd=None)", "os.listen(path, dir_fd=None)", "os.stat(path, dir_fd=None)", "os.translation(path, dir_fd=None)", "os.unpack_dual(path, dir_fd=None)", "os.urlopen(path, dir_fd=None)", "os.runeval(path, dir_fd=None)"], "os.unsetenv(key)": ["unsetenv", "os._unsetenv(key)", "os.getenv(key)", "os.putenv(key)", "os._putenv(key)", "os.getenvb(key)", "os.stdev(key)", "os.runstring(key)", "os._unflatten(key)", "os._setdef(key)", "os.unused(key)", "os.Screen(key)", "os.pstdev(key)", "os.seterr(key)", "os.getpen(key)"], "os.urandom(size)": ["urandom", "os._urandom(size)", "os.rand_(size)", "os.undo(size)", "os._randombytes(size)", "os.rands(size)", "os.randbool(size)", "os.random_state(size)", "os.randbelow(size)", "os.__and__(size)", "os.and_(size)", "os._random_getnode(size)", "os._can_dot(size)", "os.rundocs(size)", "os.uniform(size)"], "os.utime(path)": ["utime", "os.imread(path)", "os._trim_zeros(path)", "os.count_masked(path)", "os.getlines(path)", "os.size(path)", "os.makeUIntIndex(path)", "os._size(path)", "os.clim(path)", "os.getmodule(path)", "os.multi_dot(path)", "os._parse_datetime(path)", "os.strip(path)", "os.getabsfile(path)", "os.stdev(path)"], "os.utime(path, dir_fd=None)": ["utime", "os.utime(path, dir_fd=None)", "os.imread(path, dir_fd=None)", "os._trim_zeros(path, dir_fd=None)", "os.count_masked(path, dir_fd=None)", "os.getlines(path, dir_fd=None)", "os.size(path, dir_fd=None)", "os.makeUIntIndex(path, dir_fd=None)", "os._size(path, dir_fd=None)", "os.clim(path, dir_fd=None)", "os.getmodule(path, dir_fd=None)", "os.multi_dot(path, dir_fd=None)", "os._parse_datetime(path, dir_fd=None)", "os.strip(path, dir_fd=None)", "os.getabsfile(path, dir_fd=None)"], "os.utime(path, ns)": ["utime", "os.imread(path, ns)", "os._trim_zeros(path, ns)", "os.count_masked(path, ns)", "os.getlines(path, ns)", "os.size(path, ns)", "os.makeUIntIndex(path, ns)", "os._size(path, ns)", "os.clim(path, ns)", "os.getmodule(path, ns)", "os.multi_dot(path, ns)", "os._parse_datetime(path, ns)", "os.strip(path, ns)", "os.getabsfile(path, ns)", "os.stdev(path, ns)"], "os.utime(path, ns, dir_fd=None)": ["utime", "os.utime(path, ns, dir_fd=None)", "os.imread(path, ns, dir_fd=None)", "os._trim_zeros(path, ns, dir_fd=None)", "os.count_masked(path, ns, dir_fd=None)", "os.getlines(path, ns, dir_fd=None)", "os.size(path, ns, dir_fd=None)", "os.makeUIntIndex(path, ns, dir_fd=None)", "os._size(path, ns, dir_fd=None)", "os.clim(path, ns, dir_fd=None)", "os.getmodule(path, ns, dir_fd=None)", "os.multi_dot(path, ns, dir_fd=None)", "os._parse_datetime(path, ns, dir_fd=None)", "os.strip(path, ns, dir_fd=None)", "os.getabsfile(path, ns, dir_fd=None)"], "os.utime(path, ns, follow_symlinks=True)": ["utime", "os.utime(path, ns, follow_symlinks=False)", "os.imread(path, ns, follow_symlinks=True)", "os._trim_zeros(path, ns, follow_symlinks=True)", "os.count_masked(path, ns, follow_symlinks=True)", "os.getlines(path, ns, follow_symlinks=True)", "os.size(path, ns, follow_symlinks=True)", "os.makeUIntIndex(path, ns, follow_symlinks=True)", "os._size(path, ns, follow_symlinks=True)", "os.clim(path, ns, follow_symlinks=True)", "os.getmodule(path, ns, follow_symlinks=True)", "os.multi_dot(path, ns, follow_symlinks=True)", "os._parse_datetime(path, ns, follow_symlinks=True)", "os.strip(path, ns, follow_symlinks=True)", "os.getabsfile(path, ns, follow_symlinks=True)"], "os.utime(path, ns, times=None)": ["utime", "os.utime(path, ns, times=None)", "os.imread(path, ns, times=None)", "os._trim_zeros(path, ns, times=None)", "os.count_masked(path, ns, times=None)", "os.getlines(path, ns, times=None)", "os.size(path, ns, times=None)", "os.makeUIntIndex(path, ns, times=None)", "os._size(path, ns, times=None)", "os.clim(path, ns, times=None)", "os.getmodule(path, ns, times=None)", "os.multi_dot(path, ns, times=None)", "os._parse_datetime(path, ns, times=None)", "os.strip(path, ns, times=None)", "os.getabsfile(path, ns, times=None)"], "os.utime(path, ns, times=None, dir_fd=None)": ["utime", "os.utime(path, ns, times=None, dir_fd=None)", "os.imread(path, ns, times=None, dir_fd=None)", "os._trim_zeros(path, ns, times=None, dir_fd=None)", "os.count_masked(path, ns, times=None, dir_fd=None)", "os.getlines(path, ns, times=None, dir_fd=None)", "os.size(path, ns, times=None, dir_fd=None)", "os.makeUIntIndex(path, ns, times=None, dir_fd=None)", "os._size(path, ns, times=None, dir_fd=None)", "os.clim(path, ns, times=None, dir_fd=None)", "os.getmodule(path, ns, times=None, dir_fd=None)", "os.multi_dot(path, ns, times=None, dir_fd=None)", "os._parse_datetime(path, ns, times=None, dir_fd=None)", "os.strip(path, ns, times=None, dir_fd=None)", "os.getabsfile(path, ns, times=None, dir_fd=None)"], "os.utime(path, times=None)": ["utime", "os.utime(path, times=None)", "os.imread(path, times=None)", "os._trim_zeros(path, times=None)", "os.count_masked(path, times=None)", "os.getlines(path, times=None)", "os.size(path, times=None)", "os.makeUIntIndex(path, times=None)", "os._size(path, times=None)", "os.clim(path, times=None)", "os.getmodule(path, times=None)", "os.multi_dot(path, times=None)", "os._parse_datetime(path, times=None)", "os.strip(path, times=None)", "os.getabsfile(path, times=None)"], "os.utime(path, times=None, dir_fd=None)": ["utime", "os.utime(path, times=None, dir_fd=None)", "os.imread(path, times=None, dir_fd=None)", "os._trim_zeros(path, times=None, dir_fd=None)", "os.count_masked(path, times=None, dir_fd=None)", "os.getlines(path, times=None, dir_fd=None)", "os.size(path, times=None, dir_fd=None)", "os.makeUIntIndex(path, times=None, dir_fd=None)", "os._size(path, times=None, dir_fd=None)", "os.clim(path, times=None, dir_fd=None)", "os.getmodule(path, times=None, dir_fd=None)", "os.multi_dot(path, times=None, dir_fd=None)", "os._parse_datetime(path, times=None, dir_fd=None)", "os.strip(path, times=None, dir_fd=None)", "os.getabsfile(path, times=None, dir_fd=None)"], "os.utime(path, times=None, follow_symlinks=True)": ["utime", "os.utime(path, times=None, follow_symlinks=False)", "os.imread(path, times=None, follow_symlinks=True)", "os._trim_zeros(path, times=None, follow_symlinks=True)", "os.count_masked(path, times=None, follow_symlinks=True)", "os.getlines(path, times=None, follow_symlinks=True)", "os.size(path, times=None, follow_symlinks=True)", "os.makeUIntIndex(path, times=None, follow_symlinks=True)", "os._size(path, times=None, follow_symlinks=True)", "os.clim(path, times=None, follow_symlinks=True)", "os.getmodule(path, times=None, follow_symlinks=True)", "os.multi_dot(path, times=None, follow_symlinks=True)", "os._parse_datetime(path, times=None, follow_symlinks=True)", "os.strip(path, times=None, follow_symlinks=True)", "os.getabsfile(path, times=None, follow_symlinks=True)"], "os.wait()": ["wait", "os._wait()", "os.wait4()", "os.wait3()", "os._wrapit()", "os.waitid()", "os.what()", "os.sigwait()", "os.waitpid()", "os.write()", "os.width()", "os.at()", "os.wait_for()", "os._wait_all()", "os.pwrite()"], "os.wait3(options)": ["wait3", "os.wait(options)", "os._wait(options)", "os.wait4(options)", "os._wrapit(options)", "os.waitid(options)", "os.what(options)", "os.sigwait(options)", "os.waitpid(options)", "os.wait_for(options)", "os.write32u(options)", "os._wait_all(options)", "os.write(options)", "os.width(options)", "os.at(options)"], "os.wait4(pid, options)": ["wait4", "os.wait(pid, options)", "os._wait(pid, options)", "os.wait3(pid, options)", "os._wrapit(pid, options)", "os.waitid(pid, options)", "os.what(pid, options)", "os.sigwait(pid, options)", "os.waitpid(pid, options)", "os.wait_for(pid, options)", "os._wait_all(pid, options)", "os.write(pid, options)", "os.width(pid, options)", "os.at(pid, options)", "os.pwrite(pid, options)"], "os.waitid(idtype, id, options)": ["waitid", "os.waitpid(idtype, id, options)", "os.wait(idtype, id, options)", "os._wait(idtype, id, options)", "os.wait4(idtype, id, options)", "os.wait3(idtype, id, options)", "os._wrapit(idtype, id, options)", "os.sigwait(idtype, id, options)", "os.whathdr(idtype, id, options)", "os.what(idtype, id, options)", "os.atoi(idtype, id, options)", "os.sigwaitinfo(idtype, id, options)", "os._sanitize(idtype, id, options)", "os.wait_for(idtype, id, options)", "os._wait_all(idtype, id, options)"], "os.waitpid(pid, options)": ["waitpid", "os.waitid(pid, options)", "os.wait(pid, options)", "os._wait(pid, options)", "os.wait4(pid, options)", "os.wait3(pid, options)", "os._wrapit(pid, options)", "os.getpid(pid, options)", "os.writePlist(pid, options)", "os.WIFSTOPPED(pid, options)", "os.setpgid(pid, options)", "os.sigwait(pid, options)", "os.stripid(pid, options)", "os.getppid(pid, options)", "os.getpgid(pid, options)"], "os.walk(top)": ["walk", "os._fwalk(top)", "os.fwalk(top)", "os.walk_tb(top)", "os._walk_dir(top)", "os.walktree(top)", "os.walk_stack(top)", "os._all(top)", "os.all(top)", "os.back(top)", "os.Lock(top)", "os.eval(top)", "os.what(top)", "os.take(top)", "os.alen(top)"], "os.walk(top, followlinks=False)": ["walk", "os.walk(top, followlinks=True)", "os._fwalk(top, followlinks=False)", "os.fwalk(top, followlinks=False)", "os.walk_tb(top, followlinks=False)", "os._walk_dir(top, followlinks=False)", "os.walktree(top, followlinks=False)", "os.walk_stack(top, followlinks=False)", "os._all(top, followlinks=False)", "os.all(top, followlinks=False)", "os.back(top, followlinks=False)", "os.Lock(top, followlinks=False)", "os.eval(top, followlinks=False)", "os.what(top, followlinks=False)", "os.take(top, followlinks=False)"], "os.walk(top, onerror=None)": ["walk", "os.walk(top, onerror=None)", "os._fwalk(top, onerror=None)", "os.fwalk(top, onerror=None)", "os.walk_tb(top, onerror=None)", "os._walk_dir(top, onerror=None)", "os.walktree(top, onerror=None)", "os.walk_stack(top, onerror=None)", "os._all(top, onerror=None)", "os.all(top, onerror=None)", "os.back(top, onerror=None)", "os.Lock(top, onerror=None)", "os.eval(top, onerror=None)", "os.what(top, onerror=None)", "os.take(top, onerror=None)"], "os.walk(top, onerror=None, followlinks=False)": ["walk", "os.walk(top, onerror=None, followlinks=True)", "os._fwalk(top, onerror=None, followlinks=False)", "os.fwalk(top, onerror=None, followlinks=False)", "os.walk_tb(top, onerror=None, followlinks=False)", "os._walk_dir(top, onerror=None, followlinks=False)", "os.walktree(top, onerror=None, followlinks=False)", "os.walk_stack(top, onerror=None, followlinks=False)", "os._all(top, onerror=None, followlinks=False)", "os.all(top, onerror=None, followlinks=False)", "os.back(top, onerror=None, followlinks=False)", "os.Lock(top, onerror=None, followlinks=False)", "os.eval(top, onerror=None, followlinks=False)", "os.what(top, onerror=None, followlinks=False)", "os.take(top, onerror=None, followlinks=False)"], "os.walk(top, topdown=True)": ["walk", "os.walk(top, topdown=False)", "os._fwalk(top, topdown=True)", "os.fwalk(top, topdown=True)", "os.walk_tb(top, topdown=True)", "os._walk_dir(top, topdown=True)", "os.walktree(top, topdown=True)", "os.walk_stack(top, topdown=True)", "os._all(top, topdown=True)", "os.all(top, topdown=True)", "os.back(top, topdown=True)", "os.Lock(top, topdown=True)", "os.eval(top, topdown=True)", "os.what(top, topdown=True)", "os.take(top, topdown=True)"], "os.walk(top, topdown=True, followlinks=False)": ["walk", "os.walk(top, topdown=False, followlinks=True)", "os._fwalk(top, topdown=True, followlinks=False)", "os.fwalk(top, topdown=True, followlinks=False)", "os.walk_tb(top, topdown=True, followlinks=False)", "os._walk_dir(top, topdown=True, followlinks=False)", "os.walktree(top, topdown=True, followlinks=False)", "os.walk_stack(top, topdown=True, followlinks=False)", "os._all(top, topdown=True, followlinks=False)", "os.all(top, topdown=True, followlinks=False)", "os.back(top, topdown=True, followlinks=False)", "os.Lock(top, topdown=True, followlinks=False)", "os.eval(top, topdown=True, followlinks=False)", "os.what(top, topdown=True, followlinks=False)", "os.take(top, topdown=True, followlinks=False)"], "os.write(fd, str)": ["write", "os.pwrite(fd, str)", "os.writev(fd, str)", "os._writen(fd, str)", "os.pwritev(fd, str)", "os.write32u(fd, str)", "os.writedoc(fd, str)", "os._wrapit(fd, str)", "os.winter(fd, str)", "os._write_u32(fd, str)", "os.writedocs(fd, str)", "os.readwrite(fd, str)", "os.getwriter(fd, str)", "os.get_writer(fd, str)", "os._write_long(fd, str)"], "os.writev(fd, buffers)": ["writev", "os.pwritev(fd, buffers)", "os.write(fd, buffers)", "os.pwrite(fd, buffers)", "os._writen(fd, buffers)", "os.write32u(fd, buffers)", "os.writedoc(fd, buffers)", "os._write_u32(fd, buffers)", "os.writedocs(fd, buffers)", "os.readwrite(fd, buffers)", "os._wrapit(fd, buffers)", "os.getwriter(fd, buffers)", "os.winter(fd, buffers)", "os.get_writer(fd, buffers)", "os._write_long(fd, buffers)"], "oss_audio_device.channels(nchannels)": ["channels"], "oss_audio_device.close()": ["close"], "oss_audio_device.mode": ["oss_audio_device.mode"], "oss_audio_device.name": ["oss_audio_device.name"], "oss_audio_device.nonblock()": ["nonblock"], "oss_audio_device.obuffree()": ["obuffree"], "oss_audio_device.post()": ["post"], "oss_audio_device.read(size)": ["read"], "oss_audio_device.reset()": ["reset"], "oss_audio_device.setfmt(format)": ["setfmt"], "oss_audio_device.setparameters(format, nchannels)": ["setparameters"], "oss_audio_device.setparameters(format, nchannels, samplerate)": ["setparameters"], "oss_audio_device.setparameters(format, nchannels, samplerate, strict=False)": ["setparameters", "oss_audio_device.setparameters(format, nchannels, samplerate, strict=True)"], "oss_audio_device.setparameters(format, nchannels, strict=False)": ["setparameters", "oss_audio_device.setparameters(format, nchannels, strict=True)"], "oss_audio_device.speed(samplerate)": ["speed"], "oss_audio_device.writeall(data)": ["writeall"], "oss_mixer_device.close()": ["close"], "oss_mixer_device.get(control)": ["get"], "oss_mixer_device.set(control, (left, right))": ["set"], "oss_mixer_device.set_recsrc(bitmask)": ["set_recsrc"], "oss_mixer_device.stereocontrols()": ["stereocontrols"], "ossaudiodev.OSSAudioError": ["ossaudiodev.OSSAudioError"], "ossaudiodev.open(device, mode)": ["open"], "ossaudiodev.open(mode)": ["open"], "ossaudiodev.openmixer(device)": ["openmixer"], "output_checker.check_output(want, got, optionflags)": ["check_output"], "output_checker.output_difference(example, got, optionflags)": ["output_difference"], "parameter.annotation": ["parameter.annotation"], "parameter.empty": ["parameter.empty"], "parameter.kind": ["parameter.kind"], "parameter.name": ["parameter.name"], "parameterized_mime_header.params": ["parameterized_mime_header.params"], "parse_error.code": ["parse_error.code"], "parse_error.position": ["parse_error.position"], "parser.compilest(st)": ["compilest"], "parser.compilest(st, filename='<syntax-tree>')": ["compilest", "parser.compilest(st, filename=13)"], "parser.expr(source)": ["expr"], "parser.isexpr(st)": ["isexpr"], "parser.issuite(st)": ["issuite"], "parser.parse(fp)": ["parse"], "parser.parse(fp, headersonly=False)": ["parse", "parser.parse(fp, headersonly=True)"], "parser.parsestr(text)": ["parsestr"], "parser.parsestr(text, headersonly=False)": ["parsestr", "parser.parsestr(text, headersonly=True)"], "parser.sequence2st(sequence)": ["sequence2st"], "parser.st2list(st)": ["st2list"], "parser.st2list(st, col_info=False)": ["st2list", "parser.st2list(st, col_info=True)"], "parser.st2list(st, line_info=False)": ["st2list", "parser.st2list(st, line_info=True)"], "parser.st2list(st, line_info=False, col_info=False)": ["st2list", "parser.st2list(st, line_info=True, col_info=True)"], "parser.st2tuple(st)": ["st2tuple"], "parser.st2tuple(st, col_info=False)": ["st2tuple", "parser.st2tuple(st, col_info=True)"], "parser.st2tuple(st, line_info=False)": ["st2tuple", "parser.st2tuple(st, line_info=True)"], "parser.tuple2st(sequence)": ["tuple2st"], "partial.args": ["partial.args"], "partial.keywords": ["partial.keywords"], "patch.dict(in_dict, **kwargs)": ["dict"], "patch.dict(in_dict, **kwargs, clear=False)": ["dict", "patch.dict(in_dict, **kwargs, clear=True)"], "patch.dict(in_dict, **kwargs, values=())": ["dict"], "patch.dict(in_dict, **kwargs, values=(), clear=False)": ["dict", "patch.dict(in_dict, **kwargs, values=(), clear=True)"], "patch.multiple(target, **kwargs)": ["multiple"], "patch.multiple(target, **kwargs, autospec=None)": ["multiple", "patch.multiple(target, **kwargs, autospec=None)"], "patch.multiple(target, **kwargs, create=False)": ["multiple", "patch.multiple(target, **kwargs, create=True)"], "patch.multiple(target, **kwargs, new_callable=None)": ["multiple", "patch.multiple(target, **kwargs, new_callable=None)"], "patch.multiple(target, **kwargs, spec=None)": ["multiple", "patch.multiple(target, **kwargs, spec=None)"], "patch.multiple(target, **kwargs, spec=None, create=False)": ["multiple", "patch.multiple(target, **kwargs, spec=None, create=True)"], "patch.multiple(target, **kwargs, spec_set=None)": ["multiple", "patch.multiple(target, **kwargs, spec_set=None)"], "patch.object(target, attribute, **kwargs)": ["object"], "patch.object(target, attribute, **kwargs, create=False)": ["object", "patch.object(target, attribute, **kwargs, create=True)"], "patch.object(target, attribute, **kwargs, new=DEFAULT)": ["object"], "patch.object(target, attribute, **kwargs, new=DEFAULT, create=False)": ["object", "patch.object(target, attribute, **kwargs, new=DEFAULT, create=True)"], "patch.object(target, attribute, **kwargs, spec=None)": ["object", "patch.object(target, attribute, **kwargs, spec=None)"], "patch.object(target, attribute, **kwargs, spec_set=None)": ["object", "patch.object(target, attribute, **kwargs, spec_set=None)"], "patch.stopall()": ["stopall"], "path_entry_finder.find_loader(fullname)": ["find_loader"], "path_entry_finder.find_module(fullname)": ["find_module"], "path_entry_finder.find_spec(fullname)": ["find_spec"], "path_entry_finder.find_spec(fullname, target=None)": ["find_spec", "path_entry_finder.find_spec(fullname, target=None)"], "path_entry_finder.invalidate_caches()": ["invalidate_caches"], "path_finder.find_module(fullname)": ["find_module"], "path_finder.find_module(fullname, path=None)": ["find_module", "path_finder.find_module(fullname, path=None)"], "path_finder.find_spec(fullname)": ["find_spec"], "path_finder.find_spec(fullname, path=None, target=None)": ["find_spec", "path_finder.find_spec(fullname, path=None, target=None)"], "path_finder.find_spec(fullname, target=None)": ["find_spec", "path_finder.find_spec(fullname, target=None)"], "pathlib.PosixPath(*pathsegments)": ["PosixPath"], "pathlib.PurePosixPath(*pathsegments)": ["PurePosixPath"], "pathlib.PureWindowsPath(*pathsegments)": ["PureWindowsPath"], "pathlib.WindowsPath(*pathsegments)": ["WindowsPath"], "pdb.Pdb()": ["Pdb"], "pdb.Pdb(completekey='tab')": ["Pdb", "pdb.Pdb(completekey=3)"], "pdb.Pdb(completekey='tab', skip=None)": ["Pdb", "pdb.Pdb(completekey='tab', skip=None)", "pdb.Pdb(completekey=3, skip=None)"], "pdb.Pdb(completekey='tab', stdin=None)": ["Pdb", "pdb.Pdb(completekey='tab', stdin=None)", "pdb.Pdb(completekey=3.0, stdin=None)"], "pdb.Pdb(nosigint=False)": ["Pdb", "pdb.Pdb(nosigint=True)"], "pdb.Pdb(readrc=True)": ["Pdb", "pdb.Pdb(readrc=False)"], "pdb.Pdb(skip=None)": ["Pdb", "pdb.Pdb(skip=None)"], "pdb.Pdb(stdin=None)": ["Pdb", "pdb.Pdb(stdin=None)"], "pdb.Pdb(stdout=None)": ["Pdb", "pdb.Pdb(stdout=None)"], "pdb.pm()": ["pm", "pdb.prism()", "pdb.plasma()", "pdb.PI()", "pdb.up()", "pdb.pd()", "pdb.pu()", "pdb.polymul()", "pdb.putmask()", "pdb.pformat()", "pdb._ptp()", "pdb.platform()", "pdb.polytrim()", "pdb.hvp()", "pdb.__pos__()"], "pdb.post_mortem()": ["post_mortem", "pdb.mkdtemp()", "pdb.mkstemp()", "pdb.test()", "pdb.format_stack()", "pdb.format_time()", "pdb.clearstamps()", "pdb.print_stack()", "pdb.set_printoptions()", "pdb.testmod()", "pdb.run_module_suite()", "pdb.DocTestSuite()", "pdb._make_options_dict()", "pdb.random_state()", "pdb.iter_modules()"], "pdb.post_mortem(traceback=None)": ["post_mortem", "pdb.post_mortem(traceback=None)", "pdb.mkdtemp(traceback=None)", "pdb.mkstemp(traceback=None)", "pdb.test(traceback=None)", "pdb.format_stack(traceback=None)", "pdb.format_time(traceback=None)", "pdb.clearstamps(traceback=None)", "pdb.print_stack(traceback=None)", "pdb.set_printoptions(traceback=None)", "pdb.testmod(traceback=None)", "pdb.run_module_suite(traceback=None)", "pdb.DocTestSuite(traceback=None)", "pdb._make_options_dict(traceback=None)", "pdb.random_state(traceback=None)"], "pdb.run(statement)": ["run", "pdb.round(statement)", "pdb.round_(statement)", "pdb.around(statement)", "pdb.triu(statement)", "pdb._group(statement)", "pdb.unique(statement)", "pdb._unique1d(statement)", "pdb.urlencode(statement)", "pdb.lru_cache(statement)", "pdb._sum_(statement)", "pdb._sum(statement)", "pdb._isna_array(statement)", "pdb._construction_repr(statement)", "pdb.open(statement)"], "pdb.run(statement, globals=None)": ["run", "pdb.run(statement, globals=None)", "pdb.round(statement, globals=None)", "pdb.round_(statement, globals=None)", "pdb.around(statement, globals=None)", "pdb.triu(statement, globals=None)", "pdb._group(statement, globals=None)", "pdb.unique(statement, globals=None)", "pdb._unique1d(statement, globals=None)", "pdb.urlencode(statement, globals=None)", "pdb.lru_cache(statement, globals=None)", "pdb._sum_(statement, globals=None)", "pdb._sum(statement, globals=None)", "pdb._isna_array(statement, globals=None)", "pdb._construction_repr(statement, globals=None)"], "pdb.runcall(function, *args, **kwds)": ["runcall", "pdb.call(function, *args, **kwds)", "pdb.runeval(function, *args, **kwds)", "pdb.truncate(function, *args, **kwds)", "pdb.ftruncate(function, *args, **kwds)", "pdb.runctx(function, *args, **kwds)", "pdb.run(function, *args, **kwds)", "pdb._all(function, *args, **kwds)", "pdb.all(function, *args, **kwds)", "pdb.geterrcall(function, *args, **kwds)", "pdb.seterrcall(function, *args, **kwds)", "pdb.findall(function, *args, **kwds)", "pdb.install(function, *args, **kwds)", "pdb.rundocs(function, *args, **kwds)", "pdb._install(function, *args, **kwds)"], "pdb.runeval(expression)": ["runeval", "pdb.run(expression)", "pdb.recv(expression)", "pdb.irecv(expression)", "pdb.readmodule(expression)", "pdb.unlink(expression)", "pdb.imread(expression)", "pdb.unwrap(expression)", "pdb.remove(expression)", "pdb.nanvar(expression)", "pdb._run_pip(expression)", "pdb.install(expression)", "pdb.require(expression)", "pdb.relpath(expression)", "pdb.nanmean(expression)"], "pdb.runeval(expression, globals=None)": ["runeval", "pdb.runeval(expression, globals=None)", "pdb.run(expression, globals=None)", "pdb.recv(expression, globals=None)", "pdb.irecv(expression, globals=None)", "pdb.readmodule(expression, globals=None)", "pdb.unlink(expression, globals=None)", "pdb.imread(expression, globals=None)", "pdb.unwrap(expression, globals=None)", "pdb.remove(expression, globals=None)", "pdb.nanvar(expression, globals=None)", "pdb._run_pip(expression, globals=None)", "pdb.install(expression, globals=None)", "pdb.require(expression, globals=None)", "pdb.relpath(expression, globals=None)"], "pdb.runeval(expression, globals=None, locals=None)": ["runeval", "pdb.runeval(expression, globals=None, locals=None)", "pdb.run(expression, globals=None, locals=None)", "pdb.recv(expression, globals=None, locals=None)", "pdb.irecv(expression, globals=None, locals=None)", "pdb.readmodule(expression, globals=None, locals=None)", "pdb.unlink(expression, globals=None, locals=None)", "pdb.imread(expression, globals=None, locals=None)", "pdb.unwrap(expression, globals=None, locals=None)", "pdb.remove(expression, globals=None, locals=None)", "pdb.nanvar(expression, globals=None, locals=None)", "pdb._run_pip(expression, globals=None, locals=None)", "pdb.install(expression, globals=None, locals=None)", "pdb.require(expression, globals=None, locals=None)", "pdb.relpath(expression, globals=None, locals=None)"], "pdb.runeval(expression, locals=None)": ["runeval", "pdb.runeval(expression, locals=None)", "pdb.run(expression, locals=None)", "pdb.recv(expression, locals=None)", "pdb.irecv(expression, locals=None)", "pdb.readmodule(expression, locals=None)", "pdb.unlink(expression, locals=None)", "pdb.imread(expression, locals=None)", "pdb.unwrap(expression, locals=None)", "pdb.remove(expression, locals=None)", "pdb.nanvar(expression, locals=None)", "pdb._run_pip(expression, locals=None)", "pdb.install(expression, locals=None)", "pdb.require(expression, locals=None)", "pdb.relpath(expression, locals=None)"], "pdb.set_trace()": ["set_trace", "pdb.settrace()", "pdb._get_traces()", "pdb.trace()", "pdb._check_trace()", "pdb.clear_traces()", "pdb.trace_module()", "pdb.setraw()", "pdb._get_trace_graph()", "pdb.tracer()", "pdb.set_threshold()", "pdb._trace_dispatcher()", "pdb.assert_raises()", "pdb._get_stream()", "pdb.is_tracing()"], "pdb.set_trace(header=None)": ["set_trace", "pdb.set_trace(header=None)", "pdb.settrace(header=None)", "pdb._get_traces(header=None)", "pdb.trace(header=None)", "pdb._check_trace(header=None)", "pdb.clear_traces(header=None)", "pdb.trace_module(header=None)", "pdb.setraw(header=None)", "pdb._get_trace_graph(header=None)", "pdb.tracer(header=None)", "pdb.set_threshold(header=None)", "pdb._trace_dispatcher(header=None)", "pdb.assert_raises(header=None)", "pdb._get_stream(header=None)"], "pickle.DEFAULT_PROTOCOL": ["pickle.DEFAULT_PROTOCOL"], "pickle.HIGHEST_PROTOCOL": ["pickle.HIGHEST_PROTOCOL"], "pickle.PickleError": ["pickle.PickleError"], "pickle.Pickler(file)": ["Pickler"], "pickle.Pickler(file, fix_imports=True)": ["Pickler", "pickle.Pickler(file, fix_imports=False)"], "pickle.Pickler(file, protocol=None)": ["Pickler", "pickle.Pickler(file, protocol=None)"], "pickle.Pickler(file, protocol=None, fix_imports=True)": ["Pickler", "pickle.Pickler(file, protocol=None, fix_imports=False)"], "pickle.PicklingError": ["pickle.PicklingError"], "pickle.Unpickler(file)": ["Unpickler"], "pickle.Unpickler(file, encoding=\"ASCII\")": ["Unpickler", "pickle.Unpickler(file, encoding=5)"], "pickle.Unpickler(file, errors=\"strict\")": ["Unpickler", "pickle.Unpickler(file, errors=6.0)"], "pickle.Unpickler(file, fix_imports=True)": ["Unpickler", "pickle.Unpickler(file, fix_imports=False)"], "pickle.Unpickler(file, fix_imports=True, encoding=\"ASCII\")": ["Unpickler", "pickle.Unpickler(file, fix_imports=False, encoding='ASCII')", "pickle.Unpickler(file, fix_imports=True, encoding=5)"], "pickle.Unpickler(file, fix_imports=True, errors=\"strict\")": ["Unpickler", "pickle.Unpickler(file, fix_imports=False, errors='strict')", "pickle.Unpickler(file, fix_imports=True, errors=6)"], "pickle.UnpicklingError": ["pickle.UnpicklingError"], "pickle.dump(obj, file)": ["dump", "pickle._dump(obj, file)", "pickle.dumps(obj, file)", "pickle._dumps(obj, file)", "pickle.dup(obj, file)", "pickle.dup2(obj, file)", "pickle._get_dump(obj, file)", "pickle.up(obj, file)", "pickle.DupFd(obj, file)", "pickle._xml_dumps(obj, file)", "pickle.WCOREDUMP(obj, file)", "pickle._sum_(obj, file)", "pickle._sum(obj, file)", "pickle.sum(obj, file)", "pickle.cmp(obj, file)"], "pickle.dump(obj, file, fix_imports=True)": ["dump", "pickle.dump(obj, file, fix_imports=False)", "pickle._dump(obj, file, fix_imports=True)", "pickle.dumps(obj, file, fix_imports=True)", "pickle._dumps(obj, file, fix_imports=True)", "pickle.dup(obj, file, fix_imports=True)", "pickle.dup2(obj, file, fix_imports=True)", "pickle._get_dump(obj, file, fix_imports=True)", "pickle.up(obj, file, fix_imports=True)", "pickle.DupFd(obj, file, fix_imports=True)", "pickle._xml_dumps(obj, file, fix_imports=True)", "pickle.WCOREDUMP(obj, file, fix_imports=True)", "pickle._sum_(obj, file, fix_imports=True)", "pickle._sum(obj, file, fix_imports=True)", "pickle.sum(obj, file, fix_imports=True)"], "pickle.dump(obj, file, protocol=None)": ["dump", "pickle.dump(obj, file, protocol=None)", "pickle._dump(obj, file, protocol=None)", "pickle.dumps(obj, file, protocol=None)", "pickle._dumps(obj, file, protocol=None)", "pickle.dup(obj, file, protocol=None)", "pickle.dup2(obj, file, protocol=None)", "pickle._get_dump(obj, file, protocol=None)", "pickle.up(obj, file, protocol=None)", "pickle.DupFd(obj, file, protocol=None)", "pickle._xml_dumps(obj, file, protocol=None)", "pickle.WCOREDUMP(obj, file, protocol=None)", "pickle._sum_(obj, file, protocol=None)", "pickle._sum(obj, file, protocol=None)", "pickle.sum(obj, file, protocol=None)"], "pickle.dump(obj, file, protocol=None, fix_imports=True)": ["dump", "pickle.dump(obj, file, protocol=None, fix_imports=False)", "pickle._dump(obj, file, protocol=None, fix_imports=True)", "pickle.dumps(obj, file, protocol=None, fix_imports=True)", "pickle._dumps(obj, file, protocol=None, fix_imports=True)", "pickle.dup(obj, file, protocol=None, fix_imports=True)", "pickle.dup2(obj, file, protocol=None, fix_imports=True)", "pickle._get_dump(obj, file, protocol=None, fix_imports=True)", "pickle.up(obj, file, protocol=None, fix_imports=True)", "pickle.DupFd(obj, file, protocol=None, fix_imports=True)", "pickle._xml_dumps(obj, file, protocol=None, fix_imports=True)", "pickle.WCOREDUMP(obj, file, protocol=None, fix_imports=True)", "pickle._sum_(obj, file, protocol=None, fix_imports=True)", "pickle._sum(obj, file, protocol=None, fix_imports=True)", "pickle.sum(obj, file, protocol=None, fix_imports=True)"], "pickle.dumps(obj)": ["dumps", "pickle._dumps(obj)", "pickle.dump(obj)", "pickle._dump(obj)", "pickle._sum_(obj)", "pickle._sum(obj)", "pickle.dup2(obj)", "pickle._group(obj)", "pickle._unparse_datetime(obj)", "pickle._genops(obj)", "pickle.compile(obj)", "pickle.template(obj)", "pickle.safe_repr(obj)", "pickle.re_compile(obj)", "pickle.run(obj)"], "pickle.dumps(obj, fix_imports=True)": ["dumps", "pickle.dumps(obj, fix_imports=False)", "pickle._dumps(obj, fix_imports=True)", "pickle.dump(obj, fix_imports=True)", "pickle._dump(obj, fix_imports=True)", "pickle._sum_(obj, fix_imports=True)", "pickle._sum(obj, fix_imports=True)", "pickle.dup2(obj, fix_imports=True)", "pickle._group(obj, fix_imports=True)", "pickle._unparse_datetime(obj, fix_imports=True)", "pickle._genops(obj, fix_imports=True)", "pickle.compile(obj, fix_imports=True)", "pickle.template(obj, fix_imports=True)", "pickle.safe_repr(obj, fix_imports=True)", "pickle.re_compile(obj, fix_imports=True)"], "pickle.dumps(obj, protocol=None)": ["dumps", "pickle.dumps(obj, protocol=None)", "pickle._dumps(obj, protocol=None)", "pickle.dump(obj, protocol=None)", "pickle._dump(obj, protocol=None)", "pickle._sum_(obj, protocol=None)", "pickle._sum(obj, protocol=None)", "pickle.dup2(obj, protocol=None)", "pickle._group(obj, protocol=None)", "pickle._unparse_datetime(obj, protocol=None)", "pickle._genops(obj, protocol=None)", "pickle.compile(obj, protocol=None)", "pickle.template(obj, protocol=None)", "pickle.safe_repr(obj, protocol=None)", "pickle.re_compile(obj, protocol=None)"], "pickle.load(file)": ["load", "pickle._load(file)", "pickle.loads(file)", "pickle._loads(file)", "pickle.reload(file)", "pickle.loadtxt(file)", "pickle.overload(file)", "pickle._overload(file)", "pickle._read_long(file)", "pickle._xml_loads(file)", "pickle.lagdiv(file)", "pickle.legadd(file)", "pickle.locate(file)", "pickle.lagadd(file)", "pickle.lagder(file)"], "pickle.load(file, encoding=\"ASCII\")": ["load", "pickle.load(file, encoding=5)", "pickle._load(file, encoding='ASCII')", "pickle.loads(file, encoding='ASCII')", "pickle._loads(file, encoding='ASCII')", "pickle.reload(file, encoding='ASCII')", "pickle.loadtxt(file, encoding='ASCII')", "pickle.overload(file, encoding='ASCII')", "pickle._overload(file, encoding='ASCII')", "pickle._read_long(file, encoding='ASCII')", "pickle._xml_loads(file, encoding='ASCII')", "pickle.lagdiv(file, encoding='ASCII')", "pickle.legadd(file, encoding='ASCII')", "pickle.locate(file, encoding='ASCII')", "pickle.lagadd(file, encoding='ASCII')"], "pickle.load(file, encoding=\"ASCII\", errors=\"strict\")": ["load", "pickle.load(file, encoding=5.0, errors=6.0)", "pickle._load(file, encoding='ASCII', errors='strict')", "pickle.loads(file, encoding='ASCII', errors='strict')", "pickle._loads(file, encoding='ASCII', errors='strict')", "pickle.reload(file, encoding='ASCII', errors='strict')", "pickle.loadtxt(file, encoding='ASCII', errors='strict')", "pickle.overload(file, encoding='ASCII', errors='strict')", "pickle._overload(file, encoding='ASCII', errors='strict')", "pickle._read_long(file, encoding='ASCII', errors='strict')", "pickle._xml_loads(file, encoding='ASCII', errors='strict')", "pickle.lagdiv(file, encoding='ASCII', errors='strict')", "pickle.legadd(file, encoding='ASCII', errors='strict')", "pickle.locate(file, encoding='ASCII', errors='strict')", "pickle.lagadd(file, encoding='ASCII', errors='strict')"], "pickle.load(file, fix_imports=True)": ["load", "pickle.load(file, fix_imports=False)", "pickle._load(file, fix_imports=True)", "pickle.loads(file, fix_imports=True)", "pickle._loads(file, fix_imports=True)", "pickle.reload(file, fix_imports=True)", "pickle.loadtxt(file, fix_imports=True)", "pickle.overload(file, fix_imports=True)", "pickle._overload(file, fix_imports=True)", "pickle._read_long(file, fix_imports=True)", "pickle._xml_loads(file, fix_imports=True)", "pickle.lagdiv(file, fix_imports=True)", "pickle.legadd(file, fix_imports=True)", "pickle.locate(file, fix_imports=True)", "pickle.lagadd(file, fix_imports=True)"], "pickle.load(file, fix_imports=True, encoding=\"ASCII\")": ["load", "pickle.load(file, fix_imports=False, encoding='ASCII')", "pickle.load(file, fix_imports=True, encoding=5.0)", "pickle._load(file, fix_imports=True, encoding='ASCII')", "pickle.loads(file, fix_imports=True, encoding='ASCII')", "pickle._loads(file, fix_imports=True, encoding='ASCII')", "pickle.reload(file, fix_imports=True, encoding='ASCII')", "pickle.loadtxt(file, fix_imports=True, encoding='ASCII')", "pickle.overload(file, fix_imports=True, encoding='ASCII')", "pickle._overload(file, fix_imports=True, encoding='ASCII')", "pickle._read_long(file, fix_imports=True, encoding='ASCII')", "pickle._xml_loads(file, fix_imports=True, encoding='ASCII')", "pickle.lagdiv(file, fix_imports=True, encoding='ASCII')", "pickle.legadd(file, fix_imports=True, encoding='ASCII')", "pickle.locate(file, fix_imports=True, encoding='ASCII')"], "pickle.load(file, fix_imports=True, errors=\"strict\")": ["load", "pickle.load(file, fix_imports=False, errors='strict')", "pickle.load(file, fix_imports=True, errors=6)", "pickle._load(file, fix_imports=True, errors='strict')", "pickle.loads(file, fix_imports=True, errors='strict')", "pickle._loads(file, fix_imports=True, errors='strict')", "pickle.reload(file, fix_imports=True, errors='strict')", "pickle.loadtxt(file, fix_imports=True, errors='strict')", "pickle.overload(file, fix_imports=True, errors='strict')", "pickle._overload(file, fix_imports=True, errors='strict')", "pickle._read_long(file, fix_imports=True, errors='strict')", "pickle._xml_loads(file, fix_imports=True, errors='strict')", "pickle.lagdiv(file, fix_imports=True, errors='strict')", "pickle.legadd(file, fix_imports=True, errors='strict')", "pickle.locate(file, fix_imports=True, errors='strict')"], "pickle.loads(bytes_object)": ["loads", "pickle._loads(bytes_object)", "pickle._load(bytes_object)", "pickle.load(bytes_object)", "pickle.reload(bytes_object)", "pickle._xml_loads(bytes_object)", "pickle.loadtxt(bytes_object)", "pickle.set_loader(bytes_object)", "pickle._globals(bytes_object)", "pickle.load_tests(bytes_object)", "pickle.towards(bytes_object)", "pickle.overload(bytes_object)", "pickle.leapdays(bytes_object)", "pickle._overload(bytes_object)", "pickle.load_source(bytes_object)"], "pickle.loads(bytes_object, encoding=\"ASCII\")": ["loads", "pickle.loads(bytes_object, encoding=5.0)", "pickle._loads(bytes_object, encoding='ASCII')", "pickle._load(bytes_object, encoding='ASCII')", "pickle.load(bytes_object, encoding='ASCII')", "pickle.reload(bytes_object, encoding='ASCII')", "pickle._xml_loads(bytes_object, encoding='ASCII')", "pickle.loadtxt(bytes_object, encoding='ASCII')", "pickle.set_loader(bytes_object, encoding='ASCII')", "pickle._globals(bytes_object, encoding='ASCII')", "pickle.load_tests(bytes_object, encoding='ASCII')", "pickle.towards(bytes_object, encoding='ASCII')", "pickle.overload(bytes_object, encoding='ASCII')", "pickle.leapdays(bytes_object, encoding='ASCII')", "pickle._overload(bytes_object, encoding='ASCII')"], "pickle.loads(bytes_object, fix_imports=True, encoding=\"ASCII\")": ["loads", "pickle.loads(bytes_object, fix_imports=False, encoding='ASCII')", "pickle.loads(bytes_object, fix_imports=True, encoding=5)", "pickle._loads(bytes_object, fix_imports=True, encoding='ASCII')", "pickle._load(bytes_object, fix_imports=True, encoding='ASCII')", "pickle.load(bytes_object, fix_imports=True, encoding='ASCII')", "pickle.reload(bytes_object, fix_imports=True, encoding='ASCII')", "pickle._xml_loads(bytes_object, fix_imports=True, encoding='ASCII')", "pickle.loadtxt(bytes_object, fix_imports=True, encoding='ASCII')", "pickle.set_loader(bytes_object, fix_imports=True, encoding='ASCII')", "pickle._globals(bytes_object, fix_imports=True, encoding='ASCII')", "pickle.load_tests(bytes_object, fix_imports=True, encoding='ASCII')", "pickle.towards(bytes_object, fix_imports=True, encoding='ASCII')", "pickle.overload(bytes_object, fix_imports=True, encoding='ASCII')", "pickle.leapdays(bytes_object, fix_imports=True, encoding='ASCII')"], "pickle.loads(bytes_object, fix_imports=True, errors=\"strict\")": ["loads", "pickle.loads(bytes_object, fix_imports=False, errors='strict')", "pickle.loads(bytes_object, fix_imports=True, errors=6)", "pickle._loads(bytes_object, fix_imports=True, errors='strict')", "pickle._load(bytes_object, fix_imports=True, errors='strict')", "pickle.load(bytes_object, fix_imports=True, errors='strict')", "pickle.reload(bytes_object, fix_imports=True, errors='strict')", "pickle._xml_loads(bytes_object, fix_imports=True, errors='strict')", "pickle.loadtxt(bytes_object, fix_imports=True, errors='strict')", "pickle.set_loader(bytes_object, fix_imports=True, errors='strict')", "pickle._globals(bytes_object, fix_imports=True, errors='strict')", "pickle.load_tests(bytes_object, fix_imports=True, errors='strict')", "pickle.towards(bytes_object, fix_imports=True, errors='strict')", "pickle.overload(bytes_object, fix_imports=True, errors='strict')", "pickle.leapdays(bytes_object, fix_imports=True, errors='strict')"], "pickler.dispatch_table": ["pickler.dispatch_table"], "pickler.dump(obj)": ["dump"], "pickler.persistent_id(obj)": ["persistent_id"], "pickletools.dis(pickle)": ["dis", "pickletools.distb(pickle)", "pickletools.delaxes(pickle)", "pickletools.scandir(pickle)", "pickletools.listdir(pickle)", "pickletools.textdomain(pickle)", "pickletools.stack_size(pickle)", "pickletools.init(pickle)", "pickletools.main(pickle)", "pickletools._main(pickle)", "pickletools.mode(pickle)", "pickletools.show(pickle)", "pickletools.test(pickle)", "pickletools.random_state(pickle)", "pickletools.bgpic(pickle)"], "pickletools.dis(pickle, annotate=0)": ["dis", "pickletools.dis(pickle, annotate='0')", "pickletools.distb(pickle, annotate=0)", "pickletools.delaxes(pickle, annotate=0)", "pickletools.scandir(pickle, annotate=0)", "pickletools.listdir(pickle, annotate=0)", "pickletools.textdomain(pickle, annotate=0)", "pickletools.stack_size(pickle, annotate=0)", "pickletools.init(pickle, annotate=0)", "pickletools.main(pickle, annotate=0)", "pickletools._main(pickle, annotate=0)", "pickletools.mode(pickle, annotate=0)", "pickletools.show(pickle, annotate=0)", "pickletools.test(pickle, annotate=0)", "pickletools.random_state(pickle, annotate=0)"], "pickletools.dis(pickle, indentlevel=4)": ["dis", "pickletools.dis(pickle, indentlevel='4')", "pickletools.distb(pickle, indentlevel=4)", "pickletools.delaxes(pickle, indentlevel=4)", "pickletools.scandir(pickle, indentlevel=4)", "pickletools.listdir(pickle, indentlevel=4)", "pickletools.textdomain(pickle, indentlevel=4)", "pickletools.stack_size(pickle, indentlevel=4)", "pickletools.init(pickle, indentlevel=4)", "pickletools.main(pickle, indentlevel=4)", "pickletools._main(pickle, indentlevel=4)", "pickletools.mode(pickle, indentlevel=4)", "pickletools.show(pickle, indentlevel=4)", "pickletools.test(pickle, indentlevel=4)", "pickletools.random_state(pickle, indentlevel=4)"], "pickletools.dis(pickle, memo=None)": ["dis", "pickletools.dis(pickle, memo=None)", "pickletools.distb(pickle, memo=None)", "pickletools.delaxes(pickle, memo=None)", "pickletools.scandir(pickle, memo=None)", "pickletools.listdir(pickle, memo=None)", "pickletools.textdomain(pickle, memo=None)", "pickletools.stack_size(pickle, memo=None)", "pickletools.init(pickle, memo=None)", "pickletools.main(pickle, memo=None)", "pickletools._main(pickle, memo=None)", "pickletools.mode(pickle, memo=None)", "pickletools.show(pickle, memo=None)", "pickletools.test(pickle, memo=None)", "pickletools.random_state(pickle, memo=None)"], "pickletools.dis(pickle, memo=None, annotate=0)": ["dis", "pickletools.dis(pickle, memo=None, annotate=0)", "pickletools.dis(pickle, memo=None, annotate='0')", "pickletools.distb(pickle, memo=None, annotate=0)", "pickletools.delaxes(pickle, memo=None, annotate=0)", "pickletools.scandir(pickle, memo=None, annotate=0)", "pickletools.listdir(pickle, memo=None, annotate=0)", "pickletools.textdomain(pickle, memo=None, annotate=0)", "pickletools.stack_size(pickle, memo=None, annotate=0)", "pickletools.init(pickle, memo=None, annotate=0)", "pickletools.main(pickle, memo=None, annotate=0)", "pickletools._main(pickle, memo=None, annotate=0)", "pickletools.mode(pickle, memo=None, annotate=0)", "pickletools.show(pickle, memo=None, annotate=0)", "pickletools.test(pickle, memo=None, annotate=0)"], "pickletools.dis(pickle, memo=None, indentlevel=4)": ["dis", "pickletools.dis(pickle, memo=None, indentlevel=4)", "pickletools.dis(pickle, memo=None, indentlevel='4')", "pickletools.distb(pickle, memo=None, indentlevel=4)", "pickletools.delaxes(pickle, memo=None, indentlevel=4)", "pickletools.scandir(pickle, memo=None, indentlevel=4)", "pickletools.listdir(pickle, memo=None, indentlevel=4)", "pickletools.textdomain(pickle, memo=None, indentlevel=4)", "pickletools.stack_size(pickle, memo=None, indentlevel=4)", "pickletools.init(pickle, memo=None, indentlevel=4)", "pickletools.main(pickle, memo=None, indentlevel=4)", "pickletools._main(pickle, memo=None, indentlevel=4)", "pickletools.mode(pickle, memo=None, indentlevel=4)", "pickletools.show(pickle, memo=None, indentlevel=4)", "pickletools.test(pickle, memo=None, indentlevel=4)"], "pickletools.dis(pickle, out=None)": ["dis", "pickletools.dis(pickle, out=None)", "pickletools.distb(pickle, out=None)", "pickletools.delaxes(pickle, out=None)", "pickletools.scandir(pickle, out=None)", "pickletools.listdir(pickle, out=None)", "pickletools.textdomain(pickle, out=None)", "pickletools.stack_size(pickle, out=None)", "pickletools.init(pickle, out=None)", "pickletools.main(pickle, out=None)", "pickletools._main(pickle, out=None)", "pickletools.mode(pickle, out=None)", "pickletools.show(pickle, out=None)", "pickletools.test(pickle, out=None)", "pickletools.random_state(pickle, out=None)"], "pickletools.dis(pickle, out=None, annotate=0)": ["dis", "pickletools.dis(pickle, out=None, annotate=0)", "pickletools.dis(pickle, out=None, annotate='0')", "pickletools.distb(pickle, out=None, annotate=0)", "pickletools.delaxes(pickle, out=None, annotate=0)", "pickletools.scandir(pickle, out=None, annotate=0)", "pickletools.listdir(pickle, out=None, annotate=0)", "pickletools.textdomain(pickle, out=None, annotate=0)", "pickletools.stack_size(pickle, out=None, annotate=0)", "pickletools.init(pickle, out=None, annotate=0)", "pickletools.main(pickle, out=None, annotate=0)", "pickletools._main(pickle, out=None, annotate=0)", "pickletools.mode(pickle, out=None, annotate=0)", "pickletools.show(pickle, out=None, annotate=0)", "pickletools.test(pickle, out=None, annotate=0)"], "pickletools.dis(pickle, out=None, indentlevel=4)": ["dis", "pickletools.dis(pickle, out=None, indentlevel=4)", "pickletools.dis(pickle, out=None, indentlevel='4')", "pickletools.distb(pickle, out=None, indentlevel=4)", "pickletools.delaxes(pickle, out=None, indentlevel=4)", "pickletools.scandir(pickle, out=None, indentlevel=4)", "pickletools.listdir(pickle, out=None, indentlevel=4)", "pickletools.textdomain(pickle, out=None, indentlevel=4)", "pickletools.stack_size(pickle, out=None, indentlevel=4)", "pickletools.init(pickle, out=None, indentlevel=4)", "pickletools.main(pickle, out=None, indentlevel=4)", "pickletools._main(pickle, out=None, indentlevel=4)", "pickletools.mode(pickle, out=None, indentlevel=4)", "pickletools.show(pickle, out=None, indentlevel=4)", "pickletools.test(pickle, out=None, indentlevel=4)"], "pickletools.dis(pickle, out=None, memo=None)": ["dis", "pickletools.dis(pickle, out=None, memo=None)", "pickletools.distb(pickle, out=None, memo=None)", "pickletools.delaxes(pickle, out=None, memo=None)", "pickletools.scandir(pickle, out=None, memo=None)", "pickletools.listdir(pickle, out=None, memo=None)", "pickletools.textdomain(pickle, out=None, memo=None)", "pickletools.stack_size(pickle, out=None, memo=None)", "pickletools.init(pickle, out=None, memo=None)", "pickletools.main(pickle, out=None, memo=None)", "pickletools._main(pickle, out=None, memo=None)", "pickletools.mode(pickle, out=None, memo=None)", "pickletools.show(pickle, out=None, memo=None)", "pickletools.test(pickle, out=None, memo=None)", "pickletools.random_state(pickle, out=None, memo=None)"], "pickletools.genops(pickle)": ["genops", "pickletools._genops(pickle)", "pickletools.getopt(pickle)", "pickletools.getgroups(pickle)", "pickletools.geohash(pickle)", "pickletools.getnode(pickle)", "pickletools.getCols(pickle)", "pickletools._ip_getnode(pickle)", "pickletools.getcaps(pickle)", "pickletools.getpass(pickle)", "pickletools._noop(pickle)", "pickletools.getp(pickle)", "pickletools.get_info(pickle)", "pickletools.synopsis(pickle)", "pickletools._get_loop(pickle)"], "pipes.Template": ["pipes.Template"], "pkgutil.ImpImporter()": ["ImpImporter"], "pkgutil.ImpImporter(dirname=None)": ["ImpImporter", "pkgutil.ImpImporter(dirname=None)"], "pkgutil.ImpLoader(fullname, file, filename, etc)": ["ImpLoader"], "pkgutil.ModuleInfo(module_finder, name, ispkg)": ["ModuleInfo"], "pkgutil.extend_path(path, name)": ["extend_path", "pkgutil.get_path(path, name)", "pkgutil._get_path(path, name)", "pkgutil._greedy_path(path, name)", "pkgutil.get_paths(path, name)", "pkgutil.get_exec_path(path, name)", "pkgutil.einsum_path(path, name)", "pkgutil.get_path_names(path, name)", "pkgutil._extendLine_pretty(path, name)", "pkgutil.temppath(path, name)", "pkgutil.xpath_tokenizer(path, name)", "pkgutil.expand_template(path, name)", "pkgutil.convert_path(path, name)", "pkgutil.nextmonth(path, name)", "pkgutil.textinput(path, name)"], "pkgutil.find_loader(fullname)": ["find_loader", "pkgutil.find_module(fullname)", "pkgutil.find_spec(fullname)", "pkgutil.findobj(fullname)", "pkgutil.find(fullname)", "pkgutil.load(fullname)", "pkgutil._find_spec_from_path(fullname)", "pkgutil._find_strings(fullname)", "pkgutil.loads(fullname)", "pkgutil.ndpointer(fullname)", "pkgutil.readbuffer_encode(fullname)", "pkgutil._raw_fftnd(fullname)", "pkgutil.makeFloatIndex(fullname)", "pkgutil.filled(fullname)", "pkgutil.vander(fullname)"], "pkgutil.get_data(package, resource)": ["get_data", "pkgutil.get_docstring(package, resource)", "pkgutil.getdata(package, resource)", "pkgutil.dataclass(package, resource)", "pkgutil.ondrag(package, resource)", "pkgutil.lagint(package, resource)", "pkgutil.lagder(package, resource)", "pkgutil.DocFileTest(package, resource)", "pkgutil._arraymethod(package, resource)", "pkgutil._return_output(package, resource)", "pkgutil.get_fill_func(package, resource)", "pkgutil.testfile(package, resource)", "pkgutil.na_value_for_dtype(package, resource)", "pkgutil.lag_plot(package, resource)", "pkgutil._return_counts(package, resource)"], "pkgutil.get_importer(path_item)": ["get_importer", "pkgutil._importers(path_item)", "pkgutil.get_interpreter(path_item)", "pkgutil.get_writer(path_item)", "pkgutil._get_writer(path_item)", "pkgutil._gcd_import(path_item)", "pkgutil.get_parameter(path_item)", "pkgutil.get_worker_info(path_item)", "pkgutil.getwriter(path_item)", "pkgutil.getitimer(path_item)", "pkgutil.__import__(path_item)", "pkgutil.get_logger(path_item)", "pkgutil._try_import(path_item)", "pkgutil.safeimport(path_item)", "pkgutil.importfile(path_item)"], "pkgutil.get_loader(module_or_name)": ["get_loader", "pkgutil.get_logger(module_or_name)", "pkgutil.get_locales(module_or_name)", "pkgutil.getLogger(module_or_name)", "pkgutil.getlocale(module_or_name)", "pkgutil.getreader(module_or_name)", "pkgutil.getnode(module_or_name)", "pkgutil.getdecoder(module_or_name)", "pkgutil._makeLoader(module_or_name)", "pkgutil.getloadavg(module_or_name)", "pkgutil.getencoder(module_or_name)", "pkgutil._get_overloads(module_or_name)", "pkgutil.find_loader(module_or_name)", "pkgutil.get_local_part(module_or_name)", "pkgutil.getpager(module_or_name)"], "pkgutil.iter_importers()": ["iter_importers", "pkgutil._raw_input()", "pkgutil.mac_ver()", "pkgutil.win32_ver()", "pkgutil._syscmd_ver()", "pkgutil.dist()", "pkgutil.linux_distribution()", "pkgutil.mktemp()", "pkgutil._describe_option()", "pkgutil.java_ver()", "pkgutil._node()", "pkgutil.getfqdn()", "pkgutil._importers()", "pkgutil._try_import()", "pkgutil.iter_importer_modules()"], "pkgutil.iter_modules()": ["iter_modules", "pkgutil.resizemode()", "pkgutil.mode()", "pkgutil.token_urlsafe()", "pkgutil.colormode()", "pkgutil.removeHandler()", "pkgutil.token_bytes()", "pkgutil.post_mortem()", "pkgutil.delaxes()", "pkgutil.destroy_process_group()", "pkgutil.getnode()", "pkgutil.getPeriodData()", "pkgutil.log_to_stderr()", "pkgutil.token_hex()", "pkgutil.test()"], "pkgutil.iter_modules(path=None, prefix='')": ["iter_modules", "pkgutil.iter_modules(path=None, prefix='')", "pkgutil.iter_modules(path=None, prefix=0.0)", "pkgutil.resizemode(path=None, prefix='')", "pkgutil.mode(path=None, prefix='')", "pkgutil.token_urlsafe(path=None, prefix='')", "pkgutil.colormode(path=None, prefix='')", "pkgutil.removeHandler(path=None, prefix='')", "pkgutil.token_bytes(path=None, prefix='')", "pkgutil.post_mortem(path=None, prefix='')", "pkgutil.delaxes(path=None, prefix='')", "pkgutil.destroy_process_group(path=None, prefix='')", "pkgutil.getnode(path=None, prefix='')", "pkgutil.getPeriodData(path=None, prefix='')", "pkgutil.log_to_stderr(path=None, prefix='')"], "pkgutil.iter_modules(prefix='')": ["iter_modules", "pkgutil.iter_modules(prefix=0.0)", "pkgutil.resizemode(prefix='')", "pkgutil.mode(prefix='')", "pkgutil.token_urlsafe(prefix='')", "pkgutil.colormode(prefix='')", "pkgutil.removeHandler(prefix='')", "pkgutil.token_bytes(prefix='')", "pkgutil.post_mortem(prefix='')", "pkgutil.delaxes(prefix='')", "pkgutil.destroy_process_group(prefix='')", "pkgutil.getnode(prefix='')", "pkgutil.getPeriodData(prefix='')", "pkgutil.log_to_stderr(prefix='')", "pkgutil.token_hex(prefix='')"], "pkgutil.walk_packages()": ["walk_packages", "pkgutil.getsitepackages()", "pkgutil.get_rank()", "pkgutil._get_plot_backend()", "pkgutil.get_world_size()", "pkgutil.get_backend()", "pkgutil._all_tasks_compat()", "pkgutil.current_task()", "pkgutil.get_exec_path()", "pkgutil.get_worker_info()", "pkgutil._perfcheck()", "pkgutil.all_tasks()", "pkgutil.makeFloatSeries()", "pkgutil.checkcache()", "pkgutil.stack_size()"], "pkgutil.walk_packages(onerror=None)": ["walk_packages", "pkgutil.walk_packages(onerror=None)", "pkgutil.getsitepackages(onerror=None)", "pkgutil.get_rank(onerror=None)", "pkgutil._get_plot_backend(onerror=None)", "pkgutil.get_world_size(onerror=None)", "pkgutil.get_backend(onerror=None)", "pkgutil._all_tasks_compat(onerror=None)", "pkgutil.current_task(onerror=None)", "pkgutil.get_exec_path(onerror=None)", "pkgutil.get_worker_info(onerror=None)", "pkgutil._perfcheck(onerror=None)", "pkgutil.all_tasks(onerror=None)", "pkgutil.makeFloatSeries(onerror=None)", "pkgutil.checkcache(onerror=None)"], "pkgutil.walk_packages(path=None)": ["walk_packages", "pkgutil.walk_packages(path=None)", "pkgutil.getsitepackages(path=None)", "pkgutil.get_rank(path=None)", "pkgutil._get_plot_backend(path=None)", "pkgutil.get_world_size(path=None)", "pkgutil.get_backend(path=None)", "pkgutil._all_tasks_compat(path=None)", "pkgutil.current_task(path=None)", "pkgutil.get_exec_path(path=None)", "pkgutil.get_worker_info(path=None)", "pkgutil._perfcheck(path=None)", "pkgutil.all_tasks(path=None)", "pkgutil.makeFloatSeries(path=None)", "pkgutil.checkcache(path=None)"], "pkgutil.walk_packages(path=None, onerror=None)": ["walk_packages", "pkgutil.walk_packages(path=None, onerror=None)", "pkgutil.getsitepackages(path=None, onerror=None)", "pkgutil.get_rank(path=None, onerror=None)", "pkgutil._get_plot_backend(path=None, onerror=None)", "pkgutil.get_world_size(path=None, onerror=None)", "pkgutil.get_backend(path=None, onerror=None)", "pkgutil._all_tasks_compat(path=None, onerror=None)", "pkgutil.current_task(path=None, onerror=None)", "pkgutil.get_exec_path(path=None, onerror=None)", "pkgutil.get_worker_info(path=None, onerror=None)", "pkgutil._perfcheck(path=None, onerror=None)", "pkgutil.all_tasks(path=None, onerror=None)", "pkgutil.makeFloatSeries(path=None, onerror=None)", "pkgutil.checkcache(path=None, onerror=None)"], "pkgutil.walk_packages(path=None, prefix='')": ["walk_packages", "pkgutil.walk_packages(path=None, prefix='')", "pkgutil.walk_packages(path=None, prefix=0)", "pkgutil.getsitepackages(path=None, prefix='')", "pkgutil.get_rank(path=None, prefix='')", "pkgutil._get_plot_backend(path=None, prefix='')", "pkgutil.get_world_size(path=None, prefix='')", "pkgutil.get_backend(path=None, prefix='')", "pkgutil._all_tasks_compat(path=None, prefix='')", "pkgutil.current_task(path=None, prefix='')", "pkgutil.get_exec_path(path=None, prefix='')", "pkgutil.get_worker_info(path=None, prefix='')", "pkgutil._perfcheck(path=None, prefix='')", "pkgutil.all_tasks(path=None, prefix='')", "pkgutil.makeFloatSeries(path=None, prefix='')"], "pkgutil.walk_packages(path=None, prefix='', onerror=None)": ["walk_packages", "pkgutil.walk_packages(path=None, prefix='', onerror=None)", "pkgutil.walk_packages(path=None, prefix=0, onerror=None)", "pkgutil.getsitepackages(path=None, prefix='', onerror=None)", "pkgutil.get_rank(path=None, prefix='', onerror=None)", "pkgutil._get_plot_backend(path=None, prefix='', onerror=None)", "pkgutil.get_world_size(path=None, prefix='', onerror=None)", "pkgutil.get_backend(path=None, prefix='', onerror=None)", "pkgutil._all_tasks_compat(path=None, prefix='', onerror=None)", "pkgutil.current_task(path=None, prefix='', onerror=None)", "pkgutil.get_exec_path(path=None, prefix='', onerror=None)", "pkgutil.get_worker_info(path=None, prefix='', onerror=None)", "pkgutil._perfcheck(path=None, prefix='', onerror=None)", "pkgutil.all_tasks(path=None, prefix='', onerror=None)", "pkgutil.makeFloatSeries(path=None, prefix='', onerror=None)"], "pkgutil.walk_packages(prefix='')": ["walk_packages", "pkgutil.walk_packages(prefix=0.0)", "pkgutil.getsitepackages(prefix='')", "pkgutil.get_rank(prefix='')", "pkgutil._get_plot_backend(prefix='')", "pkgutil.get_world_size(prefix='')", "pkgutil.get_backend(prefix='')", "pkgutil._all_tasks_compat(prefix='')", "pkgutil.current_task(prefix='')", "pkgutil.get_exec_path(prefix='')", "pkgutil.get_worker_info(prefix='')", "pkgutil._perfcheck(prefix='')", "pkgutil.all_tasks(prefix='')", "pkgutil.makeFloatSeries(prefix='')", "pkgutil.checkcache(prefix='')"], "pkgutil.walk_packages(prefix='', onerror=None)": ["walk_packages", "pkgutil.walk_packages(prefix='', onerror=None)", "pkgutil.walk_packages(prefix=0.0, onerror=None)", "pkgutil.getsitepackages(prefix='', onerror=None)", "pkgutil.get_rank(prefix='', onerror=None)", "pkgutil._get_plot_backend(prefix='', onerror=None)", "pkgutil.get_world_size(prefix='', onerror=None)", "pkgutil.get_backend(prefix='', onerror=None)", "pkgutil._all_tasks_compat(prefix='', onerror=None)", "pkgutil.current_task(prefix='', onerror=None)", "pkgutil.get_exec_path(prefix='', onerror=None)", "pkgutil.get_worker_info(prefix='', onerror=None)", "pkgutil._perfcheck(prefix='', onerror=None)", "pkgutil.all_tasks(prefix='', onerror=None)", "pkgutil.makeFloatSeries(prefix='', onerror=None)"], "platform.architecture()": ["architecture", "platform.libc_ver()", "platform._syscmd_ver()", "platform.linux_distribution()", "platform.iter_modules()", "platform.dist()", "platform.iter_importer_modules()", "platform.win32_ver()", "platform._iter_file_finder_modules()", "platform.assert_()", "platform.parse_url()", "platform.writedocs()", "platform.iter_zipimport_modules()", "platform._syscmd_file()", "platform.assert_equal()"], "platform.architecture(bits='')": ["architecture", "platform.architecture(bits=0)", "platform.libc_ver(bits='')", "platform._syscmd_ver(bits='')", "platform.linux_distribution(bits='')", "platform.iter_modules(bits='')", "platform.dist(bits='')", "platform.iter_importer_modules(bits='')", "platform.win32_ver(bits='')", "platform._iter_file_finder_modules(bits='')", "platform.assert_(bits='')", "platform.parse_url(bits='')", "platform.writedocs(bits='')", "platform.iter_zipimport_modules(bits='')", "platform._syscmd_file(bits='')"], "platform.architecture(bits='', linkage='')": ["architecture", "platform.architecture(bits=0.0, linkage=0.0)", "platform.libc_ver(bits='', linkage='')", "platform._syscmd_ver(bits='', linkage='')", "platform.linux_distribution(bits='', linkage='')", "platform.iter_modules(bits='', linkage='')", "platform.dist(bits='', linkage='')", "platform.iter_importer_modules(bits='', linkage='')", "platform.win32_ver(bits='', linkage='')", "platform._iter_file_finder_modules(bits='', linkage='')", "platform.assert_(bits='', linkage='')", "platform.parse_url(bits='', linkage='')", "platform.writedocs(bits='', linkage='')", "platform.iter_zipimport_modules(bits='', linkage='')", "platform._syscmd_file(bits='', linkage='')"], "platform.architecture(executable=sys.executable)": ["architecture", "platform.libc_ver(executable=sys.executable)", "platform._syscmd_ver(executable=sys.executable)", "platform.linux_distribution(executable=sys.executable)", "platform.iter_modules(executable=sys.executable)", "platform.dist(executable=sys.executable)", "platform.iter_importer_modules(executable=sys.executable)", "platform.win32_ver(executable=sys.executable)", "platform._iter_file_finder_modules(executable=sys.executable)", "platform.assert_(executable=sys.executable)", "platform.parse_url(executable=sys.executable)", "platform.writedocs(executable=sys.executable)", "platform.iter_zipimport_modules(executable=sys.executable)", "platform._syscmd_file(executable=sys.executable)", "platform.assert_equal(executable=sys.executable)"], "platform.architecture(executable=sys.executable, bits='')": ["architecture", "platform.architecture(executable=sys.executable, bits=0)", "platform.libc_ver(executable=sys.executable, bits='')", "platform._syscmd_ver(executable=sys.executable, bits='')", "platform.linux_distribution(executable=sys.executable, bits='')", "platform.iter_modules(executable=sys.executable, bits='')", "platform.dist(executable=sys.executable, bits='')", "platform.iter_importer_modules(executable=sys.executable, bits='')", "platform.win32_ver(executable=sys.executable, bits='')", "platform._iter_file_finder_modules(executable=sys.executable, bits='')", "platform.assert_(executable=sys.executable, bits='')", "platform.parse_url(executable=sys.executable, bits='')", "platform.writedocs(executable=sys.executable, bits='')", "platform.iter_zipimport_modules(executable=sys.executable, bits='')", "platform._syscmd_file(executable=sys.executable, bits='')"], "platform.architecture(executable=sys.executable, linkage='')": ["architecture", "platform.architecture(executable=sys.executable, linkage=0)", "platform.libc_ver(executable=sys.executable, linkage='')", "platform._syscmd_ver(executable=sys.executable, linkage='')", "platform.linux_distribution(executable=sys.executable, linkage='')", "platform.iter_modules(executable=sys.executable, linkage='')", "platform.dist(executable=sys.executable, linkage='')", "platform.iter_importer_modules(executable=sys.executable, linkage='')", "platform.win32_ver(executable=sys.executable, linkage='')", "platform._iter_file_finder_modules(executable=sys.executable, linkage='')", "platform.assert_(executable=sys.executable, linkage='')", "platform.parse_url(executable=sys.executable, linkage='')", "platform.writedocs(executable=sys.executable, linkage='')", "platform.iter_zipimport_modules(executable=sys.executable, linkage='')", "platform._syscmd_file(executable=sys.executable, linkage='')"], "platform.architecture(linkage='')": ["architecture", "platform.architecture(linkage=0.0)", "platform.libc_ver(linkage='')", "platform._syscmd_ver(linkage='')", "platform.linux_distribution(linkage='')", "platform.iter_modules(linkage='')", "platform.dist(linkage='')", "platform.iter_importer_modules(linkage='')", "platform.win32_ver(linkage='')", "platform._iter_file_finder_modules(linkage='')", "platform.assert_(linkage='')", "platform.parse_url(linkage='')", "platform.writedocs(linkage='')", "platform.iter_zipimport_modules(linkage='')", "platform._syscmd_file(linkage='')"], "platform.dist('debian', 'redhat', 'mandrake', ...))": [], "platform.dist('debian', 'redhat', 'mandrake', ...), version='', id='')": [], "platform.java_ver('', ''), '', ''))": [], "platform.java_ver('', ''), '', ''), osinfo=('')": [], "platform.java_ver('', ''), '', ''), release='')": [], "platform.java_ver('', ''), '', ''), release='', vminfo=('')": [], "platform.java_ver('', ''), '', ''), vendor='')": [], "platform.java_ver('', ''), '', ''), vendor='', osinfo=('')": [], "platform.java_ver('', ''), '', ''), vendor='', vminfo=('')": [], "platform.libc_ver()": ["libc_ver", "platform.architecture()", "platform._syscmd_ver()", "platform.mac_ver()", "platform._norm_version()", "platform.win32_ver()", "platform.get_observer_dict()", "platform._iter_file_finder_modules()", "platform._syscmd_uname()", "platform.iter_modules()", "platform.assert_()", "platform.iter_importer_modules()", "platform.iter_zipimport_modules()", "platform.java_ver()", "platform.linux_distribution()"], "platform.libc_ver(chunksize=16384)": ["libc_ver", "platform.libc_ver(chunksize='16384')", "platform.architecture(chunksize=16384)", "platform._syscmd_ver(chunksize=16384)", "platform.mac_ver(chunksize=16384)", "platform._norm_version(chunksize=16384)", "platform.win32_ver(chunksize=16384)", "platform.get_observer_dict(chunksize=16384)", "platform._iter_file_finder_modules(chunksize=16384)", "platform._syscmd_uname(chunksize=16384)", "platform.iter_modules(chunksize=16384)", "platform.assert_(chunksize=16384)", "platform.iter_importer_modules(chunksize=16384)", "platform.iter_zipimport_modules(chunksize=16384)", "platform.java_ver(chunksize=16384)"], "platform.libc_ver(executable=sys.executable)": ["libc_ver", "platform.architecture(executable=sys.executable)", "platform._syscmd_ver(executable=sys.executable)", "platform.mac_ver(executable=sys.executable)", "platform._norm_version(executable=sys.executable)", "platform.win32_ver(executable=sys.executable)", "platform.get_observer_dict(executable=sys.executable)", "platform._iter_file_finder_modules(executable=sys.executable)", "platform._syscmd_uname(executable=sys.executable)", "platform.iter_modules(executable=sys.executable)", "platform.assert_(executable=sys.executable)", "platform.iter_importer_modules(executable=sys.executable)", "platform.iter_zipimport_modules(executable=sys.executable)", "platform.java_ver(executable=sys.executable)", "platform.linux_distribution(executable=sys.executable)"], "platform.libc_ver(executable=sys.executable, lib='')": ["libc_ver", "platform.libc_ver(executable=sys.executable, lib=0)", "platform.architecture(executable=sys.executable, lib='')", "platform._syscmd_ver(executable=sys.executable, lib='')", "platform.mac_ver(executable=sys.executable, lib='')", "platform._norm_version(executable=sys.executable, lib='')", "platform.win32_ver(executable=sys.executable, lib='')", "platform.get_observer_dict(executable=sys.executable, lib='')", "platform._iter_file_finder_modules(executable=sys.executable, lib='')", "platform._syscmd_uname(executable=sys.executable, lib='')", "platform.iter_modules(executable=sys.executable, lib='')", "platform.assert_(executable=sys.executable, lib='')", "platform.iter_importer_modules(executable=sys.executable, lib='')", "platform.iter_zipimport_modules(executable=sys.executable, lib='')", "platform.java_ver(executable=sys.executable, lib='')"], "platform.libc_ver(lib='')": ["libc_ver", "platform.libc_ver(lib=0)", "platform.architecture(lib='')", "platform._syscmd_ver(lib='')", "platform.mac_ver(lib='')", "platform._norm_version(lib='')", "platform.win32_ver(lib='')", "platform.get_observer_dict(lib='')", "platform._iter_file_finder_modules(lib='')", "platform._syscmd_uname(lib='')", "platform.iter_modules(lib='')", "platform.assert_(lib='')", "platform.iter_importer_modules(lib='')", "platform.iter_zipimport_modules(lib='')", "platform.java_ver(lib='')"], "platform.libc_ver(lib='', chunksize=16384)": ["libc_ver", "platform.libc_ver(lib=0, chunksize='16384')", "platform.architecture(lib='', chunksize=16384)", "platform._syscmd_ver(lib='', chunksize=16384)", "platform.mac_ver(lib='', chunksize=16384)", "platform._norm_version(lib='', chunksize=16384)", "platform.win32_ver(lib='', chunksize=16384)", "platform.get_observer_dict(lib='', chunksize=16384)", "platform._iter_file_finder_modules(lib='', chunksize=16384)", "platform._syscmd_uname(lib='', chunksize=16384)", "platform.iter_modules(lib='', chunksize=16384)", "platform.assert_(lib='', chunksize=16384)", "platform.iter_importer_modules(lib='', chunksize=16384)", "platform.iter_zipimport_modules(lib='', chunksize=16384)", "platform.java_ver(lib='', chunksize=16384)"], "platform.libc_ver(lib='', version='')": ["libc_ver", "platform.libc_ver(lib=0, version=0)", "platform.architecture(lib='', version='')", "platform._syscmd_ver(lib='', version='')", "platform.mac_ver(lib='', version='')", "platform._norm_version(lib='', version='')", "platform.win32_ver(lib='', version='')", "platform.get_observer_dict(lib='', version='')", "platform._iter_file_finder_modules(lib='', version='')", "platform._syscmd_uname(lib='', version='')", "platform.iter_modules(lib='', version='')", "platform.assert_(lib='', version='')", "platform.iter_importer_modules(lib='', version='')", "platform.iter_zipimport_modules(lib='', version='')", "platform.java_ver(lib='', version='')"], "platform.libc_ver(version='')": ["libc_ver", "platform.libc_ver(version=0)", "platform.architecture(version='')", "platform._syscmd_ver(version='')", "platform.mac_ver(version='')", "platform._norm_version(version='')", "platform.win32_ver(version='')", "platform.get_observer_dict(version='')", "platform._iter_file_finder_modules(version='')", "platform._syscmd_uname(version='')", "platform.iter_modules(version='')", "platform.assert_(version='')", "platform.iter_importer_modules(version='')", "platform.iter_zipimport_modules(version='')", "platform.java_ver(version='')"], "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), distname='', full_distribution_name=1)": [], "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), full_distribution_name=1)": [], "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), supported_dists=('SuSE')": [], "platform.linux_distribution('debian', 'redhat', 'mandrake', ...), version='')": [], "platform.mac_ver('', ''))": [], "platform.mac_ver('', ''), machine='')": [], "platform.mac_ver('', ''), release='')": [], "platform.mac_ver('', ''), release='', machine='')": [], "platform.mac_ver('', ''), release='', versioninfo=('', machine='')": [], "platform.mac_ver('', ''), versioninfo=('')": [], "platform.mac_ver('', ''), versioninfo=('', machine='')": [], "platform.machine()": ["machine", "platform.main()", "platform._main()", "platform.axhline()", "platform.chebline()", "platform.match()", "platform.arcsin()", "platform.axline()", "platform.hlines()", "platform._unquote_match()", "platform.min()", "platform.get_domain()", "platform.margins()", "platform.fnmatch()", "platform.lagline()"], "platform.node()": ["node", "platform._node()", "platform._encode()", "platform.encode()", "platform._code()", "platform.mode()", "platform.getnode()", "platform._qencode()", "platform._bencode()", "platform.index()", "platform.encode_b()", "platform.mknod()", "platform.encode_q()", "platform.ne()", "platform.fsencode()"], "platform.platform(aliased=0)": ["platform", "platform.platform(aliased='0')", "platform.createResolutionCallbackFromFrame(aliased=0)", "platform.get_python_lib(aliased=0)", "platform.is_python_build(aliased=0)", "platform.mainloop(aliased=0)", "platform.getlocale(aliased=0)", "platform.lagtrim(aliased=0)", "platform._uninstall_helper(aliased=0)", "platform._exit(aliased=0)", "platform.axhline(aliased=0)", "platform._get_sysconfigdata_name(aliased=0)", "platform.axvline(aliased=0)", "platform.polytrim(aliased=0)", "platform.legtrim(aliased=0)"], "platform.platform(aliased=0, terse=0)": ["platform", "platform.platform(aliased='0', terse='0')", "platform.createResolutionCallbackFromFrame(aliased=0, terse=0)", "platform.get_python_lib(aliased=0, terse=0)", "platform.is_python_build(aliased=0, terse=0)", "platform.mainloop(aliased=0, terse=0)", "platform.getlocale(aliased=0, terse=0)", "platform.lagtrim(aliased=0, terse=0)", "platform._uninstall_helper(aliased=0, terse=0)", "platform._exit(aliased=0, terse=0)", "platform.axhline(aliased=0, terse=0)", "platform._get_sysconfigdata_name(aliased=0, terse=0)", "platform.axvline(aliased=0, terse=0)", "platform.polytrim(aliased=0, terse=0)", "platform.legtrim(aliased=0, terse=0)"], "platform.popen(cmd)": ["popen", "platform._open(cmd)", "platform.open(cmd)", "platform.bltn_open(cmd)", "platform.open_latin1(cmd)", "platform.OpenWrapper(cmd)", "platform._builtin_open(cmd)", "platform._popen(cmd)", "platform.compress(cmd)", "platform.partition(cmd)", "platform.argpartition(cmd)", "platform.fromfile(cmd)", "platform.rendezvous(cmd)", "platform.run(cmd)", "platform.pen(cmd)"], "platform.popen(cmd, bufsize=-1)": ["popen", "platform.popen(cmd, bufsize=(- '1'))", "platform._open(cmd, bufsize=(- 1))", "platform.open(cmd, bufsize=(- 1))", "platform.bltn_open(cmd, bufsize=(- 1))", "platform.open_latin1(cmd, bufsize=(- 1))", "platform.OpenWrapper(cmd, bufsize=(- 1))", "platform._builtin_open(cmd, bufsize=(- 1))", "platform._popen(cmd, bufsize=(- 1))", "platform.compress(cmd, bufsize=(- 1))", "platform.partition(cmd, bufsize=(- 1))", "platform.argpartition(cmd, bufsize=(- 1))", "platform.fromfile(cmd, bufsize=(- 1))", "platform.rendezvous(cmd, bufsize=(- 1))", "platform.run(cmd, bufsize=(- 1))"], "platform.popen(cmd, mode='r')": ["popen", "platform.popen(cmd, mode=1)", "platform._open(cmd, mode='r')", "platform.open(cmd, mode='r')", "platform.bltn_open(cmd, mode='r')", "platform.open_latin1(cmd, mode='r')", "platform.OpenWrapper(cmd, mode='r')", "platform._builtin_open(cmd, mode='r')", "platform._popen(cmd, mode='r')", "platform.compress(cmd, mode='r')", "platform.partition(cmd, mode='r')", "platform.argpartition(cmd, mode='r')", "platform.fromfile(cmd, mode='r')", "platform.rendezvous(cmd, mode='r')", "platform.run(cmd, mode='r')"], "platform.python_branch()": ["python_branch", "platform.get_python_inc()", "platform.python_build()", "platform._python_build()", "platform.get_python_lib()", "platform.is_python_build()", "platform.python_compiler()", "platform.broadcast_to()", "platform._broadcast_to()", "platform.in_ipython_frontend()", "platform._copyto()", "platform.python_implementation()", "platform.abstractmethod()", "platform._encrypt_on()", "platform._hist_bin_stone()"], "platform.python_build()": ["python_build", "platform._python_build()", "platform.is_python_build()", "platform.python_compiler()", "platform.build_opener()", "platform.python_branch()", "platform.get_python_lib()", "platform.get_python_inc()", "platform.rebuild_tensor()", "platform._rebuild_tensor()", "platform.build_table()", "platform.build_param()", "platform.build_stmts()", "platform.bind_method()", "platform.build_withitems()"], "platform.python_compiler()": ["python_compiler", "platform.compile_path()", "platform.show_compilers()", "platform.new_compiler()", "platform._try_compile()", "platform.compiler_fixup()", "platform.customize_compiler()", "platform.python_build()", "platform._compile_info()", "platform._python_build()", "platform.compile_unbound_method()", "platform.re_compile()", "platform.load_compiled()", "platform._maybe_compile()", "platform.compile()"], "platform.python_implementation()": ["python_implementation", "platform._array_str_implementation()", "platform._array_repr_implementation()", "platform.get_python_inc()", "platform.python_compiler()", "platform.get_python_lib()", "platform.is_python_build()", "platform.to_timedelta()", "platform.python_build()", "platform._python_build()", "platform.in_ipython_frontend()", "platform.python_branch()", "platform.get_file_path()", "platform._inet_paton()", "platform.compile_unbound_method()"], "platform.python_revision()": ["python_revision", "platform.python_version()", "platform.python_version_tuple()", "platform.get_python_version()", "platform._get_revised_path()", "platform.batch_isend_irecv()", "platform._sys_version()", "platform.register_optionflag()", "platform._isin_dispatcher()", "platform.print_exception()", "platform._check_expression()", "platform.position()", "platform._is_exception()", "platform.run_path()", "platform._norm_version()"], "platform.python_version_tuple()": ["python_version_tuple", "platform.python_version()", "platform.get_python_version()", "platform.python_revision()", "platform._get_system_version()", "platform._comparable_version()", "platform._check_version()", "platform.parse_mime_version()", "platform._sys_version()", "platform._norm_version()", "platform.get_versions()", "platform._signature_strip_non_python_syntax()", "platform.version()", "platform.verify_matching_signatures()", "platform.print_exception()"], "platform.system()": ["system", "platform.stem()", "platform.stream()", "platform.system_alias()", "platform.mkstemp()", "platform.asbytes()", "platform.setitem()", "platform.__setitem__()", "platform.step()", "platform.symtable()", "platform.issctype()", "platform.asstr()", "platform.stdev()", "platform.subst()", "platform.stamp()"], "platform.system_alias(system, release, version)": ["system_alias", "platform.system(system, release, version)", "platform._set_up_aliases(system, release, version)", "platform.align_terms(system, release, version)", "platform._alias(system, release, version)", "platform.is_sparse(system, release, version)", "platform.listen(system, release, version)", "platform._is_str(system, release, version)", "platform._flush_std_streams(system, release, version)", "platform._split_list(system, release, version)", "platform._validate_v(system, release, version)", "platform.is_storage(system, release, version)", "platform._scalar_str(system, release, version)", "platform._load_system_functions(system, release, version)", "platform._nest_class(system, release, version)"], "platform.uname()": ["uname", "platform.rename()", "platform.bitname()", "platform._modname()", "platform._getname()", "platform.dirname()", "platform.ttyname()", "platform.nanmean()", "platform.renames()", "platform._newname()", "platform.typename()", "platform._get_name()", "platform.upsample()", "platform.unescape()", "platform._basename()"], "platform.win32_ver()": ["win32_ver", "platform.iter_importers()", "platform.getfqdn()", "platform._node()", "platform._syscmd_ver()", "platform.linux_distribution()", "platform.mac_ver()", "platform._norm_version()", "platform.filterwarnings()", "platform._describe_option()", "platform.dist()", "platform.architecture()", "platform.java_ver()", "platform.libc_ver()", "platform.context_diff()"], "platform.win32_ver(csd='')": ["win32_ver", "platform.win32_ver(csd=0.0)", "platform.iter_importers(csd='')", "platform.getfqdn(csd='')", "platform._node(csd='')", "platform._syscmd_ver(csd='')", "platform.linux_distribution(csd='')", "platform.mac_ver(csd='')", "platform._norm_version(csd='')", "platform.filterwarnings(csd='')", "platform._describe_option(csd='')", "platform.dist(csd='')", "platform.architecture(csd='')", "platform.java_ver(csd='')", "platform.libc_ver(csd='')"], "platform.win32_ver(ptype='')": ["win32_ver", "platform.win32_ver(ptype=0.0)", "platform.iter_importers(ptype='')", "platform.getfqdn(ptype='')", "platform._node(ptype='')", "platform._syscmd_ver(ptype='')", "platform.linux_distribution(ptype='')", "platform.mac_ver(ptype='')", "platform._norm_version(ptype='')", "platform.filterwarnings(ptype='')", "platform._describe_option(ptype='')", "platform.dist(ptype='')", "platform.architecture(ptype='')", "platform.java_ver(ptype='')", "platform.libc_ver(ptype='')"], "platform.win32_ver(release='')": ["win32_ver", "platform.win32_ver(release=0.0)", "platform.iter_importers(release='')", "platform.getfqdn(release='')", "platform._node(release='')", "platform._syscmd_ver(release='')", "platform.linux_distribution(release='')", "platform.mac_ver(release='')", "platform._norm_version(release='')", "platform.filterwarnings(release='')", "platform._describe_option(release='')", "platform.dist(release='')", "platform.architecture(release='')", "platform.java_ver(release='')", "platform.libc_ver(release='')"], "platform.win32_ver(release='', version='')": ["win32_ver", "platform.win32_ver(release=0.0, version=0.0)", "platform.iter_importers(release='', version='')", "platform.getfqdn(release='', version='')", "platform._node(release='', version='')", "platform._syscmd_ver(release='', version='')", "platform.linux_distribution(release='', version='')", "platform.mac_ver(release='', version='')", "platform._norm_version(release='', version='')", "platform.filterwarnings(release='', version='')", "platform._describe_option(release='', version='')", "platform.dist(release='', version='')", "platform.architecture(release='', version='')", "platform.java_ver(release='', version='')", "platform.libc_ver(release='', version='')"], "platform.win32_ver(version='')": ["win32_ver", "platform.win32_ver(version=0.0)", "platform.iter_importers(version='')", "platform.getfqdn(version='')", "platform._node(version='')", "platform._syscmd_ver(version='')", "platform.linux_distribution(version='')", "platform.mac_ver(version='')", "platform._norm_version(version='')", "platform.filterwarnings(version='')", "platform._describe_option(version='')", "platform.dist(version='')", "platform.architecture(version='')", "platform.java_ver(version='')", "platform.libc_ver(version='')"], "plistlib.Data(data)": ["Data"], "plistlib.FMT_BINARY": ["plistlib.FMT_BINARY"], "plistlib.FMT_XML": ["plistlib.FMT_XML"], "plistlib.dump(value, fp)": ["dump", "plistlib._dump(value, fp)", "plistlib.dumps(value, fp)", "plistlib._dumps(value, fp)", "plistlib.dup(value, fp)", "plistlib.dup2(value, fp)", "plistlib._get_dump(value, fp)", "plistlib.up(value, fp)", "plistlib.DupFd(value, fp)", "plistlib._xml_dumps(value, fp)", "plistlib.WCOREDUMP(value, fp)", "plistlib._sum_(value, fp)", "plistlib._sum(value, fp)", "plistlib.sum(value, fp)", "plistlib.cmp(value, fp)"], "plistlib.dump(value, fp, fmt=FMT_XML, skipkeys=False)": ["dump", "plistlib.dump(value, fp, fmt=FMT_XML, skipkeys=True)", "plistlib._dump(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib.dumps(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib._dumps(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib.dup(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib.dup2(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib._get_dump(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib.up(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib.DupFd(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib._xml_dumps(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib.WCOREDUMP(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib._sum_(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib._sum(value, fp, fmt=FMT_XML, skipkeys=False)", "plistlib.sum(value, fp, fmt=FMT_XML, skipkeys=False)"], "plistlib.dump(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)": ["dump", "plistlib.dump(value, fp, fmt=FMT_XML, sort_keys=False, skipkeys=True)", "plistlib._dump(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib.dumps(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib._dumps(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib.dup(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib.dup2(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib._get_dump(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib.up(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib.DupFd(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib._xml_dumps(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib.WCOREDUMP(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib._sum_(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib._sum(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)", "plistlib.sum(value, fp, fmt=FMT_XML, sort_keys=True, skipkeys=False)"], "plistlib.dump(value, fp, skipkeys=False)": ["dump", "plistlib.dump(value, fp, skipkeys=True)", "plistlib._dump(value, fp, skipkeys=False)", "plistlib.dumps(value, fp, skipkeys=False)", "plistlib._dumps(value, fp, skipkeys=False)", "plistlib.dup(value, fp, skipkeys=False)", "plistlib.dup2(value, fp, skipkeys=False)", "plistlib._get_dump(value, fp, skipkeys=False)", "plistlib.up(value, fp, skipkeys=False)", "plistlib.DupFd(value, fp, skipkeys=False)", "plistlib._xml_dumps(value, fp, skipkeys=False)", "plistlib.WCOREDUMP(value, fp, skipkeys=False)", "plistlib._sum_(value, fp, skipkeys=False)", "plistlib._sum(value, fp, skipkeys=False)", "plistlib.sum(value, fp, skipkeys=False)"], "plistlib.dump(value, fp, sort_keys=True)": ["dump", "plistlib.dump(value, fp, sort_keys=False)", "plistlib._dump(value, fp, sort_keys=True)", "plistlib.dumps(value, fp, sort_keys=True)", "plistlib._dumps(value, fp, sort_keys=True)", "plistlib.dup(value, fp, sort_keys=True)", "plistlib.dup2(value, fp, sort_keys=True)", "plistlib._get_dump(value, fp, sort_keys=True)", "plistlib.up(value, fp, sort_keys=True)", "plistlib.DupFd(value, fp, sort_keys=True)", "plistlib._xml_dumps(value, fp, sort_keys=True)", "plistlib.WCOREDUMP(value, fp, sort_keys=True)", "plistlib._sum_(value, fp, sort_keys=True)", "plistlib._sum(value, fp, sort_keys=True)", "plistlib.sum(value, fp, sort_keys=True)"], "plistlib.dump(value, fp, sort_keys=True, skipkeys=False)": ["dump", "plistlib.dump(value, fp, sort_keys=False, skipkeys=True)", "plistlib._dump(value, fp, sort_keys=True, skipkeys=False)", "plistlib.dumps(value, fp, sort_keys=True, skipkeys=False)", "plistlib._dumps(value, fp, sort_keys=True, skipkeys=False)", "plistlib.dup(value, fp, sort_keys=True, skipkeys=False)", "plistlib.dup2(value, fp, sort_keys=True, skipkeys=False)", "plistlib._get_dump(value, fp, sort_keys=True, skipkeys=False)", "plistlib.up(value, fp, sort_keys=True, skipkeys=False)", "plistlib.DupFd(value, fp, sort_keys=True, skipkeys=False)", "plistlib._xml_dumps(value, fp, sort_keys=True, skipkeys=False)", "plistlib.WCOREDUMP(value, fp, sort_keys=True, skipkeys=False)", "plistlib._sum_(value, fp, sort_keys=True, skipkeys=False)", "plistlib._sum(value, fp, sort_keys=True, skipkeys=False)", "plistlib.sum(value, fp, sort_keys=True, skipkeys=False)"], "plistlib.dumps(value)": ["dumps", "plistlib._dumps(value)", "plistlib.dump(value)", "plistlib._dump(value)", "plistlib._sum_(value)", "plistlib._sum(value)", "plistlib.dup2(value)", "plistlib._group(value)", "plistlib._unparse_datetime(value)", "plistlib._genops(value)", "plistlib.compile(value)", "plistlib.template(value)", "plistlib.safe_repr(value)", "plistlib.re_compile(value)", "plistlib.run(value)"], "plistlib.dumps(value, skipkeys=False)": ["dumps", "plistlib.dumps(value, skipkeys=True)", "plistlib._dumps(value, skipkeys=False)", "plistlib.dump(value, skipkeys=False)", "plistlib._dump(value, skipkeys=False)", "plistlib._sum_(value, skipkeys=False)", "plistlib._sum(value, skipkeys=False)", "plistlib.dup2(value, skipkeys=False)", "plistlib._group(value, skipkeys=False)", "plistlib._unparse_datetime(value, skipkeys=False)", "plistlib._genops(value, skipkeys=False)", "plistlib.compile(value, skipkeys=False)", "plistlib.template(value, skipkeys=False)", "plistlib.safe_repr(value, skipkeys=False)", "plistlib.re_compile(value, skipkeys=False)"], "plistlib.dumps(value, sort_keys=True)": ["dumps", "plistlib.dumps(value, sort_keys=False)", "plistlib._dumps(value, sort_keys=True)", "plistlib.dump(value, sort_keys=True)", "plistlib._dump(value, sort_keys=True)", "plistlib._sum_(value, sort_keys=True)", "plistlib._sum(value, sort_keys=True)", "plistlib.dup2(value, sort_keys=True)", "plistlib._group(value, sort_keys=True)", "plistlib._unparse_datetime(value, sort_keys=True)", "plistlib._genops(value, sort_keys=True)", "plistlib.compile(value, sort_keys=True)", "plistlib.template(value, sort_keys=True)", "plistlib.safe_repr(value, sort_keys=True)", "plistlib.re_compile(value, sort_keys=True)"], "plistlib.dumps(value, sort_keys=True, skipkeys=False)": ["dumps", "plistlib.dumps(value, sort_keys=False, skipkeys=True)", "plistlib._dumps(value, sort_keys=True, skipkeys=False)", "plistlib.dump(value, sort_keys=True, skipkeys=False)", "plistlib._dump(value, sort_keys=True, skipkeys=False)", "plistlib._sum_(value, sort_keys=True, skipkeys=False)", "plistlib._sum(value, sort_keys=True, skipkeys=False)", "plistlib.dup2(value, sort_keys=True, skipkeys=False)", "plistlib._group(value, sort_keys=True, skipkeys=False)", "plistlib._unparse_datetime(value, sort_keys=True, skipkeys=False)", "plistlib._genops(value, sort_keys=True, skipkeys=False)", "plistlib.compile(value, sort_keys=True, skipkeys=False)", "plistlib.template(value, sort_keys=True, skipkeys=False)", "plistlib.safe_repr(value, sort_keys=True, skipkeys=False)", "plistlib.re_compile(value, sort_keys=True, skipkeys=False)"], "plistlib.load(fp)": ["load", "plistlib._load(fp)", "plistlib.loads(fp)", "plistlib._loads(fp)", "plistlib.reload(fp)", "plistlib.loadtxt(fp)", "plistlib.overload(fp)", "plistlib._overload(fp)", "plistlib._read_long(fp)", "plistlib._xml_loads(fp)", "plistlib.lagdiv(fp)", "plistlib.legadd(fp)", "plistlib.locate(fp)", "plistlib.lagadd(fp)", "plistlib.lagder(fp)"], "plistlib.load(fp, dict_type=dict)": ["load", "plistlib._load(fp, dict_type=dict)", "plistlib.loads(fp, dict_type=dict)", "plistlib._loads(fp, dict_type=dict)", "plistlib.reload(fp, dict_type=dict)", "plistlib.loadtxt(fp, dict_type=dict)", "plistlib.overload(fp, dict_type=dict)", "plistlib._overload(fp, dict_type=dict)", "plistlib._read_long(fp, dict_type=dict)", "plistlib._xml_loads(fp, dict_type=dict)", "plistlib.lagdiv(fp, dict_type=dict)", "plistlib.legadd(fp, dict_type=dict)", "plistlib.locate(fp, dict_type=dict)", "plistlib.lagadd(fp, dict_type=dict)", "plistlib.lagder(fp, dict_type=dict)"], "plistlib.load(fp, fmt=None)": ["load", "plistlib.load(fp, fmt=None)", "plistlib._load(fp, fmt=None)", "plistlib.loads(fp, fmt=None)", "plistlib._loads(fp, fmt=None)", "plistlib.reload(fp, fmt=None)", "plistlib.loadtxt(fp, fmt=None)", "plistlib.overload(fp, fmt=None)", "plistlib._overload(fp, fmt=None)", "plistlib._read_long(fp, fmt=None)", "plistlib._xml_loads(fp, fmt=None)", "plistlib.lagdiv(fp, fmt=None)", "plistlib.legadd(fp, fmt=None)", "plistlib.locate(fp, fmt=None)", "plistlib.lagadd(fp, fmt=None)"], "plistlib.load(fp, fmt=None, use_builtin_types=True, dict_type=dict)": ["load", "plistlib.load(fp, fmt=None, use_builtin_types=False, dict_type=dict)", "plistlib._load(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib.loads(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib._loads(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib.reload(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib.loadtxt(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib.overload(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib._overload(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib._read_long(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib._xml_loads(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib.lagdiv(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib.legadd(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib.locate(fp, fmt=None, use_builtin_types=True, dict_type=dict)", "plistlib.lagadd(fp, fmt=None, use_builtin_types=True, dict_type=dict)"], "plistlib.load(fp, use_builtin_types=True)": ["load", "plistlib.load(fp, use_builtin_types=False)", "plistlib._load(fp, use_builtin_types=True)", "plistlib.loads(fp, use_builtin_types=True)", "plistlib._loads(fp, use_builtin_types=True)", "plistlib.reload(fp, use_builtin_types=True)", "plistlib.loadtxt(fp, use_builtin_types=True)", "plistlib.overload(fp, use_builtin_types=True)", "plistlib._overload(fp, use_builtin_types=True)", "plistlib._read_long(fp, use_builtin_types=True)", "plistlib._xml_loads(fp, use_builtin_types=True)", "plistlib.lagdiv(fp, use_builtin_types=True)", "plistlib.legadd(fp, use_builtin_types=True)", "plistlib.locate(fp, use_builtin_types=True)", "plistlib.lagadd(fp, use_builtin_types=True)"], "plistlib.load(fp, use_builtin_types=True, dict_type=dict)": ["load", "plistlib.load(fp, use_builtin_types=False, dict_type=dict)", "plistlib._load(fp, use_builtin_types=True, dict_type=dict)", "plistlib.loads(fp, use_builtin_types=True, dict_type=dict)", "plistlib._loads(fp, use_builtin_types=True, dict_type=dict)", "plistlib.reload(fp, use_builtin_types=True, dict_type=dict)", "plistlib.loadtxt(fp, use_builtin_types=True, dict_type=dict)", "plistlib.overload(fp, use_builtin_types=True, dict_type=dict)", "plistlib._overload(fp, use_builtin_types=True, dict_type=dict)", "plistlib._read_long(fp, use_builtin_types=True, dict_type=dict)", "plistlib._xml_loads(fp, use_builtin_types=True, dict_type=dict)", "plistlib.lagdiv(fp, use_builtin_types=True, dict_type=dict)", "plistlib.legadd(fp, use_builtin_types=True, dict_type=dict)", "plistlib.locate(fp, use_builtin_types=True, dict_type=dict)", "plistlib.lagadd(fp, use_builtin_types=True, dict_type=dict)"], "plistlib.loads(data)": ["loads", "plistlib._loads(data)", "plistlib._load(data)", "plistlib.load(data)", "plistlib.reload(data)", "plistlib._xml_loads(data)", "plistlib.loadtxt(data)", "plistlib.set_loader(data)", "plistlib._globals(data)", "plistlib.load_tests(data)", "plistlib.towards(data)", "plistlib.overload(data)", "plistlib.leapdays(data)", "plistlib._overload(data)", "plistlib.load_source(data)"], "plistlib.loads(data, dict_type=dict)": ["loads", "plistlib._loads(data, dict_type=dict)", "plistlib._load(data, dict_type=dict)", "plistlib.load(data, dict_type=dict)", "plistlib.reload(data, dict_type=dict)", "plistlib._xml_loads(data, dict_type=dict)", "plistlib.loadtxt(data, dict_type=dict)", "plistlib.set_loader(data, dict_type=dict)", "plistlib._globals(data, dict_type=dict)", "plistlib.load_tests(data, dict_type=dict)", "plistlib.towards(data, dict_type=dict)", "plistlib.overload(data, dict_type=dict)", "plistlib.leapdays(data, dict_type=dict)", "plistlib._overload(data, dict_type=dict)", "plistlib.load_source(data, dict_type=dict)"], "plistlib.loads(data, fmt=None)": ["loads", "plistlib.loads(data, fmt=None)", "plistlib._loads(data, fmt=None)", "plistlib._load(data, fmt=None)", "plistlib.load(data, fmt=None)", "plistlib.reload(data, fmt=None)", "plistlib._xml_loads(data, fmt=None)", "plistlib.loadtxt(data, fmt=None)", "plistlib.set_loader(data, fmt=None)", "plistlib._globals(data, fmt=None)", "plistlib.load_tests(data, fmt=None)", "plistlib.towards(data, fmt=None)", "plistlib.overload(data, fmt=None)", "plistlib.leapdays(data, fmt=None)", "plistlib._overload(data, fmt=None)"], "plistlib.loads(data, fmt=None, dict_type=dict)": ["loads", "plistlib.loads(data, fmt=None, dict_type=dict)", "plistlib._loads(data, fmt=None, dict_type=dict)", "plistlib._load(data, fmt=None, dict_type=dict)", "plistlib.load(data, fmt=None, dict_type=dict)", "plistlib.reload(data, fmt=None, dict_type=dict)", "plistlib._xml_loads(data, fmt=None, dict_type=dict)", "plistlib.loadtxt(data, fmt=None, dict_type=dict)", "plistlib.set_loader(data, fmt=None, dict_type=dict)", "plistlib._globals(data, fmt=None, dict_type=dict)", "plistlib.load_tests(data, fmt=None, dict_type=dict)", "plistlib.towards(data, fmt=None, dict_type=dict)", "plistlib.overload(data, fmt=None, dict_type=dict)", "plistlib.leapdays(data, fmt=None, dict_type=dict)", "plistlib._overload(data, fmt=None, dict_type=dict)"], "plistlib.loads(data, fmt=None, use_builtin_types=True)": ["loads", "plistlib.loads(data, fmt=None, use_builtin_types=False)", "plistlib._loads(data, fmt=None, use_builtin_types=True)", "plistlib._load(data, fmt=None, use_builtin_types=True)", "plistlib.load(data, fmt=None, use_builtin_types=True)", "plistlib.reload(data, fmt=None, use_builtin_types=True)", "plistlib._xml_loads(data, fmt=None, use_builtin_types=True)", "plistlib.loadtxt(data, fmt=None, use_builtin_types=True)", "plistlib.set_loader(data, fmt=None, use_builtin_types=True)", "plistlib._globals(data, fmt=None, use_builtin_types=True)", "plistlib.load_tests(data, fmt=None, use_builtin_types=True)", "plistlib.towards(data, fmt=None, use_builtin_types=True)", "plistlib.overload(data, fmt=None, use_builtin_types=True)", "plistlib.leapdays(data, fmt=None, use_builtin_types=True)", "plistlib._overload(data, fmt=None, use_builtin_types=True)"], "plistlib.loads(data, use_builtin_types=True)": ["loads", "plistlib.loads(data, use_builtin_types=False)", "plistlib._loads(data, use_builtin_types=True)", "plistlib._load(data, use_builtin_types=True)", "plistlib.load(data, use_builtin_types=True)", "plistlib.reload(data, use_builtin_types=True)", "plistlib._xml_loads(data, use_builtin_types=True)", "plistlib.loadtxt(data, use_builtin_types=True)", "plistlib.set_loader(data, use_builtin_types=True)", "plistlib._globals(data, use_builtin_types=True)", "plistlib.load_tests(data, use_builtin_types=True)", "plistlib.towards(data, use_builtin_types=True)", "plistlib.overload(data, use_builtin_types=True)", "plistlib.leapdays(data, use_builtin_types=True)", "plistlib._overload(data, use_builtin_types=True)"], "plistlib.loads(data, use_builtin_types=True, dict_type=dict)": ["loads", "plistlib.loads(data, use_builtin_types=False, dict_type=dict)", "plistlib._loads(data, use_builtin_types=True, dict_type=dict)", "plistlib._load(data, use_builtin_types=True, dict_type=dict)", "plistlib.load(data, use_builtin_types=True, dict_type=dict)", "plistlib.reload(data, use_builtin_types=True, dict_type=dict)", "plistlib._xml_loads(data, use_builtin_types=True, dict_type=dict)", "plistlib.loadtxt(data, use_builtin_types=True, dict_type=dict)", "plistlib.set_loader(data, use_builtin_types=True, dict_type=dict)", "plistlib._globals(data, use_builtin_types=True, dict_type=dict)", "plistlib.load_tests(data, use_builtin_types=True, dict_type=dict)", "plistlib.towards(data, use_builtin_types=True, dict_type=dict)", "plistlib.overload(data, use_builtin_types=True, dict_type=dict)", "plistlib.leapdays(data, use_builtin_types=True, dict_type=dict)", "plistlib._overload(data, use_builtin_types=True, dict_type=dict)"], "plistlib.readPlist(pathOrFile)": ["readPlist", "plistlib.writePlist(pathOrFile)", "plistlib.dsplit(pathOrFile)", "plistlib.readwrite(pathOrFile)", "plistlib._wrapit(pathOrFile)", "plistlib.readPlistFromBytes(pathOrFile)", "plistlib.rsplit(pathOrFile)", "plistlib.replicate(pathOrFile)", "plistlib.read_uint2(pathOrFile)", "plistlib.read_uint1(pathOrFile)", "plistlib.read_uint8(pathOrFile)", "plistlib.streamplot(pathOrFile)", "plistlib._read_short(pathOrFile)", "plistlib.read_uint4(pathOrFile)", "plistlib.real(pathOrFile)"], "plistlib.readPlistFromBytes(data)": ["readPlistFromBytes", "plistlib.writePlistToBytes(data)", "plistlib._randombytes(data)", "plistlib.readPlist(data)", "plistlib._grad_postprocess(data)", "plistlib._reset_registry(data)", "plistlib._register_types(data)", "plistlib.asbytes(data)", "plistlib._realType(data)", "plistlib.script_from_examples(data)", "plistlib._register_type(data)", "plistlib.readwrite(data)", "plistlib._register_task(data)", "plistlib.test_rast(data)", "plistlib.DateFromTicks(data)"], "plistlib.writePlist(rootObject, pathOrFile)": ["writePlist", "plistlib.readPlist(rootObject, pathOrFile)", "plistlib.writePlistToBytes(rootObject, pathOrFile)", "plistlib.write(rootObject, pathOrFile)", "plistlib._interp_limit(rootObject, pathOrFile)", "plistlib.writedocs(rootObject, pathOrFile)", "plistlib.replicate(rootObject, pathOrFile)", "plistlib.pwrite(rootObject, pathOrFile)", "plistlib._wrapit(rootObject, pathOrFile)", "plistlib.rsplit(rootObject, pathOrFile)", "plistlib.writev(rootObject, pathOrFile)", "plistlib._writen(rootObject, pathOrFile)", "plistlib._split_list(rootObject, pathOrFile)", "plistlib._split_line(rootObject, pathOrFile)", "plistlib._is_list(rootObject, pathOrFile)"], "policy.clone(**kw)": ["clone"], "policy.cte_type": ["policy.cte_type"], "policy.fold(name, value)": ["fold"], "policy.fold_binary(name, value)": ["fold_binary"], "policy.handle_defect(obj, defect)": ["handle_defect"], "policy.header_fetch_parse(name, value)": ["header_fetch_parse"], "policy.header_max_count(name)": ["header_max_count"], "policy.header_source_parse(sourcelines)": ["header_source_parse"], "policy.header_store_parse(name, value)": ["header_store_parse"], "policy.linesep": ["policy.linesep"], "policy.mangle_from_": ["policy.mangle_from_"], "policy.max_line_length": ["policy.max_line_length"], "policy.message_factory": ["policy.message_factory"], "policy.raise_on_defect": ["policy.raise_on_defect"], "policy.register_defect(obj, defect)": ["register_defect"], "poll.poll()": ["poll"], "poll.poll(timeout)": ["poll"], "poll.register(fd)": ["register"], "poll.unregister(fd)": ["unregister"], "pool.apply(func)": ["apply"], "pool.apply(func, args)": ["apply"], "pool.apply(func, args, kwds)": ["apply"], "pool.apply_async(func)": ["apply_async"], "pool.apply_async(func, args)": ["apply_async"], "pool.apply_async(func, args, kwds)": ["apply_async"], "pool.apply_async(func, args, kwds, callback)": ["apply_async"], "pool.close()": ["close"], "pool.imap(func, iterable)": ["imap"], "pool.imap(func, iterable, chunksize)": ["imap"], "pool.imap_unordered(func, iterable)": ["imap_unordered"], "pool.join()": ["join"], "pool.map(func, iterable)": ["map"], "pool.map(func, iterable, chunksize)": ["map"], "pool.map_async(func, iterable)": ["map_async"], "pool.map_async(func, iterable, chunksize)": ["map_async"], "pool.map_async(func, iterable, chunksize, callback, error_callback)": ["map_async"], "pool.starmap(func, iterable)": ["starmap"], "pool.starmap(func, iterable, chunksize)": ["starmap"], "pool.starmap_async(func, iterable)": ["starmap_async"], "pool.starmap_async(func, iterable, chunksize)": ["starmap_async"], "pool.starmap_async(func, iterable, chunksize, callback)": ["starmap_async"], "pool.starmap_async(func, iterable, chunksize, callback, error_callback)": ["starmap_async"], "pool.terminate()": ["terminate"], "poplib.POP3(host, timeout, port=POP3_PORT)": ["POP3"], "poplib.POP3_SSL(host)": ["POP3_SSL"], "poplib.POP3_SSL(host, certfile=None)": ["POP3_SSL", "poplib.POP3_SSL(host, certfile=None)"], "poplib.POP3_SSL(host, port=POP3_SSL_PORT)": ["POP3_SSL"], "poplib.error_proto": ["poplib.error_proto"], "posix.environ": ["posix.environ"], "pow(x, y)": ["pow", "__pow__(x, y)", "_pow(x, y)", "rpow(x, y)", "__ipow__(x, y)", "ipow(x, y)", "power(x, y)", "legpow(x, y)", "__pos__(x, y)", "lagpow(x, y)", "_dpower(x, y)", "pos(x, y)", "polypow(x, y)", "pendown(x, y)", "chebpow(x, y)"], "pow(x, y, z)": ["pow", "__pow__(x, y, z)", "_pow(x, y, z)", "rpow(x, y, z)", "__ipow__(x, y, z)", "ipow(x, y, z)", "power(x, y, z)", "legpow(x, y, z)", "__pos__(x, y, z)", "lagpow(x, y, z)", "_dpower(x, y, z)", "pos(x, y, z)", "polypow(x, y, z)", "pendown(x, y, z)", "chebpow(x, y, z)"], "pprint.PrettyPrinter()": ["PrettyPrinter"], "pprint.PrettyPrinter(compact=False)": ["PrettyPrinter", "pprint.PrettyPrinter(compact=True)"], "pprint.PrettyPrinter(depth=None)": ["PrettyPrinter", "pprint.PrettyPrinter(depth=None)"], "pprint.PrettyPrinter(indent=1)": ["PrettyPrinter", "pprint.PrettyPrinter(indent='1')"], "pprint.PrettyPrinter(indent=1, compact=False)": ["PrettyPrinter", "pprint.PrettyPrinter(indent=1, compact=True)", "pprint.PrettyPrinter(indent='1', compact=False)"], "pprint.PrettyPrinter(indent=1, depth=None)": ["PrettyPrinter", "pprint.PrettyPrinter(indent=1, depth=None)", "pprint.PrettyPrinter(indent='1', depth=None)"], "pprint.PrettyPrinter(indent=1, stream=None)": ["PrettyPrinter", "pprint.PrettyPrinter(indent=1, stream=None)", "pprint.PrettyPrinter(indent='1', stream=None)"], "pprint.PrettyPrinter(indent=1, width=80)": ["PrettyPrinter", "pprint.PrettyPrinter(indent='1', width='80')"], "pprint.PrettyPrinter(stream=None)": ["PrettyPrinter", "pprint.PrettyPrinter(stream=None)"], "pprint.PrettyPrinter(width=80)": ["PrettyPrinter", "pprint.PrettyPrinter(width='80')"], "pprint.isreadable(object)": ["isreadable", "pprint.read_table(object)", "pprint.isreal(object)", "pprint.disable(object)", "pprint.iterable(object)", "pprint.isawaitable(object)", "pprint.traceable(object)", "pprint.isrealobj(object)", "pprint.imread(object)", "pprint.enable(object)", "pprint._readmodule(object)", "pprint.readmodule(object)", "pprint.isframe(object)", "pprint.build_table(object)", "pprint.real(object)"], "pprint.isrecursive(object)": ["isrecursive", "pprint._isrecursive(object)", "pprint._recursive_filled(object)", "pprint.recursive_repr(object)", "pprint._recursive_repr(object)", "pprint._recursion(object)", "pprint._recursive_guard(object)", "pprint._disassemble_recursive(object)", "pprint._recursive_fill_value(object)", "pprint.irecv(object)", "pprint._recursive_printoption(object)", "pprint.isroutine(object)", "pprint._structure(object)", "pprint._isunsized(object)", "pprint._recursive_compile_class(object)"], "pprint.pformat(object)": ["pformat", "pprint._format_exc(object)", "pprint.format_exc(object)", "pprint.polyder(object)", "pprint.na_value_for_dtype(object)", "pprint.orthogonal_(object)", "pprint.ip_network(object)", "pprint.dirac_(object)", "pprint._arraymethod(object)", "pprint.getframeinfo(object)", "pprint.get_docstring(object)", "pprint.getinnerframes(object)", "pprint.getouterframes(object)", "pprint.fftfreq(object)", "pprint.median_grouped(object)"], "pprint.pformat(object, compact=False)": ["pformat", "pprint.pformat(object, compact=True)", "pprint._format_exc(object, compact=False)", "pprint.format_exc(object, compact=False)", "pprint.polyder(object, compact=False)", "pprint.na_value_for_dtype(object, compact=False)", "pprint.orthogonal_(object, compact=False)", "pprint.ip_network(object, compact=False)", "pprint.dirac_(object, compact=False)", "pprint._arraymethod(object, compact=False)", "pprint.getframeinfo(object, compact=False)", "pprint.get_docstring(object, compact=False)", "pprint.getinnerframes(object, compact=False)", "pprint.getouterframes(object, compact=False)", "pprint.fftfreq(object, compact=False)"], "pprint.pformat(object, depth=None)": ["pformat", "pprint.pformat(object, depth=None)", "pprint._format_exc(object, depth=None)", "pprint.format_exc(object, depth=None)", "pprint.polyder(object, depth=None)", "pprint.na_value_for_dtype(object, depth=None)", "pprint.orthogonal_(object, depth=None)", "pprint.ip_network(object, depth=None)", "pprint.dirac_(object, depth=None)", "pprint._arraymethod(object, depth=None)", "pprint.getframeinfo(object, depth=None)", "pprint.get_docstring(object, depth=None)", "pprint.getinnerframes(object, depth=None)", "pprint.getouterframes(object, depth=None)", "pprint.fftfreq(object, depth=None)"], "pprint.pformat(object, indent=1)": ["pformat", "pprint.pformat(object, indent='1')", "pprint._format_exc(object, indent=1)", "pprint.format_exc(object, indent=1)", "pprint.polyder(object, indent=1)", "pprint.na_value_for_dtype(object, indent=1)", "pprint.orthogonal_(object, indent=1)", "pprint.ip_network(object, indent=1)", "pprint.dirac_(object, indent=1)", "pprint._arraymethod(object, indent=1)", "pprint.getframeinfo(object, indent=1)", "pprint.get_docstring(object, indent=1)", "pprint.getinnerframes(object, indent=1)", "pprint.getouterframes(object, indent=1)", "pprint.fftfreq(object, indent=1)"], "pprint.pformat(object, indent=1, compact=False)": ["pformat", "pprint.pformat(object, indent=1, compact=True)", "pprint.pformat(object, indent='1', compact=False)", "pprint._format_exc(object, indent=1, compact=False)", "pprint.format_exc(object, indent=1, compact=False)", "pprint.polyder(object, indent=1, compact=False)", "pprint.na_value_for_dtype(object, indent=1, compact=False)", "pprint.orthogonal_(object, indent=1, compact=False)", "pprint.ip_network(object, indent=1, compact=False)", "pprint.dirac_(object, indent=1, compact=False)", "pprint._arraymethod(object, indent=1, compact=False)", "pprint.getframeinfo(object, indent=1, compact=False)", "pprint.get_docstring(object, indent=1, compact=False)", "pprint.getinnerframes(object, indent=1, compact=False)", "pprint.getouterframes(object, indent=1, compact=False)"], "pprint.pformat(object, indent=1, depth=None)": ["pformat", "pprint.pformat(object, indent=1, depth=None)", "pprint.pformat(object, indent='1', depth=None)", "pprint._format_exc(object, indent=1, depth=None)", "pprint.format_exc(object, indent=1, depth=None)", "pprint.polyder(object, indent=1, depth=None)", "pprint.na_value_for_dtype(object, indent=1, depth=None)", "pprint.orthogonal_(object, indent=1, depth=None)", "pprint.ip_network(object, indent=1, depth=None)", "pprint.dirac_(object, indent=1, depth=None)", "pprint._arraymethod(object, indent=1, depth=None)", "pprint.getframeinfo(object, indent=1, depth=None)", "pprint.get_docstring(object, indent=1, depth=None)", "pprint.getinnerframes(object, indent=1, depth=None)", "pprint.getouterframes(object, indent=1, depth=None)"], "pprint.pformat(object, indent=1, width=80)": ["pformat", "pprint.pformat(object, indent='1', width='80')", "pprint._format_exc(object, indent=1, width=80)", "pprint.format_exc(object, indent=1, width=80)", "pprint.polyder(object, indent=1, width=80)", "pprint.na_value_for_dtype(object, indent=1, width=80)", "pprint.orthogonal_(object, indent=1, width=80)", "pprint.ip_network(object, indent=1, width=80)", "pprint.dirac_(object, indent=1, width=80)", "pprint._arraymethod(object, indent=1, width=80)", "pprint.getframeinfo(object, indent=1, width=80)", "pprint.get_docstring(object, indent=1, width=80)", "pprint.getinnerframes(object, indent=1, width=80)", "pprint.getouterframes(object, indent=1, width=80)", "pprint.fftfreq(object, indent=1, width=80)"], "pprint.pformat(object, width=80)": ["pformat", "pprint.pformat(object, width='80')", "pprint._format_exc(object, width=80)", "pprint.format_exc(object, width=80)", "pprint.polyder(object, width=80)", "pprint.na_value_for_dtype(object, width=80)", "pprint.orthogonal_(object, width=80)", "pprint.ip_network(object, width=80)", "pprint.dirac_(object, width=80)", "pprint._arraymethod(object, width=80)", "pprint.getframeinfo(object, width=80)", "pprint.get_docstring(object, width=80)", "pprint.getinnerframes(object, width=80)", "pprint.getouterframes(object, width=80)", "pprint.fftfreq(object, width=80)"], "pprint.pprint(object)": ["pprint", "pprint.print_exc(object)", "pprint._run_pip(object)", "pprint.print_list(object)", "pprint.print_last(object)", "pprint.pvariance(object)", "pprint.PI(object)", "pprint.isposinf(object)", "pprint.variance(object)", "pprint.main(object)", "pprint.open(object)", "pprint.wait(object)", "pprint.fromstringlist(object)", "pprint.nanargmin(object)", "pprint.fromstring(object)"], "pprint.pprint(object, compact=False)": ["pprint", "pprint.pprint(object, compact=True)", "pprint.print_exc(object, compact=False)", "pprint._run_pip(object, compact=False)", "pprint.print_list(object, compact=False)", "pprint.print_last(object, compact=False)", "pprint.pvariance(object, compact=False)", "pprint.PI(object, compact=False)", "pprint.isposinf(object, compact=False)", "pprint.variance(object, compact=False)", "pprint.main(object, compact=False)", "pprint.open(object, compact=False)", "pprint.wait(object, compact=False)", "pprint.fromstringlist(object, compact=False)", "pprint.nanargmin(object, compact=False)"], "pprint.pprint(object, indent=1)": ["pprint", "pprint.pprint(object, indent='1')", "pprint.print_exc(object, indent=1)", "pprint._run_pip(object, indent=1)", "pprint.print_list(object, indent=1)", "pprint.print_last(object, indent=1)", "pprint.pvariance(object, indent=1)", "pprint.PI(object, indent=1)", "pprint.isposinf(object, indent=1)", "pprint.variance(object, indent=1)", "pprint.main(object, indent=1)", "pprint.open(object, indent=1)", "pprint.wait(object, indent=1)", "pprint.fromstringlist(object, indent=1)", "pprint.nanargmin(object, indent=1)"], "pprint.pprint(object, stream=None)": ["pprint", "pprint.pprint(object, stream=None)", "pprint.print_exc(object, stream=None)", "pprint._run_pip(object, stream=None)", "pprint.print_list(object, stream=None)", "pprint.print_last(object, stream=None)", "pprint.pvariance(object, stream=None)", "pprint.PI(object, stream=None)", "pprint.isposinf(object, stream=None)", "pprint.variance(object, stream=None)", "pprint.main(object, stream=None)", "pprint.open(object, stream=None)", "pprint.wait(object, stream=None)", "pprint.fromstringlist(object, stream=None)", "pprint.nanargmin(object, stream=None)"], "pprint.pprint(object, stream=None, indent=1)": ["pprint", "pprint.pprint(object, stream=None, indent=1)", "pprint.pprint(object, stream=None, indent='1')", "pprint.print_exc(object, stream=None, indent=1)", "pprint._run_pip(object, stream=None, indent=1)", "pprint.print_list(object, stream=None, indent=1)", "pprint.print_last(object, stream=None, indent=1)", "pprint.pvariance(object, stream=None, indent=1)", "pprint.PI(object, stream=None, indent=1)", "pprint.isposinf(object, stream=None, indent=1)", "pprint.variance(object, stream=None, indent=1)", "pprint.main(object, stream=None, indent=1)", "pprint.open(object, stream=None, indent=1)", "pprint.wait(object, stream=None, indent=1)", "pprint.fromstringlist(object, stream=None, indent=1)"], "pprint.pprint(object, width=80)": ["pprint", "pprint.pprint(object, width='80')", "pprint.print_exc(object, width=80)", "pprint._run_pip(object, width=80)", "pprint.print_list(object, width=80)", "pprint.print_last(object, width=80)", "pprint.pvariance(object, width=80)", "pprint.PI(object, width=80)", "pprint.isposinf(object, width=80)", "pprint.variance(object, width=80)", "pprint.main(object, width=80)", "pprint.open(object, width=80)", "pprint.wait(object, width=80)", "pprint.fromstringlist(object, width=80)", "pprint.nanargmin(object, width=80)"], "print(*objects)": ["print", "pprint(*objects)", "print_tb(*objects)", "errprint(*objects)", "pwrite(*objects)", "spring(*objects)", "print_exc(*objects)", "print_form(*objects)", "init(*objects)", "pinv(*objects)", "hermint(*objects)", "_pprint_seq(*objects)", "_print_dict(*objects)", "print_list(*objects)", "_safe_print(*objects)"], "print(*objects, end='\\n')": ["print", "print(*objects, end=1.0)", "pprint(*objects, end='\\n')", "print_tb(*objects, end='\\n')", "errprint(*objects, end='\\n')", "pwrite(*objects, end='\\n')", "spring(*objects, end='\\n')", "print_exc(*objects, end='\\n')", "print_form(*objects, end='\\n')", "init(*objects, end='\\n')", "pinv(*objects, end='\\n')", "hermint(*objects, end='\\n')", "_pprint_seq(*objects, end='\\n')", "_print_dict(*objects, end='\\n')", "print_list(*objects, end='\\n')"], "print(*objects, end='\\n', file=sys.stdout)": ["print", "print(*objects, end=1, file=sys.stdout)", "pprint(*objects, end='\\n', file=sys.stdout)", "print_tb(*objects, end='\\n', file=sys.stdout)", "errprint(*objects, end='\\n', file=sys.stdout)", "pwrite(*objects, end='\\n', file=sys.stdout)", "spring(*objects, end='\\n', file=sys.stdout)", "print_exc(*objects, end='\\n', file=sys.stdout)", "print_form(*objects, end='\\n', file=sys.stdout)", "init(*objects, end='\\n', file=sys.stdout)", "pinv(*objects, end='\\n', file=sys.stdout)", "hermint(*objects, end='\\n', file=sys.stdout)", "_pprint_seq(*objects, end='\\n', file=sys.stdout)", "_print_dict(*objects, end='\\n', file=sys.stdout)", "print_list(*objects, end='\\n', file=sys.stdout)"], "print(*objects, end='\\n', flush=False)": ["print", "print(*objects, end='\\n', flush=True)", "print(*objects, end=1.0, flush=False)", "pprint(*objects, end='\\n', flush=False)", "print_tb(*objects, end='\\n', flush=False)", "errprint(*objects, end='\\n', flush=False)", "pwrite(*objects, end='\\n', flush=False)", "spring(*objects, end='\\n', flush=False)", "print_exc(*objects, end='\\n', flush=False)", "print_form(*objects, end='\\n', flush=False)", "init(*objects, end='\\n', flush=False)", "pinv(*objects, end='\\n', flush=False)", "hermint(*objects, end='\\n', flush=False)", "_pprint_seq(*objects, end='\\n', flush=False)", "_print_dict(*objects, end='\\n', flush=False)"], "print(*objects, file=sys.stdout)": ["print", "pprint(*objects, file=sys.stdout)", "print_tb(*objects, file=sys.stdout)", "errprint(*objects, file=sys.stdout)", "pwrite(*objects, file=sys.stdout)", "spring(*objects, file=sys.stdout)", "print_exc(*objects, file=sys.stdout)", "print_form(*objects, file=sys.stdout)", "init(*objects, file=sys.stdout)", "pinv(*objects, file=sys.stdout)", "hermint(*objects, file=sys.stdout)", "_pprint_seq(*objects, file=sys.stdout)", "_print_dict(*objects, file=sys.stdout)", "print_list(*objects, file=sys.stdout)", "_safe_print(*objects, file=sys.stdout)"], "print(*objects, flush=False)": ["print", "print(*objects, flush=True)", "pprint(*objects, flush=False)", "print_tb(*objects, flush=False)", "errprint(*objects, flush=False)", "pwrite(*objects, flush=False)", "spring(*objects, flush=False)", "print_exc(*objects, flush=False)", "print_form(*objects, flush=False)", "init(*objects, flush=False)", "pinv(*objects, flush=False)", "hermint(*objects, flush=False)", "_pprint_seq(*objects, flush=False)", "_print_dict(*objects, flush=False)", "print_list(*objects, flush=False)"], "print(*objects, sep=' ')": ["print", "print(*objects, sep=1)", "pprint(*objects, sep=' ')", "print_tb(*objects, sep=' ')", "errprint(*objects, sep=' ')", "pwrite(*objects, sep=' ')", "spring(*objects, sep=' ')", "print_exc(*objects, sep=' ')", "print_form(*objects, sep=' ')", "init(*objects, sep=' ')", "pinv(*objects, sep=' ')", "hermint(*objects, sep=' ')", "_pprint_seq(*objects, sep=' ')", "_print_dict(*objects, sep=' ')", "print_list(*objects, sep=' ')"], "print(*objects, sep=' ', end='\\n')": ["print", "print(*objects, sep=1, end=1.0)", "pprint(*objects, sep=' ', end='\\n')", "print_tb(*objects, sep=' ', end='\\n')", "errprint(*objects, sep=' ', end='\\n')", "pwrite(*objects, sep=' ', end='\\n')", "spring(*objects, sep=' ', end='\\n')", "print_exc(*objects, sep=' ', end='\\n')", "print_form(*objects, sep=' ', end='\\n')", "init(*objects, sep=' ', end='\\n')", "pinv(*objects, sep=' ', end='\\n')", "hermint(*objects, sep=' ', end='\\n')", "_pprint_seq(*objects, sep=' ', end='\\n')", "_print_dict(*objects, sep=' ', end='\\n')", "print_list(*objects, sep=' ', end='\\n')"], "print(*objects, sep=' ', file=sys.stdout)": ["print", "print(*objects, sep=1, file=sys.stdout)", "pprint(*objects, sep=' ', file=sys.stdout)", "print_tb(*objects, sep=' ', file=sys.stdout)", "errprint(*objects, sep=' ', file=sys.stdout)", "pwrite(*objects, sep=' ', file=sys.stdout)", "spring(*objects, sep=' ', file=sys.stdout)", "print_exc(*objects, sep=' ', file=sys.stdout)", "print_form(*objects, sep=' ', file=sys.stdout)", "init(*objects, sep=' ', file=sys.stdout)", "pinv(*objects, sep=' ', file=sys.stdout)", "hermint(*objects, sep=' ', file=sys.stdout)", "_pprint_seq(*objects, sep=' ', file=sys.stdout)", "_print_dict(*objects, sep=' ', file=sys.stdout)", "print_list(*objects, sep=' ', file=sys.stdout)"], "print(*objects, sep=' ', flush=False)": ["print", "print(*objects, sep=' ', flush=True)", "print(*objects, sep=1, flush=False)", "pprint(*objects, sep=' ', flush=False)", "print_tb(*objects, sep=' ', flush=False)", "errprint(*objects, sep=' ', flush=False)", "pwrite(*objects, sep=' ', flush=False)", "spring(*objects, sep=' ', flush=False)", "print_exc(*objects, sep=' ', flush=False)", "print_form(*objects, sep=' ', flush=False)", "init(*objects, sep=' ', flush=False)", "pinv(*objects, sep=' ', flush=False)", "hermint(*objects, sep=' ', flush=False)", "_pprint_seq(*objects, sep=' ', flush=False)", "_print_dict(*objects, sep=' ', flush=False)"], "process.authkey": ["process.authkey"], "process.close()": ["close"], "process.communicate()": ["communicate"], "process.communicate(input=None)": ["communicate", "process.communicate(input=None)"], "process.daemon": ["process.daemon"], "process.exitcode": ["process.exitcode"], "process.is_alive()": ["is_alive"], "process.join()": ["join"], "process.join(timeout)": ["join"], "process.kill()": ["kill"], "process.returncode": ["process.returncode"], "process.run()": ["run", "process.round()", "process.round_()", "process.around()", "process.triu()", "process._group()", "process.unique()", "process._unique1d()", "process.urlencode()", "process.lru_cache()", "process._sum_()", "process._sum()", "process._isna_array()", "process._construction_repr()", "process.open()"], "process.send_signal(signal)": ["send_signal"], "process.sentinel": ["process.sentinel"], "process.start()": ["start"], "process.stdin": ["process.stdin"], "process.stdout": ["process.stdout"], "process.terminate()": ["terminate"], "process.wait()": ["wait"], "profile.Profile()": ["Profile"], "profile.Profile(builtins=True)": ["Profile", "profile.Profile(builtins=False)"], "profile.Profile(subcalls=True)": ["Profile", "profile.Profile(subcalls=False)"], "profile.Profile(timer=None)": ["Profile", "profile.Profile(timer=None)"], "profile.Profile(timer=None, builtins=True)": ["Profile", "profile.Profile(timer=None, builtins=False)"], "profile.Profile(timer=None, subcalls=True)": ["Profile", "profile.Profile(timer=None, subcalls=False)"], "profile.Profile(timer=None, timeunit=0.0)": ["Profile", "profile.Profile(timer=None, timeunit=0.0)", "profile.Profile(timer=None, timeunit='0.0')"], "profile.Profile(timeunit=0.0)": ["Profile", "profile.Profile(timeunit='0.0')"], "profile.Profile(timeunit=0.0, builtins=True)": ["Profile", "profile.Profile(timeunit=0.0, builtins=False)", "profile.Profile(timeunit='0.0', builtins=True)"], "profile.create_stats()": ["create_stats"], "profile.print_stats()": ["print_stats"], "profile.print_stats(sort=-1)": ["print_stats", "profile.print_stats(sort=(- '1'))"], "profile.run(cmd)": ["run", "profile.round(cmd)", "profile.round_(cmd)", "profile.around(cmd)", "profile.triu(cmd)", "profile._group(cmd)", "profile.unique(cmd)", "profile._unique1d(cmd)", "profile.urlencode(cmd)", "profile.lru_cache(cmd)", "profile._sum_(cmd)", "profile._sum(cmd)", "profile._isna_array(cmd)", "profile._construction_repr(cmd)", "profile.open(cmd)"], "profile.run(command)": ["run", "profile.round(command)", "profile.round_(command)", "profile.around(command)", "profile.triu(command)", "profile._group(command)", "profile.unique(command)", "profile._unique1d(command)", "profile.urlencode(command)", "profile.lru_cache(command)", "profile._sum_(command)", "profile._sum(command)", "profile._isna_array(command)", "profile._construction_repr(command)", "profile.open(command)"], "profile.run(command, filename=None)": ["run", "profile.run(command, filename=None)", "profile.round(command, filename=None)", "profile.round_(command, filename=None)", "profile.around(command, filename=None)", "profile.triu(command, filename=None)", "profile._group(command, filename=None)", "profile.unique(command, filename=None)", "profile._unique1d(command, filename=None)", "profile.urlencode(command, filename=None)", "profile.lru_cache(command, filename=None)", "profile._sum_(command, filename=None)", "profile._sum(command, filename=None)", "profile._isna_array(command, filename=None)", "profile._construction_repr(command, filename=None)"], "profile.run(command, filename=None, sort=-1)": ["run", "profile.run(command, filename=None, sort=(- 1))", "profile.run(command, filename=None, sort=(- '1'))", "profile.round(command, filename=None, sort=(- 1))", "profile.round_(command, filename=None, sort=(- 1))", "profile.around(command, filename=None, sort=(- 1))", "profile.triu(command, filename=None, sort=(- 1))", "profile._group(command, filename=None, sort=(- 1))", "profile.unique(command, filename=None, sort=(- 1))", "profile._unique1d(command, filename=None, sort=(- 1))", "profile.urlencode(command, filename=None, sort=(- 1))", "profile.lru_cache(command, filename=None, sort=(- 1))", "profile._sum_(command, filename=None, sort=(- 1))", "profile._sum(command, filename=None, sort=(- 1))", "profile._isna_array(command, filename=None, sort=(- 1))"], "profile.run(command, sort=-1)": ["run", "profile.run(command, sort=(- '1'))", "profile.round(command, sort=(- 1))", "profile.round_(command, sort=(- 1))", "profile.around(command, sort=(- 1))", "profile.triu(command, sort=(- 1))", "profile._group(command, sort=(- 1))", "profile.unique(command, sort=(- 1))", "profile._unique1d(command, sort=(- 1))", "profile.urlencode(command, sort=(- 1))", "profile.lru_cache(command, sort=(- 1))", "profile._sum_(command, sort=(- 1))", "profile._sum(command, sort=(- 1))", "profile._isna_array(command, sort=(- 1))", "profile._construction_repr(command, sort=(- 1))"], "profile.runcall(func, *args, **kwargs)": ["runcall"], "profile.runctx(cmd, globals, locals)": ["runctx", "profile.count(cmd, globals, locals)", "profile.rindex(cmd, globals, locals)", "profile.run_2to3(cmd, globals, locals)", "profile.interact(cmd, globals, locals)", "profile.rpc_sync(cmd, globals, locals)", "profile.findtext(cmd, globals, locals)", "profile.rfft(cmd, globals, locals)", "profile.warn(cmd, globals, locals)", "profile._warn(cmd, globals, locals)", "profile.sort(cmd, globals, locals)", "profile.index(cmd, globals, locals)", "profile.rfftn(cmd, globals, locals)", "profile.quote(cmd, globals, locals)", "profile.rfft2(cmd, globals, locals)"], "profile.runctx(command, globals, locals)": ["runctx", "profile.count(command, globals, locals)", "profile.rindex(command, globals, locals)", "profile.run_2to3(command, globals, locals)", "profile.interact(command, globals, locals)", "profile.rpc_sync(command, globals, locals)", "profile.findtext(command, globals, locals)", "profile.rfft(command, globals, locals)", "profile.warn(command, globals, locals)", "profile._warn(command, globals, locals)", "profile.sort(command, globals, locals)", "profile.index(command, globals, locals)", "profile.rfftn(command, globals, locals)", "profile.quote(command, globals, locals)", "profile.rfft2(command, globals, locals)"], "profile.runctx(command, globals, locals, filename=None, sort=-1)": ["runctx", "profile.runctx(command, globals, locals, filename=None, sort=(- 1))", "profile.runctx(command, globals, locals, filename=None, sort=(- '1'))", "profile.count(command, globals, locals, filename=None, sort=(- 1))", "profile.rindex(command, globals, locals, filename=None, sort=(- 1))", "profile.run_2to3(command, globals, locals, filename=None, sort=(- 1))", "profile.interact(command, globals, locals, filename=None, sort=(- 1))", "profile.rpc_sync(command, globals, locals, filename=None, sort=(- 1))", "profile.findtext(command, globals, locals, filename=None, sort=(- 1))", "profile.rfft(command, globals, locals, filename=None, sort=(- 1))", "profile.warn(command, globals, locals, filename=None, sort=(- 1))", "profile._warn(command, globals, locals, filename=None, sort=(- 1))", "profile.sort(command, globals, locals, filename=None, sort=(- 1))", "profile.index(command, globals, locals, filename=None, sort=(- 1))", "profile.rfftn(command, globals, locals, filename=None, sort=(- 1))"], "profile.runctx(command, globals, locals, sort=-1)": ["runctx", "profile.runctx(command, globals, locals, sort=(- '1'))", "profile.count(command, globals, locals, sort=(- 1))", "profile.rindex(command, globals, locals, sort=(- 1))", "profile.run_2to3(command, globals, locals, sort=(- 1))", "profile.interact(command, globals, locals, sort=(- 1))", "profile.rpc_sync(command, globals, locals, sort=(- 1))", "profile.findtext(command, globals, locals, sort=(- 1))", "profile.rfft(command, globals, locals, sort=(- 1))", "profile.warn(command, globals, locals, sort=(- 1))", "profile._warn(command, globals, locals, sort=(- 1))", "profile.sort(command, globals, locals, sort=(- 1))", "profile.index(command, globals, locals, sort=(- 1))", "profile.rfftn(command, globals, locals, sort=(- 1))", "profile.quote(command, globals, locals, sort=(- 1))"], "property()": ["property", "openpty()", "generate_property()", "setpriority()", "getpriority()", "_popen()", "upper()", "popen()", "get_property_stubs()", "power()", "_type_repr()", "processor()", "pprint()", "_export()", "copper()"], "property(doc=None)": ["property", "property(doc=None)", "openpty(doc=None)", "generate_property(doc=None)", "setpriority(doc=None)", "getpriority(doc=None)", "_popen(doc=None)", "upper(doc=None)", "popen(doc=None)", "get_property_stubs(doc=None)", "power(doc=None)", "_type_repr(doc=None)", "processor(doc=None)", "pprint(doc=None)", "_export(doc=None)"], "property(fdel=None)": ["property", "property(fdel=None)", "openpty(fdel=None)", "generate_property(fdel=None)", "setpriority(fdel=None)", "getpriority(fdel=None)", "_popen(fdel=None)", "upper(fdel=None)", "popen(fdel=None)", "get_property_stubs(fdel=None)", "power(fdel=None)", "_type_repr(fdel=None)", "processor(fdel=None)", "pprint(fdel=None)", "_export(fdel=None)"], "property(fget=None)": ["property", "property(fget=None)", "openpty(fget=None)", "generate_property(fget=None)", "setpriority(fget=None)", "getpriority(fget=None)", "_popen(fget=None)", "upper(fget=None)", "popen(fget=None)", "get_property_stubs(fget=None)", "power(fget=None)", "_type_repr(fget=None)", "processor(fget=None)", "pprint(fget=None)", "_export(fget=None)"], "property(fget=None, doc=None)": ["property", "property(fget=None, doc=None)", "openpty(fget=None, doc=None)", "generate_property(fget=None, doc=None)", "setpriority(fget=None, doc=None)", "getpriority(fget=None, doc=None)", "_popen(fget=None, doc=None)", "upper(fget=None, doc=None)", "popen(fget=None, doc=None)", "get_property_stubs(fget=None, doc=None)", "power(fget=None, doc=None)", "_type_repr(fget=None, doc=None)", "processor(fget=None, doc=None)", "pprint(fget=None, doc=None)", "_export(fget=None, doc=None)"], "property(fget=None, fdel=None)": ["property", "property(fget=None, fdel=None)", "openpty(fget=None, fdel=None)", "generate_property(fget=None, fdel=None)", "setpriority(fget=None, fdel=None)", "getpriority(fget=None, fdel=None)", "_popen(fget=None, fdel=None)", "upper(fget=None, fdel=None)", "popen(fget=None, fdel=None)", "get_property_stubs(fget=None, fdel=None)", "power(fget=None, fdel=None)", "_type_repr(fget=None, fdel=None)", "processor(fget=None, fdel=None)", "pprint(fget=None, fdel=None)", "_export(fget=None, fdel=None)"], "property(fget=None, fset=None)": ["property", "property(fget=None, fset=None)", "openpty(fget=None, fset=None)", "generate_property(fget=None, fset=None)", "setpriority(fget=None, fset=None)", "getpriority(fget=None, fset=None)", "_popen(fget=None, fset=None)", "upper(fget=None, fset=None)", "popen(fget=None, fset=None)", "get_property_stubs(fget=None, fset=None)", "power(fget=None, fset=None)", "_type_repr(fget=None, fset=None)", "processor(fget=None, fset=None)", "pprint(fget=None, fset=None)", "_export(fget=None, fset=None)"], "property(fset=None)": ["property", "property(fset=None)", "openpty(fset=None)", "generate_property(fset=None)", "setpriority(fset=None)", "getpriority(fset=None)", "_popen(fset=None)", "upper(fset=None)", "popen(fset=None)", "get_property_stubs(fset=None)", "power(fset=None)", "_type_repr(fset=None)", "processor(fset=None)", "pprint(fset=None)", "_export(fset=None)"], "property(fset=None, doc=None)": ["property", "property(fset=None, doc=None)", "openpty(fset=None, doc=None)", "generate_property(fset=None, doc=None)", "setpriority(fset=None, doc=None)", "getpriority(fset=None, doc=None)", "_popen(fset=None, doc=None)", "upper(fset=None, doc=None)", "popen(fset=None, doc=None)", "get_property_stubs(fset=None, doc=None)", "power(fset=None, doc=None)", "_type_repr(fset=None, doc=None)", "processor(fset=None, doc=None)", "pprint(fset=None, doc=None)", "_export(fset=None, doc=None)"], "property(fset=None, fdel=None)": ["property", "property(fset=None, fdel=None)", "openpty(fset=None, fdel=None)", "generate_property(fset=None, fdel=None)", "setpriority(fset=None, fdel=None)", "getpriority(fset=None, fdel=None)", "_popen(fset=None, fdel=None)", "upper(fset=None, fdel=None)", "popen(fset=None, fdel=None)", "get_property_stubs(fset=None, fdel=None)", "power(fset=None, fdel=None)", "_type_repr(fset=None, fdel=None)", "processor(fset=None, fdel=None)", "pprint(fset=None, fdel=None)", "_export(fset=None, fdel=None)"], "protocol_error.headers": ["protocol_error.headers"], "protocol_error.url": ["protocol_error.url"], "prototype(address)": ["prototype"], "prototype(callable)": ["prototype"], "prototype(func_spec)": ["prototype"], "prototype(func_spec, paramflags)": ["prototype"], "prototype(vtbl_index, name)": ["prototype"], "prototype(vtbl_index, name, paramflags, iid)": ["prototype"], "proxy[key]": ["proxy[key]"], "pstats.Stats(*filenames or profile)": ["Stats", "pstats.Stats(*(filenames and profile))"], "pstats.Stats(*filenames or profile, stream=sys.stdout)": ["Stats", "pstats.Stats(*(filenames and profile), stream=sys.stdout)"], "pty.fork()": ["fork", "pty._fork()", "pty.forkpty()", "pty.fork_rng()", "pty.or_()", "pty.qform()", "pty.__or__()", "pty.format()", "pty._format()", "pty._after_fork()", "pty.xor()", "pty.ror_()", "pty._fr1()", "pty.foo()", "pty.__ior__()"], "pty.openpty()": ["openpty", "pty.openfp()", "pty._open()", "pty.open()", "pty._popen()", "pty.penup()", "pty.popen()", "pty.fdopen()", "pty.pen()", "pty.try_compile_fn()", "pty.urlopen()", "pty._moments()", "pty.forkpty()", "pty.Comment()", "pty._complexType()"], "pty.spawn(argv)": ["spawn", "pty.start_processes(argv)", "pty.save(argv)", "pty.lu_unpack(argv)", "pty.disp(argv)", "pty.open(argv)", "pty.mean(argv)", "pty.stat(argv)", "pty.axhspan(argv)", "pty.axvspan(argv)", "pty.spawnv(argv)", "pty.spawnl(argv)", "pty.stack(argv)", "pty.split(argv)", "pty.print_last(argv)"], "pty.spawn(argv, master_read)": ["spawn", "pty.start_processes(argv, master_read)", "pty.save(argv, master_read)", "pty.lu_unpack(argv, master_read)", "pty.disp(argv, master_read)", "pty.open(argv, master_read)", "pty.mean(argv, master_read)", "pty.stat(argv, master_read)", "pty.axhspan(argv, master_read)", "pty.axvspan(argv, master_read)", "pty.spawnv(argv, master_read)", "pty.spawnl(argv, master_read)", "pty.stack(argv, master_read)", "pty.split(argv, master_read)", "pty.print_last(argv, master_read)"], "pty.spawn(argv, master_read, stdin_read)": ["spawn", "pty.start_processes(argv, master_read, stdin_read)", "pty.save(argv, master_read, stdin_read)", "pty.lu_unpack(argv, master_read, stdin_read)", "pty.disp(argv, master_read, stdin_read)", "pty.open(argv, master_read, stdin_read)", "pty.mean(argv, master_read, stdin_read)", "pty.stat(argv, master_read, stdin_read)", "pty.axhspan(argv, master_read, stdin_read)", "pty.axvspan(argv, master_read, stdin_read)", "pty.spawnv(argv, master_read, stdin_read)", "pty.spawnl(argv, master_read, stdin_read)", "pty.stack(argv, master_read, stdin_read)", "pty.split(argv, master_read, stdin_read)", "pty.print_last(argv, master_read, stdin_read)"], "pwd.getpwall()": ["getpwall"], "pwd.getpwnam(name)": ["getpwnam"], "pwd.getpwuid(uid)": ["getpwuid"], "py_compile.PyCompileError": ["py_compile.PyCompileError"], "py_compile.PycInvalidationMode": ["py_compile.PycInvalidationMode"], "py_compile.compile(file)": ["compile", "py_compile.as_completed(file)", "py_compile.circle(file)", "py_compile.compress_nd(file)", "py_compile.open(file)", "py_compile.get_cmap(file)", "py_compile.get_default_compiler(file)", "py_compile._get_compressor(file)", "py_compile.fromfile(file)", "py_compile.splitlines(file)", "py_compile.filled(file)", "py_compile.openfp(file)", "py_compile.escape(file)", "py_compile.encode(file)", "py_compile.Client(file)"], "py_compile.compile(file, cfile=None, dfile=None)": ["compile", "py_compile.compile(file, cfile=None, dfile=None)", "py_compile.as_completed(file, cfile=None, dfile=None)", "py_compile.circle(file, cfile=None, dfile=None)", "py_compile.compress_nd(file, cfile=None, dfile=None)", "py_compile.open(file, cfile=None, dfile=None)", "py_compile.get_cmap(file, cfile=None, dfile=None)", "py_compile.get_default_compiler(file, cfile=None, dfile=None)", "py_compile._get_compressor(file, cfile=None, dfile=None)", "py_compile.fromfile(file, cfile=None, dfile=None)", "py_compile.splitlines(file, cfile=None, dfile=None)", "py_compile.filled(file, cfile=None, dfile=None)", "py_compile.openfp(file, cfile=None, dfile=None)", "py_compile.escape(file, cfile=None, dfile=None)", "py_compile.encode(file, cfile=None, dfile=None)"], "py_compile.compile(file, cfile=None, doraise=False)": ["compile", "py_compile.compile(file, cfile=None, doraise=True)", "py_compile.as_completed(file, cfile=None, doraise=False)", "py_compile.circle(file, cfile=None, doraise=False)", "py_compile.compress_nd(file, cfile=None, doraise=False)", "py_compile.open(file, cfile=None, doraise=False)", "py_compile.get_cmap(file, cfile=None, doraise=False)", "py_compile.get_default_compiler(file, cfile=None, doraise=False)", "py_compile._get_compressor(file, cfile=None, doraise=False)", "py_compile.fromfile(file, cfile=None, doraise=False)", "py_compile.splitlines(file, cfile=None, doraise=False)", "py_compile.filled(file, cfile=None, doraise=False)", "py_compile.openfp(file, cfile=None, doraise=False)", "py_compile.escape(file, cfile=None, doraise=False)", "py_compile.encode(file, cfile=None, doraise=False)"], "py_compile.compile(file, cfile=None, optimize=-1)": ["compile", "py_compile.compile(file, cfile=None, optimize=(- 1))", "py_compile.compile(file, cfile=None, optimize=(- '1'))", "py_compile.as_completed(file, cfile=None, optimize=(- 1))", "py_compile.circle(file, cfile=None, optimize=(- 1))", "py_compile.compress_nd(file, cfile=None, optimize=(- 1))", "py_compile.open(file, cfile=None, optimize=(- 1))", "py_compile.get_cmap(file, cfile=None, optimize=(- 1))", "py_compile.get_default_compiler(file, cfile=None, optimize=(- 1))", "py_compile._get_compressor(file, cfile=None, optimize=(- 1))", "py_compile.fromfile(file, cfile=None, optimize=(- 1))", "py_compile.splitlines(file, cfile=None, optimize=(- 1))", "py_compile.filled(file, cfile=None, optimize=(- 1))", "py_compile.openfp(file, cfile=None, optimize=(- 1))", "py_compile.escape(file, cfile=None, optimize=(- 1))"], "py_compile.compile(file, dfile=None)": ["compile", "py_compile.compile(file, dfile=None)", "py_compile.as_completed(file, dfile=None)", "py_compile.circle(file, dfile=None)", "py_compile.compress_nd(file, dfile=None)", "py_compile.open(file, dfile=None)", "py_compile.get_cmap(file, dfile=None)", "py_compile.get_default_compiler(file, dfile=None)", "py_compile._get_compressor(file, dfile=None)", "py_compile.fromfile(file, dfile=None)", "py_compile.splitlines(file, dfile=None)", "py_compile.filled(file, dfile=None)", "py_compile.openfp(file, dfile=None)", "py_compile.escape(file, dfile=None)", "py_compile.encode(file, dfile=None)"], "py_compile.compile(file, doraise=False)": ["compile", "py_compile.compile(file, doraise=True)", "py_compile.as_completed(file, doraise=False)", "py_compile.circle(file, doraise=False)", "py_compile.compress_nd(file, doraise=False)", "py_compile.open(file, doraise=False)", "py_compile.get_cmap(file, doraise=False)", "py_compile.get_default_compiler(file, doraise=False)", "py_compile._get_compressor(file, doraise=False)", "py_compile.fromfile(file, doraise=False)", "py_compile.splitlines(file, doraise=False)", "py_compile.filled(file, doraise=False)", "py_compile.openfp(file, doraise=False)", "py_compile.escape(file, doraise=False)", "py_compile.encode(file, doraise=False)"], "py_compile.compile(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)": ["compile", "py_compile.as_completed(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.circle(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.compress_nd(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.open(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.get_cmap(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.get_default_compiler(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile._get_compressor(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.fromfile(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.splitlines(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.filled(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.openfp(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.escape(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.encode(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)", "py_compile.Client(file, invalidation_mode=PycInvalidationMode.TIMESTAMP)"], "py_compile.compile(file, optimize=-1)": ["compile", "py_compile.compile(file, optimize=(- '1'))", "py_compile.as_completed(file, optimize=(- 1))", "py_compile.circle(file, optimize=(- 1))", "py_compile.compress_nd(file, optimize=(- 1))", "py_compile.open(file, optimize=(- 1))", "py_compile.get_cmap(file, optimize=(- 1))", "py_compile.get_default_compiler(file, optimize=(- 1))", "py_compile._get_compressor(file, optimize=(- 1))", "py_compile.fromfile(file, optimize=(- 1))", "py_compile.splitlines(file, optimize=(- 1))", "py_compile.filled(file, optimize=(- 1))", "py_compile.openfp(file, optimize=(- 1))", "py_compile.escape(file, optimize=(- 1))", "py_compile.encode(file, optimize=(- 1))"], "py_compile.main()": ["main", "py_compile._nanargminmax()", "py_compile.maybe_infer_ndim()", "py_compile._time_to_micros()", "py_compile.find_stack_level()", "py_compile.count_empty_vals()", "py_compile.length_of_indexer()", "py_compile.ensure_python_int()", "py_compile._validate_skipfooter_arg()", "py_compile._excel2num()", "py_compile._generate_range_overflow_safe_signed()", "py_compile._generate_range_overflow_safe()", "py_compile.count_not_none()", "py_compile._dtype_to_stata_type()", "py_compile._dtype_to_stata_type_117()"], "py_compile.main(args=None)": ["main", "py_compile.main(args=None)", "py_compile._nanargminmax(args=None)", "py_compile.maybe_infer_ndim(args=None)", "py_compile._time_to_micros(args=None)", "py_compile.find_stack_level(args=None)", "py_compile.count_empty_vals(args=None)", "py_compile.length_of_indexer(args=None)", "py_compile.ensure_python_int(args=None)", "py_compile._validate_skipfooter_arg(args=None)", "py_compile._excel2num(args=None)", "py_compile._generate_range_overflow_safe_signed(args=None)", "py_compile._generate_range_overflow_safe(args=None)", "py_compile.count_not_none(args=None)", "py_compile._dtype_to_stata_type(args=None)"], "py_zip_file.writepy(pathname)": ["writepy"], "py_zip_file.writepy(pathname, basename='')": ["writepy", "py_zip_file.writepy(pathname, basename=0)"], "py_zip_file.writepy(pathname, basename='', filterfunc=None)": ["writepy", "py_zip_file.writepy(pathname, basename='', filterfunc=None)", "py_zip_file.writepy(pathname, basename=0.0, filterfunc=None)"], "py_zip_file.writepy(pathname, filterfunc=None)": ["writepy", "py_zip_file.writepy(pathname, filterfunc=None)"], "pyc_invalidation_mode.CHECKED_HASH": ["pyc_invalidation_mode.CHECKED_HASH"], "pyc_invalidation_mode.TIMESTAMP": ["pyc_invalidation_mode.TIMESTAMP"], "pyc_invalidation_mode.UNCHECKED_HASH": ["pyc_invalidation_mode.UNCHECKED_HASH"], "pyclbr.readmodule(module)": ["readmodule", "pyclbr.readmodule_ex(module)", "pyclbr.getmodule(module)", "pyclbr.find_module(module)", "pyclbr.remove(module)", "pyclbr.import_module(module)", "pyclbr.run_module(module)", "pyclbr._run_module_code(module)", "pyclbr._spec_from_module(module)", "pyclbr.charmap_decode(module)", "pyclbr.imread(module)", "pyclbr.enable(module)", "pyclbr.encode(module)", "pyclbr.all_reduce(module)", "pyclbr.decode(module)"], "pyclbr.readmodule(module, path=None)": ["readmodule", "pyclbr.readmodule(module, path=None)", "pyclbr.readmodule_ex(module, path=None)", "pyclbr.getmodule(module, path=None)", "pyclbr.find_module(module, path=None)", "pyclbr.remove(module, path=None)", "pyclbr.import_module(module, path=None)", "pyclbr.run_module(module, path=None)", "pyclbr._run_module_code(module, path=None)", "pyclbr._spec_from_module(module, path=None)", "pyclbr.charmap_decode(module, path=None)", "pyclbr.imread(module, path=None)", "pyclbr.enable(module, path=None)", "pyclbr.encode(module, path=None)", "pyclbr.all_reduce(module, path=None)"], "pyclbr.readmodule_ex(module)": ["readmodule_ex", "pyclbr.readmodule(module)", "pyclbr.getmodule(module)", "pyclbr.find_module(module)", "pyclbr._run_module_code(module)", "pyclbr.import_module(module)", "pyclbr.remove(module)", "pyclbr.readbuffer_encode(module)", "pyclbr.run_module(module)", "pyclbr.all_reduce(module)", "pyclbr.reduce_add(module)", "pyclbr.create_default_context(module)", "pyclbr.read_hdf(module)", "pyclbr.read_feather(module)", "pyclbr.upsample_nearest(module)"], "pyclbr.readmodule_ex(module, path=None)": ["readmodule_ex", "pyclbr.readmodule_ex(module, path=None)", "pyclbr.readmodule(module, path=None)", "pyclbr.getmodule(module, path=None)", "pyclbr.find_module(module, path=None)", "pyclbr._run_module_code(module, path=None)", "pyclbr.import_module(module, path=None)", "pyclbr.remove(module, path=None)", "pyclbr.readbuffer_encode(module, path=None)", "pyclbr.run_module(module, path=None)", "pyclbr.all_reduce(module, path=None)", "pyclbr.reduce_add(module, path=None)", "pyclbr.create_default_context(module, path=None)", "pyclbr.read_hdf(module, path=None)", "pyclbr.read_feather(module, path=None)"], "queue.Empty": ["queue.Empty"], "queue.Full": ["queue.Full"], "queue.LifoQueue(maxsize=0)": ["LifoQueue", "queue.LifoQueue(maxsize='0')"], "queue.PriorityQueue()": ["PriorityQueue"], "queue.PriorityQueue(maxsize=0)": ["PriorityQueue", "queue.PriorityQueue(maxsize='0')"], "queue.Queue(maxsize=0)": ["Queue", "queue.Queue(maxsize='0')"], "queue.SimpleQueue": ["queue.SimpleQueue"], "queue.cancel_join_thread()": ["cancel_join_thread"], "queue.close()": ["close"], "queue.full()": ["full"], "queue.get()": ["get"], "queue.get(block)": ["get"], "queue.get(block, timeout)": ["get"], "queue.get_nowait()": ["get_nowait"], "queue.join()": ["join"], "queue.join_thread()": ["join_thread"], "queue.maxsize": ["queue.maxsize"], "queue.put(item)": ["put"], "queue.put(obj)": ["put"], "queue.put(obj, block)": ["put"], "queue.put(obj, block, timeout)": ["put"], "queue.put_nowait(item)": ["put_nowait"], "queue.put_nowait(obj)": ["put_nowait"], "queue.qsize()": ["qsize"], "queue_handler.emit(record)": ["emit"], "queue_handler.enqueue(record)": ["enqueue"], "queue_handler.prepare(record)": ["prepare"], "queue_listener.__init__()": ["__init__"], "queue_listener.__init__(level=NOTSET)": ["__init__"], "queue_listener.addFilter(filter)": ["addFilter"], "queue_listener.addHandler(hdlr)": ["addHandler"], "queue_listener.close()": ["close"], "queue_listener.createLock()": ["createLock"], "queue_listener.debug(msg, *args, **kwargs)": ["debug"], "queue_listener.dequeue(block)": ["dequeue"], "queue_listener.emit(record)": ["emit"], "queue_listener.enqueue_sentinel()": ["enqueue_sentinel"], "queue_listener.error(msg, *args, **kwargs)": ["error"], "queue_listener.filter(record)": ["filter"], "queue_listener.findCaller()": ["findCaller"], "queue_listener.flush()": ["flush"], "queue_listener.format(record)": ["format"], "queue_listener.getChild(suffix)": ["getChild"], "queue_listener.handle(record)": ["handle"], "queue_listener.hasHandlers()": ["hasHandlers"], "queue_listener.info(msg, *args, **kwargs)": ["info"], "queue_listener.isEnabledFor(level)": ["isEnabledFor"], "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info)": ["makeRecord"], "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, extra=None)": ["makeRecord", "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, extra=None)"], "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)": ["makeRecord", "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, func=None)"], "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, sinfo=None)": ["makeRecord", "queue_listener.makeRecord(name, level, fn, lno, msg, args, exc_info, sinfo=None)"], "queue_listener.prepare(record)": ["prepare"], "queue_listener.propagate": ["queue_listener.propagate"], "queue_listener.removeFilter(filter)": ["removeFilter"], "queue_listener.removeHandler(hdlr)": ["removeHandler"], "queue_listener.setFormatter(fmt)": ["setFormatter"], "queue_listener.setLevel(level)": ["setLevel"], "queue_listener.start()": ["start"], "queue_listener.stop()": ["stop"], "quit()": ["quit"], "quit(code=None)": ["quit", "quit(code=None)"], "quopri.decode(input, output)": ["decode", "quopri.encode(input, output)", "quopri._decode_line(input, output)", "quopri.ascii_decode(input, output)", "quopri.b64encode(input, output)", "quopri.escape_decode(input, output)", "quopri.charmap_decode(input, output)", "quopri.latin_1_decode(input, output)", "quopri.cond(input, output)", "quopri.utf_8_encode(input, output)", "quopri.ascii_encode(input, output)", "quopri.hook_encoded(input, output)", "quopri.utf_7_encode(input, output)", "quopri.escape_encode(input, output)", "quopri.show_code(input, output)"], "quopri.decode(input, output, header=False)": ["decode", "quopri.decode(input, output, header=True)", "quopri.encode(input, output, header=False)", "quopri._decode_line(input, output, header=False)", "quopri.ascii_decode(input, output, header=False)", "quopri.b64encode(input, output, header=False)", "quopri.escape_decode(input, output, header=False)", "quopri.charmap_decode(input, output, header=False)", "quopri.latin_1_decode(input, output, header=False)", "quopri.cond(input, output, header=False)", "quopri.utf_8_encode(input, output, header=False)", "quopri.ascii_encode(input, output, header=False)", "quopri.hook_encoded(input, output, header=False)", "quopri.utf_7_encode(input, output, header=False)", "quopri.escape_encode(input, output, header=False)"], "quopri.decodestring(s)": ["decodestring", "quopri.encodestring(s)", "quopri._encodestring(s)", "quopri.tril_indices(s)", "quopri.triu_indices(s)", "quopri._declstringlit_match(s)", "quopri.b16decode(s)", "quopri.b32decode(s)", "quopri.a85decode(s)", "quopri.decompress(s)", "quopri.chebtrim(s)", "quopri.urlencode(s)", "quopri.a85encode(s)", "quopri.hermetrim(s)", "quopri.triu_indices_from(s)"], "quopri.decodestring(s, header=False)": ["decodestring", "quopri.decodestring(s, header=True)", "quopri.encodestring(s, header=False)", "quopri._encodestring(s, header=False)", "quopri.tril_indices(s, header=False)", "quopri.triu_indices(s, header=False)", "quopri._declstringlit_match(s, header=False)", "quopri.b16decode(s, header=False)", "quopri.b32decode(s, header=False)", "quopri.a85decode(s, header=False)", "quopri.decompress(s, header=False)", "quopri.chebtrim(s, header=False)", "quopri.urlencode(s, header=False)", "quopri.a85encode(s, header=False)", "quopri.hermetrim(s, header=False)"], "quopri.encode(input, output, quotetabs, header=False)": ["encode", "quopri.encode(input, output, quotetabs, header=True)", "quopri.decode(input, output, quotetabs, header=False)", "quopri.b64encode(input, output, quotetabs, header=False)", "quopri.utf_8_encode(input, output, quotetabs, header=False)", "quopri.ascii_encode(input, output, quotetabs, header=False)", "quopri.hook_encoded(input, output, quotetabs, header=False)", "quopri.utf_7_encode(input, output, quotetabs, header=False)", "quopri.escape_encode(input, output, quotetabs, header=False)", "quopri.charmap_encode(input, output, quotetabs, header=False)", "quopri.encode_rfc2231(input, output, quotetabs, header=False)", "quopri.latin_1_encode(input, output, quotetabs, header=False)", "quopri.cond(input, output, quotetabs, header=False)", "quopri._decode_line(input, output, quotetabs, header=False)", "quopri.ascii_decode(input, output, quotetabs, header=False)"], "quopri.encodestring(s)": ["encodestring", "quopri._encodestring(s)", "quopri.decodestring(s)", "quopri.a85encode(s)", "quopri.b85encode(s)", "quopri.chebtrim(s)", "quopri.b16decode(s)", "quopri.hermetrim(s)", "quopri.triu_indices_from(s)", "quopri.tril_indices_from(s)", "quopri._construction_repr(s)", "quopri.a85decode(s)", "quopri.body_line_iterator(s)", "quopri._get_option(s)", "quopri._genops(s)"], "quopri.encodestring(s, header=False)": ["encodestring", "quopri.encodestring(s, header=True)", "quopri._encodestring(s, header=False)", "quopri.decodestring(s, header=False)", "quopri.a85encode(s, header=False)", "quopri.b85encode(s, header=False)", "quopri.chebtrim(s, header=False)", "quopri.b16decode(s, header=False)", "quopri.hermetrim(s, header=False)", "quopri.triu_indices_from(s, header=False)", "quopri.tril_indices_from(s, header=False)", "quopri._construction_repr(s, header=False)", "quopri.a85decode(s, header=False)", "quopri.body_line_iterator(s, header=False)", "quopri._get_option(s, header=False)"], "quopri.encodestring(s, quotetabs=False)": ["encodestring", "quopri.encodestring(s, quotetabs=True)", "quopri._encodestring(s, quotetabs=False)", "quopri.decodestring(s, quotetabs=False)", "quopri.a85encode(s, quotetabs=False)", "quopri.b85encode(s, quotetabs=False)", "quopri.chebtrim(s, quotetabs=False)", "quopri.b16decode(s, quotetabs=False)", "quopri.hermetrim(s, quotetabs=False)", "quopri.triu_indices_from(s, quotetabs=False)", "quopri.tril_indices_from(s, quotetabs=False)", "quopri._construction_repr(s, quotetabs=False)", "quopri.a85decode(s, quotetabs=False)", "quopri.body_line_iterator(s, quotetabs=False)", "quopri._get_option(s, quotetabs=False)"], "quopri.encodestring(s, quotetabs=False, header=False)": ["encodestring", "quopri.encodestring(s, quotetabs=True, header=True)", "quopri._encodestring(s, quotetabs=False, header=False)", "quopri.decodestring(s, quotetabs=False, header=False)", "quopri.a85encode(s, quotetabs=False, header=False)", "quopri.b85encode(s, quotetabs=False, header=False)", "quopri.chebtrim(s, quotetabs=False, header=False)", "quopri.b16decode(s, quotetabs=False, header=False)", "quopri.hermetrim(s, quotetabs=False, header=False)", "quopri.triu_indices_from(s, quotetabs=False, header=False)", "quopri.tril_indices_from(s, quotetabs=False, header=False)", "quopri._construction_repr(s, quotetabs=False, header=False)", "quopri.a85decode(s, quotetabs=False, header=False)", "quopri.body_line_iterator(s, quotetabs=False, header=False)", "quopri._get_option(s, quotetabs=False, header=False)"], "r_lock.acquire()": ["acquire"], "r_lock.acquire(block=True)": ["acquire", "r_lock.acquire(block=False)"], "r_lock.acquire(blocking=True)": ["acquire", "r_lock.acquire(blocking=False)"], "r_lock.acquire(blocking=True, timeout=-1)": ["acquire", "r_lock.acquire(blocking=False, timeout=(- 1))", "r_lock.acquire(blocking=True, timeout=(- '1'))"], "r_lock.acquire(timeout=-1)": ["acquire", "r_lock.acquire(timeout=(- '1'))"], "r_lock.acquire(timeout=None)": ["acquire", "r_lock.acquire(timeout=None)"], "r_lock.release()": ["release"], "radio_button_group.add(name, x, y, width, height, text)": ["add"], "radio_button_group.add(name, x, y, width, height, text, value=None)": ["add", "radio_button_group.add(name, x, y, width, height, text, value=None)"], "random.Random()": ["Random"], "random.Random(seed)": ["Random"], "random.SystemRandom()": ["SystemRandom"], "random.SystemRandom(seed)": ["SystemRandom"], "random.betavariate(alpha, beta)": ["betavariate"], "random.choice(seq)": ["choice"], "random.choices(population)": ["choices"], "random.choices(population, cum_weights=None)": ["choices", "random.choices(population, cum_weights=None)"], "random.choices(population, cum_weights=None, k=1)": ["choices", "random.choices(population, cum_weights=None, k=1)", "random.choices(population, cum_weights=None, k='1')"], "random.choices(population, k=1)": ["choices", "random.choices(population, k='1')"], "random.choices(population, weights=None)": ["choices", "random.choices(population, weights=None)"], "random.choices(population, weights=None, cum_weights=None)": ["choices", "random.choices(population, weights=None, cum_weights=None)"], "random.choices(population, weights=None, cum_weights=None, k=1)": ["choices", "random.choices(population, weights=None, cum_weights=None, k=1)", "random.choices(population, weights=None, cum_weights=None, k='1')"], "random.choices(population, weights=None, k=1)": ["choices", "random.choices(population, weights=None, k=1)", "random.choices(population, weights=None, k='1')"], "random.expovariate(lambd)": ["expovariate"], "random.gammavariate(alpha, beta)": ["gammavariate"], "random.gauss(mu, sigma)": ["gauss"], "random.getrandbits(k)": ["getrandbits"], "random.getstate()": ["getstate"], "random.lognormvariate(mu, sigma)": ["lognormvariate"], "random.normalvariate(mu, sigma)": ["normalvariate"], "random.paretovariate(alpha)": ["paretovariate"], "random.randint(a, b)": ["randint"], "random.random()": ["random"], "random.randrange(start, stop)": ["randrange"], "random.randrange(start, stop, step)": ["randrange"], "random.randrange(stop)": ["randrange"], "random.sample(population, k)": ["sample"], "random.seed()": ["seed", "random.seed_all()", "random.manual_seed()", "random.save()", "random.manual_seed_all()", "random.reduce()", "random.method()", "random.is_text()", "random.assert_index_equal()", "random.set_test_mode()", "random.set_use_numba()", "random.set_rng_state()", "random.assert_allclose()", "random.set_device()", "random._store_test_result()"], "random.seed(a=None)": ["seed", "random.seed(a=None)", "random.seed_all(a=None)", "random.manual_seed(a=None)", "random.save(a=None)", "random.manual_seed_all(a=None)", "random.reduce(a=None)", "random.method(a=None)", "random.is_text(a=None)", "random.assert_index_equal(a=None)", "random.set_test_mode(a=None)", "random.set_use_numba(a=None)", "random.set_rng_state(a=None)", "random.assert_allclose(a=None)", "random.set_device(a=None)"], "random.seed(a=None, version=2)": ["seed", "random.seed(a=None, version=2)", "random.seed(a=None, version='2')", "random.seed_all(a=None, version=2)", "random.manual_seed(a=None, version=2)", "random.save(a=None, version=2)", "random.manual_seed_all(a=None, version=2)", "random.reduce(a=None, version=2)", "random.method(a=None, version=2)", "random.is_text(a=None, version=2)", "random.assert_index_equal(a=None, version=2)", "random.set_test_mode(a=None, version=2)", "random.set_use_numba(a=None, version=2)", "random.set_rng_state(a=None, version=2)", "random.assert_allclose(a=None, version=2)"], "random.seed(version=2)": ["seed", "random.seed(version='2')", "random.seed_all(version=2)", "random.manual_seed(version=2)", "random.save(version=2)", "random.manual_seed_all(version=2)", "random.reduce(version=2)", "random.method(version=2)", "random.is_text(version=2)", "random.assert_index_equal(version=2)", "random.set_test_mode(version=2)", "random.set_use_numba(version=2)", "random.set_rng_state(version=2)", "random.assert_allclose(version=2)", "random.set_device(version=2)"], "random.setstate(state)": ["setstate"], "random.shuffle(x)": ["shuffle"], "random.shuffle(x, random)": ["shuffle"], "random.triangular(low, high, mode)": ["triangular"], "random.uniform(a, b)": ["uniform"], "random.vonmisesvariate(mu, kappa)": ["vonmisesvariate"], "random.weibullvariate(alpha, beta)": ["weibullvariate"], "range(start, stop)": ["range", "angle(start, stop)", "nange(start, stop)", "range_pop(start, stop)", "rand_(start, stop)", "fake_range(start, stop)", "monthrange(start, stop)", "closerange(start, stop)", "average(start, stop)", "range_push(start, stop)", "variance(start, stop)", "transjugate(start, stop)", "merge(start, stop)", "ravel(start, stop)", "purge(start, stop)"], "range(start, stop, step)": ["range", "angle(start, stop, step)", "nange(start, stop, step)", "range_pop(start, stop, step)", "rand_(start, stop, step)", "fake_range(start, stop, step)", "monthrange(start, stop, step)", "closerange(start, stop, step)", "average(start, stop, step)", "range_push(start, stop, step)", "variance(start, stop, step)", "transjugate(start, stop, step)", "merge(start, stop, step)", "ravel(start, stop, step)", "purge(start, stop, step)"], "range(stop)": ["range", "angle(stop)", "nange(stop)", "range_pop(stop)", "rand_(stop)", "fake_range(stop)", "monthrange(stop)", "closerange(stop)", "average(stop)", "range_push(stop)", "variance(stop)", "transjugate(stop)", "merge(stop)", "ravel(stop)", "purge(stop)"], "range.start": ["range.start"], "raw_config_parser.add_section(section)": ["add_section"], "raw_config_parser.set(section, option, value)": ["set"], "raw_io_base.read()": ["read"], "raw_io_base.read(size=-1)": ["read", "raw_io_base.read(size=(- '1'))"], "raw_io_base.readall()": ["readall"], "raw_io_base.readinto(b)": ["readinto"], "raw_io_base.write(b)": ["write"], "re.A": ["re.A"], "re.ASCII": ["re.ASCII"], "re.DOTALL": ["re.DOTALL"], "re.I": ["re.I"], "re.IGNORECASE": ["re.IGNORECASE"], "re.LOCALE": ["re.LOCALE"], "re.M": ["re.M"], "re.MULTILINE": ["re.MULTILINE"], "re.S": ["re.S"], "re.VERBOSE": ["re.VERBOSE"], "re.X": ["re.X"], "re.compile(pattern)": ["compile", "re.as_completed(pattern)", "re.circle(pattern)", "re.compress_nd(pattern)", "re.open(pattern)", "re.get_cmap(pattern)", "re.get_default_compiler(pattern)", "re._get_compressor(pattern)", "re.fromfile(pattern)", "re.splitlines(pattern)", "re.filled(pattern)", "re.openfp(pattern)", "re.escape(pattern)", "re.encode(pattern)", "re.Client(pattern)"], "re.compile(pattern, flags=0)": ["compile", "re.compile(pattern, flags='0')", "re.as_completed(pattern, flags=0)", "re.circle(pattern, flags=0)", "re.compress_nd(pattern, flags=0)", "re.open(pattern, flags=0)", "re.get_cmap(pattern, flags=0)", "re.get_default_compiler(pattern, flags=0)", "re._get_compressor(pattern, flags=0)", "re.fromfile(pattern, flags=0)", "re.splitlines(pattern, flags=0)", "re.filled(pattern, flags=0)", "re.openfp(pattern, flags=0)", "re.escape(pattern, flags=0)", "re.encode(pattern, flags=0)"], "re.error(msg)": ["error"], "re.error(msg, pattern=None, pos=None)": ["error", "re.error(msg, pattern=None, pos=None)"], "re.error(msg, pos=None)": ["error", "re.error(msg, pos=None)"], "re.escape(pattern)": ["escape", "re.guess_type(pattern)", "re.get_locales(pattern)", "re.measure(pattern)", "re.compress(pattern)", "re.testfile(pattern)", "re.signature(pattern)", "re.onrelease(pattern)", "re._format_exc(pattern)", "re.format_exc(pattern)", "re._describe_option(pattern)", "re.socketpair(pattern)", "re.spawn(pattern)", "re.getframeinfo(pattern)", "re.browse(pattern)"], "re.findall(pattern, string)": ["findall", "re.find(pattern, string)", "re.install(pattern, string)", "re._all(pattern, string)", "re.all(pattern, string)", "re.full(pattern, string)", "re.findtext(pattern, string)", "re.iterfind(pattern, string)", "re.fwalk(pattern, string)", "re.nsmallest(pattern, string)", "re._find_spec(pattern, string)", "re.isend(pattern, string)", "re._raw_fftnd(pattern, string)", "re.ondrag(pattern, string)", "re.indent(pattern, string)"], "re.findall(pattern, string, flags=0)": ["findall", "re.findall(pattern, string, flags='0')", "re.find(pattern, string, flags=0)", "re.install(pattern, string, flags=0)", "re._all(pattern, string, flags=0)", "re.all(pattern, string, flags=0)", "re.full(pattern, string, flags=0)", "re.findtext(pattern, string, flags=0)", "re.iterfind(pattern, string, flags=0)", "re.fwalk(pattern, string, flags=0)", "re.nsmallest(pattern, string, flags=0)", "re._find_spec(pattern, string, flags=0)", "re.isend(pattern, string, flags=0)", "re._raw_fftnd(pattern, string, flags=0)", "re.ondrag(pattern, string, flags=0)"], "re.finditer(pattern, string)": ["finditer", "re.indices(pattern, string)", "re.find(pattern, string)", "re.index(pattern, string)", "re.rfind(pattern, string)", "re.vander(pattern, string)", "re.rindex(pattern, string)", "re.findall(pattern, string)", "re.intersect1d(pattern, string)", "re.figimage(pattern, string)", "re.endswith(pattern, string)", "re.mask_indices(pattern, string)", "re.simplefilter(pattern, string)", "re.digitize(pattern, string)", "re.in1d(pattern, string)"], "re.finditer(pattern, string, flags=0)": ["finditer", "re.finditer(pattern, string, flags='0')", "re.indices(pattern, string, flags=0)", "re.find(pattern, string, flags=0)", "re.index(pattern, string, flags=0)", "re.rfind(pattern, string, flags=0)", "re.vander(pattern, string, flags=0)", "re.rindex(pattern, string, flags=0)", "re.findall(pattern, string, flags=0)", "re.intersect1d(pattern, string, flags=0)", "re.figimage(pattern, string, flags=0)", "re.endswith(pattern, string, flags=0)", "re.mask_indices(pattern, string, flags=0)", "re.simplefilter(pattern, string, flags=0)", "re.digitize(pattern, string, flags=0)"], "re.fullmatch(pattern, string)": ["fullmatch", "re.match(pattern, string)", "re.format(pattern, string)", "re._format(pattern, string)", "re.einsum_path(pattern, string)", "re.formatdate(pattern, string)", "re.search(pattern, string)", "re.unpack_from(pattern, string)", "re.gather(pattern, string)", "re.findall(pattern, string)", "re.compile_path(pattern, string)", "re.format_string(pattern, string)", "re.concat_compat(pattern, string)", "re._lu_with_infos(pattern, string)", "re.subplots(pattern, string)"], "re.fullmatch(pattern, string, flags=0)": ["fullmatch", "re.fullmatch(pattern, string, flags='0')", "re.match(pattern, string, flags=0)", "re.format(pattern, string, flags=0)", "re._format(pattern, string, flags=0)", "re.einsum_path(pattern, string, flags=0)", "re.formatdate(pattern, string, flags=0)", "re.search(pattern, string, flags=0)", "re.unpack_from(pattern, string, flags=0)", "re.gather(pattern, string, flags=0)", "re.findall(pattern, string, flags=0)", "re.compile_path(pattern, string, flags=0)", "re.format_string(pattern, string, flags=0)", "re.concat_compat(pattern, string, flags=0)", "re._lu_with_infos(pattern, string, flags=0)"], "re.match(pattern, string)": ["match", "re.fullmatch(pattern, string)", "re.search(pattern, string)", "re.format(pattern, string)", "re.gather(pattern, string)", "re._format(pattern, string)", "re.einsum_path(pattern, string)", "re.compile_path(pattern, string)", "re.concat_compat(pattern, string)", "re.startswith(pattern, string)", "re.formatdate(pattern, string)", "re.trace(pattern, string)", "re.unpack_from(pattern, string)", "re.matrix_rank(pattern, string)", "re.create(pattern, string)"], "re.match(pattern, string, flags=0)": ["match", "re.match(pattern, string, flags='0')", "re.fullmatch(pattern, string, flags=0)", "re.search(pattern, string, flags=0)", "re.format(pattern, string, flags=0)", "re.gather(pattern, string, flags=0)", "re._format(pattern, string, flags=0)", "re.einsum_path(pattern, string, flags=0)", "re.compile_path(pattern, string, flags=0)", "re.concat_compat(pattern, string, flags=0)", "re.startswith(pattern, string, flags=0)", "re.formatdate(pattern, string, flags=0)", "re.trace(pattern, string, flags=0)", "re.unpack_from(pattern, string, flags=0)", "re.matrix_rank(pattern, string, flags=0)"], "re.purge()": ["purge", "re.range_push()", "re.merge()", "re.pause()", "re.pread()", "re._parse()", "re.range()", "re.pager()", "re.parse()", "re.usage()", "re.__ge__()", "re.range_pop()", "re.ge()", "re.pu()", "re.pwrite()"], "re.search(pattern, string)": ["search", "re.match(pattern, string)", "re.startswith(pattern, string)", "re.socketpair(pattern, string)", "re.select(pattern, string)", "re.scatter(pattern, string)", "re.setxor1d(pattern, string)", "re._as_pairs(pattern, string)", "re.fullmatch(pattern, string)", "re.base_repr(pattern, string)", "re.setitimer(pattern, string)", "re._structure(pattern, string)", "re.all_reduce(pattern, string)", "re.leaky_relu(pattern, string)", "re.merge(pattern, string)"], "re.search(pattern, string, flags=0)": ["search", "re.search(pattern, string, flags='0')", "re.match(pattern, string, flags=0)", "re.startswith(pattern, string, flags=0)", "re.socketpair(pattern, string, flags=0)", "re.select(pattern, string, flags=0)", "re.scatter(pattern, string, flags=0)", "re.setxor1d(pattern, string, flags=0)", "re._as_pairs(pattern, string, flags=0)", "re.fullmatch(pattern, string, flags=0)", "re.base_repr(pattern, string, flags=0)", "re.setitimer(pattern, string, flags=0)", "re._structure(pattern, string, flags=0)", "re.all_reduce(pattern, string, flags=0)", "re.leaky_relu(pattern, string, flags=0)"], "re.split(pattern, string)": ["split", "re.subplots(pattern, string)", "re.array_split(pattern, string)", "re.simplefilter(pattern, string)", "re.replicate(pattern, string)", "re.script(pattern, string)", "re.select(pattern, string)", "re.symlink(pattern, string)", "re.endswith(pattern, string)", "re._as_pairs(pattern, string)", "re.isin(pattern, string)", "re.pinv(pattern, string)", "re._lu_with_infos(pattern, string)", "re.setitimer(pattern, string)", "re.startswith(pattern, string)"], "re.split(pattern, string, flags=0)": ["split", "re.split(pattern, string, flags='0')", "re.subplots(pattern, string, flags=0)", "re.array_split(pattern, string, flags=0)", "re.simplefilter(pattern, string, flags=0)", "re.replicate(pattern, string, flags=0)", "re.script(pattern, string, flags=0)", "re.select(pattern, string, flags=0)", "re.symlink(pattern, string, flags=0)", "re.endswith(pattern, string, flags=0)", "re._as_pairs(pattern, string, flags=0)", "re.isin(pattern, string, flags=0)", "re.pinv(pattern, string, flags=0)", "re._lu_with_infos(pattern, string, flags=0)", "re.setitimer(pattern, string, flags=0)"], "re.split(pattern, string, maxsplit=0)": ["split", "re.split(pattern, string, maxsplit='0')", "re.subplots(pattern, string, maxsplit=0)", "re.array_split(pattern, string, maxsplit=0)", "re.simplefilter(pattern, string, maxsplit=0)", "re.replicate(pattern, string, maxsplit=0)", "re.script(pattern, string, maxsplit=0)", "re.select(pattern, string, maxsplit=0)", "re.symlink(pattern, string, maxsplit=0)", "re.endswith(pattern, string, maxsplit=0)", "re._as_pairs(pattern, string, maxsplit=0)", "re.isin(pattern, string, maxsplit=0)", "re.pinv(pattern, string, maxsplit=0)", "re._lu_with_infos(pattern, string, maxsplit=0)", "re.setitimer(pattern, string, maxsplit=0)"], "re.split(pattern, string, maxsplit=0, flags=0)": ["split", "re.split(pattern, string, maxsplit='0', flags='0')", "re.subplots(pattern, string, maxsplit=0, flags=0)", "re.array_split(pattern, string, maxsplit=0, flags=0)", "re.simplefilter(pattern, string, maxsplit=0, flags=0)", "re.replicate(pattern, string, maxsplit=0, flags=0)", "re.script(pattern, string, maxsplit=0, flags=0)", "re.select(pattern, string, maxsplit=0, flags=0)", "re.symlink(pattern, string, maxsplit=0, flags=0)", "re.endswith(pattern, string, maxsplit=0, flags=0)", "re._as_pairs(pattern, string, maxsplit=0, flags=0)", "re.isin(pattern, string, maxsplit=0, flags=0)", "re.pinv(pattern, string, maxsplit=0, flags=0)", "re._lu_with_infos(pattern, string, maxsplit=0, flags=0)", "re.setitimer(pattern, string, maxsplit=0, flags=0)"], "re.sub(pattern, repl, string)": ["sub", "re.__sub__(pattern, repl, string)", "re._sub(pattern, repl, string)", "re.subn(pattern, repl, string)", "re.isub(pattern, repl, string)", "re.rsub(pattern, repl, string)", "re.__isub__(pattern, repl, string)", "re._subx(pattern, repl, string)", "re.subst(pattern, repl, string)", "re.legsub(pattern, repl, string)", "re.lagsub(pattern, repl, string)", "re._sum_(pattern, repl, string)", "re._sum(pattern, repl, string)", "re.sum(pattern, repl, string)", "re.chebsub(pattern, repl, string)"], "re.sub(pattern, repl, string, count=0)": ["sub", "re.sub(pattern, repl, string, count='0')", "re.__sub__(pattern, repl, string, count=0)", "re._sub(pattern, repl, string, count=0)", "re.subn(pattern, repl, string, count=0)", "re.isub(pattern, repl, string, count=0)", "re.rsub(pattern, repl, string, count=0)", "re.__isub__(pattern, repl, string, count=0)", "re._subx(pattern, repl, string, count=0)", "re.subst(pattern, repl, string, count=0)", "re.legsub(pattern, repl, string, count=0)", "re.lagsub(pattern, repl, string, count=0)", "re._sum_(pattern, repl, string, count=0)", "re._sum(pattern, repl, string, count=0)", "re.sum(pattern, repl, string, count=0)"], "re.sub(pattern, repl, string, count=0, flags=0)": ["sub", "re.sub(pattern, repl, string, count='0', flags='0')", "re.__sub__(pattern, repl, string, count=0, flags=0)", "re._sub(pattern, repl, string, count=0, flags=0)", "re.subn(pattern, repl, string, count=0, flags=0)", "re.isub(pattern, repl, string, count=0, flags=0)", "re.rsub(pattern, repl, string, count=0, flags=0)", "re.__isub__(pattern, repl, string, count=0, flags=0)", "re._subx(pattern, repl, string, count=0, flags=0)", "re.subst(pattern, repl, string, count=0, flags=0)", "re.legsub(pattern, repl, string, count=0, flags=0)", "re.lagsub(pattern, repl, string, count=0, flags=0)", "re._sum_(pattern, repl, string, count=0, flags=0)", "re._sum(pattern, repl, string, count=0, flags=0)", "re.sum(pattern, repl, string, count=0, flags=0)"], "re.sub(pattern, repl, string, flags=0)": ["sub", "re.sub(pattern, repl, string, flags='0')", "re.__sub__(pattern, repl, string, flags=0)", "re._sub(pattern, repl, string, flags=0)", "re.subn(pattern, repl, string, flags=0)", "re.isub(pattern, repl, string, flags=0)", "re.rsub(pattern, repl, string, flags=0)", "re.__isub__(pattern, repl, string, flags=0)", "re._subx(pattern, repl, string, flags=0)", "re.subst(pattern, repl, string, flags=0)", "re.legsub(pattern, repl, string, flags=0)", "re.lagsub(pattern, repl, string, flags=0)", "re._sum_(pattern, repl, string, flags=0)", "re._sum(pattern, repl, string, flags=0)", "re.sum(pattern, repl, string, flags=0)"], "re.subn(pattern, repl, string)": ["subn", "re.sub(pattern, repl, string)", "re.sum(pattern, repl, string)", "re.send(pattern, repl, string)", "re.isin(pattern, repl, string)", "re.isend(pattern, repl, string)", "re.spawn(pattern, repl, string)", "re.hessian(pattern, repl, string)", "re._spawn_nt(pattern, repl, string)", "re.currency(pattern, repl, string)", "re.jacobian(pattern, repl, string)", "re._unique1d(pattern, repl, string)", "re._structure(pattern, repl, string)", "re.svd(pattern, repl, string)", "re.run_module(pattern, repl, string)"], "re.subn(pattern, repl, string, count=0)": ["subn", "re.subn(pattern, repl, string, count='0')", "re.sub(pattern, repl, string, count=0)", "re.sum(pattern, repl, string, count=0)", "re.send(pattern, repl, string, count=0)", "re.isin(pattern, repl, string, count=0)", "re.isend(pattern, repl, string, count=0)", "re.spawn(pattern, repl, string, count=0)", "re.hessian(pattern, repl, string, count=0)", "re._spawn_nt(pattern, repl, string, count=0)", "re.currency(pattern, repl, string, count=0)", "re.jacobian(pattern, repl, string, count=0)", "re._unique1d(pattern, repl, string, count=0)", "re._structure(pattern, repl, string, count=0)", "re.svd(pattern, repl, string, count=0)"], "re.subn(pattern, repl, string, count=0, flags=0)": ["subn", "re.subn(pattern, repl, string, count='0', flags='0')", "re.sub(pattern, repl, string, count=0, flags=0)", "re.sum(pattern, repl, string, count=0, flags=0)", "re.send(pattern, repl, string, count=0, flags=0)", "re.isin(pattern, repl, string, count=0, flags=0)", "re.isend(pattern, repl, string, count=0, flags=0)", "re.spawn(pattern, repl, string, count=0, flags=0)", "re.hessian(pattern, repl, string, count=0, flags=0)", "re._spawn_nt(pattern, repl, string, count=0, flags=0)", "re.currency(pattern, repl, string, count=0, flags=0)", "re.jacobian(pattern, repl, string, count=0, flags=0)", "re._unique1d(pattern, repl, string, count=0, flags=0)", "re._structure(pattern, repl, string, count=0, flags=0)", "re.svd(pattern, repl, string, count=0, flags=0)"], "re.subn(pattern, repl, string, flags=0)": ["subn", "re.subn(pattern, repl, string, flags='0')", "re.sub(pattern, repl, string, flags=0)", "re.sum(pattern, repl, string, flags=0)", "re.send(pattern, repl, string, flags=0)", "re.isin(pattern, repl, string, flags=0)", "re.isend(pattern, repl, string, flags=0)", "re.spawn(pattern, repl, string, flags=0)", "re.hessian(pattern, repl, string, flags=0)", "re._spawn_nt(pattern, repl, string, flags=0)", "re.currency(pattern, repl, string, flags=0)", "re.jacobian(pattern, repl, string, flags=0)", "re._unique1d(pattern, repl, string, flags=0)", "re._structure(pattern, repl, string, flags=0)", "re.svd(pattern, repl, string, flags=0)"], "readline.add_history(line)": ["add_history"], "readline.append_history_file(nelements)": ["append_history_file"], "readline.append_history_file(nelements, filename)": ["append_history_file"], "readline.clear_history()": ["clear_history"], "readline.get_begidx()": ["get_begidx"], "readline.get_completer()": ["get_completer"], "readline.get_completer_delims()": ["get_completer_delims"], "readline.get_completion_type()": ["get_completion_type"], "readline.get_current_history_length()": ["get_current_history_length"], "readline.get_endidx()": ["get_endidx"], "readline.get_history_item(index)": ["get_history_item"], "readline.get_history_length()": ["get_history_length"], "readline.get_line_buffer()": ["get_line_buffer"], "readline.insert_text(string)": ["insert_text"], "readline.parse_and_bind(string)": ["parse_and_bind"], "readline.read_history_file()": ["read_history_file"], "readline.read_history_file(filename)": ["read_history_file"], "readline.read_init_file()": ["read_init_file"], "readline.read_init_file(filename)": ["read_init_file"], "readline.redisplay()": ["redisplay"], "readline.remove_history_item(pos)": ["remove_history_item"], "readline.replace_history_item(pos, line)": ["replace_history_item"], "readline.set_auto_history(enabled)": ["set_auto_history"], "readline.set_completer(function)": ["set_completer"], "readline.set_completer_delims(string)": ["set_completer_delims"], "readline.set_completion_display_matches_hook(function)": ["set_completion_display_matches_hook"], "readline.set_history_length(length)": ["set_history_length"], "readline.set_pre_input_hook(function)": ["set_pre_input_hook"], "readline.set_startup_hook(function)": ["set_startup_hook"], "readline.write_history_file()": ["write_history_file"], "readline.write_history_file(filename)": ["write_history_file"], "ref.__callback__": ["ref.__callback__"], "repr(object)": ["repr", "__repr__(object)", "_repr(object)", "prepare(object)", "_repr_fn(object)", "saferepr(object)", "_preparse(object)", "_replacer(object)", "_type_repr(object)", "base_repr(object)", "_safe_repr(object)", "safe_repr(object)", "_export(object)", "repeat(object)", "_parser(object)"], "reprlib.Repr": ["reprlib.Repr"], "reprlib.repr(obj)": ["repr"], "resource.RLIMIT_AS": ["resource.RLIMIT_AS"], "resource.RLIMIT_CORE": ["resource.RLIMIT_CORE"], "resource.RLIMIT_CPU": ["resource.RLIMIT_CPU"], "resource.RLIMIT_DATA": ["resource.RLIMIT_DATA"], "resource.RLIMIT_FSIZE": ["resource.RLIMIT_FSIZE"], "resource.RLIMIT_MEMLOCK": ["resource.RLIMIT_MEMLOCK"], "resource.RLIMIT_MSGQUEUE": ["resource.RLIMIT_MSGQUEUE"], "resource.RLIMIT_NICE": ["resource.RLIMIT_NICE"], "resource.RLIMIT_NOFILE": ["resource.RLIMIT_NOFILE"], "resource.RLIMIT_NPROC": ["resource.RLIMIT_NPROC"], "resource.RLIMIT_RSS": ["resource.RLIMIT_RSS"], "resource.RLIMIT_RTTIME": ["resource.RLIMIT_RTTIME"], "resource.RLIMIT_SBSIZE": ["resource.RLIMIT_SBSIZE"], "resource.RLIMIT_STACK": ["resource.RLIMIT_STACK"], "resource.RLIMIT_SWAP": ["resource.RLIMIT_SWAP"], "resource.RLIMIT_VMEM": ["resource.RLIMIT_VMEM"], "resource.RLIM_INFINITY": ["resource.RLIM_INFINITY"], "resource.RUSAGE_BOTH": ["resource.RUSAGE_BOTH"], "resource.RUSAGE_CHILDREN": ["resource.RUSAGE_CHILDREN"], "resource.RUSAGE_SELF": ["resource.RUSAGE_SELF"], "resource.RUSAGE_THREAD": ["resource.RUSAGE_THREAD"], "resource.error": ["resource.error"], "resource.getpagesize()": ["getpagesize"], "resource.getrlimit(resource)": ["getrlimit"], "resource.getrusage(who)": ["getrusage"], "resource.prlimit(pid, resource, limits)": ["prlimit"], "resource.setrlimit(resource, limits)": ["setrlimit"], "resource_loader.get_data(path)": ["get_data"], "resource_reader.contents()": ["contents"], "resource_reader.is_resource(name)": ["is_resource"], "resource_reader.open_resource(resource)": ["open_resource"], "resource_reader.resource_path(resource)": ["resource_path"], "reversed(seq)": ["reversed", "release(seq)", "removedirs(seq)", "masked_greater(seq)", "remove_tree(seq)", "reset(seq)", "_preparse(seq)", "removeResult(seq)", "reduce_event(seq)", "_safe_repr(seq)", "onrelease(seq)", "safe_repr(seq)", "merge_ordered(seq)", "_set_reuseport(seq)", "hermevander2d(seq)"], "robot_file_parser.can_fetch(useragent, url)": ["can_fetch"], "robot_file_parser.crawl_delay(useragent)": ["crawl_delay"], "robot_file_parser.modified()": ["modified"], "robot_file_parser.mtime()": ["mtime"], "robot_file_parser.parse(lines)": ["parse"], "robot_file_parser.read()": ["read"], "robot_file_parser.request_rate(useragent)": ["request_rate"], "robot_file_parser.safe": ["robot_file_parser.safe"], "robot_file_parser.set_url(url)": ["set_url"], "robot_file_parser.unknown": ["robot_file_parser.unknown"], "robot_file_parser.unsafe": ["robot_file_parser.unsafe"], "round(number)": ["round", "round_(number)", "around(number)", "run(number)", "_group(number)", "triu(number)", "triu_indices_from(number)", "tril_indices_from(number)", "ontimer(number)", "resolve(number)", "trimcoef(number)", "writedoc(number)", "_concat_datetime(number)", "broadcast_arrays(number)", "lru_cache(number)"], "round(number, ndigits)": ["round", "round_(number, ndigits)", "around(number, ndigits)", "run(number, ndigits)", "_group(number, ndigits)", "triu(number, ndigits)", "triu_indices_from(number, ndigits)", "tril_indices_from(number, ndigits)", "ontimer(number, ndigits)", "resolve(number, ndigits)", "trimcoef(number, ndigits)", "writedoc(number, ndigits)", "_concat_datetime(number, ndigits)", "broadcast_arrays(number, ndigits)", "lru_cache(number, ndigits)"], "row.keys()": ["keys"], "row.reason": ["row.reason"], "row.verify_message": ["row.verify_message"], "runpy.run_module(mod_name)": ["run_module", "runpy.run_module_suite(mod_name)", "runpy.getmodule(mod_name)", "runpy.readmodule(mod_name)", "runpy.unpack_dual(mod_name)", "runpy.find_module(mod_name)", "runpy._spec_from_module(mod_name)", "runpy.readmodule_ex(mod_name)", "runpy.import_module(mod_name)", "runpy._decode_line(mod_name)", "runpy._run_pip(mod_name)", "runpy._run_module_code(mod_name)", "runpy.utf_32_le_encode(mod_name)", "runpy.run(mod_name)", "runpy.utf_16_le_encode(mod_name)"], "runpy.run_module(mod_name, init_globals=None)": ["run_module", "runpy.run_module(mod_name, init_globals=None)", "runpy.run_module_suite(mod_name, init_globals=None)", "runpy.getmodule(mod_name, init_globals=None)", "runpy.readmodule(mod_name, init_globals=None)", "runpy.unpack_dual(mod_name, init_globals=None)", "runpy.find_module(mod_name, init_globals=None)", "runpy._spec_from_module(mod_name, init_globals=None)", "runpy.readmodule_ex(mod_name, init_globals=None)", "runpy.import_module(mod_name, init_globals=None)", "runpy._decode_line(mod_name, init_globals=None)", "runpy._run_pip(mod_name, init_globals=None)", "runpy._run_module_code(mod_name, init_globals=None)", "runpy.utf_32_le_encode(mod_name, init_globals=None)", "runpy.run(mod_name, init_globals=None)"], "runpy.run_path(file_path)": ["run_path", "runpy._run_pip(file_path)", "runpy.run_2to3(file_path)", "runpy._trilu_dispatcher(file_path)", "runpy._qr_dispatcher(file_path)", "runpy._unique_dispatcher(file_path)", "runpy._unwrap_dispatcher(file_path)", "runpy._dispatcher(file_path)", "runpy._tri_dispatcher(file_path)", "runpy.run(file_path)", "runpy._var_dispatcher(file_path)", "runpy._sum_dispatcher(file_path)", "runpy._require_dispatcher(file_path)", "runpy.relpath(file_path)", "runpy._norm_dispatcher(file_path)"], "save_signals.match_value(self, k, dv, v)": ["match_value"], "save_signals.matches(self, d, **kwargs)": ["matches"], "sax2_dom.expandNode(node)": ["expandNode"], "sax2_dom.getEvent()": ["getEvent"], "scandir.close()": ["close"], "sched.scheduler(delayfunc=time.sleep)": ["scheduler"], "sched.scheduler(timefunc=time.monotonic)": ["scheduler"], "sched.scheduler(timefunc=time.monotonic, delayfunc=time.sleep)": ["scheduler"], "scheduler.cancel(event)": ["cancel"], "scheduler.enter(delay, priority, action)": ["enter"], "scheduler.enter(delay, priority, action, argument=())": ["enter"], "scheduler.enter(delay, priority, action, argument=(), kwargs={})": ["enter"], "scheduler.enter(delay, priority, action, kwargs={})": ["enter"], "scheduler.enterabs(time, priority, action)": ["enterabs"], "scheduler.enterabs(time, priority, action, argument=())": ["enterabs"], "scheduler.enterabs(time, priority, action, argument=(), kwargs={})": ["enterabs"], "scheduler.enterabs(time, priority, action, kwargs={})": ["enterabs"], "scheduler.queue": ["scheduler.queue"], "scheduler.run(blocking=True)": ["run", "scheduler.run(blocking=False)"], "secrets.SystemRandom": ["secrets.SystemRandom"], "secrets.choice(sequence)": ["choice"], "secrets.compare_digest(a, b)": ["compare_digest", "secrets._get_compressor(a, b)", "secrets._compare_grouped_stats(a, b)", "secrets._compress_dispatcher(a, b)", "secrets._get_decompressor(a, b)", "secrets.get_combined_dict(a, b)", "secrets.get_closure(a, b)", "secrets.compress(a, b)", "secrets.compile_dir(a, b)", "secrets.compress_nd(a, b)", "secrets.get_comment(a, b)", "secrets.tile_compat(a, b)", "secrets.get_cmap(a, b)", "secrets.compile_file(a, b)", "secrets.names_compat(a, b)"], "secrets.randbelow(n)": ["randbelow", "secrets.randbool(n)", "secrets.rand_(n)", "secrets.urandom(n)", "secrets._urandom(n)", "secrets._randombytes(n)", "secrets.label(n)", "secrets.ravel(n)", "secrets.rands(n)", "secrets.range(n)", "secrets.bar_label(n)", "secrets.rendezvous(n)", "secrets.vander(n)", "secrets.reload(n)", "secrets.clabel(n)"], "secrets.randbits(k)": ["randbits"], "secrets.token_bytes()": ["token_bytes", "secrets.token_hex()", "secrets.testmod()", "secrets.test()", "secrets.textdomain()", "secrets.listen()", "secrets.askquestion()", "secrets._sys_version()", "secrets.getnode()", "secrets.DocTestSuite()", "secrets.subplot_tool()", "secrets._make_options_dict()", "secrets.iter_modules()", "secrets.token_urlsafe()", "secrets.askyesno()"], "secrets.token_bytes(nbytes=None)": ["token_bytes", "secrets.token_bytes(nbytes=None)", "secrets.token_hex(nbytes=None)", "secrets.testmod(nbytes=None)", "secrets.test(nbytes=None)", "secrets.textdomain(nbytes=None)", "secrets.listen(nbytes=None)", "secrets.askquestion(nbytes=None)", "secrets._sys_version(nbytes=None)", "secrets.getnode(nbytes=None)", "secrets.DocTestSuite(nbytes=None)", "secrets.subplot_tool(nbytes=None)", "secrets._make_options_dict(nbytes=None)", "secrets.iter_modules(nbytes=None)", "secrets.token_urlsafe(nbytes=None)"], "secrets.token_hex()": ["token_hex", "secrets.token_bytes()", "secrets.textdomain()", "secrets.getnode()", "secrets.extract_stack()", "secrets.token_urlsafe()", "secrets.getLogger()", "secrets.set_trace()", "secrets.print_exc()", "secrets.get_worker_info()", "secrets._format_exc()", "secrets.format_exc()", "secrets.checkcache()", "secrets.open_connection()", "secrets.print_exception()"], "secrets.token_hex(nbytes=None)": ["token_hex", "secrets.token_hex(nbytes=None)", "secrets.token_bytes(nbytes=None)", "secrets.textdomain(nbytes=None)", "secrets.getnode(nbytes=None)", "secrets.extract_stack(nbytes=None)", "secrets.token_urlsafe(nbytes=None)", "secrets.getLogger(nbytes=None)", "secrets.set_trace(nbytes=None)", "secrets.print_exc(nbytes=None)", "secrets.get_worker_info(nbytes=None)", "secrets._format_exc(nbytes=None)", "secrets.format_exc(nbytes=None)", "secrets.checkcache(nbytes=None)", "secrets.open_connection(nbytes=None)"], "secrets.token_urlsafe()": ["token_urlsafe", "secrets.turtlesize()", "secrets.register_at_fork()", "secrets.ensure_clean()", "secrets.iter_modules()", "secrets.token_hex()", "secrets.read_json()", "secrets.set_trace()", "secrets.generate_range()", "secrets.token_bytes()", "secrets.get_backend()", "secrets.tracer()", "secrets.get_locales()", "secrets.set_printoptions()", "secrets.validate_map_location()"], "secrets.token_urlsafe(nbytes=None)": ["token_urlsafe", "secrets.token_urlsafe(nbytes=None)", "secrets.turtlesize(nbytes=None)", "secrets.register_at_fork(nbytes=None)", "secrets.ensure_clean(nbytes=None)", "secrets.iter_modules(nbytes=None)", "secrets.token_hex(nbytes=None)", "secrets.read_json(nbytes=None)", "secrets.set_trace(nbytes=None)", "secrets.generate_range(nbytes=None)", "secrets.token_bytes(nbytes=None)", "secrets.get_backend(nbytes=None)", "secrets.tracer(nbytes=None)", "secrets.get_locales(nbytes=None)", "secrets.set_printoptions(nbytes=None)"], "select.PIPE_BUF": ["select.PIPE_BUF"], "select.devpoll()": ["devpoll"], "select.epoll()": ["epoll"], "select.epoll(flags=0)": ["epoll", "select.epoll(flags='0')"], "select.epoll(sizehint=-1)": ["epoll", "select.epoll(sizehint=(- '1'))"], "select.epoll(sizehint=-1, flags=0)": ["epoll", "select.epoll(sizehint=(- '1'), flags='0')"], "select.error": ["select.error"], "select.kevent(ident)": ["kevent"], "select.kevent(ident, data=0)": ["kevent", "select.kevent(ident, data='0')"], "select.kevent(ident, filter=KQ_FILTER_READ)": ["kevent"], "select.kevent(ident, filter=KQ_FILTER_READ, data=0)": ["kevent", "select.kevent(ident, filter=KQ_FILTER_READ, data='0')"], "select.kevent(ident, filter=KQ_FILTER_READ, fflags=0)": ["kevent", "select.kevent(ident, filter=KQ_FILTER_READ, fflags='0')"], "select.kevent(ident, filter=KQ_FILTER_READ, flags=KQ_EV_ADD)": ["kevent"], "select.kevent(ident, filter=KQ_FILTER_READ, udata=0)": ["kevent", "select.kevent(ident, filter=KQ_FILTER_READ, udata='0')"], "select.kevent(ident, udata=0)": ["kevent", "select.kevent(ident, udata='0')"], "select.kqueue()": ["kqueue"], "select.poll()": ["poll"], "select.select(rlist, wlist, xlist)": ["select"], "select.select(rlist, wlist, xlist, timeout)": ["select"], "selector_key.data": ["selector_key.data"], "selectors.BaseSelector": ["selectors.BaseSelector"], "selectors.DefaultSelector": ["selectors.DefaultSelector"], "selectors.PollSelector": ["selectors.PollSelector"], "selectors.SelectSelector": ["selectors.SelectSelector"], "selectors.SelectorKey": ["selectors.SelectorKey"], "semaphore.acquire(blocking=True)": ["acquire", "semaphore.acquire(blocking=False)"], "semaphore.acquire(blocking=True, timeout=None)": ["acquire", "semaphore.acquire(blocking=False, timeout=None)"], "semaphore.acquire(timeout=None)": ["acquire", "semaphore.acquire(timeout=None)"], "semaphore.release()": ["release"], "sequence_matcher.find_longest_match(alo, ahi, blo, bhi)": ["find_longest_match"], "sequence_matcher.get_grouped_opcodes()": ["get_grouped_opcodes"], "sequence_matcher.get_grouped_opcodes(n=3)": ["get_grouped_opcodes", "sequence_matcher.get_grouped_opcodes(n='3')"], "sequence_matcher.get_matching_blocks()": ["get_matching_blocks"], "sequence_matcher.get_opcodes()": ["get_opcodes"], "sequence_matcher.quick_ratio()": ["quick_ratio"], "sequence_matcher.ratio()": ["ratio"], "sequence_matcher.real_quick_ratio()": ["real_quick_ratio"], "sequence_matcher.set_seq1(a)": ["set_seq1"], "sequence_matcher.set_seq2(b)": ["set_seq2"], "sequence_matcher.set_seqs(a, b)": ["set_seqs"], "server.close()": ["close"], "server.is_serving()": ["is_serving"], "server.serve_forever()": ["serve_forever"], "server.sockets": ["server.sockets"], "server.start_serving()": ["start_serving"], "set & other & ...": ["set & other & ..."], "set &= other & ...": ["set &= other & ..."], "set - other - ...": ["set - other - ..."], "set -= other | ...": ["set -= other | ..."], "set < other": ["(set >= other)"], "set <= other": ["(set > other)"], "set > other": ["(set <= other)"], "set >= other": ["(set < other)"], "set ^ other": ["set ^ other"], "set ^= other": ["set ^= other"], "set | other | ...": ["set | other | ..."], "set |= other | ...": ["set |= other | ..."], "set()": ["set", "sety()", "setx()", "seth()", "setp()", "st()", "setup()", "_setup()", "reset()", "_setdef()", "setuid()", "str()", "get()", "setpos()", "jet()"], "set(iterable)": ["set", "sety(iterable)", "setx(iterable)", "seth(iterable)", "setp(iterable)", "st(iterable)", "setup(iterable)", "_setup(iterable)", "reset(iterable)", "_setdef(iterable)", "setuid(iterable)", "str(iterable)", "get(iterable)", "setpos(iterable)", "jet(iterable)"], "set.add(elem)": ["add"], "set.clear()": ["clear"], "set.copy()": ["copy"], "set.difference(*others)": ["difference"], "set.difference_update(*others)": ["difference_update"], "set.discard(elem)": ["discard"], "set.intersection(*others)": ["intersection"], "set.intersection_update(*others)": ["intersection_update"], "set.isdisjoint(other)": ["isdisjoint"], "set.issubset(other)": ["issubset"], "set.issuperset(other)": ["issuperset"], "set.pop()": ["pop"], "set.remove(elem)": ["remove"], "set.symmetric_difference(other)": ["symmetric_difference"], "set.symmetric_difference_update(other)": ["symmetric_difference_update"], "set.union(*others)": ["union"], "set.update(*others)": ["update"], "setattr(object, name, value)": ["setattr", "setxattr(object, name, value)", "__getattr__(object, name, value)", "getxattr(object, name, value)", "listxattr(object, name, value)", "splitattr(object, name, value)", "setastest(object, name, value)", "temp_setattr(object, name, value)", "_stat(object, name, value)", "stat(object, name, value)", "scatter(object, name, value)", "settrace(object, name, value)", "fstat(object, name, value)", "start(object, name, value)", "samestat(object, name, value)"], "shake.digest(length)": ["digest"], "shake.hexdigest(length)": ["hexdigest"], "shape.addcomponent(poly, fill)": ["addcomponent"], "shape.addcomponent(poly, fill, outline=None)": ["addcomponent", "shape.addcomponent(poly, fill, outline=None)"], "shelve.BsdDbShelf(dict)": ["BsdDbShelf"], "shelve.BsdDbShelf(dict, keyencoding='utf-8')": ["BsdDbShelf", "shelve.BsdDbShelf(dict, keyencoding=5.0)"], "shelve.BsdDbShelf(dict, protocol=None)": ["BsdDbShelf", "shelve.BsdDbShelf(dict, protocol=None)"], "shelve.BsdDbShelf(dict, protocol=None, keyencoding='utf-8')": ["BsdDbShelf", "shelve.BsdDbShelf(dict, protocol=None, keyencoding='utf-8')", "shelve.BsdDbShelf(dict, protocol=None, keyencoding=5.0)"], "shelve.BsdDbShelf(dict, writeback=False)": ["BsdDbShelf", "shelve.BsdDbShelf(dict, writeback=True)"], "shelve.DbfilenameShelf(filename)": ["DbfilenameShelf"], "shelve.DbfilenameShelf(filename, flag='c')": ["DbfilenameShelf", "shelve.DbfilenameShelf(filename, flag=1.0)"], "shelve.DbfilenameShelf(filename, flag='c', protocol=None)": ["DbfilenameShelf", "shelve.DbfilenameShelf(filename, flag='c', protocol=None)", "shelve.DbfilenameShelf(filename, flag=1, protocol=None)"], "shelve.Shelf(dict)": ["Shelf"], "shelve.Shelf(dict, keyencoding='utf-8')": ["Shelf", "shelve.Shelf(dict, keyencoding=5)"], "shelve.Shelf(dict, protocol=None)": ["Shelf", "shelve.Shelf(dict, protocol=None)"], "shelve.Shelf(dict, protocol=None, keyencoding='utf-8')": ["Shelf", "shelve.Shelf(dict, protocol=None, keyencoding='utf-8')", "shelve.Shelf(dict, protocol=None, keyencoding=5.0)"], "shelve.Shelf(dict, writeback=False)": ["Shelf", "shelve.Shelf(dict, writeback=True)"], "shelve.Shelf(dict, writeback=False, keyencoding='utf-8')": ["Shelf", "shelve.Shelf(dict, writeback=True, keyencoding='utf-8')", "shelve.Shelf(dict, writeback=False, keyencoding=5)"], "shelve.open(filename)": ["open", "shelve._open(filename)", "shelve.open_latin1(filename)", "shelve.popen(filename)", "shelve.bltn_open(filename)", "shelve.OpenWrapper(filename)", "shelve._builtin_open(filename)", "shelve.urlopen(filename)", "shelve.pie(filename)", "shelve._run_code(filename)", "shelve.compress(filename)", "shelve._popen(filename)", "shelve.byte_compile(filename)", "shelve.boxplot(filename)", "shelve.pen(filename)"], "shelve.open(filename, flag='c')": ["open", "shelve.open(filename, flag=1.0)", "shelve._open(filename, flag='c')", "shelve.open_latin1(filename, flag='c')", "shelve.popen(filename, flag='c')", "shelve.bltn_open(filename, flag='c')", "shelve.OpenWrapper(filename, flag='c')", "shelve._builtin_open(filename, flag='c')", "shelve.urlopen(filename, flag='c')", "shelve.pie(filename, flag='c')", "shelve._run_code(filename, flag='c')", "shelve.compress(filename, flag='c')", "shelve._popen(filename, flag='c')", "shelve.byte_compile(filename, flag='c')", "shelve.boxplot(filename, flag='c')"], "shelve.open(filename, flag='c', protocol=None)": ["open", "shelve.open(filename, flag='c', protocol=None)", "shelve.open(filename, flag=1, protocol=None)", "shelve._open(filename, flag='c', protocol=None)", "shelve.open_latin1(filename, flag='c', protocol=None)", "shelve.popen(filename, flag='c', protocol=None)", "shelve.bltn_open(filename, flag='c', protocol=None)", "shelve.OpenWrapper(filename, flag='c', protocol=None)", "shelve._builtin_open(filename, flag='c', protocol=None)", "shelve.urlopen(filename, flag='c', protocol=None)", "shelve.pie(filename, flag='c', protocol=None)", "shelve._run_code(filename, flag='c', protocol=None)", "shelve.compress(filename, flag='c', protocol=None)", "shelve._popen(filename, flag='c', protocol=None)", "shelve.byte_compile(filename, flag='c', protocol=None)"], "shelve.open(filename, flag='c', writeback=False)": ["open", "shelve.open(filename, flag='c', writeback=True)", "shelve.open(filename, flag=1, writeback=False)", "shelve._open(filename, flag='c', writeback=False)", "shelve.open_latin1(filename, flag='c', writeback=False)", "shelve.popen(filename, flag='c', writeback=False)", "shelve.bltn_open(filename, flag='c', writeback=False)", "shelve.OpenWrapper(filename, flag='c', writeback=False)", "shelve._builtin_open(filename, flag='c', writeback=False)", "shelve.urlopen(filename, flag='c', writeback=False)", "shelve.pie(filename, flag='c', writeback=False)", "shelve._run_code(filename, flag='c', writeback=False)", "shelve.compress(filename, flag='c', writeback=False)", "shelve._popen(filename, flag='c', writeback=False)", "shelve.byte_compile(filename, flag='c', writeback=False)"], "shelve.open(filename, protocol=None)": ["open", "shelve.open(filename, protocol=None)", "shelve._open(filename, protocol=None)", "shelve.open_latin1(filename, protocol=None)", "shelve.popen(filename, protocol=None)", "shelve.bltn_open(filename, protocol=None)", "shelve.OpenWrapper(filename, protocol=None)", "shelve._builtin_open(filename, protocol=None)", "shelve.urlopen(filename, protocol=None)", "shelve.pie(filename, protocol=None)", "shelve._run_code(filename, protocol=None)", "shelve.compress(filename, protocol=None)", "shelve._popen(filename, protocol=None)", "shelve.byte_compile(filename, protocol=None)", "shelve.boxplot(filename, protocol=None)"], "shelve.open(filename, protocol=None, writeback=False)": ["open", "shelve.open(filename, protocol=None, writeback=True)", "shelve._open(filename, protocol=None, writeback=False)", "shelve.open_latin1(filename, protocol=None, writeback=False)", "shelve.popen(filename, protocol=None, writeback=False)", "shelve.bltn_open(filename, protocol=None, writeback=False)", "shelve.OpenWrapper(filename, protocol=None, writeback=False)", "shelve._builtin_open(filename, protocol=None, writeback=False)", "shelve.urlopen(filename, protocol=None, writeback=False)", "shelve.pie(filename, protocol=None, writeback=False)", "shelve._run_code(filename, protocol=None, writeback=False)", "shelve.compress(filename, protocol=None, writeback=False)", "shelve._popen(filename, protocol=None, writeback=False)", "shelve.byte_compile(filename, protocol=None, writeback=False)", "shelve.boxplot(filename, protocol=None, writeback=False)"], "shelve.open(filename, writeback=False)": ["open", "shelve.open(filename, writeback=True)", "shelve._open(filename, writeback=False)", "shelve.open_latin1(filename, writeback=False)", "shelve.popen(filename, writeback=False)", "shelve.bltn_open(filename, writeback=False)", "shelve.OpenWrapper(filename, writeback=False)", "shelve._builtin_open(filename, writeback=False)", "shelve.urlopen(filename, writeback=False)", "shelve.pie(filename, writeback=False)", "shelve._run_code(filename, writeback=False)", "shelve.compress(filename, writeback=False)", "shelve._popen(filename, writeback=False)", "shelve.byte_compile(filename, writeback=False)", "shelve.boxplot(filename, writeback=False)"], "shlex.commenters": ["shlex.commenters"], "shlex.debug": ["shlex.debug"], "shlex.eof": ["shlex.eof"], "shlex.error_leader()": ["error_leader"], "shlex.error_leader(infile=None)": ["error_leader", "shlex.error_leader(infile=None)"], "shlex.error_leader(lineno=None)": ["error_leader", "shlex.error_leader(lineno=None)"], "shlex.escapedquotes": ["shlex.escapedquotes"], "shlex.get_token()": ["get_token"], "shlex.infile": ["shlex.infile"], "shlex.instream": ["shlex.instream"], "shlex.lineno": ["shlex.lineno"], "shlex.pop_source()": ["pop_source"], "shlex.punctuation_chars": ["shlex.punctuation_chars"], "shlex.push_source(newstream)": ["push_source"], "shlex.push_source(newstream, newfile=None)": ["push_source", "shlex.push_source(newstream, newfile=None)"], "shlex.push_token(str)": ["push_token"], "shlex.quote(s)": ["quote", "shlex.quote_from_bytes(s)", "shlex.urlquote_from_bytes(s)", "shlex.quote_plus(s)", "shlex.quantile(s)", "shlex.utime(s)", "shlex.remote(s)", "shlex.nanquantile(s)", "shlex.require(s)", "shlex.execute(s)", "shlex.read_parquet(s)", "shlex.take(s)", "shlex.stem(s)", "shlex.sort(s)", "shlex.outer(s)"], "shlex.quotes": ["shlex.quotes"], "shlex.read_token()": ["read_token"], "shlex.shlex(infile=None)": ["shlex", "shlex.shlex(infile=None)"], "shlex.shlex(infile=None, posix=False)": ["shlex", "shlex.shlex(infile=None, posix=True)"], "shlex.shlex(instream=None)": ["shlex", "shlex.shlex(instream=None)"], "shlex.shlex(instream=None, infile=None)": ["shlex", "shlex.shlex(instream=None, infile=None)"], "shlex.shlex(instream=None, posix=False)": ["shlex", "shlex.shlex(instream=None, posix=True)"], "shlex.shlex(instream=None, punctuation_chars=False)": ["shlex", "shlex.shlex(instream=None, punctuation_chars=True)"], "shlex.shlex(posix=False)": ["shlex", "shlex.shlex(posix=True)"], "shlex.shlex(punctuation_chars=False)": ["shlex", "shlex.shlex(punctuation_chars=True)"], "shlex.source": ["shlex.source"], "shlex.split(s)": ["split", "shlex.subplots(s)", "shlex.array_split(s)", "shlex.simplefilter(s)", "shlex.replicate(s)", "shlex.script(s)", "shlex.select(s)", "shlex.symlink(s)", "shlex.endswith(s)", "shlex._as_pairs(s)", "shlex.isin(s)", "shlex.pinv(s)", "shlex._lu_with_infos(s)", "shlex.setitimer(s)", "shlex.startswith(s)"], "shlex.split(s, comments=False)": ["split", "shlex.split(s, comments=True)", "shlex.subplots(s, comments=False)", "shlex.array_split(s, comments=False)", "shlex.simplefilter(s, comments=False)", "shlex.replicate(s, comments=False)", "shlex.script(s, comments=False)", "shlex.select(s, comments=False)", "shlex.symlink(s, comments=False)", "shlex.endswith(s, comments=False)", "shlex._as_pairs(s, comments=False)", "shlex.isin(s, comments=False)", "shlex.pinv(s, comments=False)", "shlex._lu_with_infos(s, comments=False)", "shlex.setitimer(s, comments=False)"], "shlex.split(s, comments=False, posix=True)": ["split", "shlex.split(s, comments=True, posix=False)", "shlex.subplots(s, comments=False, posix=True)", "shlex.array_split(s, comments=False, posix=True)", "shlex.simplefilter(s, comments=False, posix=True)", "shlex.replicate(s, comments=False, posix=True)", "shlex.script(s, comments=False, posix=True)", "shlex.select(s, comments=False, posix=True)", "shlex.symlink(s, comments=False, posix=True)", "shlex.endswith(s, comments=False, posix=True)", "shlex._as_pairs(s, comments=False, posix=True)", "shlex.isin(s, comments=False, posix=True)", "shlex.pinv(s, comments=False, posix=True)", "shlex._lu_with_infos(s, comments=False, posix=True)", "shlex.setitimer(s, comments=False, posix=True)"], "shlex.split(s, posix=True)": ["split", "shlex.split(s, posix=False)", "shlex.subplots(s, posix=True)", "shlex.array_split(s, posix=True)", "shlex.simplefilter(s, posix=True)", "shlex.replicate(s, posix=True)", "shlex.script(s, posix=True)", "shlex.select(s, posix=True)", "shlex.symlink(s, posix=True)", "shlex.endswith(s, posix=True)", "shlex._as_pairs(s, posix=True)", "shlex.isin(s, posix=True)", "shlex.pinv(s, posix=True)", "shlex._lu_with_infos(s, posix=True)", "shlex.setitimer(s, posix=True)"], "shlex.token": ["shlex.token"], "shlex.whitespace": ["shlex.whitespace"], "shlex.whitespace_split": ["shlex.whitespace_split"], "shlex.wordchars": ["shlex.wordchars"], "shutil.Error": ["shutil.Error"], "shutil.SameFileError": ["shutil.SameFileError"], "shutil.chown(path)": ["chown", "shutil._show(path)", "shutil.cond(path)", "shutil.show_code(path)", "shutil.imshow(path)", "shutil.open(path)", "shutil.get_python_inc(path)", "shutil.rc_context(path)", "shutil._ones_dispatcher(path)", "shutil._decode_line(path)", "shutil.compress_nd(path)", "shutil.can_connect(path)", "shutil.openfp(path)", "shutil.encode(path)", "shutil.Client(path)"], "shutil.chown(path, group=None)": ["chown", "shutil.chown(path, group=None)", "shutil._show(path, group=None)", "shutil.cond(path, group=None)", "shutil.show_code(path, group=None)", "shutil.imshow(path, group=None)", "shutil.open(path, group=None)", "shutil.get_python_inc(path, group=None)", "shutil.rc_context(path, group=None)", "shutil._ones_dispatcher(path, group=None)", "shutil._decode_line(path, group=None)", "shutil.compress_nd(path, group=None)", "shutil.can_connect(path, group=None)", "shutil.openfp(path, group=None)", "shutil.encode(path, group=None)"], "shutil.chown(path, user=None)": ["chown", "shutil.chown(path, user=None)", "shutil._show(path, user=None)", "shutil.cond(path, user=None)", "shutil.show_code(path, user=None)", "shutil.imshow(path, user=None)", "shutil.open(path, user=None)", "shutil.get_python_inc(path, user=None)", "shutil.rc_context(path, user=None)", "shutil._ones_dispatcher(path, user=None)", "shutil._decode_line(path, user=None)", "shutil.compress_nd(path, user=None)", "shutil.can_connect(path, user=None)", "shutil.openfp(path, user=None)", "shutil.encode(path, user=None)"], "shutil.chown(path, user=None, group=None)": ["chown", "shutil.chown(path, user=None, group=None)", "shutil._show(path, user=None, group=None)", "shutil.cond(path, user=None, group=None)", "shutil.show_code(path, user=None, group=None)", "shutil.imshow(path, user=None, group=None)", "shutil.open(path, user=None, group=None)", "shutil.get_python_inc(path, user=None, group=None)", "shutil.rc_context(path, user=None, group=None)", "shutil._ones_dispatcher(path, user=None, group=None)", "shutil._decode_line(path, user=None, group=None)", "shutil.compress_nd(path, user=None, group=None)", "shutil.can_connect(path, user=None, group=None)", "shutil.openfp(path, user=None, group=None)", "shutil.encode(path, user=None, group=None)"], "shutil.copy(src, dst)": ["copy", "shutil.copytree(src, dst)", "shutil._copy(src, dst)", "shutil.count(src, dst)", "shutil.script(src, dst)", "shutil.decode(src, dst)", "shutil.copy2(src, dst)", "shutil.compile_file(src, dst)", "shutil.new_compiler(src, dst)", "shutil.byte_compile(src, dst)", "shutil.compile_path(src, dst)", "shutil.convert(src, dst)", "shutil.concat_compat(src, dst)", "shutil.currency(src, dst)", "shutil.jacobian(src, dst)"], "shutil.copy(src, dst, follow_symlinks=True)": ["copy", "shutil.copy(src, dst, follow_symlinks=False)", "shutil.copytree(src, dst, follow_symlinks=True)", "shutil._copy(src, dst, follow_symlinks=True)", "shutil.count(src, dst, follow_symlinks=True)", "shutil.script(src, dst, follow_symlinks=True)", "shutil.decode(src, dst, follow_symlinks=True)", "shutil.copy2(src, dst, follow_symlinks=True)", "shutil.compile_file(src, dst, follow_symlinks=True)", "shutil.new_compiler(src, dst, follow_symlinks=True)", "shutil.byte_compile(src, dst, follow_symlinks=True)", "shutil.compile_path(src, dst, follow_symlinks=True)", "shutil.convert(src, dst, follow_symlinks=True)", "shutil.concat_compat(src, dst, follow_symlinks=True)", "shutil.currency(src, dst, follow_symlinks=True)"], "shutil.copy2(src, dst)": ["copy2", "shutil.copy(src, dst)", "shutil.copystat(src, dst)", "shutil.copyfile(src, dst)", "shutil.copymode(src, dst)", "shutil._copyxattr(src, dst)", "shutil.removexattr(src, dst)", "shutil.copy_tree(src, dst)", "shutil.copy_file(src, dst)", "shutil.cov(src, dst)", "shutil.getxattr(src, dst)", "shutil.stat(src, dst)", "shutil.cmp(src, dst)", "shutil.open(src, dst)", "shutil.dup2(src, dst)"], "shutil.copyfile(src, dst)": ["copyfile", "shutil.copy(src, dst)", "shutil.copy2(src, dst)", "shutil.copymode(src, dst)", "shutil.copystat(src, dst)", "shutil._copyxattr(src, dst)", "shutil.copy_file(src, dst)", "shutil.removexattr(src, dst)", "shutil.getxattr(src, dst)", "shutil.copy_tree(src, dst)", "shutil.open(src, dst)", "shutil.stat(src, dst)", "shutil._covhelper(src, dst)", "shutil.move_file(src, dst)", "shutil.field(src, dst)"], "shutil.copyfile(src, dst, follow_symlinks=True)": ["copyfile", "shutil.copyfile(src, dst, follow_symlinks=False)", "shutil.copy(src, dst, follow_symlinks=True)", "shutil.copy2(src, dst, follow_symlinks=True)", "shutil.copymode(src, dst, follow_symlinks=True)", "shutil.copystat(src, dst, follow_symlinks=True)", "shutil._copyxattr(src, dst, follow_symlinks=True)", "shutil.copy_file(src, dst, follow_symlinks=True)", "shutil.removexattr(src, dst, follow_symlinks=True)", "shutil.getxattr(src, dst, follow_symlinks=True)", "shutil.copy_tree(src, dst, follow_symlinks=True)", "shutil.open(src, dst, follow_symlinks=True)", "shutil.stat(src, dst, follow_symlinks=True)", "shutil._covhelper(src, dst, follow_symlinks=True)", "shutil.move_file(src, dst, follow_symlinks=True)"], "shutil.copyfileobj(fsrc, fdst)": ["copyfileobj", "shutil.load_compiled(fsrc, fdst)", "shutil.circle(fsrc, fdst)", "shutil.pickle(fsrc, fdst)", "shutil._copy_dispatcher(fsrc, fdst)", "shutil.as_completed(fsrc, fdst)", "shutil._field_accessor(fsrc, fdst)", "shutil._pad_simple(fsrc, fdst)", "shutil.read_pickle(fsrc, fdst)", "shutil._backfill_2d(fsrc, fdst)", "shutil.all_gather_object(fsrc, fdst)", "shutil._copy_archive(fsrc, fdst)", "shutil.encode(fsrc, fdst)", "shutil.Client(fsrc, fdst)", "shutil._vector_polynomial_value(fsrc, fdst)"], "shutil.copyfileobj(fsrc, fdst, length)": ["copyfileobj", "shutil.load_compiled(fsrc, fdst, length)", "shutil.circle(fsrc, fdst, length)", "shutil.pickle(fsrc, fdst, length)", "shutil._copy_dispatcher(fsrc, fdst, length)", "shutil.as_completed(fsrc, fdst, length)", "shutil._field_accessor(fsrc, fdst, length)", "shutil._pad_simple(fsrc, fdst, length)", "shutil.read_pickle(fsrc, fdst, length)", "shutil._backfill_2d(fsrc, fdst, length)", "shutil.all_gather_object(fsrc, fdst, length)", "shutil._copy_archive(fsrc, fdst, length)", "shutil.encode(fsrc, fdst, length)", "shutil.Client(fsrc, fdst, length)", "shutil._vector_polynomial_value(fsrc, fdst, length)"], "shutil.copymode(src, dst)": ["copymode", "shutil.copy(src, dst)", "shutil.copy2(src, dst)", "shutil.copyfile(src, dst)", "shutil.copystat(src, dst)", "shutil._copyxattr(src, dst)", "shutil.removexattr(src, dst)", "shutil.getxattr(src, dst)", "shutil.copy_tree(src, dst)", "shutil.copy_file(src, dst)", "shutil.polyder(src, dst)", "shutil.open(src, dst)", "shutil.prod(src, dst)", "shutil.stat(src, dst)", "shutil.corrcoef(src, dst)"], "shutil.copymode(src, dst, follow_symlinks=True)": ["copymode", "shutil.copymode(src, dst, follow_symlinks=False)", "shutil.copy(src, dst, follow_symlinks=True)", "shutil.copy2(src, dst, follow_symlinks=True)", "shutil.copyfile(src, dst, follow_symlinks=True)", "shutil.copystat(src, dst, follow_symlinks=True)", "shutil._copyxattr(src, dst, follow_symlinks=True)", "shutil.removexattr(src, dst, follow_symlinks=True)", "shutil.getxattr(src, dst, follow_symlinks=True)", "shutil.copy_tree(src, dst, follow_symlinks=True)", "shutil.copy_file(src, dst, follow_symlinks=True)", "shutil.polyder(src, dst, follow_symlinks=True)", "shutil.open(src, dst, follow_symlinks=True)", "shutil.prod(src, dst, follow_symlinks=True)", "shutil.stat(src, dst, follow_symlinks=True)"], "shutil.copystat(src, dst)": ["copystat", "shutil._copyxattr(src, dst)", "shutil.copy(src, dst)", "shutil.stat(src, dst)", "shutil.copy2(src, dst)", "shutil.copyfile(src, dst)", "shutil.copymode(src, dst)", "shutil.getxattr(src, dst)", "shutil.removexattr(src, dst)", "shutil.copy_tree(src, dst)", "shutil.py_scanstring(src, dst)", "shutil.copy_file(src, dst)", "shutil.stack(src, dst)", "shutil.mkpath(src, dst)", "shutil.start_processes(src, dst)"], "shutil.copystat(src, dst, follow_symlinks=True)": ["copystat", "shutil.copystat(src, dst, follow_symlinks=False)", "shutil._copyxattr(src, dst, follow_symlinks=True)", "shutil.copy(src, dst, follow_symlinks=True)", "shutil.stat(src, dst, follow_symlinks=True)", "shutil.copy2(src, dst, follow_symlinks=True)", "shutil.copyfile(src, dst, follow_symlinks=True)", "shutil.copymode(src, dst, follow_symlinks=True)", "shutil.getxattr(src, dst, follow_symlinks=True)", "shutil.removexattr(src, dst, follow_symlinks=True)", "shutil.copy_tree(src, dst, follow_symlinks=True)", "shutil.py_scanstring(src, dst, follow_symlinks=True)", "shutil.copy_file(src, dst, follow_symlinks=True)", "shutil.stack(src, dst, follow_symlinks=True)", "shutil.mkpath(src, dst, follow_symlinks=True)"], "shutil.copytree(src, dst)": ["copytree", "shutil.copy(src, dst)", "shutil.remove_tree(src, dst)", "shutil.register_cmap(src, dst)", "shutil.count(src, dst)", "shutil.render_doc(src, dst)", "shutil.script(src, dst)", "shutil.decode(src, dst)", "shutil.prepare_qat(src, dst)", "shutil.prepare_jit(src, dst)", "shutil._code_to_timestamp_pyc(src, dst)", "shutil.encodestring(src, dst)", "shutil.scatter(src, dst)", "shutil._construction_repr(src, dst)", "shutil._encodestring(src, dst)"], "shutil.copytree(src, dst, copy_function=copy2)": ["copytree", "shutil.copy(src, dst, copy_function=copy2)", "shutil.remove_tree(src, dst, copy_function=copy2)", "shutil.register_cmap(src, dst, copy_function=copy2)", "shutil.count(src, dst, copy_function=copy2)", "shutil.render_doc(src, dst, copy_function=copy2)", "shutil.script(src, dst, copy_function=copy2)", "shutil.decode(src, dst, copy_function=copy2)", "shutil.prepare_qat(src, dst, copy_function=copy2)", "shutil.prepare_jit(src, dst, copy_function=copy2)", "shutil._code_to_timestamp_pyc(src, dst, copy_function=copy2)", "shutil.encodestring(src, dst, copy_function=copy2)", "shutil.scatter(src, dst, copy_function=copy2)", "shutil._construction_repr(src, dst, copy_function=copy2)", "shutil._encodestring(src, dst, copy_function=copy2)"], "shutil.copytree(src, dst, ignore=None)": ["copytree", "shutil.copytree(src, dst, ignore=None)", "shutil.copy(src, dst, ignore=None)", "shutil.remove_tree(src, dst, ignore=None)", "shutil.register_cmap(src, dst, ignore=None)", "shutil.count(src, dst, ignore=None)", "shutil.render_doc(src, dst, ignore=None)", "shutil.script(src, dst, ignore=None)", "shutil.decode(src, dst, ignore=None)", "shutil.prepare_qat(src, dst, ignore=None)", "shutil.prepare_jit(src, dst, ignore=None)", "shutil._code_to_timestamp_pyc(src, dst, ignore=None)", "shutil.encodestring(src, dst, ignore=None)", "shutil.scatter(src, dst, ignore=None)", "shutil._construction_repr(src, dst, ignore=None)"], "shutil.copytree(src, dst, ignore=None, copy_function=copy2)": ["copytree", "shutil.copytree(src, dst, ignore=None, copy_function=copy2)", "shutil.copy(src, dst, ignore=None, copy_function=copy2)", "shutil.remove_tree(src, dst, ignore=None, copy_function=copy2)", "shutil.register_cmap(src, dst, ignore=None, copy_function=copy2)", "shutil.count(src, dst, ignore=None, copy_function=copy2)", "shutil.render_doc(src, dst, ignore=None, copy_function=copy2)", "shutil.script(src, dst, ignore=None, copy_function=copy2)", "shutil.decode(src, dst, ignore=None, copy_function=copy2)", "shutil.prepare_qat(src, dst, ignore=None, copy_function=copy2)", "shutil.prepare_jit(src, dst, ignore=None, copy_function=copy2)", "shutil._code_to_timestamp_pyc(src, dst, ignore=None, copy_function=copy2)", "shutil.encodestring(src, dst, ignore=None, copy_function=copy2)", "shutil.scatter(src, dst, ignore=None, copy_function=copy2)", "shutil._construction_repr(src, dst, ignore=None, copy_function=copy2)"], "shutil.copytree(src, dst, symlinks=False)": ["copytree", "shutil.copytree(src, dst, symlinks=True)", "shutil.copy(src, dst, symlinks=False)", "shutil.remove_tree(src, dst, symlinks=False)", "shutil.register_cmap(src, dst, symlinks=False)", "shutil.count(src, dst, symlinks=False)", "shutil.render_doc(src, dst, symlinks=False)", "shutil.script(src, dst, symlinks=False)", "shutil.decode(src, dst, symlinks=False)", "shutil.prepare_qat(src, dst, symlinks=False)", "shutil.prepare_jit(src, dst, symlinks=False)", "shutil._code_to_timestamp_pyc(src, dst, symlinks=False)", "shutil.encodestring(src, dst, symlinks=False)", "shutil.scatter(src, dst, symlinks=False)", "shutil._construction_repr(src, dst, symlinks=False)"], "shutil.copytree(src, dst, symlinks=False, ignore=None)": ["copytree", "shutil.copytree(src, dst, symlinks=True, ignore=None)", "shutil.copy(src, dst, symlinks=False, ignore=None)", "shutil.remove_tree(src, dst, symlinks=False, ignore=None)", "shutil.register_cmap(src, dst, symlinks=False, ignore=None)", "shutil.count(src, dst, symlinks=False, ignore=None)", "shutil.render_doc(src, dst, symlinks=False, ignore=None)", "shutil.script(src, dst, symlinks=False, ignore=None)", "shutil.decode(src, dst, symlinks=False, ignore=None)", "shutil.prepare_qat(src, dst, symlinks=False, ignore=None)", "shutil.prepare_jit(src, dst, symlinks=False, ignore=None)", "shutil._code_to_timestamp_pyc(src, dst, symlinks=False, ignore=None)", "shutil.encodestring(src, dst, symlinks=False, ignore=None)", "shutil.scatter(src, dst, symlinks=False, ignore=None)", "shutil._construction_repr(src, dst, symlinks=False, ignore=None)"], "shutil.disk_usage(path)": ["disk_usage", "shutil.is_storage(path)", "shutil.usage(path)", "shutil.ispackage(path)", "shutil.is_sparse(path)", "shutil.isspace(path)", "shutil.set_dir(path)", "shutil.get_dir(path)", "shutil.disable(path)", "shutil.diag(path)", "shutil._find_unsafe(path)", "shutil.distance(path)", "shutil._save_dispatcher(path)", "shutil.memusage(path)", "shutil.is_tuple(path)"], "shutil.get_archive_formats()": ["get_archive_formats", "shutil.register_archive_format()", "shutil.unregister_archive_format()", "shutil.create_archive()", "shutil.make_archive()", "shutil._format_range_context()", "shutil._format_argument_list()", "shutil._get_formatdict()", "shutil.attr_formatter()", "shutil._reset_cache()", "shutil.format_datetime()", "shutil.storage_from_cache()", "shutil.get_unpack_formats()", "shutil._get_code_from_file()", "shutil._format_align()"], "shutil.get_terminal_size(lines))": [], "shutil.get_terminal_size(lines), fallback=(columns)": [], "shutil.get_unpack_formats()": ["get_unpack_formats", "shutil.register_unpack_format()", "shutil.format_stack()", "shutil._find_unpack_format()", "shutil.unpack_from()", "shutil._unstack_frame()", "shutil._unpack_opargs()", "shutil._format_range_unified()", "shutil.repr_format()", "shutil._get_formatdict()", "shutil.iter_unpack()", "shutil.unregister_unpack_format()", "shutil._format_sign()", "shutil._unpack_field()", "shutil.formatstring()"], "shutil.ignore_patterns(*patterns)": ["ignore_patterns", "shutil._inet_paton(*patterns)", "shutil.greater(*patterns)", "shutil.align_terms(*patterns)", "shutil.generate_tokens(*patterns)", "shutil._importers(*patterns)", "shutil.noheaders(*patterns)", "shutil._parse_int(*patterns)", "shutil.get_paths(*patterns)", "shutil._find_mime_parameters(*patterns)", "shutil.ignore(*patterns)", "shutil.is_ignored_fn(*patterns)", "shutil.align_tensors(*patterns)", "shutil.get_parameter(*patterns)", "shutil._path_is_mode_type(*patterns)"], "shutil.make_archive(base_name, format)": ["make_archive", "shutil.unpack_archive(base_name, format)", "shutil._copy_archive(base_name, format)", "shutil.make_dual(base_name, format)", "shutil.create_archive(base_name, format)", "shutil._save_dispatcher(base_name, format)", "shutil.ParserCreate(base_name, format)", "shutil._stack_dispatcher(base_name, format)", "shutil.walk_packages(base_name, format)", "shutil._vander_dispatcher(base_name, format)", "shutil._nanmax_dispatcher(base_name, format)", "shutil.cache_from_source(base_name, format)", "shutil._reshape_dispatcher(base_name, format)", "shutil._matrix_rank_dispatcher(base_name, format)", "shutil._parse_overview(base_name, format)"], "shutil.make_archive(base_name, format, root_dir)": ["make_archive", "shutil.unpack_archive(base_name, format, root_dir)", "shutil._copy_archive(base_name, format, root_dir)", "shutil.make_dual(base_name, format, root_dir)", "shutil.create_archive(base_name, format, root_dir)", "shutil._save_dispatcher(base_name, format, root_dir)", "shutil.ParserCreate(base_name, format, root_dir)", "shutil._stack_dispatcher(base_name, format, root_dir)", "shutil.walk_packages(base_name, format, root_dir)", "shutil._vander_dispatcher(base_name, format, root_dir)", "shutil._nanmax_dispatcher(base_name, format, root_dir)", "shutil.cache_from_source(base_name, format, root_dir)", "shutil._reshape_dispatcher(base_name, format, root_dir)", "shutil._matrix_rank_dispatcher(base_name, format, root_dir)", "shutil._parse_overview(base_name, format, root_dir)"], "shutil.make_archive(base_name, format, root_dir, base_dir)": ["make_archive", "shutil.unpack_archive(base_name, format, root_dir, base_dir)", "shutil._copy_archive(base_name, format, root_dir, base_dir)", "shutil.make_dual(base_name, format, root_dir, base_dir)", "shutil.create_archive(base_name, format, root_dir, base_dir)", "shutil._save_dispatcher(base_name, format, root_dir, base_dir)", "shutil.ParserCreate(base_name, format, root_dir, base_dir)", "shutil._stack_dispatcher(base_name, format, root_dir, base_dir)", "shutil.walk_packages(base_name, format, root_dir, base_dir)", "shutil._vander_dispatcher(base_name, format, root_dir, base_dir)", "shutil._nanmax_dispatcher(base_name, format, root_dir, base_dir)", "shutil.cache_from_source(base_name, format, root_dir, base_dir)", "shutil._reshape_dispatcher(base_name, format, root_dir, base_dir)", "shutil._matrix_rank_dispatcher(base_name, format, root_dir, base_dir)", "shutil._parse_overview(base_name, format, root_dir, base_dir)"], "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)": ["make_archive", "shutil.unpack_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil._copy_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil.make_dual(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil.create_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil._save_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil.ParserCreate(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil._stack_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil.walk_packages(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil._vander_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil._nanmax_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil.cache_from_source(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil._reshape_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil._matrix_rank_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner)", "shutil._parse_overview(base_name, format, root_dir, base_dir, verbose, dry_run, owner)"], "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)": ["make_archive", "shutil.unpack_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil._copy_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil.make_dual(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil.create_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil._save_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil.ParserCreate(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil._stack_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil.walk_packages(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil._vander_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil._nanmax_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil.cache_from_source(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil._reshape_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil._matrix_rank_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)", "shutil._parse_overview(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group)"], "shutil.make_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)": ["make_archive", "shutil.unpack_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil._copy_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil.make_dual(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil.create_archive(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil._save_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil.ParserCreate(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil._stack_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil.walk_packages(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil._vander_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil._nanmax_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil.cache_from_source(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil._reshape_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil._matrix_rank_dispatcher(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)", "shutil._parse_overview(base_name, format, root_dir, base_dir, verbose, dry_run, owner, group, logger)"], "shutil.move(src, dst)": ["move", "shutil.remove(src, dst)", "shutil.mode(src, dst)", "shutil.solve(src, dst)", "shutil.moveaxis(src, dst)", "shutil.move_file(src, dst)", "shutil.remote(src, dst)", "shutil.imsave(src, dst)", "shutil.cov(src, dst)", "shutil.mod(src, dst)", "shutil.__mod__(src, dst)", "shutil.removedirs(src, dst)", "shutil._modname(src, dst)", "shutil.resolve(src, dst)", "shutil._moments(src, dst)"], "shutil.move(src, dst, copy_function=copy2)": ["move", "shutil.remove(src, dst, copy_function=copy2)", "shutil.mode(src, dst, copy_function=copy2)", "shutil.solve(src, dst, copy_function=copy2)", "shutil.moveaxis(src, dst, copy_function=copy2)", "shutil.move_file(src, dst, copy_function=copy2)", "shutil.remote(src, dst, copy_function=copy2)", "shutil.imsave(src, dst, copy_function=copy2)", "shutil.cov(src, dst, copy_function=copy2)", "shutil.mod(src, dst, copy_function=copy2)", "shutil.__mod__(src, dst, copy_function=copy2)", "shutil.removedirs(src, dst, copy_function=copy2)", "shutil._modname(src, dst, copy_function=copy2)", "shutil.resolve(src, dst, copy_function=copy2)", "shutil._moments(src, dst, copy_function=copy2)"], "shutil.register_archive_format(name, function)": ["register_archive_format", "shutil.register_at_fork(name, function)", "shutil.cache_from_source(name, function)", "shutil.format_time(name, function)", "shutil._copy_archive(name, function)", "shutil._correlate_dispatcher(name, function)", "shutil._argmax_dispatcher(name, function)", "shutil._reshape_dispatcher(name, function)", "shutil.unpack_archive(name, function)", "shutil._matrix_rank_dispatcher(name, function)", "shutil._write_array_header(name, function)", "shutil._translate_dispatcher(name, function)", "shutil._outer_dispatcher(name, function)", "shutil.ParserCreate(name, function)", "shutil._argmin_dispatcher(name, function)"], "shutil.register_archive_format(name, function, extra_args)": ["register_archive_format", "shutil.register_at_fork(name, function, extra_args)", "shutil.cache_from_source(name, function, extra_args)", "shutil.format_time(name, function, extra_args)", "shutil._copy_archive(name, function, extra_args)", "shutil._correlate_dispatcher(name, function, extra_args)", "shutil._argmax_dispatcher(name, function, extra_args)", "shutil._reshape_dispatcher(name, function, extra_args)", "shutil.unpack_archive(name, function, extra_args)", "shutil._matrix_rank_dispatcher(name, function, extra_args)", "shutil._write_array_header(name, function, extra_args)", "shutil._translate_dispatcher(name, function, extra_args)", "shutil._outer_dispatcher(name, function, extra_args)", "shutil.ParserCreate(name, function, extra_args)", "shutil._argmin_dispatcher(name, function, extra_args)"], "shutil.register_archive_format(name, function, extra_args, description)": ["register_archive_format", "shutil.register_at_fork(name, function, extra_args, description)", "shutil.cache_from_source(name, function, extra_args, description)", "shutil.format_time(name, function, extra_args, description)", "shutil._copy_archive(name, function, extra_args, description)", "shutil._correlate_dispatcher(name, function, extra_args, description)", "shutil._argmax_dispatcher(name, function, extra_args, description)", "shutil._reshape_dispatcher(name, function, extra_args, description)", "shutil.unpack_archive(name, function, extra_args, description)", "shutil._matrix_rank_dispatcher(name, function, extra_args, description)", "shutil._write_array_header(name, function, extra_args, description)", "shutil._translate_dispatcher(name, function, extra_args, description)", "shutil._outer_dispatcher(name, function, extra_args, description)", "shutil.ParserCreate(name, function, extra_args, description)", "shutil._argmin_dispatcher(name, function, extra_args, description)"], "shutil.register_unpack_format(name, extensions, function)": ["register_unpack_format", "shutil.spec_from_loader(name, extensions, function)", "shutil._array_repr_dispatcher(name, extensions, function)", "shutil._replace_dispatcher(name, extensions, function)", "shutil.fromregex(name, extensions, function)", "shutil._argsort_dispatcher(name, extensions, function)", "shutil._compress_dispatcher(name, extensions, function)", "shutil.assert_array_max_ulp(name, extensions, function)", "shutil._packed_sequence_init_args(name, extensions, function)", "shutil._nancumsum_dispatcher(name, extensions, function)", "shutil._array_str_dispatcher(name, extensions, function)", "shutil._count_dispatcher(name, extensions, function)", "shutil._nancumprod_dispatcher(name, extensions, function)", "shutil._iter_filter(name, extensions, function)", "shutil._convert_listlike(name, extensions, function)"], "shutil.register_unpack_format(name, extensions, function, extra_args)": ["register_unpack_format", "shutil.spec_from_loader(name, extensions, function, extra_args)", "shutil._array_repr_dispatcher(name, extensions, function, extra_args)", "shutil._replace_dispatcher(name, extensions, function, extra_args)", "shutil.fromregex(name, extensions, function, extra_args)", "shutil._argsort_dispatcher(name, extensions, function, extra_args)", "shutil._compress_dispatcher(name, extensions, function, extra_args)", "shutil.assert_array_max_ulp(name, extensions, function, extra_args)", "shutil._packed_sequence_init_args(name, extensions, function, extra_args)", "shutil._nancumsum_dispatcher(name, extensions, function, extra_args)", "shutil._array_str_dispatcher(name, extensions, function, extra_args)", "shutil._count_dispatcher(name, extensions, function, extra_args)", "shutil._nancumprod_dispatcher(name, extensions, function, extra_args)", "shutil._iter_filter(name, extensions, function, extra_args)", "shutil._convert_listlike(name, extensions, function, extra_args)"], "shutil.register_unpack_format(name, extensions, function, extra_args, description)": ["register_unpack_format", "shutil.spec_from_loader(name, extensions, function, extra_args, description)", "shutil._array_repr_dispatcher(name, extensions, function, extra_args, description)", "shutil._replace_dispatcher(name, extensions, function, extra_args, description)", "shutil.fromregex(name, extensions, function, extra_args, description)", "shutil._argsort_dispatcher(name, extensions, function, extra_args, description)", "shutil._compress_dispatcher(name, extensions, function, extra_args, description)", "shutil.assert_array_max_ulp(name, extensions, function, extra_args, description)", "shutil._packed_sequence_init_args(name, extensions, function, extra_args, description)", "shutil._nancumsum_dispatcher(name, extensions, function, extra_args, description)", "shutil._array_str_dispatcher(name, extensions, function, extra_args, description)", "shutil._count_dispatcher(name, extensions, function, extra_args, description)", "shutil._nancumprod_dispatcher(name, extensions, function, extra_args, description)", "shutil._iter_filter(name, extensions, function, extra_args, description)", "shutil._convert_listlike(name, extensions, function, extra_args, description)"], "shutil.rmtree(path)": ["rmtree", "shutil.hermtrim(path)", "shutil.hermetrim(path)", "shutil.barrier(path)", "shutil.resolve(path)", "shutil.prepare(path)", "shutil.getclasstree(path)", "shutil.rewrite_name(path)", "shutil.template(path)", "shutil.trimcoef(path)", "shutil.writedoc(path)", "shutil.triu(path)", "shutil.safe_repr(path)", "shutil.tril(path)", "shutil._synthesize(path)"], "shutil.rmtree(path, ignore_errors=False)": ["rmtree", "shutil.rmtree(path, ignore_errors=True)", "shutil.hermtrim(path, ignore_errors=False)", "shutil.hermetrim(path, ignore_errors=False)", "shutil.barrier(path, ignore_errors=False)", "shutil.resolve(path, ignore_errors=False)", "shutil.prepare(path, ignore_errors=False)", "shutil.getclasstree(path, ignore_errors=False)", "shutil.rewrite_name(path, ignore_errors=False)", "shutil.template(path, ignore_errors=False)", "shutil.trimcoef(path, ignore_errors=False)", "shutil.writedoc(path, ignore_errors=False)", "shutil.triu(path, ignore_errors=False)", "shutil.safe_repr(path, ignore_errors=False)", "shutil.tril(path, ignore_errors=False)"], "shutil.rmtree(path, onerror=None)": ["rmtree", "shutil.rmtree(path, onerror=None)", "shutil.hermtrim(path, onerror=None)", "shutil.hermetrim(path, onerror=None)", "shutil.barrier(path, onerror=None)", "shutil.resolve(path, onerror=None)", "shutil.prepare(path, onerror=None)", "shutil.getclasstree(path, onerror=None)", "shutil.rewrite_name(path, onerror=None)", "shutil.template(path, onerror=None)", "shutil.trimcoef(path, onerror=None)", "shutil.writedoc(path, onerror=None)", "shutil.triu(path, onerror=None)", "shutil.safe_repr(path, onerror=None)", "shutil.tril(path, onerror=None)"], "shutil.unpack_archive(filename)": ["unpack_archive", "shutil.unpack_dual(filename)", "shutil.create_archive(filename)", "shutil._stack_dispatcher(filename)", "shutil._unwrap_dispatcher(filename)", "shutil.addsitepackages(filename)", "shutil.print_stack(filename)", "shutil._nancumsum_dispatcher(filename)", "shutil._trace_dispatcher(filename)", "shutil.upsample_nearest(filename)", "shutil._init_rpc_backend(filename)", "shutil.ascii_encode(filename)", "shutil._nancumprod_dispatcher(filename)", "shutil._argmin_dispatcher(filename)", "shutil._nansum_dispatcher(filename)"], "shutil.unpack_archive(filename, extract_dir)": ["unpack_archive", "shutil.unpack_dual(filename, extract_dir)", "shutil.create_archive(filename, extract_dir)", "shutil._stack_dispatcher(filename, extract_dir)", "shutil._unwrap_dispatcher(filename, extract_dir)", "shutil.addsitepackages(filename, extract_dir)", "shutil.print_stack(filename, extract_dir)", "shutil._nancumsum_dispatcher(filename, extract_dir)", "shutil._trace_dispatcher(filename, extract_dir)", "shutil.upsample_nearest(filename, extract_dir)", "shutil._init_rpc_backend(filename, extract_dir)", "shutil.ascii_encode(filename, extract_dir)", "shutil._nancumprod_dispatcher(filename, extract_dir)", "shutil._argmin_dispatcher(filename, extract_dir)", "shutil._nansum_dispatcher(filename, extract_dir)"], "shutil.unpack_archive(filename, extract_dir, format)": ["unpack_archive", "shutil.unpack_dual(filename, extract_dir, format)", "shutil.create_archive(filename, extract_dir, format)", "shutil._stack_dispatcher(filename, extract_dir, format)", "shutil._unwrap_dispatcher(filename, extract_dir, format)", "shutil.addsitepackages(filename, extract_dir, format)", "shutil.print_stack(filename, extract_dir, format)", "shutil._nancumsum_dispatcher(filename, extract_dir, format)", "shutil._trace_dispatcher(filename, extract_dir, format)", "shutil.upsample_nearest(filename, extract_dir, format)", "shutil._init_rpc_backend(filename, extract_dir, format)", "shutil.ascii_encode(filename, extract_dir, format)", "shutil._nancumprod_dispatcher(filename, extract_dir, format)", "shutil._argmin_dispatcher(filename, extract_dir, format)", "shutil._nansum_dispatcher(filename, extract_dir, format)"], "shutil.unregister_archive_format(name)": ["unregister_archive_format", "shutil.register_archive_format(name)", "shutil.get_archive_formats(name)", "shutil.unregister_unpack_format(name)", "shutil.register_at_fork(name)", "shutil.register_after_fork(name)", "shutil._c_unregister_task(name)", "shutil._register_accessor(name)", "shutil.register_unpack_format(name)", "shutil.register_cmap(name)", "shutil.register_dataframe_accessor(name)", "shutil.register_error(name)", "shutil.register_index_accessor(name)", "shutil.attr_formatter(name)", "shutil.create_archive(name)"], "shutil.unregister_unpack_format(name)": ["unregister_unpack_format", "shutil._unregister_task(name)", "shutil.unregister_archive_format(name)", "shutil._c_unregister_task(name)", "shutil._py_unregister_task(name)", "shutil.register_at_fork(name)", "shutil.register_unpack_format(name)", "shutil.register_cmap(name)", "shutil.register_package(name)", "shutil.register_archive_format(name)", "shutil._find_unpack_format(name)", "shutil.register_namespace(name)", "shutil.get_unpack_formats(name)", "shutil._parse_format_specifier(name)", "shutil._abc_register(name)"], "shutil.which(cmd, mode=os.F_OK | os.X_OK)": ["which", "shutil.dirac_(cmd, mode=(os.F_OK | os.X_OK))", "shutil.onclick(cmd, mode=(os.F_OK | os.X_OK))", "shutil.tripcolor(cmd, mode=(os.F_OK | os.X_OK))", "shutil._lock_file(cmd, mode=(os.F_OK | os.X_OK))", "shutil.get_fill_func(cmd, mode=(os.F_OK | os.X_OK))", "shutil.onscreenclick(cmd, mode=(os.F_OK | os.X_OK))", "shutil.walk(cmd, mode=(os.F_OK | os.X_OK))", "shutil.fwalk(cmd, mode=(os.F_OK | os.X_OK))", "shutil.increment_lineno(cmd, mode=(os.F_OK | os.X_OK))", "shutil.escape(cmd, mode=(os.F_OK | os.X_OK))", "shutil.rundocs(cmd, mode=(os.F_OK | os.X_OK))", "shutil.polyint(cmd, mode=(os.F_OK | os.X_OK))", "shutil.testfile(cmd, mode=(os.F_OK | os.X_OK))", "shutil.signature(cmd, mode=(os.F_OK | os.X_OK))"], "shutil.which(cmd, mode=os.F_OK | os.X_OK, path=None)": ["which", "shutil.which(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.dirac_(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.onclick(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.tripcolor(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil._lock_file(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.get_fill_func(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.onscreenclick(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.walk(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.fwalk(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.increment_lineno(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.escape(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.rundocs(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.polyint(cmd, mode=(os.F_OK | os.X_OK), path=None)", "shutil.testfile(cmd, mode=(os.F_OK | os.X_OK), path=None)"], "shutil.which(cmd, path=None)": ["which", "shutil.which(cmd, path=None)", "shutil.dirac_(cmd, path=None)", "shutil.onclick(cmd, path=None)", "shutil.tripcolor(cmd, path=None)", "shutil._lock_file(cmd, path=None)", "shutil.get_fill_func(cmd, path=None)", "shutil.onscreenclick(cmd, path=None)", "shutil.walk(cmd, path=None)", "shutil.fwalk(cmd, path=None)", "shutil.increment_lineno(cmd, path=None)", "shutil.escape(cmd, path=None)", "shutil.rundocs(cmd, path=None)", "shutil.polyint(cmd, path=None)", "shutil.testfile(cmd, path=None)"], "signal.CTRL_BREAK_EVENT": ["signal.CTRL_BREAK_EVENT"], "signal.CTRL_C_EVENT": ["signal.CTRL_C_EVENT"], "signal.ITIMER_PROF": ["signal.ITIMER_PROF"], "signal.ITIMER_REAL": ["signal.ITIMER_REAL"], "signal.ItimerError": ["signal.ItimerError"], "signal.NSIG": ["signal.NSIG"], "signal.SIG_BLOCK": ["signal.SIG_BLOCK"], "signal.SIG_DFL": ["signal.SIG_DFL"], "signal.SIG_IGN": ["signal.SIG_IGN"], "signal.SIG_SETMASK": ["signal.SIG_SETMASK"], "signal.SIG_UNBLOCK": ["signal.SIG_UNBLOCK"], "signal.alarm(time)": ["alarm", "signal.lagtrim(time)", "signal.adam(time)", "signal.platform(time)", "signal._platform(time)", "signal.mapparms(time)", "signal.isscalar(time)", "signal.asscalar(time)", "signal.adamw(time)", "signal.clear(time)", "signal._alias(time)", "signal.polar(time)", "signal.nanargmax(time)", "signal.nanargmin(time)", "signal.plasma(time)"], "signal.getitimer(which)": ["getitimer", "signal.setitimer(which)", "signal.getatime(which)", "signal.getmtime(which)", "signal.getctime(which)", "signal.getwriter(which)", "signal.__getitem__(which)", "signal.getitem(which)", "signal.get_writer(which)", "signal._get_writer(which)", "signal.get_importer(which)", "signal.getmro(which)", "signal.geterr(which)", "signal.getmembers(which)", "signal._getmembers(which)"], "signal.getsignal(signalnum)": ["getsignal", "signal.signal(signalnum)", "signal.get_signature(signalnum)", "signal.getgrnam(signalnum)", "signal.getsid(signalnum)", "signal.getabsfile(signalnum)", "signal.get_origin(signalnum)", "signal.getline(signalnum)", "signal.get_terminal_size(signalnum)", "signal.getfile(signalnum)", "signal.eigvals(signalnum)", "signal._getname(signalnum)", "signal.getsize(signalnum)", "signal.get_include(signalnum)", "signal.win_getpass(signalnum)"], "signal.pthread_kill(thread_id, signalnum)": ["pthread_kill", "signal.main_thread(thread_id, signalnum)", "signal.fill_mi_header(thread_id, signalnum)", "signal.read_pickle(thread_id, signalnum)", "signal.pread(thread_id, signalnum)", "signal._no_grad_fill_(thread_id, signalnum)", "signal.read_floatnl(thread_id, signalnum)", "signal.read_int4(thread_id, signalnum)", "signal._read_long(thread_id, signalnum)", "signal.filled(thread_id, signalnum)", "signal._filter_header(thread_id, signalnum)", "signal.preadv(thread_id, signalnum)", "signal.imread(thread_id, signalnum)", "signal.killpg(thread_id, signalnum)", "signal.prepare_child(thread_id, signalnum)"], "signal.pthread_sigmask(how, mask)": ["pthread_sigmask", "signal.make_header(how, mask)", "signal._read_string(how, mask)", "signal.read_string1(how, mask)", "signal.read_string4(how, mask)", "signal.read_stringnl(how, mask)", "signal.setheading(how, mask)", "signal._pad_simple(how, mask)", "signal.putmask(how, mask)", "signal._make_deprecate(how, mask)", "signal.heading(how, mask)", "signal.masked_greater(how, mask)", "signal.radians(how, mask)", "signal.create_task(how, mask)", "signal.RAND_status(how, mask)"], "signal.setitimer(which, seconds)": ["setitimer", "signal.scatter(which, seconds)", "signal.simplefilter(which, seconds)", "signal.socketpair(which, seconds)", "signal.to_time(which, seconds)", "signal.figimage(which, seconds)", "signal.finditer(which, seconds)", "signal.setxor1d(which, seconds)", "signal.digitize(which, seconds)", "signal._construction_repr(which, seconds)", "signal.inherit_names(which, seconds)", "signal._convert_other(which, seconds)", "signal.register_cmap(which, seconds)", "signal.base_repr(which, seconds)", "signal.setdiff1d(which, seconds)"], "signal.setitimer(which, seconds, interval=0.0)": ["setitimer", "signal.setitimer(which, seconds, interval='0.0')", "signal.scatter(which, seconds, interval=0.0)", "signal.simplefilter(which, seconds, interval=0.0)", "signal.socketpair(which, seconds, interval=0.0)", "signal.to_time(which, seconds, interval=0.0)", "signal.figimage(which, seconds, interval=0.0)", "signal.finditer(which, seconds, interval=0.0)", "signal.setxor1d(which, seconds, interval=0.0)", "signal.digitize(which, seconds, interval=0.0)", "signal._construction_repr(which, seconds, interval=0.0)", "signal.inherit_names(which, seconds, interval=0.0)", "signal._convert_other(which, seconds, interval=0.0)", "signal.register_cmap(which, seconds, interval=0.0)", "signal.base_repr(which, seconds, interval=0.0)"], "signal.siginterrupt(signalnum, flag)": ["siginterrupt", "signal.interrupt_main(signalnum, flag)", "signal.interp(signalnum, flag)", "signal.registerResult(signalnum, flag)", "signal.interpolate(signalnum, flag)", "signal.interact(signalnum, flag)", "signal.get_interpreter(signalnum, flag)", "signal._integer_repr(signalnum, flag)", "signal.innerproduct(signalnum, flag)", "signal._interp_limit(signalnum, flag)", "signal.integer_repr(signalnum, flag)", "signal.signature(signalnum, flag)", "signal.interface_script(signalnum, flag)", "signal.ginput(signalnum, flag)", "signal.invert(signalnum, flag)"], "signal.signal(signalnum, handler)": ["signal", "signal.getsignal(signalnum, handler)", "signal.final(signalnum, handler)", "signal.diagonal(signalnum, handler)", "signal.WIFSIGNALED(signalnum, handler)", "signal._sin(signalnum, handler)", "signal.signature(signalnum, handler)", "signal.signum(signalnum, handler)", "signal._single(signalnum, handler)", "signal._sig(signalnum, handler)", "signal.findall(signalnum, handler)", "signal.install(signalnum, handler)", "signal.eigvals(signalnum, handler)", "signal._install(signalnum, handler)", "signal.sigwait(signalnum, handler)"], "signal.sigpending()": ["sigpending", "signal.spring()", "signal.setheading()", "signal.pendown()", "signal.heading()", "signal.send()", "signal.median_high()", "signal.device_encoding()", "signal.sigtimedwait()", "signal.is_scripting()", "signal.encodestring()", "signal._find_strings()", "signal._encodestring()", "signal._ifconfig_getnode()", "signal._ipconfig_getnode()"], "signal.sigwaitinfo(sigset)": ["sigwaitinfo", "signal.sigwait(sigset)", "signal.get_info(sigset)", "signal.showinfo(sigset)", "signal.sigtimedwait(sigset)", "signal.waitid(sigset)", "signal.gisinf(sigset)", "signal._init_pathinfo(sigset)", "signal.isdigit(sigset)", "signal.waitpid(sigset)", "signal._get_const_info(sigset)", "signal.getaddrinfo(sigset)", "signal.getfileinfo(sigset)", "signal._sanitize(sigset)", "signal._info(sigset)"], "signature.bind(*args, **kwargs)": ["bind"], "signature.bind_partial(*args, **kwargs)": ["bind_partial"], "signature.empty": ["signature.empty"], "signature.from_callable(obj, follow_wrapped=True)": ["from_callable", "signature.from_callable(obj, follow_wrapped=False)"], "signature.parameters": ["signature.parameters"], "signature.replace()": ["replace"], "signature.replace(parameters)": ["replace"], "signature.replace(parameters, return_annotation)": ["replace"], "signature.return_annotation": ["signature.return_annotation"], "simple_http_request_handler.directory": ["simple_http_request_handler.directory"], "simple_http_request_handler.do_GET()": ["do_GET"], "simple_http_request_handler.do_HEAD()": ["do_HEAD"], "simple_http_request_handler.extensions_map": ["simple_http_request_handler.extensions_map"], "simple_queue.get()": ["get"], "simple_queue.put(item)": ["put"], "site.ENABLE_USER_SITE": ["site.ENABLE_USER_SITE"], "site.PREFIXES": ["site.PREFIXES"], "site.USER_BASE": ["site.USER_BASE"], "site.USER_SITE": ["site.USER_SITE"], "site.addsitedir(sitedir)": ["addsitedir", "site.addsitepackages(sitedir)", "site.addshape(sitedir)", "site.add_observer_(sitedir)", "site.ndpointer(sitedir)", "site._around_dispatcher(sitedir)", "site.vander(sitedir)", "site.shield(sitedir)", "site.nanstd(sitedir)", "site.gather(sitedir)", "site.seterr(sitedir)", "site._any_dispatcher(sitedir)", "site.stairs(sitedir)", "site.as_strided(sitedir)", "site._all_dispatcher(sitedir)"], "site.addsitedir(sitedir, known_paths=None)": ["addsitedir", "site.addsitedir(sitedir, known_paths=None)", "site.addsitepackages(sitedir, known_paths=None)", "site.addshape(sitedir, known_paths=None)", "site.add_observer_(sitedir, known_paths=None)", "site.ndpointer(sitedir, known_paths=None)", "site._around_dispatcher(sitedir, known_paths=None)", "site.vander(sitedir, known_paths=None)", "site.shield(sitedir, known_paths=None)", "site.nanstd(sitedir, known_paths=None)", "site.gather(sitedir, known_paths=None)", "site.seterr(sitedir, known_paths=None)", "site._any_dispatcher(sitedir, known_paths=None)", "site.stairs(sitedir, known_paths=None)", "site.as_strided(sitedir, known_paths=None)"], "site.getsitepackages()": ["getsitepackages", "site.walk_packages()", "site.get_locales()", "site.extract_stack()", "site.set_trace()", "site.getTimeSeriesData()", "site.tiltangle()", "site.yticks()", "site.xticks()", "site.generate_range()", "site.stack_size()", "site.print_stack()", "site.format_stack()", "site.DocTestSuite()", "site.makeTimeDataFrame()"], "site.getusersitepackages()": ["getusersitepackages", "site.getsitepackages()", "site.addusersitepackages()", "site.addsitepackages()", "site.get_package_name()", "site.getSeriesData()", "site._task_get_stack()", "site.getuserbase()", "site._getuserbase()", "site.getTestCaseNames()", "site.ispackage()", "site.getTimeSeriesData()", "site._get_traces()", "site.getouterframes()", "site.generate_range()"], "site.main()": ["main", "site._nanargminmax()", "site.maybe_infer_ndim()", "site._time_to_micros()", "site.find_stack_level()", "site.count_empty_vals()", "site.length_of_indexer()", "site.ensure_python_int()", "site._validate_skipfooter_arg()", "site._excel2num()", "site._generate_range_overflow_safe_signed()", "site._generate_range_overflow_safe()", "site.count_not_none()", "site._dtype_to_stata_type()", "site._dtype_to_stata_type_117()"], "slice(start, stop)": ["slice", "_nth_slice(start, stop)", "size(start, stop)", "nice(start, stop)", "_size(start, stop)", "sinc(start, stop)", "need_slice(start, stop)", "linspace(start, stop)", "splitext(start, stop)", "_splitext(start, stop)", "splitdoc(start, stop)", "libc_ver(start, stop)", "split(start, stop)", "sleep(start, stop)", "solve(start, stop)"], "slice(start, stop, step)": ["slice", "_nth_slice(start, stop, step)", "size(start, stop, step)", "nice(start, stop, step)", "_size(start, stop, step)", "sinc(start, stop, step)", "need_slice(start, stop, step)", "linspace(start, stop, step)", "splitext(start, stop, step)", "_splitext(start, stop, step)", "splitdoc(start, stop, step)", "libc_ver(start, stop, step)", "split(start, stop, step)", "sleep(start, stop, step)", "solve(start, stop, step)"], "slice(stop)": ["slice", "_nth_slice(stop)", "size(stop)", "nice(stop)", "_size(stop)", "sinc(stop)", "need_slice(stop)", "linspace(stop)", "splitext(stop)", "_splitext(stop)", "splitdoc(stop)", "libc_ver(stop)", "split(stop)", "sleep(stop)", "solve(stop)"], "smtp_channel.conn": ["smtp_channel.conn"], "smtp_channel.mailfrom": ["smtp_channel.mailfrom"], "smtp_channel.peer": ["smtp_channel.peer"], "smtp_channel.rcpttos": ["smtp_channel.rcpttos"], "smtp_channel.received_data": ["smtp_channel.received_data"], "smtp_channel.received_lines": ["smtp_channel.received_lines"], "smtp_channel.seen_greeting": ["smtp_channel.seen_greeting"], "smtp_channel.smtp_server": ["smtp_channel.smtp_server"], "smtp_handler.emit(record)": ["emit"], "smtp_handler.getSubject(record)": ["getSubject"], "smtp_server.channel_class": ["smtp_server.channel_class"], "smtp_server.process_message(peer, mailfrom, rcpttos, data, **kwargs)": ["process_message"], "smtpd.DebuggingServer(localaddr, remoteaddr)": ["DebuggingServer"], "smtpd.MailmanProxy(localaddr, remoteaddr)": ["MailmanProxy"], "smtpd.PureProxy(localaddr, remoteaddr)": ["PureProxy"], "smtpd.SMTPChannel(server, conn, addr)": ["SMTPChannel"], "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432)": ["SMTPChannel", "smtpd.SMTPChannel(server, conn, addr, data_size_limit='33554432')"], "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432, map=None)": ["SMTPChannel", "smtpd.SMTPChannel(server, conn, addr, data_size_limit=33554432, map=None)", "smtpd.SMTPChannel(server, conn, addr, data_size_limit='33554432', map=None)"], "smtpd.SMTPChannel(server, conn, addr, decode_data=False)": ["SMTPChannel", "smtpd.SMTPChannel(server, conn, addr, decode_data=True)"], "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=False)": ["SMTPChannel", "smtpd.SMTPChannel(server, conn, addr, enable_SMTPUTF8=True)"], "smtpd.SMTPChannel(server, conn, addr, map=None)": ["SMTPChannel", "smtpd.SMTPChannel(server, conn, addr, map=None)"], "smtpd.SMTPChannel(server, conn, addr, map=None, decode_data=False)": ["SMTPChannel", "smtpd.SMTPChannel(server, conn, addr, map=None, decode_data=True)"], "smtpd.SMTPServer(localaddr, remoteaddr)": ["SMTPServer"], "smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None)": ["SMTPServer", "smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit=33554432, map=None)", "smtpd.SMTPServer(localaddr, remoteaddr, data_size_limit='33554432', map=None)"], "smtpd.SMTPServer(localaddr, remoteaddr, map=None)": ["SMTPServer", "smtpd.SMTPServer(localaddr, remoteaddr, map=None)"], "smtpd.SMTPServer(localaddr, remoteaddr, map=None, enable_SMTPUTF8=False)": ["SMTPServer", "smtpd.SMTPServer(localaddr, remoteaddr, map=None, enable_SMTPUTF8=True)"], "smtplib.LMTP()": ["LMTP"], "smtplib.LMTP(host='')": ["LMTP", "smtplib.LMTP(host=0)"], "smtplib.LMTP(host='', local_hostname=None)": ["LMTP", "smtplib.LMTP(host='', local_hostname=None)", "smtplib.LMTP(host=0, local_hostname=None)"], "smtplib.LMTP(host='', port=LMTP_PORT)": ["LMTP", "smtplib.LMTP(host=0, port=LMTP_PORT)"], "smtplib.LMTP(host='', source_address=None)": ["LMTP", "smtplib.LMTP(host='', source_address=None)", "smtplib.LMTP(host=0, source_address=None)"], "smtplib.LMTP(local_hostname=None)": ["LMTP", "smtplib.LMTP(local_hostname=None)"], "smtplib.LMTP(port=LMTP_PORT)": ["LMTP"], "smtplib.LMTP(port=LMTP_PORT, local_hostname=None)": ["LMTP", "smtplib.LMTP(port=LMTP_PORT, local_hostname=None)"], "smtplib.LMTP(source_address=None)": ["LMTP", "smtplib.LMTP(source_address=None)"], "smtplib.SMTP()": ["SMTP"], "smtplib.SMTP(host='', port=0)": ["SMTP", "smtplib.SMTP(host=0.0, port='0')"], "smtplib.SMTP(host='', source_address=None)": ["SMTP", "smtplib.SMTP(host='', source_address=None)", "smtplib.SMTP(host=0.0, source_address=None)"], "smtplib.SMTP(port=0)": ["SMTP", "smtplib.SMTP(port='0')"], "smtplib.SMTP(source_address=None)": ["SMTP", "smtplib.SMTP(source_address=None)"], "smtplib.SMTP(timeout, host='', port=0)": ["SMTP", "smtplib.SMTP(timeout, host=0, port='0')"], "smtplib.SMTP(timeout, port=0)": ["SMTP", "smtplib.SMTP(timeout, port='0')"], "smtplib.SMTP(timeout, source_address=None)": ["SMTP", "smtplib.SMTP(timeout, source_address=None)"], "smtplib.SMTPConnectError": ["smtplib.SMTPConnectError"], "smtplib.SMTPHeloError": ["smtplib.SMTPHeloError"], "smtplib.SMTPRecipientsRefused": ["smtplib.SMTPRecipientsRefused"], "smtplib.SMTPResponseException": ["smtplib.SMTPResponseException"], "smtplib.SMTPSenderRefused": ["smtplib.SMTPSenderRefused"], "smtplib.SMTPServerDisconnected": ["smtplib.SMTPServerDisconnected"], "smtplib.SMTP_SSL()": ["SMTP_SSL"], "smtplib.SMTP_SSL(context=None)": ["SMTP_SSL", "smtplib.SMTP_SSL(context=None)"], "smtplib.SMTP_SSL(host='', port=0)": ["SMTP_SSL", "smtplib.SMTP_SSL(host=0, port='0')"], "smtplib.SMTP_SSL(local_hostname=None)": ["SMTP_SSL", "smtplib.SMTP_SSL(local_hostname=None)"], "smtplib.SMTP_SSL(port=0)": ["SMTP_SSL", "smtplib.SMTP_SSL(port='0')"], "smtplib.SMTP_SSL(timeout)": ["SMTP_SSL"], "smtplib.SMTP_SSL(timeout, local_hostname=None)": ["SMTP_SSL", "smtplib.SMTP_SSL(timeout, local_hostname=None)"], "smtplib.SMTP_SSL(timeout, port=0)": ["SMTP_SSL", "smtplib.SMTP_SSL(timeout, port='0')"], "smtplib.SMTP_SSL(timeout, source_address=None)": ["SMTP_SSL", "smtplib.SMTP_SSL(timeout, source_address=None)"], "snapshot.compare_to(old_snapshot: Snapshot, key_type: str)": [], "snapshot.compare_to(old_snapshot: Snapshot, key_type: str, cumulative: bool=False)": [], "snapshot.dump(filename)": ["dump"], "snapshot.filter_traces(filters)": ["filter_traces"], "snapshot.load(filename)": ["load"], "snapshot.statistics(key_type: str)": [], "snapshot.statistics(key_type: str, cumulative: bool=False)": [], "snapshot.traceback_limit": ["snapshot.traceback_limit"], "snapshot.traces": ["snapshot.traces"], "sndhdr.what(filename)": ["what", "sndhdr.wait(filename)", "sndhdr.mat(filename)", "sndhdr.bmat(filename)", "sndhdr.hfft(filename)", "sndhdr._stat(filename)", "sndhdr.warn(filename)", "sndhdr._warn(filename)", "sndhdr.stat(filename)", "sndhdr.hist(filename)", "sndhdr.ihfft(filename)", "sndhdr.lstat(filename)", "sndhdr.nanstd(filename)", "sndhdr.gather(filename)", "sndhdr.unwrap(filename)"], "sndhdr.whathdr(filename)": ["whathdr", "sndhdr.what(filename)", "sndhdr.pathdirs(filename)", "sndhdr.gather(filename)", "sndhdr.waitid(filename)", "sndhdr.waitpid(filename)", "sndhdr.whichdb(filename)", "sndhdr.wait(filename)", "sndhdr.warn(filename)", "sndhdr._warn(filename)", "sndhdr._wait(filename)", "sndhdr.run_path(filename)", "sndhdr.walktree(filename)", "sndhdr.asstr(filename)", "sndhdr.width(filename)"], "sniffer.has_header(sample)": ["has_header"], "sniffer.sniff(sample)": ["sniff"], "sniffer.sniff(sample, delimiters=None)": ["sniff", "sniffer.sniff(sample, delimiters=None)"], "socket.AF_ALG": ["socket.AF_ALG"], "socket.AF_CAN": ["socket.AF_CAN"], "socket.AF_LINK": ["socket.AF_LINK"], "socket.AF_VSOCK": ["socket.AF_VSOCK"], "socket.BDADDR_ANY": ["socket.BDADDR_ANY"], "socket.BDADDR_LOCAL": ["socket.BDADDR_LOCAL"], "socket.CAN_BCM": ["socket.CAN_BCM"], "socket.CAN_ISOTP": ["socket.CAN_ISOTP"], "socket.CAN_RAW_FD_FRAMES": ["socket.CAN_RAW_FD_FRAMES"], "socket.CMSG_LEN(length)": ["CMSG_LEN"], "socket.CMSG_SPACE(length)": ["CMSG_SPACE"], "socket.HCI_DATA_DIR": ["socket.HCI_DATA_DIR"], "socket.HCI_FILTER": ["socket.HCI_FILTER"], "socket.HCI_TIME_STAMP": ["socket.HCI_TIME_STAMP"], "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID": ["socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID"], "socket.SIO_RCVALL": ["socket.SIO_RCVALL"], "socket.SOCK_CLOEXEC": ["socket.SOCK_CLOEXEC"], "socket.SOL_ALG": ["socket.SOL_ALG"], "socket.SocketType": ["socket.SocketType"], "socket.accept()": ["accept"], "socket.bind(address)": ["bind"], "socket.close()": ["close"], "socket.close(fd)": ["close"], "socket.connect(address)": ["connect"], "socket.create_connection(address)": ["create_connection", "socket.open_connection(address)", "socket.create_default_context(address)", "socket.create_archive(address)", "socket.print_exception(address)", "socket._create_default_https_context(address)", "socket.ParserCreate(address)", "socket.set_printoptions(address)", "socket._count_dispatcher(address)", "socket.nanpercentile(address)", "socket.ascontiguousarray(address)", "socket.onrelease(address)", "socket.scatter_matrix(address)", "socket.get_type_hints(address)", "socket.generate_range(address)"], "socket.create_connection(address, timeout)": ["create_connection", "socket.open_connection(address, timeout)", "socket.create_default_context(address, timeout)", "socket.create_archive(address, timeout)", "socket.print_exception(address, timeout)", "socket._create_default_https_context(address, timeout)", "socket.ParserCreate(address, timeout)", "socket.set_printoptions(address, timeout)", "socket._count_dispatcher(address, timeout)", "socket.nanpercentile(address, timeout)", "socket.ascontiguousarray(address, timeout)", "socket.onrelease(address, timeout)", "socket.scatter_matrix(address, timeout)", "socket.get_type_hints(address, timeout)", "socket.generate_range(address, timeout)"], "socket.create_connection(address, timeout, source_address)": ["create_connection", "socket.open_connection(address, timeout, source_address)", "socket.create_default_context(address, timeout, source_address)", "socket.create_archive(address, timeout, source_address)", "socket.print_exception(address, timeout, source_address)", "socket._create_default_https_context(address, timeout, source_address)", "socket.ParserCreate(address, timeout, source_address)", "socket.set_printoptions(address, timeout, source_address)", "socket._count_dispatcher(address, timeout, source_address)", "socket.nanpercentile(address, timeout, source_address)", "socket.ascontiguousarray(address, timeout, source_address)", "socket.onrelease(address, timeout, source_address)", "socket.scatter_matrix(address, timeout, source_address)", "socket.get_type_hints(address, timeout, source_address)", "socket.generate_range(address, timeout, source_address)"], "socket.detach()": ["detach"], "socket.dup()": ["dup"], "socket.error": ["socket.error"], "socket.fileno()": ["fileno"], "socket.fromshare(data)": ["fromshare"], "socket.gaierror": ["socket.gaierror"], "socket.get_inheritable()": ["get_inheritable"], "socket.getaddrinfo(host, port)": ["getaddrinfo", "socket.setdiff1d(host, port)", "socket.encodestring(host, port)", "socket._encodestring(host, port)", "socket.align_method_SERIES(host, port)", "socket._gcd_import(host, port)", "socket.socketpair(host, port)", "socket.nargminmax(host, port)", "socket._convert_for_comparison(host, port)", "socket.inherit_from_data(host, port)", "socket._init_module_attrs(host, port)", "socket.matrix_rank(host, port)", "socket.vander(host, port)", "socket.search(host, port)", "socket.gather(host, port)"], "socket.getaddrinfo(host, port, family=0)": ["getaddrinfo", "socket.getaddrinfo(host, port, family='0')", "socket.setdiff1d(host, port, family=0)", "socket.encodestring(host, port, family=0)", "socket._encodestring(host, port, family=0)", "socket.align_method_SERIES(host, port, family=0)", "socket._gcd_import(host, port, family=0)", "socket.socketpair(host, port, family=0)", "socket.nargminmax(host, port, family=0)", "socket._convert_for_comparison(host, port, family=0)", "socket.inherit_from_data(host, port, family=0)", "socket._init_module_attrs(host, port, family=0)", "socket.matrix_rank(host, port, family=0)", "socket.vander(host, port, family=0)", "socket.search(host, port, family=0)"], "socket.getaddrinfo(host, port, family=0, flags=0)": ["getaddrinfo", "socket.getaddrinfo(host, port, family='0', flags='0')", "socket.setdiff1d(host, port, family=0, flags=0)", "socket.encodestring(host, port, family=0, flags=0)", "socket._encodestring(host, port, family=0, flags=0)", "socket.align_method_SERIES(host, port, family=0, flags=0)", "socket._gcd_import(host, port, family=0, flags=0)", "socket.socketpair(host, port, family=0, flags=0)", "socket.nargminmax(host, port, family=0, flags=0)", "socket._convert_for_comparison(host, port, family=0, flags=0)", "socket.inherit_from_data(host, port, family=0, flags=0)", "socket._init_module_attrs(host, port, family=0, flags=0)", "socket.matrix_rank(host, port, family=0, flags=0)", "socket.vander(host, port, family=0, flags=0)", "socket.search(host, port, family=0, flags=0)"], "socket.getaddrinfo(host, port, family=0, type=0)": ["getaddrinfo", "socket.getaddrinfo(host, port, family='0', type='0')", "socket.setdiff1d(host, port, family=0, type=0)", "socket.encodestring(host, port, family=0, type=0)", "socket._encodestring(host, port, family=0, type=0)", "socket.align_method_SERIES(host, port, family=0, type=0)", "socket._gcd_import(host, port, family=0, type=0)", "socket.socketpair(host, port, family=0, type=0)", "socket.nargminmax(host, port, family=0, type=0)", "socket._convert_for_comparison(host, port, family=0, type=0)", "socket.inherit_from_data(host, port, family=0, type=0)", "socket._init_module_attrs(host, port, family=0, type=0)", "socket.matrix_rank(host, port, family=0, type=0)", "socket.vander(host, port, family=0, type=0)", "socket.search(host, port, family=0, type=0)"], "socket.getaddrinfo(host, port, type=0)": ["getaddrinfo", "socket.getaddrinfo(host, port, type='0')", "socket.setdiff1d(host, port, type=0)", "socket.encodestring(host, port, type=0)", "socket._encodestring(host, port, type=0)", "socket.align_method_SERIES(host, port, type=0)", "socket._gcd_import(host, port, type=0)", "socket.socketpair(host, port, type=0)", "socket.nargminmax(host, port, type=0)", "socket._convert_for_comparison(host, port, type=0)", "socket.inherit_from_data(host, port, type=0)", "socket._init_module_attrs(host, port, type=0)", "socket.matrix_rank(host, port, type=0)", "socket.vander(host, port, type=0)", "socket.search(host, port, type=0)"], "socket.getaddrinfo(host, port, type=0, proto=0)": ["getaddrinfo", "socket.getaddrinfo(host, port, type='0', proto='0')", "socket.setdiff1d(host, port, type=0, proto=0)", "socket.encodestring(host, port, type=0, proto=0)", "socket._encodestring(host, port, type=0, proto=0)", "socket.align_method_SERIES(host, port, type=0, proto=0)", "socket._gcd_import(host, port, type=0, proto=0)", "socket.socketpair(host, port, type=0, proto=0)", "socket.nargminmax(host, port, type=0, proto=0)", "socket._convert_for_comparison(host, port, type=0, proto=0)", "socket.inherit_from_data(host, port, type=0, proto=0)", "socket._init_module_attrs(host, port, type=0, proto=0)", "socket.matrix_rank(host, port, type=0, proto=0)", "socket.vander(host, port, type=0, proto=0)", "socket.search(host, port, type=0, proto=0)"], "socket.getblocking()": ["getblocking"], "socket.getdefaulttimeout()": ["getdefaulttimeout"], "socket.getfqdn()": ["getfqdn", "socket._describe_option()", "socket.win32_ver()", "socket.iter_importers()", "socket._node()", "socket.dist()", "socket.linux_distribution()", "socket.mktemp()", "socket.mac_ver()", "socket.java_ver()", "socket._syscmd_ver()", "socket._raw_input()", "socket.getenv()", "socket.getdoc()", "socket.get_ident()"], "socket.getfqdn(name)": ["getfqdn", "socket._describe_option(name)", "socket.win32_ver(name)", "socket.iter_importers(name)", "socket._node(name)", "socket.dist(name)", "socket.linux_distribution(name)", "socket.mktemp(name)", "socket.mac_ver(name)", "socket.java_ver(name)", "socket._syscmd_ver(name)", "socket._raw_input(name)", "socket.getenv(name)", "socket.getdoc(name)", "socket.get_ident(name)"], "socket.gethostbyname(hostname)": ["gethostbyname"], "socket.gethostbyname_ex(hostname)": ["gethostbyname_ex"], "socket.gethostname()": ["gethostname"], "socket.getnameinfo(sockaddr, flags)": ["getnameinfo"], "socket.getpeername()": ["getpeername"], "socket.getprotobyname(protocolname)": ["getprotobyname"], "socket.getservbyname(servicename)": ["getservbyname"], "socket.getservbyport(port)": ["getservbyport"], "socket.getservbyport(port, protocolname)": ["getservbyport"], "socket.getsockopt(level, optname)": ["getsockopt"], "socket.getsockopt(level, optname, buflen)": ["getsockopt"], "socket.has_ipv6": ["socket.has_ipv6"], "socket.if_indextoname(if_index)": ["if_indextoname"], "socket.if_nameindex()": ["if_nameindex"], "socket.if_nametoindex(if_name)": ["if_nametoindex"], "socket.inet_aton(ip_string)": ["inet_aton"], "socket.inet_ntoa(packed_ip)": ["inet_ntoa"], "socket.inet_pton(address_family, ip_string)": ["inet_pton"], "socket.ioctl(control, option)": ["ioctl"], "socket.listen()": ["listen"], "socket.listen(backlog)": ["listen"], "socket.makefile(mode='r')": ["makefile", "socket.makefile(mode=1.0)"], "socket.makefile(mode='r', encoding=None)": ["makefile", "socket.makefile(mode='r', encoding=None)", "socket.makefile(mode=1, encoding=None)"], "socket.makefile(mode='r', errors=None)": ["makefile", "socket.makefile(mode='r', errors=None)", "socket.makefile(mode=1.0, errors=None)"], "socket.makefile(newline=None)": ["makefile", "socket.makefile(newline=None)"], "socket.ntohl(x)": ["ntohl"], "socket.ntohs(x)": ["ntohs"], "socket.recv(bufsize)": ["recv"], "socket.recv_into(buffer)": ["recv_into"], "socket.recv_into(buffer, nbytes)": ["recv_into"], "socket.recv_into(buffer, nbytes, flags)": ["recv_into"], "socket.recvfrom(bufsize)": ["recvfrom"], "socket.recvfrom(bufsize, flags)": ["recvfrom"], "socket.recvfrom_into(buffer)": ["recvfrom_into"], "socket.recvmsg(bufsize)": ["recvmsg"], "socket.recvmsg(bufsize, ancbufsize)": ["recvmsg"], "socket.recvmsg_into(buffers)": ["recvmsg_into"], "socket.recvmsg_into(buffers, ancbufsize)": ["recvmsg_into"], "socket.recvmsg_into(buffers, ancbufsize, flags)": ["recvmsg_into"], "socket.send(bytes, flags)": ["send"], "socket.sendall(bytes)": ["sendall"], "socket.sendall(bytes, flags)": ["sendall"], "socket.sendfile(file)": ["sendfile"], "socket.sendfile(file, count=None)": ["sendfile", "socket.sendfile(file, count=None)"], "socket.sendfile(file, offset=0)": ["sendfile", "socket.sendfile(file, offset='0')"], "socket.sendfile(file, offset=0, count=None)": ["sendfile", "socket.sendfile(file, offset=0, count=None)", "socket.sendfile(file, offset='0', count=None)"], "socket.sendmsg(buffers)": ["sendmsg"], "socket.sendmsg_afalg(msg, op)": ["sendmsg_afalg"], "socket.sendmsg_afalg(msg, op, iv)": ["sendmsg_afalg"], "socket.sendmsg_afalg(msg, op, iv, assoclen)": ["sendmsg_afalg"], "socket.sendmsg_afalg(msg, op, iv, assoclen, flags)": ["sendmsg_afalg"], "socket.sendto(bytes, address)": ["sendto"], "socket.sendto(bytes, flags, address)": ["sendto"], "socket.set_inheritable(inheritable)": ["set_inheritable"], "socket.setblocking(flag)": ["setblocking"], "socket.setdefaulttimeout(timeout)": ["setdefaulttimeout"], "socket.sethostname(name)": ["sethostname"], "socket.setsockopt(level, optname, None, optlen: int)": [], "socket.share(process_id)": ["share"], "socket.shutdown(how)": ["shutdown"], "socket.socket()": ["socket"], "socket.socket(family=AF_INET)": ["socket"], "socket.socket(fileno=None)": ["socket", "socket.socket(fileno=None)"], "socket.socket(type=SOCK_STREAM)": ["socket"], "socket.socketpair()": ["socketpair", "socket.scandir()", "socket.listdir()", "socket.get_exec_path()", "socket.set_trace()", "socket.listxattr()", "socket.textdomain()", "socket.makePeriodFrame()", "socket.stack_size()", "socket.validate_map_location()", "socket.makeStringSeries()", "socket.token_bytes()", "socket.get_backend()", "socket.shearfactor()", "socket.clearstamps()"], "socket.socketpair(family)": ["socketpair", "socket.scandir(family)", "socket.listdir(family)", "socket.get_exec_path(family)", "socket.set_trace(family)", "socket.listxattr(family)", "socket.textdomain(family)", "socket.makePeriodFrame(family)", "socket.stack_size(family)", "socket.validate_map_location(family)", "socket.makeStringSeries(family)", "socket.token_bytes(family)", "socket.get_backend(family)", "socket.shearfactor(family)", "socket.clearstamps(family)"], "socket.socketpair(family, type)": ["socketpair", "socket.scandir(family, type)", "socket.listdir(family, type)", "socket.get_exec_path(family, type)", "socket.set_trace(family, type)", "socket.listxattr(family, type)", "socket.textdomain(family, type)", "socket.makePeriodFrame(family, type)", "socket.stack_size(family, type)", "socket.validate_map_location(family, type)", "socket.makeStringSeries(family, type)", "socket.token_bytes(family, type)", "socket.get_backend(family, type)", "socket.shearfactor(family, type)", "socket.clearstamps(family, type)"], "socket.socketpair(family, type, proto)": ["socketpair", "socket.scandir(family, type, proto)", "socket.listdir(family, type, proto)", "socket.get_exec_path(family, type, proto)", "socket.set_trace(family, type, proto)", "socket.listxattr(family, type, proto)", "socket.textdomain(family, type, proto)", "socket.makePeriodFrame(family, type, proto)", "socket.stack_size(family, type, proto)", "socket.validate_map_location(family, type, proto)", "socket.makeStringSeries(family, type, proto)", "socket.token_bytes(family, type, proto)", "socket.get_backend(family, type, proto)", "socket.shearfactor(family, type, proto)", "socket.clearstamps(family, type, proto)"], "socket.timeout": ["socket.timeout"], "socket_handler.close()": ["close"], "socket_handler.createSocket()": ["createSocket"], "socket_handler.emit()": ["emit"], "socket_handler.handleError()": ["handleError"], "socket_handler.makePickle(record)": ["makePickle"], "socket_handler.makeSocket()": ["makeSocket"], "socket_handler.send(packet)": ["send"], "socketserver.BaseRequestHandler": ["socketserver.BaseRequestHandler"], "socketserver.BaseServer(server_address, RequestHandlerClass)": ["BaseServer"], "socketserver.ForkingMixIn": ["socketserver.ForkingMixIn"], "socketserver.ForkingTCPServer": ["socketserver.ForkingTCPServer"], "socketserver.ForkingUDPServer": ["socketserver.ForkingUDPServer"], "socketserver.TCPServer(server_address, RequestHandlerClass)": ["TCPServer"], "socketserver.ThreadingMixIn": ["socketserver.ThreadingMixIn"], "socketserver.ThreadingUDPServer": ["socketserver.ThreadingUDPServer"], "socketserver.UDPServer(server_address, RequestHandlerClass)": ["UDPServer"], "socketserver.UDPServer(server_address, RequestHandlerClass, bind_and_activate=True)": ["UDPServer", "socketserver.UDPServer(server_address, RequestHandlerClass, bind_and_activate=False)"], "socketserver.UnixDatagramServer(server_address, RequestHandlerClass)": ["UnixDatagramServer"], "socketserver.UnixDatagramServer(server_address, RequestHandlerClass, bind_and_activate=True)": ["UnixDatagramServer", "socketserver.UnixDatagramServer(server_address, RequestHandlerClass, bind_and_activate=False)"], "socketserver.UnixStreamServer(server_address, RequestHandlerClass)": ["UnixStreamServer"], "socketserver.UnixStreamServer(server_address, RequestHandlerClass, bind_and_activate=True)": ["UnixStreamServer", "socketserver.UnixStreamServer(server_address, RequestHandlerClass, bind_and_activate=False)"], "somenamedtuple._asdict()": ["_asdict"], "somenamedtuple._field_defaults": ["somenamedtuple._field_defaults"], "somenamedtuple._fields": ["somenamedtuple._fields"], "somenamedtuple._make(iterable)": ["_make"], "somenamedtuple._replace(**kwargs)": ["_replace"], "sorted(iterable)": ["sorted", "sort(iterable)", "_shorten(iterable)", "shorten(iterable)", "msort(iterable)", "read_json(iterable)", "_std(iterable)", "std(iterable)", "source(iterable)", "searchsorted(iterable)", "setegid(iterable)", "seteuid(iterable)", "argsort(iterable)", "showturtle(iterable)", "restore(iterable)"], "sorted(iterable, key=None)": ["sorted", "sorted(iterable, key=None)", "sort(iterable, key=None)", "_shorten(iterable, key=None)", "shorten(iterable, key=None)", "msort(iterable, key=None)", "read_json(iterable, key=None)", "_std(iterable, key=None)", "std(iterable, key=None)", "source(iterable, key=None)", "searchsorted(iterable, key=None)", "setegid(iterable, key=None)", "seteuid(iterable, key=None)", "argsort(iterable, key=None)", "showturtle(iterable, key=None)"], "sorted(iterable, key=None, reverse=False)": ["sorted", "sorted(iterable, key=None, reverse=True)", "sort(iterable, key=None, reverse=False)", "_shorten(iterable, key=None, reverse=False)", "shorten(iterable, key=None, reverse=False)", "msort(iterable, key=None, reverse=False)", "read_json(iterable, key=None, reverse=False)", "_std(iterable, key=None, reverse=False)", "std(iterable, key=None, reverse=False)", "source(iterable, key=None, reverse=False)", "searchsorted(iterable, key=None, reverse=False)", "setegid(iterable, key=None, reverse=False)", "seteuid(iterable, key=None, reverse=False)", "argsort(iterable, key=None, reverse=False)", "showturtle(iterable, key=None, reverse=False)"], "sorted(iterable, reverse=False)": ["sorted", "sorted(iterable, reverse=True)", "sort(iterable, reverse=False)", "_shorten(iterable, reverse=False)", "shorten(iterable, reverse=False)", "msort(iterable, reverse=False)", "read_json(iterable, reverse=False)", "_std(iterable, reverse=False)", "std(iterable, reverse=False)", "source(iterable, reverse=False)", "searchsorted(iterable, reverse=False)", "setegid(iterable, reverse=False)", "seteuid(iterable, reverse=False)", "argsort(iterable, reverse=False)", "showturtle(iterable, reverse=False)"], "source_file_loader.is_package(fullname)": ["is_package"], "source_file_loader.load_module()": ["load_module"], "source_file_loader.load_module(name=None)": ["load_module", "source_file_loader.load_module(name=None)"], "source_file_loader.path": ["source_file_loader.path"], "source_file_loader.set_data(path, data)": ["set_data"], "source_loader.exec_module(module)": ["exec_module"], "source_loader.get_code(fullname)": ["get_code"], "source_loader.get_source(fullname)": ["get_source"], "source_loader.is_package(fullname)": ["is_package"], "source_loader.set_data(path, data)": ["set_data"], "sourceless_file_loader.get_code(fullname)": ["get_code"], "sourceless_file_loader.get_source(fullname)": ["get_source"], "sourceless_file_loader.is_package(fullname)": ["is_package"], "sourceless_file_loader.path": ["sourceless_file_loader.path"], "spwd.getspall()": ["getspall"], "spwd.getspnam(name)": ["getspnam"], "sqlite3.Connection": ["sqlite3.Connection"], "sqlite3.Cursor": ["sqlite3.Cursor"], "sqlite3.DatabaseError": ["sqlite3.DatabaseError"], "sqlite3.Error": ["sqlite3.Error"], "sqlite3.IntegrityError": ["sqlite3.IntegrityError"], "sqlite3.NotSupportedError": ["sqlite3.NotSupportedError"], "sqlite3.OperationalError": ["sqlite3.OperationalError"], "sqlite3.PARSE_COLNAMES": ["sqlite3.PARSE_COLNAMES"], "sqlite3.PARSE_DECLTYPES": ["sqlite3.PARSE_DECLTYPES"], "sqlite3.ProgrammingError": ["sqlite3.ProgrammingError"], "sqlite3.Row": ["sqlite3.Row"], "sqlite3.complete_statement(sql)": ["complete_statement"], "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements)": ["connect"], "sqlite3.connect(database, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri)": ["connect"], "sqlite3.enable_callback_tracebacks(flag)": ["enable_callback_tracebacks"], "sqlite3.register_adapter(type, callable)": ["register_adapter"], "sqlite3.register_converter(typename, callable)": ["register_converter"], "sqlite3.sqlite_version": ["sqlite3.sqlite_version"], "sqlite3.sqlite_version_info": ["sqlite3.sqlite_version_info"], "sqlite3.version": ["sqlite3.version"], "sqlite3.version_info": ["sqlite3.version_info"], "ssl.AlertDescription": ["ssl.AlertDescription"], "ssl.CHANNEL_BINDING_TYPES": ["ssl.CHANNEL_BINDING_TYPES"], "ssl.CertificateError": ["ssl.CertificateError"], "ssl.HAS_ALPN": ["ssl.HAS_ALPN"], "ssl.HAS_ECDH": ["ssl.HAS_ECDH"], "ssl.HAS_NEVER_CHECK_COMMON_NAME": ["ssl.HAS_NEVER_CHECK_COMMON_NAME"], "ssl.HAS_SNI": ["ssl.HAS_SNI"], "ssl.HAS_SSLv2": ["ssl.HAS_SSLv2"], "ssl.HAS_SSLv3": ["ssl.HAS_SSLv3"], "ssl.HAS_TLSv1": ["ssl.HAS_TLSv1"], "ssl.MemoryBIO": ["ssl.MemoryBIO"], "ssl.OPENSSL_VERSION": ["ssl.OPENSSL_VERSION"], "ssl.OPENSSL_VERSION_INFO": ["ssl.OPENSSL_VERSION_INFO"], "ssl.OPENSSL_VERSION_NUMBER": ["ssl.OPENSSL_VERSION_NUMBER"], "ssl.OP_ALL": ["ssl.OP_ALL"], "ssl.OP_CIPHER_SERVER_PREFERENCE": ["ssl.OP_CIPHER_SERVER_PREFERENCE"], "ssl.OP_ENABLE_MIDDLEBOX_COMPAT": ["ssl.OP_ENABLE_MIDDLEBOX_COMPAT"], "ssl.OP_NO_COMPRESSION": ["ssl.OP_NO_COMPRESSION"], "ssl.OP_NO_RENEGOTIATION": ["ssl.OP_NO_RENEGOTIATION"], "ssl.OP_NO_SSLv3": ["ssl.OP_NO_SSLv3"], "ssl.OP_NO_TICKET": ["ssl.OP_NO_TICKET"], "ssl.OP_NO_TLSv1": ["ssl.OP_NO_TLSv1"], "ssl.OP_SINGLE_DH_USE": ["ssl.OP_SINGLE_DH_USE"], "ssl.OP_SINGLE_ECDH_USE": ["ssl.OP_SINGLE_ECDH_USE"], "ssl.Options": ["ssl.Options"], "ssl.PEM_cert_to_DER_cert(PEM_cert_string)": ["PEM_cert_to_DER_cert", "ssl.DER_cert_to_PEM_cert(PEM_cert_string)", "ssl.cert_time_to_seconds(PEM_cert_string)", "ssl.dtype_to_descr(PEM_cert_string)", "ssl.descr_to_dtype(PEM_cert_string)", "ssl.parse_content_type_header(PEM_cert_string)", "ssl._gather_to_leader(PEM_cert_string)", "ssl._make_date_converter(PEM_cert_string)", "ssl._get_converter(PEM_cert_string)", "ssl._coerce_method(PEM_cert_string)", "ssl.get_module_concrete_type(PEM_cert_string)", "ssl.register_converter_cb(PEM_cert_string)", "ssl.deregister_matplotlib_converters(PEM_cert_string)", "ssl._get_ptext_to_endchars(PEM_cert_string)", "ssl._biject_to_independent(PEM_cert_string)"], "ssl.PROTOCOL_SSLv2": ["ssl.PROTOCOL_SSLv2"], "ssl.PROTOCOL_SSLv3": ["ssl.PROTOCOL_SSLv3"], "ssl.PROTOCOL_TLS": ["ssl.PROTOCOL_TLS"], "ssl.PROTOCOL_TLS_SERVER": ["ssl.PROTOCOL_TLS_SERVER"], "ssl.PROTOCOL_TLSv1": ["ssl.PROTOCOL_TLSv1"], "ssl.PROTOCOL_TLSv1_1": ["ssl.PROTOCOL_TLSv1_1"], "ssl.RAND_add(bytes, entropy)": ["RAND_add", "ssl.rand_(bytes, entropy)", "ssl.add_newdoc(bytes, entropy)", "ssl.adagrad(bytes, entropy)", "ssl.reduce_add(bytes, entropy)", "ssl.randu_array(bytes, entropy)", "ssl.rands_array(bytes, entropy)", "ssl._add_margins(bytes, entropy)", "ssl._hash_add(bytes, entropy)", "ssl.read_hdf(bytes, entropy)", "ssl.rands(bytes, entropy)", "ssl._addr_only(bytes, entropy)", "ssl.add_alias(bytes, entropy)", "ssl.add_codec(bytes, entropy)", "ssl.read_code(bytes, entropy)"], "ssl.RAND_bytes(num)": ["RAND_bytes", "ssl._read_bytes(num)", "ssl.read_bytes4(num)", "ssl.read_bytes8(num)", "ssl.read_bytes1(num)", "ssl.RAND_pseudo_bytes(num)", "ssl._load_from_bytes(num)", "ssl.diff_bytes(num)", "ssl.to_bytes(num)", "ssl.token_bytes(num)", "ssl.asbytes_nested(num)", "ssl._wrap_bytes_repr(num)", "ssl._atleast_nd(num)", "ssl.asbytes(num)", "ssl._random_getnode(num)"], "ssl.RAND_egd(path)": ["RAND_egd"], "ssl.RAND_pseudo_bytes(num)": ["RAND_pseudo_bytes", "ssl.RAND_bytes(num)", "ssl._read_bytes(num)", "ssl.read_bytes4(num)", "ssl.read_bytes8(num)", "ssl.read_bytes1(num)", "ssl._load_from_bytes(num)", "ssl._wrap_bytes_repr(num)", "ssl.asbytes_nested(num)", "ssl.token_bytes(num)", "ssl.to_bytes(num)", "ssl.unquote_to_bytes(num)", "ssl._set_wrap_both(num)", "ssl._is_bytes_like(num)", "ssl.diff_bytes(num)"], "ssl.RAND_status()": ["RAND_status", "ssl.random_state()", "ssl.add_func_stats()", "ssl.rands()", "ssl._get_stats()", "ssl._path_stat()", "ssl.test_rast()", "ssl.translate()", "ssl._task_print_stack()", "ssl.__RandomState_ctor()", "ssl.__randomstate_ctor()", "ssl._read_short()", "ssl.read_table()", "ssl.expandtabs()", "ssl.load_tests()"], "ssl.SSLCertVerificationError": ["ssl.SSLCertVerificationError"], "ssl.SSLContext()": ["SSLContext"], "ssl.SSLContext(protocol=PROTOCOL_TLS)": ["SSLContext"], "ssl.SSLEOFError": ["ssl.SSLEOFError"], "ssl.SSLError": ["ssl.SSLError"], "ssl.SSLObject": ["ssl.SSLObject"], "ssl.SSLSession": ["ssl.SSLSession"], "ssl.SSLSyscallError": ["ssl.SSLSyscallError"], "ssl.SSLWantWriteError": ["ssl.SSLWantWriteError"], "ssl.SSLZeroReturnError": ["ssl.SSLZeroReturnError"], "ssl.TLSVersion": ["ssl.TLSVersion"], "ssl.VERIFY_CRL_CHECK_CHAIN": ["ssl.VERIFY_CRL_CHECK_CHAIN"], "ssl.VERIFY_DEFAULT": ["ssl.VERIFY_DEFAULT"], "ssl.VERIFY_X509_STRICT": ["ssl.VERIFY_X509_STRICT"], "ssl.VERIFY_X509_TRUSTED_FIRST": ["ssl.VERIFY_X509_TRUSTED_FIRST"], "ssl.VerifyFlags": ["ssl.VerifyFlags"], "ssl.VerifyMode": ["ssl.VerifyMode"], "ssl.cert_time_to_seconds(cert_time)": ["cert_time_to_seconds", "ssl.PEM_cert_to_DER_cert(cert_time)", "ssl.DER_cert_to_PEM_cert(cert_time)", "ssl._code_to_timestamp_pyc(cert_time)", "ssl.get_section(cert_time)", "ssl.convert_to_index_sliceable(cert_time)", "ssl.get_qcontent(cert_time)", "ssl.nested_to_record(cert_time)", "ssl._test_selector_event(cert_time)", "ssl._coerce_scalar_to_timedelta_type(cert_time)", "ssl._check_timeout(cert_time)", "ssl._reconstructor(cert_time)", "ssl._coerce_method(cert_time)", "ssl._count_to_size(cert_time)", "ssl._try_convert_dates(cert_time)"], "ssl.create_default_context()": ["create_default_context", "ssl._create_default_https_context()", "ssl.create_archive()", "ssl.get_default_compiler()", "ssl._handle_date_column()", "ssl.rc_context()", "ssl.create_unicode_buffer()", "ssl.readmodule_ex()", "ssl.create_dynamic()", "ssl.extract_tb()", "ssl._count_nonzero_dispatcher()", "ssl._average_dispatcher()", "ssl.interact()", "ssl.boxplot_frame()", "ssl.create_subprocess_shell()"], "ssl.create_default_context(cadata=None)": ["create_default_context", "ssl.create_default_context(cadata=None)", "ssl._create_default_https_context(cadata=None)", "ssl.create_archive(cadata=None)", "ssl.get_default_compiler(cadata=None)", "ssl._handle_date_column(cadata=None)", "ssl.rc_context(cadata=None)", "ssl.create_unicode_buffer(cadata=None)", "ssl.readmodule_ex(cadata=None)", "ssl.create_dynamic(cadata=None)", "ssl.extract_tb(cadata=None)", "ssl._count_nonzero_dispatcher(cadata=None)", "ssl._average_dispatcher(cadata=None)", "ssl.interact(cadata=None)", "ssl.boxplot_frame(cadata=None)"], "ssl.create_default_context(cafile=None)": ["create_default_context", "ssl.create_default_context(cafile=None)", "ssl._create_default_https_context(cafile=None)", "ssl.create_archive(cafile=None)", "ssl.get_default_compiler(cafile=None)", "ssl._handle_date_column(cafile=None)", "ssl.rc_context(cafile=None)", "ssl.create_unicode_buffer(cafile=None)", "ssl.readmodule_ex(cafile=None)", "ssl.create_dynamic(cafile=None)", "ssl.extract_tb(cafile=None)", "ssl._count_nonzero_dispatcher(cafile=None)", "ssl._average_dispatcher(cafile=None)", "ssl.interact(cafile=None)", "ssl.boxplot_frame(cafile=None)"], "ssl.create_default_context(purpose=Purpose.SERVER_AUTH, capath=None)": ["create_default_context", "ssl.create_default_context(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl._create_default_https_context(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl.create_archive(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl.get_default_compiler(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl._handle_date_column(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl.rc_context(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl.create_unicode_buffer(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl.readmodule_ex(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl.create_dynamic(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl.extract_tb(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl._count_nonzero_dispatcher(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl._average_dispatcher(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl.interact(purpose=Purpose.SERVER_AUTH, capath=None)", "ssl.boxplot_frame(purpose=Purpose.SERVER_AUTH, capath=None)"], "ssl.enum_certificates(store_name)": ["enum_certificates"], "ssl.enum_crls(store_name)": ["enum_crls"], "ssl.get_default_verify_paths()": ["get_default_verify_paths", "ssl._get_default_tempdir()", "ssl._update_default_pg()", "ssl.get_default_qat_qconfig()", "ssl._get_default_store()", "ssl.get_default_val()", "ssl._get_default_scheme()", "ssl.set_default_tensor_type()", "ssl._get_default_group()", "ssl._default_locale_getter()", "ssl.default_eval_fn()", "ssl._get_defaults()", "ssl.get_default_qconfig()", "ssl._get_default_invalidation_mode()", "ssl._delete_dispatcher()"], "ssl.get_server_certificate(addr)": ["get_server_certificate", "ssl.tensorinv(addr)", "ssl.setcbreak(addr)", "ssl.diag_indices(addr)", "ssl.setraw(addr)", "ssl._normalize_module(addr)", "ssl._dumps(addr)", "ssl._get_fill_value(addr)", "ssl.create_subprocess_exec(addr)", "ssl.create_subprocess_shell(addr)", "ssl._create_default_https_context(addr)", "ssl._iter_filter(addr)", "ssl.add_observer_(addr)", "ssl.decorate_methods(addr)", "ssl._convert_listlike_datetimes(addr)"], "ssl.get_server_certificate(addr, ssl_version=PROTOCOL_TLS)": ["get_server_certificate", "ssl.tensorinv(addr, ssl_version=PROTOCOL_TLS)", "ssl.setcbreak(addr, ssl_version=PROTOCOL_TLS)", "ssl.diag_indices(addr, ssl_version=PROTOCOL_TLS)", "ssl.setraw(addr, ssl_version=PROTOCOL_TLS)", "ssl._normalize_module(addr, ssl_version=PROTOCOL_TLS)", "ssl._dumps(addr, ssl_version=PROTOCOL_TLS)", "ssl._get_fill_value(addr, ssl_version=PROTOCOL_TLS)", "ssl.create_subprocess_exec(addr, ssl_version=PROTOCOL_TLS)", "ssl.create_subprocess_shell(addr, ssl_version=PROTOCOL_TLS)", "ssl._create_default_https_context(addr, ssl_version=PROTOCOL_TLS)", "ssl._iter_filter(addr, ssl_version=PROTOCOL_TLS)", "ssl.add_observer_(addr, ssl_version=PROTOCOL_TLS)", "ssl.decorate_methods(addr, ssl_version=PROTOCOL_TLS)", "ssl._convert_listlike_datetimes(addr, ssl_version=PROTOCOL_TLS)"], "ssl.match_hostname(cert, hostname)": ["match_hostname", "ssl._dnsname_match(cert, hostname)", "ssl._declname_match(cert, hostname)", "ssl.get_path_names(cert, hostname)", "ssl._match_abbrev(cert, hostname)", "ssl._safe_gethostbyname(cert, hostname)", "ssl.get_close_matches(cert, hostname)", "ssl._choose_dispatcher(cert, hostname)", "ssl.fnmatch(cert, hostname)", "ssl._get_torch_home(cert, hostname)", "ssl.update_names_with_list(cert, hostname)", "ssl._get_normal_name(cert, hostname)", "ssl._ipaddress_match(cert, hostname)", "ssl.temppath(cert, hostname)", "ssl._declstringlit_match(cert, hostname)"], "ssl.wrap_socket(sock)": ["wrap_socket", "ssl._unwrap_dispatcher(sock)", "ssl.get_block_type(sock)", "ssl.wrap_future(sock)", "ssl.strip(sock)", "ssl.rc_context(sock)", "ssl.lstrip(sock)", "ssl.setpos(sock)", "ssl.escape(sock)", "ssl.rstrip(sock)", "ssl.unwrap(sock)", "ssl._make_skipna_wrapper(sock)", "ssl._assert_warns_context(sock)", "ssl._transpose_dispatcher(sock)", "ssl._strip_dispatcher(sock)"], "ssl.wrap_socket(sock, ciphers=None)": ["wrap_socket", "ssl.wrap_socket(sock, ciphers=None)", "ssl._unwrap_dispatcher(sock, ciphers=None)", "ssl.get_block_type(sock, ciphers=None)", "ssl.wrap_future(sock, ciphers=None)", "ssl.strip(sock, ciphers=None)", "ssl.rc_context(sock, ciphers=None)", "ssl.lstrip(sock, ciphers=None)", "ssl.setpos(sock, ciphers=None)", "ssl.escape(sock, ciphers=None)", "ssl.rstrip(sock, ciphers=None)", "ssl.unwrap(sock, ciphers=None)", "ssl._make_skipna_wrapper(sock, ciphers=None)", "ssl._assert_warns_context(sock, ciphers=None)", "ssl._transpose_dispatcher(sock, ciphers=None)"], "startupinfo.dwFlags": ["startupinfo.dwFlags"], "startupinfo.hStdInput": ["startupinfo.hStdInput"], "startupinfo.hStdOutput": ["startupinfo.hStdOutput"], "startupinfo.wShowWindow": ["startupinfo.wShowWindow"], "stat.SF_NOUNLINK": ["stat.SF_NOUNLINK"], "stat.ST_ATIME": ["stat.ST_ATIME"], "stat.ST_CTIME": ["stat.ST_CTIME"], "stat.ST_GID": ["stat.ST_GID"], "stat.ST_MODE": ["stat.ST_MODE"], "stat.ST_MTIME": ["stat.ST_MTIME"], "stat.ST_NLINK": ["stat.ST_NLINK"], "stat.ST_SIZE": ["stat.ST_SIZE"], "stat.ST_UID": ["stat.ST_UID"], "stat.S_ENFMT": ["stat.S_ENFMT"], "stat.S_IEXEC": ["stat.S_IEXEC"], "stat.S_IFBLK": ["stat.S_IFBLK"], "stat.S_IFLNK": ["stat.S_IFLNK"], "stat.S_IFPORT": ["stat.S_IFPORT"], "stat.S_IMODE(mode)": ["S_IMODE"], "stat.S_IREAD": ["stat.S_IREAD"], "stat.S_IRGRP": ["stat.S_IRGRP"], "stat.S_IROTH": ["stat.S_IROTH"], "stat.S_IRUSR": ["stat.S_IRUSR"], "stat.S_IRWXG": ["stat.S_IRWXG"], "stat.S_IRWXO": ["stat.S_IRWXO"], "stat.S_IRWXU": ["stat.S_IRWXU"], "stat.S_ISBLK(mode)": ["S_ISBLK"], "stat.S_ISCHR(mode)": ["S_ISCHR"], "stat.S_ISDIR(mode)": ["S_ISDIR"], "stat.S_ISFIFO(mode)": ["S_ISFIFO"], "stat.S_ISPORT(mode)": ["S_ISPORT"], "stat.S_ISUID": ["stat.S_ISUID"], "stat.S_IWGRP": ["stat.S_IWGRP"], "stat.S_IWOTH": ["stat.S_IWOTH"], "stat.S_IXGRP": ["stat.S_IXGRP"], "stat.S_IXOTH": ["stat.S_IXOTH"], "stat.S_IXUSR": ["stat.S_IXUSR"], "stat.UF_COMPRESSED": ["stat.UF_COMPRESSED"], "stat.UF_HIDDEN": ["stat.UF_HIDDEN"], "stat.UF_IMMUTABLE": ["stat.UF_IMMUTABLE"], "stat.UF_NODUMP": ["stat.UF_NODUMP"], "stat.UF_NOUNLINK": ["stat.UF_NOUNLINK"], "stat.filemode(mode)": ["filemode"], "stat_result.st_atime": ["stat_result.st_atime"], "stat_result.st_atime_ns": ["stat_result.st_atime_ns"], "stat_result.st_birthtime": ["stat_result.st_birthtime"], "stat_result.st_blksize": ["stat_result.st_blksize"], "stat_result.st_ctime": ["stat_result.st_ctime"], "stat_result.st_ctime_ns": ["stat_result.st_ctime_ns"], "stat_result.st_file_attributes": ["stat_result.st_file_attributes"], "stat_result.st_flags": ["stat_result.st_flags"], "stat_result.st_fstype": ["stat_result.st_fstype"], "stat_result.st_gen": ["stat_result.st_gen"], "stat_result.st_gid": ["stat_result.st_gid"], "stat_result.st_ino": ["stat_result.st_ino"], "stat_result.st_mode": ["stat_result.st_mode"], "stat_result.st_mtime": ["stat_result.st_mtime"], "stat_result.st_mtime_ns": ["stat_result.st_mtime_ns"], "stat_result.st_nlink": ["stat_result.st_nlink"], "stat_result.st_rsize": ["stat_result.st_rsize"], "stat_result.st_size": ["stat_result.st_size"], "stat_result.st_uid": ["stat_result.st_uid"], "statistic.count": ["statistic.count"], "statistic.size": ["statistic.size"], "statistic_diff.count": ["statistic_diff.count"], "statistic_diff.count_diff": ["statistic_diff.count_diff"], "statistic_diff.size": ["statistic_diff.size"], "statistic_diff.size_diff": ["statistic_diff.size_diff"], "statistic_diff.traceback": ["statistic_diff.traceback"], "statistics.StatisticsError": ["statistics.StatisticsError"], "statistics.harmonic_mean(data)": ["harmonic_mean", "statistics.nanmean(data)", "statistics.median_high(data)", "statistics._nanmedian(data)", "statistics.nanmedian(data)", "statistics.hermcompanion(data)", "statistics.argmin(data)", "statistics.read_magic(data)", "statistics.hermecompanion(data)", "statistics._clean_args(data)", "statistics.charmap_encode(data)", "statistics.median_grouped(data)", "statistics.median_low(data)", "statistics.nargminmax(data)", "statistics.hamming(data)"], "statistics.mean(data)": ["mean", "statistics.main(data)", "statistics.nanmean(data)", "statistics._mean(data)", "statistics.imread(data)", "statistics.max(data)", "statistics.mat(data)", "statistics.min(data)", "statistics.bmat(data)", "statistics.open(data)", "statistics._nan_mask(data)", "statistics._median(data)", "statistics.makeFloatIndex(data)", "statistics.make_mask_none(data)", "statistics._namespaces(data)"], "statistics.median(data)": ["median", "statistics._median(data)", "statistics._nanmedian(data)", "statistics.main(data)", "statistics._nanmedian_small(data)", "statistics.distance(data)", "statistics.rmdir(data)", "statistics.nanmedian(data)", "statistics._mean(data)", "statistics.argmin(data)", "statistics.imread(data)", "statistics._decode_line(data)", "statistics.ediff1d(data)", "statistics.makeUnicodeIndex(data)", "statistics.dis(data)"], "statistics.median_grouped(data)": ["median_grouped", "statistics.getframeinfo(data)", "statistics.hermeint(data)", "statistics._return_output(data)", "statistics.read_stringnl(data)", "statistics.getouterframes(data)", "statistics.guess_type(data)", "statistics.increment_lineno(data)", "statistics.remove_tree(data)", "statistics.optimize_frozen_module(data)", "statistics.hermint(data)", "statistics.getdata(data)", "statistics._return_counts(data)", "statistics._return_inverse(data)", "statistics.hermeder(data)"], "statistics.median_grouped(data, interval=1)": ["median_grouped", "statistics.median_grouped(data, interval='1')", "statistics.getframeinfo(data, interval=1)", "statistics.hermeint(data, interval=1)", "statistics._return_output(data, interval=1)", "statistics.read_stringnl(data, interval=1)", "statistics.getouterframes(data, interval=1)", "statistics.guess_type(data, interval=1)", "statistics.increment_lineno(data, interval=1)", "statistics.remove_tree(data, interval=1)", "statistics.optimize_frozen_module(data, interval=1)", "statistics.hermint(data, interval=1)", "statistics.getdata(data, interval=1)", "statistics._return_counts(data, interval=1)", "statistics._return_inverse(data, interval=1)"], "statistics.median_high(data)": ["median_high", "statistics.median(data)", "statistics._median(data)", "statistics.median_low(data)", "statistics._median_dispatcher(data)", "statistics.median_grouped(data)", "statistics._nanmedian(data)", "statistics.nanmedian(data)", "statistics.harmonic_mean(data)", "statistics.window_height(data)", "statistics._nanmedian_dispatcher(data)", "statistics.sigpending(data)", "statistics._min_int(data)", "statistics.hessian(data)", "statistics.heading(data)"], "statistics.median_low(data)": ["median_low", "statistics.median(data)", "statistics._median(data)", "statistics.median_high(data)", "statistics.median_grouped(data)", "statistics._nanmedian(data)", "statistics.nanmedian(data)", "statistics.block_diag(data)", "statistics._close_stdin(data)", "statistics.mean(data)", "statistics._nanmedian1d(data)", "statistics._mean(data)", "statistics._pin_memory_loop(data)", "statistics._follow_symlinks(data)", "statistics._read_long(data)"], "statistics.mode(data)": ["mode", "statistics.value_counts(data)", "statistics.hash_pandas_object(data)", "statistics.polyder(data)", "statistics.hermder(data)", "statistics._load(data)", "statistics.hermeder(data)", "statistics.load(data)", "statistics.loads(data)", "statistics._loads(data)", "statistics.remove_tree(data)", "statistics.browse(data)", "statistics.legder(data)", "statistics._arraymethod(data)", "statistics.ondrag(data)"], "statistics.pstdev(data)": ["pstdev", "statistics.stdev(data)", "statistics._std(data)", "statistics.std(data)", "statistics.psd(data)", "statistics.stem(data)", "statistics.parse(data)", "statistics.getenv(data)", "statistics.nanstd(data)", "statistics.seterr(data)", "statistics.listen(data)", "statistics.as_strided(data)", "statistics.mkstemp(data)", "statistics.scatter(data)", "statistics.getenvb(data)"], "statistics.pstdev(data, mu=None)": ["pstdev", "statistics.pstdev(data, mu=None)", "statistics.stdev(data, mu=None)", "statistics._std(data, mu=None)", "statistics.std(data, mu=None)", "statistics.psd(data, mu=None)", "statistics.stem(data, mu=None)", "statistics.parse(data, mu=None)", "statistics.getenv(data, mu=None)", "statistics.nanstd(data, mu=None)", "statistics.seterr(data, mu=None)", "statistics.listen(data, mu=None)", "statistics.as_strided(data, mu=None)", "statistics.mkstemp(data, mu=None)", "statistics.scatter(data, mu=None)"], "statistics.pvariance(data)": ["pvariance", "statistics.variance(data)", "statistics.distance(data)", "statistics.parse(data)", "statistics.vander(data)", "statistics.pprint(data)", "statistics.argmin(data)", "statistics.axline(data)", "statistics.tracer(data)", "statistics.charmap_encode(data)", "statistics.askretrycancel(data)", "statistics.margins(data)", "statistics._var(data)", "statistics.matrix_rank(data)", "statistics.print_stack(data)"], "statistics.pvariance(data, mu=None)": ["pvariance", "statistics.pvariance(data, mu=None)", "statistics.variance(data, mu=None)", "statistics.distance(data, mu=None)", "statistics.parse(data, mu=None)", "statistics.vander(data, mu=None)", "statistics.pprint(data, mu=None)", "statistics.argmin(data, mu=None)", "statistics.axline(data, mu=None)", "statistics.tracer(data, mu=None)", "statistics.charmap_encode(data, mu=None)", "statistics.askretrycancel(data, mu=None)", "statistics.margins(data, mu=None)", "statistics._var(data, mu=None)", "statistics.matrix_rank(data, mu=None)"], "statistics.stdev(data)": ["stdev", "statistics.pstdev(data)", "statistics._std(data)", "statistics.std(data)", "statistics.stem(data)", "statistics.getenv(data)", "statistics.nanstd(data)", "statistics.seterr(data)", "statistics.listen(data)", "statistics.as_strided(data)", "statistics.mkstemp(data)", "statistics.scatter(data)", "statistics.psd(data)", "statistics.getenvb(data)", "statistics.testmod(data)"], "statistics.stdev(data, xbar=None)": ["stdev", "statistics.stdev(data, xbar=None)", "statistics.pstdev(data, xbar=None)", "statistics._std(data, xbar=None)", "statistics.std(data, xbar=None)", "statistics.stem(data, xbar=None)", "statistics.getenv(data, xbar=None)", "statistics.nanstd(data, xbar=None)", "statistics.seterr(data, xbar=None)", "statistics.listen(data, xbar=None)", "statistics.as_strided(data, xbar=None)", "statistics.mkstemp(data, xbar=None)", "statistics.scatter(data, xbar=None)", "statistics.psd(data, xbar=None)", "statistics.getenvb(data, xbar=None)"], "statistics.variance(data)": ["variance", "statistics.pvariance(data)", "statistics.distance(data)", "statistics.vander(data)", "statistics.argmin(data)", "statistics.axline(data)", "statistics.tracer(data)", "statistics._var(data)", "statistics.charmap_encode(data)", "statistics.askretrycancel(data)", "statistics.var(data)", "statistics.margins(data)", "statistics.matrix_rank(data)", "statistics.average(data)", "statistics.askokcancel(data)"], "statistics.variance(data, xbar=None)": ["variance", "statistics.variance(data, xbar=None)", "statistics.pvariance(data, xbar=None)", "statistics.distance(data, xbar=None)", "statistics.vander(data, xbar=None)", "statistics.argmin(data, xbar=None)", "statistics.axline(data, xbar=None)", "statistics.tracer(data, xbar=None)", "statistics._var(data, xbar=None)", "statistics.charmap_encode(data, xbar=None)", "statistics.askretrycancel(data, xbar=None)", "statistics.var(data, xbar=None)", "statistics.margins(data, xbar=None)", "statistics.matrix_rank(data, xbar=None)", "statistics.average(data, xbar=None)"], "stats.add(*filenames)": ["add"], "stats.dump_stats(filename)": ["dump_stats"], "stats.print_callees(*restrictions)": ["print_callees"], "stats.print_callers(*restrictions)": ["print_callers"], "stats.print_stats(*restrictions)": ["print_stats"], "stats.reverse_order()": ["reverse_order"], "stats.sort_stats(*keys)": ["sort_stats"], "stats.strip_dirs()": ["strip_dirs"], "str()": ["str", "__str__()", "_str()", "st()", "strip()", "asstr()", "start()", "lstrip()", "strong()", "_std()", "std()", "seterr()", "rstrip()", "stream()", "setraw()"], "str(encoding='utf-8')": ["str", "str(encoding=5)", "__str__(encoding='utf-8')", "_str(encoding='utf-8')", "st(encoding='utf-8')", "strip(encoding='utf-8')", "asstr(encoding='utf-8')", "start(encoding='utf-8')", "lstrip(encoding='utf-8')", "strong(encoding='utf-8')", "_std(encoding='utf-8')", "std(encoding='utf-8')", "seterr(encoding='utf-8')", "rstrip(encoding='utf-8')", "stream(encoding='utf-8')"], "str(encoding='utf-8', errors='strict')": ["str", "str(encoding=5.0, errors=6.0)", "__str__(encoding='utf-8', errors='strict')", "_str(encoding='utf-8', errors='strict')", "st(encoding='utf-8', errors='strict')", "strip(encoding='utf-8', errors='strict')", "asstr(encoding='utf-8', errors='strict')", "start(encoding='utf-8', errors='strict')", "lstrip(encoding='utf-8', errors='strict')", "strong(encoding='utf-8', errors='strict')", "_std(encoding='utf-8', errors='strict')", "std(encoding='utf-8', errors='strict')", "seterr(encoding='utf-8', errors='strict')", "rstrip(encoding='utf-8', errors='strict')", "stream(encoding='utf-8', errors='strict')"], "str(errors='strict')": ["str", "str(errors=6)", "__str__(errors='strict')", "_str(errors='strict')", "st(errors='strict')", "strip(errors='strict')", "asstr(errors='strict')", "start(errors='strict')", "lstrip(errors='strict')", "strong(errors='strict')", "_std(errors='strict')", "std(errors='strict')", "seterr(errors='strict')", "rstrip(errors='strict')", "stream(errors='strict')"], "str(object='')": ["str", "str(object=0)", "__str__(object='')", "_str(object='')", "st(object='')", "strip(object='')", "asstr(object='')", "start(object='')", "lstrip(object='')", "strong(object='')", "_std(object='')", "std(object='')", "seterr(object='')", "rstrip(object='')", "stream(object='')"], "str(object=b'')": ["str", "__str__(object=b'')", "_str(object=b'')", "st(object=b'')", "strip(object=b'')", "asstr(object=b'')", "start(object=b'')", "lstrip(object=b'')", "strong(object=b'')", "_std(object=b'')", "std(object=b'')", "seterr(object=b'')", "rstrip(object=b'')", "stream(object=b'')", "setraw(object=b'')"], "str(object=b'', encoding='utf-8')": ["str", "str(object=b'', encoding=5)", "__str__(object=b'', encoding='utf-8')", "_str(object=b'', encoding='utf-8')", "st(object=b'', encoding='utf-8')", "strip(object=b'', encoding='utf-8')", "asstr(object=b'', encoding='utf-8')", "start(object=b'', encoding='utf-8')", "lstrip(object=b'', encoding='utf-8')", "strong(object=b'', encoding='utf-8')", "_std(object=b'', encoding='utf-8')", "std(object=b'', encoding='utf-8')", "seterr(object=b'', encoding='utf-8')", "rstrip(object=b'', encoding='utf-8')", "stream(object=b'', encoding='utf-8')"], "str(object=b'', encoding='utf-8', errors='strict')": ["str", "str(object=b'', encoding=5.0, errors=6)", "__str__(object=b'', encoding='utf-8', errors='strict')", "_str(object=b'', encoding='utf-8', errors='strict')", "st(object=b'', encoding='utf-8', errors='strict')", "strip(object=b'', encoding='utf-8', errors='strict')", "asstr(object=b'', encoding='utf-8', errors='strict')", "start(object=b'', encoding='utf-8', errors='strict')", "lstrip(object=b'', encoding='utf-8', errors='strict')", "strong(object=b'', encoding='utf-8', errors='strict')", "_std(object=b'', encoding='utf-8', errors='strict')", "std(object=b'', encoding='utf-8', errors='strict')", "seterr(object=b'', encoding='utf-8', errors='strict')", "rstrip(object=b'', encoding='utf-8', errors='strict')", "stream(object=b'', encoding='utf-8', errors='strict')"], "str(object=b'', errors='strict')": ["str", "str(object=b'', errors=6)", "__str__(object=b'', errors='strict')", "_str(object=b'', errors='strict')", "st(object=b'', errors='strict')", "strip(object=b'', errors='strict')", "asstr(object=b'', errors='strict')", "start(object=b'', errors='strict')", "lstrip(object=b'', errors='strict')", "strong(object=b'', errors='strict')", "_std(object=b'', errors='strict')", "std(object=b'', errors='strict')", "seterr(object=b'', errors='strict')", "rstrip(object=b'', errors='strict')", "stream(object=b'', errors='strict')"], "str.capitalize()": ["capitalize"], "str.center(width)": ["center"], "str.center(width, fillchar)": ["center"], "str.count(sub)": ["count"], "str.count(sub, start)": ["count"], "str.count(sub, start, end)": ["count"], "str.encode(encoding=\"utf-8\")": ["encode", "str.encode(encoding=5)"], "str.encode(encoding=\"utf-8\", errors=\"strict\")": ["encode", "str.encode(encoding=5, errors=6)"], "str.endswith(suffix)": ["endswith"], "str.endswith(suffix, start)": ["endswith"], "str.endswith(suffix, start, end)": ["endswith"], "str.expandtabs()": ["expandtabs"], "str.expandtabs(tabsize=8)": ["expandtabs", "str.expandtabs(tabsize='8')"], "str.find(sub)": ["find"], "str.find(sub, start)": ["find"], "str.find(sub, start, end)": ["find"], "str.format(*args, **kwargs)": ["format"], "str.format_map(mapping)": ["format_map"], "str.index(sub)": ["index"], "str.index(sub, start)": ["index"], "str.index(sub, start, end)": ["index"], "str.isalnum()": ["isalnum"], "str.isalpha()": ["isalpha"], "str.isascii()": ["isascii"], "str.isdigit()": ["isdigit"], "str.isidentifier()": ["isidentifier"], "str.islower()": ["islower"], "str.isnumeric()": ["isnumeric"], "str.isprintable()": ["isprintable"], "str.isspace()": ["isspace"], "str.istitle()": ["istitle"], "str.isupper()": ["isupper"], "str.join(iterable)": ["join"], "str.ljust(width)": ["ljust"], "str.ljust(width, fillchar)": ["ljust"], "str.lower()": ["lower"], "str.lstrip(chars)": ["lstrip"], "str.maketrans(x)": ["maketrans"], "str.maketrans(x, y)": ["maketrans"], "str.maketrans(x, y, z)": ["maketrans"], "str.partition(sep)": ["partition"], "str.replace(old, new)": ["replace"], "str.replace(old, new, count)": ["replace"], "str.rfind(sub)": ["rfind"], "str.rfind(sub, start, end)": ["rfind"], "str.rindex(sub)": ["rindex"], "str.rindex(sub, start)": ["rindex"], "str.rindex(sub, start, end)": ["rindex"], "str.rjust(width)": ["rjust"], "str.rjust(width, fillchar)": ["rjust"], "str.rpartition(sep)": ["rpartition"], "str.rsplit()": ["rsplit"], "str.rsplit(maxsplit=-1)": ["rsplit", "str.rsplit(maxsplit=(- '1'))"], "str.rsplit(sep=None)": ["rsplit", "str.rsplit(sep=None)"], "str.rsplit(sep=None, maxsplit=-1)": ["rsplit", "str.rsplit(sep=None, maxsplit=(- 1))", "str.rsplit(sep=None, maxsplit=(- '1'))"], "str.rstrip()": ["rstrip"], "str.rstrip(chars)": ["rstrip"], "str.split()": ["split"], "str.split(maxsplit=-1)": ["split", "str.split(maxsplit=(- '1'))"], "str.split(sep=None)": ["split", "str.split(sep=None)"], "str.split(sep=None, maxsplit=-1)": ["split", "str.split(sep=None, maxsplit=(- 1))", "str.split(sep=None, maxsplit=(- '1'))"], "str.splitlines()": ["splitlines"], "str.splitlines(keepends)": ["splitlines"], "str.startswith(prefix)": ["startswith"], "str.startswith(prefix, start, end)": ["startswith"], "str.strip()": ["strip"], "str.strip(chars)": ["strip"], "str.swapcase()": ["swapcase"], "str.translate(table)": ["translate"], "str.zfill(width)": ["zfill"], "stream_handler.emit(record)": ["emit"], "stream_handler.setStream(stream)": ["setStream"], "stream_reader.read()": ["read"], "stream_reader.read(n=-1)": ["read", "stream_reader.read(n=(- '1'))"], "stream_reader.read(size)": ["read"], "stream_reader.read(size, chars)": ["read"], "stream_reader.read(size, chars, firstline)": ["read"], "stream_reader.readexactly(n)": ["readexactly"], "stream_reader.readline()": ["readline"], "stream_reader.readline(size)": ["readline"], "stream_reader.readline(size, keepends)": ["readline"], "stream_reader.readlines()": ["readlines"], "stream_reader.readlines(sizehint)": ["readlines"], "stream_reader.readlines(sizehint, keepends)": ["readlines"], "stream_reader.readuntil()": ["readuntil"], "stream_reader.readuntil(separator=b'\\n')": ["readuntil"], "stream_reader.reset()": ["reset"], "stream_writer.close()": ["close"], "stream_writer.drain()": ["drain"], "stream_writer.get_extra_info(name)": ["get_extra_info"], "stream_writer.get_extra_info(name, default=None)": ["get_extra_info", "stream_writer.get_extra_info(name, default=None)"], "stream_writer.is_closing()": ["is_closing"], "stream_writer.reset()": ["reset"], "stream_writer.transport": ["stream_writer.transport"], "stream_writer.wait_closed()": ["wait_closed"], "stream_writer.write(data)": ["write"], "stream_writer.write(object)": ["write"], "stream_writer.write_eof()": ["write_eof"], "stream_writer.writelines(data)": ["writelines"], "stream_writer.writelines(list)": ["writelines"], "string.Formatter": ["string.Formatter"], "string.Template(template)": ["Template"], "string.ascii_lowercase": ["string.ascii_lowercase"], "string.ascii_uppercase": ["string.ascii_uppercase"], "string.capwords(s)": ["capwords", "string.nanprod(s)", "string.fromrecords(s)", "string.towards(s)", "string.cumprod(s)", "string.prod(s)", "string._prod(s)", "string.cond(s)", "string.register_cmap(s)", "string.transpose(s)", "string.show_code(s)", "string.loads(s)", "string.barbs(s)", "string.acorr(s)", "string.parse(s)"], "string.capwords(s, sep=None)": ["capwords", "string.capwords(s, sep=None)", "string.nanprod(s, sep=None)", "string.fromrecords(s, sep=None)", "string.towards(s, sep=None)", "string.cumprod(s, sep=None)", "string.prod(s, sep=None)", "string._prod(s, sep=None)", "string.cond(s, sep=None)", "string.register_cmap(s, sep=None)", "string.transpose(s, sep=None)", "string.show_code(s, sep=None)", "string.loads(s, sep=None)", "string.barbs(s, sep=None)", "string.acorr(s, sep=None)"], "string.printable": ["string.printable"], "string.punctuation": ["string.punctuation"], "string.whitespace": ["string.whitespace"], "stringprep.in_table_a1(code)": ["in_table_a1", "stringprep.in_table_b1(code)", "stringprep.in_table_d1(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c22(code)"], "stringprep.in_table_b1(code)": ["in_table_b1", "stringprep.in_table_a1(code)", "stringprep.in_table_d1(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c22(code)"], "stringprep.in_table_c11(code)": ["in_table_c11", "stringprep.in_table_c12(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_d1(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c11_c12(code)", "stringprep.in_table_c22(code)"], "stringprep.in_table_c11_c12(code)": ["in_table_c11_c12", "stringprep.in_table_c21_c22(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_d1(code)", "stringprep.in_table_c4(code)"], "stringprep.in_table_c12(code)": ["in_table_c12", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_d1(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)"], "stringprep.in_table_c21(code)": ["in_table_c21", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_d1(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)"], "stringprep.in_table_c21_c22(code)": ["in_table_c21_c22", "stringprep.in_table_c11_c12(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_d1(code)", "stringprep.in_table_c4(code)"], "stringprep.in_table_c22(code)": ["in_table_c22", "stringprep.in_table_c12(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c21_c22(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c11_c12(code)", "stringprep.in_table_b1(code)"], "stringprep.in_table_c3(code)": ["in_table_c3", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_d1(code)"], "stringprep.in_table_c4(code)": ["in_table_c4", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_d1(code)"], "stringprep.in_table_c5(code)": ["in_table_c5", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_d1(code)"], "stringprep.in_table_c6(code)": ["in_table_c6", "stringprep.in_table_c8(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_d1(code)"], "stringprep.in_table_c7(code)": ["in_table_c7", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_d1(code)"], "stringprep.in_table_c8(code)": ["in_table_c8", "stringprep.in_table_c6(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_d1(code)"], "stringprep.in_table_c9(code)": ["in_table_c9", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_d1(code)"], "stringprep.in_table_d1(code)": ["in_table_d1", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c11(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c22(code)"], "stringprep.in_table_d2(code)": ["in_table_d2", "stringprep.in_table_d1(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_c3(code)", "stringprep.in_table_c9(code)", "stringprep.in_table_c4(code)", "stringprep.in_table_c5(code)", "stringprep.in_table_c7(code)", "stringprep.in_table_c11(code)"], "stringprep.map_table_b2(code)": ["map_table_b2", "stringprep.map_table_b3(code)", "stringprep.table_schema_cb(code)", "stringprep.in_table_b1(code)", "stringprep.in_table_d2(code)", "stringprep.has_table(code)", "stringprep.in_table_c12(code)", "stringprep.in_table_c21(code)", "stringprep.in_table_c22(code)", "stringprep.read_table(code)", "stringprep.in_table_c8(code)", "stringprep.in_table_c6(code)", "stringprep.build_table(code)", "stringprep.in_table_a1(code)", "stringprep.in_table_c3(code)"], "struct.Struct(format)": ["Struct"], "struct.calcsize(format)": ["calcsize", "struct._calcsize(format)", "struct.size(format)", "struct._size(format)", "struct.delocalize(format)", "struct._check_size(format)", "struct.capitalize(format)", "struct.close(format)", "struct.allclose(format)", "struct._calc_mode(format)", "struct._normalize(format)", "struct.localtime(format)", "struct.close_all(format)", "struct.serialize(format)", "struct.shapesize(format)"], "struct.error": ["struct.error"], "struct.format": ["struct.format"], "struct.iter_unpack(buffer)": ["iter_unpack", "struct._unpack_field(buffer)", "struct._unpack_tuple(buffer)", "struct.unpack_1tuple(buffer)", "struct.unpack_from(buffer)", "struct._unpack_tarfile(buffer)", "struct.unpack_archive(buffer)", "struct.unpack(buffer)", "struct._unpack(buffer)", "struct.lu_unpack(buffer)", "struct._unpack_opargs(buffer)", "struct.register_unpack_format(buffer)", "struct.unpack_dual(buffer)", "struct._unlock_file(buffer)", "struct.filter_name(buffer)"], "struct.iter_unpack(format, buffer)": ["iter_unpack", "struct._unpack_field(format, buffer)", "struct._unpack_tuple(format, buffer)", "struct.unpack_1tuple(format, buffer)", "struct.unpack_from(format, buffer)", "struct._unpack_tarfile(format, buffer)", "struct.unpack_archive(format, buffer)", "struct.unpack(format, buffer)", "struct._unpack(format, buffer)", "struct.lu_unpack(format, buffer)", "struct._unpack_opargs(format, buffer)", "struct.register_unpack_format(format, buffer)", "struct.unpack_dual(format, buffer)", "struct._unlock_file(format, buffer)", "struct.filter_name(format, buffer)"], "struct.pack(format, v1, v2)": ["pack"], "struct.pack(v1, v2)": ["pack"], "struct.pack_into(buffer, offset, v1, v2)": ["pack_into"], "struct.pack_into(format, buffer, offset, v1, v2)": ["pack_into"], "struct.size": ["struct.size"], "struct.unpack(buffer)": ["unpack", "struct._unpack(buffer)", "struct.lu_unpack(buffer)", "struct.unstack(buffer)", "struct.unpack_dual(buffer)", "struct.unpack_from(buffer)", "struct.iter_unpack(buffer)", "struct._unpack_field(buffer)", "struct._unpack_tuple(buffer)", "struct._unpack_opargs(buffer)", "struct.unpack_1tuple(buffer)", "struct.back(buffer)", "struct._unpack_zipfile(buffer)", "struct._unpack_tarfile(buffer)", "struct.unpack_archive(buffer)"], "struct.unpack(format, buffer)": ["unpack", "struct._unpack(format, buffer)", "struct.lu_unpack(format, buffer)", "struct.unstack(format, buffer)", "struct.unpack_dual(format, buffer)", "struct.unpack_from(format, buffer)", "struct.iter_unpack(format, buffer)", "struct._unpack_field(format, buffer)", "struct._unpack_tuple(format, buffer)", "struct._unpack_opargs(format, buffer)", "struct.unpack_1tuple(format, buffer)", "struct.back(format, buffer)", "struct._unpack_zipfile(format, buffer)", "struct._unpack_tarfile(format, buffer)", "struct.unpack_archive(format, buffer)"], "struct.unpack_from(buffer)": ["unpack_from", "struct.format(buffer)", "struct._format(buffer)", "struct._lu_no_infos(buffer)", "struct.inherit_from_data(buffer)", "struct.run(buffer)", "struct.compile_path(buffer)", "struct.format_string(buffer)", "struct.concat_compat(buffer)", "struct.fullmatch(buffer)", "struct.formatdate(buffer)", "struct.trace(buffer)", "struct.match(buffer)", "struct.nargminmax(buffer)", "struct.count(buffer)"], "struct.unpack_from(buffer, offset=0)": ["unpack_from", "struct.unpack_from(buffer, offset='0')", "struct.format(buffer, offset=0)", "struct._format(buffer, offset=0)", "struct._lu_no_infos(buffer, offset=0)", "struct.inherit_from_data(buffer, offset=0)", "struct.run(buffer, offset=0)", "struct.compile_path(buffer, offset=0)", "struct.format_string(buffer, offset=0)", "struct.concat_compat(buffer, offset=0)", "struct.fullmatch(buffer, offset=0)", "struct.formatdate(buffer, offset=0)", "struct.trace(buffer, offset=0)", "struct.match(buffer, offset=0)", "struct.nargminmax(buffer, offset=0)"], "struct.unpack_from(format, buffer)": ["unpack_from", "struct.format(format, buffer)", "struct._format(format, buffer)", "struct._lu_no_infos(format, buffer)", "struct.inherit_from_data(format, buffer)", "struct.run(format, buffer)", "struct.compile_path(format, buffer)", "struct.format_string(format, buffer)", "struct.concat_compat(format, buffer)", "struct.fullmatch(format, buffer)", "struct.formatdate(format, buffer)", "struct.trace(format, buffer)", "struct.match(format, buffer)", "struct.nargminmax(format, buffer)", "struct.count(format, buffer)"], "struct.unpack_from(format, buffer, offset=0)": ["unpack_from", "struct.unpack_from(format, buffer, offset='0')", "struct.format(format, buffer, offset=0)", "struct._format(format, buffer, offset=0)", "struct._lu_no_infos(format, buffer, offset=0)", "struct.inherit_from_data(format, buffer, offset=0)", "struct.run(format, buffer, offset=0)", "struct.compile_path(format, buffer, offset=0)", "struct.format_string(format, buffer, offset=0)", "struct.concat_compat(format, buffer, offset=0)", "struct.fullmatch(format, buffer, offset=0)", "struct.formatdate(format, buffer, offset=0)", "struct.trace(format, buffer, offset=0)", "struct.match(format, buffer, offset=0)", "struct.nargminmax(format, buffer, offset=0)"], "structure._anonymous_": ["structure._anonymous_"], "structure._fields_": ["structure._fields_"], "structure._pack_": ["structure._pack_"], "style.configure(style, **kw)": ["configure"], "style.configure(style, **kw, query_opt=None)": ["configure", "style.configure(style, **kw, query_opt=None)"], "style.element_create(elementname, etype, *args, **kw)": ["element_create"], "style.element_names()": ["element_names"], "style.element_options(elementname)": ["element_options"], "style.layout(style)": ["layout"], "style.layout(style, layoutspec=None)": ["layout", "style.layout(style, layoutspec=None)"], "style.lookup(style, option)": ["lookup"], "style.lookup(style, option, default=None)": ["lookup", "style.lookup(style, option, default=None)"], "style.lookup(style, option, state=None)": ["lookup", "style.lookup(style, option, state=None)"], "style.lookup(style, option, state=None, default=None)": ["lookup", "style.lookup(style, option, state=None, default=None)"], "style.map(style, **kw)": ["map"], "style.map(style, **kw, query_opt=None)": ["map", "style.map(style, **kw, query_opt=None)"], "style.theme_create(themename)": ["theme_create"], "style.theme_create(themename, parent=None)": ["theme_create", "style.theme_create(themename, parent=None)"], "style.theme_create(themename, parent=None, settings=None)": ["theme_create", "style.theme_create(themename, parent=None, settings=None)"], "style.theme_create(themename, settings=None)": ["theme_create", "style.theme_create(themename, settings=None)"], "style.theme_names()": ["theme_names"], "style.theme_settings(themename, settings)": ["theme_settings"], "style.theme_use()": ["theme_use"], "subprocess.ABOVE_NORMAL_PRIORITY_CLASS": ["subprocess.ABOVE_NORMAL_PRIORITY_CLASS"], "subprocess.BELOW_NORMAL_PRIORITY_CLASS": ["subprocess.BELOW_NORMAL_PRIORITY_CLASS"], "subprocess.CREATE_BREAKAWAY_FROM_JOB": ["subprocess.CREATE_BREAKAWAY_FROM_JOB"], "subprocess.CREATE_NEW_CONSOLE": ["subprocess.CREATE_NEW_CONSOLE"], "subprocess.CREATE_NEW_PROCESS_GROUP": ["subprocess.CREATE_NEW_PROCESS_GROUP"], "subprocess.CREATE_NO_WINDOW": ["subprocess.CREATE_NO_WINDOW"], "subprocess.CalledProcessError": ["subprocess.CalledProcessError"], "subprocess.CompletedProcess": ["subprocess.CompletedProcess"], "subprocess.DETACHED_PROCESS": ["subprocess.DETACHED_PROCESS"], "subprocess.DEVNULL": ["subprocess.DEVNULL"], "subprocess.HIGH_PRIORITY_CLASS": ["subprocess.HIGH_PRIORITY_CLASS"], "subprocess.IDLE_PRIORITY_CLASS": ["subprocess.IDLE_PRIORITY_CLASS"], "subprocess.NORMAL_PRIORITY_CLASS": ["subprocess.NORMAL_PRIORITY_CLASS"], "subprocess.PIPE": ["subprocess.PIPE"], "subprocess.Popen(args)": ["Popen"], "subprocess.Popen(args, bufsize=-1)": ["Popen", "subprocess.Popen(args, bufsize=(- '1'))"], "subprocess.Popen(args, close_fds=True)": ["Popen", "subprocess.Popen(args, close_fds=False)"], "subprocess.Popen(args, cwd=None)": ["Popen", "subprocess.Popen(args, cwd=None)"], "subprocess.Popen(args, executable=None)": ["Popen", "subprocess.Popen(args, executable=None)"], "subprocess.Popen(args, shell=False)": ["Popen", "subprocess.Popen(args, shell=True)"], "subprocess.Popen(args, stderr=None)": ["Popen", "subprocess.Popen(args, stderr=None)"], "subprocess.Popen(args, stdin=None)": ["Popen", "subprocess.Popen(args, stdin=None)"], "subprocess.Popen(args, stdout=None)": ["Popen", "subprocess.Popen(args, stdout=None)"], "subprocess.REALTIME_PRIORITY_CLASS": ["subprocess.REALTIME_PRIORITY_CLASS"], "subprocess.STARTF_USESHOWWINDOW": ["subprocess.STARTF_USESHOWWINDOW"], "subprocess.STARTUPINFO()": ["STARTUPINFO"], "subprocess.STARTUPINFO(dwFlags=0)": ["STARTUPINFO", "subprocess.STARTUPINFO(dwFlags='0')"], "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)": ["STARTUPINFO", "subprocess.STARTUPINFO(dwFlags=0, hStdInput=None)", "subprocess.STARTUPINFO(dwFlags='0', hStdInput=None)"], "subprocess.STARTUPINFO(dwFlags=0, hStdOutput=None)": ["STARTUPINFO", "subprocess.STARTUPINFO(dwFlags=0, hStdOutput=None)", "subprocess.STARTUPINFO(dwFlags='0', hStdOutput=None)"], "subprocess.STARTUPINFO(hStdOutput=None)": ["STARTUPINFO", "subprocess.STARTUPINFO(hStdOutput=None)"], "subprocess.STARTUPINFO(wShowWindow=0)": ["STARTUPINFO", "subprocess.STARTUPINFO(wShowWindow='0')"], "subprocess.STD_INPUT_HANDLE": ["subprocess.STD_INPUT_HANDLE"], "subprocess.STD_OUTPUT_HANDLE": ["subprocess.STD_OUTPUT_HANDLE"], "subprocess.SW_HIDE": ["subprocess.SW_HIDE"], "subprocess.SubprocessError": ["subprocess.SubprocessError"], "subprocess.TimeoutExpired": ["subprocess.TimeoutExpired"], "subprocess.call(args)": ["call", "subprocess._all(args)", "subprocess.all(args)", "subprocess.as_completed(args)", "subprocess.wait(args)", "subprocess.check_output(args)", "subprocess.clabel(args)", "subprocess.Tcl(args)", "subprocess.install(args)", "subprocess.Catalog(args)", "subprocess.poll(args)", "subprocess._cuda(args)", "subprocess.fill(args)", "subprocess._clip(args)", "subprocess.clim(args)"], "subprocess.call(args, cwd=None)": ["call", "subprocess.call(args, cwd=None)", "subprocess._all(args, cwd=None)", "subprocess.all(args, cwd=None)", "subprocess.as_completed(args, cwd=None)", "subprocess.wait(args, cwd=None)", "subprocess.check_output(args, cwd=None)", "subprocess.clabel(args, cwd=None)", "subprocess.Tcl(args, cwd=None)", "subprocess.install(args, cwd=None)", "subprocess.Catalog(args, cwd=None)", "subprocess.poll(args, cwd=None)", "subprocess._cuda(args, cwd=None)", "subprocess.fill(args, cwd=None)", "subprocess._clip(args, cwd=None)"], "subprocess.call(args, shell=False)": ["call", "subprocess.call(args, shell=True)", "subprocess._all(args, shell=False)", "subprocess.all(args, shell=False)", "subprocess.as_completed(args, shell=False)", "subprocess.wait(args, shell=False)", "subprocess.check_output(args, shell=False)", "subprocess.clabel(args, shell=False)", "subprocess.Tcl(args, shell=False)", "subprocess.install(args, shell=False)", "subprocess.Catalog(args, shell=False)", "subprocess.poll(args, shell=False)", "subprocess._cuda(args, shell=False)", "subprocess.fill(args, shell=False)", "subprocess._clip(args, shell=False)"], "subprocess.call(args, stderr=None)": ["call", "subprocess.call(args, stderr=None)", "subprocess._all(args, stderr=None)", "subprocess.all(args, stderr=None)", "subprocess.as_completed(args, stderr=None)", "subprocess.wait(args, stderr=None)", "subprocess.check_output(args, stderr=None)", "subprocess.clabel(args, stderr=None)", "subprocess.Tcl(args, stderr=None)", "subprocess.install(args, stderr=None)", "subprocess.Catalog(args, stderr=None)", "subprocess.poll(args, stderr=None)", "subprocess._cuda(args, stderr=None)", "subprocess.fill(args, stderr=None)", "subprocess._clip(args, stderr=None)"], "subprocess.call(args, stdin=None)": ["call", "subprocess.call(args, stdin=None)", "subprocess._all(args, stdin=None)", "subprocess.all(args, stdin=None)", "subprocess.as_completed(args, stdin=None)", "subprocess.wait(args, stdin=None)", "subprocess.check_output(args, stdin=None)", "subprocess.clabel(args, stdin=None)", "subprocess.Tcl(args, stdin=None)", "subprocess.install(args, stdin=None)", "subprocess.Catalog(args, stdin=None)", "subprocess.poll(args, stdin=None)", "subprocess._cuda(args, stdin=None)", "subprocess.fill(args, stdin=None)", "subprocess._clip(args, stdin=None)"], "subprocess.call(args, stdin=None, shell=False)": ["call", "subprocess.call(args, stdin=None, shell=True)", "subprocess._all(args, stdin=None, shell=False)", "subprocess.all(args, stdin=None, shell=False)", "subprocess.as_completed(args, stdin=None, shell=False)", "subprocess.wait(args, stdin=None, shell=False)", "subprocess.check_output(args, stdin=None, shell=False)", "subprocess.clabel(args, stdin=None, shell=False)", "subprocess.Tcl(args, stdin=None, shell=False)", "subprocess.install(args, stdin=None, shell=False)", "subprocess.Catalog(args, stdin=None, shell=False)", "subprocess.poll(args, stdin=None, shell=False)", "subprocess._cuda(args, stdin=None, shell=False)", "subprocess.fill(args, stdin=None, shell=False)", "subprocess._clip(args, stdin=None, shell=False)"], "subprocess.call(args, stdin=None, stdout=None)": ["call", "subprocess.call(args, stdin=None, stdout=None)", "subprocess._all(args, stdin=None, stdout=None)", "subprocess.all(args, stdin=None, stdout=None)", "subprocess.as_completed(args, stdin=None, stdout=None)", "subprocess.wait(args, stdin=None, stdout=None)", "subprocess.check_output(args, stdin=None, stdout=None)", "subprocess.clabel(args, stdin=None, stdout=None)", "subprocess.Tcl(args, stdin=None, stdout=None)", "subprocess.install(args, stdin=None, stdout=None)", "subprocess.Catalog(args, stdin=None, stdout=None)", "subprocess.poll(args, stdin=None, stdout=None)", "subprocess._cuda(args, stdin=None, stdout=None)", "subprocess.fill(args, stdin=None, stdout=None)", "subprocess._clip(args, stdin=None, stdout=None)"], "subprocess.call(args, stdout=None)": ["call", "subprocess.call(args, stdout=None)", "subprocess._all(args, stdout=None)", "subprocess.all(args, stdout=None)", "subprocess.as_completed(args, stdout=None)", "subprocess.wait(args, stdout=None)", "subprocess.check_output(args, stdout=None)", "subprocess.clabel(args, stdout=None)", "subprocess.Tcl(args, stdout=None)", "subprocess.install(args, stdout=None)", "subprocess.Catalog(args, stdout=None)", "subprocess.poll(args, stdout=None)", "subprocess._cuda(args, stdout=None)", "subprocess.fill(args, stdout=None)", "subprocess._clip(args, stdout=None)"], "subprocess.call(args, timeout=None)": ["call", "subprocess.call(args, timeout=None)", "subprocess._all(args, timeout=None)", "subprocess.all(args, timeout=None)", "subprocess.as_completed(args, timeout=None)", "subprocess.wait(args, timeout=None)", "subprocess.check_output(args, timeout=None)", "subprocess.clabel(args, timeout=None)", "subprocess.Tcl(args, timeout=None)", "subprocess.install(args, timeout=None)", "subprocess.Catalog(args, timeout=None)", "subprocess.poll(args, timeout=None)", "subprocess._cuda(args, timeout=None)", "subprocess.fill(args, timeout=None)", "subprocess._clip(args, timeout=None)"], "subprocess.check_call(args)": ["check_call", "subprocess._check_capability(args)", "subprocess.check(args)", "subprocess.calc_chksums(args)", "subprocess.close_all(args)", "subprocess._bool_arith_check(args)", "subprocess.check_builtin(args)", "subprocess.allocate_lock(args)", "subprocess.body_check(args)", "subprocess._all_gather(args)", "subprocess.all_gather(args)", "subprocess.all_reduce(args)", "subprocess._can_coerce_all(args)", "subprocess._all_dispatcher(args)", "subprocess.call(args)"], "subprocess.check_call(args, cwd=None)": ["check_call", "subprocess.check_call(args, cwd=None)", "subprocess._check_capability(args, cwd=None)", "subprocess.check(args, cwd=None)", "subprocess.calc_chksums(args, cwd=None)", "subprocess.close_all(args, cwd=None)", "subprocess._bool_arith_check(args, cwd=None)", "subprocess.check_builtin(args, cwd=None)", "subprocess.allocate_lock(args, cwd=None)", "subprocess.body_check(args, cwd=None)", "subprocess._all_gather(args, cwd=None)", "subprocess.all_gather(args, cwd=None)", "subprocess.all_reduce(args, cwd=None)", "subprocess._can_coerce_all(args, cwd=None)", "subprocess._all_dispatcher(args, cwd=None)"], "subprocess.check_call(args, shell=False)": ["check_call", "subprocess.check_call(args, shell=True)", "subprocess._check_capability(args, shell=False)", "subprocess.check(args, shell=False)", "subprocess.calc_chksums(args, shell=False)", "subprocess.close_all(args, shell=False)", "subprocess._bool_arith_check(args, shell=False)", "subprocess.check_builtin(args, shell=False)", "subprocess.allocate_lock(args, shell=False)", "subprocess.body_check(args, shell=False)", "subprocess._all_gather(args, shell=False)", "subprocess.all_gather(args, shell=False)", "subprocess.all_reduce(args, shell=False)", "subprocess._can_coerce_all(args, shell=False)", "subprocess._all_dispatcher(args, shell=False)"], "subprocess.check_call(args, stderr=None)": ["check_call", "subprocess.check_call(args, stderr=None)", "subprocess._check_capability(args, stderr=None)", "subprocess.check(args, stderr=None)", "subprocess.calc_chksums(args, stderr=None)", "subprocess.close_all(args, stderr=None)", "subprocess._bool_arith_check(args, stderr=None)", "subprocess.check_builtin(args, stderr=None)", "subprocess.allocate_lock(args, stderr=None)", "subprocess.body_check(args, stderr=None)", "subprocess._all_gather(args, stderr=None)", "subprocess.all_gather(args, stderr=None)", "subprocess.all_reduce(args, stderr=None)", "subprocess._can_coerce_all(args, stderr=None)", "subprocess._all_dispatcher(args, stderr=None)"], "subprocess.check_call(args, stdin=None)": ["check_call", "subprocess.check_call(args, stdin=None)", "subprocess._check_capability(args, stdin=None)", "subprocess.check(args, stdin=None)", "subprocess.calc_chksums(args, stdin=None)", "subprocess.close_all(args, stdin=None)", "subprocess._bool_arith_check(args, stdin=None)", "subprocess.check_builtin(args, stdin=None)", "subprocess.allocate_lock(args, stdin=None)", "subprocess.body_check(args, stdin=None)", "subprocess._all_gather(args, stdin=None)", "subprocess.all_gather(args, stdin=None)", "subprocess.all_reduce(args, stdin=None)", "subprocess._can_coerce_all(args, stdin=None)", "subprocess._all_dispatcher(args, stdin=None)"], "subprocess.check_call(args, stdin=None, shell=False)": ["check_call", "subprocess.check_call(args, stdin=None, shell=True)", "subprocess._check_capability(args, stdin=None, shell=False)", "subprocess.check(args, stdin=None, shell=False)", "subprocess.calc_chksums(args, stdin=None, shell=False)", "subprocess.close_all(args, stdin=None, shell=False)", "subprocess._bool_arith_check(args, stdin=None, shell=False)", "subprocess.check_builtin(args, stdin=None, shell=False)", "subprocess.allocate_lock(args, stdin=None, shell=False)", "subprocess.body_check(args, stdin=None, shell=False)", "subprocess._all_gather(args, stdin=None, shell=False)", "subprocess.all_gather(args, stdin=None, shell=False)", "subprocess.all_reduce(args, stdin=None, shell=False)", "subprocess._can_coerce_all(args, stdin=None, shell=False)", "subprocess._all_dispatcher(args, stdin=None, shell=False)"], "subprocess.check_call(args, stdin=None, stderr=None)": ["check_call", "subprocess.check_call(args, stdin=None, stderr=None)", "subprocess._check_capability(args, stdin=None, stderr=None)", "subprocess.check(args, stdin=None, stderr=None)", "subprocess.calc_chksums(args, stdin=None, stderr=None)", "subprocess.close_all(args, stdin=None, stderr=None)", "subprocess._bool_arith_check(args, stdin=None, stderr=None)", "subprocess.check_builtin(args, stdin=None, stderr=None)", "subprocess.allocate_lock(args, stdin=None, stderr=None)", "subprocess.body_check(args, stdin=None, stderr=None)", "subprocess._all_gather(args, stdin=None, stderr=None)", "subprocess.all_gather(args, stdin=None, stderr=None)", "subprocess.all_reduce(args, stdin=None, stderr=None)", "subprocess._can_coerce_all(args, stdin=None, stderr=None)", "subprocess._all_dispatcher(args, stdin=None, stderr=None)"], "subprocess.check_call(args, stdin=None, stdout=None)": ["check_call", "subprocess.check_call(args, stdin=None, stdout=None)", "subprocess._check_capability(args, stdin=None, stdout=None)", "subprocess.check(args, stdin=None, stdout=None)", "subprocess.calc_chksums(args, stdin=None, stdout=None)", "subprocess.close_all(args, stdin=None, stdout=None)", "subprocess._bool_arith_check(args, stdin=None, stdout=None)", "subprocess.check_builtin(args, stdin=None, stdout=None)", "subprocess.allocate_lock(args, stdin=None, stdout=None)", "subprocess.body_check(args, stdin=None, stdout=None)", "subprocess._all_gather(args, stdin=None, stdout=None)", "subprocess.all_gather(args, stdin=None, stdout=None)", "subprocess.all_reduce(args, stdin=None, stdout=None)", "subprocess._can_coerce_all(args, stdin=None, stdout=None)", "subprocess._all_dispatcher(args, stdin=None, stdout=None)"], "subprocess.check_call(args, stdout=None)": ["check_call", "subprocess.check_call(args, stdout=None)", "subprocess._check_capability(args, stdout=None)", "subprocess.check(args, stdout=None)", "subprocess.calc_chksums(args, stdout=None)", "subprocess.close_all(args, stdout=None)", "subprocess._bool_arith_check(args, stdout=None)", "subprocess.check_builtin(args, stdout=None)", "subprocess.allocate_lock(args, stdout=None)", "subprocess.body_check(args, stdout=None)", "subprocess._all_gather(args, stdout=None)", "subprocess.all_gather(args, stdout=None)", "subprocess.all_reduce(args, stdout=None)", "subprocess._can_coerce_all(args, stdout=None)", "subprocess._all_dispatcher(args, stdout=None)"], "subprocess.check_call(args, timeout=None)": ["check_call", "subprocess.check_call(args, timeout=None)", "subprocess._check_capability(args, timeout=None)", "subprocess.check(args, timeout=None)", "subprocess.calc_chksums(args, timeout=None)", "subprocess.close_all(args, timeout=None)", "subprocess._bool_arith_check(args, timeout=None)", "subprocess.check_builtin(args, timeout=None)", "subprocess.allocate_lock(args, timeout=None)", "subprocess.body_check(args, timeout=None)", "subprocess._all_gather(args, timeout=None)", "subprocess.all_gather(args, timeout=None)", "subprocess.all_reduce(args, timeout=None)", "subprocess._can_coerce_all(args, timeout=None)", "subprocess._all_dispatcher(args, timeout=None)"], "subprocess.check_output(args)": ["check_output", "subprocess.as_completed(args)", "subprocess.call(args)", "subprocess.wait(args)", "subprocess._check_size(args)", "subprocess._optimize_charset(args)", "subprocess.print_exc(args)", "subprocess._loadtxt_dispatcher(args)", "subprocess.unpack_archive(args)", "subprocess._ptp_dispatcher(args)", "subprocess._multidot_dispatcher(args)", "subprocess.open_unix_connection(args)", "subprocess._run_module_code(args)", "subprocess._sort_dispatcher(args)", "subprocess.open_connection(args)"], "subprocess.check_output(args, cwd=None)": ["check_output", "subprocess.check_output(args, cwd=None)", "subprocess.as_completed(args, cwd=None)", "subprocess.call(args, cwd=None)", "subprocess.wait(args, cwd=None)", "subprocess._check_size(args, cwd=None)", "subprocess._optimize_charset(args, cwd=None)", "subprocess.print_exc(args, cwd=None)", "subprocess._loadtxt_dispatcher(args, cwd=None)", "subprocess.unpack_archive(args, cwd=None)", "subprocess._ptp_dispatcher(args, cwd=None)", "subprocess._multidot_dispatcher(args, cwd=None)", "subprocess.open_unix_connection(args, cwd=None)", "subprocess._run_module_code(args, cwd=None)", "subprocess._sort_dispatcher(args, cwd=None)"], "subprocess.check_output(args, errors=None)": ["check_output", "subprocess.check_output(args, errors=None)", "subprocess.as_completed(args, errors=None)", "subprocess.call(args, errors=None)", "subprocess.wait(args, errors=None)", "subprocess._check_size(args, errors=None)", "subprocess._optimize_charset(args, errors=None)", "subprocess.print_exc(args, errors=None)", "subprocess._loadtxt_dispatcher(args, errors=None)", "subprocess.unpack_archive(args, errors=None)", "subprocess._ptp_dispatcher(args, errors=None)", "subprocess._multidot_dispatcher(args, errors=None)", "subprocess.open_unix_connection(args, errors=None)", "subprocess._run_module_code(args, errors=None)", "subprocess._sort_dispatcher(args, errors=None)"], "subprocess.check_output(args, shell=False)": ["check_output", "subprocess.check_output(args, shell=True)", "subprocess.as_completed(args, shell=False)", "subprocess.call(args, shell=False)", "subprocess.wait(args, shell=False)", "subprocess._check_size(args, shell=False)", "subprocess._optimize_charset(args, shell=False)", "subprocess.print_exc(args, shell=False)", "subprocess._loadtxt_dispatcher(args, shell=False)", "subprocess.unpack_archive(args, shell=False)", "subprocess._ptp_dispatcher(args, shell=False)", "subprocess._multidot_dispatcher(args, shell=False)", "subprocess.open_unix_connection(args, shell=False)", "subprocess._run_module_code(args, shell=False)", "subprocess._sort_dispatcher(args, shell=False)"], "subprocess.check_output(args, stderr=None)": ["check_output", "subprocess.check_output(args, stderr=None)", "subprocess.as_completed(args, stderr=None)", "subprocess.call(args, stderr=None)", "subprocess.wait(args, stderr=None)", "subprocess._check_size(args, stderr=None)", "subprocess._optimize_charset(args, stderr=None)", "subprocess.print_exc(args, stderr=None)", "subprocess._loadtxt_dispatcher(args, stderr=None)", "subprocess.unpack_archive(args, stderr=None)", "subprocess._ptp_dispatcher(args, stderr=None)", "subprocess._multidot_dispatcher(args, stderr=None)", "subprocess.open_unix_connection(args, stderr=None)", "subprocess._run_module_code(args, stderr=None)", "subprocess._sort_dispatcher(args, stderr=None)"], "subprocess.check_output(args, stdin=None)": ["check_output", "subprocess.check_output(args, stdin=None)", "subprocess.as_completed(args, stdin=None)", "subprocess.call(args, stdin=None)", "subprocess.wait(args, stdin=None)", "subprocess._check_size(args, stdin=None)", "subprocess._optimize_charset(args, stdin=None)", "subprocess.print_exc(args, stdin=None)", "subprocess._loadtxt_dispatcher(args, stdin=None)", "subprocess.unpack_archive(args, stdin=None)", "subprocess._ptp_dispatcher(args, stdin=None)", "subprocess._multidot_dispatcher(args, stdin=None)", "subprocess.open_unix_connection(args, stdin=None)", "subprocess._run_module_code(args, stdin=None)", "subprocess._sort_dispatcher(args, stdin=None)"], "subprocess.check_output(args, text=None)": ["check_output", "subprocess.check_output(args, text=None)", "subprocess.as_completed(args, text=None)", "subprocess.call(args, text=None)", "subprocess.wait(args, text=None)", "subprocess._check_size(args, text=None)", "subprocess._optimize_charset(args, text=None)", "subprocess.print_exc(args, text=None)", "subprocess._loadtxt_dispatcher(args, text=None)", "subprocess.unpack_archive(args, text=None)", "subprocess._ptp_dispatcher(args, text=None)", "subprocess._multidot_dispatcher(args, text=None)", "subprocess.open_unix_connection(args, text=None)", "subprocess._run_module_code(args, text=None)", "subprocess._sort_dispatcher(args, text=None)"], "subprocess.check_output(args, timeout=None)": ["check_output", "subprocess.check_output(args, timeout=None)", "subprocess.as_completed(args, timeout=None)", "subprocess.call(args, timeout=None)", "subprocess.wait(args, timeout=None)", "subprocess._check_size(args, timeout=None)", "subprocess._optimize_charset(args, timeout=None)", "subprocess.print_exc(args, timeout=None)", "subprocess._loadtxt_dispatcher(args, timeout=None)", "subprocess.unpack_archive(args, timeout=None)", "subprocess._ptp_dispatcher(args, timeout=None)", "subprocess._multidot_dispatcher(args, timeout=None)", "subprocess.open_unix_connection(args, timeout=None)", "subprocess._run_module_code(args, timeout=None)", "subprocess._sort_dispatcher(args, timeout=None)"], "subprocess.getoutput(cmd)": ["getoutput", "subprocess.getopt(cmd)", "subprocess.getstatusoutput(cmd)", "subprocess.check_output(cmd)", "subprocess.get_group(cmd)", "subprocess.getgroups(cmd)", "subprocess.getturtle(cmd)", "subprocess.gnu_getopt(cmd)", "subprocess.getcontext(cmd)", "subprocess._get_layout(cmd)", "subprocess._get_option(cmd)", "subprocess.__getattr__(cmd)", "subprocess.gettext(cmd)", "subprocess.getp(cmd)", "subprocess.get_group_list(cmd)"], "subprocess.getstatusoutput(cmd)": ["getstatusoutput", "subprocess.getoutput(cmd)", "subprocess._get_stats(cmd)", "subprocess.WEXITSTATUS(cmd)", "subprocess._getattribute(cmd)", "subprocess.getopt(cmd)", "subprocess._get_layout(cmd)", "subprocess.getattr_static(cmd)", "subprocess.__getattr__(cmd)", "subprocess._task_get_stack(cmd)", "subprocess.update_bn_stats(cmd)", "subprocess.get_unstructured(cmd)", "subprocess.check_output(cmd)", "subprocess.getxattr(cmd)", "subprocess.getsource(cmd)"], "subprocess.run(args)": ["run", "subprocess.round(args)", "subprocess.round_(args)", "subprocess.around(args)", "subprocess.triu(args)", "subprocess._group(args)", "subprocess.unique(args)", "subprocess._unique1d(args)", "subprocess.urlencode(args)", "subprocess.lru_cache(args)", "subprocess._sum_(args)", "subprocess._sum(args)", "subprocess._isna_array(args)", "subprocess._construction_repr(args)", "subprocess.open(args)"], "subprocess.run(args, capture_output=False)": ["run", "subprocess.run(args, capture_output=True)", "subprocess.round(args, capture_output=False)", "subprocess.round_(args, capture_output=False)", "subprocess.around(args, capture_output=False)", "subprocess.triu(args, capture_output=False)", "subprocess._group(args, capture_output=False)", "subprocess.unique(args, capture_output=False)", "subprocess._unique1d(args, capture_output=False)", "subprocess.urlencode(args, capture_output=False)", "subprocess.lru_cache(args, capture_output=False)", "subprocess._sum_(args, capture_output=False)", "subprocess._sum(args, capture_output=False)", "subprocess._isna_array(args, capture_output=False)", "subprocess._construction_repr(args, capture_output=False)"], "subprocess.run(args, check=False)": ["run", "subprocess.run(args, check=True)", "subprocess.round(args, check=False)", "subprocess.round_(args, check=False)", "subprocess.around(args, check=False)", "subprocess.triu(args, check=False)", "subprocess._group(args, check=False)", "subprocess.unique(args, check=False)", "subprocess._unique1d(args, check=False)", "subprocess.urlencode(args, check=False)", "subprocess.lru_cache(args, check=False)", "subprocess._sum_(args, check=False)", "subprocess._sum(args, check=False)", "subprocess._isna_array(args, check=False)", "subprocess._construction_repr(args, check=False)"], "subprocess.run(args, cwd=None)": ["run", "subprocess.run(args, cwd=None)", "subprocess.round(args, cwd=None)", "subprocess.round_(args, cwd=None)", "subprocess.around(args, cwd=None)", "subprocess.triu(args, cwd=None)", "subprocess._group(args, cwd=None)", "subprocess.unique(args, cwd=None)", "subprocess._unique1d(args, cwd=None)", "subprocess.urlencode(args, cwd=None)", "subprocess.lru_cache(args, cwd=None)", "subprocess._sum_(args, cwd=None)", "subprocess._sum(args, cwd=None)", "subprocess._isna_array(args, cwd=None)", "subprocess._construction_repr(args, cwd=None)"], "subprocess.run(args, input=None)": ["run", "subprocess.run(args, input=None)", "subprocess.round(args, input=None)", "subprocess.round_(args, input=None)", "subprocess.around(args, input=None)", "subprocess.triu(args, input=None)", "subprocess._group(args, input=None)", "subprocess.unique(args, input=None)", "subprocess._unique1d(args, input=None)", "subprocess.urlencode(args, input=None)", "subprocess.lru_cache(args, input=None)", "subprocess._sum_(args, input=None)", "subprocess._sum(args, input=None)", "subprocess._isna_array(args, input=None)", "subprocess._construction_repr(args, input=None)"], "subprocess.run(args, shell=False)": ["run", "subprocess.run(args, shell=True)", "subprocess.round(args, shell=False)", "subprocess.round_(args, shell=False)", "subprocess.around(args, shell=False)", "subprocess.triu(args, shell=False)", "subprocess._group(args, shell=False)", "subprocess.unique(args, shell=False)", "subprocess._unique1d(args, shell=False)", "subprocess.urlencode(args, shell=False)", "subprocess.lru_cache(args, shell=False)", "subprocess._sum_(args, shell=False)", "subprocess._sum(args, shell=False)", "subprocess._isna_array(args, shell=False)", "subprocess._construction_repr(args, shell=False)"], "subprocess.run(args, stderr=None)": ["run", "subprocess.run(args, stderr=None)", "subprocess.round(args, stderr=None)", "subprocess.round_(args, stderr=None)", "subprocess.around(args, stderr=None)", "subprocess.triu(args, stderr=None)", "subprocess._group(args, stderr=None)", "subprocess.unique(args, stderr=None)", "subprocess._unique1d(args, stderr=None)", "subprocess.urlencode(args, stderr=None)", "subprocess.lru_cache(args, stderr=None)", "subprocess._sum_(args, stderr=None)", "subprocess._sum(args, stderr=None)", "subprocess._isna_array(args, stderr=None)", "subprocess._construction_repr(args, stderr=None)"], "subprocess.run(args, stdin=None)": ["run", "subprocess.run(args, stdin=None)", "subprocess.round(args, stdin=None)", "subprocess.round_(args, stdin=None)", "subprocess.around(args, stdin=None)", "subprocess.triu(args, stdin=None)", "subprocess._group(args, stdin=None)", "subprocess.unique(args, stdin=None)", "subprocess._unique1d(args, stdin=None)", "subprocess.urlencode(args, stdin=None)", "subprocess.lru_cache(args, stdin=None)", "subprocess._sum_(args, stdin=None)", "subprocess._sum(args, stdin=None)", "subprocess._isna_array(args, stdin=None)", "subprocess._construction_repr(args, stdin=None)"], "subprocess.run(args, stdout=None)": ["run", "subprocess.run(args, stdout=None)", "subprocess.round(args, stdout=None)", "subprocess.round_(args, stdout=None)", "subprocess.around(args, stdout=None)", "subprocess.triu(args, stdout=None)", "subprocess._group(args, stdout=None)", "subprocess.unique(args, stdout=None)", "subprocess._unique1d(args, stdout=None)", "subprocess.urlencode(args, stdout=None)", "subprocess.lru_cache(args, stdout=None)", "subprocess._sum_(args, stdout=None)", "subprocess._sum(args, stdout=None)", "subprocess._isna_array(args, stdout=None)", "subprocess._construction_repr(args, stdout=None)"], "subprocess.run(args, timeout=None)": ["run", "subprocess.run(args, timeout=None)", "subprocess.round(args, timeout=None)", "subprocess.round_(args, timeout=None)", "subprocess.around(args, timeout=None)", "subprocess.triu(args, timeout=None)", "subprocess._group(args, timeout=None)", "subprocess.unique(args, timeout=None)", "subprocess._unique1d(args, timeout=None)", "subprocess.urlencode(args, timeout=None)", "subprocess.lru_cache(args, timeout=None)", "subprocess._sum_(args, timeout=None)", "subprocess._sum(args, timeout=None)", "subprocess._isna_array(args, timeout=None)", "subprocess._construction_repr(args, timeout=None)"], "sum(iterable)": ["sum", "instance_norm(iterable)", "_sum(iterable)", "softmin(iterable)", "softmax(iterable)", "mse_loss(iterable)", "group_norm(iterable)", "stft(iterable)", "log_softmax(iterable)", "istft(iterable)", "smooth_l1_loss(iterable)", "soft_margin_loss(iterable)", "l1_loss(iterable)", "nll_loss(iterable)", "nansum(iterable)"], "sum(iterable, start)": ["sum", "instance_norm(iterable, start)", "_sum(iterable, start)", "softmin(iterable, start)", "softmax(iterable, start)", "mse_loss(iterable, start)", "group_norm(iterable, start)", "stft(iterable, start)", "log_softmax(iterable, start)", "istft(iterable, start)", "smooth_l1_loss(iterable, start)", "soft_margin_loss(iterable, start)", "l1_loss(iterable, start)", "nll_loss(iterable, start)", "nansum(iterable, start)"], "sunau.AUDIO_FILE_ENCODING_ADPCM_G721": ["sunau.AUDIO_FILE_ENCODING_ADPCM_G721"], "sunau.AUDIO_FILE_ENCODING_ADPCM_G722": ["sunau.AUDIO_FILE_ENCODING_ADPCM_G722"], "sunau.AUDIO_FILE_ENCODING_DOUBLE": ["sunau.AUDIO_FILE_ENCODING_DOUBLE"], "sunau.AUDIO_FILE_ENCODING_LINEAR_16": ["sunau.AUDIO_FILE_ENCODING_LINEAR_16"], "sunau.AUDIO_FILE_ENCODING_LINEAR_24": ["sunau.AUDIO_FILE_ENCODING_LINEAR_24"], "sunau.AUDIO_FILE_ENCODING_MULAW_8": ["sunau.AUDIO_FILE_ENCODING_MULAW_8"], "sunau.AUDIO_FILE_MAGIC": ["sunau.AUDIO_FILE_MAGIC"], "sunau.Error": ["sunau.Error"], "sunau.open(file, mode)": ["open", "sunau._open(file, mode)", "sunau.open_latin1(file, mode)", "sunau.popen(file, mode)", "sunau.bltn_open(file, mode)", "sunau.OpenWrapper(file, mode)", "sunau._builtin_open(file, mode)", "sunau.urlopen(file, mode)", "sunau.pie(file, mode)", "sunau._run_code(file, mode)", "sunau.compress(file, mode)", "sunau._popen(file, mode)", "sunau.byte_compile(file, mode)", "sunau.boxplot(file, mode)", "sunau.pen(file, mode)"], "sunau.openfp(file, mode)": ["openfp", "sunau.open(file, mode)", "sunau.urlopen(file, mode)", "sunau.compress_nd(file, mode)", "sunau.compile(file, mode)", "sunau._ptp(file, mode)", "sunau.ptp(file, mode)", "sunau.compile_file(file, mode)", "sunau.new_compiler(file, mode)", "sunau.pie(file, mode)", "sunau.contourf(file, mode)", "sunau.isneginf(file, mode)", "sunau.isposinf(file, mode)", "sunau.showinfo(file, mode)", "sunau.propagate_qconfig_(file, mode)"], "super()": ["super", "isupper()", "upper()", "summer()", "_sumprod()", "astuple()", "istuple()", "suptitle()", "_as_tuple()", "specgram()", "is_tuple()", "setup()", "_setup()", "outer()", "fuser()"], "super(type)": ["super", "isupper(type)", "upper(type)", "summer(type)", "_sumprod(type)", "astuple(type)", "istuple(type)", "suptitle(type)", "_as_tuple(type)", "specgram(type)", "is_tuple(type)", "setup(type)", "_setup(type)", "outer(type)", "fuser(type)"], "super(type, object-or-type)": [], "symbol.get_namespace()": ["get_namespace"], "symbol.get_namespaces()": ["get_namespaces"], "symbol.is_assigned()": ["is_assigned"], "symbol.is_declared_global()": ["is_declared_global"], "symbol.is_free()": ["is_free"], "symbol.is_global()": ["is_global"], "symbol.is_imported()": ["is_imported"], "symbol.is_local()": ["is_local"], "symbol.is_namespace()": ["is_namespace"], "symbol.is_parameter()": ["is_parameter"], "symbol.is_referenced()": ["is_referenced"], "symbol.sym_name": ["symbol.sym_name"], "symbol_table.get_children()": ["get_children"], "symbol_table.get_id()": ["get_id"], "symbol_table.get_identifiers()": ["get_identifiers"], "symbol_table.get_lineno()": ["get_lineno"], "symbol_table.get_name()": ["get_name"], "symbol_table.get_symbols()": ["get_symbols"], "symbol_table.get_type()": ["get_type"], "symbol_table.has_children()": ["has_children"], "symbol_table.is_nested()": ["is_nested"], "symbol_table.is_optimized()": ["is_optimized"], "symbol_table.lookup(name)": ["lookup"], "symtable.Class": ["symtable.Class"], "symtable.Symbol": ["symtable.Symbol"], "symtable.SymbolTable": ["symtable.SymbolTable"], "symtable.symtable(code, filename, compile_type)": ["symtable", "symtable.table(code, filename, compile_type)", "symtable.has_table(code, filename, compile_type)", "symtable._tables(code, filename, compile_type)", "symtable.disable(code, filename, compile_type)", "symtable._copy_immutable(code, filename, compile_type)", "symtable.isawaitable(code, filename, compile_type)", "symtable.iterable(code, filename, compile_type)", "symtable.maybe(code, filename, compile_type)", "symtable.small(code, filename, compile_type)", "symtable.table_schema_cb(code, filename, compile_type)", "symtable.map_table_b3(code, filename, compile_type)", "symtable.map_table_b2(code, filename, compile_type)", "symtable.table_exists(code, filename, compile_type)", "symtable.nsmallest(code, filename, compile_type)"], "sync_manager.Array(typecode, sequence)": ["Array"], "sync_manager.Barrier(parties, action)": ["Barrier"], "sync_manager.BoundedSemaphore()": ["BoundedSemaphore"], "sync_manager.BoundedSemaphore(value)": ["BoundedSemaphore"], "sync_manager.Condition()": ["Condition"], "sync_manager.Condition(lock)": ["Condition"], "sync_manager.Event()": ["Event"], "sync_manager.Namespace()": ["Namespace"], "sync_manager.Queue(maxsize)": ["Queue"], "sync_manager.Semaphore(value)": ["Semaphore"], "sync_manager.Value(typecode, value)": ["Value"], "sync_manager.dict()": ["dict"], "sync_manager.dict(mapping)": ["dict"], "sync_manager.dict(sequence)": ["dict"], "sync_manager.list(sequence)": ["list"], "sys.__breakpointhook__": ["sys.__breakpointhook__"], "sys.__displayhook__": ["sys.__displayhook__"], "sys.__interactivehook__": ["sys.__interactivehook__"], "sys.__stderr__": ["sys.__stderr__"], "sys.__stdin__": ["sys.__stdin__"], "sys._clear_type_cache()": ["_clear_type_cache"], "sys._current_frames()": ["_current_frames"], "sys._debugmallocstats()": ["_debugmallocstats"], "sys._enablelegacywindowsfsencoding()": ["_enablelegacywindowsfsencoding"], "sys._getframe()": ["_getframe"], "sys._getframe(depth)": ["_getframe"], "sys._xoptions": ["sys._xoptions"], "sys.abiflags": ["sys.abiflags"], "sys.api_version": ["sys.api_version"], "sys.argv": ["sys.argv"], "sys.base_exec_prefix": ["sys.base_exec_prefix"], "sys.base_prefix": ["sys.base_prefix"], "sys.builtin_module_names": ["sys.builtin_module_names"], "sys.byteorder": ["sys.byteorder"], "sys.call_tracing(func, args)": ["call_tracing"], "sys.copyright": ["sys.copyright"], "sys.displayhook(value)": ["displayhook"], "sys.dllhandle": ["sys.dllhandle"], "sys.dont_write_bytecode": ["sys.dont_write_bytecode"], "sys.exc_info()": ["exc_info"], "sys.excepthook(type, value, traceback)": ["excepthook"], "sys.exec_prefix": ["sys.exec_prefix"], "sys.executable": ["sys.executable"], "sys.exit()": ["exit"], "sys.exit(arg)": ["exit"], "sys.flags": ["sys.flags"], "sys.float_info": ["sys.float_info"], "sys.float_repr_style": ["sys.float_repr_style"], "sys.get_asyncgen_hooks()": ["get_asyncgen_hooks"], "sys.get_coroutine_origin_tracking_depth()": ["get_coroutine_origin_tracking_depth"], "sys.getandroidapilevel()": ["getandroidapilevel"], "sys.getcheckinterval()": ["getcheckinterval"], "sys.getdefaultencoding()": ["getdefaultencoding"], "sys.getfilesystemencoding()": ["getfilesystemencoding"], "sys.getprofile()": ["getprofile"], "sys.getrecursionlimit()": ["getrecursionlimit"], "sys.getrefcount(object)": ["getrefcount"], "sys.getsizeof(object)": ["getsizeof"], "sys.getsizeof(object, default)": ["getsizeof"], "sys.getswitchinterval()": ["getswitchinterval"], "sys.getwindowsversion()": ["getwindowsversion"], "sys.hash_info": ["sys.hash_info"], "sys.hexversion": ["sys.hexversion"], "sys.implementation": ["sys.implementation"], "sys.int_info": ["sys.int_info"], "sys.intern(string)": ["intern"], "sys.is_finalizing()": ["is_finalizing"], "sys.last_type": ["sys.last_type"], "sys.maxsize": ["sys.maxsize"], "sys.maxunicode": ["sys.maxunicode"], "sys.meta_path": ["sys.meta_path"], "sys.modules": ["sys.modules"], "sys.path": ["sys.path"], "sys.path_hooks": ["sys.path_hooks"], "sys.path_importer_cache": ["sys.path_importer_cache"], "sys.platform": ["sys.platform"], "sys.prefix": ["sys.prefix"], "sys.ps1": ["sys.ps1"], "sys.set_asyncgen_hooks(firstiter, finalizer)": ["set_asyncgen_hooks"], "sys.set_coroutine_origin_tracking_depth(depth)": ["set_coroutine_origin_tracking_depth"], "sys.set_coroutine_wrapper(wrapper)": ["set_coroutine_wrapper"], "sys.setcheckinterval(interval)": ["setcheckinterval"], "sys.setprofile(profilefunc)": ["setprofile"], "sys.setrecursionlimit(limit)": ["setrecursionlimit"], "sys.setswitchinterval(interval)": ["setswitchinterval"], "sys.settrace(tracefunc)": ["settrace"], "sys.stdin": ["sys.stdin"], "sys.stdout": ["sys.stdout"], "sys.tracebacklimit": ["sys.tracebacklimit"], "sys.version": ["sys.version"], "sys.version_info": ["sys.version_info"], "sys.warnoptions": ["sys.warnoptions"], "sys.winver": ["sys.winver"], "sys_log_handler.close()": ["close"], "sys_log_handler.emit(record)": ["emit"], "sys_log_handler.encodePriority(facility, priority)": ["encodePriority"], "sys_log_handler.mapPriority(levelname)": ["mapPriority"], "sysconfig.get_config_var(name)": ["get_config_var", "sysconfig.get_config_vars(name)", "sysconfig.parse_config_h(name)", "sysconfig.customize_config_vars(name)", "sysconfig.get_current_fig_manager(name)", "sysconfig._get_fill_value(name)", "sysconfig.get_fill_value(name)", "sysconfig.config_dict(name)", "sysconfig.get_config_h_filename(name)", "sysconfig._get_action_name(name)", "sysconfig._get_valid_constant(name)", "sysconfig._get_colon(name)", "sysconfig.config_prefix(name)", "sysconfig.get_lzma_file(name)", "sysconfig.get_file_path(name)"], "sysconfig.get_makefile_filename()": ["get_makefile_filename", "sysconfig._normalize_filename()", "sysconfig.get_lzma_file()", "sysconfig._get_fill_value()", "sysconfig.get_fill_value()", "sysconfig.get_config_h_filename()", "sysconfig._fix_co_filename()", "sysconfig.get_file_path()", "sysconfig._get_builtin_table()", "sysconfig.rebuild_storage_filename()", "sysconfig._get_mem_available()", "sysconfig.set_fill_value()", "sysconfig.NamedTemporaryFile()", "sysconfig.get_file_path_2()", "sysconfig.get_enum_value_type()"], "sysconfig.get_path(name)": ["get_path", "sysconfig._get_trace_graph(name)", "sysconfig.get_python_lib(name)", "sysconfig._wrap_result(name)", "sysconfig.repeat(name)", "sysconfig._delete_dispatcher(name)", "sysconfig._center_dispatcher(name)", "sysconfig.gradient(name)", "sysconfig._digitize_dispatcher(name)", "sysconfig._code_dispatcher(name)", "sysconfig.run_path(name)", "sysconfig._get_path(name)", "sysconfig._correlate_dispatcher(name)", "sysconfig.hist_frame(name)", "sysconfig._argmin_dispatcher(name)"], "sysconfig.get_path(name, scheme)": ["get_path", "sysconfig._get_trace_graph(name, scheme)", "sysconfig.get_python_lib(name, scheme)", "sysconfig._wrap_result(name, scheme)", "sysconfig.repeat(name, scheme)", "sysconfig._delete_dispatcher(name, scheme)", "sysconfig._center_dispatcher(name, scheme)", "sysconfig.gradient(name, scheme)", "sysconfig._digitize_dispatcher(name, scheme)", "sysconfig._code_dispatcher(name, scheme)", "sysconfig.run_path(name, scheme)", "sysconfig._get_path(name, scheme)", "sysconfig._correlate_dispatcher(name, scheme)", "sysconfig.hist_frame(name, scheme)", "sysconfig._argmin_dispatcher(name, scheme)"], "sysconfig.get_path(name, scheme, vars)": ["get_path", "sysconfig._get_trace_graph(name, scheme, vars)", "sysconfig.get_python_lib(name, scheme, vars)", "sysconfig._wrap_result(name, scheme, vars)", "sysconfig.repeat(name, scheme, vars)", "sysconfig._delete_dispatcher(name, scheme, vars)", "sysconfig._center_dispatcher(name, scheme, vars)", "sysconfig.gradient(name, scheme, vars)", "sysconfig._digitize_dispatcher(name, scheme, vars)", "sysconfig._code_dispatcher(name, scheme, vars)", "sysconfig.run_path(name, scheme, vars)", "sysconfig._get_path(name, scheme, vars)", "sysconfig._correlate_dispatcher(name, scheme, vars)", "sysconfig.hist_frame(name, scheme, vars)", "sysconfig._argmin_dispatcher(name, scheme, vars)"], "sysconfig.get_path(name, scheme, vars, expand)": ["get_path", "sysconfig._get_trace_graph(name, scheme, vars, expand)", "sysconfig.get_python_lib(name, scheme, vars, expand)", "sysconfig._wrap_result(name, scheme, vars, expand)", "sysconfig.repeat(name, scheme, vars, expand)", "sysconfig._delete_dispatcher(name, scheme, vars, expand)", "sysconfig._center_dispatcher(name, scheme, vars, expand)", "sysconfig.gradient(name, scheme, vars, expand)", "sysconfig._digitize_dispatcher(name, scheme, vars, expand)", "sysconfig._code_dispatcher(name, scheme, vars, expand)", "sysconfig.run_path(name, scheme, vars, expand)", "sysconfig._get_path(name, scheme, vars, expand)", "sysconfig._correlate_dispatcher(name, scheme, vars, expand)", "sysconfig.hist_frame(name, scheme, vars, expand)", "sysconfig._argmin_dispatcher(name, scheme, vars, expand)"], "sysconfig.get_paths(scheme)": ["get_paths", "sysconfig.getpass(scheme)", "sysconfig.stat(scheme)", "sysconfig.relpath(scheme)", "sysconfig.get_python_inc(scheme)", "sysconfig.print_exc(scheme)", "sysconfig.win_getpass(scheme)", "sysconfig.print_last(scheme)", "sysconfig.unix_getpass(scheme)", "sysconfig._angle_dispatcher(scheme)", "sysconfig.read_feather(scheme)", "sysconfig.setpos(scheme)", "sysconfig.getabsfile(scheme)", "sysconfig._parse_datetime(scheme)", "sysconfig.xpath_tokenizer(scheme)"], "sysconfig.get_paths(scheme, vars)": ["get_paths", "sysconfig.getpass(scheme, vars)", "sysconfig.stat(scheme, vars)", "sysconfig.relpath(scheme, vars)", "sysconfig.get_python_inc(scheme, vars)", "sysconfig.print_exc(scheme, vars)", "sysconfig.win_getpass(scheme, vars)", "sysconfig.print_last(scheme, vars)", "sysconfig.unix_getpass(scheme, vars)", "sysconfig._angle_dispatcher(scheme, vars)", "sysconfig.read_feather(scheme, vars)", "sysconfig.setpos(scheme, vars)", "sysconfig.getabsfile(scheme, vars)", "sysconfig._parse_datetime(scheme, vars)", "sysconfig.xpath_tokenizer(scheme, vars)"], "sysconfig.get_paths(scheme, vars, expand)": ["get_paths", "sysconfig.getpass(scheme, vars, expand)", "sysconfig.stat(scheme, vars, expand)", "sysconfig.relpath(scheme, vars, expand)", "sysconfig.get_python_inc(scheme, vars, expand)", "sysconfig.print_exc(scheme, vars, expand)", "sysconfig.win_getpass(scheme, vars, expand)", "sysconfig.print_last(scheme, vars, expand)", "sysconfig.unix_getpass(scheme, vars, expand)", "sysconfig._angle_dispatcher(scheme, vars, expand)", "sysconfig.read_feather(scheme, vars, expand)", "sysconfig.setpos(scheme, vars, expand)", "sysconfig.getabsfile(scheme, vars, expand)", "sysconfig._parse_datetime(scheme, vars, expand)", "sysconfig.xpath_tokenizer(scheme, vars, expand)"], "sysconfig.get_python_version()": ["get_python_version", "sysconfig.python_version()", "sysconfig._get_system_version()", "sysconfig.python_version_tuple()", "sysconfig.python_revision()", "sysconfig.get_versions()", "sysconfig._get_option()", "sysconfig.get_python_lib()", "sysconfig.get_python_inc()", "sysconfig._sys_version()", "sysconfig.parse_mime_version()", "sysconfig.get_spawning_popen()", "sysconfig._get_overloaded_methods()", "sysconfig._norm_version()", "sysconfig.get_token()"], "sysconfig.is_python_build()": ["is_python_build", "sysconfig.get_python_lib()", "sysconfig.get_python_inc()", "sysconfig._uninstall_helper()", "sysconfig.axhline()", "sysconfig._get_sysconfigdata_name()", "sysconfig.axvline()", "sysconfig.platform()", "sysconfig.mainloop()", "sysconfig.poll()", "sysconfig._exit()", "sysconfig.poll3()", "sysconfig.poll2()", "sysconfig.ignore()", "sysconfig.browse()"], "sysconfig.parse_config_h(fp)": ["parse_config_h", "sysconfig.parse_makefile(fp)", "sysconfig._parse_makefile(fp)", "sysconfig.du_parse(fp)", "sysconfig.count_masked(fp)", "sysconfig.notmasked_contiguous(fp)", "sysconfig.parse(fp)", "sysconfig.iterparse(fp)", "sysconfig.figure(fp)", "sysconfig._parse_datetime(fp)", "sysconfig.locator_params(fp)", "sysconfig.add_charset(fp)", "sysconfig.open_connection(fp)", "sysconfig._cond_dispatcher(fp)", "sysconfig._find_spec_from_path(fp)"], "sysconfig.parse_config_h(fp, vars)": ["parse_config_h", "sysconfig.parse_makefile(fp, vars)", "sysconfig._parse_makefile(fp, vars)", "sysconfig.du_parse(fp, vars)", "sysconfig.count_masked(fp, vars)", "sysconfig.notmasked_contiguous(fp, vars)", "sysconfig.parse(fp, vars)", "sysconfig.iterparse(fp, vars)", "sysconfig.figure(fp, vars)", "sysconfig._parse_datetime(fp, vars)", "sysconfig.locator_params(fp, vars)", "sysconfig.add_charset(fp, vars)", "sysconfig.open_connection(fp, vars)", "sysconfig._cond_dispatcher(fp, vars)", "sysconfig._find_spec_from_path(fp, vars)"], "syslog.openlog()": ["openlog"], "syslog.openlog(ident)": ["openlog"], "syslog.openlog(ident, logoption)": ["openlog"], "syslog.openlog(ident, logoption, facility)": ["openlog"], "syslog.setlogmask(maskpri)": ["setlogmask"], "syslog.syslog(message)": ["syslog"], "syslog.syslog(priority, message)": ["syslog"], "system_random.colno": ["system_random.colno"], "system_random.lineno": ["system_random.lineno"], "system_random.msg": ["system_random.msg"], "system_random.pattern": ["system_random.pattern"], "tabnanny.NannyNag": ["tabnanny.NannyNag"], "tabnanny.check(file_or_dir)": ["check", "tabnanny._check_op(file_or_dir)", "tabnanny.check_fn(file_or_dir)", "tabnanny._perfcheck(file_or_dir)", "tabnanny._checkLevel(file_or_dir)", "tabnanny._check_mode(file_or_dir)", "tabnanny.check_call(file_or_dir)", "tabnanny.body_check(file_or_dir)", "tabnanny.checkcache(file_or_dir)", "tabnanny._check_size(file_or_dir)", "tabnanny.check_file(file_or_dir)", "tabnanny._check_name(file_or_dir)", "tabnanny._type_check(file_or_dir)", "tabnanny.check_ndim(file_or_dir)", "tabnanny._check_trace(file_or_dir)"], "tabnanny.filename_only": ["tabnanny.filename_only"], "tabnanny.process_tokens(tokens)": ["process_tokens", "tabnanny._processoptions(tokens)", "tabnanny.process_skipna(tokens)", "tabnanny.processor(tokens)", "tabnanny._print_tokens(tokens)", "tabnanny._tuple_postprocess(tokens)", "tabnanny.token_bytes(tokens)", "tabnanny.generate_tokens(tokens)", "tabnanny.start_processes(tokens)", "tabnanny.token_hex(tokens)", "tabnanny.get_token(tokens)", "tabnanny.reduce_tensor(tokens)", "tabnanny.compress_rows(tokens)", "tabnanny.broadcast_tensors(tokens)", "tabnanny.restore(tokens)"], "tabnanny.verbose": ["tabnanny.verbose"], "tarfile.CompressionError": ["tarfile.CompressionError"], "tarfile.DEFAULT_FORMAT": ["tarfile.DEFAULT_FORMAT"], "tarfile.ENCODING": ["tarfile.ENCODING"], "tarfile.ExtractError": ["tarfile.ExtractError"], "tarfile.GNU_FORMAT": ["tarfile.GNU_FORMAT"], "tarfile.HeaderError": ["tarfile.HeaderError"], "tarfile.PAX_FORMAT": ["tarfile.PAX_FORMAT"], "tarfile.ReadError": ["tarfile.ReadError"], "tarfile.StreamError": ["tarfile.StreamError"], "tarfile.TarError": ["tarfile.TarError"], "tarfile.TarFile": ["tarfile.TarFile"], "tarfile.TarFile()": ["TarFile"], "tarfile.TarFile(dereference=False)": ["TarFile", "tarfile.TarFile(dereference=True)"], "tarfile.TarFile(encoding=ENCODING)": ["TarFile"], "tarfile.TarFile(errors='surrogateescape')": ["TarFile", "tarfile.TarFile(errors=15)"], "tarfile.TarFile(fileobj=None)": ["TarFile", "tarfile.TarFile(fileobj=None)"], "tarfile.TarFile(format=DEFAULT_FORMAT)": ["TarFile"], "tarfile.TarFile(mode='r')": ["TarFile", "tarfile.TarFile(mode=1)"], "tarfile.TarFile(name=None)": ["TarFile", "tarfile.TarFile(name=None)"], "tarfile.TarFile(tarinfo=TarInfo)": ["TarFile"], "tarfile.TarInfo(name=\"\")": ["TarInfo", "tarfile.TarInfo(name=0)"], "tarfile.USTAR_FORMAT": ["tarfile.USTAR_FORMAT"], "tarfile.open(**kwargs)": ["open"], "tarfile.open(**kwargs, bufsize=10240)": ["open", "tarfile.open(**kwargs, bufsize='10240')"], "tarfile.open(**kwargs, fileobj=None)": ["open", "tarfile.open(**kwargs, fileobj=None)"], "tarfile.open(**kwargs, mode='r', fileobj=None)": ["open", "tarfile.open(**kwargs, mode='r', fileobj=None)", "tarfile.open(**kwargs, mode=1, fileobj=None)"], "tarfile.open(**kwargs, name=None)": ["open", "tarfile.open(**kwargs, name=None)"], "tarfile.open(**kwargs, name=None, mode='r')": ["open", "tarfile.open(**kwargs, name=None, mode='r')", "tarfile.open(**kwargs, name=None, mode=1)"], "task.add_done_callback(callback)": ["add_done_callback"], "task.add_done_callback(callback, context=None)": ["add_done_callback", "task.add_done_callback(callback, context=None)"], "task.all_tasks()": ["all_tasks"], "task.all_tasks(loop=None)": ["all_tasks", "task.all_tasks(loop=None)"], "task.cancel()": ["cancel"], "task.cancelled()": ["cancelled"], "task.current_task()": ["current_task"], "task.current_task(loop=None)": ["current_task", "task.current_task(loop=None)"], "task.done()": ["done"], "task.exception()": ["exception"], "task.get_stack()": ["get_stack"], "task.get_stack(limit=None)": ["get_stack", "task.get_stack(limit=None)"], "task.print_stack()": ["print_stack"], "task.print_stack(file=None)": ["print_stack", "task.print_stack(file=None)"], "task.print_stack(limit=None)": ["print_stack", "task.print_stack(limit=None)"], "task.print_stack(limit=None, file=None)": ["print_stack", "task.print_stack(limit=None, file=None)"], "task.remove_done_callback(callback)": ["remove_done_callback"], "task.result()": ["result"], "telnetlib.Telnet()": ["Telnet"], "telnetlib.Telnet(host=None)": ["Telnet", "telnetlib.Telnet(host=None)"], "telnetlib.Telnet(port=0)": ["Telnet", "telnetlib.Telnet(port='0')"], "telnetlib.Telnet(timeout)": ["Telnet"], "tempfile.NamedTemporaryFile(delete=True)": ["NamedTemporaryFile", "tempfile.NamedTemporaryFile(delete=False)", "tempfile.TemporaryFile(delete=True)", "tempfile._quantile_dispatcher(delete=True)", "tempfile._nanpercentile_dispatcher(delete=True)", "tempfile._percentile_dispatcher(delete=True)", "tempfile._nanquantile_dispatcher(delete=True)", "tempfile._var_dispatcher(delete=True)", "tempfile._disassemble_bytes(delete=True)", "tempfile._eye_dispatcher(delete=True)", "tempfile.namedtuple(delete=True)", "tempfile._namedtuple(delete=True)", "tempfile._full_like_dispatcher(delete=True)", "tempfile._geomspace_dispatcher(delete=True)", "tempfile._linspace_dispatcher(delete=True)"], "tempfile.NamedTemporaryFile(dir=None)": ["NamedTemporaryFile", "tempfile.NamedTemporaryFile(dir=None)", "tempfile.TemporaryFile(dir=None)", "tempfile._quantile_dispatcher(dir=None)", "tempfile._nanpercentile_dispatcher(dir=None)", "tempfile._percentile_dispatcher(dir=None)", "tempfile._nanquantile_dispatcher(dir=None)", "tempfile._var_dispatcher(dir=None)", "tempfile._disassemble_bytes(dir=None)", "tempfile._eye_dispatcher(dir=None)", "tempfile.namedtuple(dir=None)", "tempfile._namedtuple(dir=None)", "tempfile._full_like_dispatcher(dir=None)", "tempfile._geomspace_dispatcher(dir=None)", "tempfile._linspace_dispatcher(dir=None)"], "tempfile.NamedTemporaryFile(mode='w+b')": ["NamedTemporaryFile", "tempfile.NamedTemporaryFile(mode=3.0)", "tempfile.TemporaryFile(mode='w+b')", "tempfile._quantile_dispatcher(mode='w+b')", "tempfile._nanpercentile_dispatcher(mode='w+b')", "tempfile._percentile_dispatcher(mode='w+b')", "tempfile._nanquantile_dispatcher(mode='w+b')", "tempfile._var_dispatcher(mode='w+b')", "tempfile._disassemble_bytes(mode='w+b')", "tempfile._eye_dispatcher(mode='w+b')", "tempfile.namedtuple(mode='w+b')", "tempfile._namedtuple(mode='w+b')", "tempfile._full_like_dispatcher(mode='w+b')", "tempfile._geomspace_dispatcher(mode='w+b')", "tempfile._linspace_dispatcher(mode='w+b')"], "tempfile.NamedTemporaryFile(mode='w+b', buffering=None)": ["NamedTemporaryFile", "tempfile.NamedTemporaryFile(mode='w+b', buffering=None)", "tempfile.NamedTemporaryFile(mode=3.0, buffering=None)", "tempfile.TemporaryFile(mode='w+b', buffering=None)", "tempfile._quantile_dispatcher(mode='w+b', buffering=None)", "tempfile._nanpercentile_dispatcher(mode='w+b', buffering=None)", "tempfile._percentile_dispatcher(mode='w+b', buffering=None)", "tempfile._nanquantile_dispatcher(mode='w+b', buffering=None)", "tempfile._var_dispatcher(mode='w+b', buffering=None)", "tempfile._disassemble_bytes(mode='w+b', buffering=None)", "tempfile._eye_dispatcher(mode='w+b', buffering=None)", "tempfile.namedtuple(mode='w+b', buffering=None)", "tempfile._namedtuple(mode='w+b', buffering=None)", "tempfile._full_like_dispatcher(mode='w+b', buffering=None)", "tempfile._geomspace_dispatcher(mode='w+b', buffering=None)"], "tempfile.NamedTemporaryFile(newline=None)": ["NamedTemporaryFile", "tempfile.NamedTemporaryFile(newline=None)", "tempfile.TemporaryFile(newline=None)", "tempfile._quantile_dispatcher(newline=None)", "tempfile._nanpercentile_dispatcher(newline=None)", "tempfile._percentile_dispatcher(newline=None)", "tempfile._nanquantile_dispatcher(newline=None)", "tempfile._var_dispatcher(newline=None)", "tempfile._disassemble_bytes(newline=None)", "tempfile._eye_dispatcher(newline=None)", "tempfile.namedtuple(newline=None)", "tempfile._namedtuple(newline=None)", "tempfile._full_like_dispatcher(newline=None)", "tempfile._geomspace_dispatcher(newline=None)", "tempfile._linspace_dispatcher(newline=None)"], "tempfile.SpooledTemporaryFile(max_size=0, mode='w+b')": ["SpooledTemporaryFile", "tempfile.SpooledTemporaryFile(max_size='0', mode=3.0)"], "tempfile.SpooledTemporaryFile(mode='w+b')": ["SpooledTemporaryFile", "tempfile.SpooledTemporaryFile(mode=3)"], "tempfile.TemporaryDirectory()": ["TemporaryDirectory"], "tempfile.TemporaryDirectory(dir=None)": ["TemporaryDirectory", "tempfile.TemporaryDirectory(dir=None)"], "tempfile.TemporaryDirectory(prefix=None)": ["TemporaryDirectory", "tempfile.TemporaryDirectory(prefix=None)"], "tempfile.TemporaryDirectory(prefix=None, dir=None)": ["TemporaryDirectory", "tempfile.TemporaryDirectory(prefix=None, dir=None)"], "tempfile.TemporaryDirectory(suffix=None, dir=None)": ["TemporaryDirectory", "tempfile.TemporaryDirectory(suffix=None, dir=None)"], "tempfile.TemporaryDirectory(suffix=None, prefix=None)": ["TemporaryDirectory", "tempfile.TemporaryDirectory(suffix=None, prefix=None)"], "tempfile.TemporaryDirectory(suffix=None, prefix=None, dir=None)": ["TemporaryDirectory", "tempfile.TemporaryDirectory(suffix=None, prefix=None, dir=None)"], "tempfile.TemporaryFile()": ["TemporaryFile", "tempfile.NamedTemporaryFile()", "tempfile._disassemble_bytes()", "tempfile._quantile_dispatcher()", "tempfile._nanpercentile_dispatcher()", "tempfile.testfile()", "tempfile._percentile_dispatcher()", "tempfile._nanquantile_dispatcher()", "tempfile.prepare()", "tempfile._var_dispatcher()", "tempfile.ticklabel_format()", "tempfile.pcolormesh()", "tempfile.fromfile()", "tempfile.errorbar()", "tempfile._corrcoef_dispatcher()"], "tempfile.TemporaryFile(dir=None)": ["TemporaryFile", "tempfile.TemporaryFile(dir=None)", "tempfile.NamedTemporaryFile(dir=None)", "tempfile._disassemble_bytes(dir=None)", "tempfile._quantile_dispatcher(dir=None)", "tempfile._nanpercentile_dispatcher(dir=None)", "tempfile.testfile(dir=None)", "tempfile._percentile_dispatcher(dir=None)", "tempfile._nanquantile_dispatcher(dir=None)", "tempfile.prepare(dir=None)", "tempfile._var_dispatcher(dir=None)", "tempfile.ticklabel_format(dir=None)", "tempfile.pcolormesh(dir=None)", "tempfile.fromfile(dir=None)", "tempfile.errorbar(dir=None)"], "tempfile.TemporaryFile(mode='w+b')": ["TemporaryFile", "tempfile.TemporaryFile(mode=3)", "tempfile.NamedTemporaryFile(mode='w+b')", "tempfile._disassemble_bytes(mode='w+b')", "tempfile._quantile_dispatcher(mode='w+b')", "tempfile._nanpercentile_dispatcher(mode='w+b')", "tempfile.testfile(mode='w+b')", "tempfile._percentile_dispatcher(mode='w+b')", "tempfile._nanquantile_dispatcher(mode='w+b')", "tempfile.prepare(mode='w+b')", "tempfile._var_dispatcher(mode='w+b')", "tempfile.ticklabel_format(mode='w+b')", "tempfile.pcolormesh(mode='w+b')", "tempfile.fromfile(mode='w+b')", "tempfile.errorbar(mode='w+b')"], "tempfile.TemporaryFile(mode='w+b', buffering=None)": ["TemporaryFile", "tempfile.TemporaryFile(mode='w+b', buffering=None)", "tempfile.TemporaryFile(mode=3.0, buffering=None)", "tempfile.NamedTemporaryFile(mode='w+b', buffering=None)", "tempfile._disassemble_bytes(mode='w+b', buffering=None)", "tempfile._quantile_dispatcher(mode='w+b', buffering=None)", "tempfile._nanpercentile_dispatcher(mode='w+b', buffering=None)", "tempfile.testfile(mode='w+b', buffering=None)", "tempfile._percentile_dispatcher(mode='w+b', buffering=None)", "tempfile._nanquantile_dispatcher(mode='w+b', buffering=None)", "tempfile.prepare(mode='w+b', buffering=None)", "tempfile._var_dispatcher(mode='w+b', buffering=None)", "tempfile.ticklabel_format(mode='w+b', buffering=None)", "tempfile.pcolormesh(mode='w+b', buffering=None)", "tempfile.fromfile(mode='w+b', buffering=None)"], "tempfile.TemporaryFile(mode='w+b', encoding=None)": ["TemporaryFile", "tempfile.TemporaryFile(mode='w+b', encoding=None)", "tempfile.TemporaryFile(mode=3, encoding=None)", "tempfile.NamedTemporaryFile(mode='w+b', encoding=None)", "tempfile._disassemble_bytes(mode='w+b', encoding=None)", "tempfile._quantile_dispatcher(mode='w+b', encoding=None)", "tempfile._nanpercentile_dispatcher(mode='w+b', encoding=None)", "tempfile.testfile(mode='w+b', encoding=None)", "tempfile._percentile_dispatcher(mode='w+b', encoding=None)", "tempfile._nanquantile_dispatcher(mode='w+b', encoding=None)", "tempfile.prepare(mode='w+b', encoding=None)", "tempfile._var_dispatcher(mode='w+b', encoding=None)", "tempfile.ticklabel_format(mode='w+b', encoding=None)", "tempfile.pcolormesh(mode='w+b', encoding=None)", "tempfile.fromfile(mode='w+b', encoding=None)"], "tempfile.TemporaryFile(newline=None)": ["TemporaryFile", "tempfile.TemporaryFile(newline=None)", "tempfile.NamedTemporaryFile(newline=None)", "tempfile._disassemble_bytes(newline=None)", "tempfile._quantile_dispatcher(newline=None)", "tempfile._nanpercentile_dispatcher(newline=None)", "tempfile.testfile(newline=None)", "tempfile._percentile_dispatcher(newline=None)", "tempfile._nanquantile_dispatcher(newline=None)", "tempfile.prepare(newline=None)", "tempfile._var_dispatcher(newline=None)", "tempfile.ticklabel_format(newline=None)", "tempfile.pcolormesh(newline=None)", "tempfile.fromfile(newline=None)", "tempfile.errorbar(newline=None)"], "tempfile.gettempdir()": ["gettempdir", "tempfile.gettempdirb()", "tempfile.tempdir()", "tempfile.__getitem__()", "tempfile.getitem()", "tempfile.gettempprefix()", "tempfile._get_default_tempdir()", "tempfile.gettempprefixb()", "tempfile.get_temp_dir()", "tempfile.getwriter()", "tempfile.getitimer()", "tempfile.getreader()", "tempfile.getmro()", "tempfile.getpid()", "tempfile.geterr()"], "tempfile.gettempdirb()": ["gettempdirb", "tempfile.gettempdir()", "tempfile.tempdir()", "tempfile.gettempprefixb()", "tempfile.gettempprefix()", "tempfile.__getitem__()", "tempfile._get_default_tempdir()", "tempfile.getitem()", "tempfile.get_temp_dir()", "tempfile.getwriter()", "tempfile.getitimer()", "tempfile.getreader()", "tempfile.getmro()", "tempfile.getpid()", "tempfile.geterr()"], "tempfile.gettempprefix()": ["gettempprefix", "tempfile.gettempprefixb()", "tempfile._get_literal_prefix()", "tempfile.gettempdir()", "tempfile.gettempdirb()", "tempfile.gettext()", "tempfile.__getitem__()", "tempfile.getppid()", "tempfile.getitem()", "tempfile.get_parent_map()", "tempfile._get_charset_prefix()", "tempfile.get_interpreter()", "tempfile.dgettext()", "tempfile.ngettext()", "tempfile.lgettext()"], "tempfile.gettempprefixb()": ["gettempprefixb", "tempfile.gettempprefix()", "tempfile.gettempdirb()", "tempfile._get_literal_prefix()", "tempfile.gettempdir()", "tempfile.gettext()", "tempfile.__getitem__()", "tempfile.getppid()", "tempfile.getitem()", "tempfile.get_parent_map()", "tempfile._get_charset_prefix()", "tempfile.get_interpreter()", "tempfile.dgettext()", "tempfile.ngettext()", "tempfile.lgettext()"], "tempfile.mkdtemp()": ["mkdtemp", "tempfile.mktemp()", "tempfile.mkstemp()", "tempfile._mkstemp_inner()", "tempfile._maketup()", "tempfile.delitem()", "tempfile.__delitem__()", "tempfile.makedev()", "tempfile.tempdir()", "tempfile.post_mortem()", "tempfile._dexp()", "tempfile._dump()", "tempfile.dump()", "tempfile.step()", "tempfile.mode()"], "tempfile.mkdtemp(dir=None)": ["mkdtemp", "tempfile.mkdtemp(dir=None)", "tempfile.mktemp(dir=None)", "tempfile.mkstemp(dir=None)", "tempfile._mkstemp_inner(dir=None)", "tempfile._maketup(dir=None)", "tempfile.delitem(dir=None)", "tempfile.__delitem__(dir=None)", "tempfile.makedev(dir=None)", "tempfile.tempdir(dir=None)", "tempfile.post_mortem(dir=None)", "tempfile._dexp(dir=None)", "tempfile._dump(dir=None)", "tempfile.dump(dir=None)", "tempfile.step(dir=None)"], "tempfile.mkdtemp(prefix=None, dir=None)": ["mkdtemp", "tempfile.mkdtemp(prefix=None, dir=None)", "tempfile.mktemp(prefix=None, dir=None)", "tempfile.mkstemp(prefix=None, dir=None)", "tempfile._mkstemp_inner(prefix=None, dir=None)", "tempfile._maketup(prefix=None, dir=None)", "tempfile.delitem(prefix=None, dir=None)", "tempfile.__delitem__(prefix=None, dir=None)", "tempfile.makedev(prefix=None, dir=None)", "tempfile.tempdir(prefix=None, dir=None)", "tempfile.post_mortem(prefix=None, dir=None)", "tempfile._dexp(prefix=None, dir=None)", "tempfile._dump(prefix=None, dir=None)", "tempfile.dump(prefix=None, dir=None)", "tempfile.step(prefix=None, dir=None)"], "tempfile.mkdtemp(suffix=None)": ["mkdtemp", "tempfile.mkdtemp(suffix=None)", "tempfile.mktemp(suffix=None)", "tempfile.mkstemp(suffix=None)", "tempfile._mkstemp_inner(suffix=None)", "tempfile._maketup(suffix=None)", "tempfile.delitem(suffix=None)", "tempfile.__delitem__(suffix=None)", "tempfile.makedev(suffix=None)", "tempfile.tempdir(suffix=None)", "tempfile.post_mortem(suffix=None)", "tempfile._dexp(suffix=None)", "tempfile._dump(suffix=None)", "tempfile.dump(suffix=None)", "tempfile.step(suffix=None)"], "tempfile.mkdtemp(suffix=None, dir=None)": ["mkdtemp", "tempfile.mkdtemp(suffix=None, dir=None)", "tempfile.mktemp(suffix=None, dir=None)", "tempfile.mkstemp(suffix=None, dir=None)", "tempfile._mkstemp_inner(suffix=None, dir=None)", "tempfile._maketup(suffix=None, dir=None)", "tempfile.delitem(suffix=None, dir=None)", "tempfile.__delitem__(suffix=None, dir=None)", "tempfile.makedev(suffix=None, dir=None)", "tempfile.tempdir(suffix=None, dir=None)", "tempfile.post_mortem(suffix=None, dir=None)", "tempfile._dexp(suffix=None, dir=None)", "tempfile._dump(suffix=None, dir=None)", "tempfile.dump(suffix=None, dir=None)", "tempfile.step(suffix=None, dir=None)"], "tempfile.mkstemp()": ["mkstemp", "tempfile.mkdtemp()", "tempfile.mksalt()", "tempfile.post_mortem()", "tempfile.make_msgid()", "tempfile.listen()", "tempfile.clearstamps()", "tempfile.makeStringSeries()", "tempfile.random_state()", "tempfile.set_trace()", "tempfile.getsitepackages()", "tempfile.makePeriodFrame()", "tempfile.mode()", "tempfile.test()", "tempfile.makeFloatSeries()"], "tempfile.mkstemp(prefix=None)": ["mkstemp", "tempfile.mkstemp(prefix=None)", "tempfile.mkdtemp(prefix=None)", "tempfile.mksalt(prefix=None)", "tempfile.post_mortem(prefix=None)", "tempfile.make_msgid(prefix=None)", "tempfile.listen(prefix=None)", "tempfile.clearstamps(prefix=None)", "tempfile.makeStringSeries(prefix=None)", "tempfile.random_state(prefix=None)", "tempfile.set_trace(prefix=None)", "tempfile.getsitepackages(prefix=None)", "tempfile.makePeriodFrame(prefix=None)", "tempfile.mode(prefix=None)", "tempfile.test(prefix=None)"], "tempfile.mkstemp(prefix=None, dir=None)": ["mkstemp", "tempfile.mkstemp(prefix=None, dir=None)", "tempfile.mkdtemp(prefix=None, dir=None)", "tempfile.mksalt(prefix=None, dir=None)", "tempfile.post_mortem(prefix=None, dir=None)", "tempfile.make_msgid(prefix=None, dir=None)", "tempfile.listen(prefix=None, dir=None)", "tempfile.clearstamps(prefix=None, dir=None)", "tempfile.makeStringSeries(prefix=None, dir=None)", "tempfile.random_state(prefix=None, dir=None)", "tempfile.set_trace(prefix=None, dir=None)", "tempfile.getsitepackages(prefix=None, dir=None)", "tempfile.makePeriodFrame(prefix=None, dir=None)", "tempfile.mode(prefix=None, dir=None)", "tempfile.test(prefix=None, dir=None)"], "tempfile.mkstemp(prefix=None, text=False)": ["mkstemp", "tempfile.mkstemp(prefix=None, text=True)", "tempfile.mkdtemp(prefix=None, text=False)", "tempfile.mksalt(prefix=None, text=False)", "tempfile.post_mortem(prefix=None, text=False)", "tempfile.make_msgid(prefix=None, text=False)", "tempfile.listen(prefix=None, text=False)", "tempfile.clearstamps(prefix=None, text=False)", "tempfile.makeStringSeries(prefix=None, text=False)", "tempfile.random_state(prefix=None, text=False)", "tempfile.set_trace(prefix=None, text=False)", "tempfile.getsitepackages(prefix=None, text=False)", "tempfile.makePeriodFrame(prefix=None, text=False)", "tempfile.mode(prefix=None, text=False)", "tempfile.test(prefix=None, text=False)"], "tempfile.mkstemp(suffix=None)": ["mkstemp", "tempfile.mkstemp(suffix=None)", "tempfile.mkdtemp(suffix=None)", "tempfile.mksalt(suffix=None)", "tempfile.post_mortem(suffix=None)", "tempfile.make_msgid(suffix=None)", "tempfile.listen(suffix=None)", "tempfile.clearstamps(suffix=None)", "tempfile.makeStringSeries(suffix=None)", "tempfile.random_state(suffix=None)", "tempfile.set_trace(suffix=None)", "tempfile.getsitepackages(suffix=None)", "tempfile.makePeriodFrame(suffix=None)", "tempfile.mode(suffix=None)", "tempfile.test(suffix=None)"], "tempfile.mkstemp(suffix=None, dir=None)": ["mkstemp", "tempfile.mkstemp(suffix=None, dir=None)", "tempfile.mkdtemp(suffix=None, dir=None)", "tempfile.mksalt(suffix=None, dir=None)", "tempfile.post_mortem(suffix=None, dir=None)", "tempfile.make_msgid(suffix=None, dir=None)", "tempfile.listen(suffix=None, dir=None)", "tempfile.clearstamps(suffix=None, dir=None)", "tempfile.makeStringSeries(suffix=None, dir=None)", "tempfile.random_state(suffix=None, dir=None)", "tempfile.set_trace(suffix=None, dir=None)", "tempfile.getsitepackages(suffix=None, dir=None)", "tempfile.makePeriodFrame(suffix=None, dir=None)", "tempfile.mode(suffix=None, dir=None)", "tempfile.test(suffix=None, dir=None)"], "tempfile.mkstemp(suffix=None, prefix=None)": ["mkstemp", "tempfile.mkstemp(suffix=None, prefix=None)", "tempfile.mkdtemp(suffix=None, prefix=None)", "tempfile.mksalt(suffix=None, prefix=None)", "tempfile.post_mortem(suffix=None, prefix=None)", "tempfile.make_msgid(suffix=None, prefix=None)", "tempfile.listen(suffix=None, prefix=None)", "tempfile.clearstamps(suffix=None, prefix=None)", "tempfile.makeStringSeries(suffix=None, prefix=None)", "tempfile.random_state(suffix=None, prefix=None)", "tempfile.set_trace(suffix=None, prefix=None)", "tempfile.getsitepackages(suffix=None, prefix=None)", "tempfile.makePeriodFrame(suffix=None, prefix=None)", "tempfile.mode(suffix=None, prefix=None)", "tempfile.test(suffix=None, prefix=None)"], "tempfile.mkstemp(suffix=None, text=False)": ["mkstemp", "tempfile.mkstemp(suffix=None, text=True)", "tempfile.mkdtemp(suffix=None, text=False)", "tempfile.mksalt(suffix=None, text=False)", "tempfile.post_mortem(suffix=None, text=False)", "tempfile.make_msgid(suffix=None, text=False)", "tempfile.listen(suffix=None, text=False)", "tempfile.clearstamps(suffix=None, text=False)", "tempfile.makeStringSeries(suffix=None, text=False)", "tempfile.random_state(suffix=None, text=False)", "tempfile.set_trace(suffix=None, text=False)", "tempfile.getsitepackages(suffix=None, text=False)", "tempfile.makePeriodFrame(suffix=None, text=False)", "tempfile.mode(suffix=None, text=False)", "tempfile.test(suffix=None, text=False)"], "tempfile.mkstemp(text=False)": ["mkstemp", "tempfile.mkstemp(text=True)", "tempfile.mkdtemp(text=False)", "tempfile.mksalt(text=False)", "tempfile.post_mortem(text=False)", "tempfile.make_msgid(text=False)", "tempfile.listen(text=False)", "tempfile.clearstamps(text=False)", "tempfile.makeStringSeries(text=False)", "tempfile.random_state(text=False)", "tempfile.set_trace(text=False)", "tempfile.getsitepackages(text=False)", "tempfile.makePeriodFrame(text=False)", "tempfile.mode(text=False)", "tempfile.test(text=False)"], "tempfile.mktemp(prefix='tmp')": ["mktemp", "tempfile.mktemp(prefix=3)", "tempfile.iter_importers(prefix='tmp')", "tempfile.mkdtemp(prefix='tmp')", "tempfile.mkstemp(prefix='tmp')", "tempfile._node(prefix='tmp')", "tempfile.getfqdn(prefix='tmp')", "tempfile.stem(prefix='tmp')", "tempfile.rmtree(prefix='tmp')", "tempfile.remote(prefix='tmp')", "tempfile.open_memmap(prefix='tmp')", "tempfile.make_sparse(prefix='tmp')", "tempfile._raw_input(prefix='tmp')", "tempfile.testmod(prefix='tmp')", "tempfile._ptp(prefix='tmp')"], "tempfile.mktemp(prefix='tmp', dir=None)": ["mktemp", "tempfile.mktemp(prefix='tmp', dir=None)", "tempfile.mktemp(prefix=3, dir=None)", "tempfile.iter_importers(prefix='tmp', dir=None)", "tempfile.mkdtemp(prefix='tmp', dir=None)", "tempfile.mkstemp(prefix='tmp', dir=None)", "tempfile._node(prefix='tmp', dir=None)", "tempfile.getfqdn(prefix='tmp', dir=None)", "tempfile.stem(prefix='tmp', dir=None)", "tempfile.rmtree(prefix='tmp', dir=None)", "tempfile.remote(prefix='tmp', dir=None)", "tempfile.open_memmap(prefix='tmp', dir=None)", "tempfile.make_sparse(prefix='tmp', dir=None)", "tempfile._raw_input(prefix='tmp', dir=None)", "tempfile.testmod(prefix='tmp', dir=None)"], "tempfile.mktemp(suffix='')": ["mktemp", "tempfile.mktemp(suffix=0.0)", "tempfile.iter_importers(suffix='')", "tempfile.mkdtemp(suffix='')", "tempfile.mkstemp(suffix='')", "tempfile._node(suffix='')", "tempfile.getfqdn(suffix='')", "tempfile.stem(suffix='')", "tempfile.rmtree(suffix='')", "tempfile.remote(suffix='')", "tempfile.open_memmap(suffix='')", "tempfile.make_sparse(suffix='')", "tempfile._raw_input(suffix='')", "tempfile.testmod(suffix='')", "tempfile._ptp(suffix='')"], "tempfile.mktemp(suffix='', dir=None)": ["mktemp", "tempfile.mktemp(suffix='', dir=None)", "tempfile.mktemp(suffix=0, dir=None)", "tempfile.iter_importers(suffix='', dir=None)", "tempfile.mkdtemp(suffix='', dir=None)", "tempfile.mkstemp(suffix='', dir=None)", "tempfile._node(suffix='', dir=None)", "tempfile.getfqdn(suffix='', dir=None)", "tempfile.stem(suffix='', dir=None)", "tempfile.rmtree(suffix='', dir=None)", "tempfile.remote(suffix='', dir=None)", "tempfile.open_memmap(suffix='', dir=None)", "tempfile.make_sparse(suffix='', dir=None)", "tempfile._raw_input(suffix='', dir=None)", "tempfile.testmod(suffix='', dir=None)"], "tempfile.mktemp(suffix='', prefix='tmp')": ["mktemp", "tempfile.mktemp(suffix=0.0, prefix=3)", "tempfile.iter_importers(suffix='', prefix='tmp')", "tempfile.mkdtemp(suffix='', prefix='tmp')", "tempfile.mkstemp(suffix='', prefix='tmp')", "tempfile._node(suffix='', prefix='tmp')", "tempfile.getfqdn(suffix='', prefix='tmp')", "tempfile.stem(suffix='', prefix='tmp')", "tempfile.rmtree(suffix='', prefix='tmp')", "tempfile.remote(suffix='', prefix='tmp')", "tempfile.open_memmap(suffix='', prefix='tmp')", "tempfile.make_sparse(suffix='', prefix='tmp')", "tempfile._raw_input(suffix='', prefix='tmp')", "tempfile.testmod(suffix='', prefix='tmp')", "tempfile._ptp(suffix='', prefix='tmp')"], "tempfile.mktemp(suffix='', prefix='tmp', dir=None)": ["mktemp", "tempfile.mktemp(suffix='', prefix='tmp', dir=None)", "tempfile.mktemp(suffix=0, prefix=3, dir=None)", "tempfile.iter_importers(suffix='', prefix='tmp', dir=None)", "tempfile.mkdtemp(suffix='', prefix='tmp', dir=None)", "tempfile.mkstemp(suffix='', prefix='tmp', dir=None)", "tempfile._node(suffix='', prefix='tmp', dir=None)", "tempfile.getfqdn(suffix='', prefix='tmp', dir=None)", "tempfile.stem(suffix='', prefix='tmp', dir=None)", "tempfile.rmtree(suffix='', prefix='tmp', dir=None)", "tempfile.remote(suffix='', prefix='tmp', dir=None)", "tempfile.open_memmap(suffix='', prefix='tmp', dir=None)", "tempfile.make_sparse(suffix='', prefix='tmp', dir=None)", "tempfile._raw_input(suffix='', prefix='tmp', dir=None)", "tempfile.testmod(suffix='', prefix='tmp', dir=None)"], "tempfile.tempdir": ["tempfile.tempdir"], "template.substitute(mapping, **kwds)": ["substitute"], "template.template": ["template.template"], "terminal_size.columns": ["terminal_size.columns"], "terminal_size.lines": ["terminal_size.lines"], "termios.tcdrain(fd)": ["tcdrain"], "termios.tcflow(fd, action)": ["tcflow"], "termios.tcflush(fd, queue)": ["tcflush"], "termios.tcgetattr(fd)": ["tcgetattr"], "termios.tcsendbreak(fd, duration)": ["tcsendbreak"], "termios.tcsetattr(fd, when, attributes)": ["tcsetattr"], "test.support.ALWAYS_EQ": ["test.support.ALWAYS_EQ"], "test.support.CleanImport(*module_names)": ["CleanImport"], "test.support.EnvironmentVarGuard": ["test.support.EnvironmentVarGuard"], "test.support.FS_NONASCII": ["test.support.FS_NONASCII"], "test.support.HAVE_DOCSTRINGS": ["test.support.HAVE_DOCSTRINGS"], "test.support.IPV6_ENABLED": ["test.support.IPV6_ENABLED"], "test.support.LARGEST": ["test.support.LARGEST"], "test.support.MISSING_C_DOCSTRINGS": ["test.support.MISSING_C_DOCSTRINGS"], "test.support.PGO": ["test.support.PGO"], "test.support.PIPE_MAX_SIZE": ["test.support.PIPE_MAX_SIZE"], "test.support.SMALLEST": ["test.support.SMALLEST"], "test.support.SOCK_MAX_SIZE": ["test.support.SOCK_MAX_SIZE"], "test.support.SaveSignals": ["test.support.SaveSignals"], "test.support.SuppressCrashReport": ["test.support.SuppressCrashReport"], "test.support.TESTFN": ["test.support.TESTFN"], "test.support.TESTFN_NONASCII": ["test.support.TESTFN_NONASCII"], "test.support.TESTFN_UNDECODABLE": ["test.support.TESTFN_UNDECODABLE"], "test.support.TESTFN_UNENCODABLE": ["test.support.TESTFN_UNENCODABLE"], "test.support.TESTFN_UNICODE": ["test.support.TESTFN_UNICODE"], "test.support.TEST_DATA_DIR": ["test.support.TEST_DATA_DIR"], "test.support.TEST_HOME_DIR": ["test.support.TEST_HOME_DIR"], "test.support.TEST_HTTP_URL": ["test.support.TEST_HTTP_URL"], "test.support.TEST_SUPPORT_DIR": ["test.support.TEST_SUPPORT_DIR"], "test.support.TestFailed": ["test.support.TestFailed"], "test.support.TransientResource(exc, **kwargs)": ["TransientResource"], "test.support.WarningsRecorder": ["test.support.WarningsRecorder"], "test.support.bind_port(sock)": ["bind_port"], "test.support.bind_port(sock, host=HOST)": ["bind_port"], "test.support.bind_unix_socket(sock, addr)": ["bind_unix_socket"], "test.support.calcobjsize(fmt)": ["calcobjsize"], "test.support.calcvobjsize(fmt)": ["calcvobjsize"], "test.support.captured_stderr()": ["captured_stderr"], "test.support.captured_stdin()": ["captured_stdin"], "test.support.captured_stdout()": ["captured_stdout"], "test.support.change_cwd(path)": ["change_cwd"], "test.support.change_cwd(path, quiet=False)": ["change_cwd", "test.support.change_cwd(path, quiet=True)"], "test.support.check__all__(test_case, module)": ["check__all__"], "test.support.check__all__(test_case, module, blacklist=())": ["check__all__"], "test.support.check__all__(test_case, module, extra=())": ["check__all__"], "test.support.check__all__(test_case, module, extra=(), blacklist=())": ["check__all__"], "test.support.check__all__(test_case, module, name_of_module=None)": ["check__all__", "test.support.check__all__(test_case, module, name_of_module=None)"], "test.support.check__all__(test_case, module, name_of_module=None, blacklist=())": ["check__all__", "test.support.check__all__(test_case, module, name_of_module=None, blacklist=())"], "test.support.check__all__(test_case, module, name_of_module=None, extra=())": ["check__all__", "test.support.check__all__(test_case, module, name_of_module=None, extra=())"], "test.support.check__all__(test_case, module, name_of_module=None, extra=(), blacklist=())": ["check__all__", "test.support.check__all__(test_case, module, name_of_module=None, extra=(), blacklist=())"], "test.support.check_free_after_iterating(test, iter, cls)": ["check_free_after_iterating"], "test.support.check_free_after_iterating(test, iter, cls, args=())": ["check_free_after_iterating"], "test.support.check_impl_detail(**guards)": ["check_impl_detail"], "test.support.check_no_resource_warning(testcase)": ["check_no_resource_warning"], "test.support.check_syntax_error(testcase, statement)": ["check_syntax_error"], "test.support.check_syntax_error(testcase, statement, errtext='')": ["check_syntax_error", "test.support.check_syntax_error(testcase, statement, errtext=0.0)"], "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None)": ["check_syntax_error", "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None)", "test.support.check_syntax_error(testcase, statement, errtext=0, lineno=None)"], "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None, offset=None)": ["check_syntax_error", "test.support.check_syntax_error(testcase, statement, errtext='', lineno=None, offset=None)", "test.support.check_syntax_error(testcase, statement, errtext=0.0, lineno=None, offset=None)"], "test.support.check_syntax_error(testcase, statement, lineno=None)": ["check_syntax_error", "test.support.check_syntax_error(testcase, statement, lineno=None)"], "test.support.check_syntax_error(testcase, statement, lineno=None, offset=None)": ["check_syntax_error", "test.support.check_syntax_error(testcase, statement, lineno=None, offset=None)"], "test.support.check_syntax_error(testcase, statement, offset=None)": ["check_syntax_error", "test.support.check_syntax_error(testcase, statement, offset=None)"], "test.support.check_warnings(*filters)": ["check_warnings"], "test.support.check_warnings(*filters, quiet=True)": ["check_warnings", "test.support.check_warnings(*filters, quiet=False)"], "test.support.checksizeof(test, o, size)": ["checksizeof"], "test.support.create_empty_file(filename)": ["create_empty_file"], "test.support.detect_api_mismatch(ref_api, other_api)": ["detect_api_mismatch"], "test.support.detect_api_mismatch(ref_api, other_api, ignore=())": ["detect_api_mismatch"], "test.support.disable_faulthandler()": ["disable_faulthandler"], "test.support.disable_gc()": ["disable_gc"], "test.support.fd_count()": ["fd_count"], "test.support.find_unused_port()": ["find_unused_port"], "test.support.find_unused_port(family=socket.AF_INET)": ["find_unused_port"], "test.support.find_unused_port(socktype=socket.SOCK_STREAM)": ["find_unused_port"], "test.support.findfile(filename)": ["findfile"], "test.support.findfile(filename, subdir=None)": ["findfile", "test.support.findfile(filename, subdir=None)"], "test.support.forget(module_name)": ["forget"], "test.support.fs_is_case_insensitive(directory)": ["fs_is_case_insensitive"], "test.support.gc_collect()": ["gc_collect"], "test.support.get_attribute(obj, name)": ["get_attribute"], "test.support.import_fresh_module(name)": ["import_fresh_module"], "test.support.import_fresh_module(name, blocked=())": ["import_fresh_module"], "test.support.import_fresh_module(name, blocked=(), deprecated=False)": ["import_fresh_module", "test.support.import_fresh_module(name, blocked=(), deprecated=True)"], "test.support.import_fresh_module(name, deprecated=False)": ["import_fresh_module", "test.support.import_fresh_module(name, deprecated=True)"], "test.support.import_fresh_module(name, fresh=())": ["import_fresh_module"], "test.support.import_fresh_module(name, fresh=(), blocked=())": ["import_fresh_module"], "test.support.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)": ["import_fresh_module", "test.support.import_fresh_module(name, fresh=(), blocked=(), deprecated=True)"], "test.support.import_fresh_module(name, fresh=(), deprecated=False)": ["import_fresh_module", "test.support.import_fresh_module(name, fresh=(), deprecated=True)"], "test.support.import_module(name, required_on(), deprecated=False)": ["import_module", "test.support.import_module(name, required_on(), deprecated=True)"], "test.support.is_android": ["test.support.is_android"], "test.support.is_jython": ["test.support.is_jython"], "test.support.is_resource_enabled(resource)": ["is_resource_enabled"], "test.support.join_thread(thread)": ["join_thread"], "test.support.join_thread(thread, timeout=30.0)": ["join_thread", "test.support.join_thread(thread, timeout='30.0')"], "test.support.load_package_tests(pkg_dir, loader, standard_tests, pattern)": ["load_package_tests"], "test.support.make_bad_fd()": ["make_bad_fd"], "test.support.make_legacy_pyc(source)": ["make_legacy_pyc"], "test.support.match_test(test)": ["match_test"], "test.support.max_memuse": ["test.support.max_memuse"], "test.support.missing_compiler_executable()": ["missing_compiler_executable"], "test.support.missing_compiler_executable(cmd_names=)": [], "test.support.modules_cleanup(oldmodules)": ["modules_cleanup"], "test.support.modules_setup()": ["modules_setup"], "test.support.open_urlresource(url, *args, **kw)": ["open_urlresource"], "test.support.optim_args_from_interpreter_flags()": ["optim_args_from_interpreter_flags"], "test.support.patch(test_instance, object_to_patch, attr_name, new_value)": ["patch"], "test.support.python_is_optimized()": ["python_is_optimized"], "test.support.real_max_memuse": ["test.support.real_max_memuse"], "test.support.reap_children()": ["reap_children"], "test.support.record_original_stdout(stdout)": ["record_original_stdout"], "test.support.requires(resource)": ["requires"], "test.support.rmtree(path)": ["rmtree"], "test.support.run_doctest(module)": ["run_doctest"], "test.support.run_doctest(module, optionflags=0)": ["run_doctest", "test.support.run_doctest(module, optionflags='0')"], "test.support.run_doctest(module, verbosity=None)": ["run_doctest", "test.support.run_doctest(module, verbosity=None)"], "test.support.run_doctest(module, verbosity=None, optionflags=0)": ["run_doctest", "test.support.run_doctest(module, verbosity=None, optionflags=0)", "test.support.run_doctest(module, verbosity=None, optionflags='0')"], "test.support.run_in_subinterp(code)": ["run_in_subinterp"], "test.support.run_unittest(*classes)": ["run_unittest"], "test.support.script_helper.assert_python_failure(*args, **env_vars)": ["assert_python_failure"], "test.support.script_helper.assert_python_ok(*args, **env_vars)": ["assert_python_ok"], "test.support.script_helper.interpreter_requires_environment()": ["interpreter_requires_environment"], "test.support.script_helper.kill_python(p)": ["kill_python"], "test.support.script_helper.make_pkg(pkg_dir)": ["make_pkg"], "test.support.script_helper.make_script(script_dir, script_basename, source)": ["make_script"], "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=False)": ["make_script", "test.support.script_helper.make_script(script_dir, script_basename, source, omit_suffix=True)"], "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source)": ["make_zip_pkg"], "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, compiled=False)": ["make_zip_pkg", "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, compiled=True)"], "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth=1)": ["make_zip_pkg", "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth='1')"], "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth=1, compiled=False)": ["make_zip_pkg", "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth=1, compiled=True)", "test.support.script_helper.make_zip_pkg(zip_dir, zip_basename, pkg_name, script_basename, source, depth='1', compiled=False)"], "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name)": ["make_zip_script"], "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name, name_in_zip=None)": ["make_zip_script", "test.support.script_helper.make_zip_script(zip_dir, zip_basename, script_name, name_in_zip=None)"], "test.support.script_helper.run_python_until_end(*args, **env_vars)": ["run_python_until_end"], "test.support.script_helper.spawn_python(*args, **kw)": ["spawn_python"], "test.support.script_helper.spawn_python(*args, **kw, stderr=subprocess.STDOUT)": ["spawn_python"], "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE)": ["spawn_python"], "test.support.script_helper.spawn_python(*args, **kw, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)": ["spawn_python"], "test.support.set_match_tests(patterns)": ["set_match_tests"], "test.support.set_memlimit(limit)": ["set_memlimit"], "test.support.setswitchinterval(interval)": ["setswitchinterval"], "test.support.sortdict(dict)": ["sortdict"], "test.support.start_threads(threads)": ["start_threads"], "test.support.start_threads(threads, unlock=None)": ["start_threads", "test.support.start_threads(threads, unlock=None)"], "test.support.strip_python_strerr(stderr)": ["strip_python_strerr"], "test.support.swap_attr(obj, attr, new_val)": ["swap_attr"], "test.support.swap_item(obj, attr, new_val)": ["swap_item"], "test.support.system_must_validate_cert(f)": ["system_must_validate_cert"], "test.support.temp_cwd()": ["temp_cwd"], "test.support.temp_cwd(name='tempcwd')": ["temp_cwd", "test.support.temp_cwd(name=7)"], "test.support.temp_cwd(quiet=False)": ["temp_cwd", "test.support.temp_cwd(quiet=True)"], "test.support.temp_dir()": ["temp_dir"], "test.support.temp_dir(quiet=False)": ["temp_dir", "test.support.temp_dir(quiet=True)"], "test.support.temp_umask(umask)": ["temp_umask"], "test.support.threading_cleanup(*original_values)": ["threading_cleanup"], "test.support.transient_internet(resource_name)": ["transient_internet"], "test.support.transient_internet(resource_name, errnos=())": ["transient_internet"], "test.support.unix_shell": ["test.support.unix_shell"], "test.support.unlink(filename)": ["unlink"], "test.support.unload(name)": ["unload"], "test.support.verbose": ["test.support.verbose"], "test.support.wait_threads_exit()": ["wait_threads_exit"], "test.support.wait_threads_exit(timeout=60.0)": ["wait_threads_exit", "test.support.wait_threads_exit(timeout='60.0')"], "test_case.addCleanup(function, *args, **kwargs)": ["addCleanup"], "test_case.addTypeEqualityFunc(typeobj, function)": ["addTypeEqualityFunc"], "test_case.assertAlmostEqual(first, second)": ["assertAlmostEqual"], "test_case.assertAlmostEqual(first, second, delta=None)": ["assertAlmostEqual", "test_case.assertAlmostEqual(first, second, delta=None)"], "test_case.assertAlmostEqual(first, second, msg=None)": ["assertAlmostEqual", "test_case.assertAlmostEqual(first, second, msg=None)"], "test_case.assertAlmostEqual(first, second, msg=None, delta=None)": ["assertAlmostEqual", "test_case.assertAlmostEqual(first, second, msg=None, delta=None)"], "test_case.assertAlmostEqual(first, second, places=7)": ["assertAlmostEqual", "test_case.assertAlmostEqual(first, second, places='7')"], "test_case.assertAlmostEqual(first, second, places=7, delta=None)": ["assertAlmostEqual", "test_case.assertAlmostEqual(first, second, places=7, delta=None)", "test_case.assertAlmostEqual(first, second, places='7', delta=None)"], "test_case.assertAlmostEqual(first, second, places=7, msg=None)": ["assertAlmostEqual", "test_case.assertAlmostEqual(first, second, places=7, msg=None)", "test_case.assertAlmostEqual(first, second, places='7', msg=None)"], "test_case.assertAlmostEqual(first, second, places=7, msg=None, delta=None)": ["assertAlmostEqual", "test_case.assertAlmostEqual(first, second, places=7, msg=None, delta=None)", "test_case.assertAlmostEqual(first, second, places='7', msg=None, delta=None)"], "test_case.assertCountEqual(first, second)": ["assertCountEqual"], "test_case.assertCountEqual(first, second, msg=None)": ["assertCountEqual", "test_case.assertCountEqual(first, second, msg=None)"], "test_case.assertDictEqual(first, second)": ["assertDictEqual"], "test_case.assertDictEqual(first, second, msg=None)": ["assertDictEqual", "test_case.assertDictEqual(first, second, msg=None)"], "test_case.assertEqual(first, second)": ["assertEqual"], "test_case.assertEqual(first, second, msg=None)": ["assertEqual", "test_case.assertEqual(first, second, msg=None)"], "test_case.assertFalse(expr)": ["assertFalse"], "test_case.assertFalse(expr, msg=None)": ["assertFalse", "test_case.assertFalse(expr, msg=None)"], "test_case.assertGreaterEqual(first, second)": ["assertGreaterEqual"], "test_case.assertIn(first, second)": ["assertIn"], "test_case.assertIn(first, second, msg=None)": ["assertIn", "test_case.assertIn(first, second, msg=None)"], "test_case.assertIs(first, second)": ["assertIs"], "test_case.assertIs(first, second, msg=None)": ["assertIs", "test_case.assertIs(first, second, msg=None)"], "test_case.assertIsInstance(obj, cls)": ["assertIsInstance"], "test_case.assertIsInstance(obj, cls, msg=None)": ["assertIsInstance", "test_case.assertIsInstance(obj, cls, msg=None)"], "test_case.assertIsNone(expr)": ["assertIsNone"], "test_case.assertIsNot(first, second)": ["assertIsNot"], "test_case.assertIsNot(first, second, msg=None)": ["assertIsNot", "test_case.assertIsNot(first, second, msg=None)"], "test_case.assertIsNotNone(expr)": ["assertIsNotNone"], "test_case.assertLessEqual(first, second)": ["assertLessEqual"], "test_case.assertListEqual(first, second)": ["assertListEqual"], "test_case.assertListEqual(first, second, msg=None)": ["assertListEqual", "test_case.assertListEqual(first, second, msg=None)"], "test_case.assertLogs()": ["assertLogs"], "test_case.assertLogs(logger=None)": ["assertLogs", "test_case.assertLogs(logger=None)"], "test_case.assertLogs(logger=None, level=None)": ["assertLogs", "test_case.assertLogs(logger=None, level=None)"], "test_case.assertMultiLineEqual(first, second)": ["assertMultiLineEqual"], "test_case.assertMultiLineEqual(first, second, msg=None)": ["assertMultiLineEqual", "test_case.assertMultiLineEqual(first, second, msg=None)"], "test_case.assertNotAlmostEqual(first, second)": ["assertNotAlmostEqual"], "test_case.assertNotAlmostEqual(first, second, delta=None)": ["assertNotAlmostEqual", "test_case.assertNotAlmostEqual(first, second, delta=None)"], "test_case.assertNotAlmostEqual(first, second, msg=None)": ["assertNotAlmostEqual", "test_case.assertNotAlmostEqual(first, second, msg=None)"], "test_case.assertNotAlmostEqual(first, second, msg=None, delta=None)": ["assertNotAlmostEqual", "test_case.assertNotAlmostEqual(first, second, msg=None, delta=None)"], "test_case.assertNotAlmostEqual(first, second, places=7)": ["assertNotAlmostEqual", "test_case.assertNotAlmostEqual(first, second, places='7')"], "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)": ["assertNotAlmostEqual", "test_case.assertNotAlmostEqual(first, second, places=7, delta=None)", "test_case.assertNotAlmostEqual(first, second, places='7', delta=None)"], "test_case.assertNotAlmostEqual(first, second, places=7, msg=None)": ["assertNotAlmostEqual", "test_case.assertNotAlmostEqual(first, second, places=7, msg=None)", "test_case.assertNotAlmostEqual(first, second, places='7', msg=None)"], "test_case.assertNotEqual(first, second)": ["assertNotEqual"], "test_case.assertNotEqual(first, second, msg=None)": ["assertNotEqual", "test_case.assertNotEqual(first, second, msg=None)"], "test_case.assertNotIn(first, second)": ["assertNotIn"], "test_case.assertNotIsInstance(obj, cls)": ["assertNotIsInstance"], "test_case.assertNotIsInstance(obj, cls, msg=None)": ["assertNotIsInstance", "test_case.assertNotIsInstance(obj, cls, msg=None)"], "test_case.assertNotRegex(text, regex)": ["assertNotRegex"], "test_case.assertNotRegex(text, regex, msg=None)": ["assertNotRegex", "test_case.assertNotRegex(text, regex, msg=None)"], "test_case.assertRaises(exception)": ["assertRaises"], "test_case.assertRaises(exception, callable, *args, **kwds)": ["assertRaises"], "test_case.assertRaises(exception, msg=None)": ["assertRaises", "test_case.assertRaises(exception, msg=None)"], "test_case.assertRaisesRegex(exception, regex)": ["assertRaisesRegex"], "test_case.assertRaisesRegex(exception, regex, msg=None)": ["assertRaisesRegex", "test_case.assertRaisesRegex(exception, regex, msg=None)"], "test_case.assertRegex(text, regex)": ["assertRegex"], "test_case.assertRegex(text, regex, msg=None)": ["assertRegex", "test_case.assertRegex(text, regex, msg=None)"], "test_case.assertSetEqual(first, second)": ["assertSetEqual"], "test_case.assertSetEqual(first, second, msg=None)": ["assertSetEqual", "test_case.assertSetEqual(first, second, msg=None)"], "test_case.assertTrue(expr)": ["assertTrue"], "test_case.assertTupleEqual(first, second)": ["assertTupleEqual"], "test_case.assertTupleEqual(first, second, msg=None)": ["assertTupleEqual", "test_case.assertTupleEqual(first, second, msg=None)"], "test_case.assertWarns(warning)": ["assertWarns"], "test_case.assertWarns(warning, callable, *args, **kwds)": ["assertWarns"], "test_case.assertWarns(warning, msg=None)": ["assertWarns", "test_case.assertWarns(warning, msg=None)"], "test_case.assertWarnsRegex(warning, regex)": ["assertWarnsRegex"], "test_case.assertWarnsRegex(warning, regex, msg=None)": ["assertWarnsRegex", "test_case.assertWarnsRegex(warning, regex, msg=None)"], "test_case.debug()": ["debug"], "test_case.defaultTestResult()": ["defaultTestResult"], "test_case.doCleanups()": ["doCleanups"], "test_case.fail()": ["fail"], "test_case.fail(msg=None)": ["fail", "test_case.fail(msg=None)"], "test_case.failureException": ["test_case.failureException"], "test_case.id()": ["id"], "test_case.longMessage": ["test_case.longMessage"], "test_case.maxDiff": ["test_case.maxDiff"], "test_case.output": ["test_case.output"], "test_case.records": ["test_case.records"], "test_case.run()": ["run"], "test_case.run(result=None)": ["run", "test_case.run(result=None)"], "test_case.setUp()": ["setUp"], "test_case.setUpClass()": ["setUpClass"], "test_case.shortDescription()": ["shortDescription"], "test_case.skipTest(reason)": ["skipTest"], "test_case.subTest(**params)": ["subTest"], "test_case.subTest(**params, msg=None)": ["subTest", "test_case.subTest(**params, msg=None)"], "test_case.tearDown()": ["tearDown"], "test_case.tearDownClass()": ["tearDownClass"], "test_loader.discover(start_dir)": ["discover"], "test_loader.discover(start_dir, pattern='test*.py')": ["discover", "test_loader.discover(start_dir, pattern=8.0)"], "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)": ["discover", "test_loader.discover(start_dir, pattern='test*.py', top_level_dir=None)", "test_loader.discover(start_dir, pattern=8, top_level_dir=None)"], "test_loader.discover(start_dir, top_level_dir=None)": ["discover", "test_loader.discover(start_dir, top_level_dir=None)"], "test_loader.errors": ["test_loader.errors"], "test_loader.getTestCaseNames(testCaseClass)": ["getTestCaseNames"], "test_loader.loadTestsFromModule(module)": ["loadTestsFromModule"], "test_loader.loadTestsFromName(name)": ["loadTestsFromName"], "test_loader.loadTestsFromName(name, module=None)": ["loadTestsFromName", "test_loader.loadTestsFromName(name, module=None)"], "test_loader.loadTestsFromNames(names)": ["loadTestsFromNames"], "test_loader.loadTestsFromNames(names, module=None)": ["loadTestsFromNames", "test_loader.loadTestsFromNames(names, module=None)"], "test_loader.loadTestsFromTestCase(testCaseClass)": ["loadTestsFromTestCase"], "test_loader.sortTestMethodsUsing": ["test_loader.sortTestMethodsUsing"], "test_loader.suiteClass": ["test_loader.suiteClass"], "test_loader.testNamePatterns": ["test_loader.testNamePatterns"], "test_result.addError(test, err)": ["addError"], "test_result.addExpectedFailure(test, err)": ["addExpectedFailure"], "test_result.addFailure(test, err)": ["addFailure"], "test_result.addSkip(test, reason)": ["addSkip"], "test_result.addSubTest(test, subtest, outcome)": ["addSubTest"], "test_result.addSuccess(test)": ["addSuccess"], "test_result.buffer": ["test_result.buffer"], "test_result.errors": ["test_result.errors"], "test_result.expectedFailures": ["test_result.expectedFailures"], "test_result.failfast": ["test_result.failfast"], "test_result.failures": ["test_result.failures"], "test_result.shouldStop": ["test_result.shouldStop"], "test_result.skipped": ["test_result.skipped"], "test_result.startTest(test)": ["startTest"], "test_result.startTestRun()": ["startTestRun"], "test_result.stop()": ["stop"], "test_result.stopTest(test)": ["stopTest"], "test_result.tb_locals": ["test_result.tb_locals"], "test_result.unexpectedSuccesses": ["test_result.unexpectedSuccesses"], "test_result.wasSuccessful()": ["wasSuccessful"], "test_suite.__iter__()": ["__iter__"], "test_suite.addTest(test)": ["addTest"], "test_suite.addTests(tests)": ["addTests"], "test_suite.debug()": ["debug"], "test_suite.run(result)": ["run"], "text_calendar.formatmonth(theyear, themonth)": ["formatmonth"], "text_calendar.formatmonth(theyear, themonth, l=0)": ["formatmonth", "text_calendar.formatmonth(theyear, themonth, l='0')"], "text_calendar.formatmonth(theyear, themonth, w=0)": ["formatmonth", "text_calendar.formatmonth(theyear, themonth, w='0')"], "text_calendar.formatmonth(theyear, themonth, w=0, l=0)": ["formatmonth", "text_calendar.formatmonth(theyear, themonth, w='0', l='0')"], "text_calendar.formatyear(theyear)": ["formatyear"], "text_calendar.formatyear(theyear, c=6)": ["formatyear", "text_calendar.formatyear(theyear, c='6')"], "text_calendar.formatyear(theyear, l=1)": ["formatyear", "text_calendar.formatyear(theyear, l='1')"], "text_calendar.formatyear(theyear, l=1, c=6)": ["formatyear", "text_calendar.formatyear(theyear, l='1', c='6')"], "text_calendar.formatyear(theyear, l=1, m=3)": ["formatyear", "text_calendar.formatyear(theyear, l='1', m='3')"], "text_calendar.formatyear(theyear, m=3)": ["formatyear", "text_calendar.formatyear(theyear, m='3')"], "text_calendar.formatyear(theyear, w=2)": ["formatyear", "text_calendar.formatyear(theyear, w='2')"], "text_calendar.formatyear(theyear, w=2, c=6)": ["formatyear", "text_calendar.formatyear(theyear, w='2', c='6')"], "text_calendar.formatyear(theyear, w=2, l=1)": ["formatyear", "text_calendar.formatyear(theyear, w='2', l='1')"], "text_calendar.formatyear(theyear, w=2, m=3)": ["formatyear", "text_calendar.formatyear(theyear, w='2', m='3')"], "text_calendar.prmonth(theyear, themonth)": ["prmonth"], "text_calendar.prmonth(theyear, themonth, l=0)": ["prmonth", "text_calendar.prmonth(theyear, themonth, l='0')"], "text_calendar.prmonth(theyear, themonth, w=0)": ["prmonth", "text_calendar.prmonth(theyear, themonth, w='0')"], "text_calendar.prmonth(theyear, themonth, w=0, l=0)": ["prmonth", "text_calendar.prmonth(theyear, themonth, w='0', l='0')"], "text_calendar.pryear(theyear, c=6)": ["pryear", "text_calendar.pryear(theyear, c='6')"], "text_calendar.pryear(theyear, l=1)": ["pryear", "text_calendar.pryear(theyear, l='1')"], "text_calendar.pryear(theyear, l=1, c=6)": ["pryear", "text_calendar.pryear(theyear, l='1', c='6')"], "text_calendar.pryear(theyear, l=1, m=3)": ["pryear", "text_calendar.pryear(theyear, l='1', m='3')"], "text_calendar.pryear(theyear, m=3)": ["pryear", "text_calendar.pryear(theyear, m='3')"], "text_calendar.pryear(theyear, w=2)": ["pryear", "text_calendar.pryear(theyear, w='2')"], "text_calendar.pryear(theyear, w=2, c=6)": ["pryear", "text_calendar.pryear(theyear, w='2', c='6')"], "text_calendar.pryear(theyear, w=2, l=1)": ["pryear", "text_calendar.pryear(theyear, w='2', l='1')"], "text_calendar.pryear(theyear, w=2, m=3)": ["pryear", "text_calendar.pryear(theyear, w='2', m='3')"], "text_io_base.encoding": ["text_io_base.encoding"], "text_io_base.errors": ["text_io_base.errors"], "text_io_base.newlines": ["text_io_base.newlines"], "text_io_base.read()": ["read"], "text_io_base.read(size=-1)": ["read", "text_io_base.read(size=(- '1'))"], "text_io_base.readline()": ["readline"], "text_io_base.readline(size=-1)": ["readline", "text_io_base.readline(size=(- '1'))"], "text_io_base.seek(offset)": ["seek"], "text_io_base.seek(offset, whence=SEEK_SET)": ["seek"], "text_io_base.write(s)": ["write"], "text_io_wrapper.reconfigure()": ["reconfigure"], "text_io_wrapper.reconfigure(encoding, errors, newline)": ["reconfigure"], "text_io_wrapper.reconfigure(encoding, errors, newline,                      line_buffering)": ["reconfigure"], "text_io_wrapper.reconfigure(encoding, errors, newline,                      line_buffering, write_through)": ["reconfigure"], "text_io_wrapper.write_through": ["text_io_wrapper.write_through"], "text_test_runner.run(test)": ["run"], "text_wrapper.break_long_words": ["text_wrapper.break_long_words"], "text_wrapper.break_on_hyphens": ["text_wrapper.break_on_hyphens"], "text_wrapper.drop_whitespace": ["text_wrapper.drop_whitespace"], "text_wrapper.expand_tabs": ["text_wrapper.expand_tabs"], "text_wrapper.fill(text)": ["fill"], "text_wrapper.fix_sentence_endings": ["text_wrapper.fix_sentence_endings"], "text_wrapper.initial_indent": ["text_wrapper.initial_indent"], "text_wrapper.max_lines": ["text_wrapper.max_lines"], "text_wrapper.placeholder": ["text_wrapper.placeholder"], "text_wrapper.replace_whitespace": ["text_wrapper.replace_whitespace"], "text_wrapper.subsequent_indent": ["text_wrapper.subsequent_indent"], "text_wrapper.tabsize": ["text_wrapper.tabsize"], "text_wrapper.width": ["text_wrapper.width"], "text_wrapper.wrap(text)": ["wrap"], "textbox.do_command(ch)": ["do_command"], "textbox.edit()": ["edit"], "textbox.edit(validator)": ["edit"], "textbox.gather()": ["gather"], "textbox.stripspaces": ["textbox.stripspaces"], "textwrap.TextWrapper(**kwargs)": ["TextWrapper"], "textwrap.dedent(text)": ["dedent", "textwrap.reindent(text)", "textwrap.get_ident(text)", "textwrap._indent(text)", "textwrap.det(text)", "textwrap.is_dependent(text)", "textwrap.indent(text)", "textwrap.delete(text)", "textwrap.decode(text)", "textwrap._addindent(text)", "textwrap._get_indent(text)", "textwrap._decode_line(text)", "textwrap.decodebytes(text)", "textwrap.decode_long(text)", "textwrap.gradient(text)"], "textwrap.fill(text, **kwargs)": ["fill", "textwrap._raise_power(text, **kwargs)", "textwrap.wrap(text, **kwargs)", "textwrap.zfill(text, **kwargs)", "textwrap.filled(text, **kwargs)", "textwrap.full(text, **kwargs)", "textwrap.kill(text, **kwargs)", "textwrap.findall(text, **kwargs)", "textwrap.filling(text, **kwargs)", "textwrap.final(text, **kwargs)", "textwrap.end_fill(text, **kwargs)", "textwrap.field(text, **kwargs)", "textwrap.fillcolor(text, **kwargs)", "textwrap._lock_file(text, **kwargs)", "textwrap.isnull(text, **kwargs)"], "textwrap.fill(text, **kwargs, width=70)": ["fill", "textwrap.fill(text, **kwargs, width='70')", "textwrap._raise_power(text, **kwargs, width=70)", "textwrap.wrap(text, **kwargs, width=70)", "textwrap.zfill(text, **kwargs, width=70)", "textwrap.filled(text, **kwargs, width=70)", "textwrap.full(text, **kwargs, width=70)", "textwrap.kill(text, **kwargs, width=70)", "textwrap.findall(text, **kwargs, width=70)", "textwrap.filling(text, **kwargs, width=70)", "textwrap.final(text, **kwargs, width=70)", "textwrap.end_fill(text, **kwargs, width=70)", "textwrap.field(text, **kwargs, width=70)", "textwrap.fillcolor(text, **kwargs, width=70)", "textwrap._lock_file(text, **kwargs, width=70)"], "textwrap.indent(text, prefix)": ["indent", "textwrap._indent(text, prefix)", "textwrap.reindent(text, prefix)", "textwrap._addindent(text, prefix)", "textwrap.indentsize(text, prefix)", "textwrap._get_indent(text, prefix)", "textwrap.index(text, prefix)", "textwrap.__index__(text, prefix)", "textwrap.identity(text, prefix)", "textwrap.findtext(text, prefix)", "textwrap.invert(text, prefix)", "textwrap._not_in(text, prefix)", "textwrap.get_ident(text, prefix)", "textwrap._new_Index(text, prefix)", "textwrap.rindex(text, prefix)"], "textwrap.indent(text, prefix, predicate=None)": ["indent", "textwrap.indent(text, prefix, predicate=None)", "textwrap._indent(text, prefix, predicate=None)", "textwrap.reindent(text, prefix, predicate=None)", "textwrap._addindent(text, prefix, predicate=None)", "textwrap.indentsize(text, prefix, predicate=None)", "textwrap._get_indent(text, prefix, predicate=None)", "textwrap.index(text, prefix, predicate=None)", "textwrap.__index__(text, prefix, predicate=None)", "textwrap.identity(text, prefix, predicate=None)", "textwrap.findtext(text, prefix, predicate=None)", "textwrap.invert(text, prefix, predicate=None)", "textwrap._not_in(text, prefix, predicate=None)", "textwrap.get_ident(text, prefix, predicate=None)", "textwrap._new_Index(text, prefix, predicate=None)"], "textwrap.shorten(text, width, **kwargs)": ["shorten", "textwrap._shorten(text, width, **kwargs)", "textwrap.sort(text, width, **kwargs)", "textwrap.showturtle(text, width, **kwargs)", "textwrap._write_short(text, width, **kwargs)", "textwrap.msort(text, width, **kwargs)", "textwrap.searchsorted(text, width, **kwargs)", "textwrap._write_ushort(text, width, **kwargs)", "textwrap.do_shorts(text, width, **kwargs)", "textwrap.Screen(text, width, **kwargs)", "textwrap.source(text, width, **kwargs)", "textwrap.listen(text, width, **kwargs)", "textwrap._writen(text, width, **kwargs)", "textwrap.isfortran(text, width, **kwargs)", "textwrap.hot(text, width, **kwargs)"], "textwrap.wrap(text, **kwargs)": ["wrap", "textwrap._raise_power(text, **kwargs)", "textwrap._wrap(text, **kwargs)", "textwrap.fill(text, **kwargs)", "textwrap.wraps(text, **kwargs)", "textwrap._wrapit(text, **kwargs)", "textwrap.unwrap(text, **kwargs)", "textwrap.wrapper(text, **kwargs)", "textwrap.trapz(text, **kwargs)", "textwrap._wrapfunc(text, **kwargs)", "textwrap.reshape(text, **kwargs)", "textwrap.waitpid(text, **kwargs)", "textwrap.wrap_socket(text, **kwargs)", "textwrap._wrap_result(text, **kwargs)", "textwrap.OpenWrapper(text, **kwargs)"], "textwrap.wrap(text, **kwargs, width=70)": ["wrap", "textwrap.wrap(text, **kwargs, width='70')", "textwrap._raise_power(text, **kwargs, width=70)", "textwrap._wrap(text, **kwargs, width=70)", "textwrap.fill(text, **kwargs, width=70)", "textwrap.wraps(text, **kwargs, width=70)", "textwrap._wrapit(text, **kwargs, width=70)", "textwrap.unwrap(text, **kwargs, width=70)", "textwrap.wrapper(text, **kwargs, width=70)", "textwrap.trapz(text, **kwargs, width=70)", "textwrap._wrapfunc(text, **kwargs, width=70)", "textwrap.reshape(text, **kwargs, width=70)", "textwrap.waitpid(text, **kwargs, width=70)", "textwrap.wrap_socket(text, **kwargs, width=70)", "textwrap._wrap_result(text, **kwargs, width=70)"], "thread.daemon": ["thread.daemon"], "thread.getName()": ["getName"], "thread.isDaemon()": ["isDaemon"], "thread.join()": ["join"], "thread.join(timeout=None)": ["join", "thread.join(timeout=None)"], "thread.run()": ["run"], "thread.setName()": ["setName"], "thread.start()": ["start"], "threading.Barrier(parties)": ["Barrier"], "threading.Barrier(parties, action=None)": ["Barrier", "threading.Barrier(parties, action=None)"], "threading.Barrier(parties, timeout=None)": ["Barrier", "threading.Barrier(parties, timeout=None)"], "threading.BoundedSemaphore()": ["BoundedSemaphore"], "threading.BoundedSemaphore(value=1)": ["BoundedSemaphore", "threading.BoundedSemaphore(value='1')"], "threading.Condition()": ["Condition"], "threading.Condition(lock=None)": ["Condition", "threading.Condition(lock=None)"], "threading.Event": ["threading.Event"], "threading.Lock": ["threading.Lock"], "threading.Semaphore(value=1)": ["Semaphore", "threading.Semaphore(value='1')"], "threading.Thread(args=())": ["Thread"], "threading.Thread(daemon=None)": ["Thread", "threading.Thread(daemon=None)"], "threading.Thread(group=None, name=None)": ["Thread", "threading.Thread(group=None, name=None)"], "threading.Timer(interval, function)": ["Timer"], "threading.Timer(interval, function, args=None)": ["Timer", "threading.Timer(interval, function, args=None)"], "threading.Timer(interval, function, args=None, kwargs=None)": ["Timer", "threading.Timer(interval, function, args=None, kwargs=None)"], "threading.Timer(interval, function, kwargs=None)": ["Timer", "threading.Timer(interval, function, kwargs=None)"], "threading.active_count()": ["active_count", "threading.activeCount()", "threading._copy_archive()", "threading.active_children()", "threading.unpack_archive()", "threading.create_archive()", "threading.count_calls()", "threading._consecutive_return_counts()", "threading.count()", "threading._getaction()", "threading.plot_date()", "threading._check_timeout()", "threading.concat_compat()", "threading._counts()", "threading.Client()"], "threading.enumerate()": ["enumerate", "threading._enumerate()", "threading.ensure_relative()", "threading.to_numeric()", "threading.generate_range()", "threading._test_generator()", "threading.interactive()", "threading.isgenerator()", "threading.einsum_path()", "threading.getuserbase()", "threading.use_numexpr()", "threading._getuserbase()", "threading.interpolate()", "threading._ensure_term()", "threading._cnfmerge()"], "threading.local": ["threading.local"], "threading.main_thread()": ["main_thread", "threading.read_magic()", "threading.read_int4()", "threading.pthread_kill()", "threading.current_thread()", "threading._chain_future()", "threading.read_feather()", "threading.read_floatnl()", "threading.read_json()", "threading._read_long()", "threading.imread()", "threading.start_new_thread()", "threading.three_way_cmp()", "threading.currentThread()", "threading.makeIntervalIndex()"], "threading.settrace(func)": ["settrace", "threading.set_trace(func)", "threading._get_traces(func)", "threading.trace(func)", "threading.setraw(func)", "threading.tracer(func)", "threading.extract(func)", "threading.setitem(func)", "threading.__setitem__(func)", "threading.askretrycancel(func)", "threading._check_trace(func)", "threading.istraceback(func)", "threading.setreuid(func)", "threading.stack(func)", "threading.distance(func)"], "threading.stack_size()": ["stack_size", "threading.print_stack()", "threading.set_trace()", "threading.extract_stack()", "threading.format_stack()", "threading.getsitepackages()", "threading.pensize()", "threading.current_task()", "threading.interact()", "threading.getTimeSeriesData()", "threading.get_rank()", "threading.test()", "threading.token_hex()", "threading.shapesize()", "threading.all_tasks()"], "threading.stack_size(size)": ["stack_size", "threading.print_stack(size)", "threading.set_trace(size)", "threading.extract_stack(size)", "threading.format_stack(size)", "threading.getsitepackages(size)", "threading.pensize(size)", "threading.current_task(size)", "threading.interact(size)", "threading.getTimeSeriesData(size)", "threading.get_rank(size)", "threading.test(size)", "threading.token_hex(size)", "threading.shapesize(size)", "threading.all_tasks(size)"], "time.CLOCK_BOOTTIME": ["time.CLOCK_BOOTTIME"], "time.CLOCK_HIGHRES": ["time.CLOCK_HIGHRES"], "time.CLOCK_MONOTONIC": ["time.CLOCK_MONOTONIC"], "time.CLOCK_MONOTONIC_RAW": ["time.CLOCK_MONOTONIC_RAW"], "time.CLOCK_PROCESS_CPUTIME_ID": ["time.CLOCK_PROCESS_CPUTIME_ID"], "time.CLOCK_PROF": ["time.CLOCK_PROF"], "time.CLOCK_REALTIME": ["time.CLOCK_REALTIME"], "time.CLOCK_THREAD_CPUTIME_ID": ["time.CLOCK_THREAD_CPUTIME_ID"], "time.CLOCK_UPTIME": ["time.CLOCK_UPTIME"], "time.__format__(format)": ["__format__"], "time.__str__()": ["__str__"], "time.altzone": ["time.altzone"], "time.asctime()": ["asctime"], "time.asctime(t)": ["asctime"], "time.clock()": ["clock"], "time.clock_getres(clk_id)": ["clock_getres"], "time.clock_gettime(clk_id)": ["clock_gettime"], "time.clock_settime(clk_id, time: float)": [], "time.clock_settime_ns(clk_id, time: int)": [], "time.ctime()": ["ctime"], "time.ctime(secs)": ["ctime"], "time.daylight": ["time.daylight"], "time.dst()": ["dst"], "time.fold": ["time.fold"], "time.fromisoformat(time_string)": ["fromisoformat"], "time.get_clock_info(name)": ["get_clock_info"], "time.gmtime()": ["gmtime"], "time.gmtime(secs)": ["gmtime"], "time.hour": ["time.hour"], "time.isoformat()": ["isoformat"], "time.isoformat(timespec='auto')": ["isoformat", "time.isoformat(timespec=4)"], "time.localtime()": ["localtime"], "time.localtime(secs)": ["localtime"], "time.min": ["time.min"], "time.minute": ["time.minute"], "time.mktime(t)": ["mktime"], "time.monotonic()": ["monotonic"], "time.monotonic_ns()": ["monotonic_ns"], "time.perf_counter()": ["perf_counter"], "time.process_time()": ["process_time"], "time.pthread_getcpuclockid(thread_id)": ["pthread_getcpuclockid"], "time.replace()": ["replace"], "time.replace(hour=self.hour)": ["replace"], "time.replace(hour=self.hour, minute=self.minute)": ["replace"], "time.replace(microsecond=self.microsecond)": ["replace"], "time.replace(minute=self.minute)": ["replace"], "time.replace(second=self.second)": ["replace"], "time.replace(tzinfo=self.tzinfo)": ["replace"], "time.resolution": ["time.resolution"], "time.sleep(secs)": ["sleep"], "time.strftime(format)": ["strftime"], "time.strftime(format, t)": ["strftime"], "time.strptime(string)": ["strptime"], "time.strptime(string, format)": ["strptime"], "time.struct_time": ["time.struct_time"], "time.thread_time()": ["thread_time"], "time.time()": ["time"], "time.time_ns()": ["time_ns"], "time.timezone": ["time.timezone"], "time.tzinfo": ["time.tzinfo"], "time.tzname": ["time.tzname"], "time.tzname()": ["tzname"], "time.tzset()": ["tzset"], "time.utcoffset()": ["utcoffset"], "timedelta.max": ["timedelta.max"], "timedelta.min": ["timedelta.min"], "timedelta.resolution": ["timedelta.resolution"], "timedelta.total_seconds()": ["total_seconds"], "timeit.Timer()": ["Timer"], "timeit.Timer(globals=None)": ["Timer", "timeit.Timer(globals=None)"], "timeit.Timer(setup='pass')": ["Timer", "timeit.Timer(setup=4.0)"], "timeit.Timer(setup='pass', timer=<timer function>)": [], "timeit.Timer(stmt='pass')": ["Timer", "timeit.Timer(stmt=4.0)"], "timeit.Timer(stmt='pass', globals=None)": ["Timer", "timeit.Timer(stmt='pass', globals=None)", "timeit.Timer(stmt=4, globals=None)"], "timeit.Timer(stmt='pass', setup='pass')": ["Timer", "timeit.Timer(stmt=4.0, setup=4.0)"], "timeit.Timer(stmt='pass', timer=<timer function>)": [], "timeit.Timer(timer=<timer function>)": [], "timeit.repeat(globals=None)": ["repeat", "timeit.repeat(globals=None)", "timeit.replace(globals=None)", "timeit.prepare(globals=None)", "timeit.get_path(globals=None)", "timeit.ParserCreate(globals=None)", "timeit.onrelease(globals=None)", "timeit._repeat_dispatcher(globals=None)", "timeit.rmtree(globals=None)", "timeit.rename(globals=None)", "timeit.read_table(globals=None)", "timeit.rsplit(globals=None)", "timeit.delete(globals=None)", "timeit.create_archive(globals=None)", "timeit.remote(globals=None)"], "timeit.repeat(number=1000000)": ["repeat", "timeit.repeat(number='1000000')", "timeit.replace(number=1000000)", "timeit.prepare(number=1000000)", "timeit.get_path(number=1000000)", "timeit.ParserCreate(number=1000000)", "timeit.onrelease(number=1000000)", "timeit._repeat_dispatcher(number=1000000)", "timeit.rmtree(number=1000000)", "timeit.rename(number=1000000)", "timeit.read_table(number=1000000)", "timeit.rsplit(number=1000000)", "timeit.delete(number=1000000)", "timeit.create_archive(number=1000000)", "timeit.remote(number=1000000)"], "timeit.repeat(repeat=5)": ["repeat", "timeit.repeat(repeat='5')", "timeit.replace(repeat=5)", "timeit.prepare(repeat=5)", "timeit.get_path(repeat=5)", "timeit.ParserCreate(repeat=5)", "timeit.onrelease(repeat=5)", "timeit._repeat_dispatcher(repeat=5)", "timeit.rmtree(repeat=5)", "timeit.rename(repeat=5)", "timeit.read_table(repeat=5)", "timeit.rsplit(repeat=5)", "timeit.delete(repeat=5)", "timeit.create_archive(repeat=5)", "timeit.remote(repeat=5)"], "timeit.repeat(setup='pass')": ["repeat", "timeit.repeat(setup=4.0)", "timeit.replace(setup='pass')", "timeit.prepare(setup='pass')", "timeit.get_path(setup='pass')", "timeit.ParserCreate(setup='pass')", "timeit.onrelease(setup='pass')", "timeit._repeat_dispatcher(setup='pass')", "timeit.rmtree(setup='pass')", "timeit.rename(setup='pass')", "timeit.read_table(setup='pass')", "timeit.rsplit(setup='pass')", "timeit.delete(setup='pass')", "timeit.create_archive(setup='pass')", "timeit.remote(setup='pass')"], "timeit.repeat(stmt='pass')": ["repeat", "timeit.repeat(stmt=4)", "timeit.replace(stmt='pass')", "timeit.prepare(stmt='pass')", "timeit.get_path(stmt='pass')", "timeit.ParserCreate(stmt='pass')", "timeit.onrelease(stmt='pass')", "timeit._repeat_dispatcher(stmt='pass')", "timeit.rmtree(stmt='pass')", "timeit.rename(stmt='pass')", "timeit.read_table(stmt='pass')", "timeit.rsplit(stmt='pass')", "timeit.delete(stmt='pass')", "timeit.create_archive(stmt='pass')", "timeit.remote(stmt='pass')"], "timeit.repeat(stmt='pass', repeat=5)": ["repeat", "timeit.repeat(stmt=4.0, repeat='5')", "timeit.replace(stmt='pass', repeat=5)", "timeit.prepare(stmt='pass', repeat=5)", "timeit.get_path(stmt='pass', repeat=5)", "timeit.ParserCreate(stmt='pass', repeat=5)", "timeit.onrelease(stmt='pass', repeat=5)", "timeit._repeat_dispatcher(stmt='pass', repeat=5)", "timeit.rmtree(stmt='pass', repeat=5)", "timeit.rename(stmt='pass', repeat=5)", "timeit.read_table(stmt='pass', repeat=5)", "timeit.rsplit(stmt='pass', repeat=5)", "timeit.delete(stmt='pass', repeat=5)", "timeit.create_archive(stmt='pass', repeat=5)", "timeit.remote(stmt='pass', repeat=5)"], "timeit.repeat(stmt='pass', setup='pass')": ["repeat", "timeit.repeat(stmt=4, setup=4)", "timeit.replace(stmt='pass', setup='pass')", "timeit.prepare(stmt='pass', setup='pass')", "timeit.get_path(stmt='pass', setup='pass')", "timeit.ParserCreate(stmt='pass', setup='pass')", "timeit.onrelease(stmt='pass', setup='pass')", "timeit._repeat_dispatcher(stmt='pass', setup='pass')", "timeit.rmtree(stmt='pass', setup='pass')", "timeit.rename(stmt='pass', setup='pass')", "timeit.read_table(stmt='pass', setup='pass')", "timeit.rsplit(stmt='pass', setup='pass')", "timeit.delete(stmt='pass', setup='pass')", "timeit.create_archive(stmt='pass', setup='pass')", "timeit.remote(stmt='pass', setup='pass')"], "timeit.repeat(stmt='pass', timer=<default timer>)": [], "timeit.repeat(timer=<default timer>)": [], "timeit.timeit()": ["timeit", "timeit.repeat()", "timeit._time()", "timeit.to_time()", "timeit.title()", "timeit.utime()", "timeit.times()", "timeit.hist_frame()", "timeit.mktime_tz()", "timeit.sigtimedwait()", "timeit.timegm()", "timeit.tri()", "timeit.pie()", "timeit._fit()", "timeit.figimage()"], "timeit.timeit(globals=None)": ["timeit", "timeit.timeit(globals=None)", "timeit.repeat(globals=None)", "timeit._time(globals=None)", "timeit.to_time(globals=None)", "timeit.title(globals=None)", "timeit.utime(globals=None)", "timeit.times(globals=None)", "timeit.hist_frame(globals=None)", "timeit.mktime_tz(globals=None)", "timeit.sigtimedwait(globals=None)", "timeit.timegm(globals=None)", "timeit.tri(globals=None)", "timeit.pie(globals=None)", "timeit._fit(globals=None)"], "timeit.timeit(number=1000000)": ["timeit", "timeit.timeit(number='1000000')", "timeit.repeat(number=1000000)", "timeit._time(number=1000000)", "timeit.to_time(number=1000000)", "timeit.title(number=1000000)", "timeit.utime(number=1000000)", "timeit.times(number=1000000)", "timeit.hist_frame(number=1000000)", "timeit.mktime_tz(number=1000000)", "timeit.sigtimedwait(number=1000000)", "timeit.timegm(number=1000000)", "timeit.tri(number=1000000)", "timeit.pie(number=1000000)", "timeit._fit(number=1000000)"], "timeit.timeit(setup='pass')": ["timeit", "timeit.timeit(setup=4.0)", "timeit.repeat(setup='pass')", "timeit._time(setup='pass')", "timeit.to_time(setup='pass')", "timeit.title(setup='pass')", "timeit.utime(setup='pass')", "timeit.times(setup='pass')", "timeit.hist_frame(setup='pass')", "timeit.mktime_tz(setup='pass')", "timeit.sigtimedwait(setup='pass')", "timeit.timegm(setup='pass')", "timeit.tri(setup='pass')", "timeit.pie(setup='pass')", "timeit._fit(setup='pass')"], "timeit.timeit(stmt='pass')": ["timeit", "timeit.timeit(stmt=4)", "timeit.repeat(stmt='pass')", "timeit._time(stmt='pass')", "timeit.to_time(stmt='pass')", "timeit.title(stmt='pass')", "timeit.utime(stmt='pass')", "timeit.times(stmt='pass')", "timeit.hist_frame(stmt='pass')", "timeit.mktime_tz(stmt='pass')", "timeit.sigtimedwait(stmt='pass')", "timeit.timegm(stmt='pass')", "timeit.tri(stmt='pass')", "timeit.pie(stmt='pass')", "timeit._fit(stmt='pass')"], "timeit.timeit(stmt='pass', globals=None)": ["timeit", "timeit.timeit(stmt='pass', globals=None)", "timeit.timeit(stmt=4.0, globals=None)", "timeit.repeat(stmt='pass', globals=None)", "timeit._time(stmt='pass', globals=None)", "timeit.to_time(stmt='pass', globals=None)", "timeit.title(stmt='pass', globals=None)", "timeit.utime(stmt='pass', globals=None)", "timeit.times(stmt='pass', globals=None)", "timeit.hist_frame(stmt='pass', globals=None)", "timeit.mktime_tz(stmt='pass', globals=None)", "timeit.sigtimedwait(stmt='pass', globals=None)", "timeit.timegm(stmt='pass', globals=None)", "timeit.tri(stmt='pass', globals=None)", "timeit.pie(stmt='pass', globals=None)"], "timeit.timeit(stmt='pass', setup='pass')": ["timeit", "timeit.timeit(stmt=4.0, setup=4)", "timeit.repeat(stmt='pass', setup='pass')", "timeit._time(stmt='pass', setup='pass')", "timeit.to_time(stmt='pass', setup='pass')", "timeit.title(stmt='pass', setup='pass')", "timeit.utime(stmt='pass', setup='pass')", "timeit.times(stmt='pass', setup='pass')", "timeit.hist_frame(stmt='pass', setup='pass')", "timeit.mktime_tz(stmt='pass', setup='pass')", "timeit.sigtimedwait(stmt='pass', setup='pass')", "timeit.timegm(stmt='pass', setup='pass')", "timeit.tri(stmt='pass', setup='pass')", "timeit.pie(stmt='pass', setup='pass')", "timeit._fit(stmt='pass', setup='pass')"], "timeit.timeit(stmt='pass', timer=<default timer>)": [], "timeit.timeit(timer=<default timer>)": [], "timer.autorange()": ["autorange"], "timer.autorange(callback=None)": ["autorange", "timer.autorange(callback=None)"], "timer.cancel()": ["cancel"], "timer.print_exc()": ["print_exc"], "timer.print_exc(file=None)": ["print_exc", "timer.print_exc(file=None)"], "timer.repeat()": ["repeat"], "timer.repeat(number=1000000)": ["repeat", "timer.repeat(number='1000000')"], "timer.repeat(repeat=5)": ["repeat", "timer.repeat(repeat='5')"], "timer.repeat(repeat=5, number=1000000)": ["repeat", "timer.repeat(repeat='5', number='1000000')"], "timer.timeit(number=1000000)": ["timeit", "timer.timeit(number='1000000')"], "timer_handle.when()": ["when"], "timezone.dst(dt)": ["dst"], "timezone.utc": ["timezone.utc"], "timezone.utcoffset(dt)": ["utcoffset"], "tixCommand.tix_addbitmapdir(directory)": ["tix_addbitmapdir"], "tixCommand.tix_cget(option)": ["tix_cget"], "tixCommand.tix_configure(**kw)": ["tix_configure"], "tixCommand.tix_configure(**kw, cnf=None)": ["tix_configure", "tixCommand.tix_configure(**kw, cnf=None)"], "tixCommand.tix_filedialog()": ["tix_filedialog"], "tixCommand.tix_filedialog(dlgclass)": ["tix_filedialog"], "tixCommand.tix_getbitmap(name)": ["tix_getbitmap"], "tixCommand.tix_getimage(self, name)": ["tix_getimage"], "tixCommand.tix_option_get(name)": ["tix_option_get"], "tkinter.EXCEPTION": ["tkinter.EXCEPTION"], "tkinter.READABLE": ["tkinter.READABLE"], "tkinter.Tcl()": ["Tcl", "tkinter.clim()", "tkinter.close()", "tkinter.tracer()", "tkinter.get()", "tkinter.getLogger()", "tkinter.colormode()", "tkinter.set_trace()", "tkinter.tiltangle()", "tkinter.rc_context()", "tkinter.stack_size()", "tkinter.init()", "tkinter.clearstamps()", "tkinter.test()", "tkinter.format_stack()"], "tkinter.Tcl(baseName=None)": ["Tcl", "tkinter.Tcl(baseName=None)", "tkinter.clim(baseName=None)", "tkinter.close(baseName=None)", "tkinter.tracer(baseName=None)", "tkinter.get(baseName=None)", "tkinter.getLogger(baseName=None)", "tkinter.colormode(baseName=None)", "tkinter.set_trace(baseName=None)", "tkinter.tiltangle(baseName=None)", "tkinter.rc_context(baseName=None)", "tkinter.stack_size(baseName=None)", "tkinter.init(baseName=None)", "tkinter.clearstamps(baseName=None)", "tkinter.test(baseName=None)"], "tkinter.Tcl(baseName=None, useTk=0)": ["Tcl", "tkinter.Tcl(baseName=None, useTk=0)", "tkinter.Tcl(baseName=None, useTk='0')", "tkinter.clim(baseName=None, useTk=0)", "tkinter.close(baseName=None, useTk=0)", "tkinter.tracer(baseName=None, useTk=0)", "tkinter.get(baseName=None, useTk=0)", "tkinter.getLogger(baseName=None, useTk=0)", "tkinter.colormode(baseName=None, useTk=0)", "tkinter.set_trace(baseName=None, useTk=0)", "tkinter.tiltangle(baseName=None, useTk=0)", "tkinter.rc_context(baseName=None, useTk=0)", "tkinter.stack_size(baseName=None, useTk=0)", "tkinter.init(baseName=None, useTk=0)", "tkinter.clearstamps(baseName=None, useTk=0)"], "tkinter.Tcl(className='Tk')": ["Tcl", "tkinter.Tcl(className=2.0)", "tkinter.clim(className='Tk')", "tkinter.close(className='Tk')", "tkinter.tracer(className='Tk')", "tkinter.get(className='Tk')", "tkinter.getLogger(className='Tk')", "tkinter.colormode(className='Tk')", "tkinter.set_trace(className='Tk')", "tkinter.tiltangle(className='Tk')", "tkinter.rc_context(className='Tk')", "tkinter.stack_size(className='Tk')", "tkinter.init(className='Tk')", "tkinter.clearstamps(className='Tk')", "tkinter.test(className='Tk')"], "tkinter.Tcl(screenName=None)": ["Tcl", "tkinter.Tcl(screenName=None)", "tkinter.clim(screenName=None)", "tkinter.close(screenName=None)", "tkinter.tracer(screenName=None)", "tkinter.get(screenName=None)", "tkinter.getLogger(screenName=None)", "tkinter.colormode(screenName=None)", "tkinter.set_trace(screenName=None)", "tkinter.tiltangle(screenName=None)", "tkinter.rc_context(screenName=None)", "tkinter.stack_size(screenName=None)", "tkinter.init(screenName=None)", "tkinter.clearstamps(screenName=None)", "tkinter.test(screenName=None)"], "tkinter.Tcl(screenName=None, baseName=None)": ["Tcl", "tkinter.Tcl(screenName=None, baseName=None)", "tkinter.clim(screenName=None, baseName=None)", "tkinter.close(screenName=None, baseName=None)", "tkinter.tracer(screenName=None, baseName=None)", "tkinter.get(screenName=None, baseName=None)", "tkinter.getLogger(screenName=None, baseName=None)", "tkinter.colormode(screenName=None, baseName=None)", "tkinter.set_trace(screenName=None, baseName=None)", "tkinter.tiltangle(screenName=None, baseName=None)", "tkinter.rc_context(screenName=None, baseName=None)", "tkinter.stack_size(screenName=None, baseName=None)", "tkinter.init(screenName=None, baseName=None)", "tkinter.clearstamps(screenName=None, baseName=None)", "tkinter.test(screenName=None, baseName=None)"], "tkinter.Tcl(screenName=None, className='Tk')": ["Tcl", "tkinter.Tcl(screenName=None, className='Tk')", "tkinter.Tcl(screenName=None, className=2.0)", "tkinter.clim(screenName=None, className='Tk')", "tkinter.close(screenName=None, className='Tk')", "tkinter.tracer(screenName=None, className='Tk')", "tkinter.get(screenName=None, className='Tk')", "tkinter.getLogger(screenName=None, className='Tk')", "tkinter.colormode(screenName=None, className='Tk')", "tkinter.set_trace(screenName=None, className='Tk')", "tkinter.tiltangle(screenName=None, className='Tk')", "tkinter.rc_context(screenName=None, className='Tk')", "tkinter.stack_size(screenName=None, className='Tk')", "tkinter.init(screenName=None, className='Tk')", "tkinter.clearstamps(screenName=None, className='Tk')"], "tkinter.Tk(baseName=None)": ["Tk", "tkinter.Tk(baseName=None)"], "tkinter.Tk(baseName=None, className='Tk')": ["Tk", "tkinter.Tk(baseName=None, className='Tk')", "tkinter.Tk(baseName=None, className=2)"], "tkinter.Tk(baseName=None, useTk=1)": ["Tk", "tkinter.Tk(baseName=None, useTk=1)", "tkinter.Tk(baseName=None, useTk='1')"], "tkinter.Tk(className='Tk')": ["Tk", "tkinter.Tk(className=2.0)"], "tkinter.Tk(screenName=None)": ["Tk", "tkinter.Tk(screenName=None)"], "tkinter.Tk(screenName=None, baseName=None)": ["Tk", "tkinter.Tk(screenName=None, baseName=None)"], "tkinter.Tk(screenName=None, className='Tk')": ["Tk", "tkinter.Tk(screenName=None, className='Tk')", "tkinter.Tk(screenName=None, className=2.0)"], "tkinter.WRITABLE": ["tkinter.WRITABLE"], "tkinter.tix.Balloon": ["tkinter.tix.Balloon"], "tkinter.tix.ButtonBox": ["tkinter.tix.ButtonBox"], "tkinter.tix.CheckList": ["tkinter.tix.CheckList"], "tkinter.tix.ComboBox": ["tkinter.tix.ComboBox"], "tkinter.tix.Control": ["tkinter.tix.Control"], "tkinter.tix.DirList": ["tkinter.tix.DirList"], "tkinter.tix.DirSelectBox": ["tkinter.tix.DirSelectBox"], "tkinter.tix.DirSelectDialog": ["tkinter.tix.DirSelectDialog"], "tkinter.tix.DirTree": ["tkinter.tix.DirTree"], "tkinter.tix.ExFileSelectBox": ["tkinter.tix.ExFileSelectBox"], "tkinter.tix.FileEntry": ["tkinter.tix.FileEntry"], "tkinter.tix.FileSelectBox": ["tkinter.tix.FileSelectBox"], "tkinter.tix.Form": ["tkinter.tix.Form"], "tkinter.tix.HList": ["tkinter.tix.HList"], "tkinter.tix.InputOnly": ["tkinter.tix.InputOnly"], "tkinter.tix.LabelEntry": ["tkinter.tix.LabelEntry"], "tkinter.tix.LabelFrame": ["tkinter.tix.LabelFrame"], "tkinter.tix.ListNoteBook": ["tkinter.tix.ListNoteBook"], "tkinter.tix.Meter": ["tkinter.tix.Meter"], "tkinter.tix.NoteBook": ["tkinter.tix.NoteBook"], "tkinter.tix.OptionMenu": ["tkinter.tix.OptionMenu"], "tkinter.tix.PanedWindow": ["tkinter.tix.PanedWindow"], "tkinter.tix.PopupMenu": ["tkinter.tix.PopupMenu"], "tkinter.tix.Select": ["tkinter.tix.Select"], "tkinter.tix.StdButtonBox": ["tkinter.tix.StdButtonBox"], "tkinter.tix.TList": ["tkinter.tix.TList"], "tkinter.tix.Tk()": ["Tk"], "tkinter.tix.Tk(baseName=None)": ["Tk", "tkinter.tix.Tk(baseName=None)"], "tkinter.tix.Tk(className='Tix')": ["Tk", "tkinter.tix.Tk(className=3)"], "tkinter.tix.Tk(screenName=None)": ["Tk", "tkinter.tix.Tk(screenName=None)"], "tkinter.tix.Tree": ["tkinter.tix.Tree"], "tkinter.tix.tixCommand": ["tkinter.tix.tixCommand"], "tkinter.ttk.Style": ["tkinter.ttk.Style"], "tkinter.ttk.Widget": ["tkinter.ttk.Widget"], "token.COMMENT": ["token.COMMENT"], "token.ENCODING": ["token.ENCODING"], "token.ISNONTERMINAL(x)": ["ISNONTERMINAL", "token.ISTERMINAL(x)", "token._open_terminal(x)", "token.is_optional(x)", "token.normal(x)", "token.get_terminal_size(x)", "token._min_int(x)", "token.interrupt_main(x)", "token.interact(x)", "token.iterable(x)", "token.isneginf(x)", "token.isstring(x)", "token.iterfind(x)", "token.asynccontextmanager(x)", "token.inner(x)"], "token.ISTERMINAL(x)": ["ISTERMINAL", "token.ISNONTERMINAL(x)", "token._open_terminal(x)", "token.get_terminal_size(x)", "token.is_optional(x)", "token.iterable(x)", "token.isstring(x)", "token.iterfind(x)", "token.serialize(x)", "token.isdecimal(x)", "token.isreal(x)", "token.listen(x)", "token.signal(x)", "token.is_tracing(x)", "token.is_tarfile(x)"], "token.NL": ["token.NL"], "token.tok_name": ["token.tok_name"], "tokenize.TokenError": ["tokenize.TokenError"], "tokenize.detect_encoding(readline)": ["detect_encoding", "tokenize.device_encoding(readline)", "tokenize.getpreferredencoding(readline)", "tokenize.get_default_qconfig(readline)", "tokenize.decodestring(readline)", "tokenize.encodestring(readline)", "tokenize._encodestring(readline)", "tokenize.deprecate_ndim_indexing(readline)", "tokenize.set_testing_mode(readline)", "tokenize._count_leading(readline)", "tokenize._extendLine(readline)", "tokenize.setheading(readline)", "tokenize.iterencode(readline)", "tokenize._get_deprecated_option(readline)", "tokenize.getencoder(readline)"], "tokenize.open(filename)": ["open", "tokenize._open(filename)", "tokenize.open_latin1(filename)", "tokenize.popen(filename)", "tokenize.bltn_open(filename)", "tokenize.OpenWrapper(filename)", "tokenize._builtin_open(filename)", "tokenize.urlopen(filename)", "tokenize.pie(filename)", "tokenize._run_code(filename)", "tokenize.compress(filename)", "tokenize._popen(filename)", "tokenize.byte_compile(filename)", "tokenize.boxplot(filename)", "tokenize.pen(filename)"], "tokenize.tokenize(readline)": ["tokenize", "tokenize._tokenize(readline)", "tokenize.untokenize(readline)", "tokenize.xpath_tokenizer(readline)", "tokenize.pensize(readline)", "tokenize.token_hex(readline)", "tokenize.get_token(readline)", "tokenize.token_urlsafe(readline)", "tokenize.resize(readline)", "tokenize._synthesize(readline)", "tokenize._extendLine(readline)", "tokenize.turtlesize(readline)", "tokenize.indentsize(readline)", "tokenize.screensize(readline)", "tokenize.ontimer(readline)"], "tokenize.untokenize(iterable)": ["untokenize", "tokenize.tokenize(iterable)", "tokenize._tokenize(iterable)", "tokenize.quantize(iterable)", "tokenize.xpath_tokenizer(iterable)", "tokenize.count_nonzero(iterable)", "tokenize._synthesize(iterable)", "tokenize.turtlesize(iterable)", "tokenize.indentsize(iterable)", "tokenize.nonzero(iterable)", "tokenize.pensize(iterable)", "tokenize.quantile(iterable)", "tokenize._sanitize(iterable)", "tokenize.unsetenv(iterable)", "tokenize._unsetenv(iterable)"], "trace.CoverageResults": ["trace.CoverageResults"], "trace.Trace()": ["Trace"], "trace.Trace(count=1)": ["Trace", "trace.Trace(count='1')"], "trace.Trace(countcallers=0)": ["Trace", "trace.Trace(countcallers='0')"], "trace.Trace(countfuncs=0)": ["Trace", "trace.Trace(countfuncs='0')"], "trace.Trace(ignoredirs=())": ["Trace"], "trace.Trace(ignoremods=())": ["Trace"], "trace.Trace(infile=None)": ["Trace", "trace.Trace(infile=None)"], "trace.Trace(outfile=None)": ["Trace", "trace.Trace(outfile=None)"], "trace.Trace(timing=False)": ["Trace", "trace.Trace(timing=True)"], "trace.Trace(trace=1)": ["Trace", "trace.Trace(trace='1')"], "trace.domain": ["trace.domain"], "trace.results()": ["results"], "trace.run(cmd)": ["run"], "trace.runctx(cmd)": ["runctx"], "trace.runctx(cmd, locals=None)": ["runctx", "trace.runctx(cmd, locals=None)"], "trace.runfunc(func, *args, **kwds)": ["runfunc"], "trace.size": ["trace.size"], "traceback.FrameSummary(filename, lineno, name)": ["FrameSummary"], "traceback.FrameSummary(filename, lineno, name, locals=None)": ["FrameSummary", "traceback.FrameSummary(filename, lineno, name, locals=None)"], "traceback.FrameSummary(filename, lineno, name, lookup_line=True)": ["FrameSummary", "traceback.FrameSummary(filename, lineno, name, lookup_line=False)"], "traceback.TracebackException(exc_type, exc_value, exc_traceback)": ["TracebackException"], "traceback.clear_frames(tb)": ["clear_frames", "traceback.clear_traces(tb)", "traceback.clearstamps(tb)", "traceback._clear_fn_overloads(tb)", "traceback._get_linear_ramps(tb)", "traceback.clearcache(tb)", "traceback.clearstamp(tb)", "traceback._clearcache(tb)", "traceback.getinnerframes(tb)", "traceback.delegate_names(tb)", "traceback.getouterframes(tb)", "traceback._convert_params(tb)", "traceback.locator_params(tb)", "traceback.filter_name(tb)", "traceback.clearscreen(tb)"], "traceback.extract_stack()": ["extract_stack", "traceback.format_stack()", "traceback.print_stack()", "traceback.stack_size()", "traceback.set_trace()", "traceback.getsitepackages()", "traceback._all_tasks_compat()", "traceback.interact()", "traceback.current_task()", "traceback.random_state()", "traceback.get_rank()", "traceback.get_exec_path()", "traceback.getPeriodData()", "traceback.token_hex()", "traceback._perfcheck()"], "traceback.extract_stack(f=None)": ["extract_stack", "traceback.extract_stack(f=None)", "traceback.format_stack(f=None)", "traceback.print_stack(f=None)", "traceback.stack_size(f=None)", "traceback.set_trace(f=None)", "traceback.getsitepackages(f=None)", "traceback._all_tasks_compat(f=None)", "traceback.interact(f=None)", "traceback.current_task(f=None)", "traceback.random_state(f=None)", "traceback.get_rank(f=None)", "traceback.get_exec_path(f=None)", "traceback.getPeriodData(f=None)", "traceback.token_hex(f=None)"], "traceback.extract_tb(tb)": ["extract_tb", "traceback.extract_stack(tb)", "traceback.format_tb(tb)", "traceback.interact(tb)", "traceback.print_tb(tb)", "traceback.print_exc(tb)", "traceback.rc_context(tb)", "traceback.tracer(tb)", "traceback.create_default_context(tb)", "traceback.format_time(tb)", "traceback.print_exception(tb)", "traceback.format_stack(tb)", "traceback.to_timedelta(tb)", "traceback.stack_effect(tb)", "traceback._tri_with_like(tb)"], "traceback.format()": ["format"], "traceback.format(limit=None)": ["format", "traceback.format(limit=None)"], "traceback.format(most_recent_first=False)": ["format", "traceback.format(most_recent_first=True)"], "traceback.format_exc()": ["format_exc", "traceback._format_exc()", "traceback.get_exec_path()", "traceback.textdomain()", "traceback.Comment()", "traceback.get_rank()", "traceback.token_hex()", "traceback.colormode()", "traceback.set_trace()", "traceback.get_worker_info()", "traceback.makeFloatSeries()", "traceback._all_tasks_compat()", "traceback.shearfactor()", "traceback.post_mortem()", "traceback.get_locales()"], "traceback.format_exc(chain=True)": ["format_exc", "traceback.format_exc(chain=False)", "traceback._format_exc(chain=True)", "traceback.get_exec_path(chain=True)", "traceback.textdomain(chain=True)", "traceback.Comment(chain=True)", "traceback.get_rank(chain=True)", "traceback.token_hex(chain=True)", "traceback.colormode(chain=True)", "traceback.set_trace(chain=True)", "traceback.get_worker_info(chain=True)", "traceback.makeFloatSeries(chain=True)", "traceback._all_tasks_compat(chain=True)", "traceback.shearfactor(chain=True)", "traceback.post_mortem(chain=True)"], "traceback.format_exc(limit=None)": ["format_exc", "traceback.format_exc(limit=None)", "traceback._format_exc(limit=None)", "traceback.get_exec_path(limit=None)", "traceback.textdomain(limit=None)", "traceback.Comment(limit=None)", "traceback.get_rank(limit=None)", "traceback.token_hex(limit=None)", "traceback.colormode(limit=None)", "traceback.set_trace(limit=None)", "traceback.get_worker_info(limit=None)", "traceback.makeFloatSeries(limit=None)", "traceback._all_tasks_compat(limit=None)", "traceback.shearfactor(limit=None)", "traceback.post_mortem(limit=None)"], "traceback.format_exc(limit=None, chain=True)": ["format_exc", "traceback.format_exc(limit=None, chain=False)", "traceback._format_exc(limit=None, chain=True)", "traceback.get_exec_path(limit=None, chain=True)", "traceback.textdomain(limit=None, chain=True)", "traceback.Comment(limit=None, chain=True)", "traceback.get_rank(limit=None, chain=True)", "traceback.token_hex(limit=None, chain=True)", "traceback.colormode(limit=None, chain=True)", "traceback.set_trace(limit=None, chain=True)", "traceback.get_worker_info(limit=None, chain=True)", "traceback.makeFloatSeries(limit=None, chain=True)", "traceback._all_tasks_compat(limit=None, chain=True)", "traceback.shearfactor(limit=None, chain=True)", "traceback.post_mortem(limit=None, chain=True)"], "traceback.format_exception(etype, value, tb)": ["format_exception", "traceback.print_exception(etype, value, tb)", "traceback.construction_error(etype, value, tb)", "traceback.shapetransform(etype, value, tb)", "traceback.create_default_context(etype, value, tb)", "traceback._consecutive_return_counts(etype, value, tb)", "traceback.interact(etype, value, tb)", "traceback._create_default_https_context(etype, value, tb)", "traceback.tensordot(etype, value, tb)", "traceback._norm_dispatcher(etype, value, tb)", "traceback._sort_dispatcher(etype, value, tb)", "traceback._consecutive_return_output(etype, value, tb)", "traceback._consecutive_return_inverse(etype, value, tb)", "traceback.import_optional_dependency(etype, value, tb)", "traceback._count_dispatcher(etype, value, tb)"], "traceback.format_exception(etype, value, tb, chain=True)": ["format_exception", "traceback.format_exception(etype, value, tb, chain=False)", "traceback.print_exception(etype, value, tb, chain=True)", "traceback.construction_error(etype, value, tb, chain=True)", "traceback.shapetransform(etype, value, tb, chain=True)", "traceback.create_default_context(etype, value, tb, chain=True)", "traceback._consecutive_return_counts(etype, value, tb, chain=True)", "traceback.interact(etype, value, tb, chain=True)", "traceback._create_default_https_context(etype, value, tb, chain=True)", "traceback.tensordot(etype, value, tb, chain=True)", "traceback._norm_dispatcher(etype, value, tb, chain=True)", "traceback._sort_dispatcher(etype, value, tb, chain=True)", "traceback._consecutive_return_output(etype, value, tb, chain=True)", "traceback._consecutive_return_inverse(etype, value, tb, chain=True)", "traceback.import_optional_dependency(etype, value, tb, chain=True)"], "traceback.format_exception(etype, value, tb, limit=None)": ["format_exception", "traceback.format_exception(etype, value, tb, limit=None)", "traceback.print_exception(etype, value, tb, limit=None)", "traceback.construction_error(etype, value, tb, limit=None)", "traceback.shapetransform(etype, value, tb, limit=None)", "traceback.create_default_context(etype, value, tb, limit=None)", "traceback._consecutive_return_counts(etype, value, tb, limit=None)", "traceback.interact(etype, value, tb, limit=None)", "traceback._create_default_https_context(etype, value, tb, limit=None)", "traceback.tensordot(etype, value, tb, limit=None)", "traceback._norm_dispatcher(etype, value, tb, limit=None)", "traceback._sort_dispatcher(etype, value, tb, limit=None)", "traceback._consecutive_return_output(etype, value, tb, limit=None)", "traceback._consecutive_return_inverse(etype, value, tb, limit=None)", "traceback.import_optional_dependency(etype, value, tb, limit=None)"], "traceback.format_list(extracted_list)": ["format_list", "traceback.str_format(extracted_list)", "traceback.format_tb(extracted_list)", "traceback.format_stack(extracted_list)", "traceback._format_labels(extracted_list)", "traceback.format_string(extracted_list)", "traceback._format_pipe(extracted_list)", "traceback.format_time(extracted_list)", "traceback._format_size(extracted_list)", "traceback._format_sign(extracted_list)", "traceback.format(extracted_list)", "traceback._format(extracted_list)", "traceback._format_argument_list(extracted_list)", "traceback.formatstring(extracted_list)", "traceback.print_form(extracted_list)"], "traceback.format_stack(f=None)": ["format_stack", "traceback.format_stack(f=None)", "traceback.extract_stack(f=None)", "traceback.format_time(f=None)", "traceback.print_stack(f=None)", "traceback._all_tasks_compat(f=None)", "traceback.stack_size(f=None)", "traceback.post_mortem(f=None)", "traceback.current_task(f=None)", "traceback.random_state(f=None)", "traceback.set_trace(f=None)", "traceback.all_tasks(f=None)", "traceback.getsitepackages(f=None)", "traceback.register_at_fork(f=None)", "traceback.register_cmap(f=None)"], "traceback.format_stack(limit=None)": ["format_stack", "traceback.format_stack(limit=None)", "traceback.extract_stack(limit=None)", "traceback.format_time(limit=None)", "traceback.print_stack(limit=None)", "traceback._all_tasks_compat(limit=None)", "traceback.stack_size(limit=None)", "traceback.post_mortem(limit=None)", "traceback.current_task(limit=None)", "traceback.random_state(limit=None)", "traceback.set_trace(limit=None)", "traceback.all_tasks(limit=None)", "traceback.getsitepackages(limit=None)", "traceback.register_at_fork(limit=None)", "traceback.register_cmap(limit=None)"], "traceback.format_tb(tb)": ["format_tb", "traceback.format_time(tb)", "traceback.format_stack(tb)", "traceback.extract_tb(tb)", "traceback._formatparam(tb)", "traceback.print_tb(tb)", "traceback.formatannotation(tb)", "traceback.formatargspec(tb)", "traceback.hist_frame(tb)", "traceback.format_float_positional(tb)", "traceback.format_float_scientific(tb)", "traceback.mat(tb)", "traceback.get_cmap(tb)", "traceback.bmat(tb)", "traceback.norm(tb)"], "traceback.format_tb(tb, limit=None)": ["format_tb", "traceback.format_tb(tb, limit=None)", "traceback.format_time(tb, limit=None)", "traceback.format_stack(tb, limit=None)", "traceback.extract_tb(tb, limit=None)", "traceback._formatparam(tb, limit=None)", "traceback.print_tb(tb, limit=None)", "traceback.formatannotation(tb, limit=None)", "traceback.formatargspec(tb, limit=None)", "traceback.hist_frame(tb, limit=None)", "traceback.format_float_positional(tb, limit=None)", "traceback.format_float_scientific(tb, limit=None)", "traceback.mat(tb, limit=None)", "traceback.get_cmap(tb, limit=None)", "traceback.bmat(tb, limit=None)"], "traceback.print_exc()": ["print_exc", "traceback.print_last()", "traceback.get_exec_path()", "traceback.get_rank()", "traceback.init()", "traceback.extract_stack()", "traceback.getPeriodData()", "traceback.token_hex()", "traceback.textdomain()", "traceback.rc_context()", "traceback.print_exception()", "traceback.post_mortem()", "traceback._sys_version()", "traceback.run_module_suite()", "traceback.current_task()"], "traceback.print_exc(chain=True)": ["print_exc", "traceback.print_exc(chain=False)", "traceback.print_last(chain=True)", "traceback.get_exec_path(chain=True)", "traceback.get_rank(chain=True)", "traceback.init(chain=True)", "traceback.extract_stack(chain=True)", "traceback.getPeriodData(chain=True)", "traceback.token_hex(chain=True)", "traceback.textdomain(chain=True)", "traceback.rc_context(chain=True)", "traceback.print_exception(chain=True)", "traceback.post_mortem(chain=True)", "traceback._sys_version(chain=True)", "traceback.run_module_suite(chain=True)"], "traceback.print_exc(file=None)": ["print_exc", "traceback.print_exc(file=None)", "traceback.print_last(file=None)", "traceback.get_exec_path(file=None)", "traceback.get_rank(file=None)", "traceback.init(file=None)", "traceback.extract_stack(file=None)", "traceback.getPeriodData(file=None)", "traceback.token_hex(file=None)", "traceback.textdomain(file=None)", "traceback.rc_context(file=None)", "traceback.print_exception(file=None)", "traceback.post_mortem(file=None)", "traceback._sys_version(file=None)", "traceback.run_module_suite(file=None)"], "traceback.print_exc(limit=None, chain=True)": ["print_exc", "traceback.print_exc(limit=None, chain=False)", "traceback.print_last(limit=None, chain=True)", "traceback.get_exec_path(limit=None, chain=True)", "traceback.get_rank(limit=None, chain=True)", "traceback.init(limit=None, chain=True)", "traceback.extract_stack(limit=None, chain=True)", "traceback.getPeriodData(limit=None, chain=True)", "traceback.token_hex(limit=None, chain=True)", "traceback.textdomain(limit=None, chain=True)", "traceback.rc_context(limit=None, chain=True)", "traceback.print_exception(limit=None, chain=True)", "traceback.post_mortem(limit=None, chain=True)", "traceback._sys_version(limit=None, chain=True)", "traceback.run_module_suite(limit=None, chain=True)"], "traceback.print_exc(limit=None, file=None)": ["print_exc", "traceback.print_exc(limit=None, file=None)", "traceback.print_last(limit=None, file=None)", "traceback.get_exec_path(limit=None, file=None)", "traceback.get_rank(limit=None, file=None)", "traceback.init(limit=None, file=None)", "traceback.extract_stack(limit=None, file=None)", "traceback.getPeriodData(limit=None, file=None)", "traceback.token_hex(limit=None, file=None)", "traceback.textdomain(limit=None, file=None)", "traceback.rc_context(limit=None, file=None)", "traceback.print_exception(limit=None, file=None)", "traceback.post_mortem(limit=None, file=None)", "traceback._sys_version(limit=None, file=None)", "traceback.run_module_suite(limit=None, file=None)"], "traceback.print_exception(etype, value, tb)": ["print_exception", "traceback.get_exec_path(etype, value, tb)", "traceback.validate_map_location(etype, value, tb)", "traceback.textdomain(etype, value, tb)", "traceback.set_printoptions(etype, value, tb)", "traceback._make_options_dict(etype, value, tb)", "traceback._assert_no_warnings_context(etype, value, tb)", "traceback.extract_stack(etype, value, tb)", "traceback.getPeriodData(etype, value, tb)", "traceback.get_rank(etype, value, tb)", "traceback.init(etype, value, tb)", "traceback.token_hex(etype, value, tb)", "traceback.ndpointer(etype, value, tb)", "traceback.print_exc(etype, value, tb)", "traceback.get_worker_info(etype, value, tb)"], "traceback.print_exception(etype, value, tb, chain=True)": ["print_exception", "traceback.print_exception(etype, value, tb, chain=False)", "traceback.get_exec_path(etype, value, tb, chain=True)", "traceback.validate_map_location(etype, value, tb, chain=True)", "traceback.textdomain(etype, value, tb, chain=True)", "traceback.set_printoptions(etype, value, tb, chain=True)", "traceback._make_options_dict(etype, value, tb, chain=True)", "traceback._assert_no_warnings_context(etype, value, tb, chain=True)", "traceback.extract_stack(etype, value, tb, chain=True)", "traceback.getPeriodData(etype, value, tb, chain=True)", "traceback.get_rank(etype, value, tb, chain=True)", "traceback.init(etype, value, tb, chain=True)", "traceback.token_hex(etype, value, tb, chain=True)", "traceback.ndpointer(etype, value, tb, chain=True)", "traceback.print_exc(etype, value, tb, chain=True)"], "traceback.print_exception(etype, value, tb, file=None)": ["print_exception", "traceback.print_exception(etype, value, tb, file=None)", "traceback.get_exec_path(etype, value, tb, file=None)", "traceback.validate_map_location(etype, value, tb, file=None)", "traceback.textdomain(etype, value, tb, file=None)", "traceback.set_printoptions(etype, value, tb, file=None)", "traceback._make_options_dict(etype, value, tb, file=None)", "traceback._assert_no_warnings_context(etype, value, tb, file=None)", "traceback.extract_stack(etype, value, tb, file=None)", "traceback.getPeriodData(etype, value, tb, file=None)", "traceback.get_rank(etype, value, tb, file=None)", "traceback.init(etype, value, tb, file=None)", "traceback.token_hex(etype, value, tb, file=None)", "traceback.ndpointer(etype, value, tb, file=None)", "traceback.print_exc(etype, value, tb, file=None)"], "traceback.print_exception(etype, value, tb, file=None, chain=True)": ["print_exception", "traceback.print_exception(etype, value, tb, file=None, chain=False)", "traceback.get_exec_path(etype, value, tb, file=None, chain=True)", "traceback.validate_map_location(etype, value, tb, file=None, chain=True)", "traceback.textdomain(etype, value, tb, file=None, chain=True)", "traceback.set_printoptions(etype, value, tb, file=None, chain=True)", "traceback._make_options_dict(etype, value, tb, file=None, chain=True)", "traceback._assert_no_warnings_context(etype, value, tb, file=None, chain=True)", "traceback.extract_stack(etype, value, tb, file=None, chain=True)", "traceback.getPeriodData(etype, value, tb, file=None, chain=True)", "traceback.get_rank(etype, value, tb, file=None, chain=True)", "traceback.init(etype, value, tb, file=None, chain=True)", "traceback.token_hex(etype, value, tb, file=None, chain=True)", "traceback.ndpointer(etype, value, tb, file=None, chain=True)", "traceback.print_exc(etype, value, tb, file=None, chain=True)"], "traceback.print_exception(etype, value, tb, limit=None)": ["print_exception", "traceback.print_exception(etype, value, tb, limit=None)", "traceback.get_exec_path(etype, value, tb, limit=None)", "traceback.validate_map_location(etype, value, tb, limit=None)", "traceback.textdomain(etype, value, tb, limit=None)", "traceback.set_printoptions(etype, value, tb, limit=None)", "traceback._make_options_dict(etype, value, tb, limit=None)", "traceback._assert_no_warnings_context(etype, value, tb, limit=None)", "traceback.extract_stack(etype, value, tb, limit=None)", "traceback.getPeriodData(etype, value, tb, limit=None)", "traceback.get_rank(etype, value, tb, limit=None)", "traceback.init(etype, value, tb, limit=None)", "traceback.token_hex(etype, value, tb, limit=None)", "traceback.ndpointer(etype, value, tb, limit=None)", "traceback.print_exc(etype, value, tb, limit=None)"], "traceback.print_exception(etype, value, tb, limit=None, file=None)": ["print_exception", "traceback.print_exception(etype, value, tb, limit=None, file=None)", "traceback.get_exec_path(etype, value, tb, limit=None, file=None)", "traceback.validate_map_location(etype, value, tb, limit=None, file=None)", "traceback.textdomain(etype, value, tb, limit=None, file=None)", "traceback.set_printoptions(etype, value, tb, limit=None, file=None)", "traceback._make_options_dict(etype, value, tb, limit=None, file=None)", "traceback._assert_no_warnings_context(etype, value, tb, limit=None, file=None)", "traceback.extract_stack(etype, value, tb, limit=None, file=None)", "traceback.getPeriodData(etype, value, tb, limit=None, file=None)", "traceback.get_rank(etype, value, tb, limit=None, file=None)", "traceback.init(etype, value, tb, limit=None, file=None)", "traceback.token_hex(etype, value, tb, limit=None, file=None)", "traceback.ndpointer(etype, value, tb, limit=None, file=None)", "traceback.print_exc(etype, value, tb, limit=None, file=None)"], "traceback.print_last(chain=True)": ["print_last", "traceback.print_last(chain=False)", "traceback.print_exc(chain=True)", "traceback.listen(chain=True)", "traceback.clearstamps(chain=True)", "traceback._sys_version(chain=True)", "traceback.listdir(chain=True)", "traceback.makeStringSeries(chain=True)", "traceback.validate_map_location(chain=True)", "traceback.get_rank(chain=True)", "traceback.init(chain=True)", "traceback.main(chain=True)", "traceback.getPeriodData(chain=True)", "traceback._main(chain=True)", "traceback.log_to_stderr(chain=True)"], "traceback.print_last(limit=None, chain=True)": ["print_last", "traceback.print_last(limit=None, chain=False)", "traceback.print_exc(limit=None, chain=True)", "traceback.listen(limit=None, chain=True)", "traceback.clearstamps(limit=None, chain=True)", "traceback._sys_version(limit=None, chain=True)", "traceback.listdir(limit=None, chain=True)", "traceback.makeStringSeries(limit=None, chain=True)", "traceback.validate_map_location(limit=None, chain=True)", "traceback.get_rank(limit=None, chain=True)", "traceback.init(limit=None, chain=True)", "traceback.main(limit=None, chain=True)", "traceback.getPeriodData(limit=None, chain=True)", "traceback._main(limit=None, chain=True)", "traceback.log_to_stderr(limit=None, chain=True)"], "traceback.print_stack()": ["print_stack", "traceback.format_stack()", "traceback.extract_stack()", "traceback.stack_size()", "traceback.current_task()", "traceback.set_printoptions()", "traceback.interact()", "traceback.random_state()", "traceback.set_trace()", "traceback.getsitepackages()", "traceback.post_mortem()", "traceback._all_tasks_compat()", "traceback.getPeriodData()", "traceback.get_rank()", "traceback.print_tb()"], "traceback.print_stack(f=None)": ["print_stack", "traceback.print_stack(f=None)", "traceback.format_stack(f=None)", "traceback.extract_stack(f=None)", "traceback.stack_size(f=None)", "traceback.current_task(f=None)", "traceback.set_printoptions(f=None)", "traceback.interact(f=None)", "traceback.random_state(f=None)", "traceback.set_trace(f=None)", "traceback.getsitepackages(f=None)", "traceback.post_mortem(f=None)", "traceback._all_tasks_compat(f=None)", "traceback.getPeriodData(f=None)", "traceback.get_rank(f=None)"], "traceback.print_stack(f=None, file=None)": ["print_stack", "traceback.print_stack(f=None, file=None)", "traceback.format_stack(f=None, file=None)", "traceback.extract_stack(f=None, file=None)", "traceback.stack_size(f=None, file=None)", "traceback.current_task(f=None, file=None)", "traceback.set_printoptions(f=None, file=None)", "traceback.interact(f=None, file=None)", "traceback.random_state(f=None, file=None)", "traceback.set_trace(f=None, file=None)", "traceback.getsitepackages(f=None, file=None)", "traceback.post_mortem(f=None, file=None)", "traceback._all_tasks_compat(f=None, file=None)", "traceback.getPeriodData(f=None, file=None)", "traceback.get_rank(f=None, file=None)"], "traceback.print_stack(f=None, limit=None)": ["print_stack", "traceback.print_stack(f=None, limit=None)", "traceback.format_stack(f=None, limit=None)", "traceback.extract_stack(f=None, limit=None)", "traceback.stack_size(f=None, limit=None)", "traceback.current_task(f=None, limit=None)", "traceback.set_printoptions(f=None, limit=None)", "traceback.interact(f=None, limit=None)", "traceback.random_state(f=None, limit=None)", "traceback.set_trace(f=None, limit=None)", "traceback.getsitepackages(f=None, limit=None)", "traceback.post_mortem(f=None, limit=None)", "traceback._all_tasks_compat(f=None, limit=None)", "traceback.getPeriodData(f=None, limit=None)", "traceback.get_rank(f=None, limit=None)"], "traceback.print_stack(limit=None)": ["print_stack", "traceback.print_stack(limit=None)", "traceback.format_stack(limit=None)", "traceback.extract_stack(limit=None)", "traceback.stack_size(limit=None)", "traceback.current_task(limit=None)", "traceback.set_printoptions(limit=None)", "traceback.interact(limit=None)", "traceback.random_state(limit=None)", "traceback.set_trace(limit=None)", "traceback.getsitepackages(limit=None)", "traceback.post_mortem(limit=None)", "traceback._all_tasks_compat(limit=None)", "traceback.getPeriodData(limit=None)", "traceback.get_rank(limit=None)"], "traceback.print_tb(tb)": ["print_tb", "traceback.print_stack(tb)", "traceback.format_tb(tb)", "traceback.set_printoptions(tb)", "traceback.print_list(tb)", "traceback.extract_tb(tb)", "traceback.interact(tb)", "traceback.identity(tb)", "traceback.ndpointer(tb)", "traceback.pvariance(tb)", "traceback._raw_input(tb)", "traceback.split(tb)", "traceback.distb(tb)", "traceback.get_type_hints(tb)", "traceback._identity_dispatcher(tb)"], "traceback.print_tb(tb, file=None)": ["print_tb", "traceback.print_tb(tb, file=None)", "traceback.print_stack(tb, file=None)", "traceback.format_tb(tb, file=None)", "traceback.set_printoptions(tb, file=None)", "traceback.print_list(tb, file=None)", "traceback.extract_tb(tb, file=None)", "traceback.interact(tb, file=None)", "traceback.identity(tb, file=None)", "traceback.ndpointer(tb, file=None)", "traceback.pvariance(tb, file=None)", "traceback._raw_input(tb, file=None)", "traceback.split(tb, file=None)", "traceback.distb(tb, file=None)", "traceback.get_type_hints(tb, file=None)"], "traceback.print_tb(tb, limit=None, file=None)": ["print_tb", "traceback.print_tb(tb, limit=None, file=None)", "traceback.print_stack(tb, limit=None, file=None)", "traceback.format_tb(tb, limit=None, file=None)", "traceback.set_printoptions(tb, limit=None, file=None)", "traceback.print_list(tb, limit=None, file=None)", "traceback.extract_tb(tb, limit=None, file=None)", "traceback.interact(tb, limit=None, file=None)", "traceback.identity(tb, limit=None, file=None)", "traceback.ndpointer(tb, limit=None, file=None)", "traceback.pvariance(tb, limit=None, file=None)", "traceback._raw_input(tb, limit=None, file=None)", "traceback.split(tb, limit=None, file=None)", "traceback.distb(tb, limit=None, file=None)", "traceback.get_type_hints(tb, limit=None, file=None)"], "traceback.walk_stack(f)": ["walk_stack", "traceback.walk_tb(f)", "traceback.walk_packages(f)", "traceback.stack(f)", "traceback._task_get_stack(f)", "traceback.stackplot(f)", "traceback._task_print_stack(f)", "traceback.hstack(f)", "traceback.vstack(f)", "traceback.dstack(f)", "traceback.unstack(f)", "traceback.walk(f)", "traceback.istraceback(f)", "traceback.wrap_socket(f)", "traceback.test_wav(f)"], "traceback_exception.__cause__": ["traceback_exception.__cause__"], "traceback_exception.__context__": ["traceback_exception.__context__"], "traceback_exception.__suppress_context__": ["traceback_exception.__suppress_context__"], "traceback_exception.extract(frame_gen, capture_locals=False)": ["extract", "traceback_exception.extract(frame_gen, capture_locals=True)"], "traceback_exception.extract(frame_gen, limit=None)": ["extract", "traceback_exception.extract(frame_gen, limit=None)"], "traceback_exception.extract(frame_gen, limit=None, capture_locals=False)": ["extract", "traceback_exception.extract(frame_gen, limit=None, capture_locals=True)"], "traceback_exception.filename": ["traceback_exception.filename"], "traceback_exception.format()": ["format"], "traceback_exception.format(chain=True)": ["format", "traceback_exception.format(chain=False)"], "traceback_exception.format_exception_only()": ["format_exception_only"], "traceback_exception.from_exception(exc)": ["from_exception"], "traceback_exception.from_exception(exc, capture_locals=False)": ["from_exception", "traceback_exception.from_exception(exc, capture_locals=True)"], "traceback_exception.from_exception(exc, limit=None)": ["from_exception", "traceback_exception.from_exception(exc, limit=None)"], "traceback_exception.from_exception(exc, lookup_lines=True)": ["from_exception", "traceback_exception.from_exception(exc, lookup_lines=False)"], "traceback_exception.from_list(a_list)": ["from_list"], "traceback_exception.lineno": ["traceback_exception.lineno"], "traceback_exception.msg": ["traceback_exception.msg"], "traceback_exception.offset": ["traceback_exception.offset"], "tracemalloc.DomainFilter(inclusive: bool, domain: int)": [], "tracemalloc.Filter(inclusive: bool, filename_pattern: str)": [], "tracemalloc.Filter(inclusive: bool, filename_pattern: str, all_frames: bool=False)": [], "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None)": [], "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, all_frames: bool=False)": [], "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, all_frames: bool=False, domain: int=None)": [], "tracemalloc.Filter(inclusive: bool, filename_pattern: str, lineno: int=None, domain: int=None)": [], "tracemalloc.Snapshot": ["tracemalloc.Snapshot"], "tracemalloc.Statistic": ["tracemalloc.Statistic"], "tracemalloc.StatisticDiff": ["tracemalloc.StatisticDiff"], "tracemalloc.Trace": ["tracemalloc.Trace"], "tracemalloc.Traceback": ["tracemalloc.Traceback"], "tracemalloc.clear_traces()": ["clear_traces", "tracemalloc.clear_frames()", "tracemalloc.clearcache()", "tracemalloc._get_traces()", "tracemalloc._clearcache()", "tracemalloc._check_trace()", "tracemalloc.clearstamps()", "tracemalloc._c_leave_task()", "tracemalloc.set_trace()", "tracemalloc.trace_module()", "tracemalloc._process_class()", "tracemalloc._leave_task()", "tracemalloc.clearstamp()", "tracemalloc._trace_dispatcher()", "tracemalloc._scalar_str()"], "tracemalloc.get_object_traceback(obj)": ["get_object_traceback", "tracemalloc._get_object_traceback(obj)", "tracemalloc.get_traceback_limit(obj)", "tracemalloc.compact_traceback(obj)", "tracemalloc.get_object_signature(obj)", "tracemalloc._exception_traceback(obj)", "tracemalloc._take_nd_object(obj)", "tracemalloc.get_tracemalloc_memory(obj)", "tracemalloc._get_traces(obj)", "tracemalloc.get_traced_memory(obj)", "tracemalloc._get_torch_home(obj)", "tracemalloc.istraceback(obj)", "tracemalloc._biject_to_stack(obj)", "tracemalloc._get_global_rank(obj)", "tracemalloc._get_trace_graph(obj)"], "tracemalloc.get_traceback_limit()": ["get_traceback_limit", "tracemalloc.get_object_traceback()", "tracemalloc._get_object_traceback()", "tracemalloc._exception_traceback()", "tracemalloc.compact_traceback()", "tracemalloc.istraceback()", "tracemalloc.get_tracemalloc_memory()", "tracemalloc._get_traces()", "tracemalloc.get_traced_memory()", "tracemalloc._optimize_trace()", "tracemalloc._get_trace_graph()", "tracemalloc.set_trace()", "tracemalloc.get_mailbox_list()", "tracemalloc.get_type_line()", "tracemalloc._get_stream()"], "tracemalloc.get_traced_memory()": ["get_traced_memory", "tracemalloc.get_tracemalloc_memory()", "tracemalloc._get_trace_graph()", "tracemalloc._get_traces()", "tracemalloc._get_torch_home()", "tracemalloc._get_overloaded_methods()", "tracemalloc.set_trace()", "tracemalloc.sched_get_priority_min()", "tracemalloc.get_importer()", "tracemalloc.sched_get_priority_max()", "tracemalloc.get_traceback_limit()", "tracemalloc._get_method_wrappers()", "tracemalloc.get_package_name()", "tracemalloc._static_getmro()", "tracemalloc.get_object_traceback()"], "tracemalloc.get_tracemalloc_memory()": ["get_tracemalloc_memory", "tracemalloc.get_traced_memory()", "tracemalloc.get_traceback_limit()", "tracemalloc.get_object_traceback()", "tracemalloc.geterrcall()", "tracemalloc._get_object_traceback()", "tracemalloc._get_normal_name()", "tracemalloc._get_trace_graph()", "tracemalloc.get_terminal_size()", "tracemalloc._get_traces()", "tracemalloc.seterrcall()", "tracemalloc._get_torch_home()", "tracemalloc.get_op_result_name()", "tracemalloc._get_cache_or_reload()", "tracemalloc.get_param_names()"], "tracemalloc.is_tracing()": ["is_tracing", "tracemalloc._no_tracing()", "tracemalloc.isstring()", "tracemalloc._script_if_tracing()", "tracemalloc.script_if_tracing()", "tracemalloc.is_storage()", "tracemalloc.tostring()", "tracemalloc._is_string_like()", "tracemalloc.is_scripting()", "tracemalloc._find_strings()", "tracemalloc.set_trace()", "tracemalloc.runstring()", "tracemalloc.string_at()", "tracemalloc._stringify()", "tracemalloc.askstring()"], "tracemalloc.start()": ["start", "tracemalloc._stat()", "tracemalloc.stat()", "tracemalloc.fstat()", "tracemalloc.lstat()", "tracemalloc.str()", "tracemalloc.__str__()", "tracemalloc._str()", "tracemalloc.stairs()", "tracemalloc.sqrt()", "tracemalloc.statvfs()", "tracemalloc.startswith()", "tracemalloc.sort()", "tracemalloc._sqrt()", "tracemalloc.start_color()"], "tracemalloc.start(nframe: int=1)": [], "tracemalloc.stop()": ["stop", "tracemalloc.step()", "tracemalloc.setp()", "tracemalloc.setup()", "tracemalloc.strip()", "tracemalloc.st()", "tracemalloc._setup()", "tracemalloc.WSTOPSIG()", "tracemalloc.stamp()", "tracemalloc._setoption()", "tracemalloc.setgroups()", "tracemalloc.lstrip()", "tracemalloc.strong()", "tracemalloc.setpos()", "tracemalloc.rstrip()"], "tracemalloc.take_snapshot()": ["take_snapshot", "tracemalloc._take_nd_object()", "tracemalloc._write_short()", "tracemalloc._take_dispatcher()", "tracemalloc.take_along_axis()", "tracemalloc.memory_snapshot()", "tracemalloc._write_ushort()", "tracemalloc.has_table()", "tracemalloc.safe_cast()", "tracemalloc.set_trace()", "tracemalloc.test_rast()", "tracemalloc.test_sndt()", "tracemalloc._assert_stacked_2d()", "tracemalloc._maybe_cast()", "tracemalloc.isinstance()"], "tree_builder.close()": ["close"], "tree_builder.data(data)": ["data"], "tree_builder.doctype(name, pubid, system)": ["doctype"], "tree_builder.end(tag)": ["end"], "tree_builder.start(tag, attrs)": ["start"], "tty.setcbreak(fd)": ["setcbreak", "tty.setraw(fd)", "tty.base_repr(fd)", "tty.get_server_certificate(fd)", "tty._normalize_module(fd)", "tty.tensorinv(fd)", "tty.diag_indices(fd)", "tty._dumps(fd)", "tty.stream(fd)", "tty.resetscreen(fd)", "tty.istraceback(fd)", "tty.setreuid(fd)", "tty.settrace(fd)", "tty.specgram(fd)", "tty.setregid(fd)"], "tty.setraw(fd, when=termios.TCSAFLUSH)": ["setraw", "tty.setcbreak(fd, when=termios.TCSAFLUSH)", "tty.base_repr(fd, when=termios.TCSAFLUSH)", "tty.tensorinv(fd, when=termios.TCSAFLUSH)", "tty._normalize_module(fd, when=termios.TCSAFLUSH)", "tty.get_server_certificate(fd, when=termios.TCSAFLUSH)", "tty._dumps(fd, when=termios.TCSAFLUSH)", "tty.diag_indices(fd, when=termios.TCSAFLUSH)", "tty.settrace(fd, when=termios.TCSAFLUSH)", "tty.str(fd, when=termios.TCSAFLUSH)", "tty.set_trace(fd, when=termios.TCSAFLUSH)", "tty.seterr(fd, when=termios.TCSAFLUSH)", "tty.stream(fd, when=termios.TCSAFLUSH)", "tty.__str__(fd, when=termios.TCSAFLUSH)", "tty._str(fd, when=termios.TCSAFLUSH)"], "tuple()": ["tuple", "_ntuple()", "astuple()", "istuple()", "_as_tuple()", "is_tuple()", "_triple()", "_tuple_str()", "namedtuple()", "turtles()", "tile()", "_namedtuple()", "_safe_tuple()", "make_tuple()", "_type()"], "tuple(iterable)": ["tuple", "_ntuple(iterable)", "astuple(iterable)", "istuple(iterable)", "_as_tuple(iterable)", "is_tuple(iterable)", "_triple(iterable)", "_tuple_str(iterable)", "namedtuple(iterable)", "turtles(iterable)", "tile(iterable)", "_namedtuple(iterable)", "_safe_tuple(iterable)", "make_tuple(iterable)", "_type(iterable)"], "turtle.RawPen(canvas)": ["RawPen"], "turtle.RawTurtle(canvas)": ["RawTurtle"], "turtle.Screen": ["turtle.Screen"], "turtle.ScrolledCanvas(master)": ["ScrolledCanvas"], "turtle.Shape(type_, data)": ["Shape"], "turtle.Turtle": ["turtle.Turtle"], "turtle.TurtleScreen(cv)": ["TurtleScreen"], "turtle.Vec2D(x, y)": ["Vec2D"], "turtle.addshape(name, shape=None)": ["addshape", "turtle.addshape(name, shape=None)", "turtle.add_charset(name, shape=None)", "turtle.shapesize(name, shape=None)", "turtle.escape(name, shape=None)", "turtle.escape_decode(name, shape=None)", "turtle.addsitedir(name, shape=None)", "turtle.addsitepackages(name, shape=None)", "turtle.disp(name, shape=None)", "turtle.distance(name, shape=None)", "turtle.upsample(name, shape=None)", "turtle.add_observer_(name, shape=None)", "turtle.escape_encode(name, shape=None)", "turtle._around_dispatcher(name, shape=None)", "turtle.transpose(name, shape=None)"], "turtle.back(distance)": ["back", "turtle.block(distance)", "turtle.stack(distance)", "turtle.bk(distance)", "turtle._block(distance)", "turtle.blackman(distance)", "turtle.backward(distance)", "turtle.unpack(distance)", "turtle.hstack(distance)", "turtle.vstack(distance)", "turtle._unpack(distance)", "turtle.dstack(distance)", "turtle.bar(distance)", "turtle.unstack(distance)", "turtle.walk_tb(distance)"], "turtle.backward(distance)": ["backward", "turtle.validate_all_hashable(distance)", "turtle.set_per_process_memory_fraction(distance)", "turtle.reduce(distance)", "turtle.deprecate_option(distance)", "turtle.broadcast(distance)", "turtle.all_gather(distance)", "turtle.assert_allclose(distance)", "turtle.towards(distance)", "turtle.reduce_scatter(distance)", "turtle.capwords(distance)", "turtle.disallow_kwargs(distance)", "turtle.tracer(distance)", "turtle._backfill_2d(distance)", "turtle.fallback_getpass(distance)"], "turtle.begin_fill()": ["begin_fill", "turtle.fill_binop()", "turtle.end_fill()", "turtle.fill_between()", "turtle.begin_poly()", "turtle.fill_betweenx()", "turtle.fill_diagonal()", "turtle._hist_bin_fd()", "turtle.fill()", "turtle.isneginf()", "turtle._find_builtin()", "turtle._field_assign()", "turtle._kl_beta_infinity()", "turtle._find_impl()", "turtle.zfill()"], "turtle.begin_poly()": ["begin_poly", "turtle.end_poly()", "turtle.begin_fill()", "turtle.get_poly()", "turtle.leg2poly()", "turtle._eval_poly()", "turtle.lazy_bind()", "turtle.poly()", "turtle.lag2poly()", "turtle._find_impl()", "turtle.cheb2poly()", "turtle._lazy_init()", "turtle.herm2poly()", "turtle.get_shapepoly()", "turtle.ginput()"], "turtle.bgcolor(*args)": ["bgcolor", "turtle.color(*args)", "turtle.pcolor(*args)", "turtle.pencolor(*args)", "turtle.colorbar(*args)", "turtle.colormaps(*args)", "turtle.fillcolor(*args)", "turtle.colormode(*args)", "turtle.tripcolor(*args)", "turtle.pcolormesh(*args)", "turtle.boxplot(*args)", "turtle.contour(*args)", "turtle.getCols(*args)", "turtle.start_color(*args)", "turtle.cool(*args)"], "turtle.bgpic()": ["bgpic", "turtle.grid()", "turtle.print_stack()", "turtle.yticks()", "turtle.xticks()", "turtle.rgrids()", "turtle.barrier()", "turtle.getPeriodData()", "turtle.pensize()", "turtle.interact()", "turtle.getsitepackages()", "turtle.bootstrap()", "turtle.ndpointer()", "turtle._perfcheck()", "turtle.new_group()"], "turtle.bgpic(picname=None)": ["bgpic", "turtle.bgpic(picname=None)", "turtle.grid(picname=None)", "turtle.print_stack(picname=None)", "turtle.yticks(picname=None)", "turtle.xticks(picname=None)", "turtle.rgrids(picname=None)", "turtle.barrier(picname=None)", "turtle.getPeriodData(picname=None)", "turtle.pensize(picname=None)", "turtle.interact(picname=None)", "turtle.getsitepackages(picname=None)", "turtle.bootstrap(picname=None)", "turtle.ndpointer(picname=None)", "turtle._perfcheck(picname=None)"], "turtle.bk(distance)": ["bk", "turtle.back(distance)", "turtle.block(distance)", "turtle._block(distance)", "turtle.walk_tb(distance)", "turtle.__abs__(distance)", "turtle.__sub__(distance)", "turtle._sub(distance)", "turtle.bar(distance)", "turtle.blackman(distance)", "turtle.sub(distance)", "turtle.getblock(distance)", "turtle.box(distance)", "turtle.bye(distance)", "turtle.backward(distance)"], "turtle.bye()": ["bye", "turtle.eye()", "turtle.eye_()", "turtle.asbytes()", "turtle.bone()", "turtle._type()", "turtle.to_bytes()", "turtle.label()", "turtle.maybe()", "turtle.table()", "turtle.len_b()", "turtle._read_bytes()", "turtle.obj2sctype()", "turtle.body_check()", "turtle.diff_bytes()"], "turtle.circle(radius)": ["circle", "turtle.compile(radius)", "turtle.irecv(radius)", "turtle.title(radius)", "turtle.filled(radius)", "turtle.imread(radius)", "turtle.figure(radius)", "turtle.Client(radius)", "turtle.tracer(radius)", "turtle.interpolate(radius)", "turtle.require(radius)", "turtle.ascii_decode(radius)", "turtle.ascii_encode(radius)", "turtle.pie(radius)", "turtle.distance(radius)"], "turtle.circle(radius, extent=None)": ["circle", "turtle.circle(radius, extent=None)", "turtle.compile(radius, extent=None)", "turtle.irecv(radius, extent=None)", "turtle.title(radius, extent=None)", "turtle.filled(radius, extent=None)", "turtle.imread(radius, extent=None)", "turtle.figure(radius, extent=None)", "turtle.Client(radius, extent=None)", "turtle.tracer(radius, extent=None)", "turtle.interpolate(radius, extent=None)", "turtle.require(radius, extent=None)", "turtle.ascii_decode(radius, extent=None)", "turtle.ascii_encode(radius, extent=None)", "turtle.pie(radius, extent=None)"], "turtle.circle(radius, extent=None, steps=None)": ["circle", "turtle.circle(radius, extent=None, steps=None)", "turtle.compile(radius, extent=None, steps=None)", "turtle.irecv(radius, extent=None, steps=None)", "turtle.title(radius, extent=None, steps=None)", "turtle.filled(radius, extent=None, steps=None)", "turtle.imread(radius, extent=None, steps=None)", "turtle.figure(radius, extent=None, steps=None)", "turtle.Client(radius, extent=None, steps=None)", "turtle.tracer(radius, extent=None, steps=None)", "turtle.interpolate(radius, extent=None, steps=None)", "turtle.require(radius, extent=None, steps=None)", "turtle.ascii_decode(radius, extent=None, steps=None)", "turtle.ascii_encode(radius, extent=None, steps=None)", "turtle.pie(radius, extent=None, steps=None)"], "turtle.circle(radius, steps=None)": ["circle", "turtle.circle(radius, steps=None)", "turtle.compile(radius, steps=None)", "turtle.irecv(radius, steps=None)", "turtle.title(radius, steps=None)", "turtle.filled(radius, steps=None)", "turtle.imread(radius, steps=None)", "turtle.figure(radius, steps=None)", "turtle.Client(radius, steps=None)", "turtle.tracer(radius, steps=None)", "turtle.interpolate(radius, steps=None)", "turtle.require(radius, steps=None)", "turtle.ascii_decode(radius, steps=None)", "turtle.ascii_encode(radius, steps=None)", "turtle.pie(radius, steps=None)"], "turtle.clear()": ["clear", "turtle.cla()", "turtle.cycler()", "turtle.clearcache()", "turtle.clearstamp()", "turtle._cleanup()", "turtle._lerp()", "turtle._clearcache()", "turtle.clearscreen()", "turtle.isscalar()", "turtle.clearstamps()", "turtle.colorbar()", "turtle._pickle_warn()", "turtle.cleandoc()", "turtle.asscalar()"], "turtle.clearscreen()": ["clearscreen", "turtle.Screen()", "turtle.getscreen()", "turtle.clearcache()", "turtle._clearcache()", "turtle.resetscreen()", "turtle.clear()", "turtle.clear_traces()", "turtle.getclasstree()", "turtle.ParserCreate()", "turtle.ensure_clean()", "turtle.clear_frames()", "turtle.ensure_clean_dir()", "turtle._screen_docrevise()", "turtle._coerce()"], "turtle.clearstamp(stampid)": ["clearstamp", "turtle.clearstamps(stampid)", "turtle.clear(stampid)", "turtle.stamp(stampid)", "turtle.clear_traces(stampid)", "turtle.clear_frames(stampid)", "turtle.classname(stampid)", "turtle.upsample_nearest(stampid)", "turtle.clearcache(stampid)", "turtle._scalar_str(stampid)", "turtle._clearcache(stampid)", "turtle.upsample_bilinear(stampid)", "turtle._cleanup(stampid)", "turtle.cast(stampid)", "turtle.start_color(stampid)"], "turtle.clearstamps()": ["clearstamps", "turtle.dataclass()", "turtle.print_last()", "turtle.post_mortem()", "turtle.mkstemp()", "turtle.testmod()", "turtle.current_task()", "turtle.DocTestSuite()", "turtle.ensure_clean()", "turtle.extract_stack()", "turtle.colorbar()", "turtle.register_cmap()", "turtle.bootstrap()", "turtle.localtime()", "turtle.colormode()"], "turtle.clearstamps(n=None)": ["clearstamps", "turtle.clearstamps(n=None)", "turtle.dataclass(n=None)", "turtle.print_last(n=None)", "turtle.post_mortem(n=None)", "turtle.mkstemp(n=None)", "turtle.testmod(n=None)", "turtle.current_task(n=None)", "turtle.DocTestSuite(n=None)", "turtle.ensure_clean(n=None)", "turtle.extract_stack(n=None)", "turtle.colorbar(n=None)", "turtle.register_cmap(n=None)", "turtle.bootstrap(n=None)", "turtle.localtime(n=None)"], "turtle.clone()": ["clone", "turtle.close()", "turtle._get_colon()", "turtle.logn()", "turtle.done()", "turtle.bone()", "turtle._code()", "turtle.ones()", "turtle.connect()", "turtle.convert()", "turtle.closerange()", "turtle._convert()", "turtle._get_clones()", "turtle.isclose()", "turtle.cond()"], "turtle.colormode()": ["colormode", "turtle.mode()", "turtle.colorbar()", "turtle.close()", "turtle.resizemode()", "turtle.formatdate()", "turtle.Comment()", "turtle.new_compiler()", "turtle.iter_modules()", "turtle.clim()", "turtle.removeHandler()", "turtle.localtime()", "turtle.close_all()", "turtle._format_exc()", "turtle.format_exc()"], "turtle.colormode(cmode=None)": ["colormode", "turtle.colormode(cmode=None)", "turtle.mode(cmode=None)", "turtle.colorbar(cmode=None)", "turtle.close(cmode=None)", "turtle.resizemode(cmode=None)", "turtle.formatdate(cmode=None)", "turtle.Comment(cmode=None)", "turtle.new_compiler(cmode=None)", "turtle.iter_modules(cmode=None)", "turtle.clim(cmode=None)", "turtle.removeHandler(cmode=None)", "turtle.localtime(cmode=None)", "turtle.close_all(cmode=None)", "turtle._format_exc(cmode=None)"], "turtle.degrees()": ["degrees", "turtle._zseries_der()", "turtle.deprecate()", "turtle.digest()", "turtle.delete()", "turtle.deregister()", "turtle.deprecated()", "turtle.decompress()", "turtle.delaxes()", "turtle.delegate_names()", "turtle.release()", "turtle.renames()", "turtle.greater()", "turtle._div_nearest()", "turtle.decodebytes()"], "turtle.degrees(fullcircle=360.0)": ["degrees", "turtle.degrees(fullcircle='360.0')", "turtle._zseries_der(fullcircle=360.0)", "turtle.deprecate(fullcircle=360.0)", "turtle.digest(fullcircle=360.0)", "turtle.delete(fullcircle=360.0)", "turtle.deregister(fullcircle=360.0)", "turtle.deprecated(fullcircle=360.0)", "turtle.decompress(fullcircle=360.0)", "turtle.delaxes(fullcircle=360.0)", "turtle.delegate_names(fullcircle=360.0)", "turtle.release(fullcircle=360.0)", "turtle.renames(fullcircle=360.0)", "turtle.greater(fullcircle=360.0)", "turtle._div_nearest(fullcircle=360.0)"], "turtle.delay()": ["delay", "turtle.delaxes()", "turtle.mode()", "turtle.dataclass()", "turtle.get_locales()", "turtle.token_urlsafe()", "turtle.getnode()", "turtle.mkdtemp()", "turtle.interact()", "turtle.askyesno()", "turtle.colorbar()", "turtle.get_rank()", "turtle.exit_dual_level()", "turtle.makeFloatSeries()", "turtle.localtime()"], "turtle.delay(delay=None)": ["delay", "turtle.delay(delay=None)", "turtle.delaxes(delay=None)", "turtle.mode(delay=None)", "turtle.dataclass(delay=None)", "turtle.get_locales(delay=None)", "turtle.token_urlsafe(delay=None)", "turtle.getnode(delay=None)", "turtle.mkdtemp(delay=None)", "turtle.interact(delay=None)", "turtle.askyesno(delay=None)", "turtle.colorbar(delay=None)", "turtle.get_rank(delay=None)", "turtle.exit_dual_level(delay=None)", "turtle.makeFloatSeries(delay=None)"], "turtle.distance(x)": ["distance", "turtle._dispatcher(x)", "turtle.variance(x)", "turtle.distb(x)", "turtle.pvariance(x)", "turtle._trace_dispatcher(x)", "turtle._qr_dispatcher(x)", "turtle.median(x)", "turtle._median(x)", "turtle.listen(x)", "turtle.tracer(x)", "turtle._vander_dispatcher(x)", "turtle._tri_dispatcher(x)", "turtle._ptp_dispatcher(x)", "turtle._svd_dispatcher(x)"], "turtle.distance(x, y=None)": ["distance", "turtle.distance(x, y=None)", "turtle._dispatcher(x, y=None)", "turtle.variance(x, y=None)", "turtle.distb(x, y=None)", "turtle.pvariance(x, y=None)", "turtle._trace_dispatcher(x, y=None)", "turtle._qr_dispatcher(x, y=None)", "turtle.median(x, y=None)", "turtle._median(x, y=None)", "turtle.listen(x, y=None)", "turtle.tracer(x, y=None)", "turtle._vander_dispatcher(x, y=None)", "turtle._tri_dispatcher(x, y=None)", "turtle._ptp_dispatcher(x, y=None)"], "turtle.done()": ["done", "turtle.bone()", "turtle.ones()", "turtle.down()", "turtle.onkey()", "turtle.ne()", "turtle.doc_note()", "turtle.__ne__()", "turtle.clone()", "turtle.ndpointer()", "turtle.fdopen()", "turtle.isdown()", "turtle.decode()", "turtle._dpower()", "turtle.neg()"], "turtle.dot(*color)": ["dot", "turtle.doc(*color)", "turtle.count(*color)", "turtle._gcd_import(*color)", "turtle.decode(*color)", "turtle.utf_8_decode(*color)", "turtle.utf_7_decode(*color)", "turtle.utf_16_decode(*color)", "turtle.utf_32_decode(*color)", "turtle.finditer(*color)", "turtle.endswith(*color)", "turtle.copytree(*color)", "turtle.digitize(*color)", "turtle.interpolate_2d(*color)", "turtle.b64decode(*color)"], "turtle.dot(*color, size=None)": ["dot", "turtle.dot(*color, size=None)", "turtle.doc(*color, size=None)", "turtle.count(*color, size=None)", "turtle._gcd_import(*color, size=None)", "turtle.decode(*color, size=None)", "turtle.utf_8_decode(*color, size=None)", "turtle.utf_7_decode(*color, size=None)", "turtle.utf_16_decode(*color, size=None)", "turtle.utf_32_decode(*color, size=None)", "turtle.finditer(*color, size=None)", "turtle.endswith(*color, size=None)", "turtle.copytree(*color, size=None)", "turtle.digitize(*color, size=None)", "turtle.interpolate_2d(*color, size=None)"], "turtle.down()": ["down", "turtle.isdown()", "turtle.done()", "turtle.pendown()", "turtle.shutdown()", "turtle._shutdown()", "turtle._siftdown()", "turtle.chown()", "turtle.fdopen()", "turtle.fchown()", "turtle.lchown()", "turtle._dpower()", "turtle.__pow__()", "turtle.pow()", "turtle.ion()"], "turtle.end_fill()": ["end_fill", "turtle.begin_fill()", "turtle.fill_between()", "turtle.fill_binop()", "turtle.fill()", "turtle.fill_betweenx()", "turtle._windll_getnode()", "turtle.EncodedFile()", "turtle._backfill_2d()", "turtle.end_poly()", "turtle.zfill()", "turtle._find_impl()", "turtle.filled()", "turtle.fill_diagonal()", "turtle._find_and_load()"], "turtle.end_poly()": ["end_poly", "turtle.begin_poly()", "turtle.get_poly()", "turtle._eval_poly()", "turtle.poly()", "turtle.leg2poly()", "turtle.end_fill()", "turtle._find_impl()", "turtle._addr_only()", "turtle.cheb2poly()", "turtle.herm2poly()", "turtle.lazy_bind()", "turtle.get_shapepoly()", "turtle.herme2poly()", "turtle._append_doc()"], "turtle.exitonclick()": ["exitonclick", "turtle.onclick()", "turtle.xticks()", "turtle._exit_function()", "turtle.onscreenclick()", "turtle._extendLine()", "turtle.is_exiting()", "turtle._exit()", "turtle.exit()", "turtle.getblock()", "turtle._exception_traceback()", "turtle._is_exception()", "turtle.nextmonth()", "turtle.execl()", "turtle.token_hex()"], "turtle.fd(distance)": ["fd", "turtle.fold(distance)", "turtle.find(distance)", "turtle.fd_id(distance)", "turtle.field(distance)", "turtle.DupFd(distance)", "turtle.rfind(distance)", "turtle.filled(distance)", "turtle.fchmod(distance)", "turtle.fromfd(distance)", "turtle.fchdir(distance)", "turtle.fdopen(distance)", "turtle._id(distance)", "turtle.fields(distance)", "turtle.f8(distance)"], "turtle.filling()": ["filling", "turtle.fill()", "turtle.filelineno()", "turtle.zfill()", "turtle._fail_neg()", "turtle.filled()", "turtle.fileno()", "turtle.islink()", "turtle.killpg()", "turtle.get_fill_func()", "turtle._fill_in_zeros()", "turtle._find_lines()", "turtle._field_init()", "turtle.filterwarnings()", "turtle.findall()"], "turtle.forward(distance)": ["forward", "turtle.towards(distance)", "turtle.__forwardmethods(distance)", "turtle.wait_for(distance)", "turtle.format(distance)", "turtle._format(distance)", "turtle._get_forward_norm(distance)", "turtle._formatwarnmsg(distance)", "turtle.formatwarning(distance)", "turtle.formataddr(distance)", "turtle.str_format(distance)", "turtle._read_float(distance)", "turtle.formatdate(distance)", "turtle._round_frac(distance)", "turtle.pformat(distance)"], "turtle.get_poly()": ["get_poly", "turtle.get_shapepoly()", "turtle.end_poly()", "turtle._eval_poly()", "turtle.begin_poly()", "turtle.getCols()", "turtle.getp()", "turtle._get_layout()", "turtle._get_option()", "turtle._get_sep()", "turtle.poly()", "turtle.getpriority()", "turtle.get_locales()", "turtle.get_path()", "turtle.lag2poly()"], "turtle.get_shapepoly()": ["get_shapepoly", "turtle.get_poly()", "turtle.getshapes()", "turtle._get_sep()", "turtle._get_spec()", "turtle.get_phrase()", "turtle.get_schema()", "turtle.reshape()", "turtle.get_protocol_name()", "turtle.register_shape()", "turtle.get_world_size()", "turtle._get_iscased()", "turtle.get_section()", "turtle._getcategory()", "turtle.end_poly()"], "turtle.getcanvas()": ["getcanvas", "turtle._getconv()", "turtle.getcaps()", "turtle.scanvars()", "turtle.getcallargs()", "turtle.getenv()", "turtle.getargvalues()", "turtle._get_names()", "turtle.getTestCaseNames()", "turtle._get_na_values()", "turtle.expandvars()", "turtle._getname()", "turtle.getCols()", "turtle._getlang()", "turtle.getenvb()"], "turtle.getpen()": ["getpen", "turtle.getenv()", "turtle.getp()", "turtle.getenvb()", "turtle.getpager()", "turtle.getpwnam()", "turtle._get_spec()", "turtle.get_token()", "turtle.get_ident()", "turtle.get()", "turtle.getshapes()", "turtle.pen()", "turtle.getopt()", "turtle.getpid()", "turtle.getscreen()"], "turtle.getscreen()": ["getscreen", "turtle.resetscreen()", "turtle.Screen()", "turtle.getregentry()", "turtle.clearscreen()", "turtle.getsource()", "turtle.getenv()", "turtle.getclasstree()", "turtle.getpen()", "turtle.getreader()", "turtle.getsourcefile()", "turtle._get_stream()", "turtle.screensize()", "turtle.get_schema()", "turtle.getuser()"], "turtle.getshapes()": ["getshapes", "turtle.reshape()", "turtle.getcaps()", "turtle.get_shapepoly()", "turtle._get_spec()", "turtle.shape()", "turtle._escape()", "turtle._get_stats()", "turtle.shapesize()", "turtle.escape()", "turtle.getpen()", "turtle._get_names()", "turtle._get_traces()", "turtle.getproxies()", "turtle.getargspec()"], "turtle.getturtle()": ["getturtle", "turtle.turtles()", "turtle.hideturtle()", "turtle.getsource()", "turtle.get_ttext()", "turtle.getwriter()", "turtle.getmodule()", "turtle.getoutput()", "turtle._getattribute()", "turtle.getsourcefile()", "turtle.get_signature()", "turtle.get_writer()", "turtle._get_stream()", "turtle.turtlesize()", "turtle._get_traces()"], "turtle.goto(x)": ["goto", "turtle.contour(x)", "turtle.contourf(x)", "turtle.getmodule(x)", "turtle._gcd_import(x)", "turtle.getenv(x)", "turtle.setpos(x)", "turtle.gather(x)", "turtle.setposition(x)", "turtle.__import__(x)", "turtle.pcolor(x)", "turtle._cook_nd_args(x)", "turtle.boxplot(x)", "turtle.matshow(x)", "turtle.to_time(x)"], "turtle.goto(x, y=None)": ["goto", "turtle.goto(x, y=None)", "turtle.contour(x, y=None)", "turtle.contourf(x, y=None)", "turtle.getmodule(x, y=None)", "turtle._gcd_import(x, y=None)", "turtle.getenv(x, y=None)", "turtle.setpos(x, y=None)", "turtle.gather(x, y=None)", "turtle.setposition(x, y=None)", "turtle.__import__(x, y=None)", "turtle.pcolor(x, y=None)", "turtle._cook_nd_args(x, y=None)", "turtle.boxplot(x, y=None)", "turtle.matshow(x, y=None)"], "turtle.heading()": ["heading", "turtle.setheading()", "turtle.hamming()", "turtle.hanning()", "turtle._read_string()", "turtle.read_string1()", "turtle.read_string4()", "turtle.hexbin()", "turtle.median()", "turtle._median()", "turtle._count_leading()", "turtle.read_stringnl()", "turtle.eig()", "turtle.header_length()", "turtle.sigpending()"], "turtle.hideturtle()": ["hideturtle", "turtle.getturtle()", "turtle.turtles()", "turtle.showturtle()", "turtle.architecture()", "turtle._turtle_docrevise()", "turtle.turtlesize()", "turtle.istitle()", "turtle._url_handler()", "turtle.whichmodule()", "turtle.dgettext()", "turtle.iterable()", "turtle.identity()", "turtle.ismodule()", "turtle.hermline()"], "turtle.home()": ["home", "turtle.test_hcom()", "turtle.choose()", "turtle.who()", "turtle.hot()", "turtle._shorten()", "turtle.ontimer()", "turtle._modname()", "turtle.shorten()", "turtle._moments()", "turtle._compose()", "turtle.compile()", "turtle._compile()", "turtle.hermder()", "turtle.Comment()"], "turtle.isvisible()": ["isvisible", "turtle.visiblename()", "turtle.isfile()", "turtle.is_zipfile()", "turtle.disable()", "turtle.istitle()", "turtle.isfirstline()", "turtle.isawaitable()", "turtle.disassemble()", "turtle._isfinite()", "turtle.variable()", "turtle.table_exists()", "turtle.isfileobj()", "turtle.gisfinite()", "turtle._isunsized()"], "turtle.left(angle)": ["left", "turtle.legfit(angle)", "turtle.le(angle)", "turtle.__lt__(angle)", "turtle.__le__(angle)", "turtle.lt(angle)", "turtle.__lshift__(angle)", "turtle.lshift(angle)", "turtle.Client(angle)", "turtle.legint(angle)", "turtle.lagfit(angle)", "turtle.delete(angle)", "turtle.select(angle)", "turtle.get(angle)", "turtle.jet(angle)"], "turtle.listen()": ["listen", "turtle.listdir()", "turtle.close()", "turtle.distb()", "turtle.seterr()", "turtle.print_last()", "turtle.token_bytes()", "turtle.mkstemp()", "turtle.dis()", "turtle.interact()", "turtle.askyesno()", "turtle.log_to_stderr()", "turtle.register_cmap()", "turtle.init()", "turtle.main()"], "turtle.listen(xdummy=None, ydummy=None)": ["listen", "turtle.listen(xdummy=None, ydummy=None)", "turtle.listdir(xdummy=None, ydummy=None)", "turtle.close(xdummy=None, ydummy=None)", "turtle.distb(xdummy=None, ydummy=None)", "turtle.seterr(xdummy=None, ydummy=None)", "turtle.print_last(xdummy=None, ydummy=None)", "turtle.token_bytes(xdummy=None, ydummy=None)", "turtle.mkstemp(xdummy=None, ydummy=None)", "turtle.dis(xdummy=None, ydummy=None)", "turtle.interact(xdummy=None, ydummy=None)", "turtle.askyesno(xdummy=None, ydummy=None)", "turtle.log_to_stderr(xdummy=None, ydummy=None)", "turtle.register_cmap(xdummy=None, ydummy=None)", "turtle.init(xdummy=None, ydummy=None)"], "turtle.listen(ydummy=None)": ["listen", "turtle.listen(ydummy=None)", "turtle.listdir(ydummy=None)", "turtle.close(ydummy=None)", "turtle.distb(ydummy=None)", "turtle.seterr(ydummy=None)", "turtle.print_last(ydummy=None)", "turtle.token_bytes(ydummy=None)", "turtle.mkstemp(ydummy=None)", "turtle.dis(ydummy=None)", "turtle.interact(ydummy=None)", "turtle.askyesno(ydummy=None)", "turtle.log_to_stderr(ydummy=None)", "turtle.register_cmap(ydummy=None)", "turtle.init(ydummy=None)"], "turtle.lt(angle)": ["lt", "turtle.__lt__(angle)", "turtle.tilt(angle)", "turtle.left(angle)", "turtle.plot(angle)", "turtle.list(angle)", "turtle.split(angle)", "turtle.lstsq(angle)", "turtle.ljust(angle)", "turtle.nanlt(angle)", "turtle.lstat(angle)", "turtle.__lshift__(angle)", "turtle.lstrip(angle)", "turtle.le(angle)", "turtle.st(angle)"], "turtle.mainloop()": ["mainloop", "turtle._noop()", "turtle.main()", "turtle._main()", "turtle.loop()", "turtle.minor()", "turtle._too_many()", "turtle.lookup()", "turtle.min()", "turtle.margins()", "turtle.machine()", "turtle.open_latin1()", "turtle.spawnlp()", "turtle.initlog()", "turtle.get_mailbox()"], "turtle.mode()": ["mode", "turtle.value_counts()", "turtle.hash_pandas_object()", "turtle.polyder()", "turtle.hermder()", "turtle._load()", "turtle.hermeder()", "turtle.load()", "turtle.loads()", "turtle._loads()", "turtle.remove_tree()", "turtle.browse()", "turtle.legder()", "turtle._arraymethod()", "turtle.ondrag()"], "turtle.mode(mode=None)": ["mode", "turtle.mode(mode=None)", "turtle.value_counts(mode=None)", "turtle.hash_pandas_object(mode=None)", "turtle.polyder(mode=None)", "turtle.hermder(mode=None)", "turtle._load(mode=None)", "turtle.hermeder(mode=None)", "turtle.load(mode=None)", "turtle.loads(mode=None)", "turtle._loads(mode=None)", "turtle.remove_tree(mode=None)", "turtle.browse(mode=None)", "turtle.legder(mode=None)", "turtle._arraymethod(mode=None)"], "turtle.numinput(title, prompt)": ["numinput", "turtle._raw_input(title, prompt)", "turtle.to_numeric(title, prompt)", "turtle.dump(title, prompt)", "turtle.update_bn(title, prompt)", "turtle.ndpointer(title, prompt)", "turtle.nancumsum(title, prompt)", "turtle.nancumprod(title, prompt)", "turtle.argmin(title, prompt)", "turtle._amin_dispatcher(title, prompt)", "turtle.Client(title, prompt)", "turtle.indent(title, prompt)", "turtle.cumsum(title, prompt)", "turtle._unstack_multiple(title, prompt)", "turtle._argmin_dispatcher(title, prompt)"], "turtle.numinput(title, prompt, default=None)": ["numinput", "turtle.numinput(title, prompt, default=None)", "turtle._raw_input(title, prompt, default=None)", "turtle.to_numeric(title, prompt, default=None)", "turtle.dump(title, prompt, default=None)", "turtle.update_bn(title, prompt, default=None)", "turtle.ndpointer(title, prompt, default=None)", "turtle.nancumsum(title, prompt, default=None)", "turtle.nancumprod(title, prompt, default=None)", "turtle.argmin(title, prompt, default=None)", "turtle._amin_dispatcher(title, prompt, default=None)", "turtle.Client(title, prompt, default=None)", "turtle.indent(title, prompt, default=None)", "turtle.cumsum(title, prompt, default=None)", "turtle._unstack_multiple(title, prompt, default=None)"], "turtle.numinput(title, prompt, default=None, maxval=None)": ["numinput", "turtle.numinput(title, prompt, default=None, maxval=None)", "turtle._raw_input(title, prompt, default=None, maxval=None)", "turtle.to_numeric(title, prompt, default=None, maxval=None)", "turtle.dump(title, prompt, default=None, maxval=None)", "turtle.update_bn(title, prompt, default=None, maxval=None)", "turtle.ndpointer(title, prompt, default=None, maxval=None)", "turtle.nancumsum(title, prompt, default=None, maxval=None)", "turtle.nancumprod(title, prompt, default=None, maxval=None)", "turtle.argmin(title, prompt, default=None, maxval=None)", "turtle._amin_dispatcher(title, prompt, default=None, maxval=None)", "turtle.Client(title, prompt, default=None, maxval=None)", "turtle.indent(title, prompt, default=None, maxval=None)", "turtle.cumsum(title, prompt, default=None, maxval=None)", "turtle._unstack_multiple(title, prompt, default=None, maxval=None)"], "turtle.numinput(title, prompt, default=None, minval=None)": ["numinput", "turtle.numinput(title, prompt, default=None, minval=None)", "turtle._raw_input(title, prompt, default=None, minval=None)", "turtle.to_numeric(title, prompt, default=None, minval=None)", "turtle.dump(title, prompt, default=None, minval=None)", "turtle.update_bn(title, prompt, default=None, minval=None)", "turtle.ndpointer(title, prompt, default=None, minval=None)", "turtle.nancumsum(title, prompt, default=None, minval=None)", "turtle.nancumprod(title, prompt, default=None, minval=None)", "turtle.argmin(title, prompt, default=None, minval=None)", "turtle._amin_dispatcher(title, prompt, default=None, minval=None)", "turtle.Client(title, prompt, default=None, minval=None)", "turtle.indent(title, prompt, default=None, minval=None)", "turtle.cumsum(title, prompt, default=None, minval=None)", "turtle._unstack_multiple(title, prompt, default=None, minval=None)"], "turtle.numinput(title, prompt, default=None, minval=None, maxval=None)": ["numinput", "turtle.numinput(title, prompt, default=None, minval=None, maxval=None)", "turtle._raw_input(title, prompt, default=None, minval=None, maxval=None)", "turtle.to_numeric(title, prompt, default=None, minval=None, maxval=None)", "turtle.dump(title, prompt, default=None, minval=None, maxval=None)", "turtle.update_bn(title, prompt, default=None, minval=None, maxval=None)", "turtle.ndpointer(title, prompt, default=None, minval=None, maxval=None)", "turtle.nancumsum(title, prompt, default=None, minval=None, maxval=None)", "turtle.nancumprod(title, prompt, default=None, minval=None, maxval=None)", "turtle.argmin(title, prompt, default=None, minval=None, maxval=None)", "turtle._amin_dispatcher(title, prompt, default=None, minval=None, maxval=None)", "turtle.Client(title, prompt, default=None, minval=None, maxval=None)", "turtle.indent(title, prompt, default=None, minval=None, maxval=None)", "turtle.cumsum(title, prompt, default=None, minval=None, maxval=None)", "turtle._unstack_multiple(title, prompt, default=None, minval=None, maxval=None)"], "turtle.numinput(title, prompt, maxval=None)": ["numinput", "turtle.numinput(title, prompt, maxval=None)", "turtle._raw_input(title, prompt, maxval=None)", "turtle.to_numeric(title, prompt, maxval=None)", "turtle.dump(title, prompt, maxval=None)", "turtle.update_bn(title, prompt, maxval=None)", "turtle.ndpointer(title, prompt, maxval=None)", "turtle.nancumsum(title, prompt, maxval=None)", "turtle.nancumprod(title, prompt, maxval=None)", "turtle.argmin(title, prompt, maxval=None)", "turtle._amin_dispatcher(title, prompt, maxval=None)", "turtle.Client(title, prompt, maxval=None)", "turtle.indent(title, prompt, maxval=None)", "turtle.cumsum(title, prompt, maxval=None)", "turtle._unstack_multiple(title, prompt, maxval=None)"], "turtle.numinput(title, prompt, minval=None)": ["numinput", "turtle.numinput(title, prompt, minval=None)", "turtle._raw_input(title, prompt, minval=None)", "turtle.to_numeric(title, prompt, minval=None)", "turtle.dump(title, prompt, minval=None)", "turtle.update_bn(title, prompt, minval=None)", "turtle.ndpointer(title, prompt, minval=None)", "turtle.nancumsum(title, prompt, minval=None)", "turtle.nancumprod(title, prompt, minval=None)", "turtle.argmin(title, prompt, minval=None)", "turtle._amin_dispatcher(title, prompt, minval=None)", "turtle.Client(title, prompt, minval=None)", "turtle.indent(title, prompt, minval=None)", "turtle.cumsum(title, prompt, minval=None)", "turtle._unstack_multiple(title, prompt, minval=None)"], "turtle.numinput(title, prompt, minval=None, maxval=None)": ["numinput", "turtle.numinput(title, prompt, minval=None, maxval=None)", "turtle._raw_input(title, prompt, minval=None, maxval=None)", "turtle.to_numeric(title, prompt, minval=None, maxval=None)", "turtle.dump(title, prompt, minval=None, maxval=None)", "turtle.update_bn(title, prompt, minval=None, maxval=None)", "turtle.ndpointer(title, prompt, minval=None, maxval=None)", "turtle.nancumsum(title, prompt, minval=None, maxval=None)", "turtle.nancumprod(title, prompt, minval=None, maxval=None)", "turtle.argmin(title, prompt, minval=None, maxval=None)", "turtle._amin_dispatcher(title, prompt, minval=None, maxval=None)", "turtle.Client(title, prompt, minval=None, maxval=None)", "turtle.indent(title, prompt, minval=None, maxval=None)", "turtle.cumsum(title, prompt, minval=None, maxval=None)", "turtle._unstack_multiple(title, prompt, minval=None, maxval=None)"], "turtle.onclick(fun)": ["onclick", "turtle.onscreenclick(fun)", "turtle.polyint(fun)", "turtle.onrelease(fun)", "turtle.masked_invalid(fun)", "turtle._lock_file(fun)", "turtle.walk(fun)", "turtle.orthogonal_(fun)", "turtle.increment_lineno(fun)", "turtle.dirac_(fun)", "turtle.fwalk(fun)", "turtle.DocFileTest(fun)", "turtle.which(fun)", "turtle.to_clipboard(fun)", "turtle.ondrag(fun)"], "turtle.onclick(fun, add=None)": ["onclick", "turtle.onclick(fun, add=None)", "turtle.onscreenclick(fun, add=None)", "turtle.polyint(fun, add=None)", "turtle.onrelease(fun, add=None)", "turtle.masked_invalid(fun, add=None)", "turtle._lock_file(fun, add=None)", "turtle.walk(fun, add=None)", "turtle.orthogonal_(fun, add=None)", "turtle.increment_lineno(fun, add=None)", "turtle.dirac_(fun, add=None)", "turtle.fwalk(fun, add=None)", "turtle.DocFileTest(fun, add=None)", "turtle.which(fun, add=None)", "turtle.to_clipboard(fun, add=None)"], "turtle.onclick(fun, btn=1)": ["onclick", "turtle.onclick(fun, btn='1')", "turtle.onscreenclick(fun, btn=1)", "turtle.polyint(fun, btn=1)", "turtle.onrelease(fun, btn=1)", "turtle.masked_invalid(fun, btn=1)", "turtle._lock_file(fun, btn=1)", "turtle.walk(fun, btn=1)", "turtle.orthogonal_(fun, btn=1)", "turtle.increment_lineno(fun, btn=1)", "turtle.dirac_(fun, btn=1)", "turtle.fwalk(fun, btn=1)", "turtle.DocFileTest(fun, btn=1)", "turtle.which(fun, btn=1)", "turtle.to_clipboard(fun, btn=1)"], "turtle.onclick(fun, btn=1, add=None)": ["onclick", "turtle.onclick(fun, btn=1, add=None)", "turtle.onclick(fun, btn='1', add=None)", "turtle.onscreenclick(fun, btn=1, add=None)", "turtle.polyint(fun, btn=1, add=None)", "turtle.onrelease(fun, btn=1, add=None)", "turtle.masked_invalid(fun, btn=1, add=None)", "turtle._lock_file(fun, btn=1, add=None)", "turtle.walk(fun, btn=1, add=None)", "turtle.orthogonal_(fun, btn=1, add=None)", "turtle.increment_lineno(fun, btn=1, add=None)", "turtle.dirac_(fun, btn=1, add=None)", "turtle.fwalk(fun, btn=1, add=None)", "turtle.DocFileTest(fun, btn=1, add=None)", "turtle.which(fun, btn=1, add=None)"], "turtle.ondrag(fun)": ["ondrag", "turtle.dirac_(fun)", "turtle.onrelease(fun)", "turtle.polyder(fun)", "turtle.get_data(fun)", "turtle.orthogonal_(fun)", "turtle._format_exc(fun)", "turtle.format_exc(fun)", "turtle.get_docstring(fun)", "turtle.onscreenclick(fun)", "turtle.set_string_function(fun)", "turtle.rundocs(fun)", "turtle.onclick(fun)", "turtle.polyint(fun)", "turtle.getdata(fun)"], "turtle.ondrag(fun, add=None)": ["ondrag", "turtle.ondrag(fun, add=None)", "turtle.dirac_(fun, add=None)", "turtle.onrelease(fun, add=None)", "turtle.polyder(fun, add=None)", "turtle.get_data(fun, add=None)", "turtle.orthogonal_(fun, add=None)", "turtle._format_exc(fun, add=None)", "turtle.format_exc(fun, add=None)", "turtle.get_docstring(fun, add=None)", "turtle.onscreenclick(fun, add=None)", "turtle.set_string_function(fun, add=None)", "turtle.rundocs(fun, add=None)", "turtle.onclick(fun, add=None)", "turtle.polyint(fun, add=None)"], "turtle.ondrag(fun, btn=1)": ["ondrag", "turtle.ondrag(fun, btn='1')", "turtle.dirac_(fun, btn=1)", "turtle.onrelease(fun, btn=1)", "turtle.polyder(fun, btn=1)", "turtle.get_data(fun, btn=1)", "turtle.orthogonal_(fun, btn=1)", "turtle._format_exc(fun, btn=1)", "turtle.format_exc(fun, btn=1)", "turtle.get_docstring(fun, btn=1)", "turtle.onscreenclick(fun, btn=1)", "turtle.set_string_function(fun, btn=1)", "turtle.rundocs(fun, btn=1)", "turtle.onclick(fun, btn=1)", "turtle.polyint(fun, btn=1)"], "turtle.ondrag(fun, btn=1, add=None)": ["ondrag", "turtle.ondrag(fun, btn=1, add=None)", "turtle.ondrag(fun, btn='1', add=None)", "turtle.dirac_(fun, btn=1, add=None)", "turtle.onrelease(fun, btn=1, add=None)", "turtle.polyder(fun, btn=1, add=None)", "turtle.get_data(fun, btn=1, add=None)", "turtle.orthogonal_(fun, btn=1, add=None)", "turtle._format_exc(fun, btn=1, add=None)", "turtle.format_exc(fun, btn=1, add=None)", "turtle.get_docstring(fun, btn=1, add=None)", "turtle.onscreenclick(fun, btn=1, add=None)", "turtle.set_string_function(fun, btn=1, add=None)", "turtle.rundocs(fun, btn=1, add=None)", "turtle.onclick(fun, btn=1, add=None)"], "turtle.onkey(fun, key)": ["onkey", "turtle.done(fun, key)", "turtle.bone(fun, key)", "turtle.ones(fun, key)", "turtle.onkeypress(fun, key)", "turtle.clone(fun, key)", "turtle.onkeyrelease(fun, key)", "turtle.ne(fun, key)", "turtle.__ne__(fun, key)", "turtle._get_join_keys(fun, key)", "turtle.joinseq(fun, key)", "turtle.neg(fun, key)", "turtle.ontimer(fun, key)", "turtle.openpty(fun, key)", "turtle._modname(fun, key)"], "turtle.onkeypress(fun)": ["onkeypress", "turtle.ones(fun)", "turtle.compress_nd(fun)", "turtle._namespaces(fun)", "turtle.get_block_type(fun)", "turtle._get_compressor(fun)", "turtle.init_process_group(fun)", "turtle.use_numexpr(fun)", "turtle.convert(fun)", "turtle.getpass(fun)", "turtle.makePeriodSeries(fun)", "turtle.upsample_nearest(fun)", "turtle.eye(fun)", "turtle.compress_rowcols(fun)", "turtle.askyesno(fun)"], "turtle.onkeypress(fun, key=None)": ["onkeypress", "turtle.onkeypress(fun, key=None)", "turtle.ones(fun, key=None)", "turtle.compress_nd(fun, key=None)", "turtle._namespaces(fun, key=None)", "turtle.get_block_type(fun, key=None)", "turtle._get_compressor(fun, key=None)", "turtle.init_process_group(fun, key=None)", "turtle.use_numexpr(fun, key=None)", "turtle.convert(fun, key=None)", "turtle.getpass(fun, key=None)", "turtle.makePeriodSeries(fun, key=None)", "turtle.upsample_nearest(fun, key=None)", "turtle.eye(fun, key=None)", "turtle.compress_rowcols(fun, key=None)"], "turtle.onkeyrelease(fun, key)": ["onkeyrelease", "turtle.onrelease(fun, key)", "turtle.release_lock(fun, key)", "turtle.release(fun, key)", "turtle.onkeypress(fun, key)", "turtle._releaseLock(fun, key)", "turtle.onkey(fun, key)", "turtle.correlate(fun, key)", "turtle.token_urlsafe(fun, key)", "turtle._parse_overview(fun, key)", "turtle.parse_makefile(fun, key)", "turtle._parse_makefile(fun, key)", "turtle._release_waiter(fun, key)", "turtle.degrees(fun, key)", "turtle.replace(fun, key)"], "turtle.onrelease(fun)": ["onrelease", "turtle.ondrag(fun)", "turtle.measure(fun)", "turtle.onscreenclick(fun)", "turtle.masked_invalid(fun)", "turtle.get_module_concrete_type(fun)", "turtle.increment_lineno(fun)", "turtle.escape(fun)", "turtle.DocFileTest(fun)", "turtle.polyder(fun)", "turtle.onclick(fun)", "turtle.getinnerframes(fun)", "turtle.getouterframes(fun)", "turtle.testfile(fun)", "turtle.median_grouped(fun)"], "turtle.onrelease(fun, add=None)": ["onrelease", "turtle.onrelease(fun, add=None)", "turtle.ondrag(fun, add=None)", "turtle.measure(fun, add=None)", "turtle.onscreenclick(fun, add=None)", "turtle.masked_invalid(fun, add=None)", "turtle.get_module_concrete_type(fun, add=None)", "turtle.increment_lineno(fun, add=None)", "turtle.escape(fun, add=None)", "turtle.DocFileTest(fun, add=None)", "turtle.polyder(fun, add=None)", "turtle.onclick(fun, add=None)", "turtle.getinnerframes(fun, add=None)", "turtle.getouterframes(fun, add=None)", "turtle.testfile(fun, add=None)"], "turtle.onrelease(fun, btn=1)": ["onrelease", "turtle.onrelease(fun, btn='1')", "turtle.ondrag(fun, btn=1)", "turtle.measure(fun, btn=1)", "turtle.onscreenclick(fun, btn=1)", "turtle.masked_invalid(fun, btn=1)", "turtle.get_module_concrete_type(fun, btn=1)", "turtle.increment_lineno(fun, btn=1)", "turtle.escape(fun, btn=1)", "turtle.DocFileTest(fun, btn=1)", "turtle.polyder(fun, btn=1)", "turtle.onclick(fun, btn=1)", "turtle.getinnerframes(fun, btn=1)", "turtle.getouterframes(fun, btn=1)", "turtle.testfile(fun, btn=1)"], "turtle.onrelease(fun, btn=1, add=None)": ["onrelease", "turtle.onrelease(fun, btn=1, add=None)", "turtle.onrelease(fun, btn='1', add=None)", "turtle.ondrag(fun, btn=1, add=None)", "turtle.measure(fun, btn=1, add=None)", "turtle.onscreenclick(fun, btn=1, add=None)", "turtle.masked_invalid(fun, btn=1, add=None)", "turtle.get_module_concrete_type(fun, btn=1, add=None)", "turtle.increment_lineno(fun, btn=1, add=None)", "turtle.escape(fun, btn=1, add=None)", "turtle.DocFileTest(fun, btn=1, add=None)", "turtle.polyder(fun, btn=1, add=None)", "turtle.onclick(fun, btn=1, add=None)", "turtle.getinnerframes(fun, btn=1, add=None)", "turtle.getouterframes(fun, btn=1, add=None)"], "turtle.onscreenclick(fun)": ["onscreenclick", "turtle.onclick(fun)", "turtle.increment_lineno(fun)", "turtle.onrelease(fun)", "turtle.pack_sequence(fun)", "turtle.get_module_concrete_type(fun)", "turtle._describe_option(fun)", "turtle._lock_file(fun)", "turtle.orthogonal_(fun)", "turtle.infer_concrete_type_builder(fun)", "turtle.DocFileTest(fun)", "turtle.escape(fun)", "turtle.ondrag(fun)", "turtle.get_docstring(fun)", "turtle.set_string_function(fun)"], "turtle.onscreenclick(fun, add=None)": ["onscreenclick", "turtle.onscreenclick(fun, add=None)", "turtle.onclick(fun, add=None)", "turtle.increment_lineno(fun, add=None)", "turtle.onrelease(fun, add=None)", "turtle.pack_sequence(fun, add=None)", "turtle.get_module_concrete_type(fun, add=None)", "turtle._describe_option(fun, add=None)", "turtle._lock_file(fun, add=None)", "turtle.orthogonal_(fun, add=None)", "turtle.infer_concrete_type_builder(fun, add=None)", "turtle.DocFileTest(fun, add=None)", "turtle.escape(fun, add=None)", "turtle.ondrag(fun, add=None)", "turtle.get_docstring(fun, add=None)"], "turtle.onscreenclick(fun, btn=1)": ["onscreenclick", "turtle.onscreenclick(fun, btn='1')", "turtle.onclick(fun, btn=1)", "turtle.increment_lineno(fun, btn=1)", "turtle.onrelease(fun, btn=1)", "turtle.pack_sequence(fun, btn=1)", "turtle.get_module_concrete_type(fun, btn=1)", "turtle._describe_option(fun, btn=1)", "turtle._lock_file(fun, btn=1)", "turtle.orthogonal_(fun, btn=1)", "turtle.infer_concrete_type_builder(fun, btn=1)", "turtle.DocFileTest(fun, btn=1)", "turtle.escape(fun, btn=1)", "turtle.ondrag(fun, btn=1)", "turtle.get_docstring(fun, btn=1)"], "turtle.onscreenclick(fun, btn=1, add=None)": ["onscreenclick", "turtle.onscreenclick(fun, btn=1, add=None)", "turtle.onscreenclick(fun, btn='1', add=None)", "turtle.onclick(fun, btn=1, add=None)", "turtle.increment_lineno(fun, btn=1, add=None)", "turtle.onrelease(fun, btn=1, add=None)", "turtle.pack_sequence(fun, btn=1, add=None)", "turtle.get_module_concrete_type(fun, btn=1, add=None)", "turtle._describe_option(fun, btn=1, add=None)", "turtle._lock_file(fun, btn=1, add=None)", "turtle.orthogonal_(fun, btn=1, add=None)", "turtle.infer_concrete_type_builder(fun, btn=1, add=None)", "turtle.DocFileTest(fun, btn=1, add=None)", "turtle.escape(fun, btn=1, add=None)", "turtle.ondrag(fun, btn=1, add=None)"], "turtle.ontimer(fun)": ["ontimer", "turtle._concat_datetime(fun)", "turtle.polytrim(fun)", "turtle.trimcoef(fun)", "turtle._construction_repr(fun)", "turtle._convert_other(fun)", "turtle._synthesize(fun)", "turtle.re_compile(fun)", "turtle.gather(fun)", "turtle.unique(fun)", "turtle.locate(fun)", "turtle.format_datetime(fun)", "turtle.concatenate(fun)", "turtle.convert_jit(fun)", "turtle._iter_filter(fun)"], "turtle.ontimer(fun, t=0)": ["ontimer", "turtle.ontimer(fun, t='0')", "turtle._concat_datetime(fun, t=0)", "turtle.polytrim(fun, t=0)", "turtle.trimcoef(fun, t=0)", "turtle._construction_repr(fun, t=0)", "turtle._convert_other(fun, t=0)", "turtle._synthesize(fun, t=0)", "turtle.re_compile(fun, t=0)", "turtle.gather(fun, t=0)", "turtle.unique(fun, t=0)", "turtle.locate(fun, t=0)", "turtle.format_datetime(fun, t=0)", "turtle.concatenate(fun, t=0)", "turtle.convert_jit(fun, t=0)"], "turtle.pen(**pendict)": ["pen", "turtle.pensize(**pendict)", "turtle.shape(**pendict)", "turtle.speed(**pendict)", "turtle.parse(**pendict)", "turtle.listen(**pendict)", "turtle.getnode(**pendict)", "turtle.new_compiler(**pendict)", "turtle.Comment(**pendict)", "turtle.askyesno(**pendict)", "turtle.get_cmap(**pendict)", "turtle.get_rank(**pendict)", "turtle.shapetransform(**pendict)", "turtle.token_hex(**pendict)", "turtle.get(**pendict)"], "turtle.pen(**pendict, pen=None)": ["pen", "turtle.pen(**pendict, pen=None)", "turtle.pensize(**pendict, pen=None)", "turtle.shape(**pendict, pen=None)", "turtle.speed(**pendict, pen=None)", "turtle.parse(**pendict, pen=None)", "turtle.listen(**pendict, pen=None)", "turtle.getnode(**pendict, pen=None)", "turtle.new_compiler(**pendict, pen=None)", "turtle.Comment(**pendict, pen=None)", "turtle.askyesno(**pendict, pen=None)", "turtle.get_cmap(**pendict, pen=None)", "turtle.get_rank(**pendict, pen=None)", "turtle.shapetransform(**pendict, pen=None)", "turtle.token_hex(**pendict, pen=None)"], "turtle.pencolor(*args)": ["pencolor", "turtle.pcolor(*args)", "turtle.color(*args)", "turtle.tripcolor(*args)", "turtle.bgcolor(*args)", "turtle.pcolormesh(*args)", "turtle.encode_long(*args)", "turtle.nolog(*args)", "turtle.colorbar(*args)", "turtle.polar(*args)", "turtle.colormaps(*args)", "turtle.fillcolor(*args)", "turtle.colormode(*args)", "turtle._encode(*args)", "turtle.encode_quopri(*args)"], "turtle.pendown()": ["pendown", "turtle.down()", "turtle.isdown()", "turtle.append()", "turtle.__pow__()", "turtle.pow()", "turtle.pen()", "turtle._pow()", "turtle.sigpending()", "turtle._append_doc()", "turtle.encode_long()", "turtle._open()", "turtle.send()", "turtle.rpow()", "turtle.done()"], "turtle.pensize()": ["pensize", "turtle.shapesize()", "turtle.screensize()", "turtle.pen()", "turtle.turtlesize()", "turtle.resizemode()", "turtle.speed()", "turtle.parse()", "turtle.get_world_size()", "turtle.stack_size()", "turtle.makeStringSeries()", "turtle.makePeriodSeries()", "turtle.getnode()", "turtle.run_module_suite()", "turtle.DocTestSuite()"], "turtle.pensize(width=None)": ["pensize", "turtle.pensize(width=None)", "turtle.shapesize(width=None)", "turtle.screensize(width=None)", "turtle.pen(width=None)", "turtle.turtlesize(width=None)", "turtle.resizemode(width=None)", "turtle.speed(width=None)", "turtle.parse(width=None)", "turtle.get_world_size(width=None)", "turtle.stack_size(width=None)", "turtle.makeStringSeries(width=None)", "turtle.makePeriodSeries(width=None)", "turtle.getnode(width=None)", "turtle.run_module_suite(width=None)"], "turtle.penup()": ["penup", "turtle.pen()", "turtle.openfp()", "turtle._open()", "turtle.openpty()", "turtle.open()", "turtle._cleanup()", "turtle.setup()", "turtle._setup()", "turtle._popen()", "turtle.popen()", "turtle.up()", "turtle.pu()", "turtle.genops()", "turtle._ntuple()"], "turtle.pos()": ["pos", "turtle.__pos__()", "turtle.__pow__()", "turtle.setpos()", "turtle.pow()", "turtle.psd()", "turtle._pow()", "turtle._cos()", "turtle.polysub()", "turtle._compose()", "turtle.apropos()", "turtle.poll()", "turtle.rpow()", "turtle.ones()", "turtle.prod()"], "turtle.position()": ["position", "turtle.setposition()", "turtle.partition()", "turtle.rpartition()", "turtle._processoptions()", "turtle.tostring()", "turtle.isposinf()", "turtle._siftdown()", "turtle.plotting()", "turtle.printoptions()", "turtle.argpartition()", "turtle._setoption()", "turtle._exception()", "turtle.exception()", "turtle.isbuiltin()"], "turtle.pu()": ["pu", "turtle.put()", "turtle.purge()", "turtle.penup()", "turtle.pause()", "turtle.input()", "turtle.ginput()", "turtle.lu()", "turtle.pm()", "turtle.putenv()", "turtle.PI()", "turtle._putenv()", "turtle.up()", "turtle.pd()", "turtle.flipud()"], "turtle.radians()": ["radians", "turtle.gradient()", "turtle.rands()", "turtle._alias()", "turtle._nanmedian()", "turtle.nanmedian()", "turtle.broadcast()", "turtle.readPlist()", "turtle.radviz()", "turtle.add_alias()", "turtle.raises()", "turtle.median()", "turtle._median()", "turtle.dis()", "turtle.read_uint2()"], "turtle.register_shape(name)": ["register_shape", "turtle.upsample_nearest(name)", "turtle.register_cmap(name)", "turtle._size_dispatcher(name)", "turtle._strip_dispatcher(name)", "turtle.register_at_fork(name)", "turtle._trace_dispatcher(name)", "turtle._ravel_dispatcher(name)", "turtle._trapz_dispatcher(name)", "turtle._stack_dispatcher(name)", "turtle._transpose_dispatcher(name)", "turtle._split_dispatcher(name)", "turtle._vander_dispatcher(name)", "turtle.upsample_bilinear(name)", "turtle.escape_encode(name)"], "turtle.register_shape(name, shape=None)": ["register_shape", "turtle.register_shape(name, shape=None)", "turtle.upsample_nearest(name, shape=None)", "turtle.register_cmap(name, shape=None)", "turtle._size_dispatcher(name, shape=None)", "turtle._strip_dispatcher(name, shape=None)", "turtle.register_at_fork(name, shape=None)", "turtle._trace_dispatcher(name, shape=None)", "turtle._ravel_dispatcher(name, shape=None)", "turtle._trapz_dispatcher(name, shape=None)", "turtle._stack_dispatcher(name, shape=None)", "turtle._transpose_dispatcher(name, shape=None)", "turtle._split_dispatcher(name, shape=None)", "turtle._vander_dispatcher(name, shape=None)", "turtle.upsample_bilinear(name, shape=None)"], "turtle.reset()": ["reset", "turtle.repeat()", "turtle.resize()", "turtle.sety()", "turtle._test()", "turtle.setx()", "turtle.resolve()", "turtle.set_dir()", "turtle.release()", "turtle.seth()", "turtle.reshape()", "turtle.setp()", "turtle.test()", "turtle.restore()", "turtle._nlargest()"], "turtle.resetscreen()": ["resetscreen", "turtle.getscreen()", "turtle._screen_docrevise()", "turtle.Screen()", "turtle.restore()", "turtle._create_tree()", "turtle.clearscreen()", "turtle.remove_tree()", "turtle.create_tree()", "turtle.resetlocale()", "turtle.reset()", "turtle.ParserCreate()", "turtle.setcbreak()", "turtle.rmtree()", "turtle.resetwarnings()"], "turtle.resizemode()": ["resizemode", "turtle.turtlesize()", "turtle.screensize()", "turtle.pensize()", "turtle.testmod()", "turtle.get_world_size()", "turtle.mode()", "turtle.iter_modules()", "turtle.colormode()", "turtle.shapesize()", "turtle.removeHandler()", "turtle.getnode()", "turtle.grid()", "turtle.getsitepackages()", "turtle.makePeriodFrame()"], "turtle.resizemode(rmode=None)": ["resizemode", "turtle.resizemode(rmode=None)", "turtle.turtlesize(rmode=None)", "turtle.screensize(rmode=None)", "turtle.pensize(rmode=None)", "turtle.testmod(rmode=None)", "turtle.get_world_size(rmode=None)", "turtle.mode(rmode=None)", "turtle.iter_modules(rmode=None)", "turtle.colormode(rmode=None)", "turtle.shapesize(rmode=None)", "turtle.removeHandler(rmode=None)", "turtle.getnode(rmode=None)", "turtle.grid(rmode=None)", "turtle.getsitepackages(rmode=None)"], "turtle.right(angle)": ["right", "turtle.eigh(angle)", "turtle.hermweight(angle)", "turtle.hermeweight(angle)", "turtle.right_shift(angle)", "turtle.write(angle)", "turtle.ihfft(angle)", "turtle.setcopyright(angle)", "turtle.gt(angle)", "turtle.rt(angle)", "turtle.legweight(angle)", "turtle.ht(angle)", "turtle.lagweight(angle)", "turtle.__gt__(angle)", "turtle._sum_rightmost(angle)"], "turtle.rt(angle)": ["rt", "turtle.sqrt(angle)", "turtle.rfft(angle)", "turtle.sort(angle)", "turtle._sqrt(angle)", "turtle.msort(angle)", "turtle.rfftn(angle)", "turtle.write(angle)", "turtle.truth(angle)", "turtle.rjust(angle)", "turtle.right(angle)", "turtle.abort(angle)", "turtle.rfft2(angle)", "turtle.reset(angle)", "turtle.start(angle)"], "turtle.screensize(bg=None)": ["screensize", "turtle.screensize(bg=None)", "turtle.pensize(bg=None)", "turtle.shapesize(bg=None)", "turtle.turtlesize(bg=None)", "turtle.resizemode(bg=None)", "turtle.scandir(bg=None)", "turtle.makeStringSeries(bg=None)", "turtle.ParserCreate(bg=None)", "turtle.current_task(bg=None)", "turtle.DocTestSuite(bg=None)", "turtle.removeHandler(bg=None)", "turtle.get_world_size(bg=None)", "turtle.close(bg=None)", "turtle.speed(bg=None)"], "turtle.screensize(canvheight=None, bg=None)": ["screensize", "turtle.screensize(canvheight=None, bg=None)", "turtle.pensize(canvheight=None, bg=None)", "turtle.shapesize(canvheight=None, bg=None)", "turtle.turtlesize(canvheight=None, bg=None)", "turtle.resizemode(canvheight=None, bg=None)", "turtle.scandir(canvheight=None, bg=None)", "turtle.makeStringSeries(canvheight=None, bg=None)", "turtle.ParserCreate(canvheight=None, bg=None)", "turtle.current_task(canvheight=None, bg=None)", "turtle.DocTestSuite(canvheight=None, bg=None)", "turtle.removeHandler(canvheight=None, bg=None)", "turtle.get_world_size(canvheight=None, bg=None)", "turtle.close(canvheight=None, bg=None)", "turtle.speed(canvheight=None, bg=None)"], "turtle.screensize(canvwidth=None, bg=None)": ["screensize", "turtle.screensize(canvwidth=None, bg=None)", "turtle.pensize(canvwidth=None, bg=None)", "turtle.shapesize(canvwidth=None, bg=None)", "turtle.turtlesize(canvwidth=None, bg=None)", "turtle.resizemode(canvwidth=None, bg=None)", "turtle.scandir(canvwidth=None, bg=None)", "turtle.makeStringSeries(canvwidth=None, bg=None)", "turtle.ParserCreate(canvwidth=None, bg=None)", "turtle.current_task(canvwidth=None, bg=None)", "turtle.DocTestSuite(canvwidth=None, bg=None)", "turtle.removeHandler(canvwidth=None, bg=None)", "turtle.get_world_size(canvwidth=None, bg=None)", "turtle.close(canvwidth=None, bg=None)", "turtle.speed(canvwidth=None, bg=None)"], "turtle.screensize(canvwidth=None, canvheight=None, bg=None)": ["screensize", "turtle.screensize(canvwidth=None, canvheight=None, bg=None)", "turtle.pensize(canvwidth=None, canvheight=None, bg=None)", "turtle.shapesize(canvwidth=None, canvheight=None, bg=None)", "turtle.turtlesize(canvwidth=None, canvheight=None, bg=None)", "turtle.resizemode(canvwidth=None, canvheight=None, bg=None)", "turtle.scandir(canvwidth=None, canvheight=None, bg=None)", "turtle.makeStringSeries(canvwidth=None, canvheight=None, bg=None)", "turtle.ParserCreate(canvwidth=None, canvheight=None, bg=None)", "turtle.current_task(canvwidth=None, canvheight=None, bg=None)", "turtle.DocTestSuite(canvwidth=None, canvheight=None, bg=None)", "turtle.removeHandler(canvwidth=None, canvheight=None, bg=None)", "turtle.get_world_size(canvwidth=None, canvheight=None, bg=None)", "turtle.close(canvwidth=None, canvheight=None, bg=None)", "turtle.speed(canvwidth=None, canvheight=None, bg=None)"], "turtle.seth(to_angle)": ["seth", "turtle.sety(to_angle)", "turtle.setx(to_angle)", "turtle.setp(to_angle)", "turtle.setup(to_angle)", "turtle.st(to_angle)", "turtle._setup(to_angle)", "turtle.reset(to_angle)", "turtle.ismethod(to_angle)", "turtle.sethelper(to_angle)", "turtle._setdef(to_angle)", "turtle.ispath(to_angle)", "turtle.setuid(to_angle)", "turtle._fspath(to_angle)", "turtle.search(to_angle)"], "turtle.setheading(to_angle)": ["setheading", "turtle.heading(to_angle)", "turtle._count_leading(to_angle)", "turtle.resetwarnings(to_angle)", "turtle.sigpending(to_angle)", "turtle.is_tracing(to_angle)", "turtle._extendLine(to_angle)", "turtle.hamming(to_angle)", "turtle.setegid(to_angle)", "turtle.seteuid(to_angle)", "turtle._getlang(to_angle)", "turtle.isstdin(to_angle)", "turtle.hanning(to_angle)", "turtle.getaddrinfo(to_angle)", "turtle._close_stdin(to_angle)"], "turtle.setpos(x)": ["setpos", "turtle.setposition(x)", "turtle.getpass(x)", "turtle.isposinf(x)", "turtle.sleep(x)", "turtle.strip(x)", "turtle.transpose(x)", "turtle.get_paths(x)", "turtle.setlocale(x)", "turtle.lstrip(x)", "turtle._ss(x)", "turtle.seterr(x)", "turtle.rstrip(x)", "turtle.stairs(x)", "turtle.subplots_adjust(x)"], "turtle.setpos(x, y=None)": ["setpos", "turtle.setpos(x, y=None)", "turtle.setposition(x, y=None)", "turtle.getpass(x, y=None)", "turtle.isposinf(x, y=None)", "turtle.sleep(x, y=None)", "turtle.strip(x, y=None)", "turtle.transpose(x, y=None)", "turtle.get_paths(x, y=None)", "turtle.setlocale(x, y=None)", "turtle.lstrip(x, y=None)", "turtle._ss(x, y=None)", "turtle.seterr(x, y=None)", "turtle.rstrip(x, y=None)", "turtle.stairs(x, y=None)"], "turtle.setposition(x, y=None)": ["setposition", "turtle.setposition(x, y=None)", "turtle.setpos(x, y=None)", "turtle.askquestion(x, y=None)", "turtle.tostring(x, y=None)", "turtle.isposinf(x, y=None)", "turtle.splitlines(x, y=None)", "turtle.translation(x, y=None)", "turtle.win_getpass(x, y=None)", "turtle.format_float_positional(x, y=None)", "turtle.get_instructions(x, y=None)", "turtle.tostringlist(x, y=None)", "turtle.split(x, y=None)", "turtle.ProcessingInstruction(x, y=None)", "turtle.fromstring(x, y=None)"], "turtle.settiltangle(angle)": ["settiltangle", "turtle.tiltangle(angle)", "turtle._single(angle)", "turtle.setlocale(angle)", "turtle._getlang(angle)", "turtle.setitem(angle)", "turtle.istitle(angle)", "turtle.__setitem__(angle)", "turtle.resetlocale(angle)", "turtle.suptitle(angle)", "turtle.settrace(angle)", "turtle.angle(angle)", "turtle.title(angle)", "turtle._set_sentinel(angle)", "turtle.set_timezone(angle)"], "turtle.setundobuffer(size)": ["setundobuffer", "turtle.undobufferentries(size)", "turtle.setbufsize(size)", "turtle._frombuffer(size)", "turtle.readbuffer_encode(size)", "turtle.c_buffer(size)", "turtle._is_sunder(size)", "turtle.setdiff1d(size)", "turtle._setdef(size)", "turtle.setuid(size)", "turtle.seterr(size)", "turtle.getbufsize(size)", "turtle.getdecoder(size)", "turtle.get_buffer(size)", "turtle.getencoder(size)"], "turtle.setup()": ["setup", "turtle.seterr()", "turtle._setup()", "turtle.ptp()", "turtle._std()", "turtle.std()", "turtle.spy()", "turtle._sum()", "turtle.sum()", "turtle.stem()", "turtle.sort()", "turtle.sleep()", "turtle._ptp_dispatcher()", "turtle.phase_spectrum()", "turtle.angle_spectrum()"], "turtle.setup(height=_CFG\"height\")": [], "turtle.setup(startx=_CFG\"leftright\")": [], "turtle.setup(width=_CFG\"width\")": [], "turtle.setup(width=_CFG\"width\", height=_CFG\"height\")": [], "turtle.setworldcoordinates(llx, lly, urx, ury)": ["setworldcoordinates", "turtle.setLogRecordFactory(llx, lly, urx, ury)", "turtle.parallel_coordinates(llx, lly, urx, ury)", "turtle.getcoroutinestate(llx, lly, urx, ury)", "turtle.getsourcelines(llx, lly, urx, ury)", "turtle.setcontext(llx, lly, urx, ury)", "turtle.setpriority(llx, lly, urx, ury)", "turtle.getLogRecordFactory(llx, lly, urx, ury)", "turtle.ParserCreate(llx, lly, urx, ury)", "turtle.setcopyright(llx, lly, urx, ury)", "turtle.searchsorted(llx, lly, urx, ury)", "turtle.getlines(llx, lly, urx, ury)", "turtle.resetwarnings(llx, lly, urx, ury)", "turtle.rfloordiv(llx, lly, urx, ury)", "turtle._get_ordinal_range(llx, lly, urx, ury)"], "turtle.setx(x)": ["setx", "turtle.sety(x)", "turtle.seth(x)", "turtle.setp(x)", "turtle.savetxt(x)", "turtle.setup(x)", "turtle.st(x)", "turtle._setup(x)", "turtle.reset(x)", "turtle.setxor1d(x)", "turtle.ishex(x)", "turtle.setxattr(x)", "turtle._setdef(x)", "turtle.setuid(x)", "turtle.setpos(x)"], "turtle.sety(y)": ["sety", "turtle.setx(y)", "turtle.seth(y)", "turtle.setp(y)", "turtle.setup(y)", "turtle.st(y)", "turtle._setup(y)", "turtle.reset(y)", "turtle._setdef(y)", "turtle.isatty(y)", "turtle.setuid(y)", "turtle.setpos(y)", "turtle.assert_(y)", "turtle.seterr(y)", "turtle.setraw(y)"], "turtle.shape()": ["shape", "turtle.reshape()", "turtle.addshape()", "turtle._escape()", "turtle.escape()", "turtle.getshapes()", "turtle.shapesize()", "turtle.save()", "turtle._save()", "turtle.swapaxes()", "turtle.upsample()", "turtle.unescape()", "turtle.spawnvpe()", "turtle.swapcase()", "turtle.spawnlpe()"], "turtle.shape(name=None)": ["shape", "turtle.shape(name=None)", "turtle.reshape(name=None)", "turtle.addshape(name=None)", "turtle._escape(name=None)", "turtle.escape(name=None)", "turtle.getshapes(name=None)", "turtle.shapesize(name=None)", "turtle.save(name=None)", "turtle._save(name=None)", "turtle.swapaxes(name=None)", "turtle.upsample(name=None)", "turtle.unescape(name=None)", "turtle.spawnvpe(name=None)", "turtle.swapcase(name=None)"], "turtle.shapesize()": ["shapesize", "turtle.pensize()", "turtle.shape()", "turtle.screensize()", "turtle.speed()", "turtle.turtlesize()", "turtle.resizemode()", "turtle.shapetransform()", "turtle.makePeriodSeries()", "turtle.get_world_size()", "turtle.makePeriodFrame()", "turtle.make_msgid()", "turtle.stack_size()", "turtle.makeFloatSeries()", "turtle.makeStringSeries()"], "turtle.shapesize(outline=None)": ["shapesize", "turtle.shapesize(outline=None)", "turtle.pensize(outline=None)", "turtle.shape(outline=None)", "turtle.screensize(outline=None)", "turtle.speed(outline=None)", "turtle.turtlesize(outline=None)", "turtle.resizemode(outline=None)", "turtle.shapetransform(outline=None)", "turtle.makePeriodSeries(outline=None)", "turtle.get_world_size(outline=None)", "turtle.makePeriodFrame(outline=None)", "turtle.make_msgid(outline=None)", "turtle.stack_size(outline=None)", "turtle.makeFloatSeries(outline=None)"], "turtle.shapesize(stretch_len=None)": ["shapesize", "turtle.shapesize(stretch_len=None)", "turtle.pensize(stretch_len=None)", "turtle.shape(stretch_len=None)", "turtle.screensize(stretch_len=None)", "turtle.speed(stretch_len=None)", "turtle.turtlesize(stretch_len=None)", "turtle.resizemode(stretch_len=None)", "turtle.shapetransform(stretch_len=None)", "turtle.makePeriodSeries(stretch_len=None)", "turtle.get_world_size(stretch_len=None)", "turtle.makePeriodFrame(stretch_len=None)", "turtle.make_msgid(stretch_len=None)", "turtle.stack_size(stretch_len=None)", "turtle.makeFloatSeries(stretch_len=None)"], "turtle.shapesize(stretch_wid=None)": ["shapesize", "turtle.shapesize(stretch_wid=None)", "turtle.pensize(stretch_wid=None)", "turtle.shape(stretch_wid=None)", "turtle.screensize(stretch_wid=None)", "turtle.speed(stretch_wid=None)", "turtle.turtlesize(stretch_wid=None)", "turtle.resizemode(stretch_wid=None)", "turtle.shapetransform(stretch_wid=None)", "turtle.makePeriodSeries(stretch_wid=None)", "turtle.get_world_size(stretch_wid=None)", "turtle.makePeriodFrame(stretch_wid=None)", "turtle.make_msgid(stretch_wid=None)", "turtle.stack_size(stretch_wid=None)", "turtle.makeFloatSeries(stretch_wid=None)"], "turtle.shapetransform()": ["shapetransform", "turtle.shearfactor()", "turtle.shape()", "turtle.shapesize()", "turtle.seterr()", "turtle.makePeriodFrame()", "turtle.makeStringSeries()", "turtle.get_rank()", "turtle.set_trace()", "turtle.get_worker_info()", "turtle.makePeriodSeries()", "turtle._sys_version()", "turtle.tracer()", "turtle.scandir()", "turtle.getnode()"], "turtle.shapetransform(t11=None)": ["shapetransform", "turtle.shapetransform(t11=None)", "turtle.shearfactor(t11=None)", "turtle.shape(t11=None)", "turtle.shapesize(t11=None)", "turtle.seterr(t11=None)", "turtle.makePeriodFrame(t11=None)", "turtle.makeStringSeries(t11=None)", "turtle.get_rank(t11=None)", "turtle.set_trace(t11=None)", "turtle.get_worker_info(t11=None)", "turtle.makePeriodSeries(t11=None)", "turtle._sys_version(t11=None)", "turtle.tracer(t11=None)", "turtle.scandir(t11=None)"], "turtle.shapetransform(t11=None, t12=None)": ["shapetransform", "turtle.shapetransform(t11=None, t12=None)", "turtle.shearfactor(t11=None, t12=None)", "turtle.shape(t11=None, t12=None)", "turtle.shapesize(t11=None, t12=None)", "turtle.seterr(t11=None, t12=None)", "turtle.makePeriodFrame(t11=None, t12=None)", "turtle.makeStringSeries(t11=None, t12=None)", "turtle.get_rank(t11=None, t12=None)", "turtle.set_trace(t11=None, t12=None)", "turtle.get_worker_info(t11=None, t12=None)", "turtle.makePeriodSeries(t11=None, t12=None)", "turtle._sys_version(t11=None, t12=None)", "turtle.tracer(t11=None, t12=None)", "turtle.scandir(t11=None, t12=None)"], "turtle.shapetransform(t11=None, t21=None)": ["shapetransform", "turtle.shapetransform(t11=None, t21=None)", "turtle.shearfactor(t11=None, t21=None)", "turtle.shape(t11=None, t21=None)", "turtle.shapesize(t11=None, t21=None)", "turtle.seterr(t11=None, t21=None)", "turtle.makePeriodFrame(t11=None, t21=None)", "turtle.makeStringSeries(t11=None, t21=None)", "turtle.get_rank(t11=None, t21=None)", "turtle.set_trace(t11=None, t21=None)", "turtle.get_worker_info(t11=None, t21=None)", "turtle.makePeriodSeries(t11=None, t21=None)", "turtle._sys_version(t11=None, t21=None)", "turtle.tracer(t11=None, t21=None)", "turtle.scandir(t11=None, t21=None)"], "turtle.shapetransform(t11=None, t22=None)": ["shapetransform", "turtle.shapetransform(t11=None, t22=None)", "turtle.shearfactor(t11=None, t22=None)", "turtle.shape(t11=None, t22=None)", "turtle.shapesize(t11=None, t22=None)", "turtle.seterr(t11=None, t22=None)", "turtle.makePeriodFrame(t11=None, t22=None)", "turtle.makeStringSeries(t11=None, t22=None)", "turtle.get_rank(t11=None, t22=None)", "turtle.set_trace(t11=None, t22=None)", "turtle.get_worker_info(t11=None, t22=None)", "turtle.makePeriodSeries(t11=None, t22=None)", "turtle._sys_version(t11=None, t22=None)", "turtle.tracer(t11=None, t22=None)", "turtle.scandir(t11=None, t22=None)"], "turtle.shapetransform(t12=None)": ["shapetransform", "turtle.shapetransform(t12=None)", "turtle.shearfactor(t12=None)", "turtle.shape(t12=None)", "turtle.shapesize(t12=None)", "turtle.seterr(t12=None)", "turtle.makePeriodFrame(t12=None)", "turtle.makeStringSeries(t12=None)", "turtle.get_rank(t12=None)", "turtle.set_trace(t12=None)", "turtle.get_worker_info(t12=None)", "turtle.makePeriodSeries(t12=None)", "turtle._sys_version(t12=None)", "turtle.tracer(t12=None)", "turtle.scandir(t12=None)"], "turtle.shapetransform(t12=None, t22=None)": ["shapetransform", "turtle.shapetransform(t12=None, t22=None)", "turtle.shearfactor(t12=None, t22=None)", "turtle.shape(t12=None, t22=None)", "turtle.shapesize(t12=None, t22=None)", "turtle.seterr(t12=None, t22=None)", "turtle.makePeriodFrame(t12=None, t22=None)", "turtle.makeStringSeries(t12=None, t22=None)", "turtle.get_rank(t12=None, t22=None)", "turtle.set_trace(t12=None, t22=None)", "turtle.get_worker_info(t12=None, t22=None)", "turtle.makePeriodSeries(t12=None, t22=None)", "turtle._sys_version(t12=None, t22=None)", "turtle.tracer(t12=None, t22=None)", "turtle.scandir(t12=None, t22=None)"], "turtle.shapetransform(t21=None)": ["shapetransform", "turtle.shapetransform(t21=None)", "turtle.shearfactor(t21=None)", "turtle.shape(t21=None)", "turtle.shapesize(t21=None)", "turtle.seterr(t21=None)", "turtle.makePeriodFrame(t21=None)", "turtle.makeStringSeries(t21=None)", "turtle.get_rank(t21=None)", "turtle.set_trace(t21=None)", "turtle.get_worker_info(t21=None)", "turtle.makePeriodSeries(t21=None)", "turtle._sys_version(t21=None)", "turtle.tracer(t21=None)", "turtle.scandir(t21=None)"], "turtle.shapetransform(t22=None)": ["shapetransform", "turtle.shapetransform(t22=None)", "turtle.shearfactor(t22=None)", "turtle.shape(t22=None)", "turtle.shapesize(t22=None)", "turtle.seterr(t22=None)", "turtle.makePeriodFrame(t22=None)", "turtle.makeStringSeries(t22=None)", "turtle.get_rank(t22=None)", "turtle.set_trace(t22=None)", "turtle.get_worker_info(t22=None)", "turtle.makePeriodSeries(t22=None)", "turtle._sys_version(t22=None)", "turtle.tracer(t22=None)", "turtle.scandir(t22=None)"], "turtle.shearfactor(shear=None)": ["shearfactor", "turtle.shearfactor(shear=None)", "turtle.showerror(shear=None)", "turtle.shapetransform(shear=None)", "turtle.interact(shear=None)", "turtle.set_trace(shear=None)", "turtle.seterr(shear=None)", "turtle.tracer(shear=None)", "turtle.ParserCreate(shear=None)", "turtle.extract_stack(shear=None)", "turtle.showinfo(shear=None)", "turtle.log_to_stderr(shear=None)", "turtle.token_hex(shear=None)", "turtle.getLogger(shear=None)", "turtle._perfcheck(shear=None)"], "turtle.showturtle()": ["showturtle", "turtle._shorten()", "turtle.turtles()", "turtle.shorten()", "turtle.hideturtle()", "turtle._write_short()", "turtle._write_ushort()", "turtle._tuple_str()", "turtle.getturtle()", "turtle.source()", "turtle.turtlesize()", "turtle._isnotsuite()", "turtle.astuple()", "turtle.istitle()", "turtle.source_hash()"], "turtle.speed()": ["speed", "turtle.shape()", "turtle.shapesize()", "turtle.seterr()", "turtle.pensize()", "turtle.pen()", "turtle.read_json()", "turtle.set_trace()", "turtle._perfcheck()", "turtle.close()", "turtle.resizemode()", "turtle.screensize()", "turtle.parse()", "turtle.getTimeSeriesData()", "turtle.listen()"], "turtle.speed(speed=None)": ["speed", "turtle.speed(speed=None)", "turtle.shape(speed=None)", "turtle.shapesize(speed=None)", "turtle.seterr(speed=None)", "turtle.pensize(speed=None)", "turtle.pen(speed=None)", "turtle.read_json(speed=None)", "turtle.set_trace(speed=None)", "turtle._perfcheck(speed=None)", "turtle.close(speed=None)", "turtle.resizemode(speed=None)", "turtle.screensize(speed=None)", "turtle.parse(speed=None)", "turtle.getTimeSeriesData(speed=None)"], "turtle.st()": ["st", "turtle.str()", "turtle._std()", "turtle.std()", "turtle.__str__()", "turtle._str()", "turtle.stn()", "turtle.sety()", "turtle.cast()", "turtle._test()", "turtle.sqrt()", "turtle.setx()", "turtle.step()", "turtle.stop()", "turtle._cast()"], "turtle.stamp()": ["stamp", "turtle.stream()", "turtle.clearstamp()", "turtle.streamplot()", "turtle.step()", "turtle.stop()", "turtle.mkstemp()", "turtle._stat()", "turtle.setp()", "turtle.stem()", "turtle.stat()", "turtle.upsample()", "turtle.clearstamps()", "turtle.trapz()", "turtle.stack()"], "turtle.textinput(title, prompt)": ["textinput", "turtle.input(title, prompt)", "turtle.ginput(title, prompt)", "turtle.textdomain(title, prompt)", "turtle.text(title, prompt)", "turtle._exit(title, prompt)", "turtle.exit(title, prompt)", "turtle.extend_path(title, prompt)", "turtle.numinput(title, prompt)", "turtle.print_exception(title, prompt)", "turtle.getexception(title, prompt)", "turtle._clone_inputs(title, prompt)", "turtle.nextmonth(title, prompt)", "turtle.get_dtext(title, prompt)", "turtle.get_ident(title, prompt)"], "turtle.tilt(angle)": ["tilt", "turtle.tile(angle)", "turtle.tril(angle)", "turtle.triplot(angle)", "turtle.__lt__(angle)", "turtle.title(angle)", "turtle.lt(angle)", "turtle.tiltangle(angle)", "turtle.filter(angle)", "turtle._filter(angle)", "turtle._triple(angle)", "turtle.timeit(angle)", "turtle.iat(angle)", "turtle.itn(angle)", "turtle.tri(angle)"], "turtle.tiltangle(angle=None)": ["tiltangle", "turtle.tiltangle(angle=None)", "turtle.table(angle=None)", "turtle.getsitepackages(angle=None)", "turtle.get_locales(angle=None)", "turtle.localtime(angle=None)", "turtle.getLogger(angle=None)", "turtle.set_trace(angle=None)", "turtle.twinx(angle=None)", "turtle.generate_range(angle=None)", "turtle.twiny(angle=None)", "turtle.textdomain(angle=None)", "turtle.turtlesize(angle=None)", "turtle.thetagrids(angle=None)", "turtle.makeStringSeries(angle=None)"], "turtle.title(titlestring)": ["title", "turtle.tile(titlestring)", "turtle.istitle(titlestring)", "turtle.suptitle(titlestring)", "turtle._triple(titlestring)", "turtle.tiltangle(titlestring)", "turtle.tilt(titlestring)", "turtle.getfile(titlestring)", "turtle.turtles(titlestring)", "turtle.__getitem__(titlestring)", "turtle.setitem(titlestring)", "turtle.getitem(titlestring)", "turtle.__setitem__(titlestring)", "turtle.tril(titlestring)", "turtle._time(titlestring)"], "turtle.towards(x)": ["towards", "turtle.loads(x)", "turtle.stairs(x)", "turtle.thetagrids(x)", "turtle.warn(x)", "turtle.load(x)", "turtle._warn(x)", "turtle.capwords(x)", "turtle.broadcast(x)", "turtle.barbs(x)", "turtle.iterparse(x)", "turtle.parse(x)", "turtle.locator_params(x)", "turtle.fromarrays(x)", "turtle.setpos(x)"], "turtle.towards(x, y=None)": ["towards", "turtle.towards(x, y=None)", "turtle.loads(x, y=None)", "turtle.stairs(x, y=None)", "turtle.thetagrids(x, y=None)", "turtle.warn(x, y=None)", "turtle.load(x, y=None)", "turtle._warn(x, y=None)", "turtle.capwords(x, y=None)", "turtle.broadcast(x, y=None)", "turtle.barbs(x, y=None)", "turtle.iterparse(x, y=None)", "turtle.parse(x, y=None)", "turtle.locator_params(x, y=None)", "turtle.fromarrays(x, y=None)"], "turtle.tracer()": ["tracer", "turtle.set_trace()", "turtle.interact()", "turtle.table()", "turtle.seterr()", "turtle.askretrycancel()", "turtle.shearfactor()", "turtle.Tcl()", "turtle.colorbar()", "turtle.get_rank()", "turtle.extract_stack()", "turtle.token_urlsafe()", "turtle.removeHandler()", "turtle.getLogger()", "turtle.ndpointer()"], "turtle.tracer(delay=None)": ["tracer", "turtle.tracer(delay=None)", "turtle.set_trace(delay=None)", "turtle.interact(delay=None)", "turtle.table(delay=None)", "turtle.seterr(delay=None)", "turtle.askretrycancel(delay=None)", "turtle.shearfactor(delay=None)", "turtle.Tcl(delay=None)", "turtle.colorbar(delay=None)", "turtle.get_rank(delay=None)", "turtle.extract_stack(delay=None)", "turtle.token_urlsafe(delay=None)", "turtle.removeHandler(delay=None)", "turtle.getLogger(delay=None)"], "turtle.tracer(n=None)": ["tracer", "turtle.tracer(n=None)", "turtle.set_trace(n=None)", "turtle.interact(n=None)", "turtle.table(n=None)", "turtle.seterr(n=None)", "turtle.askretrycancel(n=None)", "turtle.shearfactor(n=None)", "turtle.Tcl(n=None)", "turtle.colorbar(n=None)", "turtle.get_rank(n=None)", "turtle.extract_stack(n=None)", "turtle.token_urlsafe(n=None)", "turtle.removeHandler(n=None)", "turtle.getLogger(n=None)"], "turtle.tracer(n=None, delay=None)": ["tracer", "turtle.tracer(n=None, delay=None)", "turtle.set_trace(n=None, delay=None)", "turtle.interact(n=None, delay=None)", "turtle.table(n=None, delay=None)", "turtle.seterr(n=None, delay=None)", "turtle.askretrycancel(n=None, delay=None)", "turtle.shearfactor(n=None, delay=None)", "turtle.Tcl(n=None, delay=None)", "turtle.colorbar(n=None, delay=None)", "turtle.get_rank(n=None, delay=None)", "turtle.extract_stack(n=None, delay=None)", "turtle.token_urlsafe(n=None, delay=None)", "turtle.removeHandler(n=None, delay=None)", "turtle.getLogger(n=None, delay=None)"], "turtle.turtles()": ["turtles", "turtle.turtlesize()", "turtle.getturtle()", "turtle.showturtle()", "turtle.hideturtle()", "turtle.title()", "turtle._tables()", "turtle._ntuple()", "turtle.is_future()", "turtle._triple()", "turtle._tuple_str()", "turtle._tensor_str()", "turtle.test_au()", "turtle.urlopen()", "turtle.astuple()"], "turtle.turtlesize(outline=None)": ["turtlesize", "turtle.turtlesize(outline=None)", "turtle.resizemode(outline=None)", "turtle.screensize(outline=None)", "turtle.pensize(outline=None)", "turtle.shapesize(outline=None)", "turtle.token_urlsafe(outline=None)", "turtle.run_module_suite(outline=None)", "turtle.DocTestSuite(outline=None)", "turtle.test(outline=None)", "turtle.tiltangle(outline=None)", "turtle.get_world_size(outline=None)", "turtle.close(outline=None)", "turtle.exit_dual_level(outline=None)", "turtle.stack_size(outline=None)"], "turtle.undo()": ["undo", "turtle.rundocs()", "turtle.urandom()", "turtle._urandom()", "turtle.round()", "turtle.round_()", "turtle.unused()", "turtle.unfold()", "turtle.around()", "turtle.__and__()", "turtle.__not__()", "turtle.run()", "turtle.not_()", "turtle.doc()", "turtle.and_()"], "turtle.undobufferentries()": ["undobufferentries", "turtle.setundobuffer()", "turtle.get_buffer()", "turtle._zseries_der()", "turtle.once_differentiable()", "turtle.create_string_buffer()", "turtle._is_dunder()", "turtle.nanpercentile()", "turtle.create_unicode_buffer()", "turtle._engine_builder()", "turtle.untokenize()", "turtle.indentsize()", "turtle.percentile()", "turtle._frombuffer()", "turtle.sorted_list_difference()"], "turtle.update()": ["update", "turtle.update_bn()", "turtle.updatecache()", "turtle.cudart()", "turtle.parsedate()", "turtle.update_names()", "turtle.update_wrapper()", "turtle._cuda()", "turtle.suptitle()", "turtle.quantile()", "turtle.du_parse()", "turtle._cuda_tag()", "turtle.upsample()", "turtle.get_data()", "turtle.template()"], "turtle.width()": ["width", "turtle.who()", "turtle.dot()", "turtle.init()", "turtle.grid()", "turtle.twinx()", "turtle.distb()", "turtle.uuid1()", "turtle.input()", "turtle.twiny()", "turtle.rgrids()", "turtle.listen()", "turtle.findobj()", "turtle.getPeriodData()", "turtle.mkdtemp()"], "turtle.window_height()": ["window_height", "turtle.window_width()", "turtle._rolling_window()", "turtle.median_high()", "turtle.get_info()", "turtle.sliding_window_view()", "turtle.chebweight()", "turtle._get_debug_info()", "turtle._windll_getnode()", "turtle._get_indent()", "turtle.hermweight()", "turtle._sliding_window_view_dispatcher()", "turtle._get_gid()", "turtle.get_worker_info()", "turtle.hermeweight()"], "turtle.write(arg, 8, \"normal\"))": [], "turtle.write(arg, 8, \"normal\"), align=\"left\")": [], "turtle.write(arg, 8, \"normal\"), align=\"left\", font=(\"Arial\")": [], "turtle.write(arg, 8, \"normal\"), font=(\"Arial\")": [], "turtle.write(arg, 8, \"normal\"), move=False)": [], "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\")": [], "turtle.write(arg, 8, \"normal\"), move=False, align=\"left\", font=(\"Arial\")": [], "turtle.write(arg, 8, \"normal\"), move=False, font=(\"Arial\")": [], "turtle.write_docstringdict()": ["write_docstringdict", "turtle._write_string()", "turtle.read_docstrings()", "turtle.get_docstring()", "turtle._extend_docstrings()", "turtle._declstringlit_match()", "turtle._write_long()", "turtle._write_short()", "turtle._write_ulong()", "turtle.register_writer()", "turtle.tostringlist()", "turtle._write_atomic()", "turtle._needs_add_docstring()", "turtle._write_ushort()", "turtle.with_csv_dialect()"], "turtle.write_docstringdict(filename=\"turtle_docstringdict\")": ["write_docstringdict", "turtle.write_docstringdict(filename=20)", "turtle._write_string(filename='turtle_docstringdict')", "turtle.read_docstrings(filename='turtle_docstringdict')", "turtle.get_docstring(filename='turtle_docstringdict')", "turtle._extend_docstrings(filename='turtle_docstringdict')", "turtle._declstringlit_match(filename='turtle_docstringdict')", "turtle._write_long(filename='turtle_docstringdict')", "turtle._write_short(filename='turtle_docstringdict')", "turtle._write_ulong(filename='turtle_docstringdict')", "turtle.register_writer(filename='turtle_docstringdict')", "turtle.tostringlist(filename='turtle_docstringdict')", "turtle._write_atomic(filename='turtle_docstringdict')", "turtle._needs_add_docstring(filename='turtle_docstringdict')", "turtle._write_ushort(filename='turtle_docstringdict')"], "turtle.xcor()": ["xcor", "turtle.xcorr()", "turtle.xor()", "turtle.__xor__()", "turtle.ycor()", "turtle.rxor()", "turtle.__ixor__()", "turtle.ixor()", "turtle.or_()", "turtle.__or__()", "turtle.acorr()", "turtle.color()", "turtle._export()", "turtle.copper()", "turtle.cohere()"], "turtle.ycor()": ["ycor", "turtle.xcor()", "turtle.or_()", "turtle.xcorr()", "turtle.__or__()", "turtle.acorr()", "turtle.color()", "turtle.copper()", "turtle.cohere()", "turtle.cycler()", "turtle._coerce()", "turtle.pcolor()", "turtle.xor()", "turtle.cov()", "turtle.ror_()"], "type(name, bases, dict)": ["type", "_type(name, bases, dict)", "_is_type(name, bases, dict)", "NewType(name, bases, dict)", "ttypager(name, bases, dict)", "issctype(name, bases, dict)", "_realType(name, bases, dict)", "typename(name, bases, dict)", "_is_dtype(name, bases, dict)", "add_type(name, bases, dict)", "all_types(name, bases, dict)", "_type_repr(name, bases, dict)", "splittype(name, bases, dict)", "get_dtype(name, bases, dict)", "_eval_type(name, bases, dict)"], "type(object)": ["type", "_type(object)", "_is_type(object)", "NewType(object)", "ttypager(object)", "issctype(object)", "_realType(object)", "typename(object)", "_is_dtype(object)", "add_type(object)", "all_types(object)", "_type_repr(object)", "splittype(object)", "get_dtype(object)", "_eval_type(object)"], "types.AsyncGeneratorType": ["types.AsyncGeneratorType"], "types.BuiltinFunctionType": ["types.BuiltinFunctionType"], "types.BuiltinMethodType": ["types.BuiltinMethodType"], "types.ClassMethodDescriptorType": ["types.ClassMethodDescriptorType"], "types.DynamicClassAttribute()": ["DynamicClassAttribute"], "types.DynamicClassAttribute(doc=None)": ["DynamicClassAttribute", "types.DynamicClassAttribute(doc=None)"], "types.DynamicClassAttribute(fget=None)": ["DynamicClassAttribute", "types.DynamicClassAttribute(fget=None)"], "types.DynamicClassAttribute(fset=None)": ["DynamicClassAttribute", "types.DynamicClassAttribute(fset=None)"], "types.DynamicClassAttribute(fset=None, doc=None)": ["DynamicClassAttribute", "types.DynamicClassAttribute(fset=None, doc=None)"], "types.FunctionType": ["types.FunctionType"], "types.GeneratorType": ["types.GeneratorType"], "types.GetSetDescriptorType": ["types.GetSetDescriptorType"], "types.LambdaType": ["types.LambdaType"], "types.MappingProxyType(mapping)": ["MappingProxyType"], "types.MemberDescriptorType": ["types.MemberDescriptorType"], "types.MethodDescriptorType": ["types.MethodDescriptorType"], "types.MethodType": ["types.MethodType"], "types.MethodWrapperType": ["types.MethodWrapperType"], "types.ModuleType(name)": ["ModuleType"], "types.ModuleType(name, doc=None)": ["ModuleType", "types.ModuleType(name, doc=None)"], "types.SimpleNamespace": ["types.SimpleNamespace"], "types.WrapperDescriptorType": ["types.WrapperDescriptorType"], "types.coroutine(gen_func)": ["coroutine", "types.iscoroutine(gen_func)", "types.isroutine(gen_func)", "types._format_coroutine(gen_func)", "types.getcoroutinestate(gen_func)", "types.getcoroutinelocals(gen_func)", "types.iscoroutinefunction(gen_func)", "types._construction_repr(gen_func)", "types.__contains__(gen_func)", "types.construction_error(gen_func)", "types.decons_group_index(gen_func)", "types._run_code(gen_func)", "types.contains(gen_func)", "types.corrcoef(gen_func)", "types._comment_line(gen_func)"], "types.new_class(name)": ["new_class", "types.prepare_class(name)", "types._nest_class(name)", "types.loads(name)", "types.quote_plus(name)", "types._cross_dispatcher(name)", "types.ylabel(name)", "types.add_charset(name)", "types.make_sparse(name)", "types._optimize_charset(name)", "types.xlabel(name)", "types._asarray_with_like(name)", "types.DocTestSuite(name)", "types.all_to_all_single(name)", "types._clip_dep_invoke_with_casting(name)"], "types.new_class(name, bases=())": ["new_class", "types.prepare_class(name, bases=())", "types._nest_class(name, bases=())", "types.loads(name, bases=())", "types.quote_plus(name, bases=())", "types._cross_dispatcher(name, bases=())", "types.ylabel(name, bases=())", "types.add_charset(name, bases=())", "types.make_sparse(name, bases=())", "types._optimize_charset(name, bases=())", "types.xlabel(name, bases=())", "types._asarray_with_like(name, bases=())", "types.DocTestSuite(name, bases=())", "types.all_to_all_single(name, bases=())", "types._clip_dep_invoke_with_casting(name, bases=())"], "types.new_class(name, bases=(), kwds=None)": ["new_class", "types.new_class(name, bases=(), kwds=None)", "types.prepare_class(name, bases=(), kwds=None)", "types._nest_class(name, bases=(), kwds=None)", "types.loads(name, bases=(), kwds=None)", "types.quote_plus(name, bases=(), kwds=None)", "types._cross_dispatcher(name, bases=(), kwds=None)", "types.ylabel(name, bases=(), kwds=None)", "types.add_charset(name, bases=(), kwds=None)", "types.make_sparse(name, bases=(), kwds=None)", "types._optimize_charset(name, bases=(), kwds=None)", "types.xlabel(name, bases=(), kwds=None)", "types._asarray_with_like(name, bases=(), kwds=None)", "types.DocTestSuite(name, bases=(), kwds=None)", "types.all_to_all_single(name, bases=(), kwds=None)"], "types.new_class(name, bases=(), kwds=None, exec_body=None)": ["new_class", "types.new_class(name, bases=(), kwds=None, exec_body=None)", "types.prepare_class(name, bases=(), kwds=None, exec_body=None)", "types._nest_class(name, bases=(), kwds=None, exec_body=None)", "types.loads(name, bases=(), kwds=None, exec_body=None)", "types.quote_plus(name, bases=(), kwds=None, exec_body=None)", "types._cross_dispatcher(name, bases=(), kwds=None, exec_body=None)", "types.ylabel(name, bases=(), kwds=None, exec_body=None)", "types.add_charset(name, bases=(), kwds=None, exec_body=None)", "types.make_sparse(name, bases=(), kwds=None, exec_body=None)", "types._optimize_charset(name, bases=(), kwds=None, exec_body=None)", "types.xlabel(name, bases=(), kwds=None, exec_body=None)", "types._asarray_with_like(name, bases=(), kwds=None, exec_body=None)", "types.DocTestSuite(name, bases=(), kwds=None, exec_body=None)", "types.all_to_all_single(name, bases=(), kwds=None, exec_body=None)"], "types.new_class(name, kwds=None)": ["new_class", "types.new_class(name, kwds=None)", "types.prepare_class(name, kwds=None)", "types._nest_class(name, kwds=None)", "types.loads(name, kwds=None)", "types.quote_plus(name, kwds=None)", "types._cross_dispatcher(name, kwds=None)", "types.ylabel(name, kwds=None)", "types.add_charset(name, kwds=None)", "types.make_sparse(name, kwds=None)", "types._optimize_charset(name, kwds=None)", "types.xlabel(name, kwds=None)", "types._asarray_with_like(name, kwds=None)", "types.DocTestSuite(name, kwds=None)", "types.all_to_all_single(name, kwds=None)"], "types.new_class(name, kwds=None, exec_body=None)": ["new_class", "types.new_class(name, kwds=None, exec_body=None)", "types.prepare_class(name, kwds=None, exec_body=None)", "types._nest_class(name, kwds=None, exec_body=None)", "types.loads(name, kwds=None, exec_body=None)", "types.quote_plus(name, kwds=None, exec_body=None)", "types._cross_dispatcher(name, kwds=None, exec_body=None)", "types.ylabel(name, kwds=None, exec_body=None)", "types.add_charset(name, kwds=None, exec_body=None)", "types.make_sparse(name, kwds=None, exec_body=None)", "types._optimize_charset(name, kwds=None, exec_body=None)", "types.xlabel(name, kwds=None, exec_body=None)", "types._asarray_with_like(name, kwds=None, exec_body=None)", "types.DocTestSuite(name, kwds=None, exec_body=None)", "types.all_to_all_single(name, kwds=None, exec_body=None)"], "types.prepare_class(name, bases=())": ["prepare_class", "types.new_class(name, bases=())", "types._get_trace_graph(name, bases=())", "types.prepare(name, bases=())", "types.read_csv(name, bases=())", "types.array_repr(name, bases=())", "types.read_pickle(name, bases=())", "types.make_sparse(name, bases=())", "types.replace(name, bases=())", "types.as_completed(name, bases=())", "types.ParserCreate(name, bases=())", "types._cross_dispatcher(name, bases=())", "types.parallel_coordinates(name, bases=())", "types.colorbar(name, bases=())", "types._disassemble_recursive(name, bases=())"], "types.prepare_class(name, bases=(), kwds=None)": ["prepare_class", "types.prepare_class(name, bases=(), kwds=None)", "types.new_class(name, bases=(), kwds=None)", "types._get_trace_graph(name, bases=(), kwds=None)", "types.prepare(name, bases=(), kwds=None)", "types.read_csv(name, bases=(), kwds=None)", "types.array_repr(name, bases=(), kwds=None)", "types.read_pickle(name, bases=(), kwds=None)", "types.make_sparse(name, bases=(), kwds=None)", "types.replace(name, bases=(), kwds=None)", "types.as_completed(name, bases=(), kwds=None)", "types.ParserCreate(name, bases=(), kwds=None)", "types._cross_dispatcher(name, bases=(), kwds=None)", "types.parallel_coordinates(name, bases=(), kwds=None)", "types.colorbar(name, bases=(), kwds=None)"], "types.prepare_class(name, kwds=None)": ["prepare_class", "types.prepare_class(name, kwds=None)", "types.new_class(name, kwds=None)", "types._get_trace_graph(name, kwds=None)", "types.prepare(name, kwds=None)", "types.read_csv(name, kwds=None)", "types.array_repr(name, kwds=None)", "types.read_pickle(name, kwds=None)", "types.make_sparse(name, kwds=None)", "types.replace(name, kwds=None)", "types.as_completed(name, kwds=None)", "types.ParserCreate(name, kwds=None)", "types._cross_dispatcher(name, kwds=None)", "types.parallel_coordinates(name, kwds=None)", "types.colorbar(name, kwds=None)"], "types.resolve_bases(bases)": ["resolve_bases", "types.resolve_name(bases)", "types._resolve_name(bases)", "types.resolve(bases)", "types.resolve_ellipsis(bases)", "types.tensorsolve(bases)", "types.base_repr(bases)", "types._check_resolvers(bases)", "types._reset_caches(bases)", "types.set_threshold(bases)", "types._encode_base64(bases)", "types._decode_base64(bases)", "types.encode_base64(bases)", "types.resolve_library_path(bases)", "types._relax_case(bases)"], "typing.Any": ["typing.Any"], "typing.AsyncGenerator(AsyncIteratorT_co)": ["AsyncGenerator"], "typing.BinaryIO": ["typing.BinaryIO"], "typing.Callable": ["typing.Callable"], "typing.ChainMap(collections.ChainMap, MutableMappingKT, VT)": ["ChainMap"], "typing.ClassVar": ["typing.ClassVar"], "typing.Collection(Sized)": ["Collection"], "typing.Container()": ["Container"], "typing.Counter(collections.Counter, DictT, int)": ["Counter"], "typing.Deque(deque)": ["Deque"], "typing.Deque(deque, MutableSequenceT)": ["Deque"], "typing.Dict(dict, MutableMappingKT)": ["Dict"], "typing.Dict(dict, MutableMappingKT, VT)": ["Dict"], "typing.ForwardRef": ["typing.ForwardRef"], "typing.FrozenSet(frozenset)": ["FrozenSet"], "typing.FrozenSet(frozenset, AbstractSetT_co)": ["FrozenSet"], "typing.Generator(IteratorT_co, GenericT_co)": ["Generator"], "typing.Generator(IteratorT_co, GenericT_co, T_contra)": ["Generator"], "typing.Generator(IteratorT_co, GenericT_co, T_contra, V_co)": ["Generator"], "typing.Generic": ["typing.Generic"], "typing.Hashable": ["typing.Hashable"], "typing.IO": ["typing.IO"], "typing.Iterable()": ["Iterable"], "typing.List(list)": ["List"], "typing.List(list, MutableSequenceT)": ["List"], "typing.Mapping(Sized)": ["Mapping"], "typing.Match": ["typing.Match"], "typing.MutableMapping(MappingKT, VT)": ["MutableMapping"], "typing.NewType(typ)": ["NewType", "typing._type(typ)", "typing._realType(typ)", "typing.open_new(typ)", "typing.newer(typ)", "typing._type_repr(typ)", "typing._eval_type(typ)", "typing._ntuple(typ)", "typing.CFUNCTYPE(typ)", "typing.getpen(typ)", "typing.new(typ)", "typing.eye(typ)", "typing.get_type_line(typ)", "typing.eye_(typ)", "typing._commonType(typ)"], "typing.NoReturn": ["typing.NoReturn"], "typing.OrderedDict(collections.OrderedDict, MutableMappingKT, VT)": ["OrderedDict"], "typing.Pattern": ["typing.Pattern"], "typing.Set(set)": ["Set"], "typing.Sized": ["typing.Sized"], "typing.SupportsRound": ["typing.SupportsRound"], "typing.TYPE_CHECKING": ["typing.TYPE_CHECKING"], "typing.Text": ["typing.Text"], "typing.TextIO": ["typing.TextIO"], "typing.Tuple": ["typing.Tuple"], "typing.Type()": ["Type"], "typing.Type(GenericCT_co)": ["Type"], "typing.TypeVar": ["typing.TypeVar"], "typing.Union": ["typing.Union"], "typing.cast(typ, val)": ["cast", "typing._cast(typ, val)", "typing.set_cmap(typ, val)", "typing.st(typ, val)", "typing.asstr(typ, val)", "typing.at(typ, val)", "typing.cdist(typ, val)", "typing.safe_cast(typ, val)", "typing.broadcast(typ, val)", "typing.localhost(typ, val)", "typing.concat(typ, val)", "typing.nanstd(typ, val)", "typing.assert_(typ, val)", "typing.cudart(typ, val)", "typing.__concat__(typ, val)"], "typing.get_type_hints(obj)": ["get_type_hints", "typing.get_python_inc(obj)", "typing.get_block_type(obj)", "typing.getlines(obj)", "typing.get_instructions(obj)", "typing.hist_frame(obj)", "typing.win_getpass(obj)", "typing.open_connection(obj)", "typing.notmasked_edges(obj)", "typing._angle_dispatcher(obj)", "typing._init_rpc_backend(obj)", "typing.get_source_lines_and_file(obj)", "typing.identity(obj)", "typing.print_tb(obj)", "typing._average_dispatcher(obj)"], "typing.get_type_hints(obj, globals, locals)": ["get_type_hints", "typing.get_python_inc(obj, globals, locals)", "typing.get_block_type(obj, globals, locals)", "typing.getlines(obj, globals, locals)", "typing.get_instructions(obj, globals, locals)", "typing.hist_frame(obj, globals, locals)", "typing.win_getpass(obj, globals, locals)", "typing.open_connection(obj, globals, locals)", "typing.notmasked_edges(obj, globals, locals)", "typing._angle_dispatcher(obj, globals, locals)", "typing._init_rpc_backend(obj, globals, locals)", "typing.get_source_lines_and_file(obj, globals, locals)", "typing.identity(obj, globals, locals)", "typing.print_tb(obj, globals, locals)", "typing._average_dispatcher(obj, globals, locals)"], "tzinfo.dst(dt)": ["dst"], "tzinfo.fromutc(dt)": ["fromutc"], "tzinfo.tzname(dt)": ["tzname"], "tzinfo.utcoffset(dt)": ["utcoffset"], "unicodedata.category(chr)": ["category"], "unicodedata.combining(chr)": ["combining"], "unicodedata.decimal(chr)": ["decimal"], "unicodedata.decomposition(chr)": ["decomposition"], "unicodedata.digit(chr)": ["digit"], "unicodedata.digit(chr, default)": ["digit"], "unicodedata.east_asian_width(chr)": ["east_asian_width"], "unicodedata.lookup(name)": ["lookup"], "unicodedata.name(chr)": ["name"], "unicodedata.name(chr, default)": ["name"], "unicodedata.normalize(form, unistr)": ["normalize"], "unicodedata.numeric(chr)": ["numeric"], "unicodedata.numeric(chr, default)": ["numeric"], "unicodedata.ucd_3_2_0": ["unicodedata.ucd_3_2_0"], "unicodedata.unidata_version": ["unicodedata.unidata_version"], "unittest.FunctionTestCase(testFunc)": ["FunctionTestCase"], "unittest.FunctionTestCase(testFunc, description=None)": ["FunctionTestCase", "unittest.FunctionTestCase(testFunc, description=None)"], "unittest.FunctionTestCase(testFunc, setUp=None)": ["FunctionTestCase", "unittest.FunctionTestCase(testFunc, setUp=None)"], "unittest.FunctionTestCase(testFunc, setUp=None, description=None)": ["FunctionTestCase", "unittest.FunctionTestCase(testFunc, setUp=None, description=None)"], "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)": ["FunctionTestCase", "unittest.FunctionTestCase(testFunc, setUp=None, tearDown=None)"], "unittest.FunctionTestCase(testFunc, tearDown=None)": ["FunctionTestCase", "unittest.FunctionTestCase(testFunc, tearDown=None)"], "unittest.SkipTest(reason)": ["SkipTest"], "unittest.TestCase()": ["TestCase"], "unittest.TestCase(methodName='runTest')": ["TestCase", "unittest.TestCase(methodName=7.0)"], "unittest.TestLoader": ["unittest.TestLoader"], "unittest.TestResult": ["unittest.TestResult"], "unittest.TestSuite()": ["TestSuite"], "unittest.TestSuite(tests=())": ["TestSuite"], "unittest.TextTestRunner()": ["TextTestRunner"], "unittest.TextTestRunner(descriptions=True)": ["TextTestRunner", "unittest.TextTestRunner(descriptions=False)"], "unittest.TextTestRunner(failfast=False)": ["TextTestRunner", "unittest.TextTestRunner(failfast=True)"], "unittest.TextTestRunner(stream=None)": ["TextTestRunner", "unittest.TextTestRunner(stream=None)"], "unittest.TextTestRunner(stream=None, descriptions=True)": ["TextTestRunner", "unittest.TextTestRunner(stream=None, descriptions=False)"], "unittest.TextTestRunner(verbosity=1)": ["TextTestRunner", "unittest.TextTestRunner(verbosity='1')"], "unittest.TextTestRunner(warnings=None)": ["TextTestRunner", "unittest.TextTestRunner(warnings=None)"], "unittest.installHandler()": ["installHandler", "unittest.install_opener()", "unittest.install()", "unittest._install()", "unittest._handle_fromlist()", "unittest._sighandler_noop()", "unittest._addHandlerRef()", "unittest._vander_dispatcher()", "unittest.isinstance()", "unittest.isalpha()", "unittest.fill_mi_header()", "unittest.find_loader()", "unittest.recv_handle()", "unittest._url_handler()", "unittest.distance()"], "unittest.main()": ["main"], "unittest.main(argv=None)": ["main", "unittest.main(argv=None)"], "unittest.main(catchbreak=None)": ["main", "unittest.main(catchbreak=None)"], "unittest.main(defaultTest=None)": ["main", "unittest.main(defaultTest=None)"], "unittest.main(exit=True)": ["main", "unittest.main(exit=False)"], "unittest.main(failfast=None)": ["main", "unittest.main(failfast=None)"], "unittest.main(module='__main__')": ["main", "unittest.main(module=8)"], "unittest.main(testLoader=unittest.defaultTestLoader)": ["main"], "unittest.main(testRunner=None)": ["main", "unittest.main(testRunner=None)"], "unittest.main(verbosity=1)": ["main", "unittest.main(verbosity='1')"], "unittest.mock.DEFAULT": ["unittest.mock.DEFAULT"], "unittest.mock.MagicMock(*args, **kw)": ["MagicMock"], "unittest.mock.Mock(**kwargs)": ["Mock"], "unittest.mock.Mock(**kwargs, name=None)": ["Mock", "unittest.mock.Mock(**kwargs, name=None)"], "unittest.mock.Mock(**kwargs, return_value=DEFAULT)": ["Mock"], "unittest.mock.Mock(**kwargs, side_effect=None)": ["Mock", "unittest.mock.Mock(**kwargs, side_effect=None)"], "unittest.mock.Mock(**kwargs, spec=None)": ["Mock", "unittest.mock.Mock(**kwargs, spec=None)"], "unittest.mock.Mock(**kwargs, spec=None, return_value=DEFAULT)": ["Mock", "unittest.mock.Mock(**kwargs, spec=None, return_value=DEFAULT)"], "unittest.mock.Mock(**kwargs, unsafe=False)": ["Mock", "unittest.mock.Mock(**kwargs, unsafe=True)"], "unittest.mock.Mock(**kwargs, wraps=None)": ["Mock", "unittest.mock.Mock(**kwargs, wraps=None)"], "unittest.mock.NonCallableMagicMock(*args, **kw)": ["NonCallableMagicMock"], "unittest.mock.NonCallableMock(**kwargs)": ["NonCallableMock"], "unittest.mock.NonCallableMock(**kwargs, name=None)": ["NonCallableMock", "unittest.mock.NonCallableMock(**kwargs, name=None)"], "unittest.mock.NonCallableMock(**kwargs, wraps=None)": ["NonCallableMock", "unittest.mock.NonCallableMock(**kwargs, wraps=None)"], "unittest.mock.PropertyMock(*args, **kwargs)": ["PropertyMock"], "unittest.mock.call(*args, **kwargs)": ["call"], "unittest.mock.create_autospec(spec, **kwargs)": ["create_autospec"], "unittest.mock.create_autospec(spec, **kwargs, instance=False)": ["create_autospec", "unittest.mock.create_autospec(spec, **kwargs, instance=True)"], "unittest.mock.create_autospec(spec, **kwargs, spec_set=False)": ["create_autospec", "unittest.mock.create_autospec(spec, **kwargs, spec_set=True)"], "unittest.mock.create_autospec(spec, **kwargs, spec_set=False, instance=False)": ["create_autospec", "unittest.mock.create_autospec(spec, **kwargs, spec_set=True, instance=True)"], "unittest.mock.mock_open()": ["mock_open"], "unittest.mock.mock_open(mock=None)": ["mock_open", "unittest.mock.mock_open(mock=None)"], "unittest.mock.mock_open(mock=None, read_data=None)": ["mock_open", "unittest.mock.mock_open(mock=None, read_data=None)"], "unittest.mock.mock_open(read_data=None)": ["mock_open", "unittest.mock.mock_open(read_data=None)"], "unittest.mock.patch(target, **kwargs)": ["patch"], "unittest.mock.patch(target, **kwargs, create=False)": ["patch", "unittest.mock.patch(target, **kwargs, create=True)"], "unittest.mock.patch(target, **kwargs, new=DEFAULT)": ["patch"], "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=False)": ["patch", "unittest.mock.patch(target, **kwargs, new=DEFAULT, create=True)"], "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec=None)": ["patch", "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec=None)"], "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec_set=None)": ["patch", "unittest.mock.patch(target, **kwargs, new=DEFAULT, spec_set=None)"], "unittest.mock.patch(target, **kwargs, new_callable=None)": ["patch", "unittest.mock.patch(target, **kwargs, new_callable=None)"], "unittest.mock.patch(target, **kwargs, spec=None)": ["patch", "unittest.mock.patch(target, **kwargs, spec=None)"], "unittest.mock.patch(target, **kwargs, spec_set=None)": ["patch", "unittest.mock.patch(target, **kwargs, spec_set=None)"], "unittest.mock.seal(mock)": ["seal"], "unittest.mock.sentinel": ["unittest.mock.sentinel"], "unittest.registerResult(result)": ["registerResult", "unittest._reset_registry(result)", "unittest.register(result)", "unittest._register(result)", "unittest._register_types(result)", "unittest.removeResult(result)", "unittest.register_writer(result)", "unittest._register_type(result)", "unittest.deregister(result)", "unittest._register_task(result)", "unittest.register_shape(result)", "unittest.register_kl(result)", "unittest._c_register_task(result)", "unittest._abc_register(result)", "unittest._result_dtype(result)"], "unittest.removeHandler()": ["removeHandler", "unittest.resizemode()", "unittest.iter_modules()", "unittest.mode()", "unittest.colormode()", "unittest.screensize()", "unittest.formatdate()", "unittest.tracer()", "unittest.get_locales()", "unittest.run_module_suite()", "unittest.ParserCreate()", "unittest.scandir()", "unittest.getnode()", "unittest.ensure_clean()", "unittest.testmod()"], "unittest.removeHandler(function=None)": ["removeHandler", "unittest.removeHandler(function=None)", "unittest.resizemode(function=None)", "unittest.iter_modules(function=None)", "unittest.mode(function=None)", "unittest.colormode(function=None)", "unittest.screensize(function=None)", "unittest.formatdate(function=None)", "unittest.tracer(function=None)", "unittest.get_locales(function=None)", "unittest.run_module_suite(function=None)", "unittest.ParserCreate(function=None)", "unittest.scandir(function=None)", "unittest.getnode(function=None)", "unittest.ensure_clean(function=None)"], "unittest.removeResult(result)": ["removeResult", "unittest.removedirs(result)", "unittest._encode_result(result)", "unittest.remove_tree(result)", "unittest.registerResult(result)", "unittest.remove(result)", "unittest.removeduppaths(result)", "unittest.removexattr(result)", "unittest.get_op_result_name(result)", "unittest.default_convert(result)", "unittest._result_dtype(result)", "unittest._removeHandlerRef(result)", "unittest.rebuild_event(result)", "unittest.remote(result)", "unittest.removeHandler(result)"], "unpickler.find_class(module, name)": ["find_class"], "ur_lopener.open(fullurl)": ["open"], "ur_lopener.open(fullurl, data=None)": ["open", "ur_lopener.open(fullurl, data=None)"], "ur_lopener.open_unknown(fullurl)": ["open_unknown"], "ur_lopener.open_unknown(fullurl, data=None)": ["open_unknown", "ur_lopener.open_unknown(fullurl, data=None)"], "ur_lopener.retrieve(url)": ["retrieve"], "ur_lopener.retrieve(url, data=None)": ["retrieve", "ur_lopener.retrieve(url, data=None)"], "ur_lopener.retrieve(url, filename=None)": ["retrieve", "ur_lopener.retrieve(url, filename=None)"], "ur_lopener.retrieve(url, filename=None, data=None)": ["retrieve", "ur_lopener.retrieve(url, filename=None, data=None)"], "ur_lopener.retrieve(url, filename=None, reporthook=None)": ["retrieve", "ur_lopener.retrieve(url, filename=None, reporthook=None)"], "ur_lopener.retrieve(url, reporthook=None)": ["retrieve", "ur_lopener.retrieve(url, reporthook=None)"], "ur_lopener.retrieve(url, reporthook=None, data=None)": ["retrieve", "ur_lopener.retrieve(url, reporthook=None, data=None)"], "ur_lopener.version": ["ur_lopener.version"], "urllib.error.ContentTooShortError(msg, content)": ["ContentTooShortError"], "urllib.error.HTTPError": ["urllib.error.HTTPError"], "urllib.parse.DefragResult(url, fragment)": ["DefragResult"], "urllib.parse.DefragResultBytes(url, fragment)": ["DefragResultBytes"], "urllib.parse.ParseResult(scheme, netloc, path, params, query, fragment)": ["ParseResult"], "urllib.parse.ParseResultBytes(scheme, netloc, path, params, query, fragment)": ["ParseResultBytes"], "urllib.parse.SplitResult(scheme, netloc, path, query, fragment)": ["SplitResult"], "urllib.parse.SplitResultBytes(scheme, netloc, path, query, fragment)": ["SplitResultBytes"], "urllib.parse.parse_qs(qs)": ["parse_qs", "urllib.parse.parse_qsl(qs)", "urllib.parse.pad_sequence(qs)", "urllib.parse.safe_repr(qs)", "urllib.parse._isna_array(qs)", "urllib.parse.a2b_qp(qs)", "urllib.parse.broadcast_arrays(qs)", "urllib.parse._unparse_datetime(qs)", "urllib.parse.resolve(qs)", "urllib.parse._wsp_splitter(qs)", "urllib.parse.platform(qs)", "urllib.parse.template(qs)", "urllib.parse.cast_scalar_indexer(qs)", "urllib.parse.close_all(qs)", "urllib.parse.logits_to_probs(qs)"], "urllib.parse.parse_qs(qs, encoding='utf-8')": ["parse_qs", "urllib.parse.parse_qs(qs, encoding=5)", "urllib.parse.parse_qsl(qs, encoding='utf-8')", "urllib.parse.pad_sequence(qs, encoding='utf-8')", "urllib.parse.safe_repr(qs, encoding='utf-8')", "urllib.parse._isna_array(qs, encoding='utf-8')", "urllib.parse.a2b_qp(qs, encoding='utf-8')", "urllib.parse.broadcast_arrays(qs, encoding='utf-8')", "urllib.parse._unparse_datetime(qs, encoding='utf-8')", "urllib.parse.resolve(qs, encoding='utf-8')", "urllib.parse._wsp_splitter(qs, encoding='utf-8')", "urllib.parse.platform(qs, encoding='utf-8')", "urllib.parse.template(qs, encoding='utf-8')", "urllib.parse.cast_scalar_indexer(qs, encoding='utf-8')", "urllib.parse.close_all(qs, encoding='utf-8')"], "urllib.parse.parse_qs(qs, errors='replace')": ["parse_qs", "urllib.parse.parse_qs(qs, errors=7.0)", "urllib.parse.parse_qsl(qs, errors='replace')", "urllib.parse.pad_sequence(qs, errors='replace')", "urllib.parse.safe_repr(qs, errors='replace')", "urllib.parse._isna_array(qs, errors='replace')", "urllib.parse.a2b_qp(qs, errors='replace')", "urllib.parse.broadcast_arrays(qs, errors='replace')", "urllib.parse._unparse_datetime(qs, errors='replace')", "urllib.parse.resolve(qs, errors='replace')", "urllib.parse._wsp_splitter(qs, errors='replace')", "urllib.parse.platform(qs, errors='replace')", "urllib.parse.template(qs, errors='replace')", "urllib.parse.cast_scalar_indexer(qs, errors='replace')", "urllib.parse.close_all(qs, errors='replace')"], "urllib.parse.parse_qs(qs, keep_blank_values=False)": ["parse_qs", "urllib.parse.parse_qs(qs, keep_blank_values=True)", "urllib.parse.parse_qsl(qs, keep_blank_values=False)", "urllib.parse.pad_sequence(qs, keep_blank_values=False)", "urllib.parse.safe_repr(qs, keep_blank_values=False)", "urllib.parse._isna_array(qs, keep_blank_values=False)", "urllib.parse.a2b_qp(qs, keep_blank_values=False)", "urllib.parse.broadcast_arrays(qs, keep_blank_values=False)", "urllib.parse._unparse_datetime(qs, keep_blank_values=False)", "urllib.parse.resolve(qs, keep_blank_values=False)", "urllib.parse._wsp_splitter(qs, keep_blank_values=False)", "urllib.parse.platform(qs, keep_blank_values=False)", "urllib.parse.template(qs, keep_blank_values=False)", "urllib.parse.cast_scalar_indexer(qs, keep_blank_values=False)", "urllib.parse.close_all(qs, keep_blank_values=False)"], "urllib.parse.parse_qs(qs, keep_blank_values=False, encoding='utf-8')": ["parse_qs", "urllib.parse.parse_qs(qs, keep_blank_values=True, encoding='utf-8')", "urllib.parse.parse_qs(qs, keep_blank_values=False, encoding=5)", "urllib.parse.parse_qsl(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse.pad_sequence(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse.safe_repr(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse._isna_array(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse.a2b_qp(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse.broadcast_arrays(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse._unparse_datetime(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse.resolve(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse._wsp_splitter(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse.platform(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse.template(qs, keep_blank_values=False, encoding='utf-8')", "urllib.parse.cast_scalar_indexer(qs, keep_blank_values=False, encoding='utf-8')"], "urllib.parse.parse_qs(qs, keep_blank_values=False, errors='replace')": ["parse_qs", "urllib.parse.parse_qs(qs, keep_blank_values=True, errors='replace')", "urllib.parse.parse_qs(qs, keep_blank_values=False, errors=7.0)", "urllib.parse.parse_qsl(qs, keep_blank_values=False, errors='replace')", "urllib.parse.pad_sequence(qs, keep_blank_values=False, errors='replace')", "urllib.parse.safe_repr(qs, keep_blank_values=False, errors='replace')", "urllib.parse._isna_array(qs, keep_blank_values=False, errors='replace')", "urllib.parse.a2b_qp(qs, keep_blank_values=False, errors='replace')", "urllib.parse.broadcast_arrays(qs, keep_blank_values=False, errors='replace')", "urllib.parse._unparse_datetime(qs, keep_blank_values=False, errors='replace')", "urllib.parse.resolve(qs, keep_blank_values=False, errors='replace')", "urllib.parse._wsp_splitter(qs, keep_blank_values=False, errors='replace')", "urllib.parse.platform(qs, keep_blank_values=False, errors='replace')", "urllib.parse.template(qs, keep_blank_values=False, errors='replace')", "urllib.parse.cast_scalar_indexer(qs, keep_blank_values=False, errors='replace')"], "urllib.parse.parse_qs(qs, keep_blank_values=False, max_num_fields=None)": ["parse_qs", "urllib.parse.parse_qs(qs, keep_blank_values=True, max_num_fields=None)", "urllib.parse.parse_qsl(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.pad_sequence(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.safe_repr(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse._isna_array(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.a2b_qp(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.broadcast_arrays(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse._unparse_datetime(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.resolve(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse._wsp_splitter(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.platform(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.template(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.cast_scalar_indexer(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.close_all(qs, keep_blank_values=False, max_num_fields=None)"], "urllib.parse.parse_qs(qs, keep_blank_values=False, strict_parsing=False)": ["parse_qs", "urllib.parse.parse_qs(qs, keep_blank_values=True, strict_parsing=True)", "urllib.parse.parse_qsl(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse.pad_sequence(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse.safe_repr(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse._isna_array(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse.a2b_qp(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse.broadcast_arrays(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse._unparse_datetime(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse.resolve(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse._wsp_splitter(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse.platform(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse.template(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse.cast_scalar_indexer(qs, keep_blank_values=False, strict_parsing=False)", "urllib.parse.close_all(qs, keep_blank_values=False, strict_parsing=False)"], "urllib.parse.parse_qs(qs, max_num_fields=None)": ["parse_qs", "urllib.parse.parse_qs(qs, max_num_fields=None)", "urllib.parse.parse_qsl(qs, max_num_fields=None)", "urllib.parse.pad_sequence(qs, max_num_fields=None)", "urllib.parse.safe_repr(qs, max_num_fields=None)", "urllib.parse._isna_array(qs, max_num_fields=None)", "urllib.parse.a2b_qp(qs, max_num_fields=None)", "urllib.parse.broadcast_arrays(qs, max_num_fields=None)", "urllib.parse._unparse_datetime(qs, max_num_fields=None)", "urllib.parse.resolve(qs, max_num_fields=None)", "urllib.parse._wsp_splitter(qs, max_num_fields=None)", "urllib.parse.platform(qs, max_num_fields=None)", "urllib.parse.template(qs, max_num_fields=None)", "urllib.parse.cast_scalar_indexer(qs, max_num_fields=None)", "urllib.parse.close_all(qs, max_num_fields=None)"], "urllib.parse.parse_qs(qs, strict_parsing=False)": ["parse_qs", "urllib.parse.parse_qs(qs, strict_parsing=True)", "urllib.parse.parse_qsl(qs, strict_parsing=False)", "urllib.parse.pad_sequence(qs, strict_parsing=False)", "urllib.parse.safe_repr(qs, strict_parsing=False)", "urllib.parse._isna_array(qs, strict_parsing=False)", "urllib.parse.a2b_qp(qs, strict_parsing=False)", "urllib.parse.broadcast_arrays(qs, strict_parsing=False)", "urllib.parse._unparse_datetime(qs, strict_parsing=False)", "urllib.parse.resolve(qs, strict_parsing=False)", "urllib.parse._wsp_splitter(qs, strict_parsing=False)", "urllib.parse.platform(qs, strict_parsing=False)", "urllib.parse.template(qs, strict_parsing=False)", "urllib.parse.cast_scalar_indexer(qs, strict_parsing=False)", "urllib.parse.close_all(qs, strict_parsing=False)"], "urllib.parse.parse_qsl(qs)": ["parse_qsl", "urllib.parse.parse_qs(qs)", "urllib.parse.resolve(qs)", "urllib.parse.pad_sequence(qs)", "urllib.parse.lru_cache(qs)", "urllib.parse.safe_repr(qs)", "urllib.parse.cast_scalar_indexer(qs)", "urllib.parse._isna_array(qs)", "urllib.parse.broadcast_arrays(qs)", "urllib.parse._unparse_datetime(qs)", "urllib.parse.a2b_qp(qs)", "urllib.parse._wsp_splitter(qs)", "urllib.parse.flatten_dtype(qs)", "urllib.parse.platform(qs)", "urllib.parse.template(qs)"], "urllib.parse.parse_qsl(qs, errors='replace')": ["parse_qsl", "urllib.parse.parse_qsl(qs, errors=7.0)", "urllib.parse.parse_qs(qs, errors='replace')", "urllib.parse.resolve(qs, errors='replace')", "urllib.parse.pad_sequence(qs, errors='replace')", "urllib.parse.lru_cache(qs, errors='replace')", "urllib.parse.safe_repr(qs, errors='replace')", "urllib.parse.cast_scalar_indexer(qs, errors='replace')", "urllib.parse._isna_array(qs, errors='replace')", "urllib.parse.broadcast_arrays(qs, errors='replace')", "urllib.parse._unparse_datetime(qs, errors='replace')", "urllib.parse.a2b_qp(qs, errors='replace')", "urllib.parse._wsp_splitter(qs, errors='replace')", "urllib.parse.flatten_dtype(qs, errors='replace')", "urllib.parse.platform(qs, errors='replace')"], "urllib.parse.parse_qsl(qs, keep_blank_values=False)": ["parse_qsl", "urllib.parse.parse_qsl(qs, keep_blank_values=True)", "urllib.parse.parse_qs(qs, keep_blank_values=False)", "urllib.parse.resolve(qs, keep_blank_values=False)", "urllib.parse.pad_sequence(qs, keep_blank_values=False)", "urllib.parse.lru_cache(qs, keep_blank_values=False)", "urllib.parse.safe_repr(qs, keep_blank_values=False)", "urllib.parse.cast_scalar_indexer(qs, keep_blank_values=False)", "urllib.parse._isna_array(qs, keep_blank_values=False)", "urllib.parse.broadcast_arrays(qs, keep_blank_values=False)", "urllib.parse._unparse_datetime(qs, keep_blank_values=False)", "urllib.parse.a2b_qp(qs, keep_blank_values=False)", "urllib.parse._wsp_splitter(qs, keep_blank_values=False)", "urllib.parse.flatten_dtype(qs, keep_blank_values=False)", "urllib.parse.platform(qs, keep_blank_values=False)"], "urllib.parse.parse_qsl(qs, keep_blank_values=False, errors='replace')": ["parse_qsl", "urllib.parse.parse_qsl(qs, keep_blank_values=True, errors='replace')", "urllib.parse.parse_qsl(qs, keep_blank_values=False, errors=7.0)", "urllib.parse.parse_qs(qs, keep_blank_values=False, errors='replace')", "urllib.parse.resolve(qs, keep_blank_values=False, errors='replace')", "urllib.parse.pad_sequence(qs, keep_blank_values=False, errors='replace')", "urllib.parse.lru_cache(qs, keep_blank_values=False, errors='replace')", "urllib.parse.safe_repr(qs, keep_blank_values=False, errors='replace')", "urllib.parse.cast_scalar_indexer(qs, keep_blank_values=False, errors='replace')", "urllib.parse._isna_array(qs, keep_blank_values=False, errors='replace')", "urllib.parse.broadcast_arrays(qs, keep_blank_values=False, errors='replace')", "urllib.parse._unparse_datetime(qs, keep_blank_values=False, errors='replace')", "urllib.parse.a2b_qp(qs, keep_blank_values=False, errors='replace')", "urllib.parse._wsp_splitter(qs, keep_blank_values=False, errors='replace')", "urllib.parse.flatten_dtype(qs, keep_blank_values=False, errors='replace')"], "urllib.parse.parse_qsl(qs, keep_blank_values=False, max_num_fields=None)": ["parse_qsl", "urllib.parse.parse_qsl(qs, keep_blank_values=True, max_num_fields=None)", "urllib.parse.parse_qs(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.resolve(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.pad_sequence(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.lru_cache(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.safe_repr(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.cast_scalar_indexer(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse._isna_array(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.broadcast_arrays(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse._unparse_datetime(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.a2b_qp(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse._wsp_splitter(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.flatten_dtype(qs, keep_blank_values=False, max_num_fields=None)", "urllib.parse.platform(qs, keep_blank_values=False, max_num_fields=None)"], "urllib.parse.parse_qsl(qs, strict_parsing=False)": ["parse_qsl", "urllib.parse.parse_qsl(qs, strict_parsing=True)", "urllib.parse.parse_qs(qs, strict_parsing=False)", "urllib.parse.resolve(qs, strict_parsing=False)", "urllib.parse.pad_sequence(qs, strict_parsing=False)", "urllib.parse.lru_cache(qs, strict_parsing=False)", "urllib.parse.safe_repr(qs, strict_parsing=False)", "urllib.parse.cast_scalar_indexer(qs, strict_parsing=False)", "urllib.parse._isna_array(qs, strict_parsing=False)", "urllib.parse.broadcast_arrays(qs, strict_parsing=False)", "urllib.parse._unparse_datetime(qs, strict_parsing=False)", "urllib.parse.a2b_qp(qs, strict_parsing=False)", "urllib.parse._wsp_splitter(qs, strict_parsing=False)", "urllib.parse.flatten_dtype(qs, strict_parsing=False)", "urllib.parse.platform(qs, strict_parsing=False)"], "urllib.parse.quote(string)": ["quote", "urllib.parse.quote_from_bytes(string)", "urllib.parse.urlquote_from_bytes(string)", "urllib.parse.quote_plus(string)", "urllib.parse.quantile(string)", "urllib.parse.utime(string)", "urllib.parse.remote(string)", "urllib.parse.nanquantile(string)", "urllib.parse.require(string)", "urllib.parse.execute(string)", "urllib.parse.read_parquet(string)", "urllib.parse.take(string)", "urllib.parse.stem(string)", "urllib.parse.sort(string)", "urllib.parse.outer(string)"], "urllib.parse.quote(string, encoding=None)": ["quote", "urllib.parse.quote(string, encoding=None)", "urllib.parse.quote_from_bytes(string, encoding=None)", "urllib.parse.urlquote_from_bytes(string, encoding=None)", "urllib.parse.quote_plus(string, encoding=None)", "urllib.parse.quantile(string, encoding=None)", "urllib.parse.utime(string, encoding=None)", "urllib.parse.remote(string, encoding=None)", "urllib.parse.nanquantile(string, encoding=None)", "urllib.parse.require(string, encoding=None)", "urllib.parse.execute(string, encoding=None)", "urllib.parse.read_parquet(string, encoding=None)", "urllib.parse.take(string, encoding=None)", "urllib.parse.stem(string, encoding=None)", "urllib.parse.sort(string, encoding=None)"], "urllib.parse.quote(string, encoding=None, errors=None)": ["quote", "urllib.parse.quote(string, encoding=None, errors=None)", "urllib.parse.quote_from_bytes(string, encoding=None, errors=None)", "urllib.parse.urlquote_from_bytes(string, encoding=None, errors=None)", "urllib.parse.quote_plus(string, encoding=None, errors=None)", "urllib.parse.quantile(string, encoding=None, errors=None)", "urllib.parse.utime(string, encoding=None, errors=None)", "urllib.parse.remote(string, encoding=None, errors=None)", "urllib.parse.nanquantile(string, encoding=None, errors=None)", "urllib.parse.require(string, encoding=None, errors=None)", "urllib.parse.execute(string, encoding=None, errors=None)", "urllib.parse.read_parquet(string, encoding=None, errors=None)", "urllib.parse.take(string, encoding=None, errors=None)", "urllib.parse.stem(string, encoding=None, errors=None)", "urllib.parse.sort(string, encoding=None, errors=None)"], "urllib.parse.quote(string, errors=None)": ["quote", "urllib.parse.quote(string, errors=None)", "urllib.parse.quote_from_bytes(string, errors=None)", "urllib.parse.urlquote_from_bytes(string, errors=None)", "urllib.parse.quote_plus(string, errors=None)", "urllib.parse.quantile(string, errors=None)", "urllib.parse.utime(string, errors=None)", "urllib.parse.remote(string, errors=None)", "urllib.parse.nanquantile(string, errors=None)", "urllib.parse.require(string, errors=None)", "urllib.parse.execute(string, errors=None)", "urllib.parse.read_parquet(string, errors=None)", "urllib.parse.take(string, errors=None)", "urllib.parse.stem(string, errors=None)", "urllib.parse.sort(string, errors=None)"], "urllib.parse.quote(string, safe='/')": ["quote", "urllib.parse.quote(string, safe=1.0)", "urllib.parse.quote_from_bytes(string, safe='/')", "urllib.parse.urlquote_from_bytes(string, safe='/')", "urllib.parse.quote_plus(string, safe='/')", "urllib.parse.quantile(string, safe='/')", "urllib.parse.utime(string, safe='/')", "urllib.parse.remote(string, safe='/')", "urllib.parse.nanquantile(string, safe='/')", "urllib.parse.require(string, safe='/')", "urllib.parse.execute(string, safe='/')", "urllib.parse.read_parquet(string, safe='/')", "urllib.parse.take(string, safe='/')", "urllib.parse.stem(string, safe='/')", "urllib.parse.sort(string, safe='/')"], "urllib.parse.quote(string, safe='/', encoding=None)": ["quote", "urllib.parse.quote(string, safe='/', encoding=None)", "urllib.parse.quote(string, safe=1, encoding=None)", "urllib.parse.quote_from_bytes(string, safe='/', encoding=None)", "urllib.parse.urlquote_from_bytes(string, safe='/', encoding=None)", "urllib.parse.quote_plus(string, safe='/', encoding=None)", "urllib.parse.quantile(string, safe='/', encoding=None)", "urllib.parse.utime(string, safe='/', encoding=None)", "urllib.parse.remote(string, safe='/', encoding=None)", "urllib.parse.nanquantile(string, safe='/', encoding=None)", "urllib.parse.require(string, safe='/', encoding=None)", "urllib.parse.execute(string, safe='/', encoding=None)", "urllib.parse.read_parquet(string, safe='/', encoding=None)", "urllib.parse.take(string, safe='/', encoding=None)", "urllib.parse.stem(string, safe='/', encoding=None)"], "urllib.parse.quote(string, safe='/', errors=None)": ["quote", "urllib.parse.quote(string, safe='/', errors=None)", "urllib.parse.quote(string, safe=1, errors=None)", "urllib.parse.quote_from_bytes(string, safe='/', errors=None)", "urllib.parse.urlquote_from_bytes(string, safe='/', errors=None)", "urllib.parse.quote_plus(string, safe='/', errors=None)", "urllib.parse.quantile(string, safe='/', errors=None)", "urllib.parse.utime(string, safe='/', errors=None)", "urllib.parse.remote(string, safe='/', errors=None)", "urllib.parse.nanquantile(string, safe='/', errors=None)", "urllib.parse.require(string, safe='/', errors=None)", "urllib.parse.execute(string, safe='/', errors=None)", "urllib.parse.read_parquet(string, safe='/', errors=None)", "urllib.parse.take(string, safe='/', errors=None)", "urllib.parse.stem(string, safe='/', errors=None)"], "urllib.parse.quote_from_bytes(bytes)": ["quote_from_bytes", "urllib.parse.urlquote_from_bytes(bytes)", "urllib.parse.quote(bytes)", "urllib.parse.unquote_to_bytes(bytes)", "urllib.parse._load_from_bytes(bytes)", "urllib.parse.message_from_bytes(bytes)", "urllib.parse._from_ctypes_union(bytes)", "urllib.parse._from_ctypes_structure(bytes)", "urllib.parse._read_bytes(bytes)", "urllib.parse._quote_periods(bytes)", "urllib.parse.maybe_promote(bytes)", "urllib.parse._maybe_promote(bytes)", "urllib.parse._bytes_to_codes(bytes)", "urllib.parse.read_bytes4(bytes)", "urllib.parse.read_bytes8(bytes)"], "urllib.parse.quote_from_bytes(bytes, safe='/')": ["quote_from_bytes", "urllib.parse.quote_from_bytes(bytes, safe=1)", "urllib.parse.urlquote_from_bytes(bytes, safe='/')", "urllib.parse.quote(bytes, safe='/')", "urllib.parse.unquote_to_bytes(bytes, safe='/')", "urllib.parse._load_from_bytes(bytes, safe='/')", "urllib.parse.message_from_bytes(bytes, safe='/')", "urllib.parse._from_ctypes_union(bytes, safe='/')", "urllib.parse._from_ctypes_structure(bytes, safe='/')", "urllib.parse._read_bytes(bytes, safe='/')", "urllib.parse._quote_periods(bytes, safe='/')", "urllib.parse.maybe_promote(bytes, safe='/')", "urllib.parse._maybe_promote(bytes, safe='/')", "urllib.parse._bytes_to_codes(bytes, safe='/')", "urllib.parse.read_bytes4(bytes, safe='/')"], "urllib.parse.quote_plus(string)": ["quote_plus", "urllib.parse.usage(string)", "urllib.parse._syscmd_uname(string)", "urllib.parse.quote(string)", "urllib.parse.iter_zipimport_modules(string)", "urllib.parse.iter_modules(string)", "urllib.parse.walk_packages(string)", "urllib.parse.iter_importer_modules(string)", "urllib.parse.assert_(string)", "urllib.parse._iter_file_finder_modules(string)", "urllib.parse.ticklabel_format(string)", "urllib.parse.writedocs(string)", "urllib.parse._syscmd_file(string)", "urllib.parse._norm_version(string)", "urllib.parse.subplots_adjust(string)"], "urllib.parse.quote_plus(string, encoding=None)": ["quote_plus", "urllib.parse.quote_plus(string, encoding=None)", "urllib.parse.usage(string, encoding=None)", "urllib.parse._syscmd_uname(string, encoding=None)", "urllib.parse.quote(string, encoding=None)", "urllib.parse.iter_zipimport_modules(string, encoding=None)", "urllib.parse.iter_modules(string, encoding=None)", "urllib.parse.walk_packages(string, encoding=None)", "urllib.parse.iter_importer_modules(string, encoding=None)", "urllib.parse.assert_(string, encoding=None)", "urllib.parse._iter_file_finder_modules(string, encoding=None)", "urllib.parse.ticklabel_format(string, encoding=None)", "urllib.parse.writedocs(string, encoding=None)", "urllib.parse._syscmd_file(string, encoding=None)", "urllib.parse._norm_version(string, encoding=None)"], "urllib.parse.quote_plus(string, errors=None)": ["quote_plus", "urllib.parse.quote_plus(string, errors=None)", "urllib.parse.usage(string, errors=None)", "urllib.parse._syscmd_uname(string, errors=None)", "urllib.parse.quote(string, errors=None)", "urllib.parse.iter_zipimport_modules(string, errors=None)", "urllib.parse.iter_modules(string, errors=None)", "urllib.parse.walk_packages(string, errors=None)", "urllib.parse.iter_importer_modules(string, errors=None)", "urllib.parse.assert_(string, errors=None)", "urllib.parse._iter_file_finder_modules(string, errors=None)", "urllib.parse.ticklabel_format(string, errors=None)", "urllib.parse.writedocs(string, errors=None)", "urllib.parse._syscmd_file(string, errors=None)", "urllib.parse._norm_version(string, errors=None)"], "urllib.parse.quote_plus(string, safe='')": ["quote_plus", "urllib.parse.quote_plus(string, safe=0)", "urllib.parse.usage(string, safe='')", "urllib.parse._syscmd_uname(string, safe='')", "urllib.parse.quote(string, safe='')", "urllib.parse.iter_zipimport_modules(string, safe='')", "urllib.parse.iter_modules(string, safe='')", "urllib.parse.walk_packages(string, safe='')", "urllib.parse.iter_importer_modules(string, safe='')", "urllib.parse.assert_(string, safe='')", "urllib.parse._iter_file_finder_modules(string, safe='')", "urllib.parse.ticklabel_format(string, safe='')", "urllib.parse.writedocs(string, safe='')", "urllib.parse._syscmd_file(string, safe='')", "urllib.parse._norm_version(string, safe='')"], "urllib.parse.quote_plus(string, safe='', encoding=None)": ["quote_plus", "urllib.parse.quote_plus(string, safe='', encoding=None)", "urllib.parse.quote_plus(string, safe=0.0, encoding=None)", "urllib.parse.usage(string, safe='', encoding=None)", "urllib.parse._syscmd_uname(string, safe='', encoding=None)", "urllib.parse.quote(string, safe='', encoding=None)", "urllib.parse.iter_zipimport_modules(string, safe='', encoding=None)", "urllib.parse.iter_modules(string, safe='', encoding=None)", "urllib.parse.walk_packages(string, safe='', encoding=None)", "urllib.parse.iter_importer_modules(string, safe='', encoding=None)", "urllib.parse.assert_(string, safe='', encoding=None)", "urllib.parse._iter_file_finder_modules(string, safe='', encoding=None)", "urllib.parse.ticklabel_format(string, safe='', encoding=None)", "urllib.parse.writedocs(string, safe='', encoding=None)", "urllib.parse._syscmd_file(string, safe='', encoding=None)"], "urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)": ["quote_plus", "urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)", "urllib.parse.quote_plus(string, safe=0.0, encoding=None, errors=None)", "urllib.parse.usage(string, safe='', encoding=None, errors=None)", "urllib.parse._syscmd_uname(string, safe='', encoding=None, errors=None)", "urllib.parse.quote(string, safe='', encoding=None, errors=None)", "urllib.parse.iter_zipimport_modules(string, safe='', encoding=None, errors=None)", "urllib.parse.iter_modules(string, safe='', encoding=None, errors=None)", "urllib.parse.walk_packages(string, safe='', encoding=None, errors=None)", "urllib.parse.iter_importer_modules(string, safe='', encoding=None, errors=None)", "urllib.parse.assert_(string, safe='', encoding=None, errors=None)", "urllib.parse._iter_file_finder_modules(string, safe='', encoding=None, errors=None)", "urllib.parse.ticklabel_format(string, safe='', encoding=None, errors=None)", "urllib.parse.writedocs(string, safe='', encoding=None, errors=None)", "urllib.parse._syscmd_file(string, safe='', encoding=None, errors=None)"], "urllib.parse.quote_plus(string, safe='', errors=None)": ["quote_plus", "urllib.parse.quote_plus(string, safe='', errors=None)", "urllib.parse.quote_plus(string, safe=0.0, errors=None)", "urllib.parse.usage(string, safe='', errors=None)", "urllib.parse._syscmd_uname(string, safe='', errors=None)", "urllib.parse.quote(string, safe='', errors=None)", "urllib.parse.iter_zipimport_modules(string, safe='', errors=None)", "urllib.parse.iter_modules(string, safe='', errors=None)", "urllib.parse.walk_packages(string, safe='', errors=None)", "urllib.parse.iter_importer_modules(string, safe='', errors=None)", "urllib.parse.assert_(string, safe='', errors=None)", "urllib.parse._iter_file_finder_modules(string, safe='', errors=None)", "urllib.parse.ticklabel_format(string, safe='', errors=None)", "urllib.parse.writedocs(string, safe='', errors=None)", "urllib.parse._syscmd_file(string, safe='', errors=None)"], "urllib.parse.unquote(string)": ["unquote", "urllib.parse.unquote_plus(string)", "urllib.parse.formataddr(string)", "urllib.parse.encode(string)", "urllib.parse.quote(string)", "urllib.parse.decode(string)", "urllib.parse.unique(string)", "urllib.parse._unquotevalue(string)", "urllib.parse.quote_plus(string)", "urllib.parse._unquote_match(string)", "urllib.parse.unique1d(string)", "urllib.parse._unique1d(string)", "urllib.parse.quotedata(string)", "urllib.parse.unused(string)", "urllib.parse.unique_id(string)"], "urllib.parse.unquote(string, encoding='utf-8')": ["unquote", "urllib.parse.unquote(string, encoding=5.0)", "urllib.parse.unquote_plus(string, encoding='utf-8')", "urllib.parse.formataddr(string, encoding='utf-8')", "urllib.parse.encode(string, encoding='utf-8')", "urllib.parse.quote(string, encoding='utf-8')", "urllib.parse.decode(string, encoding='utf-8')", "urllib.parse.unique(string, encoding='utf-8')", "urllib.parse._unquotevalue(string, encoding='utf-8')", "urllib.parse.quote_plus(string, encoding='utf-8')", "urllib.parse._unquote_match(string, encoding='utf-8')", "urllib.parse.unique1d(string, encoding='utf-8')", "urllib.parse._unique1d(string, encoding='utf-8')", "urllib.parse.quotedata(string, encoding='utf-8')", "urllib.parse.unused(string, encoding='utf-8')"], "urllib.parse.unquote(string, encoding='utf-8', errors='replace')": ["unquote", "urllib.parse.unquote(string, encoding=5.0, errors=7)", "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')", "urllib.parse.formataddr(string, encoding='utf-8', errors='replace')", "urllib.parse.encode(string, encoding='utf-8', errors='replace')", "urllib.parse.quote(string, encoding='utf-8', errors='replace')", "urllib.parse.decode(string, encoding='utf-8', errors='replace')", "urllib.parse.unique(string, encoding='utf-8', errors='replace')", "urllib.parse._unquotevalue(string, encoding='utf-8', errors='replace')", "urllib.parse.quote_plus(string, encoding='utf-8', errors='replace')", "urllib.parse._unquote_match(string, encoding='utf-8', errors='replace')", "urllib.parse.unique1d(string, encoding='utf-8', errors='replace')", "urllib.parse._unique1d(string, encoding='utf-8', errors='replace')", "urllib.parse.quotedata(string, encoding='utf-8', errors='replace')", "urllib.parse.unused(string, encoding='utf-8', errors='replace')"], "urllib.parse.unquote(string, errors='replace')": ["unquote", "urllib.parse.unquote(string, errors=7)", "urllib.parse.unquote_plus(string, errors='replace')", "urllib.parse.formataddr(string, errors='replace')", "urllib.parse.encode(string, errors='replace')", "urllib.parse.quote(string, errors='replace')", "urllib.parse.decode(string, errors='replace')", "urllib.parse.unique(string, errors='replace')", "urllib.parse._unquotevalue(string, errors='replace')", "urllib.parse.quote_plus(string, errors='replace')", "urllib.parse._unquote_match(string, errors='replace')", "urllib.parse.unique1d(string, errors='replace')", "urllib.parse._unique1d(string, errors='replace')", "urllib.parse.quotedata(string, errors='replace')", "urllib.parse.unused(string, errors='replace')"], "urllib.parse.unquote_plus(string)": ["unquote_plus", "urllib.parse.unquote(string)", "urllib.parse.formataddr(string)", "urllib.parse.quote_plus(string)", "urllib.parse.encode(string)", "urllib.parse.decode(string)", "urllib.parse._unquote_match(string)", "urllib.parse.unquote_to_bytes(string)", "urllib.parse._quote_periods(string)", "urllib.parse._nt_quote_args(string)", "urllib.parse.quote(string)", "urllib.parse._unquotevalue(string)", "urllib.parse.unique_id(string)", "urllib.parse.unique(string)", "urllib.parse.is_not(string)"], "urllib.parse.unquote_plus(string, encoding='utf-8')": ["unquote_plus", "urllib.parse.unquote_plus(string, encoding=5)", "urllib.parse.unquote(string, encoding='utf-8')", "urllib.parse.formataddr(string, encoding='utf-8')", "urllib.parse.quote_plus(string, encoding='utf-8')", "urllib.parse.encode(string, encoding='utf-8')", "urllib.parse.decode(string, encoding='utf-8')", "urllib.parse._unquote_match(string, encoding='utf-8')", "urllib.parse.unquote_to_bytes(string, encoding='utf-8')", "urllib.parse._quote_periods(string, encoding='utf-8')", "urllib.parse._nt_quote_args(string, encoding='utf-8')", "urllib.parse.quote(string, encoding='utf-8')", "urllib.parse._unquotevalue(string, encoding='utf-8')", "urllib.parse.unique_id(string, encoding='utf-8')", "urllib.parse.unique(string, encoding='utf-8')"], "urllib.parse.unquote_plus(string, encoding='utf-8', errors='replace')": ["unquote_plus", "urllib.parse.unquote_plus(string, encoding=5, errors=7.0)", "urllib.parse.unquote(string, encoding='utf-8', errors='replace')", "urllib.parse.formataddr(string, encoding='utf-8', errors='replace')", "urllib.parse.quote_plus(string, encoding='utf-8', errors='replace')", "urllib.parse.encode(string, encoding='utf-8', errors='replace')", "urllib.parse.decode(string, encoding='utf-8', errors='replace')", "urllib.parse._unquote_match(string, encoding='utf-8', errors='replace')", "urllib.parse.unquote_to_bytes(string, encoding='utf-8', errors='replace')", "urllib.parse._quote_periods(string, encoding='utf-8', errors='replace')", "urllib.parse._nt_quote_args(string, encoding='utf-8', errors='replace')", "urllib.parse.quote(string, encoding='utf-8', errors='replace')", "urllib.parse._unquotevalue(string, encoding='utf-8', errors='replace')", "urllib.parse.unique_id(string, encoding='utf-8', errors='replace')", "urllib.parse.unique(string, encoding='utf-8', errors='replace')"], "urllib.parse.unquote_plus(string, errors='replace')": ["unquote_plus", "urllib.parse.unquote_plus(string, errors=7.0)", "urllib.parse.unquote(string, errors='replace')", "urllib.parse.formataddr(string, errors='replace')", "urllib.parse.quote_plus(string, errors='replace')", "urllib.parse.encode(string, errors='replace')", "urllib.parse.decode(string, errors='replace')", "urllib.parse._unquote_match(string, errors='replace')", "urllib.parse.unquote_to_bytes(string, errors='replace')", "urllib.parse._quote_periods(string, errors='replace')", "urllib.parse._nt_quote_args(string, errors='replace')", "urllib.parse.quote(string, errors='replace')", "urllib.parse._unquotevalue(string, errors='replace')", "urllib.parse.unique_id(string, errors='replace')", "urllib.parse.unique(string, errors='replace')"], "urllib.parse.urldefrag(url)": ["urldefrag", "urllib.parse.currentframe(url)", "urllib.parse.urlencode(url)", "urllib.parse.build_def(url)", "urllib.parse.build_err_msg(url)", "urllib.parse.urlcleanup(url)", "urllib.parse.legder(url)", "urllib.parse.ondrag(url)", "urllib.parse.closerange(url)", "urllib.parse.rcdefaults(url)", "urllib.parse.ParseFlags(url)", "urllib.parse.lagder(url)", "urllib.parse._engine_builder(url)", "urllib.parse.reduce_storage(url)", "urllib.parse.urlretrieve(url)"], "urllib.parse.urlencode(query)": ["urlencode", "urllib.parse.b85encode(query)", "urllib.parse.b16decode(query)", "urllib.parse.resolve(query)", "urllib.parse.decodestring(query)", "urllib.parse.trimcoef(query)", "urllib.parse.close_all(query)", "urllib.parse._can_coerce_all(query)", "urllib.parse.locate(query)", "urllib.parse._genops(query)", "urllib.parse.compile(query)", "urllib.parse.clean_fill_method(query)", "urllib.parse._remove_nan_1d(query)", "urllib.parse.writedoc(query)", "urllib.parse.run(query)"], "urllib.parse.urlencode(query, doseq=False)": ["urlencode", "urllib.parse.urlencode(query, doseq=True)", "urllib.parse.b85encode(query, doseq=False)", "urllib.parse.b16decode(query, doseq=False)", "urllib.parse.resolve(query, doseq=False)", "urllib.parse.decodestring(query, doseq=False)", "urllib.parse.trimcoef(query, doseq=False)", "urllib.parse.close_all(query, doseq=False)", "urllib.parse._can_coerce_all(query, doseq=False)", "urllib.parse.locate(query, doseq=False)", "urllib.parse._genops(query, doseq=False)", "urllib.parse.compile(query, doseq=False)", "urllib.parse.clean_fill_method(query, doseq=False)", "urllib.parse._remove_nan_1d(query, doseq=False)", "urllib.parse.writedoc(query, doseq=False)"], "urllib.parse.urlencode(query, doseq=False, quote_via=quote_plus)": ["urlencode", "urllib.parse.urlencode(query, doseq=True, quote_via=quote_plus)", "urllib.parse.b85encode(query, doseq=False, quote_via=quote_plus)", "urllib.parse.b16decode(query, doseq=False, quote_via=quote_plus)", "urllib.parse.resolve(query, doseq=False, quote_via=quote_plus)", "urllib.parse.decodestring(query, doseq=False, quote_via=quote_plus)", "urllib.parse.trimcoef(query, doseq=False, quote_via=quote_plus)", "urllib.parse.close_all(query, doseq=False, quote_via=quote_plus)", "urllib.parse._can_coerce_all(query, doseq=False, quote_via=quote_plus)", "urllib.parse.locate(query, doseq=False, quote_via=quote_plus)", "urllib.parse._genops(query, doseq=False, quote_via=quote_plus)", "urllib.parse.compile(query, doseq=False, quote_via=quote_plus)", "urllib.parse.clean_fill_method(query, doseq=False, quote_via=quote_plus)", "urllib.parse._remove_nan_1d(query, doseq=False, quote_via=quote_plus)", "urllib.parse.writedoc(query, doseq=False, quote_via=quote_plus)"], "urllib.parse.urlencode(query, doseq=False, safe='')": ["urlencode", "urllib.parse.urlencode(query, doseq=True, safe='')", "urllib.parse.urlencode(query, doseq=False, safe=0.0)", "urllib.parse.b85encode(query, doseq=False, safe='')", "urllib.parse.b16decode(query, doseq=False, safe='')", "urllib.parse.resolve(query, doseq=False, safe='')", "urllib.parse.decodestring(query, doseq=False, safe='')", "urllib.parse.trimcoef(query, doseq=False, safe='')", "urllib.parse.close_all(query, doseq=False, safe='')", "urllib.parse._can_coerce_all(query, doseq=False, safe='')", "urllib.parse.locate(query, doseq=False, safe='')", "urllib.parse._genops(query, doseq=False, safe='')", "urllib.parse.compile(query, doseq=False, safe='')", "urllib.parse.clean_fill_method(query, doseq=False, safe='')", "urllib.parse._remove_nan_1d(query, doseq=False, safe='')"], "urllib.parse.urlencode(query, encoding=None)": ["urlencode", "urllib.parse.urlencode(query, encoding=None)", "urllib.parse.b85encode(query, encoding=None)", "urllib.parse.b16decode(query, encoding=None)", "urllib.parse.resolve(query, encoding=None)", "urllib.parse.decodestring(query, encoding=None)", "urllib.parse.trimcoef(query, encoding=None)", "urllib.parse.close_all(query, encoding=None)", "urllib.parse._can_coerce_all(query, encoding=None)", "urllib.parse.locate(query, encoding=None)", "urllib.parse._genops(query, encoding=None)", "urllib.parse.compile(query, encoding=None)", "urllib.parse.clean_fill_method(query, encoding=None)", "urllib.parse._remove_nan_1d(query, encoding=None)", "urllib.parse.writedoc(query, encoding=None)"], "urllib.parse.urlencode(query, errors=None)": ["urlencode", "urllib.parse.urlencode(query, errors=None)", "urllib.parse.b85encode(query, errors=None)", "urllib.parse.b16decode(query, errors=None)", "urllib.parse.resolve(query, errors=None)", "urllib.parse.decodestring(query, errors=None)", "urllib.parse.trimcoef(query, errors=None)", "urllib.parse.close_all(query, errors=None)", "urllib.parse._can_coerce_all(query, errors=None)", "urllib.parse.locate(query, errors=None)", "urllib.parse._genops(query, errors=None)", "urllib.parse.compile(query, errors=None)", "urllib.parse.clean_fill_method(query, errors=None)", "urllib.parse._remove_nan_1d(query, errors=None)", "urllib.parse.writedoc(query, errors=None)"], "urllib.parse.urlencode(query, quote_via=quote_plus)": ["urlencode", "urllib.parse.b85encode(query, quote_via=quote_plus)", "urllib.parse.b16decode(query, quote_via=quote_plus)", "urllib.parse.resolve(query, quote_via=quote_plus)", "urllib.parse.decodestring(query, quote_via=quote_plus)", "urllib.parse.trimcoef(query, quote_via=quote_plus)", "urllib.parse.close_all(query, quote_via=quote_plus)", "urllib.parse._can_coerce_all(query, quote_via=quote_plus)", "urllib.parse.locate(query, quote_via=quote_plus)", "urllib.parse._genops(query, quote_via=quote_plus)", "urllib.parse.compile(query, quote_via=quote_plus)", "urllib.parse.clean_fill_method(query, quote_via=quote_plus)", "urllib.parse._remove_nan_1d(query, quote_via=quote_plus)", "urllib.parse.writedoc(query, quote_via=quote_plus)", "urllib.parse.run(query, quote_via=quote_plus)"], "urllib.parse.urlencode(query, safe='')": ["urlencode", "urllib.parse.urlencode(query, safe=0.0)", "urllib.parse.b85encode(query, safe='')", "urllib.parse.b16decode(query, safe='')", "urllib.parse.resolve(query, safe='')", "urllib.parse.decodestring(query, safe='')", "urllib.parse.trimcoef(query, safe='')", "urllib.parse.close_all(query, safe='')", "urllib.parse._can_coerce_all(query, safe='')", "urllib.parse.locate(query, safe='')", "urllib.parse._genops(query, safe='')", "urllib.parse.compile(query, safe='')", "urllib.parse.clean_fill_method(query, safe='')", "urllib.parse._remove_nan_1d(query, safe='')", "urllib.parse.writedoc(query, safe='')"], "urllib.parse.urljoin(base, url)": ["urljoin", "urllib.parse.urlsplit(base, url)", "urllib.parse.pprint(base, url)", "urllib.parse.axhline(base, url)", "urllib.parse.axvline(base, url)", "urllib.parse.subplot2grid(base, url)", "urllib.parse.itn(base, url)", "urllib.parse.urlparse(base, url)", "urllib.parse.min(base, url)", "urllib.parse.parse_url(base, url)", "urllib.parse.print_exc(base, url)", "urllib.parse.open(base, url)", "urllib.parse.prod(base, url)", "urllib.parse.warn(base, url)", "urllib.parse.load(base, url)"], "urllib.parse.urljoin(base, url, allow_fragments=True)": ["urljoin", "urllib.parse.urljoin(base, url, allow_fragments=False)", "urllib.parse.urlsplit(base, url, allow_fragments=True)", "urllib.parse.pprint(base, url, allow_fragments=True)", "urllib.parse.axhline(base, url, allow_fragments=True)", "urllib.parse.axvline(base, url, allow_fragments=True)", "urllib.parse.subplot2grid(base, url, allow_fragments=True)", "urllib.parse.itn(base, url, allow_fragments=True)", "urllib.parse.urlparse(base, url, allow_fragments=True)", "urllib.parse.min(base, url, allow_fragments=True)", "urllib.parse.parse_url(base, url, allow_fragments=True)", "urllib.parse.print_exc(base, url, allow_fragments=True)", "urllib.parse.open(base, url, allow_fragments=True)", "urllib.parse.prod(base, url, allow_fragments=True)", "urllib.parse.warn(base, url, allow_fragments=True)"], "urllib.parse.urlparse(urlstring, scheme='')": ["urlparse", "urllib.parse.urlparse(urlstring, scheme=0.0)", "urllib.parse.parse_url(urlstring, scheme='')", "urllib.parse.urlsplit(urlstring, scheme='')", "urllib.parse.usage(urlstring, scheme='')", "urllib.parse.assert_(urlstring, scheme='')", "urllib.parse._norm_version(urlstring, scheme='')", "urllib.parse._syscmd_uname(urlstring, scheme='')", "urllib.parse.iter_modules(urlstring, scheme='')", "urllib.parse.iter_zipimport_modules(urlstring, scheme='')", "urllib.parse._syscmd_file(urlstring, scheme='')", "urllib.parse.iter_importer_modules(urlstring, scheme='')", "urllib.parse._iter_file_finder_modules(urlstring, scheme='')", "urllib.parse.masked_equal(urlstring, scheme='')", "urllib.parse.loads(urlstring, scheme='')"], "urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)": ["urlparse", "urllib.parse.urlparse(urlstring, scheme='', allow_fragments=False)", "urllib.parse.urlparse(urlstring, scheme=0.0, allow_fragments=True)", "urllib.parse.parse_url(urlstring, scheme='', allow_fragments=True)", "urllib.parse.urlsplit(urlstring, scheme='', allow_fragments=True)", "urllib.parse.usage(urlstring, scheme='', allow_fragments=True)", "urllib.parse.assert_(urlstring, scheme='', allow_fragments=True)", "urllib.parse._norm_version(urlstring, scheme='', allow_fragments=True)", "urllib.parse._syscmd_uname(urlstring, scheme='', allow_fragments=True)", "urllib.parse.iter_modules(urlstring, scheme='', allow_fragments=True)", "urllib.parse.iter_zipimport_modules(urlstring, scheme='', allow_fragments=True)", "urllib.parse._syscmd_file(urlstring, scheme='', allow_fragments=True)", "urllib.parse.iter_importer_modules(urlstring, scheme='', allow_fragments=True)", "urllib.parse._iter_file_finder_modules(urlstring, scheme='', allow_fragments=True)", "urllib.parse.masked_equal(urlstring, scheme='', allow_fragments=True)"], "urllib.parse.urlsplit(urlstring)": ["urlsplit", "urllib.parse.urlparse(urlstring)", "urllib.parse.iter_zipimport_modules(urlstring)", "urllib.parse.parse_url(urlstring)", "urllib.parse.usage(urlstring)", "urllib.parse._norm_version(urlstring)", "urllib.parse.iter_modules(urlstring)", "urllib.parse.assert_(urlstring)", "urllib.parse.split(urlstring)", "urllib.parse._syscmd_file(urlstring)", "urllib.parse.iter_importer_modules(urlstring)", "urllib.parse._iter_file_finder_modules(urlstring)", "urllib.parse._syscmd_uname(urlstring)", "urllib.parse._splitdict(urlstring)", "urllib.parse.print_last(urlstring)"], "urllib.parse.urlsplit(urlstring, scheme='')": ["urlsplit", "urllib.parse.urlsplit(urlstring, scheme=0)", "urllib.parse.urlparse(urlstring, scheme='')", "urllib.parse.iter_zipimport_modules(urlstring, scheme='')", "urllib.parse.parse_url(urlstring, scheme='')", "urllib.parse.usage(urlstring, scheme='')", "urllib.parse._norm_version(urlstring, scheme='')", "urllib.parse.iter_modules(urlstring, scheme='')", "urllib.parse.assert_(urlstring, scheme='')", "urllib.parse.split(urlstring, scheme='')", "urllib.parse._syscmd_file(urlstring, scheme='')", "urllib.parse.iter_importer_modules(urlstring, scheme='')", "urllib.parse._iter_file_finder_modules(urlstring, scheme='')", "urllib.parse._syscmd_uname(urlstring, scheme='')", "urllib.parse._splitdict(urlstring, scheme='')"], "urllib.parse.urlsplit(urlstring, scheme='', allow_fragments=True)": ["urlsplit", "urllib.parse.urlsplit(urlstring, scheme='', allow_fragments=False)", "urllib.parse.urlsplit(urlstring, scheme=0.0, allow_fragments=True)", "urllib.parse.urlparse(urlstring, scheme='', allow_fragments=True)", "urllib.parse.iter_zipimport_modules(urlstring, scheme='', allow_fragments=True)", "urllib.parse.parse_url(urlstring, scheme='', allow_fragments=True)", "urllib.parse.usage(urlstring, scheme='', allow_fragments=True)", "urllib.parse._norm_version(urlstring, scheme='', allow_fragments=True)", "urllib.parse.iter_modules(urlstring, scheme='', allow_fragments=True)", "urllib.parse.assert_(urlstring, scheme='', allow_fragments=True)", "urllib.parse.split(urlstring, scheme='', allow_fragments=True)", "urllib.parse._syscmd_file(urlstring, scheme='', allow_fragments=True)", "urllib.parse.iter_importer_modules(urlstring, scheme='', allow_fragments=True)", "urllib.parse._iter_file_finder_modules(urlstring, scheme='', allow_fragments=True)", "urllib.parse._syscmd_uname(urlstring, scheme='', allow_fragments=True)"], "urllib.parse.urlunparse(parts)": ["urlunparse", "urllib.parse.urlparse(parts)", "urllib.parse.du_parse(parts)", "urllib.parse._parse(parts)", "urllib.parse.parse(parts)", "urllib.parse._parse_int(parts)", "urllib.parse.iterparse(parts)", "urllib.parse._parse_num(parts)", "urllib.parse._parser(parts)", "urllib.parse.sparse(parts)", "urllib.parse.sparse_(parts)", "urllib.parse.urlunsplit(parts)", "urllib.parse.urlopen(parts)", "urllib.parse.release(parts)", "urllib.parse.prepare(parts)"], "urllib.parse.urlunsplit(parts)": ["urlunsplit", "urllib.parse.urlsplit(parts)", "urllib.parse.rsplit(parts)", "urllib.parse._split_line(parts)", "urllib.parse.split(parts)", "urllib.parse.dsplit(parts)", "urllib.parse.vsplit(parts)", "urllib.parse.hsplit(parts)", "urllib.parse._split_list(parts)", "urllib.parse.urlunparse(parts)", "urllib.parse.array_split(parts)", "urllib.parse.splitext(parts)", "urllib.parse.splittag(parts)", "urllib.parse._splitext(parts)", "urllib.parse.splitdoc(parts)"], "urllib.request.AbstractBasicAuthHandler()": ["AbstractBasicAuthHandler"], "urllib.request.AbstractBasicAuthHandler(password_mgr=None)": ["AbstractBasicAuthHandler", "urllib.request.AbstractBasicAuthHandler(password_mgr=None)"], "urllib.request.AbstractDigestAuthHandler()": ["AbstractDigestAuthHandler"], "urllib.request.BaseHandler": ["urllib.request.BaseHandler"], "urllib.request.CacheFTPHandler": ["urllib.request.CacheFTPHandler"], "urllib.request.DataHandler": ["urllib.request.DataHandler"], "urllib.request.FTPHandler": ["urllib.request.FTPHandler"], "urllib.request.FancyURLopener()": ["FancyURLopener"], "urllib.request.FileHandler": ["urllib.request.FileHandler"], "urllib.request.HTTPBasicAuthHandler()": ["HTTPBasicAuthHandler"], "urllib.request.HTTPCookieProcessor()": ["HTTPCookieProcessor"], "urllib.request.HTTPCookieProcessor(cookiejar=None)": ["HTTPCookieProcessor", "urllib.request.HTTPCookieProcessor(cookiejar=None)"], "urllib.request.HTTPDefaultErrorHandler": ["urllib.request.HTTPDefaultErrorHandler"], "urllib.request.HTTPDigestAuthHandler()": ["HTTPDigestAuthHandler"], "urllib.request.HTTPPasswordMgr": ["urllib.request.HTTPPasswordMgr"], "urllib.request.HTTPSHandler()": ["HTTPSHandler"], "urllib.request.HTTPSHandler(check_hostname=None)": ["HTTPSHandler", "urllib.request.HTTPSHandler(check_hostname=None)"], "urllib.request.HTTPSHandler(context=None)": ["HTTPSHandler", "urllib.request.HTTPSHandler(context=None)"], "urllib.request.HTTPSHandler(debuglevel=0)": ["HTTPSHandler", "urllib.request.HTTPSHandler(debuglevel='0')"], "urllib.request.HTTPSHandler(debuglevel=0, context=None)": ["HTTPSHandler", "urllib.request.HTTPSHandler(debuglevel=0, context=None)", "urllib.request.HTTPSHandler(debuglevel='0', context=None)"], "urllib.request.OpenerDirector": ["urllib.request.OpenerDirector"], "urllib.request.ProxyBasicAuthHandler()": ["ProxyBasicAuthHandler"], "urllib.request.ProxyBasicAuthHandler(password_mgr=None)": ["ProxyBasicAuthHandler", "urllib.request.ProxyBasicAuthHandler(password_mgr=None)"], "urllib.request.ProxyDigestAuthHandler()": ["ProxyDigestAuthHandler"], "urllib.request.ProxyDigestAuthHandler(password_mgr=None)": ["ProxyDigestAuthHandler", "urllib.request.ProxyDigestAuthHandler(password_mgr=None)"], "urllib.request.ProxyHandler()": ["ProxyHandler"], "urllib.request.ProxyHandler(proxies=None)": ["ProxyHandler", "urllib.request.ProxyHandler(proxies=None)"], "urllib.request.Request(url)": ["Request"], "urllib.request.Request(url, data=None)": ["Request", "urllib.request.Request(url, data=None)"], "urllib.request.Request(url, data=None, headers={})": ["Request", "urllib.request.Request(url, data=None, headers={})"], "urllib.request.Request(url, data=None, method=None)": ["Request", "urllib.request.Request(url, data=None, method=None)"], "urllib.request.Request(url, data=None, unverifiable=False)": ["Request", "urllib.request.Request(url, data=None, unverifiable=True)"], "urllib.request.Request(url, headers={})": ["Request"], "urllib.request.Request(url, method=None)": ["Request", "urllib.request.Request(url, method=None)"], "urllib.request.Request(url, origin_req_host=None)": ["Request", "urllib.request.Request(url, origin_req_host=None)"], "urllib.request.Request(url, unverifiable=False)": ["Request", "urllib.request.Request(url, unverifiable=True)"], "urllib.request.URLopener(**x509)": ["URLopener"], "urllib.request.URLopener(**x509, proxies=None)": ["URLopener", "urllib.request.URLopener(**x509, proxies=None)"], "urllib.request.UnknownHandler": ["urllib.request.UnknownHandler"], "urllib.request.build_opener()": ["build_opener", "urllib.request._builtin_open()", "urllib.request._build_localename()", "urllib.request.build_param()", "urllib.request.install_opener()", "urllib.request._engine_builder()", "urllib.request.rebuild_tensor()", "urllib.request._rebuild_tensor()", "urllib.request.build_def()", "urllib.request.python_build()", "urllib.request._python_build()", "urllib.request.bltn_open()", "urllib.request.build_err_msg()", "urllib.request.urlopen()", "urllib.request._rebuild_tensor_v2()"], "urllib.request.build_opener(handler)": ["build_opener", "urllib.request._builtin_open(handler)", "urllib.request._build_localename(handler)", "urllib.request.build_param(handler)", "urllib.request.install_opener(handler)", "urllib.request._engine_builder(handler)", "urllib.request.rebuild_tensor(handler)", "urllib.request._rebuild_tensor(handler)", "urllib.request.build_def(handler)", "urllib.request.python_build(handler)", "urllib.request._python_build(handler)", "urllib.request.bltn_open(handler)", "urllib.request.build_err_msg(handler)", "urllib.request.urlopen(handler)", "urllib.request._rebuild_tensor_v2(handler)"], "urllib.request.getproxies()": ["getproxies", "urllib.request.setprofile()", "urllib.request.getpriority()", "urllib.request.getlines()", "urllib.request._get_skiprows()", "urllib.request.getresgid()", "urllib.request.getshapes()", "urllib.request.getwriter()", "urllib.request.getresuid()", "urllib.request.getgroups()", "urllib.request.getproxies_environment()", "urllib.request.setpos()", "urllib.request.get_printoptions()", "urllib.request.getpen()", "urllib.request.getmro()"], "urllib.request.install_opener(opener)": ["install_opener", "urllib.request.installHandler(opener)", "urllib.request.build_opener(opener)", "urllib.request.install(opener)", "urllib.request._install(opener)", "urllib.request.disable_observer(opener)", "urllib.request.enablerlcompleter(opener)", "urllib.request.isinstance(opener)", "urllib.request.integral_types(opener)", "urllib.request._hist_bin_stone(opener)", "urllib.request.islower(opener)", "urllib.request._open_file_like(opener)", "urllib.request.open_latin1(opener)", "urllib.request.master_open(opener)", "urllib.request.distance(opener)"], "urllib.request.pathname2url(path)": ["pathname2url", "urllib.request.url2pathname(path)", "urllib.request.names_compat(path)", "urllib.request.parse_url(path)", "urllib.request._getfinalpathname(path)", "urllib.request.__matmul__(path)", "urllib.request.gather(path)", "urllib.request.matmul(path)", "urllib.request.namedtuple(path)", "urllib.request._namedtuple(path)", "urllib.request.plainpager(path)", "urllib.request._dispatcher(path)", "urllib.request.namer_api_name(path)", "urllib.request._create_named_tuple(path)", "urllib.request.bitname(path)"], "urllib.request.url2pathname(path)": ["url2pathname", "urllib.request.pathname2url(path)", "urllib.request._getfinalpathname(path)", "urllib.request._safe_realpath(path)", "urllib.request.relpath(path)", "urllib.request.realpath(path)", "urllib.request.urlparse(path)", "urllib.request.uname(path)", "urllib.request.names_compat(path)", "urllib.request.classname(path)", "urllib.request._slotnames(path)", "urllib.request.update(path)", "urllib.request.rename(path)", "urllib.request.urlunparse(path)", "urllib.request.delegate_names(path)"], "urllib.request.urlcleanup()": ["urlcleanup", "urllib.request._cleanup()", "urllib.request._clean_args()", "urllib.request.urlopen()", "urllib.request.cleandoc()", "urllib.request.ensure_clean()", "urllib.request.urlencode()", "urllib.request.clear()", "urllib.request.penup()", "urllib.request.urldefrag()", "urllib.request.XmlClient()", "urllib.request.clearstamp()", "urllib.request.urlunparse()", "urllib.request.unwrap()", "urllib.request.isleap()"], "urllib.request.urlopen(url)": ["urlopen", "urllib.request.open(url)", "urllib.request.openfp(url)", "urllib.request.unlink(url)", "urllib.request.unwrap(url)", "urllib.request.remove(url)", "urllib.request.listen(url)", "urllib.request.compress_nd(url)", "urllib.request.relpath(url)", "urllib.request.transpose(url)", "urllib.request.getmodule(url)", "urllib.request.get_block_type(url)", "urllib.request.calculate_gain(url)", "urllib.request.setlocale(url)", "urllib.request.flip(url)"], "urllib.request.urlopen(url, cadefault=False)": ["urlopen", "urllib.request.urlopen(url, cadefault=True)", "urllib.request.open(url, cadefault=False)", "urllib.request.openfp(url, cadefault=False)", "urllib.request.unlink(url, cadefault=False)", "urllib.request.unwrap(url, cadefault=False)", "urllib.request.remove(url, cadefault=False)", "urllib.request.listen(url, cadefault=False)", "urllib.request.compress_nd(url, cadefault=False)", "urllib.request.relpath(url, cadefault=False)", "urllib.request.transpose(url, cadefault=False)", "urllib.request.getmodule(url, cadefault=False)", "urllib.request.get_block_type(url, cadefault=False)", "urllib.request.calculate_gain(url, cadefault=False)", "urllib.request.setlocale(url, cadefault=False)"], "urllib.request.urlopen(url, cafile=None)": ["urlopen", "urllib.request.urlopen(url, cafile=None)", "urllib.request.open(url, cafile=None)", "urllib.request.openfp(url, cafile=None)", "urllib.request.unlink(url, cafile=None)", "urllib.request.unwrap(url, cafile=None)", "urllib.request.remove(url, cafile=None)", "urllib.request.listen(url, cafile=None)", "urllib.request.compress_nd(url, cafile=None)", "urllib.request.relpath(url, cafile=None)", "urllib.request.transpose(url, cafile=None)", "urllib.request.getmodule(url, cafile=None)", "urllib.request.get_block_type(url, cafile=None)", "urllib.request.calculate_gain(url, cafile=None)", "urllib.request.setlocale(url, cafile=None)"], "urllib.request.urlopen(url, capath=None)": ["urlopen", "urllib.request.urlopen(url, capath=None)", "urllib.request.open(url, capath=None)", "urllib.request.openfp(url, capath=None)", "urllib.request.unlink(url, capath=None)", "urllib.request.unwrap(url, capath=None)", "urllib.request.remove(url, capath=None)", "urllib.request.listen(url, capath=None)", "urllib.request.compress_nd(url, capath=None)", "urllib.request.relpath(url, capath=None)", "urllib.request.transpose(url, capath=None)", "urllib.request.getmodule(url, capath=None)", "urllib.request.get_block_type(url, capath=None)", "urllib.request.calculate_gain(url, capath=None)", "urllib.request.setlocale(url, capath=None)"], "urllib.request.urlopen(url, context=None)": ["urlopen", "urllib.request.urlopen(url, context=None)", "urllib.request.open(url, context=None)", "urllib.request.openfp(url, context=None)", "urllib.request.unlink(url, context=None)", "urllib.request.unwrap(url, context=None)", "urllib.request.remove(url, context=None)", "urllib.request.listen(url, context=None)", "urllib.request.compress_nd(url, context=None)", "urllib.request.relpath(url, context=None)", "urllib.request.transpose(url, context=None)", "urllib.request.getmodule(url, context=None)", "urllib.request.get_block_type(url, context=None)", "urllib.request.calculate_gain(url, context=None)", "urllib.request.setlocale(url, context=None)"], "urllib.request.urlopen(url, data=None)": ["urlopen", "urllib.request.urlopen(url, data=None)", "urllib.request.open(url, data=None)", "urllib.request.openfp(url, data=None)", "urllib.request.unlink(url, data=None)", "urllib.request.unwrap(url, data=None)", "urllib.request.remove(url, data=None)", "urllib.request.listen(url, data=None)", "urllib.request.compress_nd(url, data=None)", "urllib.request.relpath(url, data=None)", "urllib.request.transpose(url, data=None)", "urllib.request.getmodule(url, data=None)", "urllib.request.get_block_type(url, data=None)", "urllib.request.calculate_gain(url, data=None)", "urllib.request.setlocale(url, data=None)"], "urllib.request.urlopen(url, data=None, cadefault=False)": ["urlopen", "urllib.request.urlopen(url, data=None, cadefault=True)", "urllib.request.open(url, data=None, cadefault=False)", "urllib.request.openfp(url, data=None, cadefault=False)", "urllib.request.unlink(url, data=None, cadefault=False)", "urllib.request.unwrap(url, data=None, cadefault=False)", "urllib.request.remove(url, data=None, cadefault=False)", "urllib.request.listen(url, data=None, cadefault=False)", "urllib.request.compress_nd(url, data=None, cadefault=False)", "urllib.request.relpath(url, data=None, cadefault=False)", "urllib.request.transpose(url, data=None, cadefault=False)", "urllib.request.getmodule(url, data=None, cadefault=False)", "urllib.request.get_block_type(url, data=None, cadefault=False)", "urllib.request.calculate_gain(url, data=None, cadefault=False)", "urllib.request.setlocale(url, data=None, cadefault=False)"], "urllib.request.urlopen(url, data=None, cafile=None)": ["urlopen", "urllib.request.urlopen(url, data=None, cafile=None)", "urllib.request.open(url, data=None, cafile=None)", "urllib.request.openfp(url, data=None, cafile=None)", "urllib.request.unlink(url, data=None, cafile=None)", "urllib.request.unwrap(url, data=None, cafile=None)", "urllib.request.remove(url, data=None, cafile=None)", "urllib.request.listen(url, data=None, cafile=None)", "urllib.request.compress_nd(url, data=None, cafile=None)", "urllib.request.relpath(url, data=None, cafile=None)", "urllib.request.transpose(url, data=None, cafile=None)", "urllib.request.getmodule(url, data=None, cafile=None)", "urllib.request.get_block_type(url, data=None, cafile=None)", "urllib.request.calculate_gain(url, data=None, cafile=None)", "urllib.request.setlocale(url, data=None, cafile=None)"], "urllib.request.urlopen(url, data=None, capath=None)": ["urlopen", "urllib.request.urlopen(url, data=None, capath=None)", "urllib.request.open(url, data=None, capath=None)", "urllib.request.openfp(url, data=None, capath=None)", "urllib.request.unlink(url, data=None, capath=None)", "urllib.request.unwrap(url, data=None, capath=None)", "urllib.request.remove(url, data=None, capath=None)", "urllib.request.listen(url, data=None, capath=None)", "urllib.request.compress_nd(url, data=None, capath=None)", "urllib.request.relpath(url, data=None, capath=None)", "urllib.request.transpose(url, data=None, capath=None)", "urllib.request.getmodule(url, data=None, capath=None)", "urllib.request.get_block_type(url, data=None, capath=None)", "urllib.request.calculate_gain(url, data=None, capath=None)", "urllib.request.setlocale(url, data=None, capath=None)"], "urllib.request.urlopen(url, data=None, context=None)": ["urlopen", "urllib.request.urlopen(url, data=None, context=None)", "urllib.request.open(url, data=None, context=None)", "urllib.request.openfp(url, data=None, context=None)", "urllib.request.unlink(url, data=None, context=None)", "urllib.request.unwrap(url, data=None, context=None)", "urllib.request.remove(url, data=None, context=None)", "urllib.request.listen(url, data=None, context=None)", "urllib.request.compress_nd(url, data=None, context=None)", "urllib.request.relpath(url, data=None, context=None)", "urllib.request.transpose(url, data=None, context=None)", "urllib.request.getmodule(url, data=None, context=None)", "urllib.request.get_block_type(url, data=None, context=None)", "urllib.request.calculate_gain(url, data=None, context=None)", "urllib.request.setlocale(url, data=None, context=None)"], "urllib.request.urlopen(url, timeout)": ["urlopen", "urllib.request.open(url, timeout)", "urllib.request.openfp(url, timeout)", "urllib.request.unlink(url, timeout)", "urllib.request.unwrap(url, timeout)", "urllib.request.remove(url, timeout)", "urllib.request.listen(url, timeout)", "urllib.request.compress_nd(url, timeout)", "urllib.request.relpath(url, timeout)", "urllib.request.transpose(url, timeout)", "urllib.request.getmodule(url, timeout)", "urllib.request.get_block_type(url, timeout)", "urllib.request.calculate_gain(url, timeout)", "urllib.request.setlocale(url, timeout)", "urllib.request.flip(url, timeout)"], "urllib.request.urlopen(url, timeout, cafile=None)": ["urlopen", "urllib.request.urlopen(url, timeout, cafile=None)", "urllib.request.open(url, timeout, cafile=None)", "urllib.request.openfp(url, timeout, cafile=None)", "urllib.request.unlink(url, timeout, cafile=None)", "urllib.request.unwrap(url, timeout, cafile=None)", "urllib.request.remove(url, timeout, cafile=None)", "urllib.request.listen(url, timeout, cafile=None)", "urllib.request.compress_nd(url, timeout, cafile=None)", "urllib.request.relpath(url, timeout, cafile=None)", "urllib.request.transpose(url, timeout, cafile=None)", "urllib.request.getmodule(url, timeout, cafile=None)", "urllib.request.get_block_type(url, timeout, cafile=None)", "urllib.request.calculate_gain(url, timeout, cafile=None)", "urllib.request.setlocale(url, timeout, cafile=None)"], "urllib.request.urlopen(url, timeout, capath=None)": ["urlopen", "urllib.request.urlopen(url, timeout, capath=None)", "urllib.request.open(url, timeout, capath=None)", "urllib.request.openfp(url, timeout, capath=None)", "urllib.request.unlink(url, timeout, capath=None)", "urllib.request.unwrap(url, timeout, capath=None)", "urllib.request.remove(url, timeout, capath=None)", "urllib.request.listen(url, timeout, capath=None)", "urllib.request.compress_nd(url, timeout, capath=None)", "urllib.request.relpath(url, timeout, capath=None)", "urllib.request.transpose(url, timeout, capath=None)", "urllib.request.getmodule(url, timeout, capath=None)", "urllib.request.get_block_type(url, timeout, capath=None)", "urllib.request.calculate_gain(url, timeout, capath=None)", "urllib.request.setlocale(url, timeout, capath=None)"], "urllib.request.urlopen(url, timeout, data=None)": ["urlopen", "urllib.request.urlopen(url, timeout, data=None)", "urllib.request.open(url, timeout, data=None)", "urllib.request.openfp(url, timeout, data=None)", "urllib.request.unlink(url, timeout, data=None)", "urllib.request.unwrap(url, timeout, data=None)", "urllib.request.remove(url, timeout, data=None)", "urllib.request.listen(url, timeout, data=None)", "urllib.request.compress_nd(url, timeout, data=None)", "urllib.request.relpath(url, timeout, data=None)", "urllib.request.transpose(url, timeout, data=None)", "urllib.request.getmodule(url, timeout, data=None)", "urllib.request.get_block_type(url, timeout, data=None)", "urllib.request.calculate_gain(url, timeout, data=None)", "urllib.request.setlocale(url, timeout, data=None)"], "urllib.request.urlopen(url, timeout, data=None, context=None)": ["urlopen", "urllib.request.urlopen(url, timeout, data=None, context=None)", "urllib.request.open(url, timeout, data=None, context=None)", "urllib.request.openfp(url, timeout, data=None, context=None)", "urllib.request.unlink(url, timeout, data=None, context=None)", "urllib.request.unwrap(url, timeout, data=None, context=None)", "urllib.request.remove(url, timeout, data=None, context=None)", "urllib.request.listen(url, timeout, data=None, context=None)", "urllib.request.compress_nd(url, timeout, data=None, context=None)", "urllib.request.relpath(url, timeout, data=None, context=None)", "urllib.request.transpose(url, timeout, data=None, context=None)", "urllib.request.getmodule(url, timeout, data=None, context=None)", "urllib.request.get_block_type(url, timeout, data=None, context=None)", "urllib.request.calculate_gain(url, timeout, data=None, context=None)", "urllib.request.setlocale(url, timeout, data=None, context=None)"], "urllib.request.urlretrieve(url)": ["urlretrieve", "urllib.request.turtlesize(url)", "urllib.request.utime(url)", "urllib.request.ensure_future(url)", "urllib.request.getenv(url)", "urllib.request.lstrip(url)", "urllib.request.rstrip(url)", "urllib.request.remove(url)", "urllib.request.create_string_buffer(url)", "urllib.request.create_unicode_buffer(url)", "urllib.request.require(url)", "urllib.request._disassemble_recursive(url)", "urllib.request.getenvb(url)", "urllib.request.run_module_suite(url)", "urllib.request.squeeze(url)"], "urllib.request.urlretrieve(url, data=None)": ["urlretrieve", "urllib.request.urlretrieve(url, data=None)", "urllib.request.turtlesize(url, data=None)", "urllib.request.utime(url, data=None)", "urllib.request.ensure_future(url, data=None)", "urllib.request.getenv(url, data=None)", "urllib.request.lstrip(url, data=None)", "urllib.request.rstrip(url, data=None)", "urllib.request.remove(url, data=None)", "urllib.request.create_string_buffer(url, data=None)", "urllib.request.create_unicode_buffer(url, data=None)", "urllib.request.require(url, data=None)", "urllib.request._disassemble_recursive(url, data=None)", "urllib.request.getenvb(url, data=None)", "urllib.request.run_module_suite(url, data=None)"], "urllib.request.urlretrieve(url, filename=None)": ["urlretrieve", "urllib.request.urlretrieve(url, filename=None)", "urllib.request.turtlesize(url, filename=None)", "urllib.request.utime(url, filename=None)", "urllib.request.ensure_future(url, filename=None)", "urllib.request.getenv(url, filename=None)", "urllib.request.lstrip(url, filename=None)", "urllib.request.rstrip(url, filename=None)", "urllib.request.remove(url, filename=None)", "urllib.request.create_string_buffer(url, filename=None)", "urllib.request.create_unicode_buffer(url, filename=None)", "urllib.request.require(url, filename=None)", "urllib.request._disassemble_recursive(url, filename=None)", "urllib.request.getenvb(url, filename=None)", "urllib.request.run_module_suite(url, filename=None)"], "urllib.request.urlretrieve(url, filename=None, data=None)": ["urlretrieve", "urllib.request.urlretrieve(url, filename=None, data=None)", "urllib.request.turtlesize(url, filename=None, data=None)", "urllib.request.utime(url, filename=None, data=None)", "urllib.request.ensure_future(url, filename=None, data=None)", "urllib.request.getenv(url, filename=None, data=None)", "urllib.request.lstrip(url, filename=None, data=None)", "urllib.request.rstrip(url, filename=None, data=None)", "urllib.request.remove(url, filename=None, data=None)", "urllib.request.create_string_buffer(url, filename=None, data=None)", "urllib.request.create_unicode_buffer(url, filename=None, data=None)", "urllib.request.require(url, filename=None, data=None)", "urllib.request._disassemble_recursive(url, filename=None, data=None)", "urllib.request.getenvb(url, filename=None, data=None)", "urllib.request.run_module_suite(url, filename=None, data=None)"], "urllib.request.urlretrieve(url, filename=None, reporthook=None)": ["urlretrieve", "urllib.request.urlretrieve(url, filename=None, reporthook=None)", "urllib.request.turtlesize(url, filename=None, reporthook=None)", "urllib.request.utime(url, filename=None, reporthook=None)", "urllib.request.ensure_future(url, filename=None, reporthook=None)", "urllib.request.getenv(url, filename=None, reporthook=None)", "urllib.request.lstrip(url, filename=None, reporthook=None)", "urllib.request.rstrip(url, filename=None, reporthook=None)", "urllib.request.remove(url, filename=None, reporthook=None)", "urllib.request.create_string_buffer(url, filename=None, reporthook=None)", "urllib.request.create_unicode_buffer(url, filename=None, reporthook=None)", "urllib.request.require(url, filename=None, reporthook=None)", "urllib.request._disassemble_recursive(url, filename=None, reporthook=None)", "urllib.request.getenvb(url, filename=None, reporthook=None)", "urllib.request.run_module_suite(url, filename=None, reporthook=None)"], "urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)": ["urlretrieve", "urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)", "urllib.request.turtlesize(url, filename=None, reporthook=None, data=None)", "urllib.request.utime(url, filename=None, reporthook=None, data=None)", "urllib.request.ensure_future(url, filename=None, reporthook=None, data=None)", "urllib.request.getenv(url, filename=None, reporthook=None, data=None)", "urllib.request.lstrip(url, filename=None, reporthook=None, data=None)", "urllib.request.rstrip(url, filename=None, reporthook=None, data=None)", "urllib.request.remove(url, filename=None, reporthook=None, data=None)", "urllib.request.create_string_buffer(url, filename=None, reporthook=None, data=None)", "urllib.request.create_unicode_buffer(url, filename=None, reporthook=None, data=None)", "urllib.request.require(url, filename=None, reporthook=None, data=None)", "urllib.request._disassemble_recursive(url, filename=None, reporthook=None, data=None)", "urllib.request.getenvb(url, filename=None, reporthook=None, data=None)", "urllib.request.run_module_suite(url, filename=None, reporthook=None, data=None)"], "urllib.request.urlretrieve(url, reporthook=None)": ["urlretrieve", "urllib.request.urlretrieve(url, reporthook=None)", "urllib.request.turtlesize(url, reporthook=None)", "urllib.request.utime(url, reporthook=None)", "urllib.request.ensure_future(url, reporthook=None)", "urllib.request.getenv(url, reporthook=None)", "urllib.request.lstrip(url, reporthook=None)", "urllib.request.rstrip(url, reporthook=None)", "urllib.request.remove(url, reporthook=None)", "urllib.request.create_string_buffer(url, reporthook=None)", "urllib.request.create_unicode_buffer(url, reporthook=None)", "urllib.request.require(url, reporthook=None)", "urllib.request._disassemble_recursive(url, reporthook=None)", "urllib.request.getenvb(url, reporthook=None)", "urllib.request.run_module_suite(url, reporthook=None)"], "urllib.request.urlretrieve(url, reporthook=None, data=None)": ["urlretrieve", "urllib.request.urlretrieve(url, reporthook=None, data=None)", "urllib.request.turtlesize(url, reporthook=None, data=None)", "urllib.request.utime(url, reporthook=None, data=None)", "urllib.request.ensure_future(url, reporthook=None, data=None)", "urllib.request.getenv(url, reporthook=None, data=None)", "urllib.request.lstrip(url, reporthook=None, data=None)", "urllib.request.rstrip(url, reporthook=None, data=None)", "urllib.request.remove(url, reporthook=None, data=None)", "urllib.request.create_string_buffer(url, reporthook=None, data=None)", "urllib.request.create_unicode_buffer(url, reporthook=None, data=None)", "urllib.request.require(url, reporthook=None, data=None)", "urllib.request._disassemble_recursive(url, reporthook=None, data=None)", "urllib.request.getenvb(url, reporthook=None, data=None)", "urllib.request.run_module_suite(url, reporthook=None, data=None)"], "urllib.robotparser.RobotFileParser()": ["RobotFileParser"], "urllib.robotparser.RobotFileParser(url='')": ["RobotFileParser", "urllib.robotparser.RobotFileParser(url=0.0)"], "user_dict.data": ["user_dict.data"], "user_list.data": ["user_list.data"], "user_string.data": ["user_string.data"], "uu.Error": ["uu.Error"], "uu.decode(in_file, out_file=None, quiet=False)": ["decode", "uu.decode(in_file, out_file=None, quiet=True)", "uu.encode(in_file, out_file=None, quiet=False)", "uu._decode_line(in_file, out_file=None, quiet=False)", "uu.ascii_decode(in_file, out_file=None, quiet=False)", "uu.b64encode(in_file, out_file=None, quiet=False)", "uu.escape_decode(in_file, out_file=None, quiet=False)", "uu.charmap_decode(in_file, out_file=None, quiet=False)", "uu.latin_1_decode(in_file, out_file=None, quiet=False)", "uu.cond(in_file, out_file=None, quiet=False)", "uu.utf_8_encode(in_file, out_file=None, quiet=False)", "uu.ascii_encode(in_file, out_file=None, quiet=False)", "uu.hook_encoded(in_file, out_file=None, quiet=False)", "uu.utf_7_encode(in_file, out_file=None, quiet=False)", "uu.escape_encode(in_file, out_file=None, quiet=False)"], "uu.decode(in_file, quiet=False)": ["decode", "uu.decode(in_file, quiet=True)", "uu.encode(in_file, quiet=False)", "uu._decode_line(in_file, quiet=False)", "uu.ascii_decode(in_file, quiet=False)", "uu.b64encode(in_file, quiet=False)", "uu.escape_decode(in_file, quiet=False)", "uu.charmap_decode(in_file, quiet=False)", "uu.latin_1_decode(in_file, quiet=False)", "uu.cond(in_file, quiet=False)", "uu.utf_8_encode(in_file, quiet=False)", "uu.ascii_encode(in_file, quiet=False)", "uu.hook_encoded(in_file, quiet=False)", "uu.utf_7_encode(in_file, quiet=False)", "uu.escape_encode(in_file, quiet=False)"], "uu.encode(in_file, out_file)": ["encode", "uu.decode(in_file, out_file)", "uu.b64encode(in_file, out_file)", "uu.utf_8_encode(in_file, out_file)", "uu.ascii_encode(in_file, out_file)", "uu.hook_encoded(in_file, out_file)", "uu.utf_7_encode(in_file, out_file)", "uu.escape_encode(in_file, out_file)", "uu.charmap_encode(in_file, out_file)", "uu.encode_rfc2231(in_file, out_file)", "uu.latin_1_encode(in_file, out_file)", "uu.cond(in_file, out_file)", "uu._decode_line(in_file, out_file)", "uu.ascii_decode(in_file, out_file)", "uu.utf_32_be_encode(in_file, out_file)"], "uu.encode(in_file, out_file, backtick=False)": ["encode", "uu.encode(in_file, out_file, backtick=True)", "uu.decode(in_file, out_file, backtick=False)", "uu.b64encode(in_file, out_file, backtick=False)", "uu.utf_8_encode(in_file, out_file, backtick=False)", "uu.ascii_encode(in_file, out_file, backtick=False)", "uu.hook_encoded(in_file, out_file, backtick=False)", "uu.utf_7_encode(in_file, out_file, backtick=False)", "uu.escape_encode(in_file, out_file, backtick=False)", "uu.charmap_encode(in_file, out_file, backtick=False)", "uu.encode_rfc2231(in_file, out_file, backtick=False)", "uu.latin_1_encode(in_file, out_file, backtick=False)", "uu.cond(in_file, out_file, backtick=False)", "uu._decode_line(in_file, out_file, backtick=False)", "uu.ascii_decode(in_file, out_file, backtick=False)"], "uuid.NAMESPACE_DNS": ["uuid.NAMESPACE_DNS"], "uuid.NAMESPACE_URL": ["uuid.NAMESPACE_URL"], "uuid.NAMESPACE_X500": ["uuid.NAMESPACE_X500"], "uuid.RESERVED_FUTURE": ["uuid.RESERVED_FUTURE"], "uuid.RESERVED_MICROSOFT": ["uuid.RESERVED_MICROSOFT"], "uuid.RFC_4122": ["uuid.RFC_4122"], "uuid.UUID()": ["UUID"], "uuid.UUID(bytes=None)": ["UUID", "uuid.UUID(bytes=None)"], "uuid.UUID(fields=None)": ["UUID", "uuid.UUID(fields=None)"], "uuid.UUID(hex=None)": ["UUID", "uuid.UUID(hex=None)"], "uuid.UUID(hex=None, bytes=None)": ["UUID", "uuid.UUID(hex=None, bytes=None)"], "uuid.UUID(hex=None, bytes_le=None)": ["UUID", "uuid.UUID(hex=None, bytes_le=None)"], "uuid.UUID(int=None)": ["UUID", "uuid.UUID(int=None)"], "uuid.UUID(is_safe=SafeUUID.unknown)": ["UUID"], "uuid.getnode()": ["getnode", "uuid.getLogger()", "uuid.get()", "uuid.testmod()", "uuid.get_locales()", "uuid.get_worker_info()", "uuid.mode()", "uuid.get_rank()", "uuid.token_hex()", "uuid.getPeriodData()", "uuid.generate_range()", "uuid.get_world_size()", "uuid.resizemode()", "uuid.seterr()", "uuid.open_connection()"], "uuid.uuid1()": ["uuid1", "uuid.width()", "uuid.rgrids()", "uuid.findobj()", "uuid.listdir()", "uuid.run_module_suite()", "uuid.turtlesize()", "uuid.thetagrids()", "uuid.resizemode()", "uuid.make_msgid()", "uuid.askquestion()", "uuid.dis()", "uuid.DocTestSuite()", "uuid.init()", "uuid.main()"], "uuid.uuid1(clock_seq=None)": ["uuid1", "uuid.uuid1(clock_seq=None)", "uuid.width(clock_seq=None)", "uuid.rgrids(clock_seq=None)", "uuid.findobj(clock_seq=None)", "uuid.listdir(clock_seq=None)", "uuid.run_module_suite(clock_seq=None)", "uuid.turtlesize(clock_seq=None)", "uuid.thetagrids(clock_seq=None)", "uuid.resizemode(clock_seq=None)", "uuid.make_msgid(clock_seq=None)", "uuid.askquestion(clock_seq=None)", "uuid.dis(clock_seq=None)", "uuid.DocTestSuite(clock_seq=None)", "uuid.init(clock_seq=None)"], "uuid.uuid1(node=None)": ["uuid1", "uuid.uuid1(node=None)", "uuid.width(node=None)", "uuid.rgrids(node=None)", "uuid.findobj(node=None)", "uuid.listdir(node=None)", "uuid.run_module_suite(node=None)", "uuid.turtlesize(node=None)", "uuid.thetagrids(node=None)", "uuid.resizemode(node=None)", "uuid.make_msgid(node=None)", "uuid.askquestion(node=None)", "uuid.dis(node=None)", "uuid.DocTestSuite(node=None)", "uuid.init(node=None)"], "uuid.uuid1(node=None, clock_seq=None)": ["uuid1", "uuid.uuid1(node=None, clock_seq=None)", "uuid.width(node=None, clock_seq=None)", "uuid.rgrids(node=None, clock_seq=None)", "uuid.findobj(node=None, clock_seq=None)", "uuid.listdir(node=None, clock_seq=None)", "uuid.run_module_suite(node=None, clock_seq=None)", "uuid.turtlesize(node=None, clock_seq=None)", "uuid.thetagrids(node=None, clock_seq=None)", "uuid.resizemode(node=None, clock_seq=None)", "uuid.make_msgid(node=None, clock_seq=None)", "uuid.askquestion(node=None, clock_seq=None)", "uuid.dis(node=None, clock_seq=None)", "uuid.DocTestSuite(node=None, clock_seq=None)", "uuid.init(node=None, clock_seq=None)"], "uuid.uuid3(namespace, name)": ["uuid3", "uuid.uuid5(namespace, name)", "uuid.uuid1(namespace, name)", "uuid.uuid4(namespace, name)", "uuid._id(namespace, name)", "uuid.unused(namespace, name)", "uuid.setuid(namespace, name)", "uuid.getuid(namespace, name)", "uuid.seteuid(namespace, name)", "uuid.union1d(namespace, name)", "uuid._get_uid(namespace, name)", "uuid.geteuid(namespace, name)", "uuid.setreuid(namespace, name)", "uuid.unique1d(namespace, name)", "uuid._unique1d(namespace, name)"], "uuid.uuid4()": ["uuid4", "uuid.uuid3()", "uuid.uuid5()", "uuid.uuid1()", "uuid._id()", "uuid.unused()", "uuid.setuid()", "uuid.getuid()", "uuid.seteuid()", "uuid.union1d()", "uuid._get_uid()", "uuid.geteuid()", "uuid.setreuid()", "uuid.unique1d()", "uuid._unique1d()"], "uuid.uuid5(namespace, name)": ["uuid5", "uuid.uuid3(namespace, name)", "uuid.uuid1(namespace, name)", "uuid.uuid4(namespace, name)", "uuid._id(namespace, name)", "uuid.unused(namespace, name)", "uuid.setuid(namespace, name)", "uuid.getuid(namespace, name)", "uuid.seteuid(namespace, name)", "uuid.union1d(namespace, name)", "uuid._get_uid(namespace, name)", "uuid.geteuid(namespace, name)", "uuid.setreuid(namespace, name)", "uuid.unique1d(namespace, name)", "uuid._unique1d(namespace, name)"], "var in context": ["(var not in context)"], "vars()": ["vars", "_var()", "var()", "barbs()", "_parse()", "scanvars()", "parse()", "vander()", "arccos()", "arcsin()", "_parser()", "stairs()", "sparse()", "nanvar()", "sparse_()"], "vars(object)": ["vars", "_var(object)", "var(object)", "barbs(object)", "_parse(object)", "scanvars(object)", "parse(object)", "vander(object)", "arccos(object)", "arcsin(object)", "_parser(object)", "stairs(object)", "sparse(object)", "nanvar(object)", "sparse_(object)"], "venv.EnvBuilder()": ["EnvBuilder"], "venv.EnvBuilder(clear=False)": ["EnvBuilder", "venv.EnvBuilder(clear=True)"], "venv.EnvBuilder(symlinks=False)": ["EnvBuilder", "venv.EnvBuilder(symlinks=True)"], "venv.EnvBuilder(system_site_packages=False)": ["EnvBuilder", "venv.EnvBuilder(system_site_packages=True)"], "venv.EnvBuilder(system_site_packages=False, clear=False)": ["EnvBuilder", "venv.EnvBuilder(system_site_packages=True, clear=True)"], "venv.EnvBuilder(system_site_packages=False, symlinks=False)": ["EnvBuilder", "venv.EnvBuilder(system_site_packages=True, symlinks=True)"], "venv.EnvBuilder(system_site_packages=False, upgrade=False)": ["EnvBuilder", "venv.EnvBuilder(system_site_packages=True, upgrade=True)"], "venv.create(env_dir)": ["create", "venv.locate(env_dir)", "venv.concatenate(env_dir)", "venv.template(env_dir)", "venv.safe_repr(env_dir)", "venv.formatdate(env_dir)", "venv.resolve(env_dir)", "venv.getclasstree(env_dir)", "venv.rewrite_name(env_dir)", "venv.chebtrim(env_dir)", "venv.writedoc(env_dir)", "venv._convert_other(env_dir)", "venv.flatten_dtype(env_dir)", "venv.lru_cache(env_dir)", "venv.hermetrim(env_dir)"], "venv.create(env_dir, clear=False)": ["create", "venv.create(env_dir, clear=True)", "venv.locate(env_dir, clear=False)", "venv.concatenate(env_dir, clear=False)", "venv.template(env_dir, clear=False)", "venv.safe_repr(env_dir, clear=False)", "venv.formatdate(env_dir, clear=False)", "venv.resolve(env_dir, clear=False)", "venv.getclasstree(env_dir, clear=False)", "venv.rewrite_name(env_dir, clear=False)", "venv.chebtrim(env_dir, clear=False)", "venv.writedoc(env_dir, clear=False)", "venv._convert_other(env_dir, clear=False)", "venv.flatten_dtype(env_dir, clear=False)", "venv.lru_cache(env_dir, clear=False)"], "venv.create(env_dir, prompt=None)": ["create", "venv.create(env_dir, prompt=None)", "venv.locate(env_dir, prompt=None)", "venv.concatenate(env_dir, prompt=None)", "venv.template(env_dir, prompt=None)", "venv.safe_repr(env_dir, prompt=None)", "venv.formatdate(env_dir, prompt=None)", "venv.resolve(env_dir, prompt=None)", "venv.getclasstree(env_dir, prompt=None)", "venv.rewrite_name(env_dir, prompt=None)", "venv.chebtrim(env_dir, prompt=None)", "venv.writedoc(env_dir, prompt=None)", "venv._convert_other(env_dir, prompt=None)", "venv.flatten_dtype(env_dir, prompt=None)", "venv.lru_cache(env_dir, prompt=None)"], "venv.create(env_dir, symlinks=False)": ["create", "venv.create(env_dir, symlinks=True)", "venv.locate(env_dir, symlinks=False)", "venv.concatenate(env_dir, symlinks=False)", "venv.template(env_dir, symlinks=False)", "venv.safe_repr(env_dir, symlinks=False)", "venv.formatdate(env_dir, symlinks=False)", "venv.resolve(env_dir, symlinks=False)", "venv.getclasstree(env_dir, symlinks=False)", "venv.rewrite_name(env_dir, symlinks=False)", "venv.chebtrim(env_dir, symlinks=False)", "venv.writedoc(env_dir, symlinks=False)", "venv._convert_other(env_dir, symlinks=False)", "venv.flatten_dtype(env_dir, symlinks=False)", "venv.lru_cache(env_dir, symlinks=False)"], "venv.create(env_dir, system_site_packages=False)": ["create", "venv.create(env_dir, system_site_packages=True)", "venv.locate(env_dir, system_site_packages=False)", "venv.concatenate(env_dir, system_site_packages=False)", "venv.template(env_dir, system_site_packages=False)", "venv.safe_repr(env_dir, system_site_packages=False)", "venv.formatdate(env_dir, system_site_packages=False)", "venv.resolve(env_dir, system_site_packages=False)", "venv.getclasstree(env_dir, system_site_packages=False)", "venv.rewrite_name(env_dir, system_site_packages=False)", "venv.chebtrim(env_dir, system_site_packages=False)", "venv.writedoc(env_dir, system_site_packages=False)", "venv._convert_other(env_dir, system_site_packages=False)", "venv.flatten_dtype(env_dir, system_site_packages=False)", "venv.lru_cache(env_dir, system_site_packages=False)"], "venv.create(env_dir, system_site_packages=False, prompt=None)": ["create", "venv.create(env_dir, system_site_packages=True, prompt=None)", "venv.locate(env_dir, system_site_packages=False, prompt=None)", "venv.concatenate(env_dir, system_site_packages=False, prompt=None)", "venv.template(env_dir, system_site_packages=False, prompt=None)", "venv.safe_repr(env_dir, system_site_packages=False, prompt=None)", "venv.formatdate(env_dir, system_site_packages=False, prompt=None)", "venv.resolve(env_dir, system_site_packages=False, prompt=None)", "venv.getclasstree(env_dir, system_site_packages=False, prompt=None)", "venv.rewrite_name(env_dir, system_site_packages=False, prompt=None)", "venv.chebtrim(env_dir, system_site_packages=False, prompt=None)", "venv.writedoc(env_dir, system_site_packages=False, prompt=None)", "venv._convert_other(env_dir, system_site_packages=False, prompt=None)", "venv.flatten_dtype(env_dir, system_site_packages=False, prompt=None)", "venv.lru_cache(env_dir, system_site_packages=False, prompt=None)"], "warnings.catch_warnings()": ["catch_warnings"], "warnings.catch_warnings(module=None)": ["catch_warnings", "warnings.catch_warnings(module=None)"], "warnings.catch_warnings(record=False)": ["catch_warnings", "warnings.catch_warnings(record=True)"], "warnings.catch_warnings(record=False, module=None)": ["catch_warnings", "warnings.catch_warnings(record=True, module=None)"], "warnings.filterwarnings(action)": ["filterwarnings", "warnings._syscmd_file(action)", "warnings.iter_modules(action)", "warnings._iter_file_finder_modules(action)", "warnings.iter_importer_modules(action)", "warnings._norm_version(action)", "warnings.iter_zipimport_modules(action)", "warnings.usage(action)", "warnings.assert_(action)", "warnings.win32_ver(action)", "warnings._syscmd_uname(action)", "warnings.urlparse(action)", "warnings.writedocs(action)", "warnings.architecture(action)", "warnings.getaddrinfo(action)"], "warnings.filterwarnings(action, append=False)": ["filterwarnings", "warnings.filterwarnings(action, append=True)", "warnings._syscmd_file(action, append=False)", "warnings.iter_modules(action, append=False)", "warnings._iter_file_finder_modules(action, append=False)", "warnings.iter_importer_modules(action, append=False)", "warnings._norm_version(action, append=False)", "warnings.iter_zipimport_modules(action, append=False)", "warnings.usage(action, append=False)", "warnings.assert_(action, append=False)", "warnings.win32_ver(action, append=False)", "warnings._syscmd_uname(action, append=False)", "warnings.urlparse(action, append=False)", "warnings.writedocs(action, append=False)", "warnings.architecture(action, append=False)"], "warnings.filterwarnings(action, category=Warning)": ["filterwarnings", "warnings._syscmd_file(action, category=Warning)", "warnings.iter_modules(action, category=Warning)", "warnings._iter_file_finder_modules(action, category=Warning)", "warnings.iter_importer_modules(action, category=Warning)", "warnings._norm_version(action, category=Warning)", "warnings.iter_zipimport_modules(action, category=Warning)", "warnings.usage(action, category=Warning)", "warnings.assert_(action, category=Warning)", "warnings.win32_ver(action, category=Warning)", "warnings._syscmd_uname(action, category=Warning)", "warnings.urlparse(action, category=Warning)", "warnings.writedocs(action, category=Warning)", "warnings.architecture(action, category=Warning)", "warnings.getaddrinfo(action, category=Warning)"], "warnings.filterwarnings(action, lineno=0)": ["filterwarnings", "warnings.filterwarnings(action, lineno='0')", "warnings._syscmd_file(action, lineno=0)", "warnings.iter_modules(action, lineno=0)", "warnings._iter_file_finder_modules(action, lineno=0)", "warnings.iter_importer_modules(action, lineno=0)", "warnings._norm_version(action, lineno=0)", "warnings.iter_zipimport_modules(action, lineno=0)", "warnings.usage(action, lineno=0)", "warnings.assert_(action, lineno=0)", "warnings.win32_ver(action, lineno=0)", "warnings._syscmd_uname(action, lineno=0)", "warnings.urlparse(action, lineno=0)", "warnings.writedocs(action, lineno=0)", "warnings.architecture(action, lineno=0)"], "warnings.filterwarnings(action, message='')": ["filterwarnings", "warnings.filterwarnings(action, message=0.0)", "warnings._syscmd_file(action, message='')", "warnings.iter_modules(action, message='')", "warnings._iter_file_finder_modules(action, message='')", "warnings.iter_importer_modules(action, message='')", "warnings._norm_version(action, message='')", "warnings.iter_zipimport_modules(action, message='')", "warnings.usage(action, message='')", "warnings.assert_(action, message='')", "warnings.win32_ver(action, message='')", "warnings._syscmd_uname(action, message='')", "warnings.urlparse(action, message='')", "warnings.writedocs(action, message='')", "warnings.architecture(action, message='')"], "warnings.filterwarnings(action, message='', append=False)": ["filterwarnings", "warnings.filterwarnings(action, message='', append=True)", "warnings.filterwarnings(action, message=0, append=False)", "warnings._syscmd_file(action, message='', append=False)", "warnings.iter_modules(action, message='', append=False)", "warnings._iter_file_finder_modules(action, message='', append=False)", "warnings.iter_importer_modules(action, message='', append=False)", "warnings._norm_version(action, message='', append=False)", "warnings.iter_zipimport_modules(action, message='', append=False)", "warnings.usage(action, message='', append=False)", "warnings.assert_(action, message='', append=False)", "warnings.win32_ver(action, message='', append=False)", "warnings._syscmd_uname(action, message='', append=False)", "warnings.urlparse(action, message='', append=False)", "warnings.writedocs(action, message='', append=False)"], "warnings.filterwarnings(action, message='', category=Warning)": ["filterwarnings", "warnings.filterwarnings(action, message=0, category=Warning)", "warnings._syscmd_file(action, message='', category=Warning)", "warnings.iter_modules(action, message='', category=Warning)", "warnings._iter_file_finder_modules(action, message='', category=Warning)", "warnings.iter_importer_modules(action, message='', category=Warning)", "warnings._norm_version(action, message='', category=Warning)", "warnings.iter_zipimport_modules(action, message='', category=Warning)", "warnings.usage(action, message='', category=Warning)", "warnings.assert_(action, message='', category=Warning)", "warnings.win32_ver(action, message='', category=Warning)", "warnings._syscmd_uname(action, message='', category=Warning)", "warnings.urlparse(action, message='', category=Warning)", "warnings.writedocs(action, message='', category=Warning)", "warnings.architecture(action, message='', category=Warning)"], "warnings.filterwarnings(action, message='', lineno=0)": ["filterwarnings", "warnings.filterwarnings(action, message=0.0, lineno='0')", "warnings._syscmd_file(action, message='', lineno=0)", "warnings.iter_modules(action, message='', lineno=0)", "warnings._iter_file_finder_modules(action, message='', lineno=0)", "warnings.iter_importer_modules(action, message='', lineno=0)", "warnings._norm_version(action, message='', lineno=0)", "warnings.iter_zipimport_modules(action, message='', lineno=0)", "warnings.usage(action, message='', lineno=0)", "warnings.assert_(action, message='', lineno=0)", "warnings.win32_ver(action, message='', lineno=0)", "warnings._syscmd_uname(action, message='', lineno=0)", "warnings.urlparse(action, message='', lineno=0)", "warnings.writedocs(action, message='', lineno=0)", "warnings.architecture(action, message='', lineno=0)"], "warnings.filterwarnings(action, message='', module='')": ["filterwarnings", "warnings.filterwarnings(action, message=0.0, module=0)", "warnings._syscmd_file(action, message='', module='')", "warnings.iter_modules(action, message='', module='')", "warnings._iter_file_finder_modules(action, message='', module='')", "warnings.iter_importer_modules(action, message='', module='')", "warnings._norm_version(action, message='', module='')", "warnings.iter_zipimport_modules(action, message='', module='')", "warnings.usage(action, message='', module='')", "warnings.assert_(action, message='', module='')", "warnings.win32_ver(action, message='', module='')", "warnings._syscmd_uname(action, message='', module='')", "warnings.urlparse(action, message='', module='')", "warnings.writedocs(action, message='', module='')", "warnings.architecture(action, message='', module='')"], "warnings.formatwarning(message, category, filename, lineno)": ["formatwarning", "warnings._formatwarning_orig(message, category, filename, lineno)", "warnings.fromstring(message, category, filename, lineno)", "warnings.showwarning(message, category, filename, lineno)", "warnings._showwarning(message, category, filename, lineno)", "warnings._showwarning_orig(message, category, filename, lineno)", "warnings._format_labels(message, category, filename, lineno)", "warnings.assert_produces_warning(message, category, filename, lineno)", "warnings.ticklabel_format(message, category, filename, lineno)", "warnings._tensor_str_with_formatter(message, category, filename, lineno)", "warnings.fromarrays(message, category, filename, lineno)", "warnings.write_array(message, category, filename, lineno)", "warnings.argpartition(message, category, filename, lineno)", "warnings._array2string_dispatcher(message, category, filename, lineno)", "warnings.figimage(message, category, filename, lineno)"], "warnings.formatwarning(message, category, filename, lineno, line=None)": ["formatwarning", "warnings.formatwarning(message, category, filename, lineno, line=None)", "warnings._formatwarning_orig(message, category, filename, lineno, line=None)", "warnings.fromstring(message, category, filename, lineno, line=None)", "warnings.showwarning(message, category, filename, lineno, line=None)", "warnings._showwarning(message, category, filename, lineno, line=None)", "warnings._showwarning_orig(message, category, filename, lineno, line=None)", "warnings._format_labels(message, category, filename, lineno, line=None)", "warnings.assert_produces_warning(message, category, filename, lineno, line=None)", "warnings.ticklabel_format(message, category, filename, lineno, line=None)", "warnings._tensor_str_with_formatter(message, category, filename, lineno, line=None)", "warnings.fromarrays(message, category, filename, lineno, line=None)", "warnings.write_array(message, category, filename, lineno, line=None)", "warnings.argpartition(message, category, filename, lineno, line=None)", "warnings._array2string_dispatcher(message, category, filename, lineno, line=None)"], "warnings.resetwarnings()": ["resetwarnings", "warnings.captureWarnings()", "warnings.assert_no_warnings()", "warnings.warning()", "warnings.formatwarning()", "warnings.filterwarnings()", "warnings.sub_warning()", "warnings._read_string()", "warnings.showwarning()", "warnings._showwarning()", "warnings.read_string1()", "warnings.runstring()", "warnings.read_string4()", "warnings.assert_warns()", "warnings.parseargs()"], "warnings.showwarning(message, category, filename, lineno)": ["showwarning", "warnings._showwarning(message, category, filename, lineno)", "warnings._showwarning_orig(message, category, filename, lineno)", "warnings.formatwarning(message, category, filename, lineno)", "warnings._formatwarning_orig(message, category, filename, lineno)", "warnings.assert_produces_warning(message, category, filename, lineno)", "warnings.fromstring(message, category, filename, lineno)", "warnings.imshow(message, category, filename, lineno)", "warnings.partition(message, category, filename, lineno)", "warnings._nanmedian_dispatcher(message, category, filename, lineno)", "warnings._partition_dispatcher(message, category, filename, lineno)", "warnings._nansum_dispatcher(message, category, filename, lineno)", "warnings._unique_dispatcher(message, category, filename, lineno)", "warnings._interp_dispatcher(message, category, filename, lineno)", "warnings._median_dispatcher(message, category, filename, lineno)"], "warnings.showwarning(message, category, filename, lineno, file=None)": ["showwarning", "warnings.showwarning(message, category, filename, lineno, file=None)", "warnings._showwarning(message, category, filename, lineno, file=None)", "warnings._showwarning_orig(message, category, filename, lineno, file=None)", "warnings.formatwarning(message, category, filename, lineno, file=None)", "warnings._formatwarning_orig(message, category, filename, lineno, file=None)", "warnings.assert_produces_warning(message, category, filename, lineno, file=None)", "warnings.fromstring(message, category, filename, lineno, file=None)", "warnings.imshow(message, category, filename, lineno, file=None)", "warnings.partition(message, category, filename, lineno, file=None)", "warnings._nanmedian_dispatcher(message, category, filename, lineno, file=None)", "warnings._partition_dispatcher(message, category, filename, lineno, file=None)", "warnings._nansum_dispatcher(message, category, filename, lineno, file=None)", "warnings._unique_dispatcher(message, category, filename, lineno, file=None)", "warnings._interp_dispatcher(message, category, filename, lineno, file=None)"], "warnings.showwarning(message, category, filename, lineno, file=None, line=None)": ["showwarning", "warnings.showwarning(message, category, filename, lineno, file=None, line=None)", "warnings._showwarning(message, category, filename, lineno, file=None, line=None)", "warnings._showwarning_orig(message, category, filename, lineno, file=None, line=None)", "warnings.formatwarning(message, category, filename, lineno, file=None, line=None)", "warnings._formatwarning_orig(message, category, filename, lineno, file=None, line=None)", "warnings.assert_produces_warning(message, category, filename, lineno, file=None, line=None)", "warnings.fromstring(message, category, filename, lineno, file=None, line=None)", "warnings.imshow(message, category, filename, lineno, file=None, line=None)", "warnings.partition(message, category, filename, lineno, file=None, line=None)", "warnings._nanmedian_dispatcher(message, category, filename, lineno, file=None, line=None)", "warnings._partition_dispatcher(message, category, filename, lineno, file=None, line=None)", "warnings._nansum_dispatcher(message, category, filename, lineno, file=None, line=None)", "warnings._unique_dispatcher(message, category, filename, lineno, file=None, line=None)", "warnings._interp_dispatcher(message, category, filename, lineno, file=None, line=None)"], "warnings.showwarning(message, category, filename, lineno, line=None)": ["showwarning", "warnings.showwarning(message, category, filename, lineno, line=None)", "warnings._showwarning(message, category, filename, lineno, line=None)", "warnings._showwarning_orig(message, category, filename, lineno, line=None)", "warnings.formatwarning(message, category, filename, lineno, line=None)", "warnings._formatwarning_orig(message, category, filename, lineno, line=None)", "warnings.assert_produces_warning(message, category, filename, lineno, line=None)", "warnings.fromstring(message, category, filename, lineno, line=None)", "warnings.imshow(message, category, filename, lineno, line=None)", "warnings.partition(message, category, filename, lineno, line=None)", "warnings._nanmedian_dispatcher(message, category, filename, lineno, line=None)", "warnings._partition_dispatcher(message, category, filename, lineno, line=None)", "warnings._nansum_dispatcher(message, category, filename, lineno, line=None)", "warnings._unique_dispatcher(message, category, filename, lineno, line=None)", "warnings._interp_dispatcher(message, category, filename, lineno, line=None)"], "warnings.simplefilter(action)": ["simplefilter", "warnings.split(action)", "warnings._make_zipfile(action)", "warnings.new_compiler(action)", "warnings.compile_path(action)", "warnings.setitimer(action)", "warnings.subplots(action)", "warnings.inherit_names(action)", "warnings.register_cmap(action)", "warnings.intersect1d(action)", "warnings.compile_file(action)", "warnings.finditer(action)", "warnings.create(action)", "warnings._return_output(action)", "warnings.network(action)"], "warnings.simplefilter(action, append=False)": ["simplefilter", "warnings.simplefilter(action, append=True)", "warnings.split(action, append=False)", "warnings._make_zipfile(action, append=False)", "warnings.new_compiler(action, append=False)", "warnings.compile_path(action, append=False)", "warnings.setitimer(action, append=False)", "warnings.subplots(action, append=False)", "warnings.inherit_names(action, append=False)", "warnings.register_cmap(action, append=False)", "warnings.intersect1d(action, append=False)", "warnings.compile_file(action, append=False)", "warnings.finditer(action, append=False)", "warnings.create(action, append=False)", "warnings._return_output(action, append=False)"], "warnings.simplefilter(action, category=Warning)": ["simplefilter", "warnings.split(action, category=Warning)", "warnings._make_zipfile(action, category=Warning)", "warnings.new_compiler(action, category=Warning)", "warnings.compile_path(action, category=Warning)", "warnings.setitimer(action, category=Warning)", "warnings.subplots(action, category=Warning)", "warnings.inherit_names(action, category=Warning)", "warnings.register_cmap(action, category=Warning)", "warnings.intersect1d(action, category=Warning)", "warnings.compile_file(action, category=Warning)", "warnings.finditer(action, category=Warning)", "warnings.create(action, category=Warning)", "warnings._return_output(action, category=Warning)", "warnings.network(action, category=Warning)"], "warnings.simplefilter(action, category=Warning, append=False)": ["simplefilter", "warnings.simplefilter(action, category=Warning, append=True)", "warnings.split(action, category=Warning, append=False)", "warnings._make_zipfile(action, category=Warning, append=False)", "warnings.new_compiler(action, category=Warning, append=False)", "warnings.compile_path(action, category=Warning, append=False)", "warnings.setitimer(action, category=Warning, append=False)", "warnings.subplots(action, category=Warning, append=False)", "warnings.inherit_names(action, category=Warning, append=False)", "warnings.register_cmap(action, category=Warning, append=False)", "warnings.intersect1d(action, category=Warning, append=False)", "warnings.compile_file(action, category=Warning, append=False)", "warnings.finditer(action, category=Warning, append=False)", "warnings.create(action, category=Warning, append=False)", "warnings._return_output(action, category=Warning, append=False)"], "warnings.simplefilter(action, category=Warning, lineno=0)": ["simplefilter", "warnings.simplefilter(action, category=Warning, lineno='0')", "warnings.split(action, category=Warning, lineno=0)", "warnings._make_zipfile(action, category=Warning, lineno=0)", "warnings.new_compiler(action, category=Warning, lineno=0)", "warnings.compile_path(action, category=Warning, lineno=0)", "warnings.setitimer(action, category=Warning, lineno=0)", "warnings.subplots(action, category=Warning, lineno=0)", "warnings.inherit_names(action, category=Warning, lineno=0)", "warnings.register_cmap(action, category=Warning, lineno=0)", "warnings.intersect1d(action, category=Warning, lineno=0)", "warnings.compile_file(action, category=Warning, lineno=0)", "warnings.finditer(action, category=Warning, lineno=0)", "warnings.create(action, category=Warning, lineno=0)", "warnings._return_output(action, category=Warning, lineno=0)"], "warnings.simplefilter(action, category=Warning, lineno=0, append=False)": ["simplefilter", "warnings.simplefilter(action, category=Warning, lineno=0, append=True)", "warnings.simplefilter(action, category=Warning, lineno='0', append=False)", "warnings.split(action, category=Warning, lineno=0, append=False)", "warnings._make_zipfile(action, category=Warning, lineno=0, append=False)", "warnings.new_compiler(action, category=Warning, lineno=0, append=False)", "warnings.compile_path(action, category=Warning, lineno=0, append=False)", "warnings.setitimer(action, category=Warning, lineno=0, append=False)", "warnings.subplots(action, category=Warning, lineno=0, append=False)", "warnings.inherit_names(action, category=Warning, lineno=0, append=False)", "warnings.register_cmap(action, category=Warning, lineno=0, append=False)", "warnings.intersect1d(action, category=Warning, lineno=0, append=False)", "warnings.compile_file(action, category=Warning, lineno=0, append=False)", "warnings.finditer(action, category=Warning, lineno=0, append=False)", "warnings.create(action, category=Warning, lineno=0, append=False)"], "warnings.simplefilter(action, lineno=0)": ["simplefilter", "warnings.simplefilter(action, lineno='0')", "warnings.split(action, lineno=0)", "warnings._make_zipfile(action, lineno=0)", "warnings.new_compiler(action, lineno=0)", "warnings.compile_path(action, lineno=0)", "warnings.setitimer(action, lineno=0)", "warnings.subplots(action, lineno=0)", "warnings.inherit_names(action, lineno=0)", "warnings.register_cmap(action, lineno=0)", "warnings.intersect1d(action, lineno=0)", "warnings.compile_file(action, lineno=0)", "warnings.finditer(action, lineno=0)", "warnings.create(action, lineno=0)", "warnings._return_output(action, lineno=0)"], "warnings.simplefilter(action, lineno=0, append=False)": ["simplefilter", "warnings.simplefilter(action, lineno=0, append=True)", "warnings.simplefilter(action, lineno='0', append=False)", "warnings.split(action, lineno=0, append=False)", "warnings._make_zipfile(action, lineno=0, append=False)", "warnings.new_compiler(action, lineno=0, append=False)", "warnings.compile_path(action, lineno=0, append=False)", "warnings.setitimer(action, lineno=0, append=False)", "warnings.subplots(action, lineno=0, append=False)", "warnings.inherit_names(action, lineno=0, append=False)", "warnings.register_cmap(action, lineno=0, append=False)", "warnings.intersect1d(action, lineno=0, append=False)", "warnings.compile_file(action, lineno=0, append=False)", "warnings.finditer(action, lineno=0, append=False)", "warnings.create(action, lineno=0, append=False)"], "warnings.warn(message)": ["warn", "warnings._warn(message)", "warnings.towards(message)", "warnings.what(message)", "warnings.main(message)", "warnings.wait(message)", "warnings.variance(message)", "warnings.nanargmin(message)", "warnings.pvariance(message)", "warnings.array(message)", "warnings.parse(message)", "warnings.print_last(message)", "warnings.vander(message)", "warnings.unwrap(message)", "warnings.tracer(message)"], "warnings.warn(message, category=None)": ["warn", "warnings.warn(message, category=None)", "warnings._warn(message, category=None)", "warnings.towards(message, category=None)", "warnings.what(message, category=None)", "warnings.main(message, category=None)", "warnings.wait(message, category=None)", "warnings.variance(message, category=None)", "warnings.nanargmin(message, category=None)", "warnings.pvariance(message, category=None)", "warnings.array(message, category=None)", "warnings.parse(message, category=None)", "warnings.print_last(message, category=None)", "warnings.vander(message, category=None)", "warnings.unwrap(message, category=None)"], "warnings.warn(message, category=None, source=None)": ["warn", "warnings.warn(message, category=None, source=None)", "warnings._warn(message, category=None, source=None)", "warnings.towards(message, category=None, source=None)", "warnings.what(message, category=None, source=None)", "warnings.main(message, category=None, source=None)", "warnings.wait(message, category=None, source=None)", "warnings.variance(message, category=None, source=None)", "warnings.nanargmin(message, category=None, source=None)", "warnings.pvariance(message, category=None, source=None)", "warnings.array(message, category=None, source=None)", "warnings.parse(message, category=None, source=None)", "warnings.print_last(message, category=None, source=None)", "warnings.vander(message, category=None, source=None)", "warnings.unwrap(message, category=None, source=None)"], "warnings.warn(message, category=None, stacklevel=1)": ["warn", "warnings.warn(message, category=None, stacklevel=1)", "warnings.warn(message, category=None, stacklevel='1')", "warnings._warn(message, category=None, stacklevel=1)", "warnings.towards(message, category=None, stacklevel=1)", "warnings.what(message, category=None, stacklevel=1)", "warnings.main(message, category=None, stacklevel=1)", "warnings.wait(message, category=None, stacklevel=1)", "warnings.variance(message, category=None, stacklevel=1)", "warnings.nanargmin(message, category=None, stacklevel=1)", "warnings.pvariance(message, category=None, stacklevel=1)", "warnings.array(message, category=None, stacklevel=1)", "warnings.parse(message, category=None, stacklevel=1)", "warnings.print_last(message, category=None, stacklevel=1)", "warnings.vander(message, category=None, stacklevel=1)"], "warnings.warn(message, source=None)": ["warn", "warnings.warn(message, source=None)", "warnings._warn(message, source=None)", "warnings.towards(message, source=None)", "warnings.what(message, source=None)", "warnings.main(message, source=None)", "warnings.wait(message, source=None)", "warnings.variance(message, source=None)", "warnings.nanargmin(message, source=None)", "warnings.pvariance(message, source=None)", "warnings.array(message, source=None)", "warnings.parse(message, source=None)", "warnings.print_last(message, source=None)", "warnings.vander(message, source=None)", "warnings.unwrap(message, source=None)"], "warnings.warn(message, stacklevel=1)": ["warn", "warnings.warn(message, stacklevel='1')", "warnings._warn(message, stacklevel=1)", "warnings.towards(message, stacklevel=1)", "warnings.what(message, stacklevel=1)", "warnings.main(message, stacklevel=1)", "warnings.wait(message, stacklevel=1)", "warnings.variance(message, stacklevel=1)", "warnings.nanargmin(message, stacklevel=1)", "warnings.pvariance(message, stacklevel=1)", "warnings.array(message, stacklevel=1)", "warnings.parse(message, stacklevel=1)", "warnings.print_last(message, stacklevel=1)", "warnings.vander(message, stacklevel=1)", "warnings.unwrap(message, stacklevel=1)"], "warnings.warn_explicit(message, category, filename, lineno)": ["warn_explicit"], "warnings.warn_explicit(message, category, filename, lineno, source=None)": ["warn_explicit", "warnings.warn_explicit(message, category, filename, lineno, source=None)"], "warnings_recorder.run(test)": ["run"], "watched_file_handler.emit(record)": ["emit"], "watched_file_handler.reopenIfNeeded()": ["reopenIfNeeded"], "wave.open(file)": ["open", "wave._open(file)", "wave.open_latin1(file)", "wave.popen(file)", "wave.bltn_open(file)", "wave.OpenWrapper(file)", "wave._builtin_open(file)", "wave.urlopen(file)", "wave.pie(file)", "wave._run_code(file)", "wave.compress(file)", "wave._popen(file)", "wave.byte_compile(file)", "wave.boxplot(file)", "wave.pen(file)"], "wave.open(file, mode=None)": ["open", "wave.open(file, mode=None)", "wave._open(file, mode=None)", "wave.open_latin1(file, mode=None)", "wave.popen(file, mode=None)", "wave.bltn_open(file, mode=None)", "wave.OpenWrapper(file, mode=None)", "wave._builtin_open(file, mode=None)", "wave.urlopen(file, mode=None)", "wave.pie(file, mode=None)", "wave._run_code(file, mode=None)", "wave.compress(file, mode=None)", "wave._popen(file, mode=None)", "wave.byte_compile(file, mode=None)", "wave.boxplot(file, mode=None)"], "wave.openfp(file, mode)": ["openfp", "wave.open(file, mode)", "wave.urlopen(file, mode)", "wave.compress_nd(file, mode)", "wave.compile(file, mode)", "wave._ptp(file, mode)", "wave.ptp(file, mode)", "wave.compile_file(file, mode)", "wave.new_compiler(file, mode)", "wave.pie(file, mode)", "wave.contourf(file, mode)", "wave.isneginf(file, mode)", "wave.isposinf(file, mode)", "wave.showinfo(file, mode)", "wave.propagate_qconfig_(file, mode)"], "weakref.ProxyType": ["weakref.ProxyType"], "weakref.ProxyTypes": ["weakref.ProxyTypes"], "weakref.ReferenceType": ["weakref.ReferenceType"], "weakref.WeakKeyDictionary()": ["WeakKeyDictionary"], "weakref.WeakKeyDictionary(dict)": ["WeakKeyDictionary"], "weakref.WeakMethod(method)": ["WeakMethod"], "weakref.WeakSet(elements)": ["WeakSet"], "weakref.WeakValueDictionary()": ["WeakValueDictionary"], "weakref.WeakValueDictionary(dict)": ["WeakValueDictionary"], "weakref.finalize(obj, func, *args, **kwargs)": ["finalize"], "weakref.getweakrefcount(object)": ["getweakrefcount", "weakref._needs_refcount(object)", "weakref._getaction(object)", "weakref.getcontext(object)", "weakref._assert_valid_refcount(object)", "weakref.getargspec(object)", "weakref._get_layout(object)", "weakref._getconv(object)", "weakref.get_parent_map(object)", "weakref.getcomments(object)", "weakref.getaddrinfo(object)", "weakref.getregentry(object)", "weakref.get_section(object)", "weakref.activeCount(object)", "weakref.isgeneratorfunction(object)"], "weakref.getweakrefs(object)": ["getweakrefs"], "weakref.proxy(object, callback)": ["proxy"], "weakref.ref(object)": ["ref"], "weakref.ref(object, callback)": ["ref"], "webbrowser.Error": ["webbrowser.Error"], "webbrowser.get()": ["get", "webbrowser.getp()", "webbrowser.__ge__()", "webbrowser.ge()", "webbrowser.gt()", "webbrowser.__gt__()", "webbrowser.getenv()", "webbrowser.getdoc()", "webbrowser.jet()", "webbrowser.det()", "webbrowser.getpen()", "webbrowser.getcwd()", "webbrowser.digest()", "webbrowser.getmro()", "webbrowser.getopt()"], "webbrowser.get(using=None)": ["get", "webbrowser.get(using=None)", "webbrowser.getp(using=None)", "webbrowser.__ge__(using=None)", "webbrowser.ge(using=None)", "webbrowser.gt(using=None)", "webbrowser.__gt__(using=None)", "webbrowser.getenv(using=None)", "webbrowser.getdoc(using=None)", "webbrowser.jet(using=None)", "webbrowser.det(using=None)", "webbrowser.getpen(using=None)", "webbrowser.getcwd(using=None)", "webbrowser.digest(using=None)", "webbrowser.getmro(using=None)"], "webbrowser.open(url)": ["open", "webbrowser._open(url)", "webbrowser.open_latin1(url)", "webbrowser.popen(url)", "webbrowser.bltn_open(url)", "webbrowser.OpenWrapper(url)", "webbrowser._builtin_open(url)", "webbrowser.urlopen(url)", "webbrowser.pie(url)", "webbrowser._run_code(url)", "webbrowser.compress(url)", "webbrowser._popen(url)", "webbrowser.byte_compile(url)", "webbrowser.boxplot(url)", "webbrowser.pen(url)"], "webbrowser.open(url, autoraise=True)": ["open", "webbrowser.open(url, autoraise=False)", "webbrowser._open(url, autoraise=True)", "webbrowser.open_latin1(url, autoraise=True)", "webbrowser.popen(url, autoraise=True)", "webbrowser.bltn_open(url, autoraise=True)", "webbrowser.OpenWrapper(url, autoraise=True)", "webbrowser._builtin_open(url, autoraise=True)", "webbrowser.urlopen(url, autoraise=True)", "webbrowser.pie(url, autoraise=True)", "webbrowser._run_code(url, autoraise=True)", "webbrowser.compress(url, autoraise=True)", "webbrowser._popen(url, autoraise=True)", "webbrowser.byte_compile(url, autoraise=True)", "webbrowser.boxplot(url, autoraise=True)"], "webbrowser.open(url, new=0)": ["open", "webbrowser.open(url, new='0')", "webbrowser._open(url, new=0)", "webbrowser.open_latin1(url, new=0)", "webbrowser.popen(url, new=0)", "webbrowser.bltn_open(url, new=0)", "webbrowser.OpenWrapper(url, new=0)", "webbrowser._builtin_open(url, new=0)", "webbrowser.urlopen(url, new=0)", "webbrowser.pie(url, new=0)", "webbrowser._run_code(url, new=0)", "webbrowser.compress(url, new=0)", "webbrowser._popen(url, new=0)", "webbrowser.byte_compile(url, new=0)", "webbrowser.boxplot(url, new=0)"], "webbrowser.open(url, new=0, autoraise=True)": ["open", "webbrowser.open(url, new=0, autoraise=False)", "webbrowser.open(url, new='0', autoraise=True)", "webbrowser._open(url, new=0, autoraise=True)", "webbrowser.open_latin1(url, new=0, autoraise=True)", "webbrowser.popen(url, new=0, autoraise=True)", "webbrowser.bltn_open(url, new=0, autoraise=True)", "webbrowser.OpenWrapper(url, new=0, autoraise=True)", "webbrowser._builtin_open(url, new=0, autoraise=True)", "webbrowser.urlopen(url, new=0, autoraise=True)", "webbrowser.pie(url, new=0, autoraise=True)", "webbrowser._run_code(url, new=0, autoraise=True)", "webbrowser.compress(url, new=0, autoraise=True)", "webbrowser._popen(url, new=0, autoraise=True)", "webbrowser.byte_compile(url, new=0, autoraise=True)"], "webbrowser.open_new(url)": ["open_new", "webbrowser.open_new_tab(url)", "webbrowser.bltn_open(url)", "webbrowser._open(url)", "webbrowser.open(url)", "webbrowser.NewType(url)", "webbrowser._maybe_open(url)", "webbrowser.open_memmap(url)", "webbrowser.open_latin1(url)", "webbrowser.master_open(url)", "webbrowser._popen(url)", "webbrowser.newer(url)", "webbrowser.popen(url)", "webbrowser._new_PeriodIndex(url)", "webbrowser.open_connection(url)"], "webbrowser.open_new_tab(url)": ["open_new_tab", "webbrowser.open_new(url)", "webbrowser.bltn_open(url)", "webbrowser._py_enter_task(url)", "webbrowser._non_printable_finder(url)", "webbrowser.__newobj__(url)", "webbrowser._open_terminal(url)", "webbrowser.expandtabs(url)", "webbrowser.print_line(url)", "webbrowser._maybe_open(url)", "webbrowser.slave_open(url)", "webbrowser._take_nd_object(url)", "webbrowser.get_spawning_popen(url)", "webbrowser.openpty(url)", "webbrowser.NewType(url)"], "webbrowser.register(name, constructor)": ["register", "webbrowser._register(name, constructor)", "webbrowser.deregister(name, constructor)", "webbrowser.register_kl(name, constructor)", "webbrowser._abc_register(name, constructor)", "webbrowser._register_type(name, constructor)", "webbrowser._register_task(name, constructor)", "webbrowser.register_cmap(name, constructor)", "webbrowser.register_shape(name, constructor)", "webbrowser.registerResult(name, constructor)", "webbrowser.register_error(name, constructor)", "webbrowser._register_types(name, constructor)", "webbrowser.easter(name, constructor)", "webbrowser._c_register_task(name, constructor)", "webbrowser._unregister_task(name, constructor)"], "webbrowser.register(name, constructor, instance=None)": ["register", "webbrowser.register(name, constructor, instance=None)", "webbrowser._register(name, constructor, instance=None)", "webbrowser.deregister(name, constructor, instance=None)", "webbrowser.register_kl(name, constructor, instance=None)", "webbrowser._abc_register(name, constructor, instance=None)", "webbrowser._register_type(name, constructor, instance=None)", "webbrowser._register_task(name, constructor, instance=None)", "webbrowser.register_cmap(name, constructor, instance=None)", "webbrowser.register_shape(name, constructor, instance=None)", "webbrowser.registerResult(name, constructor, instance=None)", "webbrowser.register_error(name, constructor, instance=None)", "webbrowser._register_types(name, constructor, instance=None)", "webbrowser.easter(name, constructor, instance=None)", "webbrowser._c_register_task(name, constructor, instance=None)"], "webbrowser.register(name, constructor, instance=None, preferred=False)": ["register", "webbrowser.register(name, constructor, instance=None, preferred=True)", "webbrowser._register(name, constructor, instance=None, preferred=False)", "webbrowser.deregister(name, constructor, instance=None, preferred=False)", "webbrowser.register_kl(name, constructor, instance=None, preferred=False)", "webbrowser._abc_register(name, constructor, instance=None, preferred=False)", "webbrowser._register_type(name, constructor, instance=None, preferred=False)", "webbrowser._register_task(name, constructor, instance=None, preferred=False)", "webbrowser.register_cmap(name, constructor, instance=None, preferred=False)", "webbrowser.register_shape(name, constructor, instance=None, preferred=False)", "webbrowser.registerResult(name, constructor, instance=None, preferred=False)", "webbrowser.register_error(name, constructor, instance=None, preferred=False)", "webbrowser._register_types(name, constructor, instance=None, preferred=False)", "webbrowser.easter(name, constructor, instance=None, preferred=False)", "webbrowser._c_register_task(name, constructor, instance=None, preferred=False)"], "webbrowser.register(name, constructor, preferred=False)": ["register", "webbrowser.register(name, constructor, preferred=True)", "webbrowser._register(name, constructor, preferred=False)", "webbrowser.deregister(name, constructor, preferred=False)", "webbrowser.register_kl(name, constructor, preferred=False)", "webbrowser._abc_register(name, constructor, preferred=False)", "webbrowser._register_type(name, constructor, preferred=False)", "webbrowser._register_task(name, constructor, preferred=False)", "webbrowser.register_cmap(name, constructor, preferred=False)", "webbrowser.register_shape(name, constructor, preferred=False)", "webbrowser.registerResult(name, constructor, preferred=False)", "webbrowser.register_error(name, constructor, preferred=False)", "webbrowser._register_types(name, constructor, preferred=False)", "webbrowser.easter(name, constructor, preferred=False)", "webbrowser._c_register_task(name, constructor, preferred=False)"], "widget.add(child, **kw)": ["add"], "widget.bbox(item)": ["bbox"], "widget.bbox(item, column=None)": ["bbox", "widget.bbox(item, column=None)"], "widget.column(column, **kw)": ["column"], "widget.column(column, **kw, option=None)": ["column", "widget.column(column, **kw, option=None)"], "widget.current(newindex=None)": ["current", "widget.current(newindex=None)"], "widget.delete(*items)": ["delete"], "widget.detach(*items)": ["detach"], "widget.enable_traversal()": ["enable_traversal"], "widget.exists(item)": ["exists"], "widget.focus()": ["focus"], "widget.focus(item=None)": ["focus", "widget.focus(item=None)"], "widget.get()": ["get"], "widget.get_children()": ["get_children"], "widget.get_children(item=None)": ["get_children", "widget.get_children(item=None)"], "widget.heading(column, **kw)": ["heading"], "widget.heading(column, **kw, option=None)": ["heading", "widget.heading(column, **kw, option=None)"], "widget.identify(x, y)": ["identify"], "widget.identify_column(x)": ["identify_column"], "widget.identify_element(x, y)": ["identify_element"], "widget.identify_region(x, y)": ["identify_region"], "widget.identify_row(y)": ["identify_row"], "widget.index(item)": ["index"], "widget.index(tab_id)": ["index"], "widget.insert(parent, index, **kw)": ["insert"], "widget.insert(parent, index, **kw, iid=None)": ["insert", "widget.insert(parent, index, **kw, iid=None)"], "widget.insert(pos, child, **kw)": ["insert"], "widget.instate(statespec, *args, **kw)": ["instate"], "widget.item(item, **kw)": ["item"], "widget.item(item, **kw, option=None)": ["item", "widget.item(item, **kw, option=None)"], "widget.move(item, parent, index)": ["move"], "widget.next(item)": ["next"], "widget.parent(item)": ["parent"], "widget.prev(item)": ["prev"], "widget.reattach(item, parent, index)": ["reattach"], "widget.see(item)": ["see"], "widget.selection()": ["selection"], "widget.selection(items=None)": ["selection", "widget.selection(items=None)"], "widget.selection_add(*items)": ["selection_add"], "widget.selection_remove(*items)": ["selection_remove"], "widget.selection_set(*items)": ["selection_set"], "widget.selection_toggle(*items)": ["selection_toggle"], "widget.set(item)": ["set"], "widget.set(item, column=None)": ["set", "widget.set(item, column=None)"], "widget.set(item, column=None, value=None)": ["set", "widget.set(item, column=None, value=None)"], "widget.set(item, value=None)": ["set", "widget.set(item, value=None)"], "widget.set(value)": ["set"], "widget.set_children(item, *newchildren)": ["set_children"], "widget.start()": ["start"], "widget.start(interval=None)": ["start", "widget.start(interval=None)"], "widget.state()": ["state"], "widget.state(statespec=None)": ["state", "widget.state(statespec=None)"], "widget.step()": ["step"], "widget.step(amount=None)": ["step", "widget.step(amount=None)"], "widget.stop()": ["stop"], "widget.tab(tab_id, **kw)": ["tab"], "widget.tabs()": ["tabs"], "widget.tag_bind(tagname)": ["tag_bind"], "widget.tag_bind(tagname, callback=None)": ["tag_bind", "widget.tag_bind(tagname, callback=None)"], "widget.tag_bind(tagname, sequence=None, callback=None)": ["tag_bind", "widget.tag_bind(tagname, sequence=None, callback=None)"], "widget.tag_has(tagname)": ["tag_has"], "widget.tag_has(tagname, item=None)": ["tag_has", "widget.tag_has(tagname, item=None)"], "widget.xview(*args)": ["xview"], "widget.yview(*args)": ["yview"], "window.addch(ch)": ["addch"], "window.addch(ch, attr)": ["addch"], "window.addch(y, x, ch)": ["addch"], "window.addch(y, x, ch, attr)": ["addch"], "window.addnstr(str, n)": ["addnstr"], "window.addnstr(str, n, attr)": ["addnstr"], "window.addnstr(y, x, str, n)": ["addnstr"], "window.addnstr(y, x, str, n, attr)": ["addnstr"], "window.addstr(str)": ["addstr"], "window.addstr(str, attr)": ["addstr"], "window.addstr(y, x, str)": ["addstr"], "window.addstr(y, x, str, attr)": ["addstr"], "window.attroff(attr)": ["attroff"], "window.attron(attr)": ["attron"], "window.attrset(attr)": ["attrset"], "window.bkgd(ch, attr)": ["bkgd"], "window.bkgdset(ch)": ["bkgdset"], "window.bkgdset(ch, attr)": ["bkgdset"], "window.border()": ["border"], "window.border(ls)": ["border"], "window.border(ls, rs)": ["border"], "window.border(ls, rs, ts)": ["border"], "window.border(ls, rs, ts, bs)": ["border"], "window.border(ls, rs, ts, bs, tl)": ["border"], "window.border(ls, rs, ts, bs, tl, tr)": ["border"], "window.border(ls, rs, ts, bs, tl, tr, bl)": ["border"], "window.border(ls, rs, ts, bs, tl, tr, bl, br)": ["border"], "window.box(vertch, horch)": ["box"], "window.chgat(attr)": ["chgat"], "window.chgat(num, attr)": ["chgat"], "window.chgat(y, x, attr)": ["chgat"], "window.chgat(y, x, num, attr)": ["chgat"], "window.clear()": ["clear"], "window.clearok(flag)": ["clearok"], "window.clrtobot()": ["clrtobot"], "window.clrtoeol()": ["clrtoeol"], "window.cursyncup()": ["cursyncup"], "window.delch(y)": ["delch"], "window.delch(y, x)": ["delch"], "window.deleteln()": ["deleteln"], "window.derwin(begin_y, begin_x)": ["derwin"], "window.echochar(ch)": ["echochar"], "window.echochar(ch, attr)": ["echochar"], "window.enclose(y, x)": ["enclose"], "window.encoding": ["window.encoding"], "window.erase()": ["erase"], "window.get_wch(y)": ["get_wch"], "window.get_wch(y, x)": ["get_wch"], "window.getbegyx()": ["getbegyx"], "window.getbkgd()": ["getbkgd"], "window.getch(y)": ["getch"], "window.getch(y, x)": ["getch"], "window.getkey(y)": ["getkey"], "window.getkey(y, x)": ["getkey"], "window.getmaxyx()": ["getmaxyx"], "window.getparyx()": ["getparyx"], "window.getstr()": ["getstr"], "window.getstr(n)": ["getstr"], "window.getstr(y, x)": ["getstr"], "window.getstr(y, x, n)": ["getstr"], "window.getyx()": ["getyx"], "window.hline(ch, n)": ["hline"], "window.hline(y, x, ch, n)": ["hline"], "window.idcok(flag)": ["idcok"], "window.idlok(flag)": ["idlok"], "window.immedok(flag)": ["immedok"], "window.inch(y)": ["inch"], "window.inch(y, x)": ["inch"], "window.insch(ch)": ["insch"], "window.insch(ch, attr)": ["insch"], "window.insch(y, x, ch)": ["insch"], "window.insch(y, x, ch, attr)": ["insch"], "window.insdelln(nlines)": ["insdelln"], "window.insertln()": ["insertln"], "window.insnstr(str, n)": ["insnstr"], "window.insnstr(str, n, attr)": ["insnstr"], "window.insnstr(y, x, str, n)": ["insnstr"], "window.insnstr(y, x, str, n, attr)": ["insnstr"], "window.insstr(str)": ["insstr"], "window.insstr(str, attr)": ["insstr"], "window.insstr(y, x, str)": ["insstr"], "window.insstr(y, x, str, attr)": ["insstr"], "window.instr(n)": ["instr"], "window.instr(y, x)": ["instr"], "window.instr(y, x, n)": ["instr"], "window.is_linetouched(line)": ["is_linetouched"], "window.keypad(flag)": ["keypad"], "window.leaveok(flag)": ["leaveok"], "window.move(new_y, new_x)": ["move"], "window.mvderwin(y, x)": ["mvderwin"], "window.mvwin(new_y, new_x)": ["mvwin"], "window.notimeout(flag)": ["notimeout"], "window.noutrefresh()": ["noutrefresh"], "window.overlay(destwin, sminrow, smincol, dminrow, dmincol, dmaxrow)": ["overlay"], "window.overlay(destwin, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol)": ["overlay"], "window.overwrite(destwin, sminrow, smincol, dminrow, dmincol, dmaxrow)": ["overwrite"], "window.putwin(file)": ["putwin"], "window.redrawln(beg, num)": ["redrawln"], "window.redrawwin()": ["redrawwin"], "window.refresh(pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol)": ["refresh"], "window.resize(nlines, ncols)": ["resize"], "window.scroll()": ["scroll"], "window.scroll(lines=1)": ["scroll", "window.scroll(lines='1')"], "window.scrollok(flag)": ["scrollok"], "window.setscrreg(top, bottom)": ["setscrreg"], "window.standend()": ["standend"], "window.standout()": ["standout"], "window.subpad(begin_y, begin_x)": ["subpad"], "window.subwin(nlines, ncols, begin_y, begin_x)": ["subwin"], "window.syncdown()": ["syncdown"], "window.syncok(flag)": ["syncok"], "window.syncup()": ["syncup"], "window.timeout(delay)": ["timeout"], "window.touchline(start, count)": ["touchline"], "window.touchline(start, count, changed)": ["touchline"], "window.touchwin()": ["touchwin"], "window.untouchwin()": ["untouchwin"], "window.vline(ch, n)": ["vline"], "window.vline(y, x, ch, n)": ["vline"], "windows_proactor_event_loop_policy.add_child_handler(pid, callback, *args)": ["add_child_handler"], "windows_proactor_event_loop_policy.attach_loop(loop)": ["attach_loop"], "windows_proactor_event_loop_policy.remove_child_handler(pid)": ["remove_child_handler"], "winreg.ConnectRegistry(computer_name, key)": ["ConnectRegistry"], "winreg.CreateKeyEx(key, sub_key)": ["CreateKeyEx"], "winreg.CreateKeyEx(key, sub_key, access=KEY_WRITE)": ["CreateKeyEx"], "winreg.CreateKeyEx(key, sub_key, reserved=0)": ["CreateKeyEx", "winreg.CreateKeyEx(key, sub_key, reserved='0')"], "winreg.DeleteKey(key, sub_key)": ["DeleteKey"], "winreg.DeleteKeyEx(key, sub_key)": ["DeleteKeyEx"], "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY)": ["DeleteKeyEx"], "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved=0)": ["DeleteKeyEx", "winreg.DeleteKeyEx(key, sub_key, access=KEY_WOW64_64KEY, reserved='0')"], "winreg.DeleteKeyEx(key, sub_key, reserved=0)": ["DeleteKeyEx", "winreg.DeleteKeyEx(key, sub_key, reserved='0')"], "winreg.DeleteValue(key, value)": ["DeleteValue"], "winreg.DisableReflectionKey(key)": ["DisableReflectionKey"], "winreg.EnableReflectionKey(key)": ["EnableReflectionKey"], "winreg.EnumKey(key, index)": ["EnumKey"], "winreg.EnumValue(key, index)": ["EnumValue"], "winreg.ExpandEnvironmentStrings(str)": ["ExpandEnvironmentStrings"], "winreg.FlushKey(key)": ["FlushKey"], "winreg.HKEY_CLASSES_ROOT": ["winreg.HKEY_CLASSES_ROOT"], "winreg.HKEY_CURRENT_CONFIG": ["winreg.HKEY_CURRENT_CONFIG"], "winreg.HKEY_CURRENT_USER": ["winreg.HKEY_CURRENT_USER"], "winreg.HKEY_DYN_DATA": ["winreg.HKEY_DYN_DATA"], "winreg.HKEY_PERFORMANCE_DATA": ["winreg.HKEY_PERFORMANCE_DATA"], "winreg.HKEY_USERS": ["winreg.HKEY_USERS"], "winreg.KEY_CREATE_LINK": ["winreg.KEY_CREATE_LINK"], "winreg.KEY_CREATE_SUB_KEY": ["winreg.KEY_CREATE_SUB_KEY"], "winreg.KEY_ENUMERATE_SUB_KEYS": ["winreg.KEY_ENUMERATE_SUB_KEYS"], "winreg.KEY_EXECUTE": ["winreg.KEY_EXECUTE"], "winreg.KEY_NOTIFY": ["winreg.KEY_NOTIFY"], "winreg.KEY_QUERY_VALUE": ["winreg.KEY_QUERY_VALUE"], "winreg.KEY_SET_VALUE": ["winreg.KEY_SET_VALUE"], "winreg.KEY_WOW64_32KEY": ["winreg.KEY_WOW64_32KEY"], "winreg.KEY_WOW64_64KEY": ["winreg.KEY_WOW64_64KEY"], "winreg.LoadKey(key, sub_key, file_name)": ["LoadKey"], "winreg.OpenKey(key, sub_key, access=KEY_READ)": ["OpenKey"], "winreg.OpenKey(key, sub_key, reserved=0)": ["OpenKey", "winreg.OpenKey(key, sub_key, reserved='0')"], "winreg.OpenKeyEx(key, sub_key, access=KEY_READ)": ["OpenKeyEx"], "winreg.OpenKeyEx(key, sub_key, reserved=0)": ["OpenKeyEx", "winreg.OpenKeyEx(key, sub_key, reserved='0')"], "winreg.QueryInfoKey(key)": ["QueryInfoKey"], "winreg.REG_BINARY": ["winreg.REG_BINARY"], "winreg.REG_DWORD": ["winreg.REG_DWORD"], "winreg.REG_DWORD_BIG_ENDIAN": ["winreg.REG_DWORD_BIG_ENDIAN"], "winreg.REG_DWORD_LITTLE_ENDIAN": ["winreg.REG_DWORD_LITTLE_ENDIAN"], "winreg.REG_EXPAND_SZ": ["winreg.REG_EXPAND_SZ"], "winreg.REG_FULL_RESOURCE_DESCRIPTOR": ["winreg.REG_FULL_RESOURCE_DESCRIPTOR"], "winreg.REG_LINK": ["winreg.REG_LINK"], "winreg.REG_MULTI_SZ": ["winreg.REG_MULTI_SZ"], "winreg.REG_NONE": ["winreg.REG_NONE"], "winreg.REG_QWORD": ["winreg.REG_QWORD"], "winreg.REG_QWORD_LITTLE_ENDIAN": ["winreg.REG_QWORD_LITTLE_ENDIAN"], "winreg.REG_RESOURCE_LIST": ["winreg.REG_RESOURCE_LIST"], "winreg.REG_RESOURCE_REQUIREMENTS_LIST": ["winreg.REG_RESOURCE_REQUIREMENTS_LIST"], "winreg.REG_SZ": ["winreg.REG_SZ"], "winreg.SaveKey(key, file_name)": ["SaveKey"], "winreg.SetValue(key, sub_key, type, value)": ["SetValue"], "winreg.SetValueEx(key, value_name, reserved, type, value)": ["SetValueEx"], "winsound.Beep(frequency, duration)": ["Beep"], "winsound.MB_ICONHAND": ["winsound.MB_ICONHAND"], "winsound.MB_ICONQUESTION": ["winsound.MB_ICONQUESTION"], "winsound.MessageBeep()": ["MessageBeep"], "winsound.PlaySound(sound, flags)": ["PlaySound"], "winsound.SND_ALIAS": ["winsound.SND_ALIAS"], "winsound.SND_ASYNC": ["winsound.SND_ASYNC"], "winsound.SND_FILENAME": ["winsound.SND_FILENAME"], "winsound.SND_LOOP": ["winsound.SND_LOOP"], "winsound.SND_MEMORY": ["winsound.SND_MEMORY"], "winsound.SND_NODEFAULT": ["winsound.SND_NODEFAULT"], "winsound.SND_NOSTOP": ["winsound.SND_NOSTOP"], "winsound.SND_PURGE": ["winsound.SND_PURGE"], "writer.flush()": ["flush"], "writer.new_alignment(align)": ["new_alignment"], "writer.new_font(font)": ["new_font"], "writer.new_margin(margin, level)": ["new_margin"], "writer.new_spacing(spacing)": ["new_spacing"], "writer.new_styles(styles)": ["new_styles"], "writer.send_flowing_data(data)": ["send_flowing_data"], "writer.send_hor_rule(*args, **kw)": ["send_hor_rule"], "writer.send_label_data(data)": ["send_label_data"], "writer.send_line_break()": ["send_line_break"], "writer.send_literal_data(data)": ["send_literal_data"], "writer.send_paragraph(blankline)": ["send_paragraph"], "wsgi_request_handler.get_environ()": ["get_environ"], "wsgi_request_handler.handle()": ["handle"], "wsgi_server.get_app()": ["get_app"], "wsgi_server.set_app(application)": ["set_app"], "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ)": ["BaseCGIHandler"], "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=False)": ["BaseCGIHandler", "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multiprocess=True)"], "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=True)": ["BaseCGIHandler", "wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ, multithread=False)"], "wsgiref.handlers.BaseHandler": ["wsgiref.handlers.BaseHandler"], "wsgiref.handlers.CGIHandler": ["wsgiref.handlers.CGIHandler"], "wsgiref.handlers.IISCGIHandler": ["wsgiref.handlers.IISCGIHandler"], "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ)": ["SimpleHandler"], "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multiprocess=False)": ["SimpleHandler", "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multiprocess=True)"], "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True)": ["SimpleHandler", "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=False)"], "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=True, multiprocess=False)": ["SimpleHandler", "wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ, multithread=False, multiprocess=True)"], "wsgiref.handlers.read_environ()": ["read_environ"], "wsgiref.headers.Headers()": ["Headers"], "wsgiref.headers.Headers(headers)": ["Headers"], "wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)": ["WSGIRequestHandler"], "wsgiref.simple_server.WSGIServer(server_address, RequestHandlerClass)": ["WSGIServer"], "wsgiref.simple_server.demo_app(environ, start_response)": ["demo_app"], "wsgiref.simple_server.make_server(host, port, app)": ["make_server"], "wsgiref.simple_server.make_server(host, port, app, handler_class=WSGIRequestHandler)": ["make_server"], "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer)": ["make_server"], "wsgiref.simple_server.make_server(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)": ["make_server"], "wsgiref.util.FileWrapper(filelike)": ["FileWrapper"], "wsgiref.util.FileWrapper(filelike, blksize=8192)": ["FileWrapper", "wsgiref.util.FileWrapper(filelike, blksize='8192')"], "wsgiref.util.application_uri(environ)": ["application_uri"], "wsgiref.util.guess_scheme(environ)": ["guess_scheme"], "wsgiref.util.request_uri(environ)": ["request_uri"], "wsgiref.util.request_uri(environ, include_query=True)": ["request_uri", "wsgiref.util.request_uri(environ, include_query=False)"], "wsgiref.util.setup_testing_defaults(environ)": ["setup_testing_defaults"], "wsgiref.util.shift_path_info(environ)": ["shift_path_info"], "wsgiref.validate.validator(application)": ["validator"], "x in dictview": ["(x not in dictview)"], "x in s": ["(x not in s)"], "x not in s": ["(x in s)"], "xdrlib.ConversionError": ["xdrlib.ConversionError"], "xdrlib.Packer": ["xdrlib.Packer"], "xdrlib.Unpacker(data)": ["Unpacker"], "xml.dom.DOMException": ["xml.dom.DOMException"], "xml.dom.DomstringSizeErr": ["xml.dom.DomstringSizeErr"], "xml.dom.IndexSizeErr": ["xml.dom.IndexSizeErr"], "xml.dom.InuseAttributeErr": ["xml.dom.InuseAttributeErr"], "xml.dom.InvalidCharacterErr": ["xml.dom.InvalidCharacterErr"], "xml.dom.InvalidModificationErr": ["xml.dom.InvalidModificationErr"], "xml.dom.InvalidStateErr": ["xml.dom.InvalidStateErr"], "xml.dom.NamespaceErr": ["xml.dom.NamespaceErr"], "xml.dom.NoDataAllowedErr": ["xml.dom.NoDataAllowedErr"], "xml.dom.NoModificationAllowedErr": ["xml.dom.NoModificationAllowedErr"], "xml.dom.NotFoundErr": ["xml.dom.NotFoundErr"], "xml.dom.NotSupportedErr": ["xml.dom.NotSupportedErr"], "xml.dom.SyntaxErr": ["xml.dom.SyntaxErr"], "xml.dom.WrongDocumentErr": ["xml.dom.WrongDocumentErr"], "xml.dom.XMLNS_NAMESPACE": ["xml.dom.XMLNS_NAMESPACE"], "xml.dom.XML_NAMESPACE": ["xml.dom.XML_NAMESPACE"], "xml.dom.getDOMImplementation()": ["getDOMImplementation"], "xml.dom.getDOMImplementation(features=())": ["getDOMImplementation"], "xml.dom.getDOMImplementation(name=None)": ["getDOMImplementation", "xml.dom.getDOMImplementation(name=None)"], "xml.dom.getDOMImplementation(name=None, features=())": ["getDOMImplementation", "xml.dom.getDOMImplementation(name=None, features=())"], "xml.dom.minidom.parse(filename_or_file, bufsize=None)": ["parse", "xml.dom.minidom.parse(filename_or_file, bufsize=None)"], "xml.dom.minidom.parse(filename_or_file, parser=None)": ["parse", "xml.dom.minidom.parse(filename_or_file, parser=None)"], "xml.dom.minidom.parseString(string)": ["parseString"], "xml.dom.minidom.parseString(string, parser=None)": ["parseString", "xml.dom.minidom.parseString(string, parser=None)"], "xml.dom.pulldom.default_bufsize": ["xml.dom.pulldom.default_bufsize"], "xml.dom.pulldom.parse(stream_or_string, parser=None, bufsize=None)": ["parse", "xml.dom.pulldom.parse(stream_or_string, parser=None, bufsize=None)"], "xml.dom.pulldom.parseString(string)": ["parseString"], "xml.dom.pulldom.parseString(string, parser=None)": ["parseString", "xml.dom.pulldom.parseString(string, parser=None)"], "xml.dom.registerDOMImplementation(name, factory)": ["registerDOMImplementation"], "xml.etree.ElementInclude.default_loader(href, parse)": ["default_loader"], "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)": ["default_loader", "xml.etree.ElementInclude.default_loader(href, parse, encoding=None)"], "xml.etree.ElementInclude.include(elem)": ["include"], "xml.etree.ElementInclude.include(elem, loader=None)": ["include", "xml.etree.ElementInclude.include(elem, loader=None)"], "xml.etree.ElementTree.Comment()": ["Comment", "xml.etree.ElementTree.new_compiler()", "xml.etree.ElementTree.get_cmap()", "xml.etree.ElementTree.close()", "xml.etree.ElementTree.colormode()", "xml.etree.ElementTree._format_exc()", "xml.etree.ElementTree.rc_context()", "xml.etree.ElementTree.format_exc()", "xml.etree.ElementTree.format_time()", "xml.etree.ElementTree.get_backend()", "xml.etree.ElementTree.localcontext()", "xml.etree.ElementTree.current_task()", "xml.etree.ElementTree.get()", "xml.etree.ElementTree.dot()", "xml.etree.ElementTree.pen()"], "xml.etree.ElementTree.Comment(text=None)": ["Comment", "xml.etree.ElementTree.Comment(text=None)", "xml.etree.ElementTree.new_compiler(text=None)", "xml.etree.ElementTree.get_cmap(text=None)", "xml.etree.ElementTree.close(text=None)", "xml.etree.ElementTree.colormode(text=None)", "xml.etree.ElementTree._format_exc(text=None)", "xml.etree.ElementTree.rc_context(text=None)", "xml.etree.ElementTree.format_exc(text=None)", "xml.etree.ElementTree.format_time(text=None)", "xml.etree.ElementTree.get_backend(text=None)", "xml.etree.ElementTree.localcontext(text=None)", "xml.etree.ElementTree.current_task(text=None)", "xml.etree.ElementTree.get(text=None)", "xml.etree.ElementTree.dot(text=None)"], "xml.etree.ElementTree.Element(tag, **extra)": ["Element"], "xml.etree.ElementTree.Element(tag, **extra, attrib={})": ["Element"], "xml.etree.ElementTree.ElementTree()": ["ElementTree"], "xml.etree.ElementTree.ElementTree(element=None)": ["ElementTree", "xml.etree.ElementTree.ElementTree(element=None)"], "xml.etree.ElementTree.ElementTree(element=None, file=None)": ["ElementTree", "xml.etree.ElementTree.ElementTree(element=None, file=None)"], "xml.etree.ElementTree.ElementTree(file=None)": ["ElementTree", "xml.etree.ElementTree.ElementTree(file=None)"], "xml.etree.ElementTree.ParseError": ["xml.etree.ElementTree.ParseError"], "xml.etree.ElementTree.ProcessingInstruction(target)": ["ProcessingInstruction", "xml.etree.ElementTree.get_instructions(target)", "xml.etree.ElementTree._get_instructions_bytes(target)", "xml.etree.ElementTree.fromstringlist(target)", "xml.etree.ElementTree.setposition(target)", "xml.etree.ElementTree.set_printoptions(target)", "xml.etree.ElementTree.tostringlist(target)", "xml.etree.ElementTree.register_cmap(target)", "xml.etree.ElementTree.fromstring(target)", "xml.etree.ElementTree.array_function_dispatch(target)", "xml.etree.ElementTree.translation(target)", "xml.etree.ElementTree.open_connection(target)", "xml.etree.ElementTree.print_stack(target)", "xml.etree.ElementTree.array_function_from_dispatcher(target)", "xml.etree.ElementTree.formatannotation(target)"], "xml.etree.ElementTree.ProcessingInstruction(target, text=None)": ["ProcessingInstruction", "xml.etree.ElementTree.ProcessingInstruction(target, text=None)", "xml.etree.ElementTree.get_instructions(target, text=None)", "xml.etree.ElementTree._get_instructions_bytes(target, text=None)", "xml.etree.ElementTree.fromstringlist(target, text=None)", "xml.etree.ElementTree.setposition(target, text=None)", "xml.etree.ElementTree.set_printoptions(target, text=None)", "xml.etree.ElementTree.tostringlist(target, text=None)", "xml.etree.ElementTree.register_cmap(target, text=None)", "xml.etree.ElementTree.fromstring(target, text=None)", "xml.etree.ElementTree.array_function_dispatch(target, text=None)", "xml.etree.ElementTree.translation(target, text=None)", "xml.etree.ElementTree.open_connection(target, text=None)", "xml.etree.ElementTree.print_stack(target, text=None)", "xml.etree.ElementTree.array_function_from_dispatcher(target, text=None)"], "xml.etree.ElementTree.QName(text_or_uri)": ["QName"], "xml.etree.ElementTree.QName(text_or_uri, tag=None)": ["QName", "xml.etree.ElementTree.QName(text_or_uri, tag=None)"], "xml.etree.ElementTree.SubElement(parent, tag, **extra)": ["SubElement"], "xml.etree.ElementTree.SubElement(parent, tag, **extra, attrib={})": ["SubElement"], "xml.etree.ElementTree.TreeBuilder()": ["TreeBuilder"], "xml.etree.ElementTree.TreeBuilder(element_factory=None)": ["TreeBuilder", "xml.etree.ElementTree.TreeBuilder(element_factory=None)"], "xml.etree.ElementTree.XML(text)": ["XML", "xml.etree.ElementTree.XMLID(text)", "xml.etree.ElementTree.axline(text)", "xml.etree.ElementTree.mksalt(text)", "xml.etree.ElementTree.xlabel(text)", "xml.etree.ElementTree.boxplot(text)", "xml.etree.ElementTree.compile(text)", "xml.etree.ElementTree.readmodule_ex(text)", "xml.etree.ElementTree.fromfile(text)", "xml.etree.ElementTree.upsample(text)", "xml.etree.ElementTree.getmodule(text)", "xml.etree.ElementTree._sum(text)", "xml.etree.ElementTree.max(text)", "xml.etree.ElementTree.sum(text)", "xml.etree.ElementTree.multi_dot(text)"], "xml.etree.ElementTree.XML(text, parser=None)": ["XML", "xml.etree.ElementTree.XML(text, parser=None)", "xml.etree.ElementTree.XMLID(text, parser=None)", "xml.etree.ElementTree.axline(text, parser=None)", "xml.etree.ElementTree.mksalt(text, parser=None)", "xml.etree.ElementTree.xlabel(text, parser=None)", "xml.etree.ElementTree.boxplot(text, parser=None)", "xml.etree.ElementTree.compile(text, parser=None)", "xml.etree.ElementTree.readmodule_ex(text, parser=None)", "xml.etree.ElementTree.fromfile(text, parser=None)", "xml.etree.ElementTree.upsample(text, parser=None)", "xml.etree.ElementTree.getmodule(text, parser=None)", "xml.etree.ElementTree._sum(text, parser=None)", "xml.etree.ElementTree.max(text, parser=None)", "xml.etree.ElementTree.sum(text, parser=None)"], "xml.etree.ElementTree.XMLID(text)": ["XMLID", "xml.etree.ElementTree.XML(text)", "xml.etree.ElementTree.axline(text)", "xml.etree.ElementTree.min(text)", "xml.etree.ElementTree._amin(text)", "xml.etree.ElementTree.makeBoolIndex(text)", "xml.etree.ElementTree.main(text)", "xml.etree.ElementTree.find(text)", "xml.etree.ElementTree.flip(text)", "xml.etree.ElementTree.load(text)", "xml.etree.ElementTree.amin(text)", "xml.etree.ElementTree._clip(text)", "xml.etree.ElementTree.clim(text)", "xml.etree.ElementTree.multi_dot(text)", "xml.etree.ElementTree.makeFloatIndex(text)"], "xml.etree.ElementTree.XMLID(text, parser=None)": ["XMLID", "xml.etree.ElementTree.XMLID(text, parser=None)", "xml.etree.ElementTree.XML(text, parser=None)", "xml.etree.ElementTree.axline(text, parser=None)", "xml.etree.ElementTree.min(text, parser=None)", "xml.etree.ElementTree._amin(text, parser=None)", "xml.etree.ElementTree.makeBoolIndex(text, parser=None)", "xml.etree.ElementTree.main(text, parser=None)", "xml.etree.ElementTree.find(text, parser=None)", "xml.etree.ElementTree.flip(text, parser=None)", "xml.etree.ElementTree.load(text, parser=None)", "xml.etree.ElementTree.amin(text, parser=None)", "xml.etree.ElementTree._clip(text, parser=None)", "xml.etree.ElementTree.clim(text, parser=None)", "xml.etree.ElementTree.multi_dot(text, parser=None)"], "xml.etree.ElementTree.XMLParser()": ["XMLParser"], "xml.etree.ElementTree.XMLParser(encoding=None)": ["XMLParser", "xml.etree.ElementTree.XMLParser(encoding=None)"], "xml.etree.ElementTree.XMLParser(html=0)": ["XMLParser", "xml.etree.ElementTree.XMLParser(html='0')"], "xml.etree.ElementTree.XMLParser(html=0, encoding=None)": ["XMLParser", "xml.etree.ElementTree.XMLParser(html=0, encoding=None)", "xml.etree.ElementTree.XMLParser(html='0', encoding=None)"], "xml.etree.ElementTree.XMLParser(html=0, target=None)": ["XMLParser", "xml.etree.ElementTree.XMLParser(html=0, target=None)", "xml.etree.ElementTree.XMLParser(html='0', target=None)"], "xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None)": ["XMLParser", "xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None)", "xml.etree.ElementTree.XMLParser(html='0', target=None, encoding=None)"], "xml.etree.ElementTree.XMLParser(target=None, encoding=None)": ["XMLParser", "xml.etree.ElementTree.XMLParser(target=None, encoding=None)"], "xml.etree.ElementTree.XMLPullParser()": ["XMLPullParser"], "xml.etree.ElementTree.XMLPullParser(events=None)": ["XMLPullParser", "xml.etree.ElementTree.XMLPullParser(events=None)"], "xml.etree.ElementTree.dump(elem)": ["dump", "xml.etree.ElementTree._dump(elem)", "xml.etree.ElementTree.dumps(elem)", "xml.etree.ElementTree._dumps(elem)", "xml.etree.ElementTree.dup(elem)", "xml.etree.ElementTree.dup2(elem)", "xml.etree.ElementTree._get_dump(elem)", "xml.etree.ElementTree.up(elem)", "xml.etree.ElementTree.DupFd(elem)", "xml.etree.ElementTree._xml_dumps(elem)", "xml.etree.ElementTree.WCOREDUMP(elem)", "xml.etree.ElementTree._sum_(elem)", "xml.etree.ElementTree._sum(elem)", "xml.etree.ElementTree.sum(elem)", "xml.etree.ElementTree.cmp(elem)"], "xml.etree.ElementTree.fromstring(text)": ["fromstring", "xml.etree.ElementTree.fromstringlist(text)", "xml.etree.ElementTree._find_strings(text)", "xml.etree.ElementTree.rstrip(text)", "xml.etree.ElementTree.makeStringIndex(text)", "xml.etree.ElementTree.fromfile(text)", "xml.etree.ElementTree.forbid_nonstring_types(text)", "xml.etree.ElementTree.strip(text)", "xml.etree.ElementTree.create_string_buffer(text)", "xml.etree.ElementTree.lstrip(text)", "xml.etree.ElementTree.argmin(text)", "xml.etree.ElementTree.print_list(text)", "xml.etree.ElementTree.format_time(text)", "xml.etree.ElementTree.setposition(text)", "xml.etree.ElementTree.formatannotation(text)"], "xml.etree.ElementTree.fromstring(text, parser=None)": ["fromstring", "xml.etree.ElementTree.fromstring(text, parser=None)", "xml.etree.ElementTree.fromstringlist(text, parser=None)", "xml.etree.ElementTree._find_strings(text, parser=None)", "xml.etree.ElementTree.rstrip(text, parser=None)", "xml.etree.ElementTree.makeStringIndex(text, parser=None)", "xml.etree.ElementTree.fromfile(text, parser=None)", "xml.etree.ElementTree.forbid_nonstring_types(text, parser=None)", "xml.etree.ElementTree.strip(text, parser=None)", "xml.etree.ElementTree.create_string_buffer(text, parser=None)", "xml.etree.ElementTree.lstrip(text, parser=None)", "xml.etree.ElementTree.argmin(text, parser=None)", "xml.etree.ElementTree.print_list(text, parser=None)", "xml.etree.ElementTree.format_time(text, parser=None)", "xml.etree.ElementTree.setposition(text, parser=None)"], "xml.etree.ElementTree.fromstringlist(sequence)": ["fromstringlist", "xml.etree.ElementTree.tostringlist(sequence)", "xml.etree.ElementTree.fromstring(sequence)", "xml.etree.ElementTree.tostring(sequence)", "xml.etree.ElementTree._find_strings(sequence)", "xml.etree.ElementTree.forbid_nonstring_types(sequence)", "xml.etree.ElementTree.makeStringIndex(sequence)", "xml.etree.ElementTree.fromfile(sequence)", "xml.etree.ElementTree.array2string(sequence)", "xml.etree.ElementTree._array2string_dispatcher(sequence)", "xml.etree.ElementTree.formatargspec(sequence)", "xml.etree.ElementTree._array2string_impl(sequence)", "xml.etree.ElementTree.ProcessingInstruction(sequence)", "xml.etree.ElementTree.hist_frame(sequence)", "xml.etree.ElementTree.print_list(sequence)"], "xml.etree.ElementTree.fromstringlist(sequence, parser=None)": ["fromstringlist", "xml.etree.ElementTree.fromstringlist(sequence, parser=None)", "xml.etree.ElementTree.tostringlist(sequence, parser=None)", "xml.etree.ElementTree.fromstring(sequence, parser=None)", "xml.etree.ElementTree.tostring(sequence, parser=None)", "xml.etree.ElementTree._find_strings(sequence, parser=None)", "xml.etree.ElementTree.forbid_nonstring_types(sequence, parser=None)", "xml.etree.ElementTree.makeStringIndex(sequence, parser=None)", "xml.etree.ElementTree.fromfile(sequence, parser=None)", "xml.etree.ElementTree.array2string(sequence, parser=None)", "xml.etree.ElementTree._array2string_dispatcher(sequence, parser=None)", "xml.etree.ElementTree.formatargspec(sequence, parser=None)", "xml.etree.ElementTree._array2string_impl(sequence, parser=None)", "xml.etree.ElementTree.ProcessingInstruction(sequence, parser=None)", "xml.etree.ElementTree.hist_frame(sequence, parser=None)"], "xml.etree.ElementTree.iselement(element)": ["iselement", "xml.etree.ElementTree.select(element)", "xml.etree.ElementTree.ismount(element)", "xml.etree.ElementTree.visiblename(element)", "xml.etree.ElementTree.hermeint(element)", "xml.etree.ElementTree.filemode(element)", "xml.etree.ElementTree.filename(element)", "xml.etree.ElementTree.ismethod(element)", "xml.etree.ElementTree._expand_elements(element)", "xml.etree.ElementTree.sleep(element)", "xml.etree.ElementTree.SocketClient(element)", "xml.etree.ElementTree._sleep(element)", "xml.etree.ElementTree.isend(element)", "xml.etree.ElementTree.figlegend(element)", "xml.etree.ElementTree._get_field(element)"], "xml.etree.ElementTree.iterparse(source)": ["iterparse", "xml.etree.ElementTree.parse(source)", "xml.etree.ElementTree.interpolate(source)", "xml.etree.ElementTree._parse_datetime(source)", "xml.etree.ElementTree.parse_makefile(source)", "xml.etree.ElementTree._parse_makefile(source)", "xml.etree.ElementTree.interact(source)", "xml.etree.ElementTree.transpose(source)", "xml.etree.ElementTree.thetagrids(source)", "xml.etree.ElementTree.seterr(source)", "xml.etree.ElementTree.tracer(source)", "xml.etree.ElementTree.register_shape(source)", "xml.etree.ElementTree._var_dispatcher(source)", "xml.etree.ElementTree.parse_config_h(source)", "xml.etree.ElementTree.addsitepackages(source)"], "xml.etree.ElementTree.iterparse(source, events=None)": ["iterparse", "xml.etree.ElementTree.iterparse(source, events=None)", "xml.etree.ElementTree.parse(source, events=None)", "xml.etree.ElementTree.interpolate(source, events=None)", "xml.etree.ElementTree._parse_datetime(source, events=None)", "xml.etree.ElementTree.parse_makefile(source, events=None)", "xml.etree.ElementTree._parse_makefile(source, events=None)", "xml.etree.ElementTree.interact(source, events=None)", "xml.etree.ElementTree.transpose(source, events=None)", "xml.etree.ElementTree.thetagrids(source, events=None)", "xml.etree.ElementTree.seterr(source, events=None)", "xml.etree.ElementTree.tracer(source, events=None)", "xml.etree.ElementTree.register_shape(source, events=None)", "xml.etree.ElementTree._var_dispatcher(source, events=None)", "xml.etree.ElementTree.parse_config_h(source, events=None)"], "xml.etree.ElementTree.iterparse(source, events=None, parser=None)": ["iterparse", "xml.etree.ElementTree.iterparse(source, events=None, parser=None)", "xml.etree.ElementTree.parse(source, events=None, parser=None)", "xml.etree.ElementTree.interpolate(source, events=None, parser=None)", "xml.etree.ElementTree._parse_datetime(source, events=None, parser=None)", "xml.etree.ElementTree.parse_makefile(source, events=None, parser=None)", "xml.etree.ElementTree._parse_makefile(source, events=None, parser=None)", "xml.etree.ElementTree.interact(source, events=None, parser=None)", "xml.etree.ElementTree.transpose(source, events=None, parser=None)", "xml.etree.ElementTree.thetagrids(source, events=None, parser=None)", "xml.etree.ElementTree.seterr(source, events=None, parser=None)", "xml.etree.ElementTree.tracer(source, events=None, parser=None)", "xml.etree.ElementTree.register_shape(source, events=None, parser=None)", "xml.etree.ElementTree._var_dispatcher(source, events=None, parser=None)", "xml.etree.ElementTree.parse_config_h(source, events=None, parser=None)"], "xml.etree.ElementTree.iterparse(source, parser=None)": ["iterparse", "xml.etree.ElementTree.iterparse(source, parser=None)", "xml.etree.ElementTree.parse(source, parser=None)", "xml.etree.ElementTree.interpolate(source, parser=None)", "xml.etree.ElementTree._parse_datetime(source, parser=None)", "xml.etree.ElementTree.parse_makefile(source, parser=None)", "xml.etree.ElementTree._parse_makefile(source, parser=None)", "xml.etree.ElementTree.interact(source, parser=None)", "xml.etree.ElementTree.transpose(source, parser=None)", "xml.etree.ElementTree.thetagrids(source, parser=None)", "xml.etree.ElementTree.seterr(source, parser=None)", "xml.etree.ElementTree.tracer(source, parser=None)", "xml.etree.ElementTree.register_shape(source, parser=None)", "xml.etree.ElementTree._var_dispatcher(source, parser=None)", "xml.etree.ElementTree.parse_config_h(source, parser=None)"], "xml.etree.ElementTree.parse(source)": ["parse", "xml.etree.ElementTree._parse(source)", "xml.etree.ElementTree._parser(source)", "xml.etree.ElementTree.sparse(source)", "xml.etree.ElementTree.sparse_(source)", "xml.etree.ElementTree.pause(source)", "xml.etree.ElementTree.parse_qs(source)", "xml.etree.ElementTree.du_parse(source)", "xml.etree.ElementTree.parse150(source)", "xml.etree.ElementTree.parse257(source)", "xml.etree.ElementTree.urlparse(source)", "xml.etree.ElementTree.parse227(source)", "xml.etree.ElementTree._preparse(source)", "xml.etree.ElementTree.parse229(source)", "xml.etree.ElementTree.parse_url(source)"], "xml.etree.ElementTree.parse(source, parser=None)": ["parse", "xml.etree.ElementTree.parse(source, parser=None)", "xml.etree.ElementTree._parse(source, parser=None)", "xml.etree.ElementTree._parser(source, parser=None)", "xml.etree.ElementTree.sparse(source, parser=None)", "xml.etree.ElementTree.sparse_(source, parser=None)", "xml.etree.ElementTree.pause(source, parser=None)", "xml.etree.ElementTree.parse_qs(source, parser=None)", "xml.etree.ElementTree.du_parse(source, parser=None)", "xml.etree.ElementTree.parse150(source, parser=None)", "xml.etree.ElementTree.parse257(source, parser=None)", "xml.etree.ElementTree.urlparse(source, parser=None)", "xml.etree.ElementTree.parse227(source, parser=None)", "xml.etree.ElementTree._preparse(source, parser=None)", "xml.etree.ElementTree.parse229(source, parser=None)"], "xml.etree.ElementTree.register_namespace(prefix, uri)": ["register_namespace", "xml.etree.ElementTree.register_package(prefix, uri)", "xml.etree.ElementTree._abc_register(prefix, uri)", "xml.etree.ElementTree._namespaces(prefix, uri)", "xml.etree.ElementTree.register_cmap(prefix, uri)", "xml.etree.ElementTree.register_backend(prefix, uri)", "xml.etree.ElementTree._register_accessor(prefix, uri)", "xml.etree.ElementTree._unregister_task(prefix, uri)", "xml.etree.ElementTree.rewrite_name(prefix, uri)", "xml.etree.ElementTree.backend_registered(prefix, uri)", "xml.etree.ElementTree.deregister(prefix, uri)", "xml.etree.ElementTree._compile_and_register_class(prefix, uri)", "xml.etree.ElementTree._c_unregister_task(prefix, uri)", "xml.etree.ElementTree.register_index_accessor(prefix, uri)", "xml.etree.ElementTree.register_dataframe_accessor(prefix, uri)"], "xml.etree.ElementTree.tostring(element)": ["tostring", "xml.etree.ElementTree.tostringlist(element)", "xml.etree.ElementTree.fromstring(element)", "xml.etree.ElementTree.fromstringlist(element)", "xml.etree.ElementTree.setposition(element)", "xml.etree.ElementTree.strip(element)", "xml.etree.ElementTree._find_strings(element)", "xml.etree.ElementTree.lstrip(element)", "xml.etree.ElementTree.rstrip(element)", "xml.etree.ElementTree.print_list(element)", "xml.etree.ElementTree.makeStringIndex(element)", "xml.etree.ElementTree.get_instructions(element)", "xml.etree.ElementTree.isposinf(element)", "xml.etree.ElementTree.asmatrix(element)", "xml.etree.ElementTree.create_string_buffer(element)"], "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\")": ["tostring", "xml.etree.ElementTree.tostring(element, encoding=8.0)", "xml.etree.ElementTree.tostringlist(element, encoding='us-ascii')", "xml.etree.ElementTree.fromstring(element, encoding='us-ascii')", "xml.etree.ElementTree.fromstringlist(element, encoding='us-ascii')", "xml.etree.ElementTree.setposition(element, encoding='us-ascii')", "xml.etree.ElementTree.strip(element, encoding='us-ascii')", "xml.etree.ElementTree._find_strings(element, encoding='us-ascii')", "xml.etree.ElementTree.lstrip(element, encoding='us-ascii')", "xml.etree.ElementTree.rstrip(element, encoding='us-ascii')", "xml.etree.ElementTree.print_list(element, encoding='us-ascii')", "xml.etree.ElementTree.makeStringIndex(element, encoding='us-ascii')", "xml.etree.ElementTree.get_instructions(element, encoding='us-ascii')", "xml.etree.ElementTree.isposinf(element, encoding='us-ascii')", "xml.etree.ElementTree.asmatrix(element, encoding='us-ascii')"], "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\")": ["tostring", "xml.etree.ElementTree.tostring(element, encoding=8.0, method=3)", "xml.etree.ElementTree.tostringlist(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.fromstring(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.fromstringlist(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.setposition(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.strip(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree._find_strings(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.lstrip(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.rstrip(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.print_list(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.makeStringIndex(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.get_instructions(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.isposinf(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.asmatrix(element, encoding='us-ascii', method='xml')"], "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\", short_empty_elements=True)": ["tostring", "xml.etree.ElementTree.tostring(element, encoding='us-ascii', method='xml', short_empty_elements=False)", "xml.etree.ElementTree.tostring(element, encoding=8, method=3.0, short_empty_elements=True)", "xml.etree.ElementTree.tostringlist(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.fromstring(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.fromstringlist(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.setposition(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.strip(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree._find_strings(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.lstrip(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.rstrip(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.print_list(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.makeStringIndex(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.get_instructions(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.isposinf(element, encoding='us-ascii', method='xml', short_empty_elements=True)"], "xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", short_empty_elements=True)": ["tostring", "xml.etree.ElementTree.tostring(element, encoding='us-ascii', short_empty_elements=False)", "xml.etree.ElementTree.tostring(element, encoding=8.0, short_empty_elements=True)", "xml.etree.ElementTree.tostringlist(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree.fromstring(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree.fromstringlist(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree.setposition(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree.strip(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree._find_strings(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree.lstrip(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree.rstrip(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree.print_list(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree.makeStringIndex(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree.get_instructions(element, encoding='us-ascii', short_empty_elements=True)", "xml.etree.ElementTree.isposinf(element, encoding='us-ascii', short_empty_elements=True)"], "xml.etree.ElementTree.tostring(element, method=\"xml\")": ["tostring", "xml.etree.ElementTree.tostring(element, method=3)", "xml.etree.ElementTree.tostringlist(element, method='xml')", "xml.etree.ElementTree.fromstring(element, method='xml')", "xml.etree.ElementTree.fromstringlist(element, method='xml')", "xml.etree.ElementTree.setposition(element, method='xml')", "xml.etree.ElementTree.strip(element, method='xml')", "xml.etree.ElementTree._find_strings(element, method='xml')", "xml.etree.ElementTree.lstrip(element, method='xml')", "xml.etree.ElementTree.rstrip(element, method='xml')", "xml.etree.ElementTree.print_list(element, method='xml')", "xml.etree.ElementTree.makeStringIndex(element, method='xml')", "xml.etree.ElementTree.get_instructions(element, method='xml')", "xml.etree.ElementTree.isposinf(element, method='xml')", "xml.etree.ElementTree.asmatrix(element, method='xml')"], "xml.etree.ElementTree.tostring(element, method=\"xml\", short_empty_elements=True)": ["tostring", "xml.etree.ElementTree.tostring(element, method='xml', short_empty_elements=False)", "xml.etree.ElementTree.tostring(element, method=3, short_empty_elements=True)", "xml.etree.ElementTree.tostringlist(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.fromstring(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.fromstringlist(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.setposition(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.strip(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree._find_strings(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.lstrip(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.rstrip(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.print_list(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.makeStringIndex(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.get_instructions(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.isposinf(element, method='xml', short_empty_elements=True)"], "xml.etree.ElementTree.tostring(element, short_empty_elements=True)": ["tostring", "xml.etree.ElementTree.tostring(element, short_empty_elements=False)", "xml.etree.ElementTree.tostringlist(element, short_empty_elements=True)", "xml.etree.ElementTree.fromstring(element, short_empty_elements=True)", "xml.etree.ElementTree.fromstringlist(element, short_empty_elements=True)", "xml.etree.ElementTree.setposition(element, short_empty_elements=True)", "xml.etree.ElementTree.strip(element, short_empty_elements=True)", "xml.etree.ElementTree._find_strings(element, short_empty_elements=True)", "xml.etree.ElementTree.lstrip(element, short_empty_elements=True)", "xml.etree.ElementTree.rstrip(element, short_empty_elements=True)", "xml.etree.ElementTree.print_list(element, short_empty_elements=True)", "xml.etree.ElementTree.makeStringIndex(element, short_empty_elements=True)", "xml.etree.ElementTree.get_instructions(element, short_empty_elements=True)", "xml.etree.ElementTree.isposinf(element, short_empty_elements=True)", "xml.etree.ElementTree.asmatrix(element, short_empty_elements=True)"], "xml.etree.ElementTree.tostringlist(element)": ["tostringlist", "xml.etree.ElementTree.fromstringlist(element)", "xml.etree.ElementTree.tostring(element)", "xml.etree.ElementTree.fromstring(element)", "xml.etree.ElementTree._find_strings(element)", "xml.etree.ElementTree.print_list(element)", "xml.etree.ElementTree.makeStringIndex(element)", "xml.etree.ElementTree.setposition(element)", "xml.etree.ElementTree.get_instructions(element)", "xml.etree.ElementTree.register_at_fork(element)", "xml.etree.ElementTree.ProcessingInstruction(element)", "xml.etree.ElementTree.split(element)", "xml.etree.ElementTree.strip(element)", "xml.etree.ElementTree.forbid_nonstring_types(element)", "xml.etree.ElementTree._eigvalsh_dispatcher(element)"], "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\")": ["tostringlist", "xml.etree.ElementTree.tostringlist(element, encoding=8)", "xml.etree.ElementTree.fromstringlist(element, encoding='us-ascii')", "xml.etree.ElementTree.tostring(element, encoding='us-ascii')", "xml.etree.ElementTree.fromstring(element, encoding='us-ascii')", "xml.etree.ElementTree._find_strings(element, encoding='us-ascii')", "xml.etree.ElementTree.print_list(element, encoding='us-ascii')", "xml.etree.ElementTree.makeStringIndex(element, encoding='us-ascii')", "xml.etree.ElementTree.setposition(element, encoding='us-ascii')", "xml.etree.ElementTree.get_instructions(element, encoding='us-ascii')", "xml.etree.ElementTree.register_at_fork(element, encoding='us-ascii')", "xml.etree.ElementTree.ProcessingInstruction(element, encoding='us-ascii')", "xml.etree.ElementTree.split(element, encoding='us-ascii')", "xml.etree.ElementTree.strip(element, encoding='us-ascii')", "xml.etree.ElementTree.forbid_nonstring_types(element, encoding='us-ascii')"], "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\", method=\"xml\")": ["tostringlist", "xml.etree.ElementTree.tostringlist(element, encoding=8, method=3.0)", "xml.etree.ElementTree.fromstringlist(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.tostring(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.fromstring(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree._find_strings(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.print_list(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.makeStringIndex(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.setposition(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.get_instructions(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.register_at_fork(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.ProcessingInstruction(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.split(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.strip(element, encoding='us-ascii', method='xml')", "xml.etree.ElementTree.forbid_nonstring_types(element, encoding='us-ascii', method='xml')"], "xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\", method=\"xml\", short_empty_elements=True)": ["tostringlist", "xml.etree.ElementTree.tostringlist(element, encoding='us-ascii', method='xml', short_empty_elements=False)", "xml.etree.ElementTree.tostringlist(element, encoding=8, method=3.0, short_empty_elements=True)", "xml.etree.ElementTree.fromstringlist(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.tostring(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.fromstring(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree._find_strings(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.print_list(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.makeStringIndex(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.setposition(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.get_instructions(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.register_at_fork(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.ProcessingInstruction(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.split(element, encoding='us-ascii', method='xml', short_empty_elements=True)", "xml.etree.ElementTree.strip(element, encoding='us-ascii', method='xml', short_empty_elements=True)"], "xml.etree.ElementTree.tostringlist(element, method=\"xml\")": ["tostringlist", "xml.etree.ElementTree.tostringlist(element, method=3)", "xml.etree.ElementTree.fromstringlist(element, method='xml')", "xml.etree.ElementTree.tostring(element, method='xml')", "xml.etree.ElementTree.fromstring(element, method='xml')", "xml.etree.ElementTree._find_strings(element, method='xml')", "xml.etree.ElementTree.print_list(element, method='xml')", "xml.etree.ElementTree.makeStringIndex(element, method='xml')", "xml.etree.ElementTree.setposition(element, method='xml')", "xml.etree.ElementTree.get_instructions(element, method='xml')", "xml.etree.ElementTree.register_at_fork(element, method='xml')", "xml.etree.ElementTree.ProcessingInstruction(element, method='xml')", "xml.etree.ElementTree.split(element, method='xml')", "xml.etree.ElementTree.strip(element, method='xml')", "xml.etree.ElementTree.forbid_nonstring_types(element, method='xml')"], "xml.etree.ElementTree.tostringlist(element, method=\"xml\", short_empty_elements=True)": ["tostringlist", "xml.etree.ElementTree.tostringlist(element, method='xml', short_empty_elements=False)", "xml.etree.ElementTree.tostringlist(element, method=3, short_empty_elements=True)", "xml.etree.ElementTree.fromstringlist(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.tostring(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.fromstring(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree._find_strings(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.print_list(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.makeStringIndex(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.setposition(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.get_instructions(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.register_at_fork(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.ProcessingInstruction(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.split(element, method='xml', short_empty_elements=True)", "xml.etree.ElementTree.strip(element, method='xml', short_empty_elements=True)"], "xml.etree.ElementTree.tostringlist(element, short_empty_elements=True)": ["tostringlist", "xml.etree.ElementTree.tostringlist(element, short_empty_elements=False)", "xml.etree.ElementTree.fromstringlist(element, short_empty_elements=True)", "xml.etree.ElementTree.tostring(element, short_empty_elements=True)", "xml.etree.ElementTree.fromstring(element, short_empty_elements=True)", "xml.etree.ElementTree._find_strings(element, short_empty_elements=True)", "xml.etree.ElementTree.print_list(element, short_empty_elements=True)", "xml.etree.ElementTree.makeStringIndex(element, short_empty_elements=True)", "xml.etree.ElementTree.setposition(element, short_empty_elements=True)", "xml.etree.ElementTree.get_instructions(element, short_empty_elements=True)", "xml.etree.ElementTree.register_at_fork(element, short_empty_elements=True)", "xml.etree.ElementTree.ProcessingInstruction(element, short_empty_elements=True)", "xml.etree.ElementTree.split(element, short_empty_elements=True)", "xml.etree.ElementTree.strip(element, short_empty_elements=True)", "xml.etree.ElementTree.forbid_nonstring_types(element, short_empty_elements=True)"], "xml.parsers.expat.ErrorString(errno)": ["ErrorString", "xml.parsers.expat.fromstring(errno)", "xml.parsers.expat.tostring(errno)", "xml.parsers.expat._from_string(errno)", "xml.parsers.expat.decodestring(errno)", "xml.parsers.expat.runstring(errno)", "xml.parsers.expat.encodestring(errno)", "xml.parsers.expat.formatstring(errno)", "xml.parsers.expat._array2string(errno)", "xml.parsers.expat.array2string(errno)", "xml.parsers.expat._encodestring(errno)", "xml.parsers.expat._convert_from_string(errno)", "xml.parsers.expat.format_string(errno)", "xml.parsers.expat._date_from_string(errno)", "xml.parsers.expat.register_error(errno)"], "xml.parsers.expat.ExpatError": ["xml.parsers.expat.ExpatError"], "xml.parsers.expat.ParserCreate(encoding=None)": ["ParserCreate", "xml.parsers.expat.ParserCreate(encoding=None)", "xml.parsers.expat.set_trace(encoding=None)", "xml.parsers.expat._perfcheck(encoding=None)", "xml.parsers.expat.screensize(encoding=None)", "xml.parsers.expat.set_numexpr_threads(encoding=None)", "xml.parsers.expat.get_default_compiler(encoding=None)", "xml.parsers.expat.seterr(encoding=None)", "xml.parsers.expat.makePeriodFrame(encoding=None)", "xml.parsers.expat.makeStringSeries(encoding=None)", "xml.parsers.expat.makePeriodSeries(encoding=None)", "xml.parsers.expat.register_at_fork(encoding=None)", "xml.parsers.expat.shearfactor(encoding=None)", "xml.parsers.expat.random_state(encoding=None)", "xml.parsers.expat._assert_no_gc_cycles_context(encoding=None)"], "xml.parsers.expat.ParserCreate(encoding=None, namespace_separator=None)": ["ParserCreate", "xml.parsers.expat.ParserCreate(encoding=None, namespace_separator=None)", "xml.parsers.expat.set_trace(encoding=None, namespace_separator=None)", "xml.parsers.expat._perfcheck(encoding=None, namespace_separator=None)", "xml.parsers.expat.screensize(encoding=None, namespace_separator=None)", "xml.parsers.expat.set_numexpr_threads(encoding=None, namespace_separator=None)", "xml.parsers.expat.get_default_compiler(encoding=None, namespace_separator=None)", "xml.parsers.expat.seterr(encoding=None, namespace_separator=None)", "xml.parsers.expat.makePeriodFrame(encoding=None, namespace_separator=None)", "xml.parsers.expat.makeStringSeries(encoding=None, namespace_separator=None)", "xml.parsers.expat.makePeriodSeries(encoding=None, namespace_separator=None)", "xml.parsers.expat.register_at_fork(encoding=None, namespace_separator=None)", "xml.parsers.expat.shearfactor(encoding=None, namespace_separator=None)", "xml.parsers.expat.random_state(encoding=None, namespace_separator=None)", "xml.parsers.expat._assert_no_gc_cycles_context(encoding=None, namespace_separator=None)"], "xml.parsers.expat.ParserCreate(namespace_separator=None)": ["ParserCreate", "xml.parsers.expat.ParserCreate(namespace_separator=None)", "xml.parsers.expat.set_trace(namespace_separator=None)", "xml.parsers.expat._perfcheck(namespace_separator=None)", "xml.parsers.expat.screensize(namespace_separator=None)", "xml.parsers.expat.set_numexpr_threads(namespace_separator=None)", "xml.parsers.expat.get_default_compiler(namespace_separator=None)", "xml.parsers.expat.seterr(namespace_separator=None)", "xml.parsers.expat.makePeriodFrame(namespace_separator=None)", "xml.parsers.expat.makeStringSeries(namespace_separator=None)", "xml.parsers.expat.makePeriodSeries(namespace_separator=None)", "xml.parsers.expat.register_at_fork(namespace_separator=None)", "xml.parsers.expat.shearfactor(namespace_separator=None)", "xml.parsers.expat.random_state(namespace_separator=None)", "xml.parsers.expat._assert_no_gc_cycles_context(namespace_separator=None)"], "xml.parsers.expat.XMLParserType": ["xml.parsers.expat.XMLParserType"], "xml.parsers.expat.error": ["xml.parsers.expat.error"], "xml.parsers.expat.errors.XML_ERROR_ABORTED": ["xml.parsers.expat.errors.XML_ERROR_ABORTED"], "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF": ["xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"], "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF": ["xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"], "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING": ["xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"], "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE": ["xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"], "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD": ["xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"], "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE": ["xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"], "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN": ["xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"], "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT": ["xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"], "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI": ["xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"], "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE": ["xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"], "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED": ["xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"], "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS": ["xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"], "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY": ["xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"], "xml.parsers.expat.errors.XML_ERROR_PUBLICID": ["xml.parsers.expat.errors.XML_ERROR_PUBLICID"], "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF": ["xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"], "xml.parsers.expat.errors.XML_ERROR_SYNTAX": ["xml.parsers.expat.errors.XML_ERROR_SYNTAX"], "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH": ["xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"], "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL": ["xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"], "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX": ["xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"], "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION": ["xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"], "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN": ["xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"], "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX": ["xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"], "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY": ["xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"], "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING": ["xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"], "xml.parsers.expat.errors.codes": ["xml.parsers.expat.errors.codes"], "xml.parsers.expat.errors.messages": ["xml.parsers.expat.errors.messages"], "xml.parsers.expat.model.XML_CQUANT_NONE": ["xml.parsers.expat.model.XML_CQUANT_NONE"], "xml.parsers.expat.model.XML_CQUANT_OPT": ["xml.parsers.expat.model.XML_CQUANT_OPT"], "xml.parsers.expat.model.XML_CQUANT_PLUS": ["xml.parsers.expat.model.XML_CQUANT_PLUS"], "xml.parsers.expat.model.XML_CQUANT_REP": ["xml.parsers.expat.model.XML_CQUANT_REP"], "xml.parsers.expat.model.XML_CTYPE_ANY": ["xml.parsers.expat.model.XML_CTYPE_ANY"], "xml.parsers.expat.model.XML_CTYPE_CHOICE": ["xml.parsers.expat.model.XML_CTYPE_CHOICE"], "xml.parsers.expat.model.XML_CTYPE_EMPTY": ["xml.parsers.expat.model.XML_CTYPE_EMPTY"], "xml.parsers.expat.model.XML_CTYPE_SEQ": ["xml.parsers.expat.model.XML_CTYPE_SEQ"], "xml.sax.SAXException(msg)": ["SAXException"], "xml.sax.SAXException(msg, exception=None)": ["SAXException", "xml.sax.SAXException(msg, exception=None)"], "xml.sax.SAXParseException(msg, exception, locator)": ["SAXParseException"], "xml.sax.handler.ContentHandler": ["xml.sax.handler.ContentHandler"], "xml.sax.handler.DTDHandler": ["xml.sax.handler.DTDHandler"], "xml.sax.handler.EntityResolver": ["xml.sax.handler.EntityResolver"], "xml.sax.handler.ErrorHandler": ["xml.sax.handler.ErrorHandler"], "xml.sax.handler.all_features": ["xml.sax.handler.all_features"], "xml.sax.handler.all_properties": ["xml.sax.handler.all_properties"], "xml.sax.make_parser(parser_list=)": [], "xml.sax.parse(filename_or_stream, handler)": ["parse"], "xml.sax.parseString(string, handler, error_handler=handler.ErrorHandler())": ["parseString"], "xml.sax.saxutils.XMLFilterBase(base)": ["XMLFilterBase"], "xml.sax.saxutils.XMLGenerator()": ["XMLGenerator"], "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1')": ["XMLGenerator", "xml.sax.saxutils.XMLGenerator(encoding=10)"], "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=False)": ["XMLGenerator", "xml.sax.saxutils.XMLGenerator(encoding='iso-8859-1', short_empty_elements=True)", "xml.sax.saxutils.XMLGenerator(encoding=10, short_empty_elements=False)"], "xml.sax.saxutils.XMLGenerator(out=None)": ["XMLGenerator", "xml.sax.saxutils.XMLGenerator(out=None)"], "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1')": ["XMLGenerator", "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1')", "xml.sax.saxutils.XMLGenerator(out=None, encoding=10.0)"], "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=False)": ["XMLGenerator", "xml.sax.saxutils.XMLGenerator(out=None, encoding='iso-8859-1', short_empty_elements=True)", "xml.sax.saxutils.XMLGenerator(out=None, encoding=10.0, short_empty_elements=False)"], "xml.sax.saxutils.XMLGenerator(out=None, short_empty_elements=False)": ["XMLGenerator", "xml.sax.saxutils.XMLGenerator(out=None, short_empty_elements=True)"], "xml.sax.saxutils.XMLGenerator(short_empty_elements=False)": ["XMLGenerator", "xml.sax.saxutils.XMLGenerator(short_empty_elements=True)"], "xml.sax.saxutils.escape(data)": ["escape"], "xml.sax.saxutils.escape(data, entities={})": ["escape"], "xml.sax.saxutils.prepare_input_source(source, base='')": ["prepare_input_source", "xml.sax.saxutils.prepare_input_source(source, base=0.0)"], "xml.sax.saxutils.quoteattr(data)": ["quoteattr"], "xml.sax.saxutils.quoteattr(data, entities={})": ["quoteattr"], "xml.sax.saxutils.unescape(data)": ["unescape"], "xml.sax.saxutils.unescape(data, entities={})": ["unescape"], "xml.sax.xmlreader.AttributesImpl(attrs)": ["AttributesImpl"], "xml.sax.xmlreader.IncrementalParser": ["xml.sax.xmlreader.IncrementalParser"], "xml.sax.xmlreader.InputSource(system_id=None)": ["InputSource", "xml.sax.xmlreader.InputSource(system_id=None)"], "xml.sax.xmlreader.XMLReader": ["xml.sax.xmlreader.XMLReader"], "xml_parser.close()": ["close"], "xml_pull_parser.feed(data)": ["feed"], "xml_pull_parser.read_events()": ["read_events"], "xmlparser.AttlistDeclHandler(elname, attname, type, default, required)": ["AttlistDeclHandler"], "xmlparser.CharacterDataHandler(data)": ["CharacterDataHandler"], "xmlparser.CommentHandler(data)": ["CommentHandler"], "xmlparser.CurrentByteIndex": ["xmlparser.CurrentByteIndex"], "xmlparser.CurrentColumnNumber": ["xmlparser.CurrentColumnNumber"], "xmlparser.CurrentLineNumber": ["xmlparser.CurrentLineNumber"], "xmlparser.DefaultHandler(data)": ["DefaultHandler"], "xmlparser.DefaultHandlerExpand(data)": ["DefaultHandlerExpand"], "xmlparser.ElementDeclHandler(name, model)": ["ElementDeclHandler"], "xmlparser.EndCdataSectionHandler()": ["EndCdataSectionHandler"], "xmlparser.EndDoctypeDeclHandler()": ["EndDoctypeDeclHandler"], "xmlparser.EndElementHandler(name)": ["EndElementHandler"], "xmlparser.EndNamespaceDeclHandler(prefix)": ["EndNamespaceDeclHandler"], "xmlparser.EntityDeclHandler(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)": ["EntityDeclHandler"], "xmlparser.ErrorCode": ["xmlparser.ErrorCode"], "xmlparser.ErrorColumnNumber": ["xmlparser.ErrorColumnNumber"], "xmlparser.ErrorLineNumber": ["xmlparser.ErrorLineNumber"], "xmlparser.ExternalEntityParserCreate(context)": ["ExternalEntityParserCreate"], "xmlparser.GetInputContext()": ["GetInputContext"], "xmlparser.NotStandaloneHandler()": ["NotStandaloneHandler"], "xmlparser.NotationDeclHandler(notationName, base, systemId, publicId)": ["NotationDeclHandler"], "xmlparser.Parse(data, isfinal)": ["Parse"], "xmlparser.ParseFile(file)": ["ParseFile"], "xmlparser.ProcessingInstructionHandler(target, data)": ["ProcessingInstructionHandler"], "xmlparser.SetBase(base)": ["SetBase"], "xmlparser.SetParamEntityParsing(flag)": ["SetParamEntityParsing"], "xmlparser.StartCdataSectionHandler()": ["StartCdataSectionHandler"], "xmlparser.StartDoctypeDeclHandler(doctypeName, systemId, publicId, has_internal_subset)": ["StartDoctypeDeclHandler"], "xmlparser.StartElementHandler(name, attributes)": ["StartElementHandler"], "xmlparser.StartNamespaceDeclHandler(prefix, uri)": ["StartNamespaceDeclHandler"], "xmlparser.UseForeignDTD()": ["UseForeignDTD"], "xmlparser.UseForeignDTD(flag)": ["UseForeignDTD"], "xmlparser.XmlDeclHandler(version, encoding, standalone)": ["XmlDeclHandler"], "xmlparser.buffer_size": ["xmlparser.buffer_size"], "xmlparser.buffer_text": ["xmlparser.buffer_text"], "xmlparser.ordered_attributes": ["xmlparser.ordered_attributes"], "xmlparser.specified_attributes": ["xmlparser.specified_attributes"], "xmlrpc.client.DateTime": ["xmlrpc.client.DateTime"], "xmlrpc.client.Fault": ["xmlrpc.client.Fault"], "xmlrpc.client.MultiCall(server)": ["MultiCall"], "xmlrpc.client.ProtocolError": ["xmlrpc.client.ProtocolError"], "xmlrpc.client.ServerProxy(uri)": ["ServerProxy"], "xmlrpc.client.ServerProxy(uri, allow_none=False)": ["ServerProxy", "xmlrpc.client.ServerProxy(uri, allow_none=True)"], "xmlrpc.client.ServerProxy(uri, context=None)": ["ServerProxy", "xmlrpc.client.ServerProxy(uri, context=None)"], "xmlrpc.client.ServerProxy(uri, encoding=None)": ["ServerProxy", "xmlrpc.client.ServerProxy(uri, encoding=None)"], "xmlrpc.client.ServerProxy(uri, transport=None)": ["ServerProxy", "xmlrpc.client.ServerProxy(uri, transport=None)"], "xmlrpc.client.ServerProxy(uri, verbose=False)": ["ServerProxy", "xmlrpc.client.ServerProxy(uri, verbose=True)"], "xmlrpc.client.dumps(params)": ["dumps"], "xmlrpc.client.dumps(params, allow_none=False)": ["dumps", "xmlrpc.client.dumps(params, allow_none=True)"], "xmlrpc.client.dumps(params, encoding=None)": ["dumps", "xmlrpc.client.dumps(params, encoding=None)"], "xmlrpc.client.dumps(params, methodname=None)": ["dumps", "xmlrpc.client.dumps(params, methodname=None)"], "xmlrpc.client.dumps(params, methodname=None, allow_none=False)": ["dumps", "xmlrpc.client.dumps(params, methodname=None, allow_none=True)"], "xmlrpc.client.dumps(params, methodname=None, encoding=None)": ["dumps", "xmlrpc.client.dumps(params, methodname=None, encoding=None)"], "xmlrpc.client.dumps(params, methodname=None, methodresponse=None)": ["dumps", "xmlrpc.client.dumps(params, methodname=None, methodresponse=None)"], "xmlrpc.client.dumps(params, methodresponse=None)": ["dumps", "xmlrpc.client.dumps(params, methodresponse=None)"], "xmlrpc.client.dumps(params, methodresponse=None, allow_none=False)": ["dumps", "xmlrpc.client.dumps(params, methodresponse=None, allow_none=True)"], "xmlrpc.client.dumps(params, methodresponse=None, encoding=None)": ["dumps", "xmlrpc.client.dumps(params, methodresponse=None, encoding=None)"], "xmlrpc.client.loads(data)": ["loads"], "xmlrpc.client.loads(data, use_builtin_types=False)": ["loads", "xmlrpc.client.loads(data, use_builtin_types=True)"], "xmlrpc.client.loads(data, use_datetime=False)": ["loads", "xmlrpc.client.loads(data, use_datetime=True)"], "xmlrpc.client.loads(data, use_datetime=False, use_builtin_types=False)": ["loads", "xmlrpc.client.loads(data, use_datetime=True, use_builtin_types=True)"], "xmlrpc.server.CGIXMLRPCRequestHandler()": ["CGIXMLRPCRequestHandler"], "xmlrpc.server.CGIXMLRPCRequestHandler(use_builtin_types=False)": ["CGIXMLRPCRequestHandler", "xmlrpc.server.CGIXMLRPCRequestHandler(use_builtin_types=True)"], "xmlrpc.server.DocCGIXMLRPCRequestHandler": ["xmlrpc.server.DocCGIXMLRPCRequestHandler"], "xmlrpc.server.DocXMLRPCRequestHandler": ["xmlrpc.server.DocXMLRPCRequestHandler"], "xmlrpc.server.DocXMLRPCServer(addr)": ["DocXMLRPCServer"], "xmlrpc.server.DocXMLRPCServer(addr, logRequests=True)": ["DocXMLRPCServer", "xmlrpc.server.DocXMLRPCServer(addr, logRequests=False)"], "xmlrpc.server.DocXMLRPCServer(addr, requestHandler=DocXMLRPCRequestHandler)": ["DocXMLRPCServer"], "xmlrpc.server.DocXMLRPCServer(addr, requestHandler=DocXMLRPCRequestHandler, allow_none=False)": ["DocXMLRPCServer", "xmlrpc.server.DocXMLRPCServer(addr, requestHandler=DocXMLRPCRequestHandler, allow_none=True)"], "xmlrpc.server.SimpleXMLRPCRequestHandler": ["xmlrpc.server.SimpleXMLRPCRequestHandler"], "xmlrpc.server.SimpleXMLRPCServer(addr)": ["SimpleXMLRPCServer"], "xmlrpc.server.SimpleXMLRPCServer(addr, allow_none=False)": ["SimpleXMLRPCServer", "xmlrpc.server.SimpleXMLRPCServer(addr, allow_none=True)"], "xmlrpc.server.SimpleXMLRPCServer(addr, encoding=None)": ["SimpleXMLRPCServer", "xmlrpc.server.SimpleXMLRPCServer(addr, encoding=None)"], "xmlrpc.server.SimpleXMLRPCServer(addr, logRequests=True)": ["SimpleXMLRPCServer", "xmlrpc.server.SimpleXMLRPCServer(addr, logRequests=False)"], "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler)": ["SimpleXMLRPCServer"], "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, encoding=None)": ["SimpleXMLRPCServer", "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, encoding=None)"], "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, logRequests=True)": ["SimpleXMLRPCServer", "xmlrpc.server.SimpleXMLRPCServer(addr, requestHandler=SimpleXMLRPCRequestHandler, logRequests=False)"], "xmlrpc.server.SimpleXMLRPCServer(addr, use_builtin_types=False)": ["SimpleXMLRPCServer", "xmlrpc.server.SimpleXMLRPCServer(addr, use_builtin_types=True)"], "zip(*iterables)": ["zip", "clip(*iterables)", "disp(*iterables)", "skip(*iterables)", "pipe(*iterables)", "Pipe(*iterables)", "flip(*iterables)", "__ipow__(*iterables)", "_clip(*iterables)", "_iexp(*iterables)", "ipow(*iterables)", "strip(*iterables)", "pipe2(*iterables)", "zfill(*iterables)", "input(*iterables)"], "zipapp.create_archive(source)": ["create_archive", "zipapp.ParserCreate(source)", "zipapp.unpack_archive(source)", "zipapp._ravel_dispatcher(source)", "zipapp._average_dispatcher(source)", "zipapp._require_dispatcher(source)", "zipapp.create_default_context(source)", "zipapp.add_charset(source)", "zipapp._sort_dispatcher(source)", "zipapp.get_default_compiler(source)", "zipapp._rot90_dispatcher(source)", "zipapp.register_at_fork(source)", "zipapp._trapz_dispatcher(source)", "zipapp._transpose_dispatcher(source)", "zipapp.create_string_buffer(source)"], "zipapp.create_archive(source, compressed=False)": ["create_archive", "zipapp.create_archive(source, compressed=True)", "zipapp.ParserCreate(source, compressed=False)", "zipapp.unpack_archive(source, compressed=False)", "zipapp._ravel_dispatcher(source, compressed=False)", "zipapp._average_dispatcher(source, compressed=False)", "zipapp._require_dispatcher(source, compressed=False)", "zipapp.create_default_context(source, compressed=False)", "zipapp.add_charset(source, compressed=False)", "zipapp._sort_dispatcher(source, compressed=False)", "zipapp.get_default_compiler(source, compressed=False)", "zipapp._rot90_dispatcher(source, compressed=False)", "zipapp.register_at_fork(source, compressed=False)", "zipapp._trapz_dispatcher(source, compressed=False)", "zipapp._transpose_dispatcher(source, compressed=False)"], "zipapp.create_archive(source, filter=None)": ["create_archive", "zipapp.create_archive(source, filter=None)", "zipapp.ParserCreate(source, filter=None)", "zipapp.unpack_archive(source, filter=None)", "zipapp._ravel_dispatcher(source, filter=None)", "zipapp._average_dispatcher(source, filter=None)", "zipapp._require_dispatcher(source, filter=None)", "zipapp.create_default_context(source, filter=None)", "zipapp.add_charset(source, filter=None)", "zipapp._sort_dispatcher(source, filter=None)", "zipapp.get_default_compiler(source, filter=None)", "zipapp._rot90_dispatcher(source, filter=None)", "zipapp.register_at_fork(source, filter=None)", "zipapp._trapz_dispatcher(source, filter=None)", "zipapp._transpose_dispatcher(source, filter=None)"], "zipapp.create_archive(source, interpreter=None)": ["create_archive", "zipapp.create_archive(source, interpreter=None)", "zipapp.ParserCreate(source, interpreter=None)", "zipapp.unpack_archive(source, interpreter=None)", "zipapp._ravel_dispatcher(source, interpreter=None)", "zipapp._average_dispatcher(source, interpreter=None)", "zipapp._require_dispatcher(source, interpreter=None)", "zipapp.create_default_context(source, interpreter=None)", "zipapp.add_charset(source, interpreter=None)", "zipapp._sort_dispatcher(source, interpreter=None)", "zipapp.get_default_compiler(source, interpreter=None)", "zipapp._rot90_dispatcher(source, interpreter=None)", "zipapp.register_at_fork(source, interpreter=None)", "zipapp._trapz_dispatcher(source, interpreter=None)", "zipapp._transpose_dispatcher(source, interpreter=None)"], "zipapp.create_archive(source, main=None)": ["create_archive", "zipapp.create_archive(source, main=None)", "zipapp.ParserCreate(source, main=None)", "zipapp.unpack_archive(source, main=None)", "zipapp._ravel_dispatcher(source, main=None)", "zipapp._average_dispatcher(source, main=None)", "zipapp._require_dispatcher(source, main=None)", "zipapp.create_default_context(source, main=None)", "zipapp.add_charset(source, main=None)", "zipapp._sort_dispatcher(source, main=None)", "zipapp.get_default_compiler(source, main=None)", "zipapp._rot90_dispatcher(source, main=None)", "zipapp.register_at_fork(source, main=None)", "zipapp._trapz_dispatcher(source, main=None)", "zipapp._transpose_dispatcher(source, main=None)"], "zipapp.create_archive(source, target=None)": ["create_archive", "zipapp.create_archive(source, target=None)", "zipapp.ParserCreate(source, target=None)", "zipapp.unpack_archive(source, target=None)", "zipapp._ravel_dispatcher(source, target=None)", "zipapp._average_dispatcher(source, target=None)", "zipapp._require_dispatcher(source, target=None)", "zipapp.create_default_context(source, target=None)", "zipapp.add_charset(source, target=None)", "zipapp._sort_dispatcher(source, target=None)", "zipapp.get_default_compiler(source, target=None)", "zipapp._rot90_dispatcher(source, target=None)", "zipapp.register_at_fork(source, target=None)", "zipapp._trapz_dispatcher(source, target=None)", "zipapp._transpose_dispatcher(source, target=None)"], "zipapp.create_archive(source, target=None, compressed=False)": ["create_archive", "zipapp.create_archive(source, target=None, compressed=True)", "zipapp.ParserCreate(source, target=None, compressed=False)", "zipapp.unpack_archive(source, target=None, compressed=False)", "zipapp._ravel_dispatcher(source, target=None, compressed=False)", "zipapp._average_dispatcher(source, target=None, compressed=False)", "zipapp._require_dispatcher(source, target=None, compressed=False)", "zipapp.create_default_context(source, target=None, compressed=False)", "zipapp.add_charset(source, target=None, compressed=False)", "zipapp._sort_dispatcher(source, target=None, compressed=False)", "zipapp.get_default_compiler(source, target=None, compressed=False)", "zipapp._rot90_dispatcher(source, target=None, compressed=False)", "zipapp.register_at_fork(source, target=None, compressed=False)", "zipapp._trapz_dispatcher(source, target=None, compressed=False)", "zipapp._transpose_dispatcher(source, target=None, compressed=False)"], "zipapp.create_archive(source, target=None, interpreter=None)": ["create_archive", "zipapp.create_archive(source, target=None, interpreter=None)", "zipapp.ParserCreate(source, target=None, interpreter=None)", "zipapp.unpack_archive(source, target=None, interpreter=None)", "zipapp._ravel_dispatcher(source, target=None, interpreter=None)", "zipapp._average_dispatcher(source, target=None, interpreter=None)", "zipapp._require_dispatcher(source, target=None, interpreter=None)", "zipapp.create_default_context(source, target=None, interpreter=None)", "zipapp.add_charset(source, target=None, interpreter=None)", "zipapp._sort_dispatcher(source, target=None, interpreter=None)", "zipapp.get_default_compiler(source, target=None, interpreter=None)", "zipapp._rot90_dispatcher(source, target=None, interpreter=None)", "zipapp.register_at_fork(source, target=None, interpreter=None)", "zipapp._trapz_dispatcher(source, target=None, interpreter=None)", "zipapp._transpose_dispatcher(source, target=None, interpreter=None)"], "zipapp.create_archive(source, target=None, main=None)": ["create_archive", "zipapp.create_archive(source, target=None, main=None)", "zipapp.ParserCreate(source, target=None, main=None)", "zipapp.unpack_archive(source, target=None, main=None)", "zipapp._ravel_dispatcher(source, target=None, main=None)", "zipapp._average_dispatcher(source, target=None, main=None)", "zipapp._require_dispatcher(source, target=None, main=None)", "zipapp.create_default_context(source, target=None, main=None)", "zipapp.add_charset(source, target=None, main=None)", "zipapp._sort_dispatcher(source, target=None, main=None)", "zipapp.get_default_compiler(source, target=None, main=None)", "zipapp._rot90_dispatcher(source, target=None, main=None)", "zipapp.register_at_fork(source, target=None, main=None)", "zipapp._trapz_dispatcher(source, target=None, main=None)", "zipapp._transpose_dispatcher(source, target=None, main=None)"], "zipapp.get_interpreter(archive)": ["get_interpreter", "zipapp.get_importer(archive)", "zipapp.get_parameter(archive)", "zipapp.get_inheritable(archive)", "zipapp._get_literal_prefix(archive)", "zipapp.get_invalid_parameter(archive)", "zipapp.get_writer(archive)", "zipapp.get_type_line(archive)", "zipapp._get_indent(archive)", "zipapp.get_signature(archive)", "zipapp._get_writer(archive)", "zipapp.generic_parser(archive)", "zipapp.getinnerframes(archive)", "zipapp.SetPointerType(archive)", "zipapp.interpolate_1d(archive)"], "zipfile.BadZipFile": ["zipfile.BadZipFile"], "zipfile.BadZipfile": ["zipfile.BadZipfile"], "zipfile.LargeZipFile": ["zipfile.LargeZipFile"], "zipfile.PyZipFile": ["zipfile.PyZipFile"], "zipfile.PyZipFile(file)": ["PyZipFile"], "zipfile.PyZipFile(file, compression=ZIP_STORED)": ["PyZipFile"], "zipfile.PyZipFile(file, compression=ZIP_STORED, allowZip64=True)": ["PyZipFile", "zipfile.PyZipFile(file, compression=ZIP_STORED, allowZip64=False)"], "zipfile.PyZipFile(file, compression=ZIP_STORED, optimize=-1)": ["PyZipFile", "zipfile.PyZipFile(file, compression=ZIP_STORED, optimize=(- '1'))"], "zipfile.PyZipFile(file, mode='r')": ["PyZipFile", "zipfile.PyZipFile(file, mode=1.0)"], "zipfile.PyZipFile(file, mode='r', optimize=-1)": ["PyZipFile", "zipfile.PyZipFile(file, mode=1.0, optimize=(- '1'))"], "zipfile.PyZipFile(file, optimize=-1)": ["PyZipFile", "zipfile.PyZipFile(file, optimize=(- '1'))"], "zipfile.ZIP_BZIP2": ["zipfile.ZIP_BZIP2"], "zipfile.ZIP_DEFLATED": ["zipfile.ZIP_DEFLATED"], "zipfile.ZIP_STORED": ["zipfile.ZIP_STORED"], "zipfile.ZipFile": ["zipfile.ZipFile"], "zipfile.ZipFile(file)": ["ZipFile"], "zipfile.ZipFile(file, allowZip64=True)": ["ZipFile", "zipfile.ZipFile(file, allowZip64=False)"], "zipfile.ZipFile(file, compression=ZIP_STORED)": ["ZipFile"], "zipfile.ZipFile(file, compression=ZIP_STORED, allowZip64=True)": ["ZipFile", "zipfile.ZipFile(file, compression=ZIP_STORED, allowZip64=False)"], "zipfile.ZipFile(file, compression=ZIP_STORED, compresslevel=None)": ["ZipFile", "zipfile.ZipFile(file, compression=ZIP_STORED, compresslevel=None)"], "zipfile.ZipFile(file, compresslevel=None)": ["ZipFile", "zipfile.ZipFile(file, compresslevel=None)"], "zipfile.ZipFile(file, mode='r')": ["ZipFile", "zipfile.ZipFile(file, mode=1)"], "zipfile.ZipFile(file, mode='r', allowZip64=True)": ["ZipFile", "zipfile.ZipFile(file, mode='r', allowZip64=False)", "zipfile.ZipFile(file, mode=1.0, allowZip64=True)"], "zipfile.ZipFile(file, mode='r', compression=ZIP_STORED)": ["ZipFile", "zipfile.ZipFile(file, mode=1.0, compression=ZIP_STORED)"], "zipfile.ZipFile(file, mode='r', compresslevel=None)": ["ZipFile", "zipfile.ZipFile(file, mode='r', compresslevel=None)", "zipfile.ZipFile(file, mode=1, compresslevel=None)"], "zipfile.ZipInfo(1, 1, 0, 0, 0))": [], "zipfile.ZipInfo(1, 1, 0, 0, 0), date_time=(1980)": [], "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName')": [], "zipfile.ZipInfo(1, 1, 0, 0, 0), filename='NoName', date_time=(1980)": [], "zipfile.is_zipfile(filename)": ["is_zipfile", "zipfile.isfile(filename)", "zipfile._make_zipfile(filename)", "zipfile._check_zipfile(filename)", "zipfile.is_tarfile(filename)", "zipfile._unpack_zipfile(filename)", "zipfile.is_tuple(filename)", "zipfile.zipfile_factory(filename)", "zipfile.simplefilter(filename)", "zipfile.isfileobj(filename)", "zipfile.isvisible(filename)", "zipfile.listmailcapfiles(filename)", "zipfile._open_zipfile_writer(filename)", "zipfile._simple(filename)", "zipfile.importfile(filename)"], "zipimport.zipimporter(archivepath)": ["zipimporter"], "zipimporter.archive": ["zipimporter.archive"], "zipimporter.find_module(fullname)": ["find_module"], "zipimporter.find_module(fullname, path)": ["find_module"], "zipimporter.get_data(pathname)": ["get_data"], "zipimporter.get_filename(fullname)": ["get_filename"], "zipimporter.load_module(fullname)": ["load_module"], "zipimporter.prefix": ["zipimporter.prefix"], "zlib.ZLIB_VERSION": ["zlib.ZLIB_VERSION"], "zlib.adler32(data)": ["adler32"], "zlib.adler32(data, value)": ["adler32"], "zlib.compress(data)": ["compress"], "zlib.compress(data, level=-1)": ["compress", "zlib.compress(data, level=(- '1'))"], "zlib.compressobj()": ["compressobj"], "zlib.compressobj(level=-1)": ["compressobj", "zlib.compressobj(level=(- '1'))"], "zlib.compressobj(level=-1, method=DEFLATED)": ["compressobj", "zlib.compressobj(level=(- '1'), method=DEFLATED)"], "zlib.compressobj(level=-1, strategy=Z_DEFAULT_STRATEGY)": ["compressobj", "zlib.compressobj(level=(- '1'), strategy=Z_DEFAULT_STRATEGY)"], "zlib.compressobj(level=-1, wbits=MAX_WBITS)": ["compressobj", "zlib.compressobj(level=(- '1'), wbits=MAX_WBITS)"], "zlib.compressobj(method=DEFLATED)": ["compressobj"], "zlib.compressobj(strategy=Z_DEFAULT_STRATEGY)": ["compressobj"], "zlib.compressobj(wbits=MAX_WBITS)": ["compressobj"], "zlib.compressobj(zdict, level=-1)": ["compressobj", "zlib.compressobj(zdict, level=(- '1'))"], "zlib.compressobj(zdict, level=-1, method=DEFLATED)": ["compressobj", "zlib.compressobj(zdict, level=(- '1'), method=DEFLATED)"], "zlib.compressobj(zdict, level=-1, strategy=Z_DEFAULT_STRATEGY)": ["compressobj", "zlib.compressobj(zdict, level=(- '1'), strategy=Z_DEFAULT_STRATEGY)"], "zlib.compressobj(zdict, method=DEFLATED)": ["compressobj"], "zlib.compressobj(zdict, strategy=Z_DEFAULT_STRATEGY)": ["compressobj"], "zlib.compressobj(zdict, wbits=MAX_WBITS)": ["compressobj"], "zlib.crc32(data)": ["crc32"], "zlib.crc32(data, value)": ["crc32"], "zlib.decompress(data)": ["decompress"], "zlib.decompress(data, bufsize=DEF_BUF_SIZE)": ["decompress"], "zlib.decompress(data, wbits=MAX_WBITS)": ["decompress"], "zlib.decompress(data, wbits=MAX_WBITS, bufsize=DEF_BUF_SIZE)": ["decompress"], "zlib.decompressobj()": ["decompressobj"], "zlib.decompressobj(wbits=MAX_WBITS)": ["decompressobj"], "zlib.decompressobj(zdict)": ["decompressobj"], "zlib.decompressobj(zdict, wbits=MAX_WBITS)": ["decompressobj"], "zlib.error": ["zlib.error"]}