{
    "snippets": [
        "os.kill(os.getpid(), signal.SIGUSR1)",
        "bytes.fromhex('4a4b4c').decode('utf-8')",
        "all(x == myList[0] for x in myList)",
        "print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))",
        "d.decode('cp1251').encode('utf8')",
        "res = {k: v for k, v in list(kwargs.items()) if v is not None}",
        "res = dict((k, v) for k, v in kwargs.items() if v is not None)",
        "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)",
        "\"\"\"\"\"\".join(['a', 'b', 'c'])",
        "pd.Series(list(set(s1).intersection(set(s2))))",
        "client.send('HTTP/1.0 200 OK\\r\\n')",
        "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()",
        "inputString.split('\\n')",
        "' a \\n b \\r\\n c '.split('\\n')",
        "\"\"\":\"\"\".join(str(x) for x in b)",
        "Entry.objects.filter()[:1].get()",
        "a.sum(axis=1)",
        "warnings.simplefilter('always')",
        "print(' '.join(map(str, l)))",
        "subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])",
        "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')",
        "my_float = float(my_string.replace(',', ''))",
        "float('123,456.908'.replace(',', ''))",
        "sys.path.append('/path/to/whatever')",
        "re.split('(\\\\W+)', 'Words, words, words.')",
        "file = open('Output.txt', 'a')",
        "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')",
        "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()",
        "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()",
        "r = requests.get(url)",
        "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)",
        "parser.add_argument('--version', action='version', version='%(prog)s 2.0')",
        "{i: d[i] for i in d if i != 'c'}",
        "pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))",
        "s.split(' ', 4)",
        "input('Enter your input:')",
        "app.run(debug=True)",
        "pickle.dump(mylist, open('save.txt', 'wb'))",
        "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)",
        "numpy.zeros((3, 3, 3))",
        "\"\"\" \"\"\".join(content.split(' ')[:-1])",
        "x = np.asarray(x).reshape(1, -1)[(0), :]",
        "sum(sum(i) if isinstance(i, list) else i for i in L)",
        "struct.unpack('!f', '470FC614'.decode('hex'))[0]",
        "my_dict.update((x, y * 2) for x, y in list(my_dict.items()))",
        "subprocess.call('sleep.sh', shell=True)",
        "\"\"\",\"\"\".join(l)",
        "myList = ','.join(map(str, myList))",
        "list(reversed(list(range(10))))",
        "print('lamp, bag, mirror'.replace('bag,', ''))",
        "\"\"\".\"\"\".join(s.split('.')[::-1])",
        "datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')",
        "time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))",
        "(datetime.datetime.now() - datetime.timedelta(days=7)).date()",
        "print(sum(row[column] for row in data))",
        "[sum(row[i] for row in array) for i in range(len(array[0]))]",
        "base64.b64encode(bytes('your string', 'utf-8'))",
        "dict((k, [d[k] for d in dicts]) for k in dicts[0])",
        "{k: [d[k] for d in dicts] for k in dicts[0]}",
        "request.args['myParam']",
        "[k for k, v in list(Counter(mylist).items()) if v > 1]",
        "sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))",
        "sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))",
        "db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))",
        "[image for menuitem in list_of_menuitems for image in menuitem]",
        "a.extend(b)",
        "a.extend(list(b))",
        "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')",
        "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')",
        "print(x.rpartition('-')[0])",
        "print(x.rsplit('-', 1)[0])",
        "ftp.storlines('STOR ' + filename, open(filename, 'r'))",
        "browser.execute_script(\"document.getElementById('XYZ').value+='1'\")",
        "np.maximum([2, 3, 4], [1, 5, 2])",
        "print(l[3:] + l[:3])",
        "for fn in os.listdir('.'):\n    if os.path.isfile(fn):\n        pass",
        "for (root, dirs, filenames) in os.walk(source):\n    for f in filenames:\n        pass",
        "[int(1000 * random.random()) for i in range(10000)]",
        "datetime.datetime.now().strftime('%H:%M:%S.%f')",
        "db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())",
        "df.b.str.contains('^f')",
        "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))",
        "df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()",
        "\"\"\"({:d} goals, ${:d})\"\"\".format(self.goals, self.penalties)",
        "\"\"\"({} goals, ${})\"\"\".format(self.goals, self.penalties)",
        "\"\"\"({0.goals} goals, ${0.penalties})\"\"\".format(self)",
        "[int(''.join(str(d) for d in x)) for x in L]",
        "[''.join(str(d) for d in x) for x in L]",
        "L = [int(''.join([str(y) for y in x])) for x in L]",
        "myfile.write('\\n'.join(lines))",
        "[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]",
        "text = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', text)",
        "df.astype(bool).sum(axis=1)",
        "re.search('(?<!Distillr)\\\\\\\\AcroTray\\\\.exe', 'C:\\\\SomeDir\\\\AcroTray.exe')",
        "\"\"\"QH QD JC KD JS\"\"\".split()",
        "print(re.search('>.*<', line).group(0))",
        "open(filename, 'w').close()",
        "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')",
        "[index for index, item in enumerate(thelist) if item[0] == '332']",
        "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()",
        "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()",
        "plt.plot(x, y, label='H\\u2082O')",
        "plt.plot(x, y, label='$H_2O$')",
        "[x for x in mylist if len(x) == 3]",
        "lst = [Object() for _ in range(100)]",
        "lst = [Object() for i in range(100)]",
        "self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')",
        "df1.merge(df2, on='Date_Time')",
        "'first string is: %s, second one is: %s' % (str1, 'geo.tif')",
        "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]",
        "if (not os.path.exists(directory)):\n    os.makedirs(directory)",
        "try:\n    os.makedirs(path)\nexcept OSError:\n    if (not os.path.isdir(path)):\n        raise",
        "distutils.dir_util.mkpath(path)",
        "try:\n    os.makedirs(path)\nexcept OSError as exception:\n    if (exception.errno != errno.EEXIST):\n        raise",
        "re.sub('\\\\bH3\\\\b', 'H1', text)",
        "re.sub('\\\\D', '', 'aas30dsa20')",
        "\"\"\"\"\"\".join([x for x in 'aas30dsa20' if x.isdigit()])",
        "print(soup.find('name').string)",
        "records = dict((record['_id'], record) for record in cursor)",
        "np.concatenate((A, B))",
        "np.vstack((A, B))",
        "os.stat(filepath).st_size",
        "l.count('a')",
        "Counter(l)",
        "[[x, l.count(x)] for x in set(l)]",
        "dict(((x, l.count(x)) for x in set(l)))",
        "l.count('b')",
        "shutil.copy(srcfile, dstdir)",
        "max(k for k, v in x.items() if v != 0)",
        "(k for k, v in x.items() if v != 0)",
        "file.seek(0)",
        "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])",
        "del d['ele']",
        "MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))",
        "['it'] + ['was'] + ['annoying']",
        "str(int(x) + 1).zfill(len(x))",
        "all(df.index[:-1] <= df.index[1:])",
        "list(t)",
        "tuple(l)",
        "level1 = map(list, level1)",
        "pprint.pprint(dataobject, logFile)",
        "df.loc[df['BoolCol']]",
        "df.iloc[np.flatnonzero(df['BoolCol'])]",
        "df[df['BoolCol'] == True].index.tolist()",
        "df[df['BoolCol']].index.tolist()",
        "os.chdir(owd)",
        "c.execute(\"INSERT INTO test VALUES (?, 'bar')\", (testfield,))",
        "\"\"\"\\\\x89\\\\n\"\"\".decode('string_escape')",
        "raw_string.decode('string_escape')",
        "raw_byte_string.decode('unicode_escape')",
        "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', s)]",
        "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')",
        "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')",
        "soup.find('div', id='main-content').decompose()",
        "df[df['ids'].str.contains('ball')]",
        "df.reset_index(level=0, inplace=True)",
        "df['index1'] = df.index",
        "df.reset_index(level=['tick', 'obs'])",
        "[x[::-1] for x in b]",
        "np.array([zip(x, y) for x, y in zip(a, b)])",
        "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)",
        "\"\"\",\"\"\".join([str(i) for i in list_of_ints])",
        "requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))",
        "'abcd}def}'.rfind('}')",
        "print([item for item in [1, 2, 3]])",
        "[(x['x'], x['y']) for x in d]",
        "print(os.path.splitext(os.path.basename('hemanth.txt'))[0])",
        "dict(x[i:i + 2] for i in range(0, len(x), 2))",
        "values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])",
        "df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]",
        "df.replace({'\\n': '<br>'}, regex=True)",
        "[(x + y) for x, y in zip(word, word[1:])]",
        "list(map(lambda x, y: x + y, word[:-1], word[1:]))",
        "print(re.findall('(https?://[^\\\\s]+)', myString))",
        "print(re.search('(?P<url>https?://[^\\\\s]+)', myString).group('url'))",
        "re.sub('[^A-Za-z0-9]+', '', mystring)",
        "pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)",
        "matrix = [[a, b], [c, d], [e, f]]",
        "mystring.replace(' ', '_')",
        "os.path.abspath('mydir/myfile.txt')",
        "\"\"\" \"\"\".join(my_string.split())",
        "os.path.splitext(filename)[0]",
        "[sum(l[:i]) for i, _ in enumerate(l)]",
        "\"\"\"Docs/src/Scripts/temp\"\"\".replace('/', '/\\x00/').split('\\x00')",
        "np.random.shuffle(np.transpose(r))",
        "df['D'] = df['B']",
        "list(data['A']['B'].values())[0]['maindata'][0]['Info']",
        "all(predicate(x) for x in string)",
        "os.statvfs('/').f_files - os.statvfs('/').f_ffree",
        "cursor.fetchone()[0]",
        "user_list = [int(number) for number in user_input.split(',')]",
        "[int(s) for s in user.split(',')]",
        "sorted(list, key=lambda x: (x[0], -x[1]))",
        "ut.sort(key=cmpfun, reverse=True)",
        "ut.sort(key=lambda x: x.count, reverse=True)",
        "driver.find_element_by_partial_link_text('Send').click()",
        "driver.findElement(By.linkText('Send InMail')).click()",
        "driver.find_element_by_link_text('Send InMail').click()",
        "'ME' + str(i)",
        "df.sort_values(['System_num', 'Dis'])",
        "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())",
        "l.sort(key=lambda t: len(t[1]), reverse=True)",
        "re.findall('\\\\b(\\\\w+)d\\\\b', s)",
        "bool(re.search('ba[rzd]', 'foobarrrr'))",
        "list(set(t))",
        "list(set(source_list))",
        "list(OrderedDict.fromkeys('abracadabra'))",
        "numpy.array(a).reshape(-1).tolist()",
        "numpy.array(a)[0].tolist()",
        "print(soup.find(text='Address:').findNext('td').contents[0])",
        "\"\"\" \"\"\".join([('%d@%d' % t) for t in l])",
        "\"\"\" \"\"\".join([('%d@%d' % (t[0], t[1])) for t in l])",
        "driver.execute_script('return document.documentElement.outerHTML;')",
        "[i for i in teststr if re.search('\\\\d+[xX]', i)]",
        "df['A'][(df['B'] > 50) & (df['C'] == 900)]",
        "sorted(o.items())",
        "sorted(d)",
        "sorted(d.items())",
        "int('1')",
        "int()",
        "T2 = [map(int, x) for x in T1]",
        "subprocess.call(['./test.sh'])",
        "subprocess.call(['notepad'])",
        "[val for pair in zip(l1, l2) for val in pair]",
        "encoded = base64.b64encode('data to be encoded')",
        "encoded = 'data to be encoded'.encode('ascii')",
        "lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\\t'))",
        "getattr(my_object, my_str)",
        "print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))",
        "sum([pair[0] for pair in list_of_pairs])",
        "d = ast.literal_eval(\"{'code1':1,'code2':1}\")",
        "[word for word in mystring.split() if word.startswith('$')]",
        "text = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', text, flags=re.MULTILINE)",
        "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)",
        "np.mean(a, axis=1)",
        "subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])",
        "subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)",
        "writer.writeheader()",
        "df.fillna(df.mean(axis=1), axis=1)",
        "time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))",
        "super(Derived, cls).do(a)",
        "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]",
        "re.split(' +', 'hello world sample text')",
        "len(max(words, key=len))",
        "result[0]['from_user']",
        "[line.split() for line in open('File.txt')]",
        "res = dict((v, k) for k, v in a.items())",
        "new_file = open('path/to/FILE_NAME.ext', 'w')",
        "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()",
        "any(key.startswith('EMP$$') for key in dict1)",
        "[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]",
        "pd.DataFrame({'email': sf.index, 'list': sf.values})",
        "print('\\t'.join(map(str, list)))",
        "print('\\xd0\\xbf\\xd1\\x80\\xd0\\xb8'.encode('raw_unicode_escape'))",
        "'Sopet\\xc3\\xb3n'.encode('latin-1').decode('utf-8')",
        "image = image.resize((x, y), Image.ANTIALIAS)",
        "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)",
        "print('{0:.0f}%'.format(1.0 / 3 * 100))",
        "mylist.sort(key=lambda x: x['title'])",
        "l.sort(key=lambda x: x['title'])",
        "l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))",
        "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))",
        "soup.find_all('span', {'class': 'starGryB sp'})",
        "df.to_sql('test', engine, schema='a_schema')",
        "brackets = re.sub('[^(){}[\\\\]]', '', s)",
        "list(dict((x[0], x) for x in L).values())",
        "[line.rstrip('\\n') for line in file]",
        "[i for (i, x) in enumerate(testlist) if (x == 1)]",
        "for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:\n    pass",
        "for i in (i for (i, x) in enumerate(testlist) if (x == 1)):\n    pass",
        "gen = (i for (i, x) in enumerate(testlist) if (x == 1))\nfor i in gen:\n    pass",
        "print(testlist.index(element))",
        "try:\n    print(testlist.index(element))\nexcept ValueError:\n    pass",
        "max(lis, key=lambda item: item[1])[0]",
        "max(lis, key=itemgetter(1))[0]",
        "time.sleep(1)",
        "\"\"\", \"\"\".join('(' + ', '.join(i) + ')' for i in L)",
        "b = models.CharField(max_length=7, default='0000000', editable=False)",
        "sorted(list5, lambda x: (degree(x), x))",
        "sorted(list5, key=lambda vertex: (degree(vertex), vertex))",
        "(n for n in [1, 2, 3, 5])",
        "newlist = [v for i, v in enumerate(oldlist) if i not in removelist]",
        "f = open('yourfile.txt', 'w')",
        "getattr(obj, 'attr')",
        "from functools import reduce\nreduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))",
        "map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))",
        "df['range'].replace(',', '-', inplace=True)",
        "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])",
        "result = ([a for (a, b) in original], [b for (a, b) in original])",
        "result = ((a for (a, b) in original), (b for (a, b) in original))",
        "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])",
        "map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])",
        "json.dumps(Decimal('3.9'))",
        "d['mynewkey'] = 'mynewvalue'",
        "data.update({'a': 1, })",
        "data.update(dict(a=1))",
        "data.update(a=1)",
        "max([max(i) for i in matrix])",
        "answer = str(round(answer, 2))",
        "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)",
        "df.groupby('A').filter(lambda x: len(x) > 1)",
        "[x for x in myfile.splitlines() if x != '']",
        "lst = map(int, open('filename.txt').readlines())",
        "plt.colorbar(mappable=mappable, cax=ax3)",
        "Counter(' '.join(df['text']).split()).most_common(100)",
        "re.findall('(.+?):(.+?)\\\\b ?', text)",
        "list(itertools.combinations((1, 2, 3), 2))",
        "datetime.now(pytz.utc)",
        "list2 = [x for x in list1 if x != []]",
        "list2 = [x for x in list1 if x]",
        "return HttpResponse(data, mimetype='application/json')",
        "re.findall('(.*?)\\\\[.*?\\\\]', example_str)",
        "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', example_str)",
        "re.findall('\\\\(.+?\\\\)|\\\\w', '(zyx)bc')",
        "re.findall('\\\\((.*?)\\\\)|(\\\\w)', '(zyx)bc')",
        "re.findall('\\\\(.*?\\\\)|\\\\w', '(zyx)bc')",
        "elements = ['%{0}%'.format(element) for element in elements]",
        "subprocess.Popen(['background-process', 'arguments'])",
        "[mydict[x] for x in mykeys]",
        "dict([('Name', 'Joe'), ('Age', 22)])",
        "data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)",
        "print(s.encode('unicode-escape').replace('\"', '\\\\\"'))",
        "re.split('(\\\\W+)', s)",
        "df.plot(kind='barh', stacked=True)",
        "{i[1]: i[0] for i in list(myDictionary.items())}",
        "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]",
        "isinstance(obj, str)",
        "isinstance(o, str)",
        "(type(o) is str)",
        "isinstance(obj_to_test, str)",
        "list2.extend(list1)",
        "list1.extend(mylog)",
        "c.extend(a)",
        "for line in mylog:\n    list1.append(line)",
        "b.append((a[0][0], a[0][2]))",
        "app.config['SECRET_KEY'] = 'Your_secret_string'",
        "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)",
        "[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']",
        "ax.set_xticklabels(labels, rotation=45)",
        "re.sub('[^\\\\w]', ' ', s)",
        "os.path.basename(os.path.dirname(os.path.realpath(__file__)))",
        "print(re.findall(\"'\\\\\\\\[0-7]{1,3}'\", str))",
        "re.split('[ ](?=[A-Z]+\\\\b)', input)",
        "re.split('[ ](?=[A-Z])', input)",
        "r = requests.post(url, files=files, headers=headers, data=data)",
        "open('filename', 'wb').write(bytes_)",
        "[dct[k] for k in lst]",
        "x.set_index('name').index.get_duplicates()",
        "round(1.923328437452, 3)",
        "sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)",
        "ax.set_rlabel_position(135)",
        "os.path.isabs(my_path)",
        "len(list(yourdict.keys()))",
        "len(set(open(yourdictfile).read().split()))",
        "df.groupby('id').first()",
        "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)",
        "re.findall('src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"', data)",
        "sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])",
        "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])",
        "q.put((-n, n))",
        "df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])",
        "re.findall('([a-fA-F\\\\d]{32})', data)",
        "len(my_list)",
        "len(l)",
        "len(s)",
        "len(my_tuple)",
        "len(my_string)",
        "\"\"\"\\\\a\"\"\".decode('string_escape')",
        "\"\"\"obama\"\"\".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')",
        "shutil.rmtree('/folder_name')",
        "data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())",
        "sorted(x, key=x.get, reverse=True)",
        "sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)",
        "np.vstack((a, b))",
        "print(concatenate((a, b), axis=0))",
        "print(concatenate((a, b), axis=1))",
        "c = np.r_[(a[None, :], b[None, :])]",
        "np.array((a, b))",
        "print(socket.getaddrinfo('google.com', 80))",
        "df.xs('sat', level='day', drop_level=False)",
        "return HttpResponse('Unauthorized', status=401)",
        "Flask(__name__, template_folder='wherever')",
        "session.execute('INSERT INTO t1 (SELECT * FROM t2)')",
        "c2.sort(key=lambda row: row[2])",
        "c2.sort(key=lambda row: (row[2], row[1], row[0]))",
        "c2.sort(key=lambda row: (row[2], row[1]))",
        "matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})",
        "df['date'].apply(lambda x: x.toordinal())",
        "element.get_attribute('innerHTML')",
        "df.index.get_loc('bob')",
        "os.system('gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\'')",
        "my_dict.update({'third_key': 1})",
        "my_list = []",
        "my_list.append(12)",
        "myList.insert(0, 'wuggah')",
        "\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\".replace('\\\\x', '').decode('hex')",
        "df[df.columns[-1]]",
        "df.loc[df['Letters'] == 'C', 'Letters'].values[0]",
        "np.column_stack(([1, 2, 3], [4, 5, 6]))",
        "type(i)",
        "type(v)",
        "print(type(variable_name))",
        "next(itertools.islice(range(10), 5, 5 + 1))",
        "print('\"{}\"'.format(word))",
        "\"\"\" \"\"\".join(list)",
        "y = [[] for n in range(2)]",
        "data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]",
        "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])",
        "re.sub('i', '', 'it is icy')",
        "\"\"\"it is icy\"\"\".replace('i', '')",
        "df.dropna(subset=[1])",
        "[x for x in myList if x.n == 30]",
        "nums = [int(x) for x in intstringlist]",
        "map(int, eval(input('Enter the unfriendly numbers: ')))",
        "sys.stdout.write('.')",
        "int(round(2.51 * 100))",
        "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass",
        "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass",
        "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass",
        "df.plot(legend=False)",
        "for i in range(256):\n    for j in range(256):\n        ip = ('192.168.%d.%d' % (i, j))\n        print(ip)",
        "for (i, j) in product(list(range(256)), list(range(256))):\n    pass",
        "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)",
        "sum(1 << i for i, b in enumerate(x) if b)",
        "target.write('%r\\n%r\\n%r\\n' % (line1, line2, line3))",
        "[y for x in data for y in (x if isinstance(x, list) else [x])]",
        "print('foo\\nbar'.encode('string_escape'))",
        "\"\"\"\"\"\".join(s.rsplit(',', 1))",
        "(x[1:] + x[:-1]) / 2",
        "x[:-1] + (x[1:] - x[:-1]) / 2",
        "arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')",
        "l = sorted(l, key=itemgetter('time'), reverse=True)",
        "l = sorted(l, key=lambda a: a['time'], reverse=True)",
        "df.loc[df[0].str.contains('(Hel|Just)')]",
        "re.search('\\\\[(.*)\\\\]', your_string).group(1)",
        "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]",
        "\"\"\"The big brown fox is brown\"\"\".count('brown')",
        "json.loads(request.body)",
        "urllib.request.urlretrieve(url, file_name)",
        "text.split()",
        "text.split(',')",
        "line.split()",
        "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in s]",
        "sorted(list_of_strings, key=lambda s: s.split(',')[1])",
        "subprocess.check_call('vasp | tee tee_output', shell=True)",
        "[element for element in lst if isinstance(element, int)]",
        "[element for element in lst if not isinstance(element, str)]",
        "newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])",
        "newlist = sorted(l, key=itemgetter('name'), reverse=True)",
        "list_of_dicts.sort(key=operator.itemgetter('name'))",
        "list_of_dicts.sort(key=operator.itemgetter('age'))",
        "df.groupby('prots').sum().sort('scores', ascending=False)",
        "\"\"\",\"\"\".join(trans['category'])",
        "\"\"\"\"\"\".join(['A', 'B', 'C', 'D'])",
        "json.load(urllib.request.urlopen('url'))",
        "[x for x in sents if not x.startswith('@$\\t') and not x.startswith('#')]",
        "Entry.objects.filter(pub_date__contains='08:00')",
        "list.sort(key=lambda item: (item['points'], item['time']))",
        "(t - datetime.datetime(1970, 1, 1)).total_seconds()",
        "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'long.file.name.jpg')",
        "import imp\nimp.reload(module)",
        "struct.unpack('H', struct.pack('h', number))",
        "numlist = [float(x) for x in numlist]",
        "df.to_csv(filename, index=False)",
        "json_data = json.loads(unescaped)",
        "[chr(i) for i in range(127)]",
        "newFile.write(struct.pack('5B', *newFileBytes))",
        "re.sub('^[A-Z0-9]*(?![a-z])', '', string)",
        "list(dict.keys())[-1]",
        "print('hi there', file=f)",
        "f = open('myfile', 'w')\nf.write('hi there\\n')\nf.close()",
        "with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')",
        "s.encode('iso-8859-15')",
        "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]",
        "re.findall('Test([0-9.]*[0-9]+)', text)",
        "re.findall('Test([\\\\d.]*\\\\d+)', text)",
        "os.system('powershell.exe', 'script.ps1')",
        "b.sort(key=lambda x: x[1][2])",
        "list(cf.get_range().get_keys())",
        "datetime.datetime.now()",
        "next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)",
        "a[:] = [(x - 13) for x in a]",
        "random.choice(os.listdir('C:\\\\'))",
        "max(x.min(), x.max(), key=abs)",
        "re.findall('\"(http.*?)\"', s, re.MULTILINE | re.DOTALL)",
        "re.findall('http://[^t][^s\"]+\\\\.html', document)",
        "mystring.replace(' ', '! !').split('!')",
        "open(path, 'r')",
        "[[sum(item) for item in zip(*items)] for items in zip(*data)]",
        "a[:, (np.newaxis)]"
    ],
    "annotations": [
        "send a signal `signal.SIGUSR1` to the current process",
        "decode a hex string '4a4b4c' to UTF-8.",
        "check if all elements in list `myList` are identical",
        "format number of spaces between strings `Python`, `:` and `Very Good` to be `20`",
        "",
        "get rid of None values in dictionary `kwargs`",
        "get rid of None values in dictionary `kwargs`",
        "capture final output of a chain of system commands `ps -ef | grep something | wc -l`",
        "concatenate a list of strings `['a', 'b', 'c']`",
        "find intersection data between series `s1` and series `s2`",
        "sending http headers to `client`",
        "Format a datetime string `when` to extract date only",
        "split a multi-line string `inputString` into separate strings",
        "Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`",
        "concatenate elements of list `b` by a colon \":\"",
        "get the first object from a queryset in django model `Entry`",
        "Calculate sum over all rows of 2D numpy array",
        "enable warnings using action 'always'",
        "concatenate items of list `l` with a space ' '",
        "run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable",
        "",
        "convert a string `my_string` with dot and comma into a float number `my_float`",
        "convert a string `123,456.908` with dot and comma into a floating number",
        "set pythonpath in python script.",
        "split string 'Words, words, words.' using a regex '(\\\\W+)'",
        "open a file `Output.txt` in append mode",
        "download a file \"http://www.example.com/songs/mp3.mp3\" over HTTP and save to \"mp3.mp3\"",
        "download a file `url` over HTTP and save to `file_name`",
        "download a file 'http://www.example.com/' over HTTP",
        "download a file `url` over HTTP",
        "download a file `url` over HTTP and save to \"10MB\"",
        "argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`",
        "remove key 'c' from dictionary `d`",
        "Create new DataFrame object by merging columns \"key\" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively",
        "Split a string `s` by space with `4` splits",
        "read keyboard-input",
        "enable debug mode on Flask application `app`",
        "python save list `mylist` to file object 'save.txt'",
        "Multiply a matrix `P` with a 3d tensor `T` in scipy",
        "Create 3d array of zeroes of size `(3,3,3)`",
        "cut off the last word of a sentence `content`",
        "convert scalar `x` to array",
        "sum all elements of nested list `L`",
        "convert hex string '470FC614' to a float number",
        "Multiple each value by `2` for all keys in a dictionary `my_dict`",
        "running bash script 'sleep.sh'",
        "Join elements of list `l` with a comma `,`",
        "make a comma-separated string from a list `myList`",
        "reverse the list that contains 1 to 10",
        "remove substring 'bag,' from a string 'lamp, bag, mirror'",
        "Reverse the order of words, delimited by `.`, in string `s`",
        "convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'",
        "parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'",
        "get the date 7 days before the current date",
        "sum elements at index `column` of each list in list `data`",
        "sum columns of a list `array`",
        "encode binary string 'your string' to base64 code",
        "combine list of dictionaries `dicts` with the same keys in each list to a single dictionary",
        "Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`",
        "",
        "identify duplicate values in list `mylist`",
        "Insert directory 'apps' into directory `__file__`",
        "modify sys.path for python module `subdir`",
        "Insert a 'None' value into a SQLite3 table.",
        "flatten list `list_of_menuitems`",
        "append elements of a set `b` to a list `a`",
        "",
        "write the data of dataframe `df` into text file `np.txt`",
        "write content of DataFrame `df` into text file 'c:\\\\data\\\\pandas.txt'",
        "Split a string `x` by last occurrence of character `-`",
        "get the last part of a string before the character '-'",
        "upload file using FTP",
        "add one to the hidden web element with id 'XYZ' with selenium python script",
        "create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`",
        "print a list `l` and move first 3 elements to the end of the list",
        "loop over files in directory '.'",
        "loop over files in directory `source`",
        "create a random list of integers",
        "",
        "Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`",
        "filter rows in pandas starting with alphabet 'f' using regular expression.",
        "print a 2 dimensional list `tab` as a table with delimiters",
        "pandas: delete rows in dataframe `df` based on multiple columns values",
        "format the variables `self.goals` and `self.penalties` using string formatting",
        "format string \"({} goals, ${})\" with variables `goals` and `penalties`",
        "format string \"({0.goals} goals, ${0.penalties})\"",
        "convert list of lists `L` to list of integers",
        "combine elements of each list in list `L` into digits of a single integer",
        "convert a list of lists `L` to list of integers",
        "write the elements of list `lines` concatenated by special character '\\n' to file `myfile`",
        "removing an element from a list based on a predicate 'X' or 'N'",
        "Remove duplicate words from a string `text` using regex",
        "count non zero values in each column in pandas data frame",
        "search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'",
        "split string 'QH QD JC KD JS' into a list on white spaces",
        "search for occurrences of regex pattern '>.*<' in xml string `line`",
        "erase all the contents of a file `filename`",
        "convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'",
        "find the index of a list with the first element equal to '332' within the list of lists `thelist`",
        "lower a string `text` and remove non-alphanumeric characters aside from space",
        "remove all non-alphanumeric characters except space from a string `text` and lower it",
        "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.",
        "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.",
        "loop over a list `mylist` if sublists length equals 3",
        "initialize a list `lst` of 100 objects Object()",
        "create list `lst` containing 100 instances of object `Object`",
        "get the content of child tag with`href` attribute whose parent has css `someclass`",
        "joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes",
        "use `%s` operator to print variable values `str1` inside a string",
        "",
        "check if directory `directory ` exists and create it if necessary",
        "check if a directory `path` exists and create it if necessary",
        "check if a directory `path` exists and create it if necessary",
        "check if a directory `path` exists and create it if necessary",
        "Replace a separate word 'H3' by 'H1' in a string 'text'",
        "substitute ASCII letters in string 'aas30dsa20' with empty string ''",
        "get digits only from a string `aas30dsa20` using lambda function",
        "access a tag called \"name\" in beautifulsoup `soup`",
        "get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`",
        "Create new matrix object  by concatenating data from matrix A and matrix B",
        "concat two matrices `A` and `B` in numpy",
        "Get the characters count in a file `filepath`",
        "count the occurrences of item \"a\" in list `l`",
        "count the occurrences of items in list `l`",
        "count the occurrences of items in list `l`",
        "count the occurrences of items in list `l`",
        "count the occurrences of item \"b\" in list `l`",
        "copy file `srcfile` to directory `dstdir`",
        "find the key associated with the largest value in dictionary `x` whilst key is non-zero value",
        "get the largest key whose not associated with value of 0 in dictionary `x`",
        "Put the curser at beginning of the file",
        "combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`",
        "remove key 'ele' from dictionary `d`",
        "Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years",
        "merge list `['it']` and list `['was']` and list `['annoying']` into one list",
        "increment a value with leading zeroes in a number `x`",
        "check if a pandas dataframe `df`'s index is sorted",
        "Convert tuple `t` to list",
        "Convert list `t` to tuple",
        "Convert tuple `level1` to list",
        "send the output of pprint object `dataobject` to file `logFile`",
        "get index of rows in column 'BoolCol'",
        "Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True",
        "get list of indexes of rows where column 'BoolCol' values match True",
        "get index of rows in dataframe `df` which column 'BoolCol' matches value True",
        "change working directory to the directory `owd`",
        "insert data from a string `testfield` to sqlite db `c`",
        "decode string \"\\\\x89\\\\n\" into a normal string",
        "convert a raw string `raw_string` into a normal string",
        "convert a raw string `raw_byte_string` into a normal string",
        "split a string `s` with into all strings of repeated characters",
        "scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none",
        "do a scatter plot with empty circles",
        "remove a div with a id `main-content` using beautifulsoup",
        "filter rows containing key word `ball` in column `ids`",
        "convert index at level 0 into a column in dataframe `df`",
        "Add indexes in a data frame `df` to a column `index1`",
        "convert pandas index in a dataframe to columns",
        "Get reverse of list items from list 'b' using extended slicing",
        "join each element in array `a` with element at the same index in array `b` as a tuple",
        "zip two 2-d arrays `a` and `b`",
        "convert list `list_of_ints` into a comma separated string",
        "Send a post request with raw data `DATA` and basic authentication with `username` and `password`",
        "Find last occurrence of character '}' in string \"abcd}def}\"",
        "Iterate ove list `[1, 2, 3]` using list comprehension",
        "extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples",
        "get the filename without the extension from file 'hemanth.txt'",
        "create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it",
        "create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`",
        "select rows in a dataframe `df` column 'closing_price' between two values 99 and 101",
        "replace all occurences of newlines `\\n` with `<br>` in dataframe `df`",
        "create a list containing each two adjacent letters in string `word` as its elements",
        "Get a list of pairs from a string `word` using lambda function",
        "extract a url from a string `myString`",
        "extract a url from a string `myString`",
        "remove all special characters, punctuation and spaces from a string `mystring` using regex",
        "create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'",
        "Create multidimensional array `matrix` with 3 rows and 2 columns in python",
        "replace spaces with underscore",
        "get an absolute file path of file 'mydir/myfile.txt'",
        "split string `my_string` on white spaces",
        "get filename without extension from file `filename`",
        "get a list containing the sum of each element `i` in list `l` plus the previous elements",
        "split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result",
        "shuffle columns of an numpy array 'r'",
        "copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'",
        "find a value within nested json 'data' where the key inside another key 'B' is unknown.",
        "check characters of string `string` are true predication of function `predicate`",
        "determine number of files on a drive with python",
        "",
        "convert string `user_input` into a list of integers `user_list`",
        "Get a list of integers by splitting  a string `user` with comma",
        "",
        "sort a list of objects `ut`, based on a function `cmpfun` in descending order",
        "reverse list `ut` based on the `count` attribute of each object",
        "click a href button 'Send' with selenium",
        "click a href button having text `Send InMail` with selenium",
        "click a href button with text 'Send InMail' with selenium",
        "cast an int `i` to a string and concat to string 'ME'",
        "",
        "prepend the line '#test firstline\\n' to the contents of file 'infile' and save as the file 'outfile'",
        "sort a list `l` by length of value in tuple",
        "split string `s` by words that ends with 'd'",
        "return `True` if string `foobarrrr` contains regex `ba[rzd]`",
        "Removing duplicates in list `t`",
        "Removing duplicates in list `source_list`",
        "Removing duplicates in list `abracadabra`",
        "Convert array `a` into a list",
        "Convert the first row of numpy matrix `a` to a list",
        "In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`",
        "convert elements of each tuple in list `l` into a string  separated by character `@`",
        "convert each tuple in list `l` to a string with '@' separating the tuples' elements",
        "get the html from the current web page of a Selenium driver",
        "Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`",
        "select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`",
        "Sort dictionary `o` in ascending order based on its keys and items",
        "get sorted list of keys of dict `d`",
        "",
        "convert string \"1\" into integer",
        "function to convert strings into integers",
        "convert items in `T1` to integers",
        "call a shell script `./test.sh` using subprocess",
        "call a shell script `notepad` using subprocess",
        "combine lists `l1` and `l2`  by alternating their elements",
        "encode string 'data to be encoded'",
        "encode a string `data to be encoded` to `ascii` encoding",
        "parse tab-delimited CSV file 'text.txt' into a list",
        "Get attribute `my_str` of object `my_object`",
        "group a list of dicts `LD` into one dict by key",
        "",
        "convert unicode string u\"{'code1':1,'code2':1}\" into dictionary",
        "find all words in a string `mystring` that start with the `$` sign",
        "remove any url within string `text`",
        "replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros",
        "calculate mean across dimension in a 2d array `a`",
        "running r script '/pathto/MyrScript.r' from python",
        "run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'",
        "add a header to a csv file",
        "replacing nan in the dataframe `df` with row average",
        "Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'",
        "Call a base class's class method `do` from derived class `Derived`",
        "selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1",
        "separate words delimited by one or more spaces into a list",
        "length of longest element in list `words`",
        "get the value associated with unicode key 'from_user' of first dictionary in list `result`",
        "Retrieve each line from a file 'File.txt' as a list",
        "swap keys with values in a dictionary `a`",
        "Open a file `path/to/FILE_NAME.ext` in write mode",
        "",
        "Check if any key in the dictionary `dict1` starts with the string `EMP$$`",
        "create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'",
        "convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`",
        "print elements of list `list` seperated by tabs `\\t`",
        "print unicode string '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' with utf-8",
        "Encode a latin character in string `Sopet\\xc3\\xb3n` properly",
        "resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`",
        "regex, find \"n\"s only in the middle of string `s`",
        "display the float `1/3*100` as a percentage",
        "sort a list of dictionary `mylist` by the key `title`",
        "sort a list `l` of dicts by dict value 'title'",
        "sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.",
        "find 10 largest differences between each respective elements of list `l1` and list `l2`",
        "BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'",
        "write records in dataframe `df` to table 'test' in schema 'a_schema'",
        "Extract brackets from string `s`",
        "remove duplicate elements from list 'L'",
        "read a file `file` without newlines",
        "get the position of item 1 in `testlist`",
        "get the position of item 1 in `testlist`",
        "get the position of item 1 in `testlist`",
        "get the position of item 1 in `testlist`",
        "get the position of item `element` in list `testlist`",
        "get the position of item `element` in list `testlist`",
        "find the first element of the tuple with the maximum second element in a list of tuples `lis`",
        "get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`",
        "Make a delay of 1 second",
        "convert list of tuples `L` to a string",
        "Django set default value of field `b` equal to '0000000'",
        "Sort lis `list5` in ascending order based on the degrees value of its elements",
        "",
        "convert a list  into a generator object",
        "remove elements from list `oldlist` that have an index number mentioned in list `removelist`",
        "Open a file `yourfile.txt` in write mode",
        "get attribute 'attr' from object `obj`",
        "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple",
        "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line",
        "",
        "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`",
        "unzip list `original`",
        "unzip list `original` and return a generator",
        "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`",
        "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None",
        "encode `Decimal('3.9')` to a JSON string",
        "Add key \"mynewkey\" to dictionary `d` with value \"mynewvalue\"",
        "Add key 'a' to dictionary `data` with value 1",
        "Add key 'a' to dictionary `data` with value 1",
        "Add key 'a' to dictionary `data` with value 1",
        "find maximal value in matrix `matrix`",
        "Round number `answer` to 2 precision after the decimal point",
        "extract ip address from an html string",
        "filter dataframe `df` by values in column `A` that appear more than once",
        "append each line in file `myfile` into a list",
        "Get a list of integers `lst` from a file `filename.txt`",
        "add color bar with image `mappable` to plot `plt`",
        "count most frequent 100 words in column 'text' of dataframe `df`",
        "",
        "generate all 2-element subsets of tuple `(1, 2, 3)`",
        "get a value of datetime.today() in the UTC time zone",
        "Get a new list `list2`by removing empty list from a list of lists `list1`",
        "Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`",
        "Django response with JSON `data`",
        "get all text that is not enclosed within square brackets in string `example_str`",
        "Use a regex to get all text in a string `example_str` that is not surrounded by square brackets",
        "get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'",
        "match regex '\\\\((.*?)\\\\)|(\\\\w)' with string '(zyx)bc'",
        "match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`",
        "formate each string cin list `elements` into pattern '%{0}%'",
        "Open a background process 'background-process' with arguments 'arguments'",
        "get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'",
        "convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary",
        "average each two columns of array `data`",
        "double backslash escape all double quotes in string `s`",
        "split a string into a list of words and whitespace",
        "",
        "reverse the keys and values in a dictionary `myDictionary`",
        "finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.",
        "check if object `obj` is a string",
        "check if object `o` is a string",
        "check if object `o` is a string",
        "check if `obj_to_test` is a string",
        "append list `list1` to `list2`",
        "append list `mylog` to `list1`",
        "append list `a` to `c`",
        "append items in list `mylog` to `list1`",
        "append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`",
        "Initialize `SECRET_KEY` in flask config with `Your_secret_string `",
        "unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'",
        "find the index of an element 'MSFT' in a list `stocks_list`",
        "rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable",
        "remove symbols from a string `s`",
        "Get the current directory of a script",
        "Find octal characters matches from a string `str` using regex",
        "split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\\\b)'",
        "Split string `input` at every space followed by an upper-case letter",
        "send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`",
        "write bytes `bytes_` to a file `filename` in python 3",
        "get a list from a list `lst` with values mapped into a dictionary `dct`",
        "find duplicate names in column 'name' of the dataframe `x`",
        "truncate float 1.923328437452 to 3 decimal places",
        "sort list `li` in descending order based on the date value in second element of each list in list `li`",
        "place the radial ticks in plot `ax` at 135 degrees",
        "check if path `my_path` is an absolute path",
        "get number of keys in dictionary `yourdict`",
        "count the number of keys in dictionary `yourdictfile`",
        "pandas dataframe get first row of each group by 'id'",
        "split a list in first column  into multiple columns keeping other columns as well in pandas data frame",
        "extract attributes 'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' from string `data`",
        "Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`",
        "Call a subprocess with arguments `c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat` that may contain spaces",
        "reverse a priority queue `q` in python without using classes",
        "make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`",
        "find all matches of regex pattern '([a-fA-F\\\\d]{32})' in string `data`",
        "Get the length of list `my_list`",
        "Getting the length of array `l`",
        "Getting the length of array `s`",
        "Getting the length of `my_tuple`",
        "Getting the length of `my_string`",
        "remove escape character from string \"\\\\a\"",
        "replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.",
        "remove directory tree '/folder_name'",
        "create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`",
        "reverse sort Counter `x` by values",
        "reverse sort counter `x` by value",
        "append a numpy array 'b' to a numpy array 'a'",
        "numpy concatenate two arrays `a` and `b` along the first axis",
        "numpy concatenate two arrays `a` and `b` along the second axis",
        "numpy concatenate two arrays `a` and `b` along the first axis",
        "numpy concatenate two arrays `a` and `b` along the first axis",
        "fetch address information for host 'google.com' ion port 80",
        "add a column 'day' with value 'sat' to dataframe `df`",
        "return a 401 unauthorized in django",
        "Flask set folder 'wherever' as the default template folder",
        "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?",
        "sort a list of lists 'c2' such that third row comes first",
        "",
        "",
        "set font `Arial` to display non-ascii characters in matplotlib",
        "Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal",
        "get html source of Selenium WebElement `element`",
        "Get the integer location of a key `bob` in a pandas data frame",
        "open a 'gnome' terminal from python script and run  'sudo apt-get update' command.",
        "add an item with key 'third_key' and value 1 to an dictionary `my_dict`",
        "declare an array",
        "Insert item `12` to a list `my_list`",
        "add an entry 'wuggah' at the beginning of list `myList`",
        "convert a hex-string representation to actual bytes",
        "select the last column of dataframe `df`",
        "get the first value from dataframe `df` where column 'Letters' is equal to 'C'",
        "converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix",
        "get the type of `i`",
        "determine the type of variable `v`",
        "get the type of variable `variable_name`",
        "get the 5th item of a generator",
        "Print a string `word` with string format",
        "join a list of strings `list` using a space ' '",
        "create list `y` containing two empty lists",
        "read a file 'C:/name/MyDocuments/numbers' into a list `data`",
        "delete all occurrences of character 'i' in string 'it is icy'",
        "delete all instances of a character 'i' in a string 'it is icy'",
        "delete all characters \"i\" in string \"it is icy\"",
        "Drop rows of pandas dataframe `df` having NaN in column at index \"1\"",
        "get elements from list `myList`, that have a field `n` value 30",
        "converting list of strings `intstringlist` to list of integer `nums`",
        "convert list of string numbers into list of integers",
        "print \".\" without newline",
        "round off the float that is the product of `2.52 * 100` and convert it to an int",
        "Find all files in directory \"/mydir\" with extension \".txt\"",
        "Find all files in directory \"/mydir\" with extension \".txt\"",
        "Find all files in directory \"/mydir\" with extension \".txt\"",
        "plot dataframe `df` without a legend",
        "loop through the IP address range \"192.168.x.x\"",
        "loop through the IP address range \"192.168.x.x\"",
        "loop through the IP address range \"192.168.x.x\"",
        "Sum the corresponding decimal values for binary values of each boolean element in list `x`",
        "write multiple strings `line1`, `line2` and `line3` in one line in a file `target`",
        "Convert list of lists `data` into a flat list",
        "Print new line character as `\\n` in a string `foo\\nbar`",
        "remove last comma character ',' in string `s`",
        "calculate the mean of each element in array `x` with the element previous to it",
        "get an array of the mean of each two consecutive values in numpy array `x`",
        "load data containing `utf-8` from file `new.txt` into numpy array `arr`",
        "reverse sort list of dicts `l` by value for key `time`",
        "Sort a list of dictionary `l` based on key `time` in descending order",
        "get rows of dataframe `df` that match regex '(Hel|Just)'",
        "find the string in `your_string` between two special characters \"[\" and \"]\"",
        "",
        "count number of times string 'brown' occurred in string 'The big brown fox is brown'",
        "decode json string `request.body` to python dict",
        "download the file from url `url` and save it under file `file_name`",
        "split string `text` by space",
        "split string `text` by \",\"",
        "Split string `line` into a list by whitespace",
        "replace dot characters  '.' associated with ascii letters in list `s` with space ' '",
        "sort list `list_of_strings` based on second index of each string `s`",
        "call multiple bash function \u2018vasp\u2019 and \u2018tee tee_output\u2019 using \u2018|\u2019",
        "eliminate all strings from list `lst`",
        "get all the elements except strings from the list 'lst'.",
        "Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`",
        "sort a list of dictionaries `l` by values in key `name` in descending order",
        "",
        "",
        "",
        "join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`",
        "concatenate array of strings `['A', 'B', 'C', 'D']` into a string",
        "get json data from restful service 'url'",
        "Remove all strings from a list a strings `sents` where the values starts with `@$\\t` or `#`",
        "django filter by hour",
        "sort a list of dictionary `list` first by key `points` and then by `time`",
        "convert datetime object `(1970, 1, 1)` to seconds",
        "insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.",
        "reload a module `module`",
        "Convert integer `number` into an unassigned integer",
        "convert int values in list `numlist` to float",
        "write dataframe `df`, excluding index, to a csv file",
        "convert a urllib unquoted string `unescaped` to a json data `json_data`",
        "Create a list containing all ascii characters as its elements",
        "write `newFileBytes` to a binary file `newFile`",
        "python regex - check for a capital letter with a following lowercase in string `string`",
        "get the last key of dictionary `dict`",
        "write line \"hi there\" to file `f`",
        "write line \"hi there\" to file `myfile`",
        "write line \"Hello\" to file `somefile.txt`",
        "convert unicode string `s` to ascii",
        "Django get maximum value associated with field 'added' in model `AuthorizedEmail`",
        "Find all numbers and dots from a string `text` using regex",
        "python regex  to find all numbers and dots from 'text'",
        "execute script 'script.ps1' using 'powershell.exe' shell",
        "Sort a list of tuples `b` by third item in the tuple",
        "get a list of all keys in Cassandra database `cf` with pycassa",
        "create a datetime with the current date & time",
        "get the index of an integer `1` from a list `lst` if the list also contains boolean items",
        "subtract 13 from every number in a list `a`",
        "choose a random file from the directory contents of the C drive, `C:\\\\`",
        "get the highest element in absolute value in a numpy matrix `x`",
        "Get all urls within text `s`",
        "match urls whose domain doesn't start with `t` from string `document` using regex",
        "split a string `mystring` considering the spaces ' '",
        "open file `path` with mode 'r'",
        "sum elements at the same index in list `data`",
        "add a new axis to array `a`"
    ],
    "lib_fn_snippet_ids": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        13,
        14,
        15,
        17,
        18,
        19,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        30,
        35,
        37,
        38,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        54,
        55,
        56,
        57,
        60,
        61,
        62,
        66,
        69,
        70,
        71,
        74,
        75,
        76,
        77,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        92,
        93,
        94,
        95,
        96,
        98,
        99,
        100,
        103,
        104,
        105,
        106,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        121,
        124,
        125,
        127,
        128,
        135,
        136,
        137,
        138,
        139,
        140,
        145,
        147,
        150,
        159,
        160,
        161,
        163,
        164,
        166,
        167,
        168,
        171,
        172,
        173,
        174,
        175,
        179,
        180,
        181,
        182,
        183,
        186,
        187,
        188,
        190,
        191,
        192,
        198,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        209,
        210,
        211,
        213,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        232,
        233,
        235,
        236,
        240,
        242,
        243,
        245,
        246,
        247,
        249,
        250,
        252,
        253,
        254,
        256,
        257,
        261,
        264,
        265,
        267,
        268,
        269,
        270,
        271,
        272,
        273,
        274,
        276,
        278,
        279,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        290,
        291,
        292,
        295,
        297,
        298,
        299,
        300,
        302,
        304,
        305,
        306,
        311,
        312,
        313,
        314,
        315,
        316,
        319,
        320,
        321,
        322,
        324,
        325,
        326,
        327,
        328,
        329,
        334,
        337,
        339,
        340,
        341,
        342,
        343,
        345,
        348,
        349,
        351,
        352,
        353,
        356,
        357,
        360,
        361,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        371,
        372,
        374,
        375,
        378,
        390,
        395,
        399,
        400,
        401,
        402,
        403,
        404,
        405,
        406,
        407,
        408,
        409,
        412,
        413,
        415,
        416,
        417,
        418,
        420,
        421,
        423,
        425,
        426,
        427,
        430,
        431,
        432,
        434,
        435,
        436,
        437,
        438,
        442,
        443,
        444,
        445,
        446,
        447,
        448,
        451,
        452,
        453,
        454,
        459,
        460,
        461,
        462,
        464,
        465,
        467,
        468,
        469,
        470,
        471,
        472,
        474,
        475,
        476,
        478,
        480,
        482,
        483,
        484,
        485,
        486,
        487,
        488
    ]
}